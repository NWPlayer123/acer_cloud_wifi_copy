// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vplex_ias_service_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace ias {

namespace {

const ::google::protobuf::Descriptor* AbstractRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbstractRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbstractResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbstractResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckVirtualDeviceCredentialsRenewalRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckVirtualDeviceCredentialsRenewalRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckVirtualDeviceCredentialsRenewalResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckVirtualDeviceCredentialsRenewalResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrAttributeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrAttributeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSessionKeyRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSessionKeyRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSessionKeyResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSessionKeyResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterVirtualDeviceRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterVirtualDeviceRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterVirtualDeviceResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterVirtualDeviceResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenewVirtualDeviceCredentialsRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenewVirtualDeviceCredentialsRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenewVirtualDeviceCredentialsResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenewVirtualDeviceCredentialsResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerKeyRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerKeyRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerKeyResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerKeyResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondToPairingRequestRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondToPairingRequestRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondToPairingRequestResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondToPairingRequestResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingPinRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingPinRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingPinResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingPinResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPairingStatusRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPairingStatusRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPairingStatusResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPairingStatusResponseType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vplex_5fias_5fservice_5ftypes_2eproto() {
  protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vplex_ias_service_types.proto");
  GOOGLE_CHECK(file != NULL);
  AbstractRequestType_descriptor_ = file->message_type(0);
  static const int AbstractRequestType_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, sessionhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, serviceticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, serviceid_),
  };
  AbstractRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbstractRequestType_descriptor_,
      AbstractRequestType::default_instance_,
      AbstractRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbstractRequestType));
  AbstractResponseType_descriptor_ = file->message_type(1);
  static const int AbstractResponseType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, errormessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, servicestandbymode_),
  };
  AbstractResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbstractResponseType_descriptor_,
      AbstractResponseType::default_instance_,
      AbstractResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbstractResponseType));
  CheckVirtualDeviceCredentialsRenewalRequestType_descriptor_ = file->message_type(2);
  static const int CheckVirtualDeviceCredentialsRenewalRequestType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalRequestType, issuedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalRequestType, serialnumber_),
  };
  CheckVirtualDeviceCredentialsRenewalRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckVirtualDeviceCredentialsRenewalRequestType_descriptor_,
      CheckVirtualDeviceCredentialsRenewalRequestType::default_instance_,
      CheckVirtualDeviceCredentialsRenewalRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVirtualDeviceCredentialsRenewalRequestType));
  CheckVirtualDeviceCredentialsRenewalResponseType_descriptor_ = file->message_type(3);
  static const int CheckVirtualDeviceCredentialsRenewalResponseType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalResponseType, expectedserialnumber_),
  };
  CheckVirtualDeviceCredentialsRenewalResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckVirtualDeviceCredentialsRenewalResponseType_descriptor_,
      CheckVirtualDeviceCredentialsRenewalResponseType::default_instance_,
      CheckVirtualDeviceCredentialsRenewalResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckVirtualDeviceCredentialsRenewalResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckVirtualDeviceCredentialsRenewalResponseType));
  StrAttributeType_descriptor_ = file->message_type(4);
  static const int StrAttributeType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrAttributeType, attributename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrAttributeType, attributevalue_),
  };
  StrAttributeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrAttributeType_descriptor_,
      StrAttributeType::default_instance_,
      StrAttributeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrAttributeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrAttributeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrAttributeType));
  GetSessionKeyRequestType_descriptor_ = file->message_type(5);
  static const int GetSessionKeyRequestType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyRequestType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyRequestType, keyattributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyRequestType, encryptedsessionkey_),
  };
  GetSessionKeyRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSessionKeyRequestType_descriptor_,
      GetSessionKeyRequestType::default_instance_,
      GetSessionKeyRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSessionKeyRequestType));
  GetSessionKeyResponseType_descriptor_ = file->message_type(6);
  static const int GetSessionKeyResponseType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyResponseType, sessionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyResponseType, encryptedsessionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyResponseType, instanceid_),
  };
  GetSessionKeyResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSessionKeyResponseType_descriptor_,
      GetSessionKeyResponseType::default_instance_,
      GetSessionKeyResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSessionKeyResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSessionKeyResponseType));
  LoginRequestType_descriptor_ = file->message_type(7);
  static const int LoginRequestType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, weaktoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, pairingtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, aceulaagreed_),
  };
  LoginRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequestType_descriptor_,
      LoginRequestType::default_instance_,
      LoginRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequestType));
  LoginResponseType_descriptor_ = file->message_type(8);
  static const int LoginResponseType_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, sessionhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, sessionsecret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, displayname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, weaktoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, oldfgsessionhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, storageregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, persistentcredentials_),
  };
  LoginResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponseType_descriptor_,
      LoginResponseType::default_instance_,
      LoginResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponseType));
  LogoutRequestType_descriptor_ = file->message_type(9);
  static const int LogoutRequestType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequestType, _inherited_),
  };
  LogoutRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequestType_descriptor_,
      LogoutRequestType::default_instance_,
      LogoutRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequestType));
  LogoutResponseType_descriptor_ = file->message_type(10);
  static const int LogoutResponseType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponseType, _inherited_),
  };
  LogoutResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResponseType_descriptor_,
      LogoutResponseType::default_instance_,
      LogoutResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResponseType));
  RegisterVirtualDeviceRequestType_descriptor_ = file->message_type(11);
  static const int RegisterVirtualDeviceRequestType_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, hardwareinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, namespace__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, weaktoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, pairingtoken_),
  };
  RegisterVirtualDeviceRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterVirtualDeviceRequestType_descriptor_,
      RegisterVirtualDeviceRequestType::default_instance_,
      RegisterVirtualDeviceRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterVirtualDeviceRequestType));
  RegisterVirtualDeviceResponseType_descriptor_ = file->message_type(12);
  static const int RegisterVirtualDeviceResponseType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceResponseType, renewaltoken_),
  };
  RegisterVirtualDeviceResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterVirtualDeviceResponseType_descriptor_,
      RegisterVirtualDeviceResponseType::default_instance_,
      RegisterVirtualDeviceResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterVirtualDeviceResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterVirtualDeviceResponseType));
  RenewVirtualDeviceCredentialsRequestType_descriptor_ = file->message_type(13);
  static const int RenewVirtualDeviceCredentialsRequestType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsRequestType, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsRequestType, issuedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsRequestType, renewaltoken_),
  };
  RenewVirtualDeviceCredentialsRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenewVirtualDeviceCredentialsRequestType_descriptor_,
      RenewVirtualDeviceCredentialsRequestType::default_instance_,
      RenewVirtualDeviceCredentialsRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenewVirtualDeviceCredentialsRequestType));
  RenewVirtualDeviceCredentialsResponseType_descriptor_ = file->message_type(14);
  static const int RenewVirtualDeviceCredentialsResponseType_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, secretdevicecredentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, cleardevicecredentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, renewaltoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, attestprogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, issuedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, attesttmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, devicecert_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, platformkey_),
  };
  RenewVirtualDeviceCredentialsResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenewVirtualDeviceCredentialsResponseType_descriptor_,
      RenewVirtualDeviceCredentialsResponseType::default_instance_,
      RenewVirtualDeviceCredentialsResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewVirtualDeviceCredentialsResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenewVirtualDeviceCredentialsResponseType));
  GetServerKeyRequestType_descriptor_ = file->message_type(15);
  static const int GetServerKeyRequestType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyRequestType, userid_),
  };
  GetServerKeyRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerKeyRequestType_descriptor_,
      GetServerKeyRequestType::default_instance_,
      GetServerKeyRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerKeyRequestType));
  GetServerKeyResponseType_descriptor_ = file->message_type(16);
  static const int GetServerKeyResponseType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyResponseType, serverkey_),
  };
  GetServerKeyResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerKeyResponseType_descriptor_,
      GetServerKeyResponseType::default_instance_,
      GetServerKeyResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerKeyResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerKeyResponseType));
  RequestPairingRequestType_descriptor_ = file->message_type(17);
  static const int RequestPairingRequestType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, hosthardwareid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, hostdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, devicehardwareid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, pairingattributes_),
  };
  RequestPairingRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingRequestType_descriptor_,
      RequestPairingRequestType::default_instance_,
      RequestPairingRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingRequestType));
  RequestPairingResponseType_descriptor_ = file->message_type(18);
  static const int RequestPairingResponseType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingResponseType, pairingtoken_),
  };
  RequestPairingResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingResponseType_descriptor_,
      RequestPairingResponseType::default_instance_,
      RequestPairingResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingResponseType));
  RespondToPairingRequestRequestType_descriptor_ = file->message_type(19);
  static const int RespondToPairingRequestRequestType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestRequestType, transactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestRequestType, acceptedpairing_),
  };
  RespondToPairingRequestRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondToPairingRequestRequestType_descriptor_,
      RespondToPairingRequestRequestType::default_instance_,
      RespondToPairingRequestRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondToPairingRequestRequestType));
  RespondToPairingRequestResponseType_descriptor_ = file->message_type(20);
  static const int RespondToPairingRequestResponseType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestResponseType, _inherited_),
  };
  RespondToPairingRequestResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondToPairingRequestResponseType_descriptor_,
      RespondToPairingRequestResponseType::default_instance_,
      RespondToPairingRequestResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondToPairingRequestResponseType));
  RequestPairingPinRequestType_descriptor_ = file->message_type(21);
  static const int RequestPairingPinRequestType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinRequestType, _inherited_),
  };
  RequestPairingPinRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingPinRequestType_descriptor_,
      RequestPairingPinRequestType::default_instance_,
      RequestPairingPinRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingPinRequestType));
  RequestPairingPinResponseType_descriptor_ = file->message_type(22);
  static const int RequestPairingPinResponseType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinResponseType, pairingpin_),
  };
  RequestPairingPinResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingPinResponseType_descriptor_,
      RequestPairingPinResponseType::default_instance_,
      RequestPairingPinResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingPinResponseType));
  GetPairingStatusRequestType_descriptor_ = file->message_type(23);
  static const int GetPairingStatusRequestType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusRequestType, pairingtoken_),
  };
  GetPairingStatusRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPairingStatusRequestType_descriptor_,
      GetPairingStatusRequestType::default_instance_,
      GetPairingStatusRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPairingStatusRequestType));
  GetPairingStatusResponseType_descriptor_ = file->message_type(24);
  static const int GetPairingStatusResponseType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusResponseType, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusResponseType, username_),
  };
  GetPairingStatusResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPairingStatusResponseType_descriptor_,
      GetPairingStatusResponseType::default_instance_,
      GetPairingStatusResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPairingStatusResponseType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vplex_5fias_5fservice_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbstractRequestType_descriptor_, &AbstractRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbstractResponseType_descriptor_, &AbstractResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVirtualDeviceCredentialsRenewalRequestType_descriptor_, &CheckVirtualDeviceCredentialsRenewalRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckVirtualDeviceCredentialsRenewalResponseType_descriptor_, &CheckVirtualDeviceCredentialsRenewalResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrAttributeType_descriptor_, &StrAttributeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSessionKeyRequestType_descriptor_, &GetSessionKeyRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSessionKeyResponseType_descriptor_, &GetSessionKeyResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequestType_descriptor_, &LoginRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponseType_descriptor_, &LoginResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequestType_descriptor_, &LogoutRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResponseType_descriptor_, &LogoutResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterVirtualDeviceRequestType_descriptor_, &RegisterVirtualDeviceRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterVirtualDeviceResponseType_descriptor_, &RegisterVirtualDeviceResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenewVirtualDeviceCredentialsRequestType_descriptor_, &RenewVirtualDeviceCredentialsRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenewVirtualDeviceCredentialsResponseType_descriptor_, &RenewVirtualDeviceCredentialsResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerKeyRequestType_descriptor_, &GetServerKeyRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerKeyResponseType_descriptor_, &GetServerKeyResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingRequestType_descriptor_, &RequestPairingRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingResponseType_descriptor_, &RequestPairingResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondToPairingRequestRequestType_descriptor_, &RespondToPairingRequestRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondToPairingRequestResponseType_descriptor_, &RespondToPairingRequestResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingPinRequestType_descriptor_, &RequestPairingPinRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingPinResponseType_descriptor_, &RequestPairingPinResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPairingStatusRequestType_descriptor_, &GetPairingStatusRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPairingStatusResponseType_descriptor_, &GetPairingStatusResponseType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vplex_5fias_5fservice_5ftypes_2eproto() {
  delete AbstractRequestType::default_instance_;
  delete AbstractRequestType_reflection_;
  delete AbstractResponseType::default_instance_;
  delete AbstractResponseType_reflection_;
  delete CheckVirtualDeviceCredentialsRenewalRequestType::default_instance_;
  delete CheckVirtualDeviceCredentialsRenewalRequestType_reflection_;
  delete CheckVirtualDeviceCredentialsRenewalResponseType::default_instance_;
  delete CheckVirtualDeviceCredentialsRenewalResponseType_reflection_;
  delete StrAttributeType::default_instance_;
  delete StrAttributeType_reflection_;
  delete GetSessionKeyRequestType::default_instance_;
  delete GetSessionKeyRequestType_reflection_;
  delete GetSessionKeyResponseType::default_instance_;
  delete GetSessionKeyResponseType_reflection_;
  delete LoginRequestType::default_instance_;
  delete LoginRequestType_reflection_;
  delete LoginResponseType::default_instance_;
  delete LoginResponseType_reflection_;
  delete LogoutRequestType::default_instance_;
  delete LogoutRequestType_reflection_;
  delete LogoutResponseType::default_instance_;
  delete LogoutResponseType_reflection_;
  delete RegisterVirtualDeviceRequestType::default_instance_;
  delete RegisterVirtualDeviceRequestType_reflection_;
  delete RegisterVirtualDeviceResponseType::default_instance_;
  delete RegisterVirtualDeviceResponseType_reflection_;
  delete RenewVirtualDeviceCredentialsRequestType::default_instance_;
  delete RenewVirtualDeviceCredentialsRequestType_reflection_;
  delete RenewVirtualDeviceCredentialsResponseType::default_instance_;
  delete RenewVirtualDeviceCredentialsResponseType_reflection_;
  delete GetServerKeyRequestType::default_instance_;
  delete GetServerKeyRequestType_reflection_;
  delete GetServerKeyResponseType::default_instance_;
  delete GetServerKeyResponseType_reflection_;
  delete RequestPairingRequestType::default_instance_;
  delete RequestPairingRequestType_reflection_;
  delete RequestPairingResponseType::default_instance_;
  delete RequestPairingResponseType_reflection_;
  delete RespondToPairingRequestRequestType::default_instance_;
  delete RespondToPairingRequestRequestType_reflection_;
  delete RespondToPairingRequestResponseType::default_instance_;
  delete RespondToPairingRequestResponseType_reflection_;
  delete RequestPairingPinRequestType::default_instance_;
  delete RequestPairingPinRequestType_reflection_;
  delete RequestPairingPinResponseType::default_instance_;
  delete RequestPairingPinResponseType_reflection_;
  delete GetPairingStatusRequestType::default_instance_;
  delete GetPairingStatusRequestType_reflection_;
  delete GetPairingStatusResponseType::default_instance_;
  delete GetPairingStatusResponseType_reflection_;
}

void protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035vplex_ias_service_types.proto\022\tvplex.i"
    "as\"\277\001\n\023AbstractRequestType\022\017\n\007Version\030\001 "
    "\002(\t\022\021\n\tMessageId\030\002 \002(\t\022\020\n\010DeviceId\030\003 \001(\006"
    "\022\016\n\006Region\030\007 \001(\t\022\017\n\007Country\030\010 \001(\t\022\020\n\010Lan"
    "guage\030\t \001(\t\022\025\n\rSessionHandle\030\n \001(\006\022\025\n\rSe"
    "rviceTicket\030\013 \001(\014\022\021\n\tServiceId\030\014 \001(\t\"\244\001\n"
    "\024AbstractResponseType\022\017\n\007Version\030\001 \002(\t\022\020"
    "\n\010DeviceId\030\002 \001(\006\022\021\n\tMessageId\030\003 \002(\t\022\021\n\tT"
    "imeStamp\030\004 \002(\006\022\021\n\tErrorCode\030\005 \002(\021\022\024\n\014Err"
    "orMessage\030\006 \001(\t\022\032\n\022ServiceStandbyMode\030\007 "
    "\001(\010\"\216\001\n/CheckVirtualDeviceCredentialsRen"
    "ewalRequestType\0222\n\n_inherited\030\001 \002(\0132\036.vp"
    "lex.ias.AbstractRequestType\022\021\n\tIssueDate"
    "\030\002 \002(\006\022\024\n\014SerialNumber\030\003 \002(\006\"\205\001\n0CheckVi"
    "rtualDeviceCredentialsRenewalResponseTyp"
    "e\0223\n\n_inherited\030\001 \002(\0132\037.vplex.ias.Abstra"
    "ctResponseType\022\034\n\024ExpectedSerialNumber\030\002"
    " \002(\006\"A\n\020StrAttributeType\022\025\n\rAttributeNam"
    "e\030\001 \002(\t\022\026\n\016AttributeValue\030\002 \002(\t\"\255\001\n\030GetS"
    "essionKeyRequestType\0222\n\n_inherited\030\001 \002(\013"
    "2\036.vplex.ias.AbstractRequestType\022\014\n\004Type"
    "\030\002 \002(\t\0222\n\rKeyAttributes\030\003 \003(\0132\033.vplex.ia"
    "s.StrAttributeType\022\033\n\023EncryptedSessionKe"
    "y\030\004 \001(\014\"\225\001\n\031GetSessionKeyResponseType\0223\n"
    "\n_inherited\030\001 \002(\0132\037.vplex.ias.AbstractRe"
    "sponseType\022\022\n\nSessionKey\030\002 \001(\014\022\033\n\023Encryp"
    "tedSessionKey\030\003 \001(\014\022\022\n\nInstanceId\030\004 \001(\r\""
    "\274\001\n\020LoginRequestType\0222\n\n_inherited\030\001 \002(\013"
    "2\036.vplex.ias.AbstractRequestType\022\020\n\010User"
    "name\030\002 \001(\t\022\021\n\tNamespace\030\003 \002(\t\022\020\n\010Passwor"
    "d\030\004 \001(\t\022\021\n\tWeakToken\030\005 \001(\t\022\024\n\014PairingTok"
    "en\030\013 \001(\t\022\024\n\014ACEulaAgreed\030\n \001(\010\"\255\002\n\021Login"
    "ResponseType\0223\n\n_inherited\030\001 \002(\0132\037.vplex"
    ".ias.AbstractResponseType\022\025\n\rSessionHand"
    "le\030\002 \002(\006\022\025\n\rSessionSecret\030\003 \002(\014\022\021\n\tAccou"
    "ntId\030\004 \001(\t\022\016\n\006UserId\030\005 \002(\006\022\023\n\013DisplayNam"
    "e\030\006 \001(\t\022\021\n\tWeakToken\030\007 \001(\t\022\032\n\022OldFgSessi"
    "onHandle\030\010 \001(\006\022\025\n\rStorageRegion\030\t \001(\t\022\030\n"
    "\020StorageClusterId\030\n \001(\003\022\035\n\025persistentCre"
    "dentials\030\013 \001(\t\"G\n\021LogoutRequestType\0222\n\n_"
    "inherited\030\001 \002(\0132\036.vplex.ias.AbstractRequ"
    "estType\"I\n\022LogoutResponseType\0223\n\n_inheri"
    "ted\030\001 \002(\0132\037.vplex.ias.AbstractResponseTy"
    "pe\"\340\001\n RegisterVirtualDeviceRequestType\022"
    "2\n\n_inherited\030\001 \002(\0132\036.vplex.ias.Abstract"
    "RequestType\022\020\n\010Username\030\002 \002(\t\022\020\n\010Passwor"
    "d\030\003 \001(\t\022\024\n\014HardwareInfo\030\004 \002(\014\022\022\n\nDeviceN"
    "ame\030\005 \002(\t\022\021\n\tNamespace\030\006 \001(\t\022\021\n\tWeakToke"
    "n\030\007 \001(\t\022\024\n\014PairingToken\030\010 \001(\t\"n\n!Registe"
    "rVirtualDeviceResponseType\0223\n\n_inherited"
    "\030\001 \002(\0132\037.vplex.ias.AbstractResponseType\022"
    "\024\n\014RenewalToken\030\002 \001(\014\"\235\001\n(RenewVirtualDe"
    "viceCredentialsRequestType\0222\n\n_inherited"
    "\030\001 \002(\0132\036.vplex.ias.AbstractRequestType\022\024"
    "\n\014SerialNumber\030\002 \002(\006\022\021\n\tIssueDate\030\003 \002(\006\022"
    "\024\n\014RenewalToken\030\004 \002(\014\"\263\002\n)RenewVirtualDe"
    "viceCredentialsResponseType\0223\n\n_inherite"
    "d\030\001 \002(\0132\037.vplex.ias.AbstractResponseType"
    "\022\037\n\027SecretDeviceCredentials\030\002 \001(\014\022\036\n\026Cle"
    "arDeviceCredentials\030\003 \001(\014\022\024\n\014RenewalToke"
    "n\030\004 \001(\014\022\025\n\rAttestProgram\030\005 \001(\014\022\021\n\tIssueD"
    "ate\030\006 \002(\006\022\024\n\014SerialNumber\030\007 \002(\006\022\021\n\tAttes"
    "tTMD\030\010 \001(\014\022\022\n\nDeviceCert\030\t \001(\014\022\023\n\013Platfo"
    "rmKey\030\n \001(\014\"]\n\027GetServerKeyRequestType\0222"
    "\n\n_inherited\030\001 \002(\0132\036.vplex.ias.AbstractR"
    "equestType\022\016\n\006UserId\030\002 \002(\006\"b\n\030GetServerK"
    "eyResponseType\0223\n\n_inherited\030\001 \002(\0132\037.vpl"
    "ex.ias.AbstractResponseType\022\021\n\tServerKey"
    "\030\002 \001(\014\"\334\001\n\031RequestPairingRequestType\0222\n\n"
    "_inherited\030\001 \002(\0132\036.vplex.ias.AbstractReq"
    "uestType\022\026\n\016HostHardwareId\030\002 \001(\014\022\024\n\014Host"
    "DeviceId\030\003 \001(\006\022\030\n\020DeviceHardwareId\030\004 \002(\014"
    "\022\013\n\003PIN\030\005 \001(\t\0226\n\021PairingAttributes\030\006 \003(\013"
    "2\033.vplex.ias.StrAttributeType\"g\n\032Request"
    "PairingResponseType\0223\n\n_inherited\030\001 \002(\0132"
    "\037.vplex.ias.AbstractResponseType\022\024\n\014Pair"
    "ingToken\030\002 \002(\t\"\210\001\n\"RespondToPairingReque"
    "stRequestType\0222\n\n_inherited\030\001 \002(\0132\036.vple"
    "x.ias.AbstractRequestType\022\025\n\rTransaction"
    "Id\030\002 \002(\t\022\027\n\017AcceptedPairing\030\003 \002(\010\"Z\n#Res"
    "pondToPairingRequestResponseType\0223\n\n_inh"
    "erited\030\001 \002(\0132\037.vplex.ias.AbstractRespons"
    "eType\"R\n\034RequestPairingPinRequestType\0222\n"
    "\n_inherited\030\001 \002(\0132\036.vplex.ias.AbstractRe"
    "questType\"h\n\035RequestPairingPinResponseTy"
    "pe\0223\n\n_inherited\030\001 \002(\0132\037.vplex.ias.Abstr"
    "actResponseType\022\022\n\nPairingPin\030\002 \002(\t\"g\n\033G"
    "etPairingStatusRequestType\0222\n\n_inherited"
    "\030\001 \002(\0132\036.vplex.ias.AbstractRequestType\022\024"
    "\n\014PairingToken\030\002 \002(\t\"u\n\034GetPairingStatus"
    "ResponseType\0223\n\n_inherited\030\001 \002(\0132\037.vplex"
    ".ias.AbstractResponseType\022\016\n\006Status\030\002 \002("
    "\t\022\020\n\010Username\030\003 \001(\tB\"\n\017igware.vplex.pbB\017"
    "IasServiceTypes", 3735);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vplex_ias_service_types.proto", &protobuf_RegisterTypes);
  AbstractRequestType::default_instance_ = new AbstractRequestType();
  AbstractResponseType::default_instance_ = new AbstractResponseType();
  CheckVirtualDeviceCredentialsRenewalRequestType::default_instance_ = new CheckVirtualDeviceCredentialsRenewalRequestType();
  CheckVirtualDeviceCredentialsRenewalResponseType::default_instance_ = new CheckVirtualDeviceCredentialsRenewalResponseType();
  StrAttributeType::default_instance_ = new StrAttributeType();
  GetSessionKeyRequestType::default_instance_ = new GetSessionKeyRequestType();
  GetSessionKeyResponseType::default_instance_ = new GetSessionKeyResponseType();
  LoginRequestType::default_instance_ = new LoginRequestType();
  LoginResponseType::default_instance_ = new LoginResponseType();
  LogoutRequestType::default_instance_ = new LogoutRequestType();
  LogoutResponseType::default_instance_ = new LogoutResponseType();
  RegisterVirtualDeviceRequestType::default_instance_ = new RegisterVirtualDeviceRequestType();
  RegisterVirtualDeviceResponseType::default_instance_ = new RegisterVirtualDeviceResponseType();
  RenewVirtualDeviceCredentialsRequestType::default_instance_ = new RenewVirtualDeviceCredentialsRequestType();
  RenewVirtualDeviceCredentialsResponseType::default_instance_ = new RenewVirtualDeviceCredentialsResponseType();
  GetServerKeyRequestType::default_instance_ = new GetServerKeyRequestType();
  GetServerKeyResponseType::default_instance_ = new GetServerKeyResponseType();
  RequestPairingRequestType::default_instance_ = new RequestPairingRequestType();
  RequestPairingResponseType::default_instance_ = new RequestPairingResponseType();
  RespondToPairingRequestRequestType::default_instance_ = new RespondToPairingRequestRequestType();
  RespondToPairingRequestResponseType::default_instance_ = new RespondToPairingRequestResponseType();
  RequestPairingPinRequestType::default_instance_ = new RequestPairingPinRequestType();
  RequestPairingPinResponseType::default_instance_ = new RequestPairingPinResponseType();
  GetPairingStatusRequestType::default_instance_ = new GetPairingStatusRequestType();
  GetPairingStatusResponseType::default_instance_ = new GetPairingStatusResponseType();
  AbstractRequestType::default_instance_->InitAsDefaultInstance();
  AbstractResponseType::default_instance_->InitAsDefaultInstance();
  CheckVirtualDeviceCredentialsRenewalRequestType::default_instance_->InitAsDefaultInstance();
  CheckVirtualDeviceCredentialsRenewalResponseType::default_instance_->InitAsDefaultInstance();
  StrAttributeType::default_instance_->InitAsDefaultInstance();
  GetSessionKeyRequestType::default_instance_->InitAsDefaultInstance();
  GetSessionKeyResponseType::default_instance_->InitAsDefaultInstance();
  LoginRequestType::default_instance_->InitAsDefaultInstance();
  LoginResponseType::default_instance_->InitAsDefaultInstance();
  LogoutRequestType::default_instance_->InitAsDefaultInstance();
  LogoutResponseType::default_instance_->InitAsDefaultInstance();
  RegisterVirtualDeviceRequestType::default_instance_->InitAsDefaultInstance();
  RegisterVirtualDeviceResponseType::default_instance_->InitAsDefaultInstance();
  RenewVirtualDeviceCredentialsRequestType::default_instance_->InitAsDefaultInstance();
  RenewVirtualDeviceCredentialsResponseType::default_instance_->InitAsDefaultInstance();
  GetServerKeyRequestType::default_instance_->InitAsDefaultInstance();
  GetServerKeyResponseType::default_instance_->InitAsDefaultInstance();
  RequestPairingRequestType::default_instance_->InitAsDefaultInstance();
  RequestPairingResponseType::default_instance_->InitAsDefaultInstance();
  RespondToPairingRequestRequestType::default_instance_->InitAsDefaultInstance();
  RespondToPairingRequestResponseType::default_instance_->InitAsDefaultInstance();
  RequestPairingPinRequestType::default_instance_->InitAsDefaultInstance();
  RequestPairingPinResponseType::default_instance_->InitAsDefaultInstance();
  GetPairingStatusRequestType::default_instance_->InitAsDefaultInstance();
  GetPairingStatusResponseType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vplex_5fias_5fservice_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vplex_5fias_5fservice_5ftypes_2eproto {
  StaticDescriptorInitializer_vplex_5fias_5fservice_5ftypes_2eproto() {
    protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();
  }
} static_descriptor_initializer_vplex_5fias_5fservice_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AbstractRequestType::kVersionFieldNumber;
const int AbstractRequestType::kMessageIdFieldNumber;
const int AbstractRequestType::kDeviceIdFieldNumber;
const int AbstractRequestType::kRegionFieldNumber;
const int AbstractRequestType::kCountryFieldNumber;
const int AbstractRequestType::kLanguageFieldNumber;
const int AbstractRequestType::kSessionHandleFieldNumber;
const int AbstractRequestType::kServiceTicketFieldNumber;
const int AbstractRequestType::kServiceIdFieldNumber;
#endif  // !_MSC_VER

AbstractRequestType::AbstractRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbstractRequestType::InitAsDefaultInstance() {
}

AbstractRequestType::AbstractRequestType(const AbstractRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbstractRequestType::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = GOOGLE_ULONGLONG(0);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessionhandle_ = GOOGLE_ULONGLONG(0);
  serviceticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbstractRequestType::~AbstractRequestType() {
  SharedDtor();
}

void AbstractRequestType::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (serviceticket_ != &::google::protobuf::internal::kEmptyString) {
    delete serviceticket_;
  }
  if (serviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete serviceid_;
  }
  if (this != default_instance_) {
  }
}

void AbstractRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbstractRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractRequestType_descriptor_;
}

const AbstractRequestType& AbstractRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AbstractRequestType* AbstractRequestType::default_instance_ = NULL;

AbstractRequestType* AbstractRequestType::New() const {
  return new AbstractRequestType;
}

void AbstractRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    sessionhandle_ = GOOGLE_ULONGLONG(0);
    if (has_serviceticket()) {
      if (serviceticket_ != &::google::protobuf::internal::kEmptyString) {
        serviceticket_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_serviceid()) {
      if (serviceid_ != &::google::protobuf::internal::kEmptyString) {
        serviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbstractRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }
      
      // required string MessageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_DeviceId;
        break;
      }
      
      // optional fixed64 DeviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Region;
        break;
      }
      
      // optional string Region = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Country;
        break;
      }
      
      // optional string Country = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Language;
        break;
      }
      
      // optional string Language = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_SessionHandle;
        break;
      }
      
      // optional fixed64 SessionHandle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SessionHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionhandle_)));
          set_has_sessionhandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ServiceTicket;
        break;
      }
      
      // optional bytes ServiceTicket = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServiceTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serviceticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ServiceId;
        break;
      }
      
      // optional string ServiceId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServiceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serviceid().data(), this->serviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbstractRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }
  
  // optional fixed64 DeviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string Region = 7;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->region(), output);
  }
  
  // optional string Country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->country(), output);
  }
  
  // optional string Language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->language(), output);
  }
  
  // optional fixed64 SessionHandle = 10;
  if (has_sessionhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->sessionhandle(), output);
  }
  
  // optional bytes ServiceTicket = 11;
  if (has_serviceticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->serviceticket(), output);
  }
  
  // optional string ServiceId = 12;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->serviceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbstractRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }
  
  // optional fixed64 DeviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string Region = 7;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->region(), target);
  }
  
  // optional string Country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }
  
  // optional string Language = 9;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->language(), target);
  }
  
  // optional fixed64 SessionHandle = 10;
  if (has_sessionhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->sessionhandle(), target);
  }
  
  // optional bytes ServiceTicket = 11;
  if (has_serviceticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->serviceticket(), target);
  }
  
  // optional string ServiceId = 12;
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serviceid().data(), this->serviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->serviceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbstractRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // optional fixed64 DeviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string Region = 7;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }
    
    // optional string Country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // optional string Language = 9;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
    // optional fixed64 SessionHandle = 10;
    if (has_sessionhandle()) {
      total_size += 1 + 8;
    }
    
    // optional bytes ServiceTicket = 11;
    if (has_serviceticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serviceticket());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ServiceId = 12;
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serviceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbstractRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbstractRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbstractRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbstractRequestType::MergeFrom(const AbstractRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_sessionhandle()) {
      set_sessionhandle(from.sessionhandle());
    }
    if (from.has_serviceticket()) {
      set_serviceticket(from.serviceticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbstractRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractRequestType::CopyFrom(const AbstractRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AbstractRequestType::Swap(AbstractRequestType* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(messageid_, other->messageid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(region_, other->region_);
    std::swap(country_, other->country_);
    std::swap(language_, other->language_);
    std::swap(sessionhandle_, other->sessionhandle_);
    std::swap(serviceticket_, other->serviceticket_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbstractRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbstractRequestType_descriptor_;
  metadata.reflection = AbstractRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbstractResponseType::kVersionFieldNumber;
const int AbstractResponseType::kDeviceIdFieldNumber;
const int AbstractResponseType::kMessageIdFieldNumber;
const int AbstractResponseType::kTimeStampFieldNumber;
const int AbstractResponseType::kErrorCodeFieldNumber;
const int AbstractResponseType::kErrorMessageFieldNumber;
const int AbstractResponseType::kServiceStandbyModeFieldNumber;
#endif  // !_MSC_VER

AbstractResponseType::AbstractResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbstractResponseType::InitAsDefaultInstance() {
}

AbstractResponseType::AbstractResponseType(const AbstractResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbstractResponseType::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = GOOGLE_ULONGLONG(0);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 0;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servicestandbymode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbstractResponseType::~AbstractResponseType() {
  SharedDtor();
}

void AbstractResponseType::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void AbstractResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbstractResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractResponseType_descriptor_;
}

const AbstractResponseType& AbstractResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AbstractResponseType* AbstractResponseType::default_instance_ = NULL;

AbstractResponseType* AbstractResponseType::New() const {
  return new AbstractResponseType;
}

void AbstractResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    errorcode_ = 0;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
    servicestandbymode_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbstractResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_DeviceId;
        break;
      }
      
      // optional fixed64 DeviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MessageId;
        break;
      }
      
      // required string MessageId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_TimeStamp;
        break;
      }
      
      // required fixed64 TimeStamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ErrorCode;
        break;
      }
      
      // required sint32 ErrorCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ErrorMessage;
        break;
      }
      
      // optional string ErrorMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ServiceStandbyMode;
        break;
      }
      
      // optional bool ServiceStandbyMode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServiceStandbyMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &servicestandbymode_)));
          set_has_servicestandbymode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbstractResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // optional fixed64 DeviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  // required string MessageId = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->messageid(), output);
  }
  
  // required fixed64 TimeStamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->timestamp(), output);
  }
  
  // required sint32 ErrorCode = 5;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->errorcode(), output);
  }
  
  // optional string ErrorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->errormessage(), output);
  }
  
  // optional bool ServiceStandbyMode = 7;
  if (has_servicestandbymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->servicestandbymode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbstractResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // optional fixed64 DeviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  // required string MessageId = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messageid(), target);
  }
  
  // required fixed64 TimeStamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->timestamp(), target);
  }
  
  // required sint32 ErrorCode = 5;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->errorcode(), target);
  }
  
  // optional string ErrorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errormessage(), target);
  }
  
  // optional bool ServiceStandbyMode = 7;
  if (has_servicestandbymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->servicestandbymode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbstractResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional fixed64 DeviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required string MessageId = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required fixed64 TimeStamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
    // required sint32 ErrorCode = 5;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->errorcode());
    }
    
    // optional string ErrorMessage = 6;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
    // optional bool ServiceStandbyMode = 7;
    if (has_servicestandbymode()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbstractResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbstractResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbstractResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbstractResponseType::MergeFrom(const AbstractResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
    if (from.has_servicestandbymode()) {
      set_servicestandbymode(from.servicestandbymode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbstractResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractResponseType::CopyFrom(const AbstractResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  
  return true;
}

void AbstractResponseType::Swap(AbstractResponseType* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(messageid_, other->messageid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(servicestandbymode_, other->servicestandbymode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbstractResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbstractResponseType_descriptor_;
  metadata.reflection = AbstractResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckVirtualDeviceCredentialsRenewalRequestType::kInheritedFieldNumber;
const int CheckVirtualDeviceCredentialsRenewalRequestType::kIssueDateFieldNumber;
const int CheckVirtualDeviceCredentialsRenewalRequestType::kSerialNumberFieldNumber;
#endif  // !_MSC_VER

CheckVirtualDeviceCredentialsRenewalRequestType::CheckVirtualDeviceCredentialsRenewalRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckVirtualDeviceCredentialsRenewalRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

CheckVirtualDeviceCredentialsRenewalRequestType::CheckVirtualDeviceCredentialsRenewalRequestType(const CheckVirtualDeviceCredentialsRenewalRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckVirtualDeviceCredentialsRenewalRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  issuedate_ = GOOGLE_ULONGLONG(0);
  serialnumber_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVirtualDeviceCredentialsRenewalRequestType::~CheckVirtualDeviceCredentialsRenewalRequestType() {
  SharedDtor();
}

void CheckVirtualDeviceCredentialsRenewalRequestType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void CheckVirtualDeviceCredentialsRenewalRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVirtualDeviceCredentialsRenewalRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVirtualDeviceCredentialsRenewalRequestType_descriptor_;
}

const CheckVirtualDeviceCredentialsRenewalRequestType& CheckVirtualDeviceCredentialsRenewalRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

CheckVirtualDeviceCredentialsRenewalRequestType* CheckVirtualDeviceCredentialsRenewalRequestType::default_instance_ = NULL;

CheckVirtualDeviceCredentialsRenewalRequestType* CheckVirtualDeviceCredentialsRenewalRequestType::New() const {
  return new CheckVirtualDeviceCredentialsRenewalRequestType;
}

void CheckVirtualDeviceCredentialsRenewalRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    issuedate_ = GOOGLE_ULONGLONG(0);
    serialnumber_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVirtualDeviceCredentialsRenewalRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_IssueDate;
        break;
      }
      
      // required fixed64 IssueDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_IssueDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &issuedate_)));
          set_has_issuedate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_SerialNumber;
        break;
      }
      
      // required fixed64 SerialNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SerialNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serialnumber_)));
          set_has_serialnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckVirtualDeviceCredentialsRenewalRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required fixed64 IssueDate = 2;
  if (has_issuedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->issuedate(), output);
  }
  
  // required fixed64 SerialNumber = 3;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->serialnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckVirtualDeviceCredentialsRenewalRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required fixed64 IssueDate = 2;
  if (has_issuedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->issuedate(), target);
  }
  
  // required fixed64 SerialNumber = 3;
  if (has_serialnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->serialnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckVirtualDeviceCredentialsRenewalRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required fixed64 IssueDate = 2;
    if (has_issuedate()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 SerialNumber = 3;
    if (has_serialnumber()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVirtualDeviceCredentialsRenewalRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVirtualDeviceCredentialsRenewalRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckVirtualDeviceCredentialsRenewalRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVirtualDeviceCredentialsRenewalRequestType::MergeFrom(const CheckVirtualDeviceCredentialsRenewalRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_issuedate()) {
      set_issuedate(from.issuedate());
    }
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVirtualDeviceCredentialsRenewalRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVirtualDeviceCredentialsRenewalRequestType::CopyFrom(const CheckVirtualDeviceCredentialsRenewalRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVirtualDeviceCredentialsRenewalRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void CheckVirtualDeviceCredentialsRenewalRequestType::Swap(CheckVirtualDeviceCredentialsRenewalRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(issuedate_, other->issuedate_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckVirtualDeviceCredentialsRenewalRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckVirtualDeviceCredentialsRenewalRequestType_descriptor_;
  metadata.reflection = CheckVirtualDeviceCredentialsRenewalRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckVirtualDeviceCredentialsRenewalResponseType::kInheritedFieldNumber;
const int CheckVirtualDeviceCredentialsRenewalResponseType::kExpectedSerialNumberFieldNumber;
#endif  // !_MSC_VER

CheckVirtualDeviceCredentialsRenewalResponseType::CheckVirtualDeviceCredentialsRenewalResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CheckVirtualDeviceCredentialsRenewalResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

CheckVirtualDeviceCredentialsRenewalResponseType::CheckVirtualDeviceCredentialsRenewalResponseType(const CheckVirtualDeviceCredentialsRenewalResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CheckVirtualDeviceCredentialsRenewalResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  expectedserialnumber_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckVirtualDeviceCredentialsRenewalResponseType::~CheckVirtualDeviceCredentialsRenewalResponseType() {
  SharedDtor();
}

void CheckVirtualDeviceCredentialsRenewalResponseType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void CheckVirtualDeviceCredentialsRenewalResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckVirtualDeviceCredentialsRenewalResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckVirtualDeviceCredentialsRenewalResponseType_descriptor_;
}

const CheckVirtualDeviceCredentialsRenewalResponseType& CheckVirtualDeviceCredentialsRenewalResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

CheckVirtualDeviceCredentialsRenewalResponseType* CheckVirtualDeviceCredentialsRenewalResponseType::default_instance_ = NULL;

CheckVirtualDeviceCredentialsRenewalResponseType* CheckVirtualDeviceCredentialsRenewalResponseType::New() const {
  return new CheckVirtualDeviceCredentialsRenewalResponseType;
}

void CheckVirtualDeviceCredentialsRenewalResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    expectedserialnumber_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckVirtualDeviceCredentialsRenewalResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_ExpectedSerialNumber;
        break;
      }
      
      // required fixed64 ExpectedSerialNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExpectedSerialNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &expectedserialnumber_)));
          set_has_expectedserialnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckVirtualDeviceCredentialsRenewalResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required fixed64 ExpectedSerialNumber = 2;
  if (has_expectedserialnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->expectedserialnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CheckVirtualDeviceCredentialsRenewalResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required fixed64 ExpectedSerialNumber = 2;
  if (has_expectedserialnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->expectedserialnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CheckVirtualDeviceCredentialsRenewalResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required fixed64 ExpectedSerialNumber = 2;
    if (has_expectedserialnumber()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckVirtualDeviceCredentialsRenewalResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckVirtualDeviceCredentialsRenewalResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckVirtualDeviceCredentialsRenewalResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckVirtualDeviceCredentialsRenewalResponseType::MergeFrom(const CheckVirtualDeviceCredentialsRenewalResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_expectedserialnumber()) {
      set_expectedserialnumber(from.expectedserialnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckVirtualDeviceCredentialsRenewalResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckVirtualDeviceCredentialsRenewalResponseType::CopyFrom(const CheckVirtualDeviceCredentialsRenewalResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckVirtualDeviceCredentialsRenewalResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void CheckVirtualDeviceCredentialsRenewalResponseType::Swap(CheckVirtualDeviceCredentialsRenewalResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(expectedserialnumber_, other->expectedserialnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckVirtualDeviceCredentialsRenewalResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckVirtualDeviceCredentialsRenewalResponseType_descriptor_;
  metadata.reflection = CheckVirtualDeviceCredentialsRenewalResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrAttributeType::kAttributeNameFieldNumber;
const int StrAttributeType::kAttributeValueFieldNumber;
#endif  // !_MSC_VER

StrAttributeType::StrAttributeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrAttributeType::InitAsDefaultInstance() {
}

StrAttributeType::StrAttributeType(const StrAttributeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrAttributeType::SharedCtor() {
  _cached_size_ = 0;
  attributename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attributevalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrAttributeType::~StrAttributeType() {
  SharedDtor();
}

void StrAttributeType::SharedDtor() {
  if (attributename_ != &::google::protobuf::internal::kEmptyString) {
    delete attributename_;
  }
  if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
    delete attributevalue_;
  }
  if (this != default_instance_) {
  }
}

void StrAttributeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrAttributeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrAttributeType_descriptor_;
}

const StrAttributeType& StrAttributeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StrAttributeType* StrAttributeType::default_instance_ = NULL;

StrAttributeType* StrAttributeType::New() const {
  return new StrAttributeType;
}

void StrAttributeType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_attributename()) {
      if (attributename_ != &::google::protobuf::internal::kEmptyString) {
        attributename_->clear();
      }
    }
    if (has_attributevalue()) {
      if (attributevalue_ != &::google::protobuf::internal::kEmptyString) {
        attributevalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrAttributeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string AttributeName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributename().data(), this->attributename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AttributeValue;
        break;
      }
      
      // required string AttributeValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttributeValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attributevalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributevalue().data(), this->attributevalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrAttributeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string AttributeName = 1;
  if (has_attributename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributename().data(), this->attributename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attributename(), output);
  }
  
  // required string AttributeValue = 2;
  if (has_attributevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalue().data(), this->attributevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->attributevalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrAttributeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string AttributeName = 1;
  if (has_attributename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributename().data(), this->attributename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attributename(), target);
  }
  
  // required string AttributeValue = 2;
  if (has_attributevalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributevalue().data(), this->attributevalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->attributevalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrAttributeType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string AttributeName = 1;
    if (has_attributename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributename());
    }
    
    // required string AttributeValue = 2;
    if (has_attributevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attributevalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrAttributeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrAttributeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrAttributeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrAttributeType::MergeFrom(const StrAttributeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attributename()) {
      set_attributename(from.attributename());
    }
    if (from.has_attributevalue()) {
      set_attributevalue(from.attributevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrAttributeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrAttributeType::CopyFrom(const StrAttributeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrAttributeType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StrAttributeType::Swap(StrAttributeType* other) {
  if (other != this) {
    std::swap(attributename_, other->attributename_);
    std::swap(attributevalue_, other->attributevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrAttributeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrAttributeType_descriptor_;
  metadata.reflection = StrAttributeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSessionKeyRequestType::kInheritedFieldNumber;
const int GetSessionKeyRequestType::kTypeFieldNumber;
const int GetSessionKeyRequestType::kKeyAttributesFieldNumber;
const int GetSessionKeyRequestType::kEncryptedSessionKeyFieldNumber;
#endif  // !_MSC_VER

GetSessionKeyRequestType::GetSessionKeyRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSessionKeyRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

GetSessionKeyRequestType::GetSessionKeyRequestType(const GetSessionKeyRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSessionKeyRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encryptedsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSessionKeyRequestType::~GetSessionKeyRequestType() {
  SharedDtor();
}

void GetSessionKeyRequestType::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (encryptedsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete encryptedsessionkey_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSessionKeyRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSessionKeyRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSessionKeyRequestType_descriptor_;
}

const GetSessionKeyRequestType& GetSessionKeyRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSessionKeyRequestType* GetSessionKeyRequestType::default_instance_ = NULL;

GetSessionKeyRequestType* GetSessionKeyRequestType::New() const {
  return new GetSessionKeyRequestType;
}

void GetSessionKeyRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_encryptedsessionkey()) {
      if (encryptedsessionkey_ != &::google::protobuf::internal::kEmptyString) {
        encryptedsessionkey_->clear();
      }
    }
  }
  keyattributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSessionKeyRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Type;
        break;
      }
      
      // required string Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_KeyAttributes;
        break;
      }
      
      // repeated .vplex.ias.StrAttributeType KeyAttributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_KeyAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_KeyAttributes;
        if (input->ExpectTag(34)) goto parse_EncryptedSessionKey;
        break;
      }
      
      // optional bytes EncryptedSessionKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EncryptedSessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedsessionkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSessionKeyRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // repeated .vplex.ias.StrAttributeType KeyAttributes = 3;
  for (int i = 0; i < this->keyattributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keyattributes(i), output);
  }
  
  // optional bytes EncryptedSessionKey = 4;
  if (has_encryptedsessionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encryptedsessionkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSessionKeyRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // repeated .vplex.ias.StrAttributeType KeyAttributes = 3;
  for (int i = 0; i < this->keyattributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keyattributes(i), target);
  }
  
  // optional bytes EncryptedSessionKey = 4;
  if (has_encryptedsessionkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encryptedsessionkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSessionKeyRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional bytes EncryptedSessionKey = 4;
    if (has_encryptedsessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptedsessionkey());
    }
    
  }
  // repeated .vplex.ias.StrAttributeType KeyAttributes = 3;
  total_size += 1 * this->keyattributes_size();
  for (int i = 0; i < this->keyattributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyattributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSessionKeyRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSessionKeyRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSessionKeyRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSessionKeyRequestType::MergeFrom(const GetSessionKeyRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyattributes_.MergeFrom(from.keyattributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_encryptedsessionkey()) {
      set_encryptedsessionkey(from.encryptedsessionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSessionKeyRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSessionKeyRequestType::CopyFrom(const GetSessionKeyRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionKeyRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  for (int i = 0; i < keyattributes_size(); i++) {
    if (!this->keyattributes(i).IsInitialized()) return false;
  }
  return true;
}

void GetSessionKeyRequestType::Swap(GetSessionKeyRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(type_, other->type_);
    keyattributes_.Swap(&other->keyattributes_);
    std::swap(encryptedsessionkey_, other->encryptedsessionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSessionKeyRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSessionKeyRequestType_descriptor_;
  metadata.reflection = GetSessionKeyRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSessionKeyResponseType::kInheritedFieldNumber;
const int GetSessionKeyResponseType::kSessionKeyFieldNumber;
const int GetSessionKeyResponseType::kEncryptedSessionKeyFieldNumber;
const int GetSessionKeyResponseType::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

GetSessionKeyResponseType::GetSessionKeyResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSessionKeyResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

GetSessionKeyResponseType::GetSessionKeyResponseType(const GetSessionKeyResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSessionKeyResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  sessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encryptedsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instanceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSessionKeyResponseType::~GetSessionKeyResponseType() {
  SharedDtor();
}

void GetSessionKeyResponseType::SharedDtor() {
  if (sessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionkey_;
  }
  if (encryptedsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete encryptedsessionkey_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSessionKeyResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSessionKeyResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSessionKeyResponseType_descriptor_;
}

const GetSessionKeyResponseType& GetSessionKeyResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSessionKeyResponseType* GetSessionKeyResponseType::default_instance_ = NULL;

GetSessionKeyResponseType* GetSessionKeyResponseType::New() const {
  return new GetSessionKeyResponseType;
}

void GetSessionKeyResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_sessionkey()) {
      if (sessionkey_ != &::google::protobuf::internal::kEmptyString) {
        sessionkey_->clear();
      }
    }
    if (has_encryptedsessionkey()) {
      if (encryptedsessionkey_ != &::google::protobuf::internal::kEmptyString) {
        encryptedsessionkey_->clear();
      }
    }
    instanceid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSessionKeyResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SessionKey;
        break;
      }
      
      // optional bytes SessionKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EncryptedSessionKey;
        break;
      }
      
      // optional bytes EncryptedSessionKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EncryptedSessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encryptedsessionkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_InstanceId;
        break;
      }
      
      // optional uint32 InstanceId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSessionKeyResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional bytes SessionKey = 2;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->sessionkey(), output);
  }
  
  // optional bytes EncryptedSessionKey = 3;
  if (has_encryptedsessionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encryptedsessionkey(), output);
  }
  
  // optional uint32 InstanceId = 4;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->instanceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSessionKeyResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional bytes SessionKey = 2;
  if (has_sessionkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sessionkey(), target);
  }
  
  // optional bytes EncryptedSessionKey = 3;
  if (has_encryptedsessionkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encryptedsessionkey(), target);
  }
  
  // optional uint32 InstanceId = 4;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->instanceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSessionKeyResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional bytes SessionKey = 2;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionkey());
    }
    
    // optional bytes EncryptedSessionKey = 3;
    if (has_encryptedsessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encryptedsessionkey());
    }
    
    // optional uint32 InstanceId = 4;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSessionKeyResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSessionKeyResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSessionKeyResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSessionKeyResponseType::MergeFrom(const GetSessionKeyResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_sessionkey()) {
      set_sessionkey(from.sessionkey());
    }
    if (from.has_encryptedsessionkey()) {
      set_encryptedsessionkey(from.encryptedsessionkey());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSessionKeyResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSessionKeyResponseType::CopyFrom(const GetSessionKeyResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionKeyResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetSessionKeyResponseType::Swap(GetSessionKeyResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(sessionkey_, other->sessionkey_);
    std::swap(encryptedsessionkey_, other->encryptedsessionkey_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSessionKeyResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSessionKeyResponseType_descriptor_;
  metadata.reflection = GetSessionKeyResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequestType::kInheritedFieldNumber;
const int LoginRequestType::kUsernameFieldNumber;
const int LoginRequestType::kNamespaceFieldNumber;
const int LoginRequestType::kPasswordFieldNumber;
const int LoginRequestType::kWeakTokenFieldNumber;
const int LoginRequestType::kPairingTokenFieldNumber;
const int LoginRequestType::kACEulaAgreedFieldNumber;
#endif  // !_MSC_VER

LoginRequestType::LoginRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

LoginRequestType::LoginRequestType(const LoginRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaktoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pairingtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aceulaagreed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequestType::~LoginRequestType() {
  SharedDtor();
}

void LoginRequestType::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (weaktoken_ != &::google::protobuf::internal::kEmptyString) {
    delete weaktoken_;
  }
  if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete pairingtoken_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void LoginRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequestType_descriptor_;
}

const LoginRequestType& LoginRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

LoginRequestType* LoginRequestType::default_instance_ = NULL;

LoginRequestType* LoginRequestType::New() const {
  return new LoginRequestType;
}

void LoginRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_weaktoken()) {
      if (weaktoken_ != &::google::protobuf::internal::kEmptyString) {
        weaktoken_->clear();
      }
    }
    if (has_pairingtoken()) {
      if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
        pairingtoken_->clear();
      }
    }
    aceulaagreed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Username;
        break;
      }
      
      // optional string Username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Namespace;
        break;
      }
      
      // required string Namespace = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Password;
        break;
      }
      
      // optional string Password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_WeakToken;
        break;
      }
      
      // optional string WeakToken = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeakToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaktoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weaktoken().data(), this->weaktoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ACEulaAgreed;
        break;
      }
      
      // optional bool ACEulaAgreed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ACEulaAgreed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aceulaagreed_)));
          set_has_aceulaagreed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PairingToken;
        break;
      }
      
      // optional string PairingToken = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PairingToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairingtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairingtoken().data(), this->pairingtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required string Namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->namespace_(), output);
  }
  
  // optional string Password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  // optional string WeakToken = 5;
  if (has_weaktoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaktoken().data(), this->weaktoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->weaktoken(), output);
  }
  
  // optional bool ACEulaAgreed = 10;
  if (has_aceulaagreed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->aceulaagreed(), output);
  }
  
  // optional string PairingToken = 11;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->pairingtoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // required string Namespace = 3;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->namespace_(), target);
  }
  
  // optional string Password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  // optional string WeakToken = 5;
  if (has_weaktoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaktoken().data(), this->weaktoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->weaktoken(), target);
  }
  
  // optional bool ACEulaAgreed = 10;
  if (has_aceulaagreed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->aceulaagreed(), target);
  }
  
  // optional string PairingToken = 11;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->pairingtoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional string Username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string Namespace = 3;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }
    
    // optional string Password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string WeakToken = 5;
    if (has_weaktoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaktoken());
    }
    
    // optional string PairingToken = 11;
    if (has_pairingtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairingtoken());
    }
    
    // optional bool ACEulaAgreed = 10;
    if (has_aceulaagreed()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequestType::MergeFrom(const LoginRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_weaktoken()) {
      set_weaktoken(from.weaktoken());
    }
    if (from.has_pairingtoken()) {
      set_pairingtoken(from.pairingtoken());
    }
    if (from.has_aceulaagreed()) {
      set_aceulaagreed(from.aceulaagreed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequestType::CopyFrom(const LoginRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void LoginRequestType::Swap(LoginRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(username_, other->username_);
    std::swap(namespace__, other->namespace__);
    std::swap(password_, other->password_);
    std::swap(weaktoken_, other->weaktoken_);
    std::swap(pairingtoken_, other->pairingtoken_);
    std::swap(aceulaagreed_, other->aceulaagreed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequestType_descriptor_;
  metadata.reflection = LoginRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponseType::kInheritedFieldNumber;
const int LoginResponseType::kSessionHandleFieldNumber;
const int LoginResponseType::kSessionSecretFieldNumber;
const int LoginResponseType::kAccountIdFieldNumber;
const int LoginResponseType::kUserIdFieldNumber;
const int LoginResponseType::kDisplayNameFieldNumber;
const int LoginResponseType::kWeakTokenFieldNumber;
const int LoginResponseType::kOldFgSessionHandleFieldNumber;
const int LoginResponseType::kStorageRegionFieldNumber;
const int LoginResponseType::kStorageClusterIdFieldNumber;
const int LoginResponseType::kPersistentCredentialsFieldNumber;
#endif  // !_MSC_VER

LoginResponseType::LoginResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

LoginResponseType::LoginResponseType(const LoginResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  sessionhandle_ = GOOGLE_ULONGLONG(0);
  sessionsecret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_ULONGLONG(0);
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaktoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldfgsessionhandle_ = GOOGLE_ULONGLONG(0);
  storageregion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storageclusterid_ = GOOGLE_LONGLONG(0);
  persistentcredentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponseType::~LoginResponseType() {
  SharedDtor();
}

void LoginResponseType::SharedDtor() {
  if (sessionsecret_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionsecret_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (weaktoken_ != &::google::protobuf::internal::kEmptyString) {
    delete weaktoken_;
  }
  if (storageregion_ != &::google::protobuf::internal::kEmptyString) {
    delete storageregion_;
  }
  if (persistentcredentials_ != &::google::protobuf::internal::kEmptyString) {
    delete persistentcredentials_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void LoginResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponseType_descriptor_;
}

const LoginResponseType& LoginResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

LoginResponseType* LoginResponseType::default_instance_ = NULL;

LoginResponseType* LoginResponseType::New() const {
  return new LoginResponseType;
}

void LoginResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    sessionhandle_ = GOOGLE_ULONGLONG(0);
    if (has_sessionsecret()) {
      if (sessionsecret_ != &::google::protobuf::internal::kEmptyString) {
        sessionsecret_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
    if (has_weaktoken()) {
      if (weaktoken_ != &::google::protobuf::internal::kEmptyString) {
        weaktoken_->clear();
      }
    }
    oldfgsessionhandle_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_storageregion()) {
      if (storageregion_ != &::google::protobuf::internal::kEmptyString) {
        storageregion_->clear();
      }
    }
    storageclusterid_ = GOOGLE_LONGLONG(0);
    if (has_persistentcredentials()) {
      if (persistentcredentials_ != &::google::protobuf::internal::kEmptyString) {
        persistentcredentials_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_SessionHandle;
        break;
      }
      
      // required fixed64 SessionHandle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SessionHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionhandle_)));
          set_has_sessionhandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SessionSecret;
        break;
      }
      
      // required bytes SessionSecret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SessionSecret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionsecret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AccountId;
        break;
      }
      
      // optional string AccountId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_UserId;
        break;
      }
      
      // required fixed64 UserId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DisplayName;
        break;
      }
      
      // optional string DisplayName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DisplayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_WeakToken;
        break;
      }
      
      // optional string WeakToken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeakToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaktoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weaktoken().data(), this->weaktoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_OldFgSessionHandle;
        break;
      }
      
      // optional fixed64 OldFgSessionHandle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OldFgSessionHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &oldfgsessionhandle_)));
          set_has_oldfgsessionhandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_StorageRegion;
        break;
      }
      
      // optional string StorageRegion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StorageRegion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storageregion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storageregion().data(), this->storageregion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_StorageClusterId;
        break;
      }
      
      // optional int64 StorageClusterId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StorageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_persistentCredentials;
        break;
      }
      
      // optional string persistentCredentials = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_persistentCredentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persistentcredentials()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->persistentcredentials().data(), this->persistentcredentials().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required fixed64 SessionHandle = 2;
  if (has_sessionhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sessionhandle(), output);
  }
  
  // required bytes SessionSecret = 3;
  if (has_sessionsecret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->sessionsecret(), output);
  }
  
  // optional string AccountId = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->accountid(), output);
  }
  
  // required fixed64 UserId = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->userid(), output);
  }
  
  // optional string DisplayName = 6;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->displayname(), output);
  }
  
  // optional string WeakToken = 7;
  if (has_weaktoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaktoken().data(), this->weaktoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->weaktoken(), output);
  }
  
  // optional fixed64 OldFgSessionHandle = 8;
  if (has_oldfgsessionhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->oldfgsessionhandle(), output);
  }
  
  // optional string StorageRegion = 9;
  if (has_storageregion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageregion().data(), this->storageregion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->storageregion(), output);
  }
  
  // optional int64 StorageClusterId = 10;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->storageclusterid(), output);
  }
  
  // optional string persistentCredentials = 11;
  if (has_persistentcredentials()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persistentcredentials().data(), this->persistentcredentials().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->persistentcredentials(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required fixed64 SessionHandle = 2;
  if (has_sessionhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sessionhandle(), target);
  }
  
  // required bytes SessionSecret = 3;
  if (has_sessionsecret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sessionsecret(), target);
  }
  
  // optional string AccountId = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountid(), target);
  }
  
  // required fixed64 UserId = 5;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->userid(), target);
  }
  
  // optional string DisplayName = 6;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->displayname(), target);
  }
  
  // optional string WeakToken = 7;
  if (has_weaktoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaktoken().data(), this->weaktoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->weaktoken(), target);
  }
  
  // optional fixed64 OldFgSessionHandle = 8;
  if (has_oldfgsessionhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->oldfgsessionhandle(), target);
  }
  
  // optional string StorageRegion = 9;
  if (has_storageregion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageregion().data(), this->storageregion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->storageregion(), target);
  }
  
  // optional int64 StorageClusterId = 10;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->storageclusterid(), target);
  }
  
  // optional string persistentCredentials = 11;
  if (has_persistentcredentials()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->persistentcredentials().data(), this->persistentcredentials().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->persistentcredentials(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required fixed64 SessionHandle = 2;
    if (has_sessionhandle()) {
      total_size += 1 + 8;
    }
    
    // required bytes SessionSecret = 3;
    if (has_sessionsecret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionsecret());
    }
    
    // optional string AccountId = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }
    
    // required fixed64 UserId = 5;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional string DisplayName = 6;
    if (has_displayname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
    // optional string WeakToken = 7;
    if (has_weaktoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaktoken());
    }
    
    // optional fixed64 OldFgSessionHandle = 8;
    if (has_oldfgsessionhandle()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string StorageRegion = 9;
    if (has_storageregion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storageregion());
    }
    
    // optional int64 StorageClusterId = 10;
    if (has_storageclusterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->storageclusterid());
    }
    
    // optional string persistentCredentials = 11;
    if (has_persistentcredentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persistentcredentials());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponseType::MergeFrom(const LoginResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_sessionhandle()) {
      set_sessionhandle(from.sessionhandle());
    }
    if (from.has_sessionsecret()) {
      set_sessionsecret(from.sessionsecret());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
    if (from.has_weaktoken()) {
      set_weaktoken(from.weaktoken());
    }
    if (from.has_oldfgsessionhandle()) {
      set_oldfgsessionhandle(from.oldfgsessionhandle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_storageregion()) {
      set_storageregion(from.storageregion());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_persistentcredentials()) {
      set_persistentcredentials(from.persistentcredentials());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponseType::CopyFrom(const LoginResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void LoginResponseType::Swap(LoginResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(sessionhandle_, other->sessionhandle_);
    std::swap(sessionsecret_, other->sessionsecret_);
    std::swap(accountid_, other->accountid_);
    std::swap(userid_, other->userid_);
    std::swap(displayname_, other->displayname_);
    std::swap(weaktoken_, other->weaktoken_);
    std::swap(oldfgsessionhandle_, other->oldfgsessionhandle_);
    std::swap(storageregion_, other->storageregion_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(persistentcredentials_, other->persistentcredentials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponseType_descriptor_;
  metadata.reflection = LoginResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRequestType::kInheritedFieldNumber;
#endif  // !_MSC_VER

LogoutRequestType::LogoutRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

LogoutRequestType::LogoutRequestType(const LogoutRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequestType::~LogoutRequestType() {
  SharedDtor();
}

void LogoutRequestType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void LogoutRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequestType_descriptor_;
}

const LogoutRequestType& LogoutRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

LogoutRequestType* LogoutRequestType::default_instance_ = NULL;

LogoutRequestType* LogoutRequestType::New() const {
  return new LogoutRequestType;
}

void LogoutRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequestType::MergeFrom(const LogoutRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequestType::CopyFrom(const LogoutRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void LogoutRequestType::Swap(LogoutRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequestType_descriptor_;
  metadata.reflection = LogoutRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResponseType::kInheritedFieldNumber;
#endif  // !_MSC_VER

LogoutResponseType::LogoutResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

LogoutResponseType::LogoutResponseType(const LogoutResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResponseType::~LogoutResponseType() {
  SharedDtor();
}

void LogoutResponseType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void LogoutResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponseType_descriptor_;
}

const LogoutResponseType& LogoutResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

LogoutResponseType* LogoutResponseType::default_instance_ = NULL;

LogoutResponseType* LogoutResponseType::New() const {
  return new LogoutResponseType;
}

void LogoutResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResponseType::MergeFrom(const LogoutResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponseType::CopyFrom(const LogoutResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void LogoutResponseType::Swap(LogoutResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponseType_descriptor_;
  metadata.reflection = LogoutResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterVirtualDeviceRequestType::kInheritedFieldNumber;
const int RegisterVirtualDeviceRequestType::kUsernameFieldNumber;
const int RegisterVirtualDeviceRequestType::kPasswordFieldNumber;
const int RegisterVirtualDeviceRequestType::kHardwareInfoFieldNumber;
const int RegisterVirtualDeviceRequestType::kDeviceNameFieldNumber;
const int RegisterVirtualDeviceRequestType::kNamespaceFieldNumber;
const int RegisterVirtualDeviceRequestType::kWeakTokenFieldNumber;
const int RegisterVirtualDeviceRequestType::kPairingTokenFieldNumber;
#endif  // !_MSC_VER

RegisterVirtualDeviceRequestType::RegisterVirtualDeviceRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterVirtualDeviceRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

RegisterVirtualDeviceRequestType::RegisterVirtualDeviceRequestType(const RegisterVirtualDeviceRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterVirtualDeviceRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hardwareinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespace__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaktoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pairingtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterVirtualDeviceRequestType::~RegisterVirtualDeviceRequestType() {
  SharedDtor();
}

void RegisterVirtualDeviceRequestType::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (hardwareinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete hardwareinfo_;
  }
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (namespace__ != &::google::protobuf::internal::kEmptyString) {
    delete namespace__;
  }
  if (weaktoken_ != &::google::protobuf::internal::kEmptyString) {
    delete weaktoken_;
  }
  if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete pairingtoken_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RegisterVirtualDeviceRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterVirtualDeviceRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterVirtualDeviceRequestType_descriptor_;
}

const RegisterVirtualDeviceRequestType& RegisterVirtualDeviceRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RegisterVirtualDeviceRequestType* RegisterVirtualDeviceRequestType::default_instance_ = NULL;

RegisterVirtualDeviceRequestType* RegisterVirtualDeviceRequestType::New() const {
  return new RegisterVirtualDeviceRequestType;
}

void RegisterVirtualDeviceRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_hardwareinfo()) {
      if (hardwareinfo_ != &::google::protobuf::internal::kEmptyString) {
        hardwareinfo_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    if (has_namespace_()) {
      if (namespace__ != &::google::protobuf::internal::kEmptyString) {
        namespace__->clear();
      }
    }
    if (has_weaktoken()) {
      if (weaktoken_ != &::google::protobuf::internal::kEmptyString) {
        weaktoken_->clear();
      }
    }
    if (has_pairingtoken()) {
      if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
        pairingtoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterVirtualDeviceRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Username;
        break;
      }
      
      // required string Username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }
      
      // optional string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_HardwareInfo;
        break;
      }
      
      // required bytes HardwareInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HardwareInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hardwareinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DeviceName;
        break;
      }
      
      // required string DeviceName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Namespace;
        break;
      }
      
      // optional string Namespace = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namespace_().data(), this->namespace_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_WeakToken;
        break;
      }
      
      // optional string WeakToken = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeakToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaktoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weaktoken().data(), this->weaktoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PairingToken;
        break;
      }
      
      // optional string PairingToken = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PairingToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairingtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairingtoken().data(), this->pairingtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterVirtualDeviceRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // required bytes HardwareInfo = 4;
  if (has_hardwareinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->hardwareinfo(), output);
  }
  
  // required string DeviceName = 5;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->devicename(), output);
  }
  
  // optional string Namespace = 6;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->namespace_(), output);
  }
  
  // optional string WeakToken = 7;
  if (has_weaktoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaktoken().data(), this->weaktoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->weaktoken(), output);
  }
  
  // optional string PairingToken = 8;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pairingtoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterVirtualDeviceRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // required bytes HardwareInfo = 4;
  if (has_hardwareinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->hardwareinfo(), target);
  }
  
  // required string DeviceName = 5;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicename(), target);
  }
  
  // optional string Namespace = 6;
  if (has_namespace_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namespace_().data(), this->namespace_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->namespace_(), target);
  }
  
  // optional string WeakToken = 7;
  if (has_weaktoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaktoken().data(), this->weaktoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->weaktoken(), target);
  }
  
  // optional string PairingToken = 8;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pairingtoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterVirtualDeviceRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string Username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required bytes HardwareInfo = 4;
    if (has_hardwareinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hardwareinfo());
    }
    
    // required string DeviceName = 5;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // optional string Namespace = 6;
    if (has_namespace_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->namespace_());
    }
    
    // optional string WeakToken = 7;
    if (has_weaktoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaktoken());
    }
    
    // optional string PairingToken = 8;
    if (has_pairingtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairingtoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterVirtualDeviceRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterVirtualDeviceRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterVirtualDeviceRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterVirtualDeviceRequestType::MergeFrom(const RegisterVirtualDeviceRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_hardwareinfo()) {
      set_hardwareinfo(from.hardwareinfo());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_namespace_()) {
      set_namespace_(from.namespace_());
    }
    if (from.has_weaktoken()) {
      set_weaktoken(from.weaktoken());
    }
    if (from.has_pairingtoken()) {
      set_pairingtoken(from.pairingtoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterVirtualDeviceRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterVirtualDeviceRequestType::CopyFrom(const RegisterVirtualDeviceRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterVirtualDeviceRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RegisterVirtualDeviceRequestType::Swap(RegisterVirtualDeviceRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(hardwareinfo_, other->hardwareinfo_);
    std::swap(devicename_, other->devicename_);
    std::swap(namespace__, other->namespace__);
    std::swap(weaktoken_, other->weaktoken_);
    std::swap(pairingtoken_, other->pairingtoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterVirtualDeviceRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterVirtualDeviceRequestType_descriptor_;
  metadata.reflection = RegisterVirtualDeviceRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterVirtualDeviceResponseType::kInheritedFieldNumber;
const int RegisterVirtualDeviceResponseType::kRenewalTokenFieldNumber;
#endif  // !_MSC_VER

RegisterVirtualDeviceResponseType::RegisterVirtualDeviceResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterVirtualDeviceResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

RegisterVirtualDeviceResponseType::RegisterVirtualDeviceResponseType(const RegisterVirtualDeviceResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterVirtualDeviceResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  renewaltoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterVirtualDeviceResponseType::~RegisterVirtualDeviceResponseType() {
  SharedDtor();
}

void RegisterVirtualDeviceResponseType::SharedDtor() {
  if (renewaltoken_ != &::google::protobuf::internal::kEmptyString) {
    delete renewaltoken_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RegisterVirtualDeviceResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterVirtualDeviceResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterVirtualDeviceResponseType_descriptor_;
}

const RegisterVirtualDeviceResponseType& RegisterVirtualDeviceResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RegisterVirtualDeviceResponseType* RegisterVirtualDeviceResponseType::default_instance_ = NULL;

RegisterVirtualDeviceResponseType* RegisterVirtualDeviceResponseType::New() const {
  return new RegisterVirtualDeviceResponseType;
}

void RegisterVirtualDeviceResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_renewaltoken()) {
      if (renewaltoken_ != &::google::protobuf::internal::kEmptyString) {
        renewaltoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterVirtualDeviceResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RenewalToken;
        break;
      }
      
      // optional bytes RenewalToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RenewalToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_renewaltoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterVirtualDeviceResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional bytes RenewalToken = 2;
  if (has_renewaltoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->renewaltoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterVirtualDeviceResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional bytes RenewalToken = 2;
  if (has_renewaltoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->renewaltoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterVirtualDeviceResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional bytes RenewalToken = 2;
    if (has_renewaltoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->renewaltoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterVirtualDeviceResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterVirtualDeviceResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterVirtualDeviceResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterVirtualDeviceResponseType::MergeFrom(const RegisterVirtualDeviceResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_renewaltoken()) {
      set_renewaltoken(from.renewaltoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterVirtualDeviceResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterVirtualDeviceResponseType::CopyFrom(const RegisterVirtualDeviceResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterVirtualDeviceResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RegisterVirtualDeviceResponseType::Swap(RegisterVirtualDeviceResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(renewaltoken_, other->renewaltoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterVirtualDeviceResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterVirtualDeviceResponseType_descriptor_;
  metadata.reflection = RegisterVirtualDeviceResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenewVirtualDeviceCredentialsRequestType::kInheritedFieldNumber;
const int RenewVirtualDeviceCredentialsRequestType::kSerialNumberFieldNumber;
const int RenewVirtualDeviceCredentialsRequestType::kIssueDateFieldNumber;
const int RenewVirtualDeviceCredentialsRequestType::kRenewalTokenFieldNumber;
#endif  // !_MSC_VER

RenewVirtualDeviceCredentialsRequestType::RenewVirtualDeviceCredentialsRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenewVirtualDeviceCredentialsRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

RenewVirtualDeviceCredentialsRequestType::RenewVirtualDeviceCredentialsRequestType(const RenewVirtualDeviceCredentialsRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenewVirtualDeviceCredentialsRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  serialnumber_ = GOOGLE_ULONGLONG(0);
  issuedate_ = GOOGLE_ULONGLONG(0);
  renewaltoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenewVirtualDeviceCredentialsRequestType::~RenewVirtualDeviceCredentialsRequestType() {
  SharedDtor();
}

void RenewVirtualDeviceCredentialsRequestType::SharedDtor() {
  if (renewaltoken_ != &::google::protobuf::internal::kEmptyString) {
    delete renewaltoken_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RenewVirtualDeviceCredentialsRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenewVirtualDeviceCredentialsRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenewVirtualDeviceCredentialsRequestType_descriptor_;
}

const RenewVirtualDeviceCredentialsRequestType& RenewVirtualDeviceCredentialsRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RenewVirtualDeviceCredentialsRequestType* RenewVirtualDeviceCredentialsRequestType::default_instance_ = NULL;

RenewVirtualDeviceCredentialsRequestType* RenewVirtualDeviceCredentialsRequestType::New() const {
  return new RenewVirtualDeviceCredentialsRequestType;
}

void RenewVirtualDeviceCredentialsRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    serialnumber_ = GOOGLE_ULONGLONG(0);
    issuedate_ = GOOGLE_ULONGLONG(0);
    if (has_renewaltoken()) {
      if (renewaltoken_ != &::google::protobuf::internal::kEmptyString) {
        renewaltoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenewVirtualDeviceCredentialsRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_SerialNumber;
        break;
      }
      
      // required fixed64 SerialNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SerialNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serialnumber_)));
          set_has_serialnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_IssueDate;
        break;
      }
      
      // required fixed64 IssueDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_IssueDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &issuedate_)));
          set_has_issuedate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RenewalToken;
        break;
      }
      
      // required bytes RenewalToken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RenewalToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_renewaltoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenewVirtualDeviceCredentialsRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required fixed64 SerialNumber = 2;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->serialnumber(), output);
  }
  
  // required fixed64 IssueDate = 3;
  if (has_issuedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->issuedate(), output);
  }
  
  // required bytes RenewalToken = 4;
  if (has_renewaltoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->renewaltoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenewVirtualDeviceCredentialsRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required fixed64 SerialNumber = 2;
  if (has_serialnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->serialnumber(), target);
  }
  
  // required fixed64 IssueDate = 3;
  if (has_issuedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->issuedate(), target);
  }
  
  // required bytes RenewalToken = 4;
  if (has_renewaltoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->renewaltoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenewVirtualDeviceCredentialsRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required fixed64 SerialNumber = 2;
    if (has_serialnumber()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 IssueDate = 3;
    if (has_issuedate()) {
      total_size += 1 + 8;
    }
    
    // required bytes RenewalToken = 4;
    if (has_renewaltoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->renewaltoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenewVirtualDeviceCredentialsRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenewVirtualDeviceCredentialsRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenewVirtualDeviceCredentialsRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenewVirtualDeviceCredentialsRequestType::MergeFrom(const RenewVirtualDeviceCredentialsRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
    if (from.has_issuedate()) {
      set_issuedate(from.issuedate());
    }
    if (from.has_renewaltoken()) {
      set_renewaltoken(from.renewaltoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenewVirtualDeviceCredentialsRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewVirtualDeviceCredentialsRequestType::CopyFrom(const RenewVirtualDeviceCredentialsRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewVirtualDeviceCredentialsRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RenewVirtualDeviceCredentialsRequestType::Swap(RenewVirtualDeviceCredentialsRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(issuedate_, other->issuedate_);
    std::swap(renewaltoken_, other->renewaltoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenewVirtualDeviceCredentialsRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenewVirtualDeviceCredentialsRequestType_descriptor_;
  metadata.reflection = RenewVirtualDeviceCredentialsRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenewVirtualDeviceCredentialsResponseType::kInheritedFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kSecretDeviceCredentialsFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kClearDeviceCredentialsFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kRenewalTokenFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kAttestProgramFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kIssueDateFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kSerialNumberFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kAttestTMDFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kDeviceCertFieldNumber;
const int RenewVirtualDeviceCredentialsResponseType::kPlatformKeyFieldNumber;
#endif  // !_MSC_VER

RenewVirtualDeviceCredentialsResponseType::RenewVirtualDeviceCredentialsResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenewVirtualDeviceCredentialsResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

RenewVirtualDeviceCredentialsResponseType::RenewVirtualDeviceCredentialsResponseType(const RenewVirtualDeviceCredentialsResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenewVirtualDeviceCredentialsResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  secretdevicecredentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cleardevicecredentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  renewaltoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attestprogram_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issuedate_ = GOOGLE_ULONGLONG(0);
  serialnumber_ = GOOGLE_ULONGLONG(0);
  attesttmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicecert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platformkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenewVirtualDeviceCredentialsResponseType::~RenewVirtualDeviceCredentialsResponseType() {
  SharedDtor();
}

void RenewVirtualDeviceCredentialsResponseType::SharedDtor() {
  if (secretdevicecredentials_ != &::google::protobuf::internal::kEmptyString) {
    delete secretdevicecredentials_;
  }
  if (cleardevicecredentials_ != &::google::protobuf::internal::kEmptyString) {
    delete cleardevicecredentials_;
  }
  if (renewaltoken_ != &::google::protobuf::internal::kEmptyString) {
    delete renewaltoken_;
  }
  if (attestprogram_ != &::google::protobuf::internal::kEmptyString) {
    delete attestprogram_;
  }
  if (attesttmd_ != &::google::protobuf::internal::kEmptyString) {
    delete attesttmd_;
  }
  if (devicecert_ != &::google::protobuf::internal::kEmptyString) {
    delete devicecert_;
  }
  if (platformkey_ != &::google::protobuf::internal::kEmptyString) {
    delete platformkey_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RenewVirtualDeviceCredentialsResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenewVirtualDeviceCredentialsResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenewVirtualDeviceCredentialsResponseType_descriptor_;
}

const RenewVirtualDeviceCredentialsResponseType& RenewVirtualDeviceCredentialsResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RenewVirtualDeviceCredentialsResponseType* RenewVirtualDeviceCredentialsResponseType::default_instance_ = NULL;

RenewVirtualDeviceCredentialsResponseType* RenewVirtualDeviceCredentialsResponseType::New() const {
  return new RenewVirtualDeviceCredentialsResponseType;
}

void RenewVirtualDeviceCredentialsResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_secretdevicecredentials()) {
      if (secretdevicecredentials_ != &::google::protobuf::internal::kEmptyString) {
        secretdevicecredentials_->clear();
      }
    }
    if (has_cleardevicecredentials()) {
      if (cleardevicecredentials_ != &::google::protobuf::internal::kEmptyString) {
        cleardevicecredentials_->clear();
      }
    }
    if (has_renewaltoken()) {
      if (renewaltoken_ != &::google::protobuf::internal::kEmptyString) {
        renewaltoken_->clear();
      }
    }
    if (has_attestprogram()) {
      if (attestprogram_ != &::google::protobuf::internal::kEmptyString) {
        attestprogram_->clear();
      }
    }
    issuedate_ = GOOGLE_ULONGLONG(0);
    serialnumber_ = GOOGLE_ULONGLONG(0);
    if (has_attesttmd()) {
      if (attesttmd_ != &::google::protobuf::internal::kEmptyString) {
        attesttmd_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_devicecert()) {
      if (devicecert_ != &::google::protobuf::internal::kEmptyString) {
        devicecert_->clear();
      }
    }
    if (has_platformkey()) {
      if (platformkey_ != &::google::protobuf::internal::kEmptyString) {
        platformkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenewVirtualDeviceCredentialsResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SecretDeviceCredentials;
        break;
      }
      
      // optional bytes SecretDeviceCredentials = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecretDeviceCredentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secretdevicecredentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ClearDeviceCredentials;
        break;
      }
      
      // optional bytes ClearDeviceCredentials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClearDeviceCredentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cleardevicecredentials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RenewalToken;
        break;
      }
      
      // optional bytes RenewalToken = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RenewalToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_renewaltoken()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AttestProgram;
        break;
      }
      
      // optional bytes AttestProgram = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttestProgram:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attestprogram()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_IssueDate;
        break;
      }
      
      // required fixed64 IssueDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_IssueDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &issuedate_)));
          set_has_issuedate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_SerialNumber;
        break;
      }
      
      // required fixed64 SerialNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SerialNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &serialnumber_)));
          set_has_serialnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_AttestTMD;
        break;
      }
      
      // optional bytes AttestTMD = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttestTMD:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attesttmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_DeviceCert;
        break;
      }
      
      // optional bytes DeviceCert = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceCert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicecert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_PlatformKey;
        break;
      }
      
      // optional bytes PlatformKey = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatformKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platformkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenewVirtualDeviceCredentialsResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional bytes SecretDeviceCredentials = 2;
  if (has_secretdevicecredentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->secretdevicecredentials(), output);
  }
  
  // optional bytes ClearDeviceCredentials = 3;
  if (has_cleardevicecredentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->cleardevicecredentials(), output);
  }
  
  // optional bytes RenewalToken = 4;
  if (has_renewaltoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->renewaltoken(), output);
  }
  
  // optional bytes AttestProgram = 5;
  if (has_attestprogram()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->attestprogram(), output);
  }
  
  // required fixed64 IssueDate = 6;
  if (has_issuedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->issuedate(), output);
  }
  
  // required fixed64 SerialNumber = 7;
  if (has_serialnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->serialnumber(), output);
  }
  
  // optional bytes AttestTMD = 8;
  if (has_attesttmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->attesttmd(), output);
  }
  
  // optional bytes DeviceCert = 9;
  if (has_devicecert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->devicecert(), output);
  }
  
  // optional bytes PlatformKey = 10;
  if (has_platformkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->platformkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenewVirtualDeviceCredentialsResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional bytes SecretDeviceCredentials = 2;
  if (has_secretdevicecredentials()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->secretdevicecredentials(), target);
  }
  
  // optional bytes ClearDeviceCredentials = 3;
  if (has_cleardevicecredentials()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->cleardevicecredentials(), target);
  }
  
  // optional bytes RenewalToken = 4;
  if (has_renewaltoken()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->renewaltoken(), target);
  }
  
  // optional bytes AttestProgram = 5;
  if (has_attestprogram()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->attestprogram(), target);
  }
  
  // required fixed64 IssueDate = 6;
  if (has_issuedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->issuedate(), target);
  }
  
  // required fixed64 SerialNumber = 7;
  if (has_serialnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->serialnumber(), target);
  }
  
  // optional bytes AttestTMD = 8;
  if (has_attesttmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->attesttmd(), target);
  }
  
  // optional bytes DeviceCert = 9;
  if (has_devicecert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->devicecert(), target);
  }
  
  // optional bytes PlatformKey = 10;
  if (has_platformkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->platformkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenewVirtualDeviceCredentialsResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional bytes SecretDeviceCredentials = 2;
    if (has_secretdevicecredentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secretdevicecredentials());
    }
    
    // optional bytes ClearDeviceCredentials = 3;
    if (has_cleardevicecredentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cleardevicecredentials());
    }
    
    // optional bytes RenewalToken = 4;
    if (has_renewaltoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->renewaltoken());
    }
    
    // optional bytes AttestProgram = 5;
    if (has_attestprogram()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attestprogram());
    }
    
    // required fixed64 IssueDate = 6;
    if (has_issuedate()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 SerialNumber = 7;
    if (has_serialnumber()) {
      total_size += 1 + 8;
    }
    
    // optional bytes AttestTMD = 8;
    if (has_attesttmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->attesttmd());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes DeviceCert = 9;
    if (has_devicecert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicecert());
    }
    
    // optional bytes PlatformKey = 10;
    if (has_platformkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platformkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenewVirtualDeviceCredentialsResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenewVirtualDeviceCredentialsResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenewVirtualDeviceCredentialsResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenewVirtualDeviceCredentialsResponseType::MergeFrom(const RenewVirtualDeviceCredentialsResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_secretdevicecredentials()) {
      set_secretdevicecredentials(from.secretdevicecredentials());
    }
    if (from.has_cleardevicecredentials()) {
      set_cleardevicecredentials(from.cleardevicecredentials());
    }
    if (from.has_renewaltoken()) {
      set_renewaltoken(from.renewaltoken());
    }
    if (from.has_attestprogram()) {
      set_attestprogram(from.attestprogram());
    }
    if (from.has_issuedate()) {
      set_issuedate(from.issuedate());
    }
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
    if (from.has_attesttmd()) {
      set_attesttmd(from.attesttmd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_devicecert()) {
      set_devicecert(from.devicecert());
    }
    if (from.has_platformkey()) {
      set_platformkey(from.platformkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenewVirtualDeviceCredentialsResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewVirtualDeviceCredentialsResponseType::CopyFrom(const RenewVirtualDeviceCredentialsResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewVirtualDeviceCredentialsResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RenewVirtualDeviceCredentialsResponseType::Swap(RenewVirtualDeviceCredentialsResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(secretdevicecredentials_, other->secretdevicecredentials_);
    std::swap(cleardevicecredentials_, other->cleardevicecredentials_);
    std::swap(renewaltoken_, other->renewaltoken_);
    std::swap(attestprogram_, other->attestprogram_);
    std::swap(issuedate_, other->issuedate_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(attesttmd_, other->attesttmd_);
    std::swap(devicecert_, other->devicecert_);
    std::swap(platformkey_, other->platformkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenewVirtualDeviceCredentialsResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenewVirtualDeviceCredentialsResponseType_descriptor_;
  metadata.reflection = RenewVirtualDeviceCredentialsResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServerKeyRequestType::kInheritedFieldNumber;
const int GetServerKeyRequestType::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetServerKeyRequestType::GetServerKeyRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerKeyRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

GetServerKeyRequestType::GetServerKeyRequestType(const GetServerKeyRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerKeyRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerKeyRequestType::~GetServerKeyRequestType() {
  SharedDtor();
}

void GetServerKeyRequestType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetServerKeyRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerKeyRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerKeyRequestType_descriptor_;
}

const GetServerKeyRequestType& GetServerKeyRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetServerKeyRequestType* GetServerKeyRequestType::default_instance_ = NULL;

GetServerKeyRequestType* GetServerKeyRequestType::New() const {
  return new GetServerKeyRequestType;
}

void GetServerKeyRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerKeyRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_UserId;
        break;
      }
      
      // required fixed64 UserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServerKeyRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required fixed64 UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerKeyRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required fixed64 UserId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerKeyRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required fixed64 UserId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerKeyRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerKeyRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerKeyRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerKeyRequestType::MergeFrom(const GetServerKeyRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerKeyRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerKeyRequestType::CopyFrom(const GetServerKeyRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerKeyRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetServerKeyRequestType::Swap(GetServerKeyRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerKeyRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerKeyRequestType_descriptor_;
  metadata.reflection = GetServerKeyRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServerKeyResponseType::kInheritedFieldNumber;
const int GetServerKeyResponseType::kServerKeyFieldNumber;
#endif  // !_MSC_VER

GetServerKeyResponseType::GetServerKeyResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerKeyResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

GetServerKeyResponseType::GetServerKeyResponseType(const GetServerKeyResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerKeyResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  serverkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerKeyResponseType::~GetServerKeyResponseType() {
  SharedDtor();
}

void GetServerKeyResponseType::SharedDtor() {
  if (serverkey_ != &::google::protobuf::internal::kEmptyString) {
    delete serverkey_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetServerKeyResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerKeyResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerKeyResponseType_descriptor_;
}

const GetServerKeyResponseType& GetServerKeyResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetServerKeyResponseType* GetServerKeyResponseType::default_instance_ = NULL;

GetServerKeyResponseType* GetServerKeyResponseType::New() const {
  return new GetServerKeyResponseType;
}

void GetServerKeyResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_serverkey()) {
      if (serverkey_ != &::google::protobuf::internal::kEmptyString) {
        serverkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerKeyResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerKey;
        break;
      }
      
      // optional bytes ServerKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serverkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServerKeyResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional bytes ServerKey = 2;
  if (has_serverkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serverkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerKeyResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional bytes ServerKey = 2;
  if (has_serverkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serverkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerKeyResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional bytes ServerKey = 2;
    if (has_serverkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serverkey());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerKeyResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerKeyResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerKeyResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerKeyResponseType::MergeFrom(const GetServerKeyResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_serverkey()) {
      set_serverkey(from.serverkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerKeyResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerKeyResponseType::CopyFrom(const GetServerKeyResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerKeyResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetServerKeyResponseType::Swap(GetServerKeyResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(serverkey_, other->serverkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerKeyResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerKeyResponseType_descriptor_;
  metadata.reflection = GetServerKeyResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingRequestType::kInheritedFieldNumber;
const int RequestPairingRequestType::kHostHardwareIdFieldNumber;
const int RequestPairingRequestType::kHostDeviceIdFieldNumber;
const int RequestPairingRequestType::kDeviceHardwareIdFieldNumber;
const int RequestPairingRequestType::kPINFieldNumber;
const int RequestPairingRequestType::kPairingAttributesFieldNumber;
#endif  // !_MSC_VER

RequestPairingRequestType::RequestPairingRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

RequestPairingRequestType::RequestPairingRequestType(const RequestPairingRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  hosthardwareid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostdeviceid_ = GOOGLE_ULONGLONG(0);
  devicehardwareid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingRequestType::~RequestPairingRequestType() {
  SharedDtor();
}

void RequestPairingRequestType::SharedDtor() {
  if (hosthardwareid_ != &::google::protobuf::internal::kEmptyString) {
    delete hosthardwareid_;
  }
  if (devicehardwareid_ != &::google::protobuf::internal::kEmptyString) {
    delete devicehardwareid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RequestPairingRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingRequestType_descriptor_;
}

const RequestPairingRequestType& RequestPairingRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RequestPairingRequestType* RequestPairingRequestType::default_instance_ = NULL;

RequestPairingRequestType* RequestPairingRequestType::New() const {
  return new RequestPairingRequestType;
}

void RequestPairingRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    if (has_hosthardwareid()) {
      if (hosthardwareid_ != &::google::protobuf::internal::kEmptyString) {
        hosthardwareid_->clear();
      }
    }
    hostdeviceid_ = GOOGLE_ULONGLONG(0);
    if (has_devicehardwareid()) {
      if (devicehardwareid_ != &::google::protobuf::internal::kEmptyString) {
        devicehardwareid_->clear();
      }
    }
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  pairingattributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HostHardwareId;
        break;
      }
      
      // optional bytes HostHardwareId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HostHardwareId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hosthardwareid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_HostDeviceId;
        break;
      }
      
      // optional fixed64 HostDeviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HostDeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hostdeviceid_)));
          set_has_hostdeviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DeviceHardwareId;
        break;
      }
      
      // required bytes DeviceHardwareId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceHardwareId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicehardwareid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PIN;
        break;
      }
      
      // optional string PIN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PIN:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PairingAttributes;
        break;
      }
      
      // repeated .vplex.ias.StrAttributeType PairingAttributes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PairingAttributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairingattributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PairingAttributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional bytes HostHardwareId = 2;
  if (has_hosthardwareid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->hosthardwareid(), output);
  }
  
  // optional fixed64 HostDeviceId = 3;
  if (has_hostdeviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->hostdeviceid(), output);
  }
  
  // required bytes DeviceHardwareId = 4;
  if (has_devicehardwareid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->devicehardwareid(), output);
  }
  
  // optional string PIN = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pin(), output);
  }
  
  // repeated .vplex.ias.StrAttributeType PairingAttributes = 6;
  for (int i = 0; i < this->pairingattributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pairingattributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional bytes HostHardwareId = 2;
  if (has_hosthardwareid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hosthardwareid(), target);
  }
  
  // optional fixed64 HostDeviceId = 3;
  if (has_hostdeviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->hostdeviceid(), target);
  }
  
  // required bytes DeviceHardwareId = 4;
  if (has_devicehardwareid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->devicehardwareid(), target);
  }
  
  // optional string PIN = 5;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pin(), target);
  }
  
  // repeated .vplex.ias.StrAttributeType PairingAttributes = 6;
  for (int i = 0; i < this->pairingattributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pairingattributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional bytes HostHardwareId = 2;
    if (has_hosthardwareid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hosthardwareid());
    }
    
    // optional fixed64 HostDeviceId = 3;
    if (has_hostdeviceid()) {
      total_size += 1 + 8;
    }
    
    // required bytes DeviceHardwareId = 4;
    if (has_devicehardwareid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicehardwareid());
    }
    
    // optional string PIN = 5;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
  }
  // repeated .vplex.ias.StrAttributeType PairingAttributes = 6;
  total_size += 1 * this->pairingattributes_size();
  for (int i = 0; i < this->pairingattributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairingattributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingRequestType::MergeFrom(const RequestPairingRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairingattributes_.MergeFrom(from.pairingattributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_hosthardwareid()) {
      set_hosthardwareid(from.hosthardwareid());
    }
    if (from.has_hostdeviceid()) {
      set_hostdeviceid(from.hostdeviceid());
    }
    if (from.has_devicehardwareid()) {
      set_devicehardwareid(from.devicehardwareid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingRequestType::CopyFrom(const RequestPairingRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  for (int i = 0; i < pairingattributes_size(); i++) {
    if (!this->pairingattributes(i).IsInitialized()) return false;
  }
  return true;
}

void RequestPairingRequestType::Swap(RequestPairingRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(hosthardwareid_, other->hosthardwareid_);
    std::swap(hostdeviceid_, other->hostdeviceid_);
    std::swap(devicehardwareid_, other->devicehardwareid_);
    std::swap(pin_, other->pin_);
    pairingattributes_.Swap(&other->pairingattributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingRequestType_descriptor_;
  metadata.reflection = RequestPairingRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingResponseType::kInheritedFieldNumber;
const int RequestPairingResponseType::kPairingTokenFieldNumber;
#endif  // !_MSC_VER

RequestPairingResponseType::RequestPairingResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

RequestPairingResponseType::RequestPairingResponseType(const RequestPairingResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  pairingtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingResponseType::~RequestPairingResponseType() {
  SharedDtor();
}

void RequestPairingResponseType::SharedDtor() {
  if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete pairingtoken_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RequestPairingResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingResponseType_descriptor_;
}

const RequestPairingResponseType& RequestPairingResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RequestPairingResponseType* RequestPairingResponseType::default_instance_ = NULL;

RequestPairingResponseType* RequestPairingResponseType::New() const {
  return new RequestPairingResponseType;
}

void RequestPairingResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_pairingtoken()) {
      if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
        pairingtoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PairingToken;
        break;
      }
      
      // required string PairingToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PairingToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairingtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairingtoken().data(), this->pairingtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string PairingToken = 2;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pairingtoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string PairingToken = 2;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pairingtoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string PairingToken = 2;
    if (has_pairingtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairingtoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingResponseType::MergeFrom(const RequestPairingResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_pairingtoken()) {
      set_pairingtoken(from.pairingtoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingResponseType::CopyFrom(const RequestPairingResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RequestPairingResponseType::Swap(RequestPairingResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(pairingtoken_, other->pairingtoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingResponseType_descriptor_;
  metadata.reflection = RequestPairingResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondToPairingRequestRequestType::kInheritedFieldNumber;
const int RespondToPairingRequestRequestType::kTransactionIdFieldNumber;
const int RespondToPairingRequestRequestType::kAcceptedPairingFieldNumber;
#endif  // !_MSC_VER

RespondToPairingRequestRequestType::RespondToPairingRequestRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondToPairingRequestRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

RespondToPairingRequestRequestType::RespondToPairingRequestRequestType(const RespondToPairingRequestRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondToPairingRequestRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  transactionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acceptedpairing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondToPairingRequestRequestType::~RespondToPairingRequestRequestType() {
  SharedDtor();
}

void RespondToPairingRequestRequestType::SharedDtor() {
  if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
    delete transactionid_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RespondToPairingRequestRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondToPairingRequestRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondToPairingRequestRequestType_descriptor_;
}

const RespondToPairingRequestRequestType& RespondToPairingRequestRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RespondToPairingRequestRequestType* RespondToPairingRequestRequestType::default_instance_ = NULL;

RespondToPairingRequestRequestType* RespondToPairingRequestRequestType::New() const {
  return new RespondToPairingRequestRequestType;
}

void RespondToPairingRequestRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    if (has_transactionid()) {
      if (transactionid_ != &::google::protobuf::internal::kEmptyString) {
        transactionid_->clear();
      }
    }
    acceptedpairing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondToPairingRequestRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TransactionId;
        break;
      }
      
      // required string TransactionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TransactionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transactionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transactionid().data(), this->transactionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AcceptedPairing;
        break;
      }
      
      // required bool AcceptedPairing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AcceptedPairing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acceptedpairing_)));
          set_has_acceptedpairing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondToPairingRequestRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string TransactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transactionid(), output);
  }
  
  // required bool AcceptedPairing = 3;
  if (has_acceptedpairing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->acceptedpairing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondToPairingRequestRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string TransactionId = 2;
  if (has_transactionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transactionid().data(), this->transactionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transactionid(), target);
  }
  
  // required bool AcceptedPairing = 3;
  if (has_acceptedpairing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->acceptedpairing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondToPairingRequestRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string TransactionId = 2;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transactionid());
    }
    
    // required bool AcceptedPairing = 3;
    if (has_acceptedpairing()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondToPairingRequestRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondToPairingRequestRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondToPairingRequestRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondToPairingRequestRequestType::MergeFrom(const RespondToPairingRequestRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_transactionid()) {
      set_transactionid(from.transactionid());
    }
    if (from.has_acceptedpairing()) {
      set_acceptedpairing(from.acceptedpairing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondToPairingRequestRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondToPairingRequestRequestType::CopyFrom(const RespondToPairingRequestRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondToPairingRequestRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RespondToPairingRequestRequestType::Swap(RespondToPairingRequestRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(acceptedpairing_, other->acceptedpairing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondToPairingRequestRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondToPairingRequestRequestType_descriptor_;
  metadata.reflection = RespondToPairingRequestRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondToPairingRequestResponseType::kInheritedFieldNumber;
#endif  // !_MSC_VER

RespondToPairingRequestResponseType::RespondToPairingRequestResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondToPairingRequestResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

RespondToPairingRequestResponseType::RespondToPairingRequestResponseType(const RespondToPairingRequestResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondToPairingRequestResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondToPairingRequestResponseType::~RespondToPairingRequestResponseType() {
  SharedDtor();
}

void RespondToPairingRequestResponseType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RespondToPairingRequestResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondToPairingRequestResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondToPairingRequestResponseType_descriptor_;
}

const RespondToPairingRequestResponseType& RespondToPairingRequestResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RespondToPairingRequestResponseType* RespondToPairingRequestResponseType::default_instance_ = NULL;

RespondToPairingRequestResponseType* RespondToPairingRequestResponseType::New() const {
  return new RespondToPairingRequestResponseType;
}

void RespondToPairingRequestResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondToPairingRequestResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondToPairingRequestResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondToPairingRequestResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondToPairingRequestResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondToPairingRequestResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondToPairingRequestResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondToPairingRequestResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondToPairingRequestResponseType::MergeFrom(const RespondToPairingRequestResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondToPairingRequestResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondToPairingRequestResponseType::CopyFrom(const RespondToPairingRequestResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondToPairingRequestResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RespondToPairingRequestResponseType::Swap(RespondToPairingRequestResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondToPairingRequestResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondToPairingRequestResponseType_descriptor_;
  metadata.reflection = RespondToPairingRequestResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingPinRequestType::kInheritedFieldNumber;
#endif  // !_MSC_VER

RequestPairingPinRequestType::RequestPairingPinRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingPinRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

RequestPairingPinRequestType::RequestPairingPinRequestType(const RequestPairingPinRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingPinRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingPinRequestType::~RequestPairingPinRequestType() {
  SharedDtor();
}

void RequestPairingPinRequestType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RequestPairingPinRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingPinRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingPinRequestType_descriptor_;
}

const RequestPairingPinRequestType& RequestPairingPinRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RequestPairingPinRequestType* RequestPairingPinRequestType::default_instance_ = NULL;

RequestPairingPinRequestType* RequestPairingPinRequestType::New() const {
  return new RequestPairingPinRequestType;
}

void RequestPairingPinRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingPinRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingPinRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingPinRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingPinRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingPinRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingPinRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingPinRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingPinRequestType::MergeFrom(const RequestPairingPinRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingPinRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingPinRequestType::CopyFrom(const RequestPairingPinRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingPinRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RequestPairingPinRequestType::Swap(RequestPairingPinRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingPinRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingPinRequestType_descriptor_;
  metadata.reflection = RequestPairingPinRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingPinResponseType::kInheritedFieldNumber;
const int RequestPairingPinResponseType::kPairingPinFieldNumber;
#endif  // !_MSC_VER

RequestPairingPinResponseType::RequestPairingPinResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingPinResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

RequestPairingPinResponseType::RequestPairingPinResponseType(const RequestPairingPinResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingPinResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  pairingpin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingPinResponseType::~RequestPairingPinResponseType() {
  SharedDtor();
}

void RequestPairingPinResponseType::SharedDtor() {
  if (pairingpin_ != &::google::protobuf::internal::kEmptyString) {
    delete pairingpin_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void RequestPairingPinResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingPinResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingPinResponseType_descriptor_;
}

const RequestPairingPinResponseType& RequestPairingPinResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RequestPairingPinResponseType* RequestPairingPinResponseType::default_instance_ = NULL;

RequestPairingPinResponseType* RequestPairingPinResponseType::New() const {
  return new RequestPairingPinResponseType;
}

void RequestPairingPinResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_pairingpin()) {
      if (pairingpin_ != &::google::protobuf::internal::kEmptyString) {
        pairingpin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingPinResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PairingPin;
        break;
      }
      
      // required string PairingPin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PairingPin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairingpin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairingpin().data(), this->pairingpin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingPinResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string PairingPin = 2;
  if (has_pairingpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingpin().data(), this->pairingpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pairingpin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingPinResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string PairingPin = 2;
  if (has_pairingpin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingpin().data(), this->pairingpin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pairingpin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingPinResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string PairingPin = 2;
    if (has_pairingpin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairingpin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingPinResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingPinResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingPinResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingPinResponseType::MergeFrom(const RequestPairingPinResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_pairingpin()) {
      set_pairingpin(from.pairingpin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingPinResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingPinResponseType::CopyFrom(const RequestPairingPinResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingPinResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void RequestPairingPinResponseType::Swap(RequestPairingPinResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(pairingpin_, other->pairingpin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingPinResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingPinResponseType_descriptor_;
  metadata.reflection = RequestPairingPinResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPairingStatusRequestType::kInheritedFieldNumber;
const int GetPairingStatusRequestType::kPairingTokenFieldNumber;
#endif  // !_MSC_VER

GetPairingStatusRequestType::GetPairingStatusRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPairingStatusRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractRequestType*>(&::vplex::ias::AbstractRequestType::default_instance());
}

GetPairingStatusRequestType::GetPairingStatusRequestType(const GetPairingStatusRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPairingStatusRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  pairingtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPairingStatusRequestType::~GetPairingStatusRequestType() {
  SharedDtor();
}

void GetPairingStatusRequestType::SharedDtor() {
  if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
    delete pairingtoken_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetPairingStatusRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPairingStatusRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPairingStatusRequestType_descriptor_;
}

const GetPairingStatusRequestType& GetPairingStatusRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetPairingStatusRequestType* GetPairingStatusRequestType::default_instance_ = NULL;

GetPairingStatusRequestType* GetPairingStatusRequestType::New() const {
  return new GetPairingStatusRequestType;
}

void GetPairingStatusRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractRequestType::Clear();
    }
    if (has_pairingtoken()) {
      if (pairingtoken_ != &::google::protobuf::internal::kEmptyString) {
        pairingtoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPairingStatusRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PairingToken;
        break;
      }
      
      // required string PairingToken = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PairingToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairingtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairingtoken().data(), this->pairingtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPairingStatusRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string PairingToken = 2;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pairingtoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPairingStatusRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string PairingToken = 2;
  if (has_pairingtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairingtoken().data(), this->pairingtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pairingtoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPairingStatusRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string PairingToken = 2;
    if (has_pairingtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairingtoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPairingStatusRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPairingStatusRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPairingStatusRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPairingStatusRequestType::MergeFrom(const GetPairingStatusRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_pairingtoken()) {
      set_pairingtoken(from.pairingtoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPairingStatusRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPairingStatusRequestType::CopyFrom(const GetPairingStatusRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPairingStatusRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetPairingStatusRequestType::Swap(GetPairingStatusRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(pairingtoken_, other->pairingtoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPairingStatusRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPairingStatusRequestType_descriptor_;
  metadata.reflection = GetPairingStatusRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPairingStatusResponseType::kInheritedFieldNumber;
const int GetPairingStatusResponseType::kStatusFieldNumber;
const int GetPairingStatusResponseType::kUsernameFieldNumber;
#endif  // !_MSC_VER

GetPairingStatusResponseType::GetPairingStatusResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPairingStatusResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::ias::AbstractResponseType*>(&::vplex::ias::AbstractResponseType::default_instance());
}

GetPairingStatusResponseType::GetPairingStatusResponseType(const GetPairingStatusResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPairingStatusResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPairingStatusResponseType::~GetPairingStatusResponseType() {
  SharedDtor();
}

void GetPairingStatusResponseType::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetPairingStatusResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPairingStatusResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPairingStatusResponseType_descriptor_;
}

const GetPairingStatusResponseType& GetPairingStatusResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fias_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetPairingStatusResponseType* GetPairingStatusResponseType::default_instance_ = NULL;

GetPairingStatusResponseType* GetPairingStatusResponseType::New() const {
  return new GetPairingStatusResponseType;
}

void GetPairingStatusResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::ias::AbstractResponseType::Clear();
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPairingStatusResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.ias.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Status;
        break;
      }
      
      // required string Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Username;
        break;
      }
      
      // optional string Username = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPairingStatusResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // required string Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(), output);
  }
  
  // optional string Username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPairingStatusResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.ias.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // required string Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }
  
  // optional string Username = 3;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPairingStatusResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.ias.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required string Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // optional string Username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPairingStatusResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPairingStatusResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPairingStatusResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPairingStatusResponseType::MergeFrom(const GetPairingStatusResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::ias::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPairingStatusResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPairingStatusResponseType::CopyFrom(const GetPairingStatusResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPairingStatusResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetPairingStatusResponseType::Swap(GetPairingStatusResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(status_, other->status_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPairingStatusResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPairingStatusResponseType_descriptor_;
  metadata.reflection = GetPairingStatusResponseType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ias
}  // namespace vplex

// @@protoc_insertion_point(global_scope)
