// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vplex_ans_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace ans {

namespace {

const ::google::protobuf::Descriptor* UserDeviceMsg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDeviceMsg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionExpiredDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionExpiredDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairingRequestAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairingRequestAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairingRequestDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairingRequestDetails_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ANS_NotificationType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserDeviceMsgType_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vplex_5fans_5fmessage_2eproto() {
  protobuf_AddDesc_vplex_5fans_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vplex_ans_message.proto");
  GOOGLE_CHECK(file != NULL);
  UserDeviceMsg_t_descriptor_ = file->message_type(0);
  static const int UserDeviceMsg_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeviceMsg_t, srcdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeviceMsg_t, msgtype_),
  };
  UserDeviceMsg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDeviceMsg_t_descriptor_,
      UserDeviceMsg_t::default_instance_,
      UserDeviceMsg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeviceMsg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDeviceMsg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDeviceMsg_t));
  SessionExpiredDetails_descriptor_ = file->message_type(1);
  static const int SessionExpiredDetails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExpiredDetails, device_unlinked_),
  };
  SessionExpiredDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionExpiredDetails_descriptor_,
      SessionExpiredDetails::default_instance_,
      SessionExpiredDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExpiredDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionExpiredDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionExpiredDetails));
  PairingRequestAttribute_descriptor_ = file->message_type(2);
  static const int PairingRequestAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, value_),
  };
  PairingRequestAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairingRequestAttribute_descriptor_,
      PairingRequestAttribute::default_instance_,
      PairingRequestAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairingRequestAttribute));
  PairingRequestDetails_descriptor_ = file->message_type(3);
  static const int PairingRequestDetails_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestDetails, pairing_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestDetails, transaction_id_),
  };
  PairingRequestDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairingRequestDetails_descriptor_,
      PairingRequestDetails::default_instance_,
      PairingRequestDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairingRequestDetails));
  ANS_NotificationType_t_descriptor_ = file->enum_type(0);
  UserDeviceMsgType_t_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vplex_5fans_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDeviceMsg_t_descriptor_, &UserDeviceMsg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionExpiredDetails_descriptor_, &SessionExpiredDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairingRequestAttribute_descriptor_, &PairingRequestAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairingRequestDetails_descriptor_, &PairingRequestDetails::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vplex_5fans_5fmessage_2eproto() {
  delete UserDeviceMsg_t::default_instance_;
  delete UserDeviceMsg_t_reflection_;
  delete SessionExpiredDetails::default_instance_;
  delete SessionExpiredDetails_reflection_;
  delete PairingRequestAttribute::default_instance_;
  delete PairingRequestAttribute_reflection_;
  delete PairingRequestDetails::default_instance_;
  delete PairingRequestDetails_reflection_;
}

void protobuf_AddDesc_vplex_5fans_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027vplex_ans_message.proto\022\tvplex.ans\"W\n\017"
    "UserDeviceMsg_t\022\023\n\013srcDeviceId\030\001 \002(\006\022/\n\007"
    "msgType\030\002 \002(\0162\036.vplex.ans.UserDeviceMsgT"
    "ype_t\"7\n\025SessionExpiredDetails\022\036\n\017device"
    "_unlinked\030\001 \001(\010:\005false\"5\n\027PairingRequest"
    "Attribute\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"o\n"
    "\025PairingRequestDetails\022>\n\022pairing_attrib"
    "utes\030\001 \003(\0132\".vplex.ans.PairingRequestAtt"
    "ribute\022\026\n\016transaction_id\030\002 \002(\t*\214\002\n\026ANS_N"
    "otificationType_t\022\027\n\023ANS_TYPE_SYNC_AGENT"
    "\020\002\022\022\n\016ANS_TYPE_PROXY\020\003\022\030\n\024ANS_TYPE_CLIEN"
    "T_CONN\020\004\022\026\n\022ANS_TYPE_COMMUNITY\020\005\022\032\n\026ANS_"
    "TYPE_SERVER_WAKEUP\020\006\022\034\n\030ANS_TYPE_SESSION"
    "_EXPIRED\020\013\022 \n\034ANS_TYPE_USER_DEVICE_MESSA"
    "GE\020\014\022\036\n\032ANS_TYPE_PAIRING_REQUESTED\020\r\022\027\n\022"
    "ANS_TYPE_KEEPALIVE\020\376\001*/\n\023UserDeviceMsgTy"
    "pe_t\022\030\n\024REMOTE_SW_UPDATE_REQ\020\001B\035\n\017igware"
    ".vplex.pbB\nAnsMessage", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vplex_ans_message.proto", &protobuf_RegisterTypes);
  UserDeviceMsg_t::default_instance_ = new UserDeviceMsg_t();
  SessionExpiredDetails::default_instance_ = new SessionExpiredDetails();
  PairingRequestAttribute::default_instance_ = new PairingRequestAttribute();
  PairingRequestDetails::default_instance_ = new PairingRequestDetails();
  UserDeviceMsg_t::default_instance_->InitAsDefaultInstance();
  SessionExpiredDetails::default_instance_->InitAsDefaultInstance();
  PairingRequestAttribute::default_instance_->InitAsDefaultInstance();
  PairingRequestDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vplex_5fans_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vplex_5fans_5fmessage_2eproto {
  StaticDescriptorInitializer_vplex_5fans_5fmessage_2eproto() {
    protobuf_AddDesc_vplex_5fans_5fmessage_2eproto();
  }
} static_descriptor_initializer_vplex_5fans_5fmessage_2eproto_;

const ::google::protobuf::EnumDescriptor* ANS_NotificationType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ANS_NotificationType_t_descriptor_;
}
bool ANS_NotificationType_t_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 12:
    case 13:
    case 254:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserDeviceMsgType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDeviceMsgType_t_descriptor_;
}
bool UserDeviceMsgType_t_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserDeviceMsg_t::kSrcDeviceIdFieldNumber;
const int UserDeviceMsg_t::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

UserDeviceMsg_t::UserDeviceMsg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDeviceMsg_t::InitAsDefaultInstance() {
}

UserDeviceMsg_t::UserDeviceMsg_t(const UserDeviceMsg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDeviceMsg_t::SharedCtor() {
  _cached_size_ = 0;
  srcdeviceid_ = GOOGLE_ULONGLONG(0);
  msgtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDeviceMsg_t::~UserDeviceMsg_t() {
  SharedDtor();
}

void UserDeviceMsg_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDeviceMsg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDeviceMsg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDeviceMsg_t_descriptor_;
}

const UserDeviceMsg_t& UserDeviceMsg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fans_5fmessage_2eproto();  return *default_instance_;
}

UserDeviceMsg_t* UserDeviceMsg_t::default_instance_ = NULL;

UserDeviceMsg_t* UserDeviceMsg_t::New() const {
  return new UserDeviceMsg_t;
}

void UserDeviceMsg_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    srcdeviceid_ = GOOGLE_ULONGLONG(0);
    msgtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDeviceMsg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 srcDeviceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &srcdeviceid_)));
          set_has_srcdeviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }
      
      // required .vplex.ans.UserDeviceMsgType_t msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::ans::UserDeviceMsgType_t_IsValid(value)) {
            set_msgtype(static_cast< vplex::ans::UserDeviceMsgType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDeviceMsg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 srcDeviceId = 1;
  if (has_srcdeviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->srcdeviceid(), output);
  }
  
  // required .vplex.ans.UserDeviceMsgType_t msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDeviceMsg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 srcDeviceId = 1;
  if (has_srcdeviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->srcdeviceid(), target);
  }
  
  // required .vplex.ans.UserDeviceMsgType_t msgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDeviceMsg_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 srcDeviceId = 1;
    if (has_srcdeviceid()) {
      total_size += 1 + 8;
    }
    
    // required .vplex.ans.UserDeviceMsgType_t msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDeviceMsg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDeviceMsg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDeviceMsg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDeviceMsg_t::MergeFrom(const UserDeviceMsg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_srcdeviceid()) {
      set_srcdeviceid(from.srcdeviceid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDeviceMsg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDeviceMsg_t::CopyFrom(const UserDeviceMsg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDeviceMsg_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UserDeviceMsg_t::Swap(UserDeviceMsg_t* other) {
  if (other != this) {
    std::swap(srcdeviceid_, other->srcdeviceid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDeviceMsg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDeviceMsg_t_descriptor_;
  metadata.reflection = UserDeviceMsg_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionExpiredDetails::kDeviceUnlinkedFieldNumber;
#endif  // !_MSC_VER

SessionExpiredDetails::SessionExpiredDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionExpiredDetails::InitAsDefaultInstance() {
}

SessionExpiredDetails::SessionExpiredDetails(const SessionExpiredDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionExpiredDetails::SharedCtor() {
  _cached_size_ = 0;
  device_unlinked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionExpiredDetails::~SessionExpiredDetails() {
  SharedDtor();
}

void SessionExpiredDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SessionExpiredDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionExpiredDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionExpiredDetails_descriptor_;
}

const SessionExpiredDetails& SessionExpiredDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fans_5fmessage_2eproto();  return *default_instance_;
}

SessionExpiredDetails* SessionExpiredDetails::default_instance_ = NULL;

SessionExpiredDetails* SessionExpiredDetails::New() const {
  return new SessionExpiredDetails;
}

void SessionExpiredDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_unlinked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionExpiredDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool device_unlinked = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &device_unlinked_)));
          set_has_device_unlinked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionExpiredDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool device_unlinked = 1 [default = false];
  if (has_device_unlinked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->device_unlinked(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionExpiredDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool device_unlinked = 1 [default = false];
  if (has_device_unlinked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->device_unlinked(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionExpiredDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool device_unlinked = 1 [default = false];
    if (has_device_unlinked()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionExpiredDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionExpiredDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionExpiredDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionExpiredDetails::MergeFrom(const SessionExpiredDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_unlinked()) {
      set_device_unlinked(from.device_unlinked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionExpiredDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionExpiredDetails::CopyFrom(const SessionExpiredDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionExpiredDetails::IsInitialized() const {
  
  return true;
}

void SessionExpiredDetails::Swap(SessionExpiredDetails* other) {
  if (other != this) {
    std::swap(device_unlinked_, other->device_unlinked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionExpiredDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionExpiredDetails_descriptor_;
  metadata.reflection = SessionExpiredDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairingRequestAttribute::kKeyFieldNumber;
const int PairingRequestAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

PairingRequestAttribute::PairingRequestAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairingRequestAttribute::InitAsDefaultInstance() {
}

PairingRequestAttribute::PairingRequestAttribute(const PairingRequestAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairingRequestAttribute::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairingRequestAttribute::~PairingRequestAttribute() {
  SharedDtor();
}

void PairingRequestAttribute::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PairingRequestAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairingRequestAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairingRequestAttribute_descriptor_;
}

const PairingRequestAttribute& PairingRequestAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fans_5fmessage_2eproto();  return *default_instance_;
}

PairingRequestAttribute* PairingRequestAttribute::default_instance_ = NULL;

PairingRequestAttribute* PairingRequestAttribute::New() const {
  return new PairingRequestAttribute;
}

void PairingRequestAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairingRequestAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairingRequestAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairingRequestAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairingRequestAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairingRequestAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairingRequestAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairingRequestAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairingRequestAttribute::MergeFrom(const PairingRequestAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairingRequestAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairingRequestAttribute::CopyFrom(const PairingRequestAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairingRequestAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PairingRequestAttribute::Swap(PairingRequestAttribute* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairingRequestAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairingRequestAttribute_descriptor_;
  metadata.reflection = PairingRequestAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairingRequestDetails::kPairingAttributesFieldNumber;
const int PairingRequestDetails::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

PairingRequestDetails::PairingRequestDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairingRequestDetails::InitAsDefaultInstance() {
}

PairingRequestDetails::PairingRequestDetails(const PairingRequestDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairingRequestDetails::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairingRequestDetails::~PairingRequestDetails() {
  SharedDtor();
}

void PairingRequestDetails::SharedDtor() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (this != default_instance_) {
  }
}

void PairingRequestDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairingRequestDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairingRequestDetails_descriptor_;
}

const PairingRequestDetails& PairingRequestDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fans_5fmessage_2eproto();  return *default_instance_;
}

PairingRequestDetails* PairingRequestDetails::default_instance_ = NULL;

PairingRequestDetails* PairingRequestDetails::New() const {
  return new PairingRequestDetails;
}

void PairingRequestDetails::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
  }
  pairing_attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairingRequestDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vplex.ans.PairingRequestAttribute pairing_attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairing_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairing_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pairing_attributes;
        if (input->ExpectTag(18)) goto parse_transaction_id;
        break;
      }
      
      // required string transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairingRequestDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vplex.ans.PairingRequestAttribute pairing_attributes = 1;
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairing_attributes(i), output);
  }
  
  // required string transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transaction_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairingRequestDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .vplex.ans.PairingRequestAttribute pairing_attributes = 1;
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairing_attributes(i), target);
  }
  
  // required string transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transaction_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairingRequestDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }
    
  }
  // repeated .vplex.ans.PairingRequestAttribute pairing_attributes = 1;
  total_size += 1 * this->pairing_attributes_size();
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairing_attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairingRequestDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairingRequestDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairingRequestDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairingRequestDetails::MergeFrom(const PairingRequestDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairing_attributes_.MergeFrom(from.pairing_attributes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairingRequestDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairingRequestDetails::CopyFrom(const PairingRequestDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairingRequestDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < pairing_attributes_size(); i++) {
    if (!this->pairing_attributes(i).IsInitialized()) return false;
  }
  return true;
}

void PairingRequestDetails::Swap(PairingRequestDetails* other) {
  if (other != this) {
    pairing_attributes_.Swap(&other->pairing_attributes_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairingRequestDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairingRequestDetails_descriptor_;
  metadata.reflection = PairingRequestDetails_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ans
}  // namespace vplex

// @@protoc_insertion_point(global_scope)
