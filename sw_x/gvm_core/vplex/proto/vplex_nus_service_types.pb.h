// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vplex_nus_service_types.proto

#ifndef PROTOBUF_vplex_5fnus_5fservice_5ftypes_2eproto__INCLUDED
#define PROTOBUF_vplex_5fnus_5fservice_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace nus {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();

class AbstractRequestType;
class AbstractResponseType;
class TitleVersionType;
class GetSystemUpdateRequestType;
class GetSystemUpdateResponseType;
class GetSystemTMDRequestType;
class GetSystemTMDResponseType;
class GetSystemPersonalizedETicketRequestType;
class GetSystemPersonalizedETicketResponseType;
class GetSystemCommonETicketRequestType;
class GetSystemCommonETicketResponseType;

// ===================================================================

class AbstractRequestType : public ::google::protobuf::Message {
 public:
  AbstractRequestType();
  virtual ~AbstractRequestType();
  
  AbstractRequestType(const AbstractRequestType& from);
  
  inline AbstractRequestType& operator=(const AbstractRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AbstractRequestType& default_instance();
  
  void Swap(AbstractRequestType* other);
  
  // implements Message ----------------------------------------------
  
  AbstractRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbstractRequestType& from);
  void MergeFrom(const AbstractRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // required string MessageId = 2;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 2;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  
  // required fixed64 DeviceId = 3;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 3;
  inline ::google::protobuf::uint64 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint64 value);
  
  // required string RegionId = 4;
  inline bool has_regionid() const;
  inline void clear_regionid();
  static const int kRegionIdFieldNumber = 4;
  inline const ::std::string& regionid() const;
  inline void set_regionid(const ::std::string& value);
  inline void set_regionid(const char* value);
  inline void set_regionid(const char* value, size_t size);
  inline ::std::string* mutable_regionid();
  inline ::std::string* release_regionid();
  
  // required string CountryCode = 5;
  inline bool has_countrycode() const;
  inline void clear_countrycode();
  static const int kCountryCodeFieldNumber = 5;
  inline const ::std::string& countrycode() const;
  inline void set_countrycode(const ::std::string& value);
  inline void set_countrycode(const char* value);
  inline void set_countrycode(const char* value, size_t size);
  inline ::std::string* mutable_countrycode();
  inline ::std::string* release_countrycode();
  
  // optional sint32 VirtualDeviceType = 6;
  inline bool has_virtualdevicetype() const;
  inline void clear_virtualdevicetype();
  static const int kVirtualDeviceTypeFieldNumber = 6;
  inline ::google::protobuf::int32 virtualdevicetype() const;
  inline void set_virtualdevicetype(::google::protobuf::int32 value);
  
  // optional string Language = 7;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 7;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  
  // optional string SerialNo = 8;
  inline bool has_serialno() const;
  inline void clear_serialno();
  static const int kSerialNoFieldNumber = 8;
  inline const ::std::string& serialno() const;
  inline void set_serialno(const ::std::string& value);
  inline void set_serialno(const char* value);
  inline void set_serialno(const char* value, size_t size);
  inline ::std::string* mutable_serialno();
  inline ::std::string* release_serialno();
  
  // optional string AccountId = 9;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountIdFieldNumber = 9;
  inline const ::std::string& accountid() const;
  inline void set_accountid(const ::std::string& value);
  inline void set_accountid(const char* value);
  inline void set_accountid(const char* value, size_t size);
  inline ::std::string* mutable_accountid();
  inline ::std::string* release_accountid();
  
  // optional fixed64 UserId = 10;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 10;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:vplex.nus.AbstractRequestType)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_regionid();
  inline void clear_has_regionid();
  inline void set_has_countrycode();
  inline void clear_has_countrycode();
  inline void set_has_virtualdevicetype();
  inline void clear_has_virtualdevicetype();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_serialno();
  inline void clear_has_serialno();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_userid();
  inline void clear_has_userid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* version_;
  ::std::string* messageid_;
  ::google::protobuf::uint64 deviceid_;
  ::std::string* regionid_;
  ::std::string* countrycode_;
  ::std::string* language_;
  ::std::string* serialno_;
  ::std::string* accountid_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::int32 virtualdevicetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static AbstractRequestType* default_instance_;
};
// -------------------------------------------------------------------

class AbstractResponseType : public ::google::protobuf::Message {
 public:
  AbstractResponseType();
  virtual ~AbstractResponseType();
  
  AbstractResponseType(const AbstractResponseType& from);
  
  inline AbstractResponseType& operator=(const AbstractResponseType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AbstractResponseType& default_instance();
  
  void Swap(AbstractResponseType* other);
  
  // implements Message ----------------------------------------------
  
  AbstractResponseType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbstractResponseType& from);
  void MergeFrom(const AbstractResponseType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string Version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // required fixed64 DeviceId = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 deviceid() const;
  inline void set_deviceid(::google::protobuf::uint64 value);
  
  // required string MessageId = 3;
  inline bool has_messageid() const;
  inline void clear_messageid();
  static const int kMessageIdFieldNumber = 3;
  inline const ::std::string& messageid() const;
  inline void set_messageid(const ::std::string& value);
  inline void set_messageid(const char* value);
  inline void set_messageid(const char* value, size_t size);
  inline ::std::string* mutable_messageid();
  inline ::std::string* release_messageid();
  
  // required fixed64 TimeStamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 4;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // required sint32 ErrorCode = 5;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 5;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);
  
  // optional string ErrorMessage = 6;
  inline bool has_errormessage() const;
  inline void clear_errormessage();
  static const int kErrorMessageFieldNumber = 6;
  inline const ::std::string& errormessage() const;
  inline void set_errormessage(const ::std::string& value);
  inline void set_errormessage(const char* value);
  inline void set_errormessage(const char* value, size_t size);
  inline ::std::string* mutable_errormessage();
  inline ::std::string* release_errormessage();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.AbstractResponseType)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_messageid();
  inline void clear_has_messageid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errormessage();
  inline void clear_has_errormessage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* version_;
  ::google::protobuf::uint64 deviceid_;
  ::std::string* messageid_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* errormessage_;
  ::google::protobuf::int32 errorcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static AbstractResponseType* default_instance_;
};
// -------------------------------------------------------------------

class TitleVersionType : public ::google::protobuf::Message {
 public:
  TitleVersionType();
  virtual ~TitleVersionType();
  
  TitleVersionType(const TitleVersionType& from);
  
  inline TitleVersionType& operator=(const TitleVersionType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TitleVersionType& default_instance();
  
  void Swap(TitleVersionType* other);
  
  // implements Message ----------------------------------------------
  
  TitleVersionType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TitleVersionType& from);
  void MergeFrom(const TitleVersionType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string TitleId = 1;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIdFieldNumber = 1;
  inline const ::std::string& titleid() const;
  inline void set_titleid(const ::std::string& value);
  inline void set_titleid(const char* value);
  inline void set_titleid(const char* value, size_t size);
  inline ::std::string* mutable_titleid();
  inline ::std::string* release_titleid();
  
  // required sint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // optional sint64 FsSize = 3;
  inline bool has_fssize() const;
  inline void clear_fssize();
  static const int kFsSizeFieldNumber = 3;
  inline ::google::protobuf::int64 fssize() const;
  inline void set_fssize(::google::protobuf::int64 value);
  
  // optional sint32 TicketSize = 4;
  inline bool has_ticketsize() const;
  inline void clear_ticketsize();
  static const int kTicketSizeFieldNumber = 4;
  inline ::google::protobuf::int32 ticketsize() const;
  inline void set_ticketsize(::google::protobuf::int32 value);
  
  // optional sint32 TMDSize = 5;
  inline bool has_tmdsize() const;
  inline void clear_tmdsize();
  static const int kTMDSizeFieldNumber = 5;
  inline ::google::protobuf::int32 tmdsize() const;
  inline void set_tmdsize(::google::protobuf::int32 value);
  
  // optional string AppGUID = 6;
  inline bool has_appguid() const;
  inline void clear_appguid();
  static const int kAppGUIDFieldNumber = 6;
  inline const ::std::string& appguid() const;
  inline void set_appguid(const ::std::string& value);
  inline void set_appguid(const char* value);
  inline void set_appguid(const char* value, size_t size);
  inline ::std::string* mutable_appguid();
  inline ::std::string* release_appguid();
  
  // optional string AppVersion = 7;
  inline bool has_appversion() const;
  inline void clear_appversion();
  static const int kAppVersionFieldNumber = 7;
  inline const ::std::string& appversion() const;
  inline void set_appversion(const ::std::string& value);
  inline void set_appversion(const char* value);
  inline void set_appversion(const char* value, size_t size);
  inline ::std::string* mutable_appversion();
  inline ::std::string* release_appversion();
  
  // optional string AppMinVersion = 8;
  inline bool has_appminversion() const;
  inline void clear_appminversion();
  static const int kAppMinVersionFieldNumber = 8;
  inline const ::std::string& appminversion() const;
  inline void set_appminversion(const ::std::string& value);
  inline void set_appminversion(const char* value);
  inline void set_appminversion(const char* value, size_t size);
  inline ::std::string* mutable_appminversion();
  inline ::std::string* release_appminversion();
  
  // optional string CcdMinVersion = 9;
  inline bool has_ccdminversion() const;
  inline void clear_ccdminversion();
  static const int kCcdMinVersionFieldNumber = 9;
  inline const ::std::string& ccdminversion() const;
  inline void set_ccdminversion(const ::std::string& value);
  inline void set_ccdminversion(const char* value);
  inline void set_ccdminversion(const char* value, size_t size);
  inline ::std::string* mutable_ccdminversion();
  inline ::std::string* release_ccdminversion();
  
  // optional string AppMessage = 10;
  inline bool has_appmessage() const;
  inline void clear_appmessage();
  static const int kAppMessageFieldNumber = 10;
  inline const ::std::string& appmessage() const;
  inline void set_appmessage(const ::std::string& value);
  inline void set_appmessage(const char* value);
  inline void set_appmessage(const char* value, size_t size);
  inline ::std::string* mutable_appmessage();
  inline ::std::string* release_appmessage();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.TitleVersionType)
 private:
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_fssize();
  inline void clear_has_fssize();
  inline void set_has_ticketsize();
  inline void clear_has_ticketsize();
  inline void set_has_tmdsize();
  inline void clear_has_tmdsize();
  inline void set_has_appguid();
  inline void clear_has_appguid();
  inline void set_has_appversion();
  inline void clear_has_appversion();
  inline void set_has_appminversion();
  inline void clear_has_appminversion();
  inline void set_has_ccdminversion();
  inline void clear_has_ccdminversion();
  inline void set_has_appmessage();
  inline void clear_has_appmessage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* titleid_;
  ::google::protobuf::int64 fssize_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 ticketsize_;
  ::std::string* appguid_;
  ::std::string* appversion_;
  ::std::string* appminversion_;
  ::std::string* ccdminversion_;
  ::std::string* appmessage_;
  ::google::protobuf::int32 tmdsize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static TitleVersionType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemUpdateRequestType : public ::google::protobuf::Message {
 public:
  GetSystemUpdateRequestType();
  virtual ~GetSystemUpdateRequestType();
  
  GetSystemUpdateRequestType(const GetSystemUpdateRequestType& from);
  
  inline GetSystemUpdateRequestType& operator=(const GetSystemUpdateRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemUpdateRequestType& default_instance();
  
  void Swap(GetSystemUpdateRequestType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemUpdateRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemUpdateRequestType& from);
  void MergeFrom(const GetSystemUpdateRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractRequestType& _inherited() const;
  inline ::vplex::nus::AbstractRequestType* mutable__inherited();
  inline ::vplex::nus::AbstractRequestType* release__inherited();
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  inline int titleversion_size() const;
  inline void clear_titleversion();
  static const int kTitleVersionFieldNumber = 2;
  inline const ::vplex::nus::TitleVersionType& titleversion(int index) const;
  inline ::vplex::nus::TitleVersionType* mutable_titleversion(int index);
  inline ::vplex::nus::TitleVersionType* add_titleversion();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >&
      titleversion() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >*
      mutable_titleversion();
  
  // optional sint32 Attribute = 3;
  inline bool has_attribute() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  inline ::google::protobuf::int32 attribute() const;
  inline void set_attribute(::google::protobuf::int32 value);
  
  // optional string AuditData = 4;
  inline bool has_auditdata() const;
  inline void clear_auditdata();
  static const int kAuditDataFieldNumber = 4;
  inline const ::std::string& auditdata() const;
  inline void set_auditdata(const ::std::string& value);
  inline void set_auditdata(const char* value);
  inline void set_auditdata(const char* value, size_t size);
  inline ::std::string* mutable_auditdata();
  inline ::std::string* release_auditdata();
  
  // optional sint32 RunTimeTypeMask = 5;
  inline bool has_runtimetypemask() const;
  inline void clear_runtimetypemask();
  static const int kRunTimeTypeMaskFieldNumber = 5;
  inline ::google::protobuf::int32 runtimetypemask() const;
  inline void set_runtimetypemask(::google::protobuf::int32 value);
  
  // optional string Group = 6;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 6;
  inline const ::std::string& group() const;
  inline void set_group(const ::std::string& value);
  inline void set_group(const char* value);
  inline void set_group(const char* value, size_t size);
  inline ::std::string* mutable_group();
  inline ::std::string* release_group();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemUpdateRequestType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  inline void set_has_attribute();
  inline void clear_has_attribute();
  inline void set_has_auditdata();
  inline void clear_has_auditdata();
  inline void set_has_runtimetypemask();
  inline void clear_has_runtimetypemask();
  inline void set_has_group();
  inline void clear_has_group();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractRequestType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType > titleversion_;
  ::std::string* auditdata_;
  ::google::protobuf::int32 attribute_;
  ::google::protobuf::int32 runtimetypemask_;
  ::std::string* group_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemUpdateRequestType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemUpdateResponseType : public ::google::protobuf::Message {
 public:
  GetSystemUpdateResponseType();
  virtual ~GetSystemUpdateResponseType();
  
  GetSystemUpdateResponseType(const GetSystemUpdateResponseType& from);
  
  inline GetSystemUpdateResponseType& operator=(const GetSystemUpdateResponseType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemUpdateResponseType& default_instance();
  
  void Swap(GetSystemUpdateResponseType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemUpdateResponseType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemUpdateResponseType& from);
  void MergeFrom(const GetSystemUpdateResponseType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractResponseType& _inherited() const;
  inline ::vplex::nus::AbstractResponseType* mutable__inherited();
  inline ::vplex::nus::AbstractResponseType* release__inherited();
  
  // optional string ContentPrefixURL = 2;
  inline bool has_contentprefixurl() const;
  inline void clear_contentprefixurl();
  static const int kContentPrefixURLFieldNumber = 2;
  inline const ::std::string& contentprefixurl() const;
  inline void set_contentprefixurl(const ::std::string& value);
  inline void set_contentprefixurl(const char* value);
  inline void set_contentprefixurl(const char* value, size_t size);
  inline ::std::string* mutable_contentprefixurl();
  inline ::std::string* release_contentprefixurl();
  
  // optional string UncachedContentPrefixURL = 3;
  inline bool has_uncachedcontentprefixurl() const;
  inline void clear_uncachedcontentprefixurl();
  static const int kUncachedContentPrefixURLFieldNumber = 3;
  inline const ::std::string& uncachedcontentprefixurl() const;
  inline void set_uncachedcontentprefixurl(const ::std::string& value);
  inline void set_uncachedcontentprefixurl(const char* value);
  inline void set_uncachedcontentprefixurl(const char* value, size_t size);
  inline ::std::string* mutable_uncachedcontentprefixurl();
  inline ::std::string* release_uncachedcontentprefixurl();
  
  // optional string PcsPrefiURL = 4;
  inline bool has_pcsprefiurl() const;
  inline void clear_pcsprefiurl();
  static const int kPcsPrefiURLFieldNumber = 4;
  inline const ::std::string& pcsprefiurl() const;
  inline void set_pcsprefiurl(const ::std::string& value);
  inline void set_pcsprefiurl(const char* value);
  inline void set_pcsprefiurl(const char* value, size_t size);
  inline ::std::string* mutable_pcsprefiurl();
  inline ::std::string* release_pcsprefiurl();
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 5;
  inline int titleversion_size() const;
  inline void clear_titleversion();
  static const int kTitleVersionFieldNumber = 5;
  inline const ::vplex::nus::TitleVersionType& titleversion(int index) const;
  inline ::vplex::nus::TitleVersionType* mutable_titleversion(int index);
  inline ::vplex::nus::TitleVersionType* add_titleversion();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >&
      titleversion() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >*
      mutable_titleversion();
  
  // required sint32 UploadAuditData = 6;
  inline bool has_uploadauditdata() const;
  inline void clear_uploadauditdata();
  static const int kUploadAuditDataFieldNumber = 6;
  inline ::google::protobuf::int32 uploadauditdata() const;
  inline void set_uploadauditdata(::google::protobuf::int32 value);
  
  // optional bool IsQA = 7;
  inline bool has_isqa() const;
  inline void clear_isqa();
  static const int kIsQAFieldNumber = 7;
  inline bool isqa() const;
  inline void set_isqa(bool value);
  
  // optional bool IsAutoUpdateDisabled = 8;
  inline bool has_isautoupdatedisabled() const;
  inline void clear_isautoupdatedisabled();
  static const int kIsAutoUpdateDisabledFieldNumber = 8;
  inline bool isautoupdatedisabled() const;
  inline void set_isautoupdatedisabled(bool value);
  
  // optional bool InfraDownload = 9;
  inline bool has_infradownload() const;
  inline void clear_infradownload();
  static const int kInfraDownloadFieldNumber = 9;
  inline bool infradownload() const;
  inline void set_infradownload(bool value);
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemUpdateResponseType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  inline void set_has_contentprefixurl();
  inline void clear_has_contentprefixurl();
  inline void set_has_uncachedcontentprefixurl();
  inline void clear_has_uncachedcontentprefixurl();
  inline void set_has_pcsprefiurl();
  inline void clear_has_pcsprefiurl();
  inline void set_has_uploadauditdata();
  inline void clear_has_uploadauditdata();
  inline void set_has_isqa();
  inline void clear_has_isqa();
  inline void set_has_isautoupdatedisabled();
  inline void clear_has_isautoupdatedisabled();
  inline void set_has_infradownload();
  inline void clear_has_infradownload();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractResponseType* _inherited_;
  ::std::string* contentprefixurl_;
  ::std::string* uncachedcontentprefixurl_;
  ::std::string* pcsprefiurl_;
  ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType > titleversion_;
  ::google::protobuf::int32 uploadauditdata_;
  bool isqa_;
  bool isautoupdatedisabled_;
  bool infradownload_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemUpdateResponseType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemTMDRequestType : public ::google::protobuf::Message {
 public:
  GetSystemTMDRequestType();
  virtual ~GetSystemTMDRequestType();
  
  GetSystemTMDRequestType(const GetSystemTMDRequestType& from);
  
  inline GetSystemTMDRequestType& operator=(const GetSystemTMDRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemTMDRequestType& default_instance();
  
  void Swap(GetSystemTMDRequestType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemTMDRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemTMDRequestType& from);
  void MergeFrom(const GetSystemTMDRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractRequestType& _inherited() const;
  inline ::vplex::nus::AbstractRequestType* mutable__inherited();
  inline ::vplex::nus::AbstractRequestType* release__inherited();
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  inline int titleversion_size() const;
  inline void clear_titleversion();
  static const int kTitleVersionFieldNumber = 2;
  inline const ::vplex::nus::TitleVersionType& titleversion(int index) const;
  inline ::vplex::nus::TitleVersionType* mutable_titleversion(int index);
  inline ::vplex::nus::TitleVersionType* add_titleversion();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >&
      titleversion() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >*
      mutable_titleversion();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemTMDRequestType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractRequestType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType > titleversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemTMDRequestType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemTMDResponseType : public ::google::protobuf::Message {
 public:
  GetSystemTMDResponseType();
  virtual ~GetSystemTMDResponseType();
  
  GetSystemTMDResponseType(const GetSystemTMDResponseType& from);
  
  inline GetSystemTMDResponseType& operator=(const GetSystemTMDResponseType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemTMDResponseType& default_instance();
  
  void Swap(GetSystemTMDResponseType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemTMDResponseType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemTMDResponseType& from);
  void MergeFrom(const GetSystemTMDResponseType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractResponseType& _inherited() const;
  inline ::vplex::nus::AbstractResponseType* mutable__inherited();
  inline ::vplex::nus::AbstractResponseType* release__inherited();
  
  // repeated bytes TMD = 2;
  inline int tmd_size() const;
  inline void clear_tmd();
  static const int kTMDFieldNumber = 2;
  inline const ::std::string& tmd(int index) const;
  inline ::std::string* mutable_tmd(int index);
  inline void set_tmd(int index, const ::std::string& value);
  inline void set_tmd(int index, const char* value);
  inline void set_tmd(int index, const void* value, size_t size);
  inline ::std::string* add_tmd();
  inline void add_tmd(const ::std::string& value);
  inline void add_tmd(const char* value);
  inline void add_tmd(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tmd() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tmd();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemTMDResponseType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractResponseType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemTMDResponseType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemPersonalizedETicketRequestType : public ::google::protobuf::Message {
 public:
  GetSystemPersonalizedETicketRequestType();
  virtual ~GetSystemPersonalizedETicketRequestType();
  
  GetSystemPersonalizedETicketRequestType(const GetSystemPersonalizedETicketRequestType& from);
  
  inline GetSystemPersonalizedETicketRequestType& operator=(const GetSystemPersonalizedETicketRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemPersonalizedETicketRequestType& default_instance();
  
  void Swap(GetSystemPersonalizedETicketRequestType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemPersonalizedETicketRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemPersonalizedETicketRequestType& from);
  void MergeFrom(const GetSystemPersonalizedETicketRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractRequestType& _inherited() const;
  inline ::vplex::nus::AbstractRequestType* mutable__inherited();
  inline ::vplex::nus::AbstractRequestType* release__inherited();
  
  // repeated string TitleId = 2;
  inline int titleid_size() const;
  inline void clear_titleid();
  static const int kTitleIdFieldNumber = 2;
  inline const ::std::string& titleid(int index) const;
  inline ::std::string* mutable_titleid(int index);
  inline void set_titleid(int index, const ::std::string& value);
  inline void set_titleid(int index, const char* value);
  inline void set_titleid(int index, const char* value, size_t size);
  inline ::std::string* add_titleid();
  inline void add_titleid(const ::std::string& value);
  inline void add_titleid(const char* value);
  inline void add_titleid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& titleid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_titleid();
  
  // required bytes DeviceCert = 3;
  inline bool has_devicecert() const;
  inline void clear_devicecert();
  static const int kDeviceCertFieldNumber = 3;
  inline const ::std::string& devicecert() const;
  inline void set_devicecert(const ::std::string& value);
  inline void set_devicecert(const char* value);
  inline void set_devicecert(const void* value, size_t size);
  inline ::std::string* mutable_devicecert();
  inline ::std::string* release_devicecert();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemPersonalizedETicketRequestType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  inline void set_has_devicecert();
  inline void clear_has_devicecert();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractRequestType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::std::string> titleid_;
  ::std::string* devicecert_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemPersonalizedETicketRequestType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemPersonalizedETicketResponseType : public ::google::protobuf::Message {
 public:
  GetSystemPersonalizedETicketResponseType();
  virtual ~GetSystemPersonalizedETicketResponseType();
  
  GetSystemPersonalizedETicketResponseType(const GetSystemPersonalizedETicketResponseType& from);
  
  inline GetSystemPersonalizedETicketResponseType& operator=(const GetSystemPersonalizedETicketResponseType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemPersonalizedETicketResponseType& default_instance();
  
  void Swap(GetSystemPersonalizedETicketResponseType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemPersonalizedETicketResponseType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemPersonalizedETicketResponseType& from);
  void MergeFrom(const GetSystemPersonalizedETicketResponseType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractResponseType& _inherited() const;
  inline ::vplex::nus::AbstractResponseType* mutable__inherited();
  inline ::vplex::nus::AbstractResponseType* release__inherited();
  
  // repeated bytes ETicket = 2;
  inline int eticket_size() const;
  inline void clear_eticket();
  static const int kETicketFieldNumber = 2;
  inline const ::std::string& eticket(int index) const;
  inline ::std::string* mutable_eticket(int index);
  inline void set_eticket(int index, const ::std::string& value);
  inline void set_eticket(int index, const char* value);
  inline void set_eticket(int index, const void* value, size_t size);
  inline ::std::string* add_eticket();
  inline void add_eticket(const ::std::string& value);
  inline void add_eticket(const char* value);
  inline void add_eticket(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& eticket() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_eticket();
  
  // repeated bytes Certs = 3;
  inline int certs_size() const;
  inline void clear_certs();
  static const int kCertsFieldNumber = 3;
  inline const ::std::string& certs(int index) const;
  inline ::std::string* mutable_certs(int index);
  inline void set_certs(int index, const ::std::string& value);
  inline void set_certs(int index, const char* value);
  inline void set_certs(int index, const void* value, size_t size);
  inline ::std::string* add_certs();
  inline void add_certs(const ::std::string& value);
  inline void add_certs(const char* value);
  inline void add_certs(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& certs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_certs();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemPersonalizedETicketResponseType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractResponseType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::std::string> eticket_;
  ::google::protobuf::RepeatedPtrField< ::std::string> certs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemPersonalizedETicketResponseType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemCommonETicketRequestType : public ::google::protobuf::Message {
 public:
  GetSystemCommonETicketRequestType();
  virtual ~GetSystemCommonETicketRequestType();
  
  GetSystemCommonETicketRequestType(const GetSystemCommonETicketRequestType& from);
  
  inline GetSystemCommonETicketRequestType& operator=(const GetSystemCommonETicketRequestType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemCommonETicketRequestType& default_instance();
  
  void Swap(GetSystemCommonETicketRequestType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemCommonETicketRequestType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemCommonETicketRequestType& from);
  void MergeFrom(const GetSystemCommonETicketRequestType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractRequestType& _inherited() const;
  inline ::vplex::nus::AbstractRequestType* mutable__inherited();
  inline ::vplex::nus::AbstractRequestType* release__inherited();
  
  // repeated string TitleId = 2;
  inline int titleid_size() const;
  inline void clear_titleid();
  static const int kTitleIdFieldNumber = 2;
  inline const ::std::string& titleid(int index) const;
  inline ::std::string* mutable_titleid(int index);
  inline void set_titleid(int index, const ::std::string& value);
  inline void set_titleid(int index, const char* value);
  inline void set_titleid(int index, const char* value, size_t size);
  inline ::std::string* add_titleid();
  inline void add_titleid(const ::std::string& value);
  inline void add_titleid(const char* value);
  inline void add_titleid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& titleid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_titleid();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemCommonETicketRequestType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractRequestType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::std::string> titleid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemCommonETicketRequestType* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemCommonETicketResponseType : public ::google::protobuf::Message {
 public:
  GetSystemCommonETicketResponseType();
  virtual ~GetSystemCommonETicketResponseType();
  
  GetSystemCommonETicketResponseType(const GetSystemCommonETicketResponseType& from);
  
  inline GetSystemCommonETicketResponseType& operator=(const GetSystemCommonETicketResponseType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemCommonETicketResponseType& default_instance();
  
  void Swap(GetSystemCommonETicketResponseType* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemCommonETicketResponseType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemCommonETicketResponseType& from);
  void MergeFrom(const GetSystemCommonETicketResponseType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  inline bool has__inherited() const;
  inline void clear__inherited();
  static const int kInheritedFieldNumber = 1;
  inline const ::vplex::nus::AbstractResponseType& _inherited() const;
  inline ::vplex::nus::AbstractResponseType* mutable__inherited();
  inline ::vplex::nus::AbstractResponseType* release__inherited();
  
  // repeated bytes CommonETicket = 2;
  inline int commoneticket_size() const;
  inline void clear_commoneticket();
  static const int kCommonETicketFieldNumber = 2;
  inline const ::std::string& commoneticket(int index) const;
  inline ::std::string* mutable_commoneticket(int index);
  inline void set_commoneticket(int index, const ::std::string& value);
  inline void set_commoneticket(int index, const char* value);
  inline void set_commoneticket(int index, const void* value, size_t size);
  inline ::std::string* add_commoneticket();
  inline void add_commoneticket(const ::std::string& value);
  inline void add_commoneticket(const char* value);
  inline void add_commoneticket(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& commoneticket() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_commoneticket();
  
  // repeated bytes Certs = 3;
  inline int certs_size() const;
  inline void clear_certs();
  static const int kCertsFieldNumber = 3;
  inline const ::std::string& certs(int index) const;
  inline ::std::string* mutable_certs(int index);
  inline void set_certs(int index, const ::std::string& value);
  inline void set_certs(int index, const char* value);
  inline void set_certs(int index, const void* value, size_t size);
  inline ::std::string* add_certs();
  inline void add_certs(const ::std::string& value);
  inline void add_certs(const char* value);
  inline void add_certs(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& certs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_certs();
  
  // @@protoc_insertion_point(class_scope:vplex.nus.GetSystemCommonETicketResponseType)
 private:
  inline void set_has__inherited();
  inline void clear_has__inherited();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::nus::AbstractResponseType* _inherited_;
  ::google::protobuf::RepeatedPtrField< ::std::string> commoneticket_;
  ::google::protobuf::RepeatedPtrField< ::std::string> certs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemCommonETicketResponseType* default_instance_;
};
// ===================================================================


// ===================================================================

// AbstractRequestType

// required string Version = 1;
inline bool AbstractRequestType::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbstractRequestType::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbstractRequestType::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbstractRequestType::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AbstractRequestType::version() const {
  return *version_;
}
inline void AbstractRequestType::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AbstractRequestType::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AbstractRequestType::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* AbstractRequestType::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string MessageId = 2;
inline bool AbstractRequestType::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbstractRequestType::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AbstractRequestType::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AbstractRequestType::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& AbstractRequestType::messageid() const {
  return *messageid_;
}
inline void AbstractRequestType::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void AbstractRequestType::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void AbstractRequestType::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  return messageid_;
}
inline ::std::string* AbstractRequestType::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 DeviceId = 3;
inline bool AbstractRequestType::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbstractRequestType::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AbstractRequestType::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AbstractRequestType::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_deviceid();
}
inline ::google::protobuf::uint64 AbstractRequestType::deviceid() const {
  return deviceid_;
}
inline void AbstractRequestType::set_deviceid(::google::protobuf::uint64 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// required string RegionId = 4;
inline bool AbstractRequestType::has_regionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AbstractRequestType::set_has_regionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AbstractRequestType::clear_has_regionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AbstractRequestType::clear_regionid() {
  if (regionid_ != &::google::protobuf::internal::kEmptyString) {
    regionid_->clear();
  }
  clear_has_regionid();
}
inline const ::std::string& AbstractRequestType::regionid() const {
  return *regionid_;
}
inline void AbstractRequestType::set_regionid(const ::std::string& value) {
  set_has_regionid();
  if (regionid_ == &::google::protobuf::internal::kEmptyString) {
    regionid_ = new ::std::string;
  }
  regionid_->assign(value);
}
inline void AbstractRequestType::set_regionid(const char* value) {
  set_has_regionid();
  if (regionid_ == &::google::protobuf::internal::kEmptyString) {
    regionid_ = new ::std::string;
  }
  regionid_->assign(value);
}
inline void AbstractRequestType::set_regionid(const char* value, size_t size) {
  set_has_regionid();
  if (regionid_ == &::google::protobuf::internal::kEmptyString) {
    regionid_ = new ::std::string;
  }
  regionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_regionid() {
  set_has_regionid();
  if (regionid_ == &::google::protobuf::internal::kEmptyString) {
    regionid_ = new ::std::string;
  }
  return regionid_;
}
inline ::std::string* AbstractRequestType::release_regionid() {
  clear_has_regionid();
  if (regionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = regionid_;
    regionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string CountryCode = 5;
inline bool AbstractRequestType::has_countrycode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AbstractRequestType::set_has_countrycode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AbstractRequestType::clear_has_countrycode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AbstractRequestType::clear_countrycode() {
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    countrycode_->clear();
  }
  clear_has_countrycode();
}
inline const ::std::string& AbstractRequestType::countrycode() const {
  return *countrycode_;
}
inline void AbstractRequestType::set_countrycode(const ::std::string& value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void AbstractRequestType::set_countrycode(const char* value) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(value);
}
inline void AbstractRequestType::set_countrycode(const char* value, size_t size) {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  countrycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_countrycode() {
  set_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    countrycode_ = new ::std::string;
  }
  return countrycode_;
}
inline ::std::string* AbstractRequestType::release_countrycode() {
  clear_has_countrycode();
  if (countrycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = countrycode_;
    countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 VirtualDeviceType = 6;
inline bool AbstractRequestType::has_virtualdevicetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AbstractRequestType::set_has_virtualdevicetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AbstractRequestType::clear_has_virtualdevicetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AbstractRequestType::clear_virtualdevicetype() {
  virtualdevicetype_ = 0;
  clear_has_virtualdevicetype();
}
inline ::google::protobuf::int32 AbstractRequestType::virtualdevicetype() const {
  return virtualdevicetype_;
}
inline void AbstractRequestType::set_virtualdevicetype(::google::protobuf::int32 value) {
  set_has_virtualdevicetype();
  virtualdevicetype_ = value;
}

// optional string Language = 7;
inline bool AbstractRequestType::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AbstractRequestType::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AbstractRequestType::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AbstractRequestType::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& AbstractRequestType::language() const {
  return *language_;
}
inline void AbstractRequestType::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AbstractRequestType::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void AbstractRequestType::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* AbstractRequestType::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string SerialNo = 8;
inline bool AbstractRequestType::has_serialno() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AbstractRequestType::set_has_serialno() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AbstractRequestType::clear_has_serialno() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AbstractRequestType::clear_serialno() {
  if (serialno_ != &::google::protobuf::internal::kEmptyString) {
    serialno_->clear();
  }
  clear_has_serialno();
}
inline const ::std::string& AbstractRequestType::serialno() const {
  return *serialno_;
}
inline void AbstractRequestType::set_serialno(const ::std::string& value) {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  serialno_->assign(value);
}
inline void AbstractRequestType::set_serialno(const char* value) {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  serialno_->assign(value);
}
inline void AbstractRequestType::set_serialno(const char* value, size_t size) {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  serialno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_serialno() {
  set_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    serialno_ = new ::std::string;
  }
  return serialno_;
}
inline ::std::string* AbstractRequestType::release_serialno() {
  clear_has_serialno();
  if (serialno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialno_;
    serialno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AccountId = 9;
inline bool AbstractRequestType::has_accountid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AbstractRequestType::set_has_accountid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AbstractRequestType::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AbstractRequestType::clear_accountid() {
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    accountid_->clear();
  }
  clear_has_accountid();
}
inline const ::std::string& AbstractRequestType::accountid() const {
  return *accountid_;
}
inline void AbstractRequestType::set_accountid(const ::std::string& value) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void AbstractRequestType::set_accountid(const char* value) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(value);
}
inline void AbstractRequestType::set_accountid(const char* value, size_t size) {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  accountid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractRequestType::mutable_accountid() {
  set_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    accountid_ = new ::std::string;
  }
  return accountid_;
}
inline ::std::string* AbstractRequestType::release_accountid() {
  clear_has_accountid();
  if (accountid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountid_;
    accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 UserId = 10;
inline bool AbstractRequestType::has_userid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AbstractRequestType::set_has_userid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AbstractRequestType::clear_has_userid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AbstractRequestType::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 AbstractRequestType::userid() const {
  return userid_;
}
inline void AbstractRequestType::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
}

// -------------------------------------------------------------------

// AbstractResponseType

// required string Version = 1;
inline bool AbstractResponseType::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbstractResponseType::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbstractResponseType::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbstractResponseType::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& AbstractResponseType::version() const {
  return *version_;
}
inline void AbstractResponseType::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AbstractResponseType::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void AbstractResponseType::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractResponseType::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* AbstractResponseType::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 DeviceId = 2;
inline bool AbstractResponseType::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbstractResponseType::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AbstractResponseType::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AbstractResponseType::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_deviceid();
}
inline ::google::protobuf::uint64 AbstractResponseType::deviceid() const {
  return deviceid_;
}
inline void AbstractResponseType::set_deviceid(::google::protobuf::uint64 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// required string MessageId = 3;
inline bool AbstractResponseType::has_messageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbstractResponseType::set_has_messageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AbstractResponseType::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AbstractResponseType::clear_messageid() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    messageid_->clear();
  }
  clear_has_messageid();
}
inline const ::std::string& AbstractResponseType::messageid() const {
  return *messageid_;
}
inline void AbstractResponseType::set_messageid(const ::std::string& value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void AbstractResponseType::set_messageid(const char* value) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(value);
}
inline void AbstractResponseType::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  messageid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractResponseType::mutable_messageid() {
  set_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    messageid_ = new ::std::string;
  }
  return messageid_;
}
inline ::std::string* AbstractResponseType::release_messageid() {
  clear_has_messageid();
  if (messageid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messageid_;
    messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 TimeStamp = 4;
inline bool AbstractResponseType::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AbstractResponseType::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AbstractResponseType::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AbstractResponseType::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 AbstractResponseType::timestamp() const {
  return timestamp_;
}
inline void AbstractResponseType::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required sint32 ErrorCode = 5;
inline bool AbstractResponseType::has_errorcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AbstractResponseType::set_has_errorcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AbstractResponseType::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AbstractResponseType::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 AbstractResponseType::errorcode() const {
  return errorcode_;
}
inline void AbstractResponseType::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional string ErrorMessage = 6;
inline bool AbstractResponseType::has_errormessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AbstractResponseType::set_has_errormessage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AbstractResponseType::clear_has_errormessage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AbstractResponseType::clear_errormessage() {
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    errormessage_->clear();
  }
  clear_has_errormessage();
}
inline const ::std::string& AbstractResponseType::errormessage() const {
  return *errormessage_;
}
inline void AbstractResponseType::set_errormessage(const ::std::string& value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
}
inline void AbstractResponseType::set_errormessage(const char* value) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(value);
}
inline void AbstractResponseType::set_errormessage(const char* value, size_t size) {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  errormessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbstractResponseType::mutable_errormessage() {
  set_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    errormessage_ = new ::std::string;
  }
  return errormessage_;
}
inline ::std::string* AbstractResponseType::release_errormessage() {
  clear_has_errormessage();
  if (errormessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormessage_;
    errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TitleVersionType

// required string TitleId = 1;
inline bool TitleVersionType::has_titleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TitleVersionType::set_has_titleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TitleVersionType::clear_has_titleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TitleVersionType::clear_titleid() {
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    titleid_->clear();
  }
  clear_has_titleid();
}
inline const ::std::string& TitleVersionType::titleid() const {
  return *titleid_;
}
inline void TitleVersionType::set_titleid(const ::std::string& value) {
  set_has_titleid();
  if (titleid_ == &::google::protobuf::internal::kEmptyString) {
    titleid_ = new ::std::string;
  }
  titleid_->assign(value);
}
inline void TitleVersionType::set_titleid(const char* value) {
  set_has_titleid();
  if (titleid_ == &::google::protobuf::internal::kEmptyString) {
    titleid_ = new ::std::string;
  }
  titleid_->assign(value);
}
inline void TitleVersionType::set_titleid(const char* value, size_t size) {
  set_has_titleid();
  if (titleid_ == &::google::protobuf::internal::kEmptyString) {
    titleid_ = new ::std::string;
  }
  titleid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TitleVersionType::mutable_titleid() {
  set_has_titleid();
  if (titleid_ == &::google::protobuf::internal::kEmptyString) {
    titleid_ = new ::std::string;
  }
  return titleid_;
}
inline ::std::string* TitleVersionType::release_titleid() {
  clear_has_titleid();
  if (titleid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = titleid_;
    titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required sint32 Version = 2;
inline bool TitleVersionType::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TitleVersionType::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TitleVersionType::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TitleVersionType::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 TitleVersionType::version() const {
  return version_;
}
inline void TitleVersionType::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional sint64 FsSize = 3;
inline bool TitleVersionType::has_fssize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TitleVersionType::set_has_fssize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TitleVersionType::clear_has_fssize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TitleVersionType::clear_fssize() {
  fssize_ = GOOGLE_LONGLONG(0);
  clear_has_fssize();
}
inline ::google::protobuf::int64 TitleVersionType::fssize() const {
  return fssize_;
}
inline void TitleVersionType::set_fssize(::google::protobuf::int64 value) {
  set_has_fssize();
  fssize_ = value;
}

// optional sint32 TicketSize = 4;
inline bool TitleVersionType::has_ticketsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TitleVersionType::set_has_ticketsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TitleVersionType::clear_has_ticketsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TitleVersionType::clear_ticketsize() {
  ticketsize_ = 0;
  clear_has_ticketsize();
}
inline ::google::protobuf::int32 TitleVersionType::ticketsize() const {
  return ticketsize_;
}
inline void TitleVersionType::set_ticketsize(::google::protobuf::int32 value) {
  set_has_ticketsize();
  ticketsize_ = value;
}

// optional sint32 TMDSize = 5;
inline bool TitleVersionType::has_tmdsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TitleVersionType::set_has_tmdsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TitleVersionType::clear_has_tmdsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TitleVersionType::clear_tmdsize() {
  tmdsize_ = 0;
  clear_has_tmdsize();
}
inline ::google::protobuf::int32 TitleVersionType::tmdsize() const {
  return tmdsize_;
}
inline void TitleVersionType::set_tmdsize(::google::protobuf::int32 value) {
  set_has_tmdsize();
  tmdsize_ = value;
}

// optional string AppGUID = 6;
inline bool TitleVersionType::has_appguid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TitleVersionType::set_has_appguid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TitleVersionType::clear_has_appguid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TitleVersionType::clear_appguid() {
  if (appguid_ != &::google::protobuf::internal::kEmptyString) {
    appguid_->clear();
  }
  clear_has_appguid();
}
inline const ::std::string& TitleVersionType::appguid() const {
  return *appguid_;
}
inline void TitleVersionType::set_appguid(const ::std::string& value) {
  set_has_appguid();
  if (appguid_ == &::google::protobuf::internal::kEmptyString) {
    appguid_ = new ::std::string;
  }
  appguid_->assign(value);
}
inline void TitleVersionType::set_appguid(const char* value) {
  set_has_appguid();
  if (appguid_ == &::google::protobuf::internal::kEmptyString) {
    appguid_ = new ::std::string;
  }
  appguid_->assign(value);
}
inline void TitleVersionType::set_appguid(const char* value, size_t size) {
  set_has_appguid();
  if (appguid_ == &::google::protobuf::internal::kEmptyString) {
    appguid_ = new ::std::string;
  }
  appguid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TitleVersionType::mutable_appguid() {
  set_has_appguid();
  if (appguid_ == &::google::protobuf::internal::kEmptyString) {
    appguid_ = new ::std::string;
  }
  return appguid_;
}
inline ::std::string* TitleVersionType::release_appguid() {
  clear_has_appguid();
  if (appguid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appguid_;
    appguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AppVersion = 7;
inline bool TitleVersionType::has_appversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TitleVersionType::set_has_appversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TitleVersionType::clear_has_appversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TitleVersionType::clear_appversion() {
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    appversion_->clear();
  }
  clear_has_appversion();
}
inline const ::std::string& TitleVersionType::appversion() const {
  return *appversion_;
}
inline void TitleVersionType::set_appversion(const ::std::string& value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void TitleVersionType::set_appversion(const char* value) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(value);
}
inline void TitleVersionType::set_appversion(const char* value, size_t size) {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  appversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TitleVersionType::mutable_appversion() {
  set_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    appversion_ = new ::std::string;
  }
  return appversion_;
}
inline ::std::string* TitleVersionType::release_appversion() {
  clear_has_appversion();
  if (appversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appversion_;
    appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AppMinVersion = 8;
inline bool TitleVersionType::has_appminversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TitleVersionType::set_has_appminversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TitleVersionType::clear_has_appminversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TitleVersionType::clear_appminversion() {
  if (appminversion_ != &::google::protobuf::internal::kEmptyString) {
    appminversion_->clear();
  }
  clear_has_appminversion();
}
inline const ::std::string& TitleVersionType::appminversion() const {
  return *appminversion_;
}
inline void TitleVersionType::set_appminversion(const ::std::string& value) {
  set_has_appminversion();
  if (appminversion_ == &::google::protobuf::internal::kEmptyString) {
    appminversion_ = new ::std::string;
  }
  appminversion_->assign(value);
}
inline void TitleVersionType::set_appminversion(const char* value) {
  set_has_appminversion();
  if (appminversion_ == &::google::protobuf::internal::kEmptyString) {
    appminversion_ = new ::std::string;
  }
  appminversion_->assign(value);
}
inline void TitleVersionType::set_appminversion(const char* value, size_t size) {
  set_has_appminversion();
  if (appminversion_ == &::google::protobuf::internal::kEmptyString) {
    appminversion_ = new ::std::string;
  }
  appminversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TitleVersionType::mutable_appminversion() {
  set_has_appminversion();
  if (appminversion_ == &::google::protobuf::internal::kEmptyString) {
    appminversion_ = new ::std::string;
  }
  return appminversion_;
}
inline ::std::string* TitleVersionType::release_appminversion() {
  clear_has_appminversion();
  if (appminversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appminversion_;
    appminversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string CcdMinVersion = 9;
inline bool TitleVersionType::has_ccdminversion() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TitleVersionType::set_has_ccdminversion() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TitleVersionType::clear_has_ccdminversion() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TitleVersionType::clear_ccdminversion() {
  if (ccdminversion_ != &::google::protobuf::internal::kEmptyString) {
    ccdminversion_->clear();
  }
  clear_has_ccdminversion();
}
inline const ::std::string& TitleVersionType::ccdminversion() const {
  return *ccdminversion_;
}
inline void TitleVersionType::set_ccdminversion(const ::std::string& value) {
  set_has_ccdminversion();
  if (ccdminversion_ == &::google::protobuf::internal::kEmptyString) {
    ccdminversion_ = new ::std::string;
  }
  ccdminversion_->assign(value);
}
inline void TitleVersionType::set_ccdminversion(const char* value) {
  set_has_ccdminversion();
  if (ccdminversion_ == &::google::protobuf::internal::kEmptyString) {
    ccdminversion_ = new ::std::string;
  }
  ccdminversion_->assign(value);
}
inline void TitleVersionType::set_ccdminversion(const char* value, size_t size) {
  set_has_ccdminversion();
  if (ccdminversion_ == &::google::protobuf::internal::kEmptyString) {
    ccdminversion_ = new ::std::string;
  }
  ccdminversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TitleVersionType::mutable_ccdminversion() {
  set_has_ccdminversion();
  if (ccdminversion_ == &::google::protobuf::internal::kEmptyString) {
    ccdminversion_ = new ::std::string;
  }
  return ccdminversion_;
}
inline ::std::string* TitleVersionType::release_ccdminversion() {
  clear_has_ccdminversion();
  if (ccdminversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccdminversion_;
    ccdminversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string AppMessage = 10;
inline bool TitleVersionType::has_appmessage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TitleVersionType::set_has_appmessage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TitleVersionType::clear_has_appmessage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TitleVersionType::clear_appmessage() {
  if (appmessage_ != &::google::protobuf::internal::kEmptyString) {
    appmessage_->clear();
  }
  clear_has_appmessage();
}
inline const ::std::string& TitleVersionType::appmessage() const {
  return *appmessage_;
}
inline void TitleVersionType::set_appmessage(const ::std::string& value) {
  set_has_appmessage();
  if (appmessage_ == &::google::protobuf::internal::kEmptyString) {
    appmessage_ = new ::std::string;
  }
  appmessage_->assign(value);
}
inline void TitleVersionType::set_appmessage(const char* value) {
  set_has_appmessage();
  if (appmessage_ == &::google::protobuf::internal::kEmptyString) {
    appmessage_ = new ::std::string;
  }
  appmessage_->assign(value);
}
inline void TitleVersionType::set_appmessage(const char* value, size_t size) {
  set_has_appmessage();
  if (appmessage_ == &::google::protobuf::internal::kEmptyString) {
    appmessage_ = new ::std::string;
  }
  appmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TitleVersionType::mutable_appmessage() {
  set_has_appmessage();
  if (appmessage_ == &::google::protobuf::internal::kEmptyString) {
    appmessage_ = new ::std::string;
  }
  return appmessage_;
}
inline ::std::string* TitleVersionType::release_appmessage() {
  clear_has_appmessage();
  if (appmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appmessage_;
    appmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetSystemUpdateRequestType

// required .vplex.nus.AbstractRequestType _inherited = 1;
inline bool GetSystemUpdateRequestType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemUpdateRequestType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemUpdateRequestType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemUpdateRequestType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractRequestType& GetSystemUpdateRequestType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemUpdateRequestType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractRequestType;
  return _inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemUpdateRequestType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractRequestType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated .vplex.nus.TitleVersionType TitleVersion = 2;
inline int GetSystemUpdateRequestType::titleversion_size() const {
  return titleversion_.size();
}
inline void GetSystemUpdateRequestType::clear_titleversion() {
  titleversion_.Clear();
}
inline const ::vplex::nus::TitleVersionType& GetSystemUpdateRequestType::titleversion(int index) const {
  return titleversion_.Get(index);
}
inline ::vplex::nus::TitleVersionType* GetSystemUpdateRequestType::mutable_titleversion(int index) {
  return titleversion_.Mutable(index);
}
inline ::vplex::nus::TitleVersionType* GetSystemUpdateRequestType::add_titleversion() {
  return titleversion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >&
GetSystemUpdateRequestType::titleversion() const {
  return titleversion_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >*
GetSystemUpdateRequestType::mutable_titleversion() {
  return &titleversion_;
}

// optional sint32 Attribute = 3;
inline bool GetSystemUpdateRequestType::has_attribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSystemUpdateRequestType::set_has_attribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSystemUpdateRequestType::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSystemUpdateRequestType::clear_attribute() {
  attribute_ = 0;
  clear_has_attribute();
}
inline ::google::protobuf::int32 GetSystemUpdateRequestType::attribute() const {
  return attribute_;
}
inline void GetSystemUpdateRequestType::set_attribute(::google::protobuf::int32 value) {
  set_has_attribute();
  attribute_ = value;
}

// optional string AuditData = 4;
inline bool GetSystemUpdateRequestType::has_auditdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetSystemUpdateRequestType::set_has_auditdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetSystemUpdateRequestType::clear_has_auditdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetSystemUpdateRequestType::clear_auditdata() {
  if (auditdata_ != &::google::protobuf::internal::kEmptyString) {
    auditdata_->clear();
  }
  clear_has_auditdata();
}
inline const ::std::string& GetSystemUpdateRequestType::auditdata() const {
  return *auditdata_;
}
inline void GetSystemUpdateRequestType::set_auditdata(const ::std::string& value) {
  set_has_auditdata();
  if (auditdata_ == &::google::protobuf::internal::kEmptyString) {
    auditdata_ = new ::std::string;
  }
  auditdata_->assign(value);
}
inline void GetSystemUpdateRequestType::set_auditdata(const char* value) {
  set_has_auditdata();
  if (auditdata_ == &::google::protobuf::internal::kEmptyString) {
    auditdata_ = new ::std::string;
  }
  auditdata_->assign(value);
}
inline void GetSystemUpdateRequestType::set_auditdata(const char* value, size_t size) {
  set_has_auditdata();
  if (auditdata_ == &::google::protobuf::internal::kEmptyString) {
    auditdata_ = new ::std::string;
  }
  auditdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemUpdateRequestType::mutable_auditdata() {
  set_has_auditdata();
  if (auditdata_ == &::google::protobuf::internal::kEmptyString) {
    auditdata_ = new ::std::string;
  }
  return auditdata_;
}
inline ::std::string* GetSystemUpdateRequestType::release_auditdata() {
  clear_has_auditdata();
  if (auditdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = auditdata_;
    auditdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 RunTimeTypeMask = 5;
inline bool GetSystemUpdateRequestType::has_runtimetypemask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetSystemUpdateRequestType::set_has_runtimetypemask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetSystemUpdateRequestType::clear_has_runtimetypemask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetSystemUpdateRequestType::clear_runtimetypemask() {
  runtimetypemask_ = 0;
  clear_has_runtimetypemask();
}
inline ::google::protobuf::int32 GetSystemUpdateRequestType::runtimetypemask() const {
  return runtimetypemask_;
}
inline void GetSystemUpdateRequestType::set_runtimetypemask(::google::protobuf::int32 value) {
  set_has_runtimetypemask();
  runtimetypemask_ = value;
}

// optional string Group = 6;
inline bool GetSystemUpdateRequestType::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetSystemUpdateRequestType::set_has_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetSystemUpdateRequestType::clear_has_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetSystemUpdateRequestType::clear_group() {
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    group_->clear();
  }
  clear_has_group();
}
inline const ::std::string& GetSystemUpdateRequestType::group() const {
  return *group_;
}
inline void GetSystemUpdateRequestType::set_group(const ::std::string& value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void GetSystemUpdateRequestType::set_group(const char* value) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(value);
}
inline void GetSystemUpdateRequestType::set_group(const char* value, size_t size) {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemUpdateRequestType::mutable_group() {
  set_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    group_ = new ::std::string;
  }
  return group_;
}
inline ::std::string* GetSystemUpdateRequestType::release_group() {
  clear_has_group();
  if (group_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = group_;
    group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetSystemUpdateResponseType

// required .vplex.nus.AbstractResponseType _inherited = 1;
inline bool GetSystemUpdateResponseType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemUpdateResponseType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemUpdateResponseType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemUpdateResponseType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractResponseType& GetSystemUpdateResponseType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemUpdateResponseType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractResponseType;
  return _inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemUpdateResponseType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractResponseType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// optional string ContentPrefixURL = 2;
inline bool GetSystemUpdateResponseType::has_contentprefixurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_contentprefixurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSystemUpdateResponseType::clear_has_contentprefixurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSystemUpdateResponseType::clear_contentprefixurl() {
  if (contentprefixurl_ != &::google::protobuf::internal::kEmptyString) {
    contentprefixurl_->clear();
  }
  clear_has_contentprefixurl();
}
inline const ::std::string& GetSystemUpdateResponseType::contentprefixurl() const {
  return *contentprefixurl_;
}
inline void GetSystemUpdateResponseType::set_contentprefixurl(const ::std::string& value) {
  set_has_contentprefixurl();
  if (contentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    contentprefixurl_ = new ::std::string;
  }
  contentprefixurl_->assign(value);
}
inline void GetSystemUpdateResponseType::set_contentprefixurl(const char* value) {
  set_has_contentprefixurl();
  if (contentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    contentprefixurl_ = new ::std::string;
  }
  contentprefixurl_->assign(value);
}
inline void GetSystemUpdateResponseType::set_contentprefixurl(const char* value, size_t size) {
  set_has_contentprefixurl();
  if (contentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    contentprefixurl_ = new ::std::string;
  }
  contentprefixurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemUpdateResponseType::mutable_contentprefixurl() {
  set_has_contentprefixurl();
  if (contentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    contentprefixurl_ = new ::std::string;
  }
  return contentprefixurl_;
}
inline ::std::string* GetSystemUpdateResponseType::release_contentprefixurl() {
  clear_has_contentprefixurl();
  if (contentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contentprefixurl_;
    contentprefixurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string UncachedContentPrefixURL = 3;
inline bool GetSystemUpdateResponseType::has_uncachedcontentprefixurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_uncachedcontentprefixurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSystemUpdateResponseType::clear_has_uncachedcontentprefixurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSystemUpdateResponseType::clear_uncachedcontentprefixurl() {
  if (uncachedcontentprefixurl_ != &::google::protobuf::internal::kEmptyString) {
    uncachedcontentprefixurl_->clear();
  }
  clear_has_uncachedcontentprefixurl();
}
inline const ::std::string& GetSystemUpdateResponseType::uncachedcontentprefixurl() const {
  return *uncachedcontentprefixurl_;
}
inline void GetSystemUpdateResponseType::set_uncachedcontentprefixurl(const ::std::string& value) {
  set_has_uncachedcontentprefixurl();
  if (uncachedcontentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    uncachedcontentprefixurl_ = new ::std::string;
  }
  uncachedcontentprefixurl_->assign(value);
}
inline void GetSystemUpdateResponseType::set_uncachedcontentprefixurl(const char* value) {
  set_has_uncachedcontentprefixurl();
  if (uncachedcontentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    uncachedcontentprefixurl_ = new ::std::string;
  }
  uncachedcontentprefixurl_->assign(value);
}
inline void GetSystemUpdateResponseType::set_uncachedcontentprefixurl(const char* value, size_t size) {
  set_has_uncachedcontentprefixurl();
  if (uncachedcontentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    uncachedcontentprefixurl_ = new ::std::string;
  }
  uncachedcontentprefixurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemUpdateResponseType::mutable_uncachedcontentprefixurl() {
  set_has_uncachedcontentprefixurl();
  if (uncachedcontentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    uncachedcontentprefixurl_ = new ::std::string;
  }
  return uncachedcontentprefixurl_;
}
inline ::std::string* GetSystemUpdateResponseType::release_uncachedcontentprefixurl() {
  clear_has_uncachedcontentprefixurl();
  if (uncachedcontentprefixurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uncachedcontentprefixurl_;
    uncachedcontentprefixurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string PcsPrefiURL = 4;
inline bool GetSystemUpdateResponseType::has_pcsprefiurl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_pcsprefiurl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetSystemUpdateResponseType::clear_has_pcsprefiurl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetSystemUpdateResponseType::clear_pcsprefiurl() {
  if (pcsprefiurl_ != &::google::protobuf::internal::kEmptyString) {
    pcsprefiurl_->clear();
  }
  clear_has_pcsprefiurl();
}
inline const ::std::string& GetSystemUpdateResponseType::pcsprefiurl() const {
  return *pcsprefiurl_;
}
inline void GetSystemUpdateResponseType::set_pcsprefiurl(const ::std::string& value) {
  set_has_pcsprefiurl();
  if (pcsprefiurl_ == &::google::protobuf::internal::kEmptyString) {
    pcsprefiurl_ = new ::std::string;
  }
  pcsprefiurl_->assign(value);
}
inline void GetSystemUpdateResponseType::set_pcsprefiurl(const char* value) {
  set_has_pcsprefiurl();
  if (pcsprefiurl_ == &::google::protobuf::internal::kEmptyString) {
    pcsprefiurl_ = new ::std::string;
  }
  pcsprefiurl_->assign(value);
}
inline void GetSystemUpdateResponseType::set_pcsprefiurl(const char* value, size_t size) {
  set_has_pcsprefiurl();
  if (pcsprefiurl_ == &::google::protobuf::internal::kEmptyString) {
    pcsprefiurl_ = new ::std::string;
  }
  pcsprefiurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemUpdateResponseType::mutable_pcsprefiurl() {
  set_has_pcsprefiurl();
  if (pcsprefiurl_ == &::google::protobuf::internal::kEmptyString) {
    pcsprefiurl_ = new ::std::string;
  }
  return pcsprefiurl_;
}
inline ::std::string* GetSystemUpdateResponseType::release_pcsprefiurl() {
  clear_has_pcsprefiurl();
  if (pcsprefiurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pcsprefiurl_;
    pcsprefiurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .vplex.nus.TitleVersionType TitleVersion = 5;
inline int GetSystemUpdateResponseType::titleversion_size() const {
  return titleversion_.size();
}
inline void GetSystemUpdateResponseType::clear_titleversion() {
  titleversion_.Clear();
}
inline const ::vplex::nus::TitleVersionType& GetSystemUpdateResponseType::titleversion(int index) const {
  return titleversion_.Get(index);
}
inline ::vplex::nus::TitleVersionType* GetSystemUpdateResponseType::mutable_titleversion(int index) {
  return titleversion_.Mutable(index);
}
inline ::vplex::nus::TitleVersionType* GetSystemUpdateResponseType::add_titleversion() {
  return titleversion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >&
GetSystemUpdateResponseType::titleversion() const {
  return titleversion_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >*
GetSystemUpdateResponseType::mutable_titleversion() {
  return &titleversion_;
}

// required sint32 UploadAuditData = 6;
inline bool GetSystemUpdateResponseType::has_uploadauditdata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_uploadauditdata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetSystemUpdateResponseType::clear_has_uploadauditdata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetSystemUpdateResponseType::clear_uploadauditdata() {
  uploadauditdata_ = 0;
  clear_has_uploadauditdata();
}
inline ::google::protobuf::int32 GetSystemUpdateResponseType::uploadauditdata() const {
  return uploadauditdata_;
}
inline void GetSystemUpdateResponseType::set_uploadauditdata(::google::protobuf::int32 value) {
  set_has_uploadauditdata();
  uploadauditdata_ = value;
}

// optional bool IsQA = 7;
inline bool GetSystemUpdateResponseType::has_isqa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_isqa() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetSystemUpdateResponseType::clear_has_isqa() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetSystemUpdateResponseType::clear_isqa() {
  isqa_ = false;
  clear_has_isqa();
}
inline bool GetSystemUpdateResponseType::isqa() const {
  return isqa_;
}
inline void GetSystemUpdateResponseType::set_isqa(bool value) {
  set_has_isqa();
  isqa_ = value;
}

// optional bool IsAutoUpdateDisabled = 8;
inline bool GetSystemUpdateResponseType::has_isautoupdatedisabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_isautoupdatedisabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetSystemUpdateResponseType::clear_has_isautoupdatedisabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetSystemUpdateResponseType::clear_isautoupdatedisabled() {
  isautoupdatedisabled_ = false;
  clear_has_isautoupdatedisabled();
}
inline bool GetSystemUpdateResponseType::isautoupdatedisabled() const {
  return isautoupdatedisabled_;
}
inline void GetSystemUpdateResponseType::set_isautoupdatedisabled(bool value) {
  set_has_isautoupdatedisabled();
  isautoupdatedisabled_ = value;
}

// optional bool InfraDownload = 9;
inline bool GetSystemUpdateResponseType::has_infradownload() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetSystemUpdateResponseType::set_has_infradownload() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetSystemUpdateResponseType::clear_has_infradownload() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetSystemUpdateResponseType::clear_infradownload() {
  infradownload_ = false;
  clear_has_infradownload();
}
inline bool GetSystemUpdateResponseType::infradownload() const {
  return infradownload_;
}
inline void GetSystemUpdateResponseType::set_infradownload(bool value) {
  set_has_infradownload();
  infradownload_ = value;
}

// -------------------------------------------------------------------

// GetSystemTMDRequestType

// required .vplex.nus.AbstractRequestType _inherited = 1;
inline bool GetSystemTMDRequestType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemTMDRequestType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemTMDRequestType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemTMDRequestType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractRequestType& GetSystemTMDRequestType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemTMDRequestType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractRequestType;
  return _inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemTMDRequestType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractRequestType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated .vplex.nus.TitleVersionType TitleVersion = 2;
inline int GetSystemTMDRequestType::titleversion_size() const {
  return titleversion_.size();
}
inline void GetSystemTMDRequestType::clear_titleversion() {
  titleversion_.Clear();
}
inline const ::vplex::nus::TitleVersionType& GetSystemTMDRequestType::titleversion(int index) const {
  return titleversion_.Get(index);
}
inline ::vplex::nus::TitleVersionType* GetSystemTMDRequestType::mutable_titleversion(int index) {
  return titleversion_.Mutable(index);
}
inline ::vplex::nus::TitleVersionType* GetSystemTMDRequestType::add_titleversion() {
  return titleversion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >&
GetSystemTMDRequestType::titleversion() const {
  return titleversion_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::nus::TitleVersionType >*
GetSystemTMDRequestType::mutable_titleversion() {
  return &titleversion_;
}

// -------------------------------------------------------------------

// GetSystemTMDResponseType

// required .vplex.nus.AbstractResponseType _inherited = 1;
inline bool GetSystemTMDResponseType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemTMDResponseType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemTMDResponseType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemTMDResponseType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractResponseType& GetSystemTMDResponseType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemTMDResponseType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractResponseType;
  return _inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemTMDResponseType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractResponseType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated bytes TMD = 2;
inline int GetSystemTMDResponseType::tmd_size() const {
  return tmd_.size();
}
inline void GetSystemTMDResponseType::clear_tmd() {
  tmd_.Clear();
}
inline const ::std::string& GetSystemTMDResponseType::tmd(int index) const {
  return tmd_.Get(index);
}
inline ::std::string* GetSystemTMDResponseType::mutable_tmd(int index) {
  return tmd_.Mutable(index);
}
inline void GetSystemTMDResponseType::set_tmd(int index, const ::std::string& value) {
  tmd_.Mutable(index)->assign(value);
}
inline void GetSystemTMDResponseType::set_tmd(int index, const char* value) {
  tmd_.Mutable(index)->assign(value);
}
inline void GetSystemTMDResponseType::set_tmd(int index, const void* value, size_t size) {
  tmd_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemTMDResponseType::add_tmd() {
  return tmd_.Add();
}
inline void GetSystemTMDResponseType::add_tmd(const ::std::string& value) {
  tmd_.Add()->assign(value);
}
inline void GetSystemTMDResponseType::add_tmd(const char* value) {
  tmd_.Add()->assign(value);
}
inline void GetSystemTMDResponseType::add_tmd(const void* value, size_t size) {
  tmd_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemTMDResponseType::tmd() const {
  return tmd_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemTMDResponseType::mutable_tmd() {
  return &tmd_;
}

// -------------------------------------------------------------------

// GetSystemPersonalizedETicketRequestType

// required .vplex.nus.AbstractRequestType _inherited = 1;
inline bool GetSystemPersonalizedETicketRequestType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemPersonalizedETicketRequestType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemPersonalizedETicketRequestType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemPersonalizedETicketRequestType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractRequestType& GetSystemPersonalizedETicketRequestType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemPersonalizedETicketRequestType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractRequestType;
  return _inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemPersonalizedETicketRequestType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractRequestType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated string TitleId = 2;
inline int GetSystemPersonalizedETicketRequestType::titleid_size() const {
  return titleid_.size();
}
inline void GetSystemPersonalizedETicketRequestType::clear_titleid() {
  titleid_.Clear();
}
inline const ::std::string& GetSystemPersonalizedETicketRequestType::titleid(int index) const {
  return titleid_.Get(index);
}
inline ::std::string* GetSystemPersonalizedETicketRequestType::mutable_titleid(int index) {
  return titleid_.Mutable(index);
}
inline void GetSystemPersonalizedETicketRequestType::set_titleid(int index, const ::std::string& value) {
  titleid_.Mutable(index)->assign(value);
}
inline void GetSystemPersonalizedETicketRequestType::set_titleid(int index, const char* value) {
  titleid_.Mutable(index)->assign(value);
}
inline void GetSystemPersonalizedETicketRequestType::set_titleid(int index, const char* value, size_t size) {
  titleid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemPersonalizedETicketRequestType::add_titleid() {
  return titleid_.Add();
}
inline void GetSystemPersonalizedETicketRequestType::add_titleid(const ::std::string& value) {
  titleid_.Add()->assign(value);
}
inline void GetSystemPersonalizedETicketRequestType::add_titleid(const char* value) {
  titleid_.Add()->assign(value);
}
inline void GetSystemPersonalizedETicketRequestType::add_titleid(const char* value, size_t size) {
  titleid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemPersonalizedETicketRequestType::titleid() const {
  return titleid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemPersonalizedETicketRequestType::mutable_titleid() {
  return &titleid_;
}

// required bytes DeviceCert = 3;
inline bool GetSystemPersonalizedETicketRequestType::has_devicecert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSystemPersonalizedETicketRequestType::set_has_devicecert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSystemPersonalizedETicketRequestType::clear_has_devicecert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSystemPersonalizedETicketRequestType::clear_devicecert() {
  if (devicecert_ != &::google::protobuf::internal::kEmptyString) {
    devicecert_->clear();
  }
  clear_has_devicecert();
}
inline const ::std::string& GetSystemPersonalizedETicketRequestType::devicecert() const {
  return *devicecert_;
}
inline void GetSystemPersonalizedETicketRequestType::set_devicecert(const ::std::string& value) {
  set_has_devicecert();
  if (devicecert_ == &::google::protobuf::internal::kEmptyString) {
    devicecert_ = new ::std::string;
  }
  devicecert_->assign(value);
}
inline void GetSystemPersonalizedETicketRequestType::set_devicecert(const char* value) {
  set_has_devicecert();
  if (devicecert_ == &::google::protobuf::internal::kEmptyString) {
    devicecert_ = new ::std::string;
  }
  devicecert_->assign(value);
}
inline void GetSystemPersonalizedETicketRequestType::set_devicecert(const void* value, size_t size) {
  set_has_devicecert();
  if (devicecert_ == &::google::protobuf::internal::kEmptyString) {
    devicecert_ = new ::std::string;
  }
  devicecert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemPersonalizedETicketRequestType::mutable_devicecert() {
  set_has_devicecert();
  if (devicecert_ == &::google::protobuf::internal::kEmptyString) {
    devicecert_ = new ::std::string;
  }
  return devicecert_;
}
inline ::std::string* GetSystemPersonalizedETicketRequestType::release_devicecert() {
  clear_has_devicecert();
  if (devicecert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicecert_;
    devicecert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetSystemPersonalizedETicketResponseType

// required .vplex.nus.AbstractResponseType _inherited = 1;
inline bool GetSystemPersonalizedETicketResponseType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemPersonalizedETicketResponseType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemPersonalizedETicketResponseType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemPersonalizedETicketResponseType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractResponseType& GetSystemPersonalizedETicketResponseType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemPersonalizedETicketResponseType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractResponseType;
  return _inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemPersonalizedETicketResponseType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractResponseType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated bytes ETicket = 2;
inline int GetSystemPersonalizedETicketResponseType::eticket_size() const {
  return eticket_.size();
}
inline void GetSystemPersonalizedETicketResponseType::clear_eticket() {
  eticket_.Clear();
}
inline const ::std::string& GetSystemPersonalizedETicketResponseType::eticket(int index) const {
  return eticket_.Get(index);
}
inline ::std::string* GetSystemPersonalizedETicketResponseType::mutable_eticket(int index) {
  return eticket_.Mutable(index);
}
inline void GetSystemPersonalizedETicketResponseType::set_eticket(int index, const ::std::string& value) {
  eticket_.Mutable(index)->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::set_eticket(int index, const char* value) {
  eticket_.Mutable(index)->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::set_eticket(int index, const void* value, size_t size) {
  eticket_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemPersonalizedETicketResponseType::add_eticket() {
  return eticket_.Add();
}
inline void GetSystemPersonalizedETicketResponseType::add_eticket(const ::std::string& value) {
  eticket_.Add()->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::add_eticket(const char* value) {
  eticket_.Add()->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::add_eticket(const void* value, size_t size) {
  eticket_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemPersonalizedETicketResponseType::eticket() const {
  return eticket_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemPersonalizedETicketResponseType::mutable_eticket() {
  return &eticket_;
}

// repeated bytes Certs = 3;
inline int GetSystemPersonalizedETicketResponseType::certs_size() const {
  return certs_.size();
}
inline void GetSystemPersonalizedETicketResponseType::clear_certs() {
  certs_.Clear();
}
inline const ::std::string& GetSystemPersonalizedETicketResponseType::certs(int index) const {
  return certs_.Get(index);
}
inline ::std::string* GetSystemPersonalizedETicketResponseType::mutable_certs(int index) {
  return certs_.Mutable(index);
}
inline void GetSystemPersonalizedETicketResponseType::set_certs(int index, const ::std::string& value) {
  certs_.Mutable(index)->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::set_certs(int index, const char* value) {
  certs_.Mutable(index)->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::set_certs(int index, const void* value, size_t size) {
  certs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemPersonalizedETicketResponseType::add_certs() {
  return certs_.Add();
}
inline void GetSystemPersonalizedETicketResponseType::add_certs(const ::std::string& value) {
  certs_.Add()->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::add_certs(const char* value) {
  certs_.Add()->assign(value);
}
inline void GetSystemPersonalizedETicketResponseType::add_certs(const void* value, size_t size) {
  certs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemPersonalizedETicketResponseType::certs() const {
  return certs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemPersonalizedETicketResponseType::mutable_certs() {
  return &certs_;
}

// -------------------------------------------------------------------

// GetSystemCommonETicketRequestType

// required .vplex.nus.AbstractRequestType _inherited = 1;
inline bool GetSystemCommonETicketRequestType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemCommonETicketRequestType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemCommonETicketRequestType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemCommonETicketRequestType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractRequestType& GetSystemCommonETicketRequestType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemCommonETicketRequestType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractRequestType;
  return _inherited_;
}
inline ::vplex::nus::AbstractRequestType* GetSystemCommonETicketRequestType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractRequestType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated string TitleId = 2;
inline int GetSystemCommonETicketRequestType::titleid_size() const {
  return titleid_.size();
}
inline void GetSystemCommonETicketRequestType::clear_titleid() {
  titleid_.Clear();
}
inline const ::std::string& GetSystemCommonETicketRequestType::titleid(int index) const {
  return titleid_.Get(index);
}
inline ::std::string* GetSystemCommonETicketRequestType::mutable_titleid(int index) {
  return titleid_.Mutable(index);
}
inline void GetSystemCommonETicketRequestType::set_titleid(int index, const ::std::string& value) {
  titleid_.Mutable(index)->assign(value);
}
inline void GetSystemCommonETicketRequestType::set_titleid(int index, const char* value) {
  titleid_.Mutable(index)->assign(value);
}
inline void GetSystemCommonETicketRequestType::set_titleid(int index, const char* value, size_t size) {
  titleid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemCommonETicketRequestType::add_titleid() {
  return titleid_.Add();
}
inline void GetSystemCommonETicketRequestType::add_titleid(const ::std::string& value) {
  titleid_.Add()->assign(value);
}
inline void GetSystemCommonETicketRequestType::add_titleid(const char* value) {
  titleid_.Add()->assign(value);
}
inline void GetSystemCommonETicketRequestType::add_titleid(const char* value, size_t size) {
  titleid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemCommonETicketRequestType::titleid() const {
  return titleid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemCommonETicketRequestType::mutable_titleid() {
  return &titleid_;
}

// -------------------------------------------------------------------

// GetSystemCommonETicketResponseType

// required .vplex.nus.AbstractResponseType _inherited = 1;
inline bool GetSystemCommonETicketResponseType::has__inherited() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemCommonETicketResponseType::set_has__inherited() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemCommonETicketResponseType::clear_has__inherited() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemCommonETicketResponseType::clear__inherited() {
  if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
  clear_has__inherited();
}
inline const ::vplex::nus::AbstractResponseType& GetSystemCommonETicketResponseType::_inherited() const {
  return _inherited_ != NULL ? *_inherited_ : *default_instance_->_inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemCommonETicketResponseType::mutable__inherited() {
  set_has__inherited();
  if (_inherited_ == NULL) _inherited_ = new ::vplex::nus::AbstractResponseType;
  return _inherited_;
}
inline ::vplex::nus::AbstractResponseType* GetSystemCommonETicketResponseType::release__inherited() {
  clear_has__inherited();
  ::vplex::nus::AbstractResponseType* temp = _inherited_;
  _inherited_ = NULL;
  return temp;
}

// repeated bytes CommonETicket = 2;
inline int GetSystemCommonETicketResponseType::commoneticket_size() const {
  return commoneticket_.size();
}
inline void GetSystemCommonETicketResponseType::clear_commoneticket() {
  commoneticket_.Clear();
}
inline const ::std::string& GetSystemCommonETicketResponseType::commoneticket(int index) const {
  return commoneticket_.Get(index);
}
inline ::std::string* GetSystemCommonETicketResponseType::mutable_commoneticket(int index) {
  return commoneticket_.Mutable(index);
}
inline void GetSystemCommonETicketResponseType::set_commoneticket(int index, const ::std::string& value) {
  commoneticket_.Mutable(index)->assign(value);
}
inline void GetSystemCommonETicketResponseType::set_commoneticket(int index, const char* value) {
  commoneticket_.Mutable(index)->assign(value);
}
inline void GetSystemCommonETicketResponseType::set_commoneticket(int index, const void* value, size_t size) {
  commoneticket_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemCommonETicketResponseType::add_commoneticket() {
  return commoneticket_.Add();
}
inline void GetSystemCommonETicketResponseType::add_commoneticket(const ::std::string& value) {
  commoneticket_.Add()->assign(value);
}
inline void GetSystemCommonETicketResponseType::add_commoneticket(const char* value) {
  commoneticket_.Add()->assign(value);
}
inline void GetSystemCommonETicketResponseType::add_commoneticket(const void* value, size_t size) {
  commoneticket_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemCommonETicketResponseType::commoneticket() const {
  return commoneticket_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemCommonETicketResponseType::mutable_commoneticket() {
  return &commoneticket_;
}

// repeated bytes Certs = 3;
inline int GetSystemCommonETicketResponseType::certs_size() const {
  return certs_.size();
}
inline void GetSystemCommonETicketResponseType::clear_certs() {
  certs_.Clear();
}
inline const ::std::string& GetSystemCommonETicketResponseType::certs(int index) const {
  return certs_.Get(index);
}
inline ::std::string* GetSystemCommonETicketResponseType::mutable_certs(int index) {
  return certs_.Mutable(index);
}
inline void GetSystemCommonETicketResponseType::set_certs(int index, const ::std::string& value) {
  certs_.Mutable(index)->assign(value);
}
inline void GetSystemCommonETicketResponseType::set_certs(int index, const char* value) {
  certs_.Mutable(index)->assign(value);
}
inline void GetSystemCommonETicketResponseType::set_certs(int index, const void* value, size_t size) {
  certs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemCommonETicketResponseType::add_certs() {
  return certs_.Add();
}
inline void GetSystemCommonETicketResponseType::add_certs(const ::std::string& value) {
  certs_.Add()->assign(value);
}
inline void GetSystemCommonETicketResponseType::add_certs(const char* value) {
  certs_.Add()->assign(value);
}
inline void GetSystemCommonETicketResponseType::add_certs(const void* value, size_t size) {
  certs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSystemCommonETicketResponseType::certs() const {
  return certs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSystemCommonETicketResponseType::mutable_certs() {
  return &certs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nus
}  // namespace vplex

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vplex_5fnus_5fservice_5ftypes_2eproto__INCLUDED
