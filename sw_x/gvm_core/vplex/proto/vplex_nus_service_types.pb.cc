// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vplex_nus_service_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace nus {

namespace {

const ::google::protobuf::Descriptor* AbstractRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbstractRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbstractResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbstractResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleVersionType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleVersionType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemUpdateRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemUpdateRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemUpdateResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemUpdateResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemTMDRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemTMDRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemTMDResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemTMDResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemPersonalizedETicketRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemPersonalizedETicketRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemPersonalizedETicketResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemPersonalizedETicketResponseType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemCommonETicketRequestType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemCommonETicketRequestType_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemCommonETicketResponseType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemCommonETicketResponseType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto() {
  protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vplex_nus_service_types.proto");
  GOOGLE_CHECK(file != NULL);
  AbstractRequestType_descriptor_ = file->message_type(0);
  static const int AbstractRequestType_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, regionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, virtualdevicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, serialno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, userid_),
  };
  AbstractRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbstractRequestType_descriptor_,
      AbstractRequestType::default_instance_,
      AbstractRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbstractRequestType));
  AbstractResponseType_descriptor_ = file->message_type(1);
  static const int AbstractResponseType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, errormessage_),
  };
  AbstractResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbstractResponseType_descriptor_,
      AbstractResponseType::default_instance_,
      AbstractResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbstractResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbstractResponseType));
  TitleVersionType_descriptor_ = file->message_type(2);
  static const int TitleVersionType_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, fssize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, ticketsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, tmdsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, appguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, appversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, appminversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, ccdminversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, appmessage_),
  };
  TitleVersionType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleVersionType_descriptor_,
      TitleVersionType::default_instance_,
      TitleVersionType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleVersionType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleVersionType));
  GetSystemUpdateRequestType_descriptor_ = file->message_type(3);
  static const int GetSystemUpdateRequestType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, titleversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, auditdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, runtimetypemask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, group_),
  };
  GetSystemUpdateRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemUpdateRequestType_descriptor_,
      GetSystemUpdateRequestType::default_instance_,
      GetSystemUpdateRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemUpdateRequestType));
  GetSystemUpdateResponseType_descriptor_ = file->message_type(4);
  static const int GetSystemUpdateResponseType_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, contentprefixurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, uncachedcontentprefixurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, pcsprefiurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, titleversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, uploadauditdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, isqa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, isautoupdatedisabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, infradownload_),
  };
  GetSystemUpdateResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemUpdateResponseType_descriptor_,
      GetSystemUpdateResponseType::default_instance_,
      GetSystemUpdateResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemUpdateResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemUpdateResponseType));
  GetSystemTMDRequestType_descriptor_ = file->message_type(5);
  static const int GetSystemTMDRequestType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDRequestType, titleversion_),
  };
  GetSystemTMDRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemTMDRequestType_descriptor_,
      GetSystemTMDRequestType::default_instance_,
      GetSystemTMDRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemTMDRequestType));
  GetSystemTMDResponseType_descriptor_ = file->message_type(6);
  static const int GetSystemTMDResponseType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDResponseType, tmd_),
  };
  GetSystemTMDResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemTMDResponseType_descriptor_,
      GetSystemTMDResponseType::default_instance_,
      GetSystemTMDResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemTMDResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemTMDResponseType));
  GetSystemPersonalizedETicketRequestType_descriptor_ = file->message_type(7);
  static const int GetSystemPersonalizedETicketRequestType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketRequestType, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketRequestType, devicecert_),
  };
  GetSystemPersonalizedETicketRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemPersonalizedETicketRequestType_descriptor_,
      GetSystemPersonalizedETicketRequestType::default_instance_,
      GetSystemPersonalizedETicketRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemPersonalizedETicketRequestType));
  GetSystemPersonalizedETicketResponseType_descriptor_ = file->message_type(8);
  static const int GetSystemPersonalizedETicketResponseType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketResponseType, eticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketResponseType, certs_),
  };
  GetSystemPersonalizedETicketResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemPersonalizedETicketResponseType_descriptor_,
      GetSystemPersonalizedETicketResponseType::default_instance_,
      GetSystemPersonalizedETicketResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemPersonalizedETicketResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemPersonalizedETicketResponseType));
  GetSystemCommonETicketRequestType_descriptor_ = file->message_type(9);
  static const int GetSystemCommonETicketRequestType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketRequestType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketRequestType, titleid_),
  };
  GetSystemCommonETicketRequestType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemCommonETicketRequestType_descriptor_,
      GetSystemCommonETicketRequestType::default_instance_,
      GetSystemCommonETicketRequestType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketRequestType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketRequestType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemCommonETicketRequestType));
  GetSystemCommonETicketResponseType_descriptor_ = file->message_type(10);
  static const int GetSystemCommonETicketResponseType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketResponseType, _inherited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketResponseType, commoneticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketResponseType, certs_),
  };
  GetSystemCommonETicketResponseType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemCommonETicketResponseType_descriptor_,
      GetSystemCommonETicketResponseType::default_instance_,
      GetSystemCommonETicketResponseType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketResponseType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemCommonETicketResponseType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemCommonETicketResponseType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vplex_5fnus_5fservice_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbstractRequestType_descriptor_, &AbstractRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbstractResponseType_descriptor_, &AbstractResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleVersionType_descriptor_, &TitleVersionType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemUpdateRequestType_descriptor_, &GetSystemUpdateRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemUpdateResponseType_descriptor_, &GetSystemUpdateResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemTMDRequestType_descriptor_, &GetSystemTMDRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemTMDResponseType_descriptor_, &GetSystemTMDResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemPersonalizedETicketRequestType_descriptor_, &GetSystemPersonalizedETicketRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemPersonalizedETicketResponseType_descriptor_, &GetSystemPersonalizedETicketResponseType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemCommonETicketRequestType_descriptor_, &GetSystemCommonETicketRequestType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemCommonETicketResponseType_descriptor_, &GetSystemCommonETicketResponseType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto() {
  delete AbstractRequestType::default_instance_;
  delete AbstractRequestType_reflection_;
  delete AbstractResponseType::default_instance_;
  delete AbstractResponseType_reflection_;
  delete TitleVersionType::default_instance_;
  delete TitleVersionType_reflection_;
  delete GetSystemUpdateRequestType::default_instance_;
  delete GetSystemUpdateRequestType_reflection_;
  delete GetSystemUpdateResponseType::default_instance_;
  delete GetSystemUpdateResponseType_reflection_;
  delete GetSystemTMDRequestType::default_instance_;
  delete GetSystemTMDRequestType_reflection_;
  delete GetSystemTMDResponseType::default_instance_;
  delete GetSystemTMDResponseType_reflection_;
  delete GetSystemPersonalizedETicketRequestType::default_instance_;
  delete GetSystemPersonalizedETicketRequestType_reflection_;
  delete GetSystemPersonalizedETicketResponseType::default_instance_;
  delete GetSystemPersonalizedETicketResponseType_reflection_;
  delete GetSystemCommonETicketRequestType::default_instance_;
  delete GetSystemCommonETicketRequestType_reflection_;
  delete GetSystemCommonETicketResponseType::default_instance_;
  delete GetSystemCommonETicketResponseType_reflection_;
}

void protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035vplex_nus_service_types.proto\022\tvplex.n"
    "us\"\324\001\n\023AbstractRequestType\022\017\n\007Version\030\001 "
    "\002(\t\022\021\n\tMessageId\030\002 \002(\t\022\020\n\010DeviceId\030\003 \002(\006"
    "\022\020\n\010RegionId\030\004 \002(\t\022\023\n\013CountryCode\030\005 \002(\t\022"
    "\031\n\021VirtualDeviceType\030\006 \001(\021\022\020\n\010Language\030\007"
    " \001(\t\022\020\n\010SerialNo\030\010 \001(\t\022\021\n\tAccountId\030\t \001("
    "\t\022\016\n\006UserId\030\n \001(\006\"\210\001\n\024AbstractResponseTy"
    "pe\022\017\n\007Version\030\001 \002(\t\022\020\n\010DeviceId\030\002 \002(\006\022\021\n"
    "\tMessageId\030\003 \002(\t\022\021\n\tTimeStamp\030\004 \002(\006\022\021\n\tE"
    "rrorCode\030\005 \002(\021\022\024\n\014ErrorMessage\030\006 \001(\t\"\320\001\n"
    "\020TitleVersionType\022\017\n\007TitleId\030\001 \002(\t\022\017\n\007Ve"
    "rsion\030\002 \002(\021\022\016\n\006FsSize\030\003 \001(\022\022\022\n\nTicketSiz"
    "e\030\004 \001(\021\022\017\n\007TMDSize\030\005 \001(\021\022\017\n\007AppGUID\030\006 \001("
    "\t\022\022\n\nAppVersion\030\007 \001(\t\022\025\n\rAppMinVersion\030\010"
    " \001(\t\022\025\n\rCcdMinVersion\030\t \001(\t\022\022\n\nAppMessag"
    "e\030\n \001(\t\"\321\001\n\032GetSystemUpdateRequestType\0222"
    "\n\n_inherited\030\001 \002(\0132\036.vplex.nus.AbstractR"
    "equestType\0221\n\014TitleVersion\030\002 \003(\0132\033.vplex"
    ".nus.TitleVersionType\022\021\n\tAttribute\030\003 \001(\021"
    "\022\021\n\tAuditData\030\004 \001(\t\022\027\n\017RunTimeTypeMask\030\005"
    " \001(\021\022\r\n\005Group\030\006 \001(\t\"\262\002\n\033GetSystemUpdateR"
    "esponseType\0223\n\n_inherited\030\001 \002(\0132\037.vplex."
    "nus.AbstractResponseType\022\030\n\020ContentPrefi"
    "xURL\030\002 \001(\t\022 \n\030UncachedContentPrefixURL\030\003"
    " \001(\t\022\023\n\013PcsPrefiURL\030\004 \001(\t\0221\n\014TitleVersio"
    "n\030\005 \003(\0132\033.vplex.nus.TitleVersionType\022\027\n\017"
    "UploadAuditData\030\006 \002(\021\022\014\n\004IsQA\030\007 \001(\010\022\034\n\024I"
    "sAutoUpdateDisabled\030\010 \001(\010\022\025\n\rInfraDownlo"
    "ad\030\t \001(\010\"\200\001\n\027GetSystemTMDRequestType\0222\n\n"
    "_inherited\030\001 \002(\0132\036.vplex.nus.AbstractReq"
    "uestType\0221\n\014TitleVersion\030\002 \003(\0132\033.vplex.n"
    "us.TitleVersionType\"\\\n\030GetSystemTMDRespo"
    "nseType\0223\n\n_inherited\030\001 \002(\0132\037.vplex.nus."
    "AbstractResponseType\022\013\n\003TMD\030\002 \003(\014\"\202\001\n\'Ge"
    "tSystemPersonalizedETicketRequestType\0222\n"
    "\n_inherited\030\001 \002(\0132\036.vplex.nus.AbstractRe"
    "questType\022\017\n\007TitleId\030\002 \003(\t\022\022\n\nDeviceCert"
    "\030\003 \002(\014\"\177\n(GetSystemPersonalizedETicketRe"
    "sponseType\0223\n\n_inherited\030\001 \002(\0132\037.vplex.n"
    "us.AbstractResponseType\022\017\n\007ETicket\030\002 \003(\014"
    "\022\r\n\005Certs\030\003 \003(\014\"h\n!GetSystemCommonETicke"
    "tRequestType\0222\n\n_inherited\030\001 \002(\0132\036.vplex"
    ".nus.AbstractRequestType\022\017\n\007TitleId\030\002 \003("
    "\t\"\177\n\"GetSystemCommonETicketResponseType\022"
    "3\n\n_inherited\030\001 \002(\0132\037.vplex.nus.Abstract"
    "ResponseType\022\025\n\rCommonETicket\030\002 \003(\014\022\r\n\005C"
    "erts\030\003 \003(\014B\"\n\017igware.vplex.pbB\017NusServic"
    "eTypes", 1886);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vplex_nus_service_types.proto", &protobuf_RegisterTypes);
  AbstractRequestType::default_instance_ = new AbstractRequestType();
  AbstractResponseType::default_instance_ = new AbstractResponseType();
  TitleVersionType::default_instance_ = new TitleVersionType();
  GetSystemUpdateRequestType::default_instance_ = new GetSystemUpdateRequestType();
  GetSystemUpdateResponseType::default_instance_ = new GetSystemUpdateResponseType();
  GetSystemTMDRequestType::default_instance_ = new GetSystemTMDRequestType();
  GetSystemTMDResponseType::default_instance_ = new GetSystemTMDResponseType();
  GetSystemPersonalizedETicketRequestType::default_instance_ = new GetSystemPersonalizedETicketRequestType();
  GetSystemPersonalizedETicketResponseType::default_instance_ = new GetSystemPersonalizedETicketResponseType();
  GetSystemCommonETicketRequestType::default_instance_ = new GetSystemCommonETicketRequestType();
  GetSystemCommonETicketResponseType::default_instance_ = new GetSystemCommonETicketResponseType();
  AbstractRequestType::default_instance_->InitAsDefaultInstance();
  AbstractResponseType::default_instance_->InitAsDefaultInstance();
  TitleVersionType::default_instance_->InitAsDefaultInstance();
  GetSystemUpdateRequestType::default_instance_->InitAsDefaultInstance();
  GetSystemUpdateResponseType::default_instance_->InitAsDefaultInstance();
  GetSystemTMDRequestType::default_instance_->InitAsDefaultInstance();
  GetSystemTMDResponseType::default_instance_->InitAsDefaultInstance();
  GetSystemPersonalizedETicketRequestType::default_instance_->InitAsDefaultInstance();
  GetSystemPersonalizedETicketResponseType::default_instance_->InitAsDefaultInstance();
  GetSystemCommonETicketRequestType::default_instance_->InitAsDefaultInstance();
  GetSystemCommonETicketResponseType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vplex_5fnus_5fservice_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vplex_5fnus_5fservice_5ftypes_2eproto {
  StaticDescriptorInitializer_vplex_5fnus_5fservice_5ftypes_2eproto() {
    protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();
  }
} static_descriptor_initializer_vplex_5fnus_5fservice_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AbstractRequestType::kVersionFieldNumber;
const int AbstractRequestType::kMessageIdFieldNumber;
const int AbstractRequestType::kDeviceIdFieldNumber;
const int AbstractRequestType::kRegionIdFieldNumber;
const int AbstractRequestType::kCountryCodeFieldNumber;
const int AbstractRequestType::kVirtualDeviceTypeFieldNumber;
const int AbstractRequestType::kLanguageFieldNumber;
const int AbstractRequestType::kSerialNoFieldNumber;
const int AbstractRequestType::kAccountIdFieldNumber;
const int AbstractRequestType::kUserIdFieldNumber;
#endif  // !_MSC_VER

AbstractRequestType::AbstractRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbstractRequestType::InitAsDefaultInstance() {
}

AbstractRequestType::AbstractRequestType(const AbstractRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbstractRequestType::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = GOOGLE_ULONGLONG(0);
  regionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  countrycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  virtualdevicetype_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbstractRequestType::~AbstractRequestType() {
  SharedDtor();
}

void AbstractRequestType::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (regionid_ != &::google::protobuf::internal::kEmptyString) {
    delete regionid_;
  }
  if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
    delete countrycode_;
  }
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (serialno_ != &::google::protobuf::internal::kEmptyString) {
    delete serialno_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (this != default_instance_) {
  }
}

void AbstractRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbstractRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractRequestType_descriptor_;
}

const AbstractRequestType& AbstractRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AbstractRequestType* AbstractRequestType::default_instance_ = NULL;

AbstractRequestType* AbstractRequestType::New() const {
  return new AbstractRequestType;
}

void AbstractRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_regionid()) {
      if (regionid_ != &::google::protobuf::internal::kEmptyString) {
        regionid_->clear();
      }
    }
    if (has_countrycode()) {
      if (countrycode_ != &::google::protobuf::internal::kEmptyString) {
        countrycode_->clear();
      }
    }
    virtualdevicetype_ = 0;
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_serialno()) {
      if (serialno_ != &::google::protobuf::internal::kEmptyString) {
        serialno_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbstractRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MessageId;
        break;
      }
      
      // required string MessageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_DeviceId;
        break;
      }
      
      // required fixed64 DeviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RegionId;
        break;
      }
      
      // required string RegionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->regionid().data(), this->regionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CountryCode;
        break;
      }
      
      // required string CountryCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CountryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VirtualDeviceType;
        break;
      }
      
      // optional sint32 VirtualDeviceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VirtualDeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &virtualdevicetype_)));
          set_has_virtualdevicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Language;
        break;
      }
      
      // optional string Language = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SerialNo;
        break;
      }
      
      // optional string SerialNo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SerialNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serialno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serialno().data(), this->serialno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_AccountId;
        break;
      }
      
      // optional string AccountId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_UserId;
        break;
      }
      
      // optional fixed64 UserId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbstractRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }
  
  // required fixed64 DeviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required string RegionId = 4;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regionid().data(), this->regionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->regionid(), output);
  }
  
  // required string CountryCode = 5;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->countrycode(), output);
  }
  
  // optional sint32 VirtualDeviceType = 6;
  if (has_virtualdevicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->virtualdevicetype(), output);
  }
  
  // optional string Language = 7;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->language(), output);
  }
  
  // optional string SerialNo = 8;
  if (has_serialno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialno().data(), this->serialno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->serialno(), output);
  }
  
  // optional string AccountId = 9;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->accountid(), output);
  }
  
  // optional fixed64 UserId = 10;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbstractRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required string MessageId = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }
  
  // required fixed64 DeviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required string RegionId = 4;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->regionid().data(), this->regionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->regionid(), target);
  }
  
  // required string CountryCode = 5;
  if (has_countrycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->countrycode(), target);
  }
  
  // optional sint32 VirtualDeviceType = 6;
  if (has_virtualdevicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->virtualdevicetype(), target);
  }
  
  // optional string Language = 7;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->language(), target);
  }
  
  // optional string SerialNo = 8;
  if (has_serialno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serialno().data(), this->serialno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->serialno(), target);
  }
  
  // optional string AccountId = 9;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->accountid(), target);
  }
  
  // optional fixed64 UserId = 10;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbstractRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string MessageId = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required fixed64 DeviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required string RegionId = 4;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regionid());
    }
    
    // required string CountryCode = 5;
    if (has_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->countrycode());
    }
    
    // optional sint32 VirtualDeviceType = 6;
    if (has_virtualdevicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->virtualdevicetype());
    }
    
    // optional string Language = 7;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
    // optional string SerialNo = 8;
    if (has_serialno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serialno());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string AccountId = 9;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }
    
    // optional fixed64 UserId = 10;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbstractRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbstractRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbstractRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbstractRequestType::MergeFrom(const AbstractRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
    if (from.has_countrycode()) {
      set_countrycode(from.countrycode());
    }
    if (from.has_virtualdevicetype()) {
      set_virtualdevicetype(from.virtualdevicetype());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_serialno()) {
      set_serialno(from.serialno());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbstractRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractRequestType::CopyFrom(const AbstractRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AbstractRequestType::Swap(AbstractRequestType* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(messageid_, other->messageid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(regionid_, other->regionid_);
    std::swap(countrycode_, other->countrycode_);
    std::swap(virtualdevicetype_, other->virtualdevicetype_);
    std::swap(language_, other->language_);
    std::swap(serialno_, other->serialno_);
    std::swap(accountid_, other->accountid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbstractRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbstractRequestType_descriptor_;
  metadata.reflection = AbstractRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbstractResponseType::kVersionFieldNumber;
const int AbstractResponseType::kDeviceIdFieldNumber;
const int AbstractResponseType::kMessageIdFieldNumber;
const int AbstractResponseType::kTimeStampFieldNumber;
const int AbstractResponseType::kErrorCodeFieldNumber;
const int AbstractResponseType::kErrorMessageFieldNumber;
#endif  // !_MSC_VER

AbstractResponseType::AbstractResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbstractResponseType::InitAsDefaultInstance() {
}

AbstractResponseType::AbstractResponseType(const AbstractResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbstractResponseType::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = GOOGLE_ULONGLONG(0);
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 0;
  errormessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbstractResponseType::~AbstractResponseType() {
  SharedDtor();
}

void AbstractResponseType::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
    delete errormessage_;
  }
  if (this != default_instance_) {
  }
}

void AbstractResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbstractResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbstractResponseType_descriptor_;
}

const AbstractResponseType& AbstractResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AbstractResponseType* AbstractResponseType::default_instance_ = NULL;

AbstractResponseType* AbstractResponseType::New() const {
  return new AbstractResponseType;
}

void AbstractResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
    errorcode_ = 0;
    if (has_errormessage()) {
      if (errormessage_ != &::google::protobuf::internal::kEmptyString) {
        errormessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbstractResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_DeviceId;
        break;
      }
      
      // required fixed64 DeviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MessageId;
        break;
      }
      
      // required string MessageId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MessageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_TimeStamp;
        break;
      }
      
      // required fixed64 TimeStamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ErrorCode;
        break;
      }
      
      // required sint32 ErrorCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ErrorMessage;
        break;
      }
      
      // optional string ErrorMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbstractResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required fixed64 DeviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  // required string MessageId = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->messageid(), output);
  }
  
  // required fixed64 TimeStamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->timestamp(), output);
  }
  
  // required sint32 ErrorCode = 5;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->errorcode(), output);
  }
  
  // optional string ErrorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->errormessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbstractResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required fixed64 DeviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  // required string MessageId = 3;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messageid(), target);
  }
  
  // required fixed64 TimeStamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->timestamp(), target);
  }
  
  // required sint32 ErrorCode = 5;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->errorcode(), target);
  }
  
  // optional string ErrorMessage = 6;
  if (has_errormessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errormessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbstractResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required fixed64 DeviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required string MessageId = 3;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // required fixed64 TimeStamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
    // required sint32 ErrorCode = 5;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->errorcode());
    }
    
    // optional string ErrorMessage = 6;
    if (has_errormessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbstractResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbstractResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbstractResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbstractResponseType::MergeFrom(const AbstractResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errormessage()) {
      set_errormessage(from.errormessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbstractResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbstractResponseType::CopyFrom(const AbstractResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbstractResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void AbstractResponseType::Swap(AbstractResponseType* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(messageid_, other->messageid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(errormessage_, other->errormessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbstractResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbstractResponseType_descriptor_;
  metadata.reflection = AbstractResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleVersionType::kTitleIdFieldNumber;
const int TitleVersionType::kVersionFieldNumber;
const int TitleVersionType::kFsSizeFieldNumber;
const int TitleVersionType::kTicketSizeFieldNumber;
const int TitleVersionType::kTMDSizeFieldNumber;
const int TitleVersionType::kAppGUIDFieldNumber;
const int TitleVersionType::kAppVersionFieldNumber;
const int TitleVersionType::kAppMinVersionFieldNumber;
const int TitleVersionType::kCcdMinVersionFieldNumber;
const int TitleVersionType::kAppMessageFieldNumber;
#endif  // !_MSC_VER

TitleVersionType::TitleVersionType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleVersionType::InitAsDefaultInstance() {
}

TitleVersionType::TitleVersionType(const TitleVersionType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleVersionType::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  fssize_ = GOOGLE_LONGLONG(0);
  ticketsize_ = 0;
  tmdsize_ = 0;
  appguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appminversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccdminversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleVersionType::~TitleVersionType() {
  SharedDtor();
}

void TitleVersionType::SharedDtor() {
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    delete titleid_;
  }
  if (appguid_ != &::google::protobuf::internal::kEmptyString) {
    delete appguid_;
  }
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (appminversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appminversion_;
  }
  if (ccdminversion_ != &::google::protobuf::internal::kEmptyString) {
    delete ccdminversion_;
  }
  if (appmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete appmessage_;
  }
  if (this != default_instance_) {
  }
}

void TitleVersionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleVersionType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleVersionType_descriptor_;
}

const TitleVersionType& TitleVersionType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

TitleVersionType* TitleVersionType::default_instance_ = NULL;

TitleVersionType* TitleVersionType::New() const {
  return new TitleVersionType;
}

void TitleVersionType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_titleid()) {
      if (titleid_ != &::google::protobuf::internal::kEmptyString) {
        titleid_->clear();
      }
    }
    version_ = 0;
    fssize_ = GOOGLE_LONGLONG(0);
    ticketsize_ = 0;
    tmdsize_ = 0;
    if (has_appguid()) {
      if (appguid_ != &::google::protobuf::internal::kEmptyString) {
        appguid_->clear();
      }
    }
    if (has_appversion()) {
      if (appversion_ != &::google::protobuf::internal::kEmptyString) {
        appversion_->clear();
      }
    }
    if (has_appminversion()) {
      if (appminversion_ != &::google::protobuf::internal::kEmptyString) {
        appminversion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ccdminversion()) {
      if (ccdminversion_ != &::google::protobuf::internal::kEmptyString) {
        ccdminversion_->clear();
      }
    }
    if (has_appmessage()) {
      if (appmessage_ != &::google::protobuf::internal::kEmptyString) {
        appmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleVersionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TitleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid().data(), this->titleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Version;
        break;
      }
      
      // required sint32 Version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FsSize;
        break;
      }
      
      // optional sint64 FsSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FsSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &fssize_)));
          set_has_fssize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TicketSize;
        break;
      }
      
      // optional sint32 TicketSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TicketSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ticketsize_)));
          set_has_ticketsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TMDSize;
        break;
      }
      
      // optional sint32 TMDSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TMDSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tmdsize_)));
          set_has_tmdsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AppGUID;
        break;
      }
      
      // optional string AppGUID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppGUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appguid().data(), this->appguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_AppVersion;
        break;
      }
      
      // optional string AppVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_AppMinVersion;
        break;
      }
      
      // optional string AppMinVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppMinVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appminversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appminversion().data(), this->appminversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CcdMinVersion;
        break;
      }
      
      // optional string CcdMinVersion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CcdMinVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccdminversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ccdminversion().data(), this->ccdminversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_AppMessage;
        break;
      }
      
      // optional string AppMessage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appmessage().data(), this->appmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleVersionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string TitleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->titleid(), output);
  }
  
  // required sint32 Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->version(), output);
  }
  
  // optional sint64 FsSize = 3;
  if (has_fssize()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->fssize(), output);
  }
  
  // optional sint32 TicketSize = 4;
  if (has_ticketsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->ticketsize(), output);
  }
  
  // optional sint32 TMDSize = 5;
  if (has_tmdsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->tmdsize(), output);
  }
  
  // optional string AppGUID = 6;
  if (has_appguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appguid().data(), this->appguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->appguid(), output);
  }
  
  // optional string AppVersion = 7;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->appversion(), output);
  }
  
  // optional string AppMinVersion = 8;
  if (has_appminversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appminversion().data(), this->appminversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->appminversion(), output);
  }
  
  // optional string CcdMinVersion = 9;
  if (has_ccdminversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccdminversion().data(), this->ccdminversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ccdminversion(), output);
  }
  
  // optional string AppMessage = 10;
  if (has_appmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appmessage().data(), this->appmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->appmessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleVersionType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string TitleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->titleid(), target);
  }
  
  // required sint32 Version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->version(), target);
  }
  
  // optional sint64 FsSize = 3;
  if (has_fssize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->fssize(), target);
  }
  
  // optional sint32 TicketSize = 4;
  if (has_ticketsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->ticketsize(), target);
  }
  
  // optional sint32 TMDSize = 5;
  if (has_tmdsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->tmdsize(), target);
  }
  
  // optional string AppGUID = 6;
  if (has_appguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appguid().data(), this->appguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->appguid(), target);
  }
  
  // optional string AppVersion = 7;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->appversion(), target);
  }
  
  // optional string AppMinVersion = 8;
  if (has_appminversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appminversion().data(), this->appminversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->appminversion(), target);
  }
  
  // optional string CcdMinVersion = 9;
  if (has_ccdminversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccdminversion().data(), this->ccdminversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ccdminversion(), target);
  }
  
  // optional string AppMessage = 10;
  if (has_appmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appmessage().data(), this->appmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->appmessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleVersionType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TitleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleid());
    }
    
    // required sint32 Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->version());
    }
    
    // optional sint64 FsSize = 3;
    if (has_fssize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->fssize());
    }
    
    // optional sint32 TicketSize = 4;
    if (has_ticketsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->ticketsize());
    }
    
    // optional sint32 TMDSize = 5;
    if (has_tmdsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tmdsize());
    }
    
    // optional string AppGUID = 6;
    if (has_appguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appguid());
    }
    
    // optional string AppVersion = 7;
    if (has_appversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appversion());
    }
    
    // optional string AppMinVersion = 8;
    if (has_appminversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appminversion());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CcdMinVersion = 9;
    if (has_ccdminversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccdminversion());
    }
    
    // optional string AppMessage = 10;
    if (has_appmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appmessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleVersionType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleVersionType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleVersionType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleVersionType::MergeFrom(const TitleVersionType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_fssize()) {
      set_fssize(from.fssize());
    }
    if (from.has_ticketsize()) {
      set_ticketsize(from.ticketsize());
    }
    if (from.has_tmdsize()) {
      set_tmdsize(from.tmdsize());
    }
    if (from.has_appguid()) {
      set_appguid(from.appguid());
    }
    if (from.has_appversion()) {
      set_appversion(from.appversion());
    }
    if (from.has_appminversion()) {
      set_appminversion(from.appminversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ccdminversion()) {
      set_ccdminversion(from.ccdminversion());
    }
    if (from.has_appmessage()) {
      set_appmessage(from.appmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleVersionType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleVersionType::CopyFrom(const TitleVersionType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleVersionType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TitleVersionType::Swap(TitleVersionType* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(version_, other->version_);
    std::swap(fssize_, other->fssize_);
    std::swap(ticketsize_, other->ticketsize_);
    std::swap(tmdsize_, other->tmdsize_);
    std::swap(appguid_, other->appguid_);
    std::swap(appversion_, other->appversion_);
    std::swap(appminversion_, other->appminversion_);
    std::swap(ccdminversion_, other->ccdminversion_);
    std::swap(appmessage_, other->appmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleVersionType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleVersionType_descriptor_;
  metadata.reflection = TitleVersionType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemUpdateRequestType::kInheritedFieldNumber;
const int GetSystemUpdateRequestType::kTitleVersionFieldNumber;
const int GetSystemUpdateRequestType::kAttributeFieldNumber;
const int GetSystemUpdateRequestType::kAuditDataFieldNumber;
const int GetSystemUpdateRequestType::kRunTimeTypeMaskFieldNumber;
const int GetSystemUpdateRequestType::kGroupFieldNumber;
#endif  // !_MSC_VER

GetSystemUpdateRequestType::GetSystemUpdateRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemUpdateRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractRequestType*>(&::vplex::nus::AbstractRequestType::default_instance());
}

GetSystemUpdateRequestType::GetSystemUpdateRequestType(const GetSystemUpdateRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemUpdateRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  attribute_ = 0;
  auditdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  runtimetypemask_ = 0;
  group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemUpdateRequestType::~GetSystemUpdateRequestType() {
  SharedDtor();
}

void GetSystemUpdateRequestType::SharedDtor() {
  if (auditdata_ != &::google::protobuf::internal::kEmptyString) {
    delete auditdata_;
  }
  if (group_ != &::google::protobuf::internal::kEmptyString) {
    delete group_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemUpdateRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemUpdateRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemUpdateRequestType_descriptor_;
}

const GetSystemUpdateRequestType& GetSystemUpdateRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemUpdateRequestType* GetSystemUpdateRequestType::default_instance_ = NULL;

GetSystemUpdateRequestType* GetSystemUpdateRequestType::New() const {
  return new GetSystemUpdateRequestType;
}

void GetSystemUpdateRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
    }
    attribute_ = 0;
    if (has_auditdata()) {
      if (auditdata_ != &::google::protobuf::internal::kEmptyString) {
        auditdata_->clear();
      }
    }
    runtimetypemask_ = 0;
    if (has_group()) {
      if (group_ != &::google::protobuf::internal::kEmptyString) {
        group_->clear();
      }
    }
  }
  titleversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemUpdateRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleVersion;
        break;
      }
      
      // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titleversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleVersion;
        if (input->ExpectTag(24)) goto parse_Attribute;
        break;
      }
      
      // optional sint32 Attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &attribute_)));
          set_has_attribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AuditData;
        break;
      }
      
      // optional string AuditData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuditData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auditdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->auditdata().data(), this->auditdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RunTimeTypeMask;
        break;
      }
      
      // optional sint32 RunTimeTypeMask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RunTimeTypeMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &runtimetypemask_)));
          set_has_runtimetypemask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Group;
        break;
      }
      
      // optional string Group = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemUpdateRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  for (int i = 0; i < this->titleversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titleversion(i), output);
  }
  
  // optional sint32 Attribute = 3;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->attribute(), output);
  }
  
  // optional string AuditData = 4;
  if (has_auditdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auditdata().data(), this->auditdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->auditdata(), output);
  }
  
  // optional sint32 RunTimeTypeMask = 5;
  if (has_runtimetypemask()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->runtimetypemask(), output);
  }
  
  // optional string Group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemUpdateRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  for (int i = 0; i < this->titleversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titleversion(i), target);
  }
  
  // optional sint32 Attribute = 3;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->attribute(), target);
  }
  
  // optional string AuditData = 4;
  if (has_auditdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->auditdata().data(), this->auditdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->auditdata(), target);
  }
  
  // optional sint32 RunTimeTypeMask = 5;
  if (has_runtimetypemask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->runtimetypemask(), target);
  }
  
  // optional string Group = 6;
  if (has_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemUpdateRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional sint32 Attribute = 3;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->attribute());
    }
    
    // optional string AuditData = 4;
    if (has_auditdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auditdata());
    }
    
    // optional sint32 RunTimeTypeMask = 5;
    if (has_runtimetypemask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->runtimetypemask());
    }
    
    // optional string Group = 6;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group());
    }
    
  }
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  total_size += 1 * this->titleversion_size();
  for (int i = 0; i < this->titleversion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titleversion(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemUpdateRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemUpdateRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemUpdateRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemUpdateRequestType::MergeFrom(const GetSystemUpdateRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleversion_.MergeFrom(from.titleversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
    if (from.has_auditdata()) {
      set_auditdata(from.auditdata());
    }
    if (from.has_runtimetypemask()) {
      set_runtimetypemask(from.runtimetypemask());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemUpdateRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemUpdateRequestType::CopyFrom(const GetSystemUpdateRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemUpdateRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  for (int i = 0; i < titleversion_size(); i++) {
    if (!this->titleversion(i).IsInitialized()) return false;
  }
  return true;
}

void GetSystemUpdateRequestType::Swap(GetSystemUpdateRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    titleversion_.Swap(&other->titleversion_);
    std::swap(attribute_, other->attribute_);
    std::swap(auditdata_, other->auditdata_);
    std::swap(runtimetypemask_, other->runtimetypemask_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemUpdateRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemUpdateRequestType_descriptor_;
  metadata.reflection = GetSystemUpdateRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemUpdateResponseType::kInheritedFieldNumber;
const int GetSystemUpdateResponseType::kContentPrefixURLFieldNumber;
const int GetSystemUpdateResponseType::kUncachedContentPrefixURLFieldNumber;
const int GetSystemUpdateResponseType::kPcsPrefiURLFieldNumber;
const int GetSystemUpdateResponseType::kTitleVersionFieldNumber;
const int GetSystemUpdateResponseType::kUploadAuditDataFieldNumber;
const int GetSystemUpdateResponseType::kIsQAFieldNumber;
const int GetSystemUpdateResponseType::kIsAutoUpdateDisabledFieldNumber;
const int GetSystemUpdateResponseType::kInfraDownloadFieldNumber;
#endif  // !_MSC_VER

GetSystemUpdateResponseType::GetSystemUpdateResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemUpdateResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractResponseType*>(&::vplex::nus::AbstractResponseType::default_instance());
}

GetSystemUpdateResponseType::GetSystemUpdateResponseType(const GetSystemUpdateResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemUpdateResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  contentprefixurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uncachedcontentprefixurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pcsprefiurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uploadauditdata_ = 0;
  isqa_ = false;
  isautoupdatedisabled_ = false;
  infradownload_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemUpdateResponseType::~GetSystemUpdateResponseType() {
  SharedDtor();
}

void GetSystemUpdateResponseType::SharedDtor() {
  if (contentprefixurl_ != &::google::protobuf::internal::kEmptyString) {
    delete contentprefixurl_;
  }
  if (uncachedcontentprefixurl_ != &::google::protobuf::internal::kEmptyString) {
    delete uncachedcontentprefixurl_;
  }
  if (pcsprefiurl_ != &::google::protobuf::internal::kEmptyString) {
    delete pcsprefiurl_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemUpdateResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemUpdateResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemUpdateResponseType_descriptor_;
}

const GetSystemUpdateResponseType& GetSystemUpdateResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemUpdateResponseType* GetSystemUpdateResponseType::default_instance_ = NULL;

GetSystemUpdateResponseType* GetSystemUpdateResponseType::New() const {
  return new GetSystemUpdateResponseType;
}

void GetSystemUpdateResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
    }
    if (has_contentprefixurl()) {
      if (contentprefixurl_ != &::google::protobuf::internal::kEmptyString) {
        contentprefixurl_->clear();
      }
    }
    if (has_uncachedcontentprefixurl()) {
      if (uncachedcontentprefixurl_ != &::google::protobuf::internal::kEmptyString) {
        uncachedcontentprefixurl_->clear();
      }
    }
    if (has_pcsprefiurl()) {
      if (pcsprefiurl_ != &::google::protobuf::internal::kEmptyString) {
        pcsprefiurl_->clear();
      }
    }
    uploadauditdata_ = 0;
    isqa_ = false;
    isautoupdatedisabled_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    infradownload_ = false;
  }
  titleversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemUpdateResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContentPrefixURL;
        break;
      }
      
      // optional string ContentPrefixURL = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContentPrefixURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentprefixurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contentprefixurl().data(), this->contentprefixurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UncachedContentPrefixURL;
        break;
      }
      
      // optional string UncachedContentPrefixURL = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UncachedContentPrefixURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uncachedcontentprefixurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uncachedcontentprefixurl().data(), this->uncachedcontentprefixurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PcsPrefiURL;
        break;
      }
      
      // optional string PcsPrefiURL = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PcsPrefiURL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcsprefiurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pcsprefiurl().data(), this->pcsprefiurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TitleVersion;
        break;
      }
      
      // repeated .vplex.nus.TitleVersionType TitleVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titleversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TitleVersion;
        if (input->ExpectTag(48)) goto parse_UploadAuditData;
        break;
      }
      
      // required sint32 UploadAuditData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UploadAuditData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &uploadauditdata_)));
          set_has_uploadauditdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsQA;
        break;
      }
      
      // optional bool IsQA = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsQA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isqa_)));
          set_has_isqa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsAutoUpdateDisabled;
        break;
      }
      
      // optional bool IsAutoUpdateDisabled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAutoUpdateDisabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautoupdatedisabled_)));
          set_has_isautoupdatedisabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_InfraDownload;
        break;
      }
      
      // optional bool InfraDownload = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InfraDownload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infradownload_)));
          set_has_infradownload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemUpdateResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // optional string ContentPrefixURL = 2;
  if (has_contentprefixurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contentprefixurl().data(), this->contentprefixurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contentprefixurl(), output);
  }
  
  // optional string UncachedContentPrefixURL = 3;
  if (has_uncachedcontentprefixurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uncachedcontentprefixurl().data(), this->uncachedcontentprefixurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uncachedcontentprefixurl(), output);
  }
  
  // optional string PcsPrefiURL = 4;
  if (has_pcsprefiurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsprefiurl().data(), this->pcsprefiurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pcsprefiurl(), output);
  }
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 5;
  for (int i = 0; i < this->titleversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->titleversion(i), output);
  }
  
  // required sint32 UploadAuditData = 6;
  if (has_uploadauditdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->uploadauditdata(), output);
  }
  
  // optional bool IsQA = 7;
  if (has_isqa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isqa(), output);
  }
  
  // optional bool IsAutoUpdateDisabled = 8;
  if (has_isautoupdatedisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isautoupdatedisabled(), output);
  }
  
  // optional bool InfraDownload = 9;
  if (has_infradownload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->infradownload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemUpdateResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // optional string ContentPrefixURL = 2;
  if (has_contentprefixurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contentprefixurl().data(), this->contentprefixurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contentprefixurl(), target);
  }
  
  // optional string UncachedContentPrefixURL = 3;
  if (has_uncachedcontentprefixurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uncachedcontentprefixurl().data(), this->uncachedcontentprefixurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uncachedcontentprefixurl(), target);
  }
  
  // optional string PcsPrefiURL = 4;
  if (has_pcsprefiurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pcsprefiurl().data(), this->pcsprefiurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pcsprefiurl(), target);
  }
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 5;
  for (int i = 0; i < this->titleversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->titleversion(i), target);
  }
  
  // required sint32 UploadAuditData = 6;
  if (has_uploadauditdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->uploadauditdata(), target);
  }
  
  // optional bool IsQA = 7;
  if (has_isqa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isqa(), target);
  }
  
  // optional bool IsAutoUpdateDisabled = 8;
  if (has_isautoupdatedisabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isautoupdatedisabled(), target);
  }
  
  // optional bool InfraDownload = 9;
  if (has_infradownload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->infradownload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemUpdateResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // optional string ContentPrefixURL = 2;
    if (has_contentprefixurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentprefixurl());
    }
    
    // optional string UncachedContentPrefixURL = 3;
    if (has_uncachedcontentprefixurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uncachedcontentprefixurl());
    }
    
    // optional string PcsPrefiURL = 4;
    if (has_pcsprefiurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcsprefiurl());
    }
    
    // required sint32 UploadAuditData = 6;
    if (has_uploadauditdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->uploadauditdata());
    }
    
    // optional bool IsQA = 7;
    if (has_isqa()) {
      total_size += 1 + 1;
    }
    
    // optional bool IsAutoUpdateDisabled = 8;
    if (has_isautoupdatedisabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool InfraDownload = 9;
    if (has_infradownload()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .vplex.nus.TitleVersionType TitleVersion = 5;
  total_size += 1 * this->titleversion_size();
  for (int i = 0; i < this->titleversion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titleversion(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemUpdateResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemUpdateResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemUpdateResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemUpdateResponseType::MergeFrom(const GetSystemUpdateResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleversion_.MergeFrom(from.titleversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractResponseType::MergeFrom(from._inherited());
    }
    if (from.has_contentprefixurl()) {
      set_contentprefixurl(from.contentprefixurl());
    }
    if (from.has_uncachedcontentprefixurl()) {
      set_uncachedcontentprefixurl(from.uncachedcontentprefixurl());
    }
    if (from.has_pcsprefiurl()) {
      set_pcsprefiurl(from.pcsprefiurl());
    }
    if (from.has_uploadauditdata()) {
      set_uploadauditdata(from.uploadauditdata());
    }
    if (from.has_isqa()) {
      set_isqa(from.isqa());
    }
    if (from.has_isautoupdatedisabled()) {
      set_isautoupdatedisabled(from.isautoupdatedisabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_infradownload()) {
      set_infradownload(from.infradownload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemUpdateResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemUpdateResponseType::CopyFrom(const GetSystemUpdateResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemUpdateResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000021) != 0x00000021) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  for (int i = 0; i < titleversion_size(); i++) {
    if (!this->titleversion(i).IsInitialized()) return false;
  }
  return true;
}

void GetSystemUpdateResponseType::Swap(GetSystemUpdateResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    std::swap(contentprefixurl_, other->contentprefixurl_);
    std::swap(uncachedcontentprefixurl_, other->uncachedcontentprefixurl_);
    std::swap(pcsprefiurl_, other->pcsprefiurl_);
    titleversion_.Swap(&other->titleversion_);
    std::swap(uploadauditdata_, other->uploadauditdata_);
    std::swap(isqa_, other->isqa_);
    std::swap(isautoupdatedisabled_, other->isautoupdatedisabled_);
    std::swap(infradownload_, other->infradownload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemUpdateResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemUpdateResponseType_descriptor_;
  metadata.reflection = GetSystemUpdateResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemTMDRequestType::kInheritedFieldNumber;
const int GetSystemTMDRequestType::kTitleVersionFieldNumber;
#endif  // !_MSC_VER

GetSystemTMDRequestType::GetSystemTMDRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemTMDRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractRequestType*>(&::vplex::nus::AbstractRequestType::default_instance());
}

GetSystemTMDRequestType::GetSystemTMDRequestType(const GetSystemTMDRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemTMDRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemTMDRequestType::~GetSystemTMDRequestType() {
  SharedDtor();
}

void GetSystemTMDRequestType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemTMDRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemTMDRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemTMDRequestType_descriptor_;
}

const GetSystemTMDRequestType& GetSystemTMDRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemTMDRequestType* GetSystemTMDRequestType::default_instance_ = NULL;

GetSystemTMDRequestType* GetSystemTMDRequestType::New() const {
  return new GetSystemTMDRequestType;
}

void GetSystemTMDRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
    }
  }
  titleversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemTMDRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleVersion;
        break;
      }
      
      // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titleversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleVersion;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemTMDRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  for (int i = 0; i < this->titleversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titleversion(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemTMDRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  for (int i = 0; i < this->titleversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titleversion(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemTMDRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  // repeated .vplex.nus.TitleVersionType TitleVersion = 2;
  total_size += 1 * this->titleversion_size();
  for (int i = 0; i < this->titleversion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titleversion(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemTMDRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemTMDRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemTMDRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemTMDRequestType::MergeFrom(const GetSystemTMDRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleversion_.MergeFrom(from.titleversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractRequestType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemTMDRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemTMDRequestType::CopyFrom(const GetSystemTMDRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemTMDRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  for (int i = 0; i < titleversion_size(); i++) {
    if (!this->titleversion(i).IsInitialized()) return false;
  }
  return true;
}

void GetSystemTMDRequestType::Swap(GetSystemTMDRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    titleversion_.Swap(&other->titleversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemTMDRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemTMDRequestType_descriptor_;
  metadata.reflection = GetSystemTMDRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemTMDResponseType::kInheritedFieldNumber;
const int GetSystemTMDResponseType::kTMDFieldNumber;
#endif  // !_MSC_VER

GetSystemTMDResponseType::GetSystemTMDResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemTMDResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractResponseType*>(&::vplex::nus::AbstractResponseType::default_instance());
}

GetSystemTMDResponseType::GetSystemTMDResponseType(const GetSystemTMDResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemTMDResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemTMDResponseType::~GetSystemTMDResponseType() {
  SharedDtor();
}

void GetSystemTMDResponseType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemTMDResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemTMDResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemTMDResponseType_descriptor_;
}

const GetSystemTMDResponseType& GetSystemTMDResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemTMDResponseType* GetSystemTMDResponseType::default_instance_ = NULL;

GetSystemTMDResponseType* GetSystemTMDResponseType::New() const {
  return new GetSystemTMDResponseType;
}

void GetSystemTMDResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
    }
  }
  tmd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemTMDResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TMD;
        break;
      }
      
      // repeated bytes TMD = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TMD:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_tmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TMD;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemTMDResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated bytes TMD = 2;
  for (int i = 0; i < this->tmd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->tmd(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemTMDResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated bytes TMD = 2;
  for (int i = 0; i < this->tmd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->tmd(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemTMDResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  // repeated bytes TMD = 2;
  total_size += 1 * this->tmd_size();
  for (int i = 0; i < this->tmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->tmd(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemTMDResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemTMDResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemTMDResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemTMDResponseType::MergeFrom(const GetSystemTMDResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  tmd_.MergeFrom(from.tmd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractResponseType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemTMDResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemTMDResponseType::CopyFrom(const GetSystemTMDResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemTMDResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetSystemTMDResponseType::Swap(GetSystemTMDResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    tmd_.Swap(&other->tmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemTMDResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemTMDResponseType_descriptor_;
  metadata.reflection = GetSystemTMDResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemPersonalizedETicketRequestType::kInheritedFieldNumber;
const int GetSystemPersonalizedETicketRequestType::kTitleIdFieldNumber;
const int GetSystemPersonalizedETicketRequestType::kDeviceCertFieldNumber;
#endif  // !_MSC_VER

GetSystemPersonalizedETicketRequestType::GetSystemPersonalizedETicketRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemPersonalizedETicketRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractRequestType*>(&::vplex::nus::AbstractRequestType::default_instance());
}

GetSystemPersonalizedETicketRequestType::GetSystemPersonalizedETicketRequestType(const GetSystemPersonalizedETicketRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemPersonalizedETicketRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  devicecert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemPersonalizedETicketRequestType::~GetSystemPersonalizedETicketRequestType() {
  SharedDtor();
}

void GetSystemPersonalizedETicketRequestType::SharedDtor() {
  if (devicecert_ != &::google::protobuf::internal::kEmptyString) {
    delete devicecert_;
  }
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemPersonalizedETicketRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemPersonalizedETicketRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemPersonalizedETicketRequestType_descriptor_;
}

const GetSystemPersonalizedETicketRequestType& GetSystemPersonalizedETicketRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemPersonalizedETicketRequestType* GetSystemPersonalizedETicketRequestType::default_instance_ = NULL;

GetSystemPersonalizedETicketRequestType* GetSystemPersonalizedETicketRequestType::New() const {
  return new GetSystemPersonalizedETicketRequestType;
}

void GetSystemPersonalizedETicketRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
    }
    if (has_devicecert()) {
      if (devicecert_ != &::google::protobuf::internal::kEmptyString) {
        devicecert_->clear();
      }
    }
  }
  titleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemPersonalizedETicketRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleId;
        break;
      }
      
      // repeated string TitleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid(0).data(), this->titleid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleId;
        if (input->ExpectTag(26)) goto parse_DeviceCert;
        break;
      }
      
      // required bytes DeviceCert = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceCert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicecert()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemPersonalizedETicketRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated string TitleId = 2;
  for (int i = 0; i < this->titleid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->titleid(i).data(), this->titleid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->titleid(i), output);
  }
  
  // required bytes DeviceCert = 3;
  if (has_devicecert()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->devicecert(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemPersonalizedETicketRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated string TitleId = 2;
  for (int i = 0; i < this->titleid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid(i).data(), this->titleid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->titleid(i), target);
  }
  
  // required bytes DeviceCert = 3;
  if (has_devicecert()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->devicecert(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemPersonalizedETicketRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
    // required bytes DeviceCert = 3;
    if (has_devicecert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicecert());
    }
    
  }
  // repeated string TitleId = 2;
  total_size += 1 * this->titleid_size();
  for (int i = 0; i < this->titleid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->titleid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemPersonalizedETicketRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemPersonalizedETicketRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemPersonalizedETicketRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemPersonalizedETicketRequestType::MergeFrom(const GetSystemPersonalizedETicketRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleid_.MergeFrom(from.titleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractRequestType::MergeFrom(from._inherited());
    }
    if (from.has_devicecert()) {
      set_devicecert(from.devicecert());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemPersonalizedETicketRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemPersonalizedETicketRequestType::CopyFrom(const GetSystemPersonalizedETicketRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemPersonalizedETicketRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetSystemPersonalizedETicketRequestType::Swap(GetSystemPersonalizedETicketRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    titleid_.Swap(&other->titleid_);
    std::swap(devicecert_, other->devicecert_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemPersonalizedETicketRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemPersonalizedETicketRequestType_descriptor_;
  metadata.reflection = GetSystemPersonalizedETicketRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemPersonalizedETicketResponseType::kInheritedFieldNumber;
const int GetSystemPersonalizedETicketResponseType::kETicketFieldNumber;
const int GetSystemPersonalizedETicketResponseType::kCertsFieldNumber;
#endif  // !_MSC_VER

GetSystemPersonalizedETicketResponseType::GetSystemPersonalizedETicketResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemPersonalizedETicketResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractResponseType*>(&::vplex::nus::AbstractResponseType::default_instance());
}

GetSystemPersonalizedETicketResponseType::GetSystemPersonalizedETicketResponseType(const GetSystemPersonalizedETicketResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemPersonalizedETicketResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemPersonalizedETicketResponseType::~GetSystemPersonalizedETicketResponseType() {
  SharedDtor();
}

void GetSystemPersonalizedETicketResponseType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemPersonalizedETicketResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemPersonalizedETicketResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemPersonalizedETicketResponseType_descriptor_;
}

const GetSystemPersonalizedETicketResponseType& GetSystemPersonalizedETicketResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemPersonalizedETicketResponseType* GetSystemPersonalizedETicketResponseType::default_instance_ = NULL;

GetSystemPersonalizedETicketResponseType* GetSystemPersonalizedETicketResponseType::New() const {
  return new GetSystemPersonalizedETicketResponseType;
}

void GetSystemPersonalizedETicketResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
    }
  }
  eticket_.Clear();
  certs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemPersonalizedETicketResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ETicket;
        break;
      }
      
      // repeated bytes ETicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ETicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_eticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ETicket;
        if (input->ExpectTag(26)) goto parse_Certs;
        break;
      }
      
      // repeated bytes Certs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Certs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_certs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Certs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemPersonalizedETicketResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated bytes ETicket = 2;
  for (int i = 0; i < this->eticket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->eticket(i), output);
  }
  
  // repeated bytes Certs = 3;
  for (int i = 0; i < this->certs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->certs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemPersonalizedETicketResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated bytes ETicket = 2;
  for (int i = 0; i < this->eticket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->eticket(i), target);
  }
  
  // repeated bytes Certs = 3;
  for (int i = 0; i < this->certs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->certs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemPersonalizedETicketResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  // repeated bytes ETicket = 2;
  total_size += 1 * this->eticket_size();
  for (int i = 0; i < this->eticket_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->eticket(i));
  }
  
  // repeated bytes Certs = 3;
  total_size += 1 * this->certs_size();
  for (int i = 0; i < this->certs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->certs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemPersonalizedETicketResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemPersonalizedETicketResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemPersonalizedETicketResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemPersonalizedETicketResponseType::MergeFrom(const GetSystemPersonalizedETicketResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  eticket_.MergeFrom(from.eticket_);
  certs_.MergeFrom(from.certs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractResponseType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemPersonalizedETicketResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemPersonalizedETicketResponseType::CopyFrom(const GetSystemPersonalizedETicketResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemPersonalizedETicketResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetSystemPersonalizedETicketResponseType::Swap(GetSystemPersonalizedETicketResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    eticket_.Swap(&other->eticket_);
    certs_.Swap(&other->certs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemPersonalizedETicketResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemPersonalizedETicketResponseType_descriptor_;
  metadata.reflection = GetSystemPersonalizedETicketResponseType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemCommonETicketRequestType::kInheritedFieldNumber;
const int GetSystemCommonETicketRequestType::kTitleIdFieldNumber;
#endif  // !_MSC_VER

GetSystemCommonETicketRequestType::GetSystemCommonETicketRequestType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemCommonETicketRequestType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractRequestType*>(&::vplex::nus::AbstractRequestType::default_instance());
}

GetSystemCommonETicketRequestType::GetSystemCommonETicketRequestType(const GetSystemCommonETicketRequestType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemCommonETicketRequestType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemCommonETicketRequestType::~GetSystemCommonETicketRequestType() {
  SharedDtor();
}

void GetSystemCommonETicketRequestType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemCommonETicketRequestType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemCommonETicketRequestType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemCommonETicketRequestType_descriptor_;
}

const GetSystemCommonETicketRequestType& GetSystemCommonETicketRequestType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemCommonETicketRequestType* GetSystemCommonETicketRequestType::default_instance_ = NULL;

GetSystemCommonETicketRequestType* GetSystemCommonETicketRequestType::New() const {
  return new GetSystemCommonETicketRequestType;
}

void GetSystemCommonETicketRequestType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractRequestType::Clear();
    }
  }
  titleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemCommonETicketRequestType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractRequestType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleId;
        break;
      }
      
      // repeated string TitleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid(0).data(), this->titleid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TitleId;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemCommonETicketRequestType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated string TitleId = 2;
  for (int i = 0; i < this->titleid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->titleid(i).data(), this->titleid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->titleid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemCommonETicketRequestType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractRequestType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated string TitleId = 2;
  for (int i = 0; i < this->titleid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid(i).data(), this->titleid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->titleid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemCommonETicketRequestType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractRequestType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  // repeated string TitleId = 2;
  total_size += 1 * this->titleid_size();
  for (int i = 0; i < this->titleid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->titleid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemCommonETicketRequestType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemCommonETicketRequestType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemCommonETicketRequestType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemCommonETicketRequestType::MergeFrom(const GetSystemCommonETicketRequestType& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleid_.MergeFrom(from.titleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractRequestType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemCommonETicketRequestType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemCommonETicketRequestType::CopyFrom(const GetSystemCommonETicketRequestType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemCommonETicketRequestType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetSystemCommonETicketRequestType::Swap(GetSystemCommonETicketRequestType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    titleid_.Swap(&other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemCommonETicketRequestType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemCommonETicketRequestType_descriptor_;
  metadata.reflection = GetSystemCommonETicketRequestType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemCommonETicketResponseType::kInheritedFieldNumber;
const int GetSystemCommonETicketResponseType::kCommonETicketFieldNumber;
const int GetSystemCommonETicketResponseType::kCertsFieldNumber;
#endif  // !_MSC_VER

GetSystemCommonETicketResponseType::GetSystemCommonETicketResponseType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemCommonETicketResponseType::InitAsDefaultInstance() {
  _inherited_ = const_cast< ::vplex::nus::AbstractResponseType*>(&::vplex::nus::AbstractResponseType::default_instance());
}

GetSystemCommonETicketResponseType::GetSystemCommonETicketResponseType(const GetSystemCommonETicketResponseType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemCommonETicketResponseType::SharedCtor() {
  _cached_size_ = 0;
  _inherited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemCommonETicketResponseType::~GetSystemCommonETicketResponseType() {
  SharedDtor();
}

void GetSystemCommonETicketResponseType::SharedDtor() {
  if (this != default_instance_) {
    delete _inherited_;
  }
}

void GetSystemCommonETicketResponseType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemCommonETicketResponseType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemCommonETicketResponseType_descriptor_;
}

const GetSystemCommonETicketResponseType& GetSystemCommonETicketResponseType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fnus_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSystemCommonETicketResponseType* GetSystemCommonETicketResponseType::default_instance_ = NULL;

GetSystemCommonETicketResponseType* GetSystemCommonETicketResponseType::New() const {
  return new GetSystemCommonETicketResponseType;
}

void GetSystemCommonETicketResponseType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has__inherited()) {
      if (_inherited_ != NULL) _inherited_->::vplex::nus::AbstractResponseType::Clear();
    }
  }
  commoneticket_.Clear();
  certs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemCommonETicketResponseType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.nus.AbstractResponseType _inherited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable__inherited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CommonETicket;
        break;
      }
      
      // repeated bytes CommonETicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommonETicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_commoneticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CommonETicket;
        if (input->ExpectTag(26)) goto parse_Certs;
        break;
      }
      
      // repeated bytes Certs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Certs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_certs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Certs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemCommonETicketResponseType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_inherited(), output);
  }
  
  // repeated bytes CommonETicket = 2;
  for (int i = 0; i < this->commoneticket_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->commoneticket(i), output);
  }
  
  // repeated bytes Certs = 3;
  for (int i = 0; i < this->certs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->certs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemCommonETicketResponseType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.nus.AbstractResponseType _inherited = 1;
  if (has__inherited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->_inherited(), target);
  }
  
  // repeated bytes CommonETicket = 2;
  for (int i = 0; i < this->commoneticket_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->commoneticket(i), target);
  }
  
  // repeated bytes Certs = 3;
  for (int i = 0; i < this->certs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->certs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemCommonETicketResponseType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.nus.AbstractResponseType _inherited = 1;
    if (has__inherited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->_inherited());
    }
    
  }
  // repeated bytes CommonETicket = 2;
  total_size += 1 * this->commoneticket_size();
  for (int i = 0; i < this->commoneticket_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->commoneticket(i));
  }
  
  // repeated bytes Certs = 3;
  total_size += 1 * this->certs_size();
  for (int i = 0; i < this->certs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->certs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemCommonETicketResponseType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemCommonETicketResponseType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemCommonETicketResponseType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemCommonETicketResponseType::MergeFrom(const GetSystemCommonETicketResponseType& from) {
  GOOGLE_CHECK_NE(&from, this);
  commoneticket_.MergeFrom(from.commoneticket_);
  certs_.MergeFrom(from.certs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has__inherited()) {
      mutable__inherited()->::vplex::nus::AbstractResponseType::MergeFrom(from._inherited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemCommonETicketResponseType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemCommonETicketResponseType::CopyFrom(const GetSystemCommonETicketResponseType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemCommonETicketResponseType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has__inherited()) {
    if (!this->_inherited().IsInitialized()) return false;
  }
  return true;
}

void GetSystemCommonETicketResponseType::Swap(GetSystemCommonETicketResponseType* other) {
  if (other != this) {
    std::swap(_inherited_, other->_inherited_);
    commoneticket_.Swap(&other->commoneticket_);
    certs_.Swap(&other->certs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemCommonETicketResponseType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemCommonETicketResponseType_descriptor_;
  metadata.reflection = GetSystemCommonETicketResponseType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace nus
}  // namespace vplex

// @@protoc_insertion_point(global_scope)
