// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vplex_vs_directory_service_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace vsDirectory {

namespace {

const ::google::protobuf::Descriptor* APIVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  APIVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ETicketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ETicketData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Localization_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Localization_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncDirectory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncDirectory_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoredDataset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoredDataset_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageAccessPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageAccessPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageAccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageAccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceAccessTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAccessTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStorage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStorage_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatedDataset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatedDataset_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MssDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MssDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageUnitDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageUnitDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrsDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrsDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* BrsStorageUnitDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BrsStorageUnitDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackupStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackupStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSaveTicketsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSaveTicketsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSaveTicketsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSaveTicketsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSaveDataInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSaveDataInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSaveDataOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSaveDataOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOwnedTitlesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOwnedTitlesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOwnedTitlesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOwnedTitlesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitlesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitlesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitlesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitlesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitleDetailsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitleDetailsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTitleDetailsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTitleDetailsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttestationChallengeInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttestationChallengeInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttestationChallengeOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttestationChallengeOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthenticateDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthenticateDeviceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOnlineTitleTicketInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOnlineTitleTicketInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOnlineTitleTicketOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOnlineTitleTicketOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOfflineTitleTicketsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOfflineTitleTicketsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOfflineTitleTicketsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOfflineTitleTicketsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListOwnedDataSetsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListOwnedDataSetsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListOwnedDataSetsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListOwnedDataSetsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetDetailsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetDetailsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetDetailsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetDetailsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDataSetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDataSetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDataSetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDataSetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCameraDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCameraDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCameraDatasetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCameraDatasetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDataSetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDataSetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDataSetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDataSetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameDataSetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameDataSetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameDataSetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameDataSetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDataSetCacheInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDataSetCacheInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDataSetCacheOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDataSetCacheOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDeviceFromSubscriptionsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDeviceFromSubscriptionsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDeviceFromSubscriptionsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDeviceFromSubscriptionsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSubscriptionsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSubscriptionsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSubscriptionsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSubscriptionsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddSubscriptionsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddSubscriptionsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddSubscriptionsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddSubscriptionsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddUserDatasetSubscriptionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUserDatasetSubscriptionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddUserDatasetSubscriptionOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUserDatasetSubscriptionOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCameraSubscriptionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCameraSubscriptionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCameraSubscriptionOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCameraSubscriptionOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDatasetSubscriptionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDatasetSubscriptionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDatasetSubscriptionOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDatasetSubscriptionOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSubscriptionsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSubscriptionsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSubscriptionsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSubscriptionsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSubscriptionFilterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSubscriptionFilterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSubscriptionFilterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSubscriptionFilterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSubscriptionLimitsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSubscriptionLimitsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSubscriptionLimitsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSubscriptionLimitsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriptionDetailsForDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionDetailsForDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriptionDetailsForDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionDetailsForDeviceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCloudInfoInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCloudInfoInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCloudInfoOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCloudInfoOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscribedDatasetsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscribedDatasetsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscribedDatasetsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscribedDatasetsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriptionDetailsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionDetailsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSubscriptionDetailsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSubscriptionDetailsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkDeviceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkDeviceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDeviceNameInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDeviceNameInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDeviceNameOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDeviceNameOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDeviceInfoInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDeviceInfoInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDeviceInfoOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDeviceInfoOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeviceLinkStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeviceLinkStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeviceLinkStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeviceLinkStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeviceNameInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeviceNameInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDeviceNameOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDeviceNameOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLinkedDevicesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLinkedDevicesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLinkedDevicesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLinkedDevicesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLoginSessionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLoginSessionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLoginSessionOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLoginSessionOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePersonalStorageNodeInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePersonalStorageNodeInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatePersonalStorageNodeOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatePersonalStorageNodeOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAsyncNoticeServerInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAsyncNoticeServerInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAsyncNoticeServerOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAsyncNoticeServerOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStorageNodeConnectionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStorageNodeConnectionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStorageNodeConnectionOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStorageNodeConnectionOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStorageNodeFeaturesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStorageNodeFeaturesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStorageNodeFeaturesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStorageNodeFeaturesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPSNDatasetLocationInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPSNDatasetLocationInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPSNDatasetLocationOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPSNDatasetLocationOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePSNDatasetStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePSNDatasetStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePSNDatasetStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePSNDatasetStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddUserStorageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUserStorageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddUserStorageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddUserStorageOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteUserStorageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteUserStorageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteUserStorageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteUserStorageOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserStorageNameInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserStorageNameInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserStorageNameOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserStorageNameOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserStorageQuotaInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserStorageQuotaInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserStorageQuotaOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserStorageQuotaOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListUserStorageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListUserStorageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListUserStorageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListUserStorageOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserStorageAddressInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserStorageAddressInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStorageAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStorageAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserStorageAddressOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserStorageAddressOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignUserDatacenterStorageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignUserDatacenterStorageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssignUserDatacenterStorageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssignUserDatacenterStorageOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStorageUnitForDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStorageUnitForDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStorageUnitForDatasetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStorageUnitForDatasetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoredDatasetsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoredDatasetsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStoredDatasetsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStoredDatasetsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProxyConnectionForClusterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProxyConnectionForClusterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetProxyConnectionForClusterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetProxyConnectionForClusterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageToPSNInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageToPSNInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMessageToPSNOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMessageToPSNOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeStorageUnitForDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeStorageUnitForDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeStorageUnitForDatasetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeStorageUnitForDatasetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStorageClusterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStorageClusterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateStorageClusterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateStorageClusterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMssInstancesForClusterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMssInstancesForClusterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMssInstancesForClusterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMssInstancesForClusterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStorageUnitsForClusterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStorageUnitsForClusterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStorageUnitsForClusterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStorageUnitsForClusterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBrsInstancesForClusterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBrsInstancesForClusterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBrsInstancesForClusterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBrsInstancesForClusterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBrsStorageUnitsForClusterInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBrsStorageUnitsForClusterInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBrsStorageUnitsForClusterOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBrsStorageUnitsForClusterOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeStorageAssignmentsForDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeStorageAssignmentsForDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeStorageAssignmentsForDatasetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeStorageAssignmentsForDatasetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetBackupStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetBackupStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetBackupStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetBackupStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetArchiveStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetArchiveStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDatasetArchiveStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDatasetArchiveStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreDeviceEventInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreDeviceEventInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreDeviceEventOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreDeviceEventOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLinkedDatasetStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLinkedDatasetStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLinkedDatasetStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLinkedDatasetStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserQuotaStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserQuotaStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserQuotaStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserQuotaStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetsToBackupInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetsToBackupInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetsToBackupOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetsToBackupOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBRSHostNameInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBRSHostNameInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBRSHostNameOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBRSHostNameOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBackupStorageUnitsForBrsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBackupStorageUnitsForBrsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBackupStorageUnitsForBrsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBackupStorageUnitsForBrsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUpdatedDatasetsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUpdatedDatasetsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUpdatedDatasetsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUpdatedDatasetsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDatasetArchiveStorageDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDatasetArchiveStorageDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDatasetArchiveStorageDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDatasetArchiveStorageDeviceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDatasetArchiveStorageDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDatasetArchiveStorageDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveDatasetArchiveStorageDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveDatasetArchiveStorageDeviceOutput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DatasetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RouteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscriptionRole_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto() {
  protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vplex_vs_directory_service_types.proto");
  GOOGLE_CHECK(file != NULL);
  APIVersion_descriptor_ = file->message_type(0);
  static const int APIVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APIVersion, version_),
  };
  APIVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      APIVersion_descriptor_,
      APIVersion::default_instance_,
      APIVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APIVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(APIVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(APIVersion));
  Error_descriptor_ = file->message_type(1);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errordetail_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  SessionInfo_descriptor_ = file->message_type(2);
  static const int SessionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, sessionhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, serviceticket_),
  };
  SessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionInfo_descriptor_,
      SessionInfo::default_instance_,
      SessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionInfo));
  ETicketData_descriptor_ = file->message_type(3);
  static const int ETicketData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ETicketData, eticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ETicketData, certificate_),
  };
  ETicketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ETicketData_descriptor_,
      ETicketData::default_instance_,
      ETicketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ETicketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ETicketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ETicketData));
  Localization_descriptor_ = file->message_type(4);
  static const int Localization_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, region_),
  };
  Localization_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Localization_descriptor_,
      Localization::default_instance_,
      Localization_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Localization, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Localization));
  TitleData_descriptor_ = file->message_type(5);
  static const int TitleData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, detailhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, ticketversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, useonlineeticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, useofflineeticket_),
  };
  TitleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleData_descriptor_,
      TitleData::default_instance_,
      TitleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleData));
  TitleDetail_descriptor_ = file->message_type(6);
  static const int TitleDetail_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, titleversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, tmdurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, iconurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, imageurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, contentrating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, altcontentrating_),
  };
  TitleDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleDetail_descriptor_,
      TitleDetail::default_instance_,
      TitleDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleDetail));
  ContentDetail_descriptor_ = file->message_type(7);
  static const int ContentDetail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, contentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, contentlocation_),
  };
  ContentDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentDetail_descriptor_,
      ContentDetail::default_instance_,
      ContentDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentDetail));
  SaveData_descriptor_ = file->message_type(8);
  static const int SaveData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveData, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveData, savelocation_),
  };
  SaveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveData_descriptor_,
      SaveData::default_instance_,
      SaveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveData));
  TitleTicket_descriptor_ = file->message_type(9);
  static const int TitleTicket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleTicket, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleTicket, eticket_),
  };
  TitleTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleTicket_descriptor_,
      TitleTicket::default_instance_,
      TitleTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleTicket));
  Subscription_descriptor_ = file->message_type(10);
  static const int Subscription_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, deviceroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, datasetroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, uploadok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, downloadok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, uploaddeleteok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, downloaddeleteok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, datasetlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, createdfor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, maxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, maxfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, creationtime_),
  };
  Subscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Subscription_descriptor_,
      Subscription::default_instance_,
      Subscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Subscription));
  SyncDirectory_descriptor_ = file->message_type(11);
  static const int SyncDirectory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDirectory, localpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDirectory, serverpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDirectory, privateflag_),
  };
  SyncDirectory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncDirectory_descriptor_,
      SyncDirectory::default_instance_,
      SyncDirectory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDirectory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncDirectory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncDirectory));
  DatasetData_descriptor_ = file->message_type(12);
  static const int DatasetData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetData, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetData, detailhash_),
  };
  DatasetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetData_descriptor_,
      DatasetData::default_instance_,
      DatasetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetData));
  DatasetDetail_descriptor_ = file->message_type(13);
  static const int DatasetDetail_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, contenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, createdfor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, externalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, lastupdated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, storageclustername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, storageclusterhostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, storageclusterport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, datasetlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, sizeondisk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, datasettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, linkedto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, suspendedflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, deletedataafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, archivestoragedeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, displayname_),
  };
  DatasetDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetDetail_descriptor_,
      DatasetDetail::default_instance_,
      DatasetDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetDetail));
  StoredDataset_descriptor_ = file->message_type(14);
  static const int StoredDataset_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, datasettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, dataretentiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, secondarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, backupstorageid_),
  };
  StoredDataset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoredDataset_descriptor_,
      StoredDataset::default_instance_,
      StoredDataset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoredDataset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoredDataset));
  DeviceInfo_descriptor_ = file->message_type(15);
  static const int DeviceInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, deviceclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, isacer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, hascamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, isvirtdrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, ismediaserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, featuremediaservercapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, featurevirtdrivecapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, featureremotefileaccesscapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, featurefsdatasettypecapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, modelnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, buildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, featurevirtsynccapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, featuremystorageservercapable_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  StorageAccessPort_descriptor_ = file->message_type(16);
  static const int StorageAccessPort_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccessPort, porttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccessPort, port_),
  };
  StorageAccessPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageAccessPort_descriptor_,
      StorageAccessPort::default_instance_,
      StorageAccessPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccessPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccessPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageAccessPort));
  StorageAccess_descriptor_ = file->message_type(17);
  static const int StorageAccess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccess, routetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccess, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccess, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccess, ports_),
  };
  StorageAccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageAccess_descriptor_,
      StorageAccess::default_instance_,
      StorageAccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageAccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageAccess));
  DeviceAccessTicket_descriptor_ = file->message_type(18);
  static const int DeviceAccessTicket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAccessTicket, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAccessTicket, accessticket_),
  };
  DeviceAccessTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceAccessTicket_descriptor_,
      DeviceAccessTicket::default_instance_,
      DeviceAccessTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAccessTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAccessTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceAccessTicket));
  UserStorage_descriptor_ = file->message_type(19);
  static const int UserStorage_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, storagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, storagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, usagelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, isvirtdrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, ismediaserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, accesshandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, accessticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, storageaccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featuremediaserverenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featurevirtdriveenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featureremotefileaccessenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featurefsdatasettypeenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, devspecaccessticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featureclouddocenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featurevirtsyncenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, featuremystorageserverenabled_),
  };
  UserStorage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStorage_descriptor_,
      UserStorage::default_instance_,
      UserStorage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStorage));
  UpdatedDataset_descriptor_ = file->message_type(20);
  static const int UpdatedDataset_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, datasettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, lastupdated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, destdatasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, primaryversion_),
  };
  UpdatedDataset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatedDataset_descriptor_,
      UpdatedDataset::default_instance_,
      UpdatedDataset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatedDataset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatedDataset));
  DatasetFilter_descriptor_ = file->message_type(21);
  static const int DatasetFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetFilter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetFilter, value_),
  };
  DatasetFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetFilter_descriptor_,
      DatasetFilter::default_instance_,
      DatasetFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetFilter));
  MssDetail_descriptor_ = file->message_type(22);
  static const int MssDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MssDetail, mssid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MssDetail, mssname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MssDetail, inactiveflag_),
  };
  MssDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MssDetail_descriptor_,
      MssDetail::default_instance_,
      MssDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MssDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MssDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MssDetail));
  StorageUnitDetail_descriptor_ = file->message_type(23);
  static const int StorageUnitDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageUnitDetail, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageUnitDetail, mssids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageUnitDetail, inactiveflag_),
  };
  StorageUnitDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageUnitDetail_descriptor_,
      StorageUnitDetail::default_instance_,
      StorageUnitDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageUnitDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageUnitDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageUnitDetail));
  BrsDetail_descriptor_ = file->message_type(24);
  static const int BrsDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsDetail, brsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsDetail, brsname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsDetail, inactiveflag_),
  };
  BrsDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrsDetail_descriptor_,
      BrsDetail::default_instance_,
      BrsDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrsDetail));
  BrsStorageUnitDetail_descriptor_ = file->message_type(25);
  static const int BrsStorageUnitDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsStorageUnitDetail, brsstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsStorageUnitDetail, brsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsStorageUnitDetail, inactiveflag_),
  };
  BrsStorageUnitDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BrsStorageUnitDetail_descriptor_,
      BrsStorageUnitDetail::default_instance_,
      BrsStorageUnitDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsStorageUnitDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BrsStorageUnitDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BrsStorageUnitDetail));
  BackupStatus_descriptor_ = file->message_type(26);
  static const int BackupStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, lastbackuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, lastbackupversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, lastarchivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, lastarchiveversion_),
  };
  BackupStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackupStatus_descriptor_,
      BackupStatus::default_instance_,
      BackupStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackupStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackupStatus));
  GetSaveTicketsInput_descriptor_ = file->message_type(27);
  static const int GetSaveTicketsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsInput, certificate_),
  };
  GetSaveTicketsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSaveTicketsInput_descriptor_,
      GetSaveTicketsInput::default_instance_,
      GetSaveTicketsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSaveTicketsInput));
  GetSaveTicketsOutput_descriptor_ = file->message_type(28);
  static const int GetSaveTicketsOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsOutput, encryptionticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsOutput, signingticket_),
  };
  GetSaveTicketsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSaveTicketsOutput_descriptor_,
      GetSaveTicketsOutput::default_instance_,
      GetSaveTicketsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveTicketsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSaveTicketsOutput));
  GetSaveDataInput_descriptor_ = file->message_type(29);
  static const int GetSaveDataInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataInput, titleids_),
  };
  GetSaveDataInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSaveDataInput_descriptor_,
      GetSaveDataInput::default_instance_,
      GetSaveDataInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSaveDataInput));
  GetSaveDataOutput_descriptor_ = file->message_type(30);
  static const int GetSaveDataOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataOutput, data_),
  };
  GetSaveDataOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSaveDataOutput_descriptor_,
      GetSaveDataOutput::default_instance_,
      GetSaveDataOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSaveDataOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSaveDataOutput));
  GetOwnedTitlesInput_descriptor_ = file->message_type(31);
  static const int GetOwnedTitlesInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesInput, l10n_),
  };
  GetOwnedTitlesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOwnedTitlesInput_descriptor_,
      GetOwnedTitlesInput::default_instance_,
      GetOwnedTitlesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOwnedTitlesInput));
  GetOwnedTitlesOutput_descriptor_ = file->message_type(32);
  static const int GetOwnedTitlesOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesOutput, titledata_),
  };
  GetOwnedTitlesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOwnedTitlesOutput_descriptor_,
      GetOwnedTitlesOutput::default_instance_,
      GetOwnedTitlesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOwnedTitlesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOwnedTitlesOutput));
  GetTitlesInput_descriptor_ = file->message_type(33);
  static const int GetTitlesInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesInput, l10n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesInput, titleids_),
  };
  GetTitlesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTitlesInput_descriptor_,
      GetTitlesInput::default_instance_,
      GetTitlesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTitlesInput));
  GetTitlesOutput_descriptor_ = file->message_type(34);
  static const int GetTitlesOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesOutput, titledata_),
  };
  GetTitlesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTitlesOutput_descriptor_,
      GetTitlesOutput::default_instance_,
      GetTitlesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitlesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTitlesOutput));
  GetTitleDetailsInput_descriptor_ = file->message_type(35);
  static const int GetTitleDetailsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsInput, l10n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsInput, titleids_),
  };
  GetTitleDetailsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTitleDetailsInput_descriptor_,
      GetTitleDetailsInput::default_instance_,
      GetTitleDetailsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTitleDetailsInput));
  GetTitleDetailsOutput_descriptor_ = file->message_type(36);
  static const int GetTitleDetailsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsOutput, titledetails_),
  };
  GetTitleDetailsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTitleDetailsOutput_descriptor_,
      GetTitleDetailsOutput::default_instance_,
      GetTitleDetailsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTitleDetailsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTitleDetailsOutput));
  GetAttestationChallengeInput_descriptor_ = file->message_type(37);
  static const int GetAttestationChallengeInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeInput, deviceid_),
  };
  GetAttestationChallengeInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttestationChallengeInput_descriptor_,
      GetAttestationChallengeInput::default_instance_,
      GetAttestationChallengeInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttestationChallengeInput));
  GetAttestationChallengeOutput_descriptor_ = file->message_type(38);
  static const int GetAttestationChallengeOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeOutput, challenge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeOutput, challengetmd_),
  };
  GetAttestationChallengeOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttestationChallengeOutput_descriptor_,
      GetAttestationChallengeOutput::default_instance_,
      GetAttestationChallengeOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttestationChallengeOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttestationChallengeOutput));
  AuthenticateDeviceInput_descriptor_ = file->message_type(39);
  static const int AuthenticateDeviceInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceInput, challengeresponse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceInput, devicecertificate_),
  };
  AuthenticateDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthenticateDeviceInput_descriptor_,
      AuthenticateDeviceInput::default_instance_,
      AuthenticateDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthenticateDeviceInput));
  AuthenticateDeviceOutput_descriptor_ = file->message_type(40);
  static const int AuthenticateDeviceOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceOutput, error_),
  };
  AuthenticateDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthenticateDeviceOutput_descriptor_,
      AuthenticateDeviceOutput::default_instance_,
      AuthenticateDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthenticateDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthenticateDeviceOutput));
  GetOnlineTitleTicketInput_descriptor_ = file->message_type(41);
  static const int GetOnlineTitleTicketInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketInput, devicecertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketInput, titleid_),
  };
  GetOnlineTitleTicketInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOnlineTitleTicketInput_descriptor_,
      GetOnlineTitleTicketInput::default_instance_,
      GetOnlineTitleTicketInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOnlineTitleTicketInput));
  GetOnlineTitleTicketOutput_descriptor_ = file->message_type(42);
  static const int GetOnlineTitleTicketOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketOutput, eticket_),
  };
  GetOnlineTitleTicketOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOnlineTitleTicketOutput_descriptor_,
      GetOnlineTitleTicketOutput::default_instance_,
      GetOnlineTitleTicketOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineTitleTicketOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOnlineTitleTicketOutput));
  GetOfflineTitleTicketsInput_descriptor_ = file->message_type(43);
  static const int GetOfflineTitleTicketsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsInput, devicecertificate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsInput, titleids_),
  };
  GetOfflineTitleTicketsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOfflineTitleTicketsInput_descriptor_,
      GetOfflineTitleTicketsInput::default_instance_,
      GetOfflineTitleTicketsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOfflineTitleTicketsInput));
  GetOfflineTitleTicketsOutput_descriptor_ = file->message_type(44);
  static const int GetOfflineTitleTicketsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsOutput, titletickets_),
  };
  GetOfflineTitleTicketsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOfflineTitleTicketsOutput_descriptor_,
      GetOfflineTitleTicketsOutput::default_instance_,
      GetOfflineTitleTicketsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOfflineTitleTicketsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOfflineTitleTicketsOutput));
  ListOwnedDataSetsInput_descriptor_ = file->message_type(45);
  static const int ListOwnedDataSetsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsInput, version_),
  };
  ListOwnedDataSetsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListOwnedDataSetsInput_descriptor_,
      ListOwnedDataSetsInput::default_instance_,
      ListOwnedDataSetsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListOwnedDataSetsInput));
  ListOwnedDataSetsOutput_descriptor_ = file->message_type(46);
  static const int ListOwnedDataSetsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsOutput, datasets_),
  };
  ListOwnedDataSetsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListOwnedDataSetsOutput_descriptor_,
      ListOwnedDataSetsOutput::default_instance_,
      ListOwnedDataSetsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDataSetsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListOwnedDataSetsOutput));
  GetDatasetDetailsInput_descriptor_ = file->message_type(47);
  static const int GetDatasetDetailsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsInput, version_),
  };
  GetDatasetDetailsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetDetailsInput_descriptor_,
      GetDatasetDetailsInput::default_instance_,
      GetDatasetDetailsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetDetailsInput));
  GetDatasetDetailsOutput_descriptor_ = file->message_type(48);
  static const int GetDatasetDetailsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsOutput, datasetdetail_),
  };
  GetDatasetDetailsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetDetailsOutput_descriptor_,
      GetDatasetDetailsOutput::default_instance_,
      GetDatasetDetailsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDetailsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetDetailsOutput));
  AddDataSetInput_descriptor_ = file->message_type(49);
  static const int AddDataSetInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, datasettypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, version_),
  };
  AddDataSetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDataSetInput_descriptor_,
      AddDataSetInput::default_instance_,
      AddDataSetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDataSetInput));
  AddDataSetOutput_descriptor_ = file->message_type(50);
  static const int AddDataSetOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetOutput, datasetid_),
  };
  AddDataSetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDataSetOutput_descriptor_,
      AddDataSetOutput::default_instance_,
      AddDataSetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDataSetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDataSetOutput));
  AddCameraDatasetInput_descriptor_ = file->message_type(51);
  static const int AddCameraDatasetInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, createdfor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, version_),
  };
  AddCameraDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCameraDatasetInput_descriptor_,
      AddCameraDatasetInput::default_instance_,
      AddCameraDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCameraDatasetInput));
  AddCameraDatasetOutput_descriptor_ = file->message_type(52);
  static const int AddCameraDatasetOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetOutput, datasetid_),
  };
  AddCameraDatasetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCameraDatasetOutput_descriptor_,
      AddCameraDatasetOutput::default_instance_,
      AddCameraDatasetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraDatasetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCameraDatasetOutput));
  DeleteDataSetInput_descriptor_ = file->message_type(53);
  static const int DeleteDataSetInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, version_),
  };
  DeleteDataSetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteDataSetInput_descriptor_,
      DeleteDataSetInput::default_instance_,
      DeleteDataSetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteDataSetInput));
  DeleteDataSetOutput_descriptor_ = file->message_type(54);
  static const int DeleteDataSetOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetOutput, error_),
  };
  DeleteDataSetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteDataSetOutput_descriptor_,
      DeleteDataSetOutput::default_instance_,
      DeleteDataSetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDataSetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteDataSetOutput));
  RenameDataSetInput_descriptor_ = file->message_type(55);
  static const int RenameDataSetInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, datasetnamenew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, version_),
  };
  RenameDataSetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameDataSetInput_descriptor_,
      RenameDataSetInput::default_instance_,
      RenameDataSetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameDataSetInput));
  RenameDataSetOutput_descriptor_ = file->message_type(56);
  static const int RenameDataSetOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetOutput, error_),
  };
  RenameDataSetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameDataSetOutput_descriptor_,
      RenameDataSetOutput::default_instance_,
      RenameDataSetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDataSetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameDataSetOutput));
  SetDataSetCacheInput_descriptor_ = file->message_type(57);
  static const int SetDataSetCacheInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, cachedatasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, version_),
  };
  SetDataSetCacheInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDataSetCacheInput_descriptor_,
      SetDataSetCacheInput::default_instance_,
      SetDataSetCacheInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDataSetCacheInput));
  SetDataSetCacheOutput_descriptor_ = file->message_type(58);
  static const int SetDataSetCacheOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheOutput, error_),
  };
  SetDataSetCacheOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDataSetCacheOutput_descriptor_,
      SetDataSetCacheOutput::default_instance_,
      SetDataSetCacheOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDataSetCacheOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDataSetCacheOutput));
  RemoveDeviceFromSubscriptionsInput_descriptor_ = file->message_type(59);
  static const int RemoveDeviceFromSubscriptionsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsInput, version_),
  };
  RemoveDeviceFromSubscriptionsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDeviceFromSubscriptionsInput_descriptor_,
      RemoveDeviceFromSubscriptionsInput::default_instance_,
      RemoveDeviceFromSubscriptionsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDeviceFromSubscriptionsInput));
  RemoveDeviceFromSubscriptionsOutput_descriptor_ = file->message_type(60);
  static const int RemoveDeviceFromSubscriptionsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsOutput, error_),
  };
  RemoveDeviceFromSubscriptionsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDeviceFromSubscriptionsOutput_descriptor_,
      RemoveDeviceFromSubscriptionsOutput::default_instance_,
      RemoveDeviceFromSubscriptionsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDeviceFromSubscriptionsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDeviceFromSubscriptionsOutput));
  ListSubscriptionsInput_descriptor_ = file->message_type(61);
  static const int ListSubscriptionsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsInput, version_),
  };
  ListSubscriptionsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListSubscriptionsInput_descriptor_,
      ListSubscriptionsInput::default_instance_,
      ListSubscriptionsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListSubscriptionsInput));
  ListSubscriptionsOutput_descriptor_ = file->message_type(62);
  static const int ListSubscriptionsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsOutput, subscriptions_),
  };
  ListSubscriptionsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListSubscriptionsOutput_descriptor_,
      ListSubscriptionsOutput::default_instance_,
      ListSubscriptionsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSubscriptionsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListSubscriptionsOutput));
  AddSubscriptionsInput_descriptor_ = file->message_type(63);
  static const int AddSubscriptionsInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, version_),
  };
  AddSubscriptionsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddSubscriptionsInput_descriptor_,
      AddSubscriptionsInput::default_instance_,
      AddSubscriptionsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddSubscriptionsInput));
  AddSubscriptionsOutput_descriptor_ = file->message_type(64);
  static const int AddSubscriptionsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsOutput, error_),
  };
  AddSubscriptionsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddSubscriptionsOutput_descriptor_,
      AddSubscriptionsOutput::default_instance_,
      AddSubscriptionsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSubscriptionsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddSubscriptionsOutput));
  AddUserDatasetSubscriptionInput_descriptor_ = file->message_type(65);
  static const int AddUserDatasetSubscriptionInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, deviceroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, version_),
  };
  AddUserDatasetSubscriptionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddUserDatasetSubscriptionInput_descriptor_,
      AddUserDatasetSubscriptionInput::default_instance_,
      AddUserDatasetSubscriptionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddUserDatasetSubscriptionInput));
  AddUserDatasetSubscriptionOutput_descriptor_ = file->message_type(66);
  static const int AddUserDatasetSubscriptionOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionOutput, error_),
  };
  AddUserDatasetSubscriptionOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddUserDatasetSubscriptionOutput_descriptor_,
      AddUserDatasetSubscriptionOutput::default_instance_,
      AddUserDatasetSubscriptionOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserDatasetSubscriptionOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddUserDatasetSubscriptionOutput));
  AddCameraSubscriptionInput_descriptor_ = file->message_type(67);
  static const int AddCameraSubscriptionInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, deviceroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, version_),
  };
  AddCameraSubscriptionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCameraSubscriptionInput_descriptor_,
      AddCameraSubscriptionInput::default_instance_,
      AddCameraSubscriptionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCameraSubscriptionInput));
  AddCameraSubscriptionOutput_descriptor_ = file->message_type(68);
  static const int AddCameraSubscriptionOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionOutput, error_),
  };
  AddCameraSubscriptionOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCameraSubscriptionOutput_descriptor_,
      AddCameraSubscriptionOutput::default_instance_,
      AddCameraSubscriptionOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCameraSubscriptionOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCameraSubscriptionOutput));
  AddDatasetSubscriptionInput_descriptor_ = file->message_type(69);
  static const int AddDatasetSubscriptionInput_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, datasettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, deviceroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, maxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, maxfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, version_),
  };
  AddDatasetSubscriptionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDatasetSubscriptionInput_descriptor_,
      AddDatasetSubscriptionInput::default_instance_,
      AddDatasetSubscriptionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDatasetSubscriptionInput));
  AddDatasetSubscriptionOutput_descriptor_ = file->message_type(70);
  static const int AddDatasetSubscriptionOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionOutput, error_),
  };
  AddDatasetSubscriptionOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDatasetSubscriptionOutput_descriptor_,
      AddDatasetSubscriptionOutput::default_instance_,
      AddDatasetSubscriptionOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetSubscriptionOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDatasetSubscriptionOutput));
  DeleteSubscriptionsInput_descriptor_ = file->message_type(71);
  static const int DeleteSubscriptionsInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, datasetnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, datasetids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, version_),
  };
  DeleteSubscriptionsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSubscriptionsInput_descriptor_,
      DeleteSubscriptionsInput::default_instance_,
      DeleteSubscriptionsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSubscriptionsInput));
  DeleteSubscriptionsOutput_descriptor_ = file->message_type(72);
  static const int DeleteSubscriptionsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsOutput, error_),
  };
  DeleteSubscriptionsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSubscriptionsOutput_descriptor_,
      DeleteSubscriptionsOutput::default_instance_,
      DeleteSubscriptionsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSubscriptionsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSubscriptionsOutput));
  UpdateSubscriptionFilterInput_descriptor_ = file->message_type(73);
  static const int UpdateSubscriptionFilterInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, version_),
  };
  UpdateSubscriptionFilterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSubscriptionFilterInput_descriptor_,
      UpdateSubscriptionFilterInput::default_instance_,
      UpdateSubscriptionFilterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSubscriptionFilterInput));
  UpdateSubscriptionFilterOutput_descriptor_ = file->message_type(74);
  static const int UpdateSubscriptionFilterOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterOutput, error_),
  };
  UpdateSubscriptionFilterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSubscriptionFilterOutput_descriptor_,
      UpdateSubscriptionFilterOutput::default_instance_,
      UpdateSubscriptionFilterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionFilterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSubscriptionFilterOutput));
  UpdateSubscriptionLimitsInput_descriptor_ = file->message_type(75);
  static const int UpdateSubscriptionLimitsInput_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, datasetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, maxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, maxfiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, version_),
  };
  UpdateSubscriptionLimitsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSubscriptionLimitsInput_descriptor_,
      UpdateSubscriptionLimitsInput::default_instance_,
      UpdateSubscriptionLimitsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSubscriptionLimitsInput));
  UpdateSubscriptionLimitsOutput_descriptor_ = file->message_type(76);
  static const int UpdateSubscriptionLimitsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsOutput, error_),
  };
  UpdateSubscriptionLimitsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSubscriptionLimitsOutput_descriptor_,
      UpdateSubscriptionLimitsOutput::default_instance_,
      UpdateSubscriptionLimitsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSubscriptionLimitsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSubscriptionLimitsOutput));
  GetSubscriptionDetailsForDeviceInput_descriptor_ = file->message_type(77);
  static const int GetSubscriptionDetailsForDeviceInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceInput, version_),
  };
  GetSubscriptionDetailsForDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscriptionDetailsForDeviceInput_descriptor_,
      GetSubscriptionDetailsForDeviceInput::default_instance_,
      GetSubscriptionDetailsForDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriptionDetailsForDeviceInput));
  GetSubscriptionDetailsForDeviceOutput_descriptor_ = file->message_type(78);
  static const int GetSubscriptionDetailsForDeviceOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceOutput, subscriptions_),
  };
  GetSubscriptionDetailsForDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscriptionDetailsForDeviceOutput_descriptor_,
      GetSubscriptionDetailsForDeviceOutput::default_instance_,
      GetSubscriptionDetailsForDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsForDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriptionDetailsForDeviceOutput));
  GetCloudInfoInput_descriptor_ = file->message_type(79);
  static const int GetCloudInfoInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoInput, version_),
  };
  GetCloudInfoInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCloudInfoInput_descriptor_,
      GetCloudInfoInput::default_instance_,
      GetCloudInfoInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCloudInfoInput));
  GetCloudInfoOutput_descriptor_ = file->message_type(80);
  static const int GetCloudInfoOutput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, datasets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, storageassignments_),
  };
  GetCloudInfoOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCloudInfoOutput_descriptor_,
      GetCloudInfoOutput::default_instance_,
      GetCloudInfoOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCloudInfoOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCloudInfoOutput));
  GetSubscribedDatasetsInput_descriptor_ = file->message_type(81);
  static const int GetSubscribedDatasetsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsInput, l10n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsInput, version_),
  };
  GetSubscribedDatasetsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscribedDatasetsInput_descriptor_,
      GetSubscribedDatasetsInput::default_instance_,
      GetSubscribedDatasetsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscribedDatasetsInput));
  GetSubscribedDatasetsOutput_descriptor_ = file->message_type(82);
  static const int GetSubscribedDatasetsOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsOutput, titledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsOutput, datasetdata_),
  };
  GetSubscribedDatasetsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscribedDatasetsOutput_descriptor_,
      GetSubscribedDatasetsOutput::default_instance_,
      GetSubscribedDatasetsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscribedDatasetsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscribedDatasetsOutput));
  GetSubscriptionDetailsInput_descriptor_ = file->message_type(83);
  static const int GetSubscriptionDetailsInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, datasetids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, version_),
  };
  GetSubscriptionDetailsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscriptionDetailsInput_descriptor_,
      GetSubscriptionDetailsInput::default_instance_,
      GetSubscriptionDetailsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriptionDetailsInput));
  GetSubscriptionDetailsOutput_descriptor_ = file->message_type(84);
  static const int GetSubscriptionDetailsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsOutput, subscriptions_),
  };
  GetSubscriptionDetailsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSubscriptionDetailsOutput_descriptor_,
      GetSubscriptionDetailsOutput::default_instance_,
      GetSubscriptionDetailsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSubscriptionDetailsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSubscriptionDetailsOutput));
  LinkDeviceInput_descriptor_ = file->message_type(85);
  static const int LinkDeviceInput_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, deviceclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, isacer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, hascamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, modelnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, buildinfo_),
  };
  LinkDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkDeviceInput_descriptor_,
      LinkDeviceInput::default_instance_,
      LinkDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkDeviceInput));
  LinkDeviceOutput_descriptor_ = file->message_type(86);
  static const int LinkDeviceOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceOutput, error_),
  };
  LinkDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkDeviceOutput_descriptor_,
      LinkDeviceOutput::default_instance_,
      LinkDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkDeviceOutput));
  UnlinkDeviceInput_descriptor_ = file->message_type(87);
  static const int UnlinkDeviceInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, version_),
  };
  UnlinkDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlinkDeviceInput_descriptor_,
      UnlinkDeviceInput::default_instance_,
      UnlinkDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlinkDeviceInput));
  UnlinkDeviceOutput_descriptor_ = file->message_type(88);
  static const int UnlinkDeviceOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceOutput, error_),
  };
  UnlinkDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlinkDeviceOutput_descriptor_,
      UnlinkDeviceOutput::default_instance_,
      UnlinkDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlinkDeviceOutput));
  SetDeviceNameInput_descriptor_ = file->message_type(89);
  static const int SetDeviceNameInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, version_),
  };
  SetDeviceNameInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDeviceNameInput_descriptor_,
      SetDeviceNameInput::default_instance_,
      SetDeviceNameInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDeviceNameInput));
  SetDeviceNameOutput_descriptor_ = file->message_type(90);
  static const int SetDeviceNameOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameOutput, error_),
  };
  SetDeviceNameOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDeviceNameOutput_descriptor_,
      SetDeviceNameOutput::default_instance_,
      SetDeviceNameOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDeviceNameOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDeviceNameOutput));
  UpdateDeviceInfoInput_descriptor_ = file->message_type(91);
  static const int UpdateDeviceInfoInput_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, devicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, modelnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, buildinfo_),
  };
  UpdateDeviceInfoInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDeviceInfoInput_descriptor_,
      UpdateDeviceInfoInput::default_instance_,
      UpdateDeviceInfoInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDeviceInfoInput));
  UpdateDeviceInfoOutput_descriptor_ = file->message_type(92);
  static const int UpdateDeviceInfoOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoOutput, error_),
  };
  UpdateDeviceInfoOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDeviceInfoOutput_descriptor_,
      UpdateDeviceInfoOutput::default_instance_,
      UpdateDeviceInfoOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeviceInfoOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDeviceInfoOutput));
  GetDeviceLinkStateInput_descriptor_ = file->message_type(93);
  static const int GetDeviceLinkStateInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateInput, version_),
  };
  GetDeviceLinkStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeviceLinkStateInput_descriptor_,
      GetDeviceLinkStateInput::default_instance_,
      GetDeviceLinkStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeviceLinkStateInput));
  GetDeviceLinkStateOutput_descriptor_ = file->message_type(94);
  static const int GetDeviceLinkStateOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateOutput, linked_),
  };
  GetDeviceLinkStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeviceLinkStateOutput_descriptor_,
      GetDeviceLinkStateOutput::default_instance_,
      GetDeviceLinkStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceLinkStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeviceLinkStateOutput));
  GetDeviceNameInput_descriptor_ = file->message_type(95);
  static const int GetDeviceNameInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameInput, version_),
  };
  GetDeviceNameInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeviceNameInput_descriptor_,
      GetDeviceNameInput::default_instance_,
      GetDeviceNameInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeviceNameInput));
  GetDeviceNameOutput_descriptor_ = file->message_type(96);
  static const int GetDeviceNameOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameOutput, devicename_),
  };
  GetDeviceNameOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDeviceNameOutput_descriptor_,
      GetDeviceNameOutput::default_instance_,
      GetDeviceNameOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDeviceNameOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDeviceNameOutput));
  GetLinkedDevicesInput_descriptor_ = file->message_type(97);
  static const int GetLinkedDevicesInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesInput, version_),
  };
  GetLinkedDevicesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLinkedDevicesInput_descriptor_,
      GetLinkedDevicesInput::default_instance_,
      GetLinkedDevicesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLinkedDevicesInput));
  GetLinkedDevicesOutput_descriptor_ = file->message_type(98);
  static const int GetLinkedDevicesOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesOutput, devices_),
  };
  GetLinkedDevicesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLinkedDevicesOutput_descriptor_,
      GetLinkedDevicesOutput::default_instance_,
      GetLinkedDevicesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDevicesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLinkedDevicesOutput));
  GetLoginSessionInput_descriptor_ = file->message_type(99);
  static const int GetLoginSessionInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, sessionhandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, version_),
  };
  GetLoginSessionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLoginSessionInput_descriptor_,
      GetLoginSessionInput::default_instance_,
      GetLoginSessionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLoginSessionInput));
  GetLoginSessionOutput_descriptor_ = file->message_type(100);
  static const int GetLoginSessionOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionOutput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionOutput, serviceticket_),
  };
  GetLoginSessionOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLoginSessionOutput_descriptor_,
      GetLoginSessionOutput::default_instance_,
      GetLoginSessionOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLoginSessionOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLoginSessionOutput));
  CreatePersonalStorageNodeInput_descriptor_ = file->message_type(101);
  static const int CreatePersonalStorageNodeInput_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, clustername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, virtdrivecapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, mediaservercapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, featuremediaservercapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, featurevirtdrivecapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, featureremotefileaccesscapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, featurefsdatasettypecapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, featurevirtsynccapable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, featuremystorageservercapable_),
  };
  CreatePersonalStorageNodeInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePersonalStorageNodeInput_descriptor_,
      CreatePersonalStorageNodeInput::default_instance_,
      CreatePersonalStorageNodeInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePersonalStorageNodeInput));
  CreatePersonalStorageNodeOutput_descriptor_ = file->message_type(102);
  static const int CreatePersonalStorageNodeOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeOutput, error_),
  };
  CreatePersonalStorageNodeOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatePersonalStorageNodeOutput_descriptor_,
      CreatePersonalStorageNodeOutput::default_instance_,
      CreatePersonalStorageNodeOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatePersonalStorageNodeOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatePersonalStorageNodeOutput));
  GetAsyncNoticeServerInput_descriptor_ = file->message_type(103);
  static const int GetAsyncNoticeServerInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerInput, version_),
  };
  GetAsyncNoticeServerInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAsyncNoticeServerInput_descriptor_,
      GetAsyncNoticeServerInput::default_instance_,
      GetAsyncNoticeServerInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAsyncNoticeServerInput));
  GetAsyncNoticeServerOutput_descriptor_ = file->message_type(104);
  static const int GetAsyncNoticeServerOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerOutput, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerOutput, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerOutput, clusterid_),
  };
  GetAsyncNoticeServerOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAsyncNoticeServerOutput_descriptor_,
      GetAsyncNoticeServerOutput::default_instance_,
      GetAsyncNoticeServerOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAsyncNoticeServerOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAsyncNoticeServerOutput));
  UpdateStorageNodeConnectionInput_descriptor_ = file->message_type(105);
  static const int UpdateStorageNodeConnectionInput_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, reportedname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, reportedport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, reportedhttpport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, proxyclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, proxyconnectioncookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, reportedclearfiport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, reportedclearfisecureport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, accesshandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, accessticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, accesstickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, version_),
  };
  UpdateStorageNodeConnectionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStorageNodeConnectionInput_descriptor_,
      UpdateStorageNodeConnectionInput::default_instance_,
      UpdateStorageNodeConnectionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStorageNodeConnectionInput));
  UpdateStorageNodeConnectionOutput_descriptor_ = file->message_type(106);
  static const int UpdateStorageNodeConnectionOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionOutput, error_),
  };
  UpdateStorageNodeConnectionOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStorageNodeConnectionOutput_descriptor_,
      UpdateStorageNodeConnectionOutput::default_instance_,
      UpdateStorageNodeConnectionOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeConnectionOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStorageNodeConnectionOutput));
  UpdateStorageNodeFeaturesInput_descriptor_ = file->message_type(107);
  static const int UpdateStorageNodeFeaturesInput_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, isvirtdrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, ismediaserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, featuremediaserverenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, featurevirtdriveenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, featureremotefileaccessenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, featurefsdatasettypeenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, featurevirtsyncenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, featuremystorageserverenabled_),
  };
  UpdateStorageNodeFeaturesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStorageNodeFeaturesInput_descriptor_,
      UpdateStorageNodeFeaturesInput::default_instance_,
      UpdateStorageNodeFeaturesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStorageNodeFeaturesInput));
  UpdateStorageNodeFeaturesOutput_descriptor_ = file->message_type(108);
  static const int UpdateStorageNodeFeaturesOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesOutput, error_),
  };
  UpdateStorageNodeFeaturesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStorageNodeFeaturesOutput_descriptor_,
      UpdateStorageNodeFeaturesOutput::default_instance_,
      UpdateStorageNodeFeaturesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeFeaturesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStorageNodeFeaturesOutput));
  GetPSNDatasetLocationInput_descriptor_ = file->message_type(109);
  static const int GetPSNDatasetLocationInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, datasetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, version_),
  };
  GetPSNDatasetLocationInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPSNDatasetLocationInput_descriptor_,
      GetPSNDatasetLocationInput::default_instance_,
      GetPSNDatasetLocationInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPSNDatasetLocationInput));
  GetPSNDatasetLocationOutput_descriptor_ = file->message_type(110);
  static const int GetPSNDatasetLocationOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationOutput, storageclusterid_),
  };
  GetPSNDatasetLocationOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPSNDatasetLocationOutput_descriptor_,
      GetPSNDatasetLocationOutput::default_instance_,
      GetPSNDatasetLocationOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPSNDatasetLocationOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPSNDatasetLocationOutput));
  UpdatePSNDatasetStatusInput_descriptor_ = file->message_type(111);
  static const int UpdatePSNDatasetStatusInput_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, datasetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, datasetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, datasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, version_),
  };
  UpdatePSNDatasetStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePSNDatasetStatusInput_descriptor_,
      UpdatePSNDatasetStatusInput::default_instance_,
      UpdatePSNDatasetStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePSNDatasetStatusInput));
  UpdatePSNDatasetStatusOutput_descriptor_ = file->message_type(112);
  static const int UpdatePSNDatasetStatusOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusOutput, error_),
  };
  UpdatePSNDatasetStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePSNDatasetStatusOutput_descriptor_,
      UpdatePSNDatasetStatusOutput::default_instance_,
      UpdatePSNDatasetStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePSNDatasetStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePSNDatasetStatusOutput));
  AddUserStorageInput_descriptor_ = file->message_type(113);
  static const int AddUserStorageInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, storagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, usagelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, version_),
  };
  AddUserStorageInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddUserStorageInput_descriptor_,
      AddUserStorageInput::default_instance_,
      AddUserStorageInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddUserStorageInput));
  AddUserStorageOutput_descriptor_ = file->message_type(114);
  static const int AddUserStorageOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageOutput, error_),
  };
  AddUserStorageOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddUserStorageOutput_descriptor_,
      AddUserStorageOutput::default_instance_,
      AddUserStorageOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddUserStorageOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddUserStorageOutput));
  DeleteUserStorageInput_descriptor_ = file->message_type(115);
  static const int DeleteUserStorageInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageInput, version_),
  };
  DeleteUserStorageInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteUserStorageInput_descriptor_,
      DeleteUserStorageInput::default_instance_,
      DeleteUserStorageInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteUserStorageInput));
  DeleteUserStorageOutput_descriptor_ = file->message_type(116);
  static const int DeleteUserStorageOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageOutput, error_),
  };
  DeleteUserStorageOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteUserStorageOutput_descriptor_,
      DeleteUserStorageOutput::default_instance_,
      DeleteUserStorageOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteUserStorageOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteUserStorageOutput));
  ChangeUserStorageNameInput_descriptor_ = file->message_type(117);
  static const int ChangeUserStorageNameInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, newstoragename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, version_),
  };
  ChangeUserStorageNameInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserStorageNameInput_descriptor_,
      ChangeUserStorageNameInput::default_instance_,
      ChangeUserStorageNameInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserStorageNameInput));
  ChangeUserStorageNameOutput_descriptor_ = file->message_type(118);
  static const int ChangeUserStorageNameOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameOutput, error_),
  };
  ChangeUserStorageNameOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserStorageNameOutput_descriptor_,
      ChangeUserStorageNameOutput::default_instance_,
      ChangeUserStorageNameOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageNameOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserStorageNameOutput));
  ChangeUserStorageQuotaInput_descriptor_ = file->message_type(119);
  static const int ChangeUserStorageQuotaInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, newlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, version_),
  };
  ChangeUserStorageQuotaInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserStorageQuotaInput_descriptor_,
      ChangeUserStorageQuotaInput::default_instance_,
      ChangeUserStorageQuotaInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserStorageQuotaInput));
  ChangeUserStorageQuotaOutput_descriptor_ = file->message_type(120);
  static const int ChangeUserStorageQuotaOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaOutput, error_),
  };
  ChangeUserStorageQuotaOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserStorageQuotaOutput_descriptor_,
      ChangeUserStorageQuotaOutput::default_instance_,
      ChangeUserStorageQuotaOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStorageQuotaOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserStorageQuotaOutput));
  ListUserStorageInput_descriptor_ = file->message_type(121);
  static const int ListUserStorageInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, version_),
  };
  ListUserStorageInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListUserStorageInput_descriptor_,
      ListUserStorageInput::default_instance_,
      ListUserStorageInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListUserStorageInput));
  ListUserStorageOutput_descriptor_ = file->message_type(122);
  static const int ListUserStorageOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, storageassignments_),
  };
  ListUserStorageOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListUserStorageOutput_descriptor_,
      ListUserStorageOutput::default_instance_,
      ListUserStorageOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListUserStorageOutput));
  GetUserStorageAddressInput_descriptor_ = file->message_type(123);
  static const int GetUserStorageAddressInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressInput, version_),
  };
  GetUserStorageAddressInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserStorageAddressInput_descriptor_,
      GetUserStorageAddressInput::default_instance_,
      GetUserStorageAddressInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserStorageAddressInput));
  UserStorageAddress_descriptor_ = file->message_type(124);
  static const int UserStorageAddress_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, direct_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, direct_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, proxy_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, proxy_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, internal_direct_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, direct_secure_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, access_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, access_ticket_),
  };
  UserStorageAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStorageAddress_descriptor_,
      UserStorageAddress::default_instance_,
      UserStorageAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStorageAddress));
  GetUserStorageAddressOutput_descriptor_ = file->message_type(125);
  static const int GetUserStorageAddressOutput_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, directaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, directport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, proxyaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, proxyport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, internaldirectaddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, directsecureport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, accesshandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, accessticket_),
  };
  GetUserStorageAddressOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserStorageAddressOutput_descriptor_,
      GetUserStorageAddressOutput::default_instance_,
      GetUserStorageAddressOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserStorageAddressOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserStorageAddressOutput));
  AssignUserDatacenterStorageInput_descriptor_ = file->message_type(126);
  static const int AssignUserDatacenterStorageInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, usagelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, secondarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, version_),
  };
  AssignUserDatacenterStorageInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignUserDatacenterStorageInput_descriptor_,
      AssignUserDatacenterStorageInput::default_instance_,
      AssignUserDatacenterStorageInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignUserDatacenterStorageInput));
  AssignUserDatacenterStorageOutput_descriptor_ = file->message_type(127);
  static const int AssignUserDatacenterStorageOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageOutput, storageassignment_),
  };
  AssignUserDatacenterStorageOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssignUserDatacenterStorageOutput_descriptor_,
      AssignUserDatacenterStorageOutput::default_instance_,
      AssignUserDatacenterStorageOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssignUserDatacenterStorageOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssignUserDatacenterStorageOutput));
  GetStorageUnitForDatasetInput_descriptor_ = file->message_type(128);
  static const int GetStorageUnitForDatasetInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetInput, version_),
  };
  GetStorageUnitForDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStorageUnitForDatasetInput_descriptor_,
      GetStorageUnitForDatasetInput::default_instance_,
      GetStorageUnitForDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStorageUnitForDatasetInput));
  GetStorageUnitForDatasetOutput_descriptor_ = file->message_type(129);
  static const int GetStorageUnitForDatasetOutput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, storageclusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, secondarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, backupstorageid_),
  };
  GetStorageUnitForDatasetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStorageUnitForDatasetOutput_descriptor_,
      GetStorageUnitForDatasetOutput::default_instance_,
      GetStorageUnitForDatasetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitForDatasetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStorageUnitForDatasetOutput));
  GetStoredDatasetsInput_descriptor_ = file->message_type(130);
  static const int GetStoredDatasetsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsInput, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsInput, version_),
  };
  GetStoredDatasetsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoredDatasetsInput_descriptor_,
      GetStoredDatasetsInput::default_instance_,
      GetStoredDatasetsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoredDatasetsInput));
  GetStoredDatasetsOutput_descriptor_ = file->message_type(131);
  static const int GetStoredDatasetsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsOutput, datasets_),
  };
  GetStoredDatasetsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStoredDatasetsOutput_descriptor_,
      GetStoredDatasetsOutput::default_instance_,
      GetStoredDatasetsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStoredDatasetsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStoredDatasetsOutput));
  GetProxyConnectionForClusterInput_descriptor_ = file->message_type(132);
  static const int GetProxyConnectionForClusterInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterInput, version_),
  };
  GetProxyConnectionForClusterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProxyConnectionForClusterInput_descriptor_,
      GetProxyConnectionForClusterInput::default_instance_,
      GetProxyConnectionForClusterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProxyConnectionForClusterInput));
  GetProxyConnectionForClusterOutput_descriptor_ = file->message_type(133);
  static const int GetProxyConnectionForClusterOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterOutput, cookie_),
  };
  GetProxyConnectionForClusterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetProxyConnectionForClusterOutput_descriptor_,
      GetProxyConnectionForClusterOutput::default_instance_,
      GetProxyConnectionForClusterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetProxyConnectionForClusterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetProxyConnectionForClusterOutput));
  SendMessageToPSNInput_descriptor_ = file->message_type(134);
  static const int SendMessageToPSNInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNInput, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNInput, version_),
  };
  SendMessageToPSNInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageToPSNInput_descriptor_,
      SendMessageToPSNInput::default_instance_,
      SendMessageToPSNInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageToPSNInput));
  SendMessageToPSNOutput_descriptor_ = file->message_type(135);
  static const int SendMessageToPSNOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNOutput, error_),
  };
  SendMessageToPSNOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMessageToPSNOutput_descriptor_,
      SendMessageToPSNOutput::default_instance_,
      SendMessageToPSNOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMessageToPSNOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMessageToPSNOutput));
  ChangeStorageUnitForDatasetInput_descriptor_ = file->message_type(136);
  static const int ChangeStorageUnitForDatasetInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, currentstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, newstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, version_),
  };
  ChangeStorageUnitForDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeStorageUnitForDatasetInput_descriptor_,
      ChangeStorageUnitForDatasetInput::default_instance_,
      ChangeStorageUnitForDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeStorageUnitForDatasetInput));
  ChangeStorageUnitForDatasetOutput_descriptor_ = file->message_type(137);
  static const int ChangeStorageUnitForDatasetOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetOutput, storageid_),
  };
  ChangeStorageUnitForDatasetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeStorageUnitForDatasetOutput_descriptor_,
      ChangeStorageUnitForDatasetOutput::default_instance_,
      ChangeStorageUnitForDatasetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageUnitForDatasetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeStorageUnitForDatasetOutput));
  CreateStorageClusterInput_descriptor_ = file->message_type(138);
  static const int CreateStorageClusterInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, clustername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, clustertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, version_),
  };
  CreateStorageClusterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStorageClusterInput_descriptor_,
      CreateStorageClusterInput::default_instance_,
      CreateStorageClusterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStorageClusterInput));
  CreateStorageClusterOutput_descriptor_ = file->message_type(139);
  static const int CreateStorageClusterOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterOutput, error_),
  };
  CreateStorageClusterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateStorageClusterOutput_descriptor_,
      CreateStorageClusterOutput::default_instance_,
      CreateStorageClusterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStorageClusterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateStorageClusterOutput));
  GetMssInstancesForClusterInput_descriptor_ = file->message_type(140);
  static const int GetMssInstancesForClusterInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterInput, version_),
  };
  GetMssInstancesForClusterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMssInstancesForClusterInput_descriptor_,
      GetMssInstancesForClusterInput::default_instance_,
      GetMssInstancesForClusterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMssInstancesForClusterInput));
  GetMssInstancesForClusterOutput_descriptor_ = file->message_type(141);
  static const int GetMssInstancesForClusterOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterOutput, mssinstances_),
  };
  GetMssInstancesForClusterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMssInstancesForClusterOutput_descriptor_,
      GetMssInstancesForClusterOutput::default_instance_,
      GetMssInstancesForClusterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMssInstancesForClusterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMssInstancesForClusterOutput));
  GetStorageUnitsForClusterInput_descriptor_ = file->message_type(142);
  static const int GetStorageUnitsForClusterInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterInput, version_),
  };
  GetStorageUnitsForClusterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStorageUnitsForClusterInput_descriptor_,
      GetStorageUnitsForClusterInput::default_instance_,
      GetStorageUnitsForClusterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStorageUnitsForClusterInput));
  GetStorageUnitsForClusterOutput_descriptor_ = file->message_type(143);
  static const int GetStorageUnitsForClusterOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterOutput, storageunits_),
  };
  GetStorageUnitsForClusterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStorageUnitsForClusterOutput_descriptor_,
      GetStorageUnitsForClusterOutput::default_instance_,
      GetStorageUnitsForClusterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStorageUnitsForClusterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStorageUnitsForClusterOutput));
  GetBrsInstancesForClusterInput_descriptor_ = file->message_type(144);
  static const int GetBrsInstancesForClusterInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterInput, version_),
  };
  GetBrsInstancesForClusterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBrsInstancesForClusterInput_descriptor_,
      GetBrsInstancesForClusterInput::default_instance_,
      GetBrsInstancesForClusterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBrsInstancesForClusterInput));
  GetBrsInstancesForClusterOutput_descriptor_ = file->message_type(145);
  static const int GetBrsInstancesForClusterOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterOutput, brsinstances_),
  };
  GetBrsInstancesForClusterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBrsInstancesForClusterOutput_descriptor_,
      GetBrsInstancesForClusterOutput::default_instance_,
      GetBrsInstancesForClusterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsInstancesForClusterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBrsInstancesForClusterOutput));
  GetBrsStorageUnitsForClusterInput_descriptor_ = file->message_type(146);
  static const int GetBrsStorageUnitsForClusterInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterInput, version_),
  };
  GetBrsStorageUnitsForClusterInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBrsStorageUnitsForClusterInput_descriptor_,
      GetBrsStorageUnitsForClusterInput::default_instance_,
      GetBrsStorageUnitsForClusterInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBrsStorageUnitsForClusterInput));
  GetBrsStorageUnitsForClusterOutput_descriptor_ = file->message_type(147);
  static const int GetBrsStorageUnitsForClusterOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterOutput, brsstorageunits_),
  };
  GetBrsStorageUnitsForClusterOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBrsStorageUnitsForClusterOutput_descriptor_,
      GetBrsStorageUnitsForClusterOutput::default_instance_,
      GetBrsStorageUnitsForClusterOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBrsStorageUnitsForClusterOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBrsStorageUnitsForClusterOutput));
  ChangeStorageAssignmentsForDatasetInput_descriptor_ = file->message_type(148);
  static const int ChangeStorageAssignmentsForDatasetInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, secondarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, version_),
  };
  ChangeStorageAssignmentsForDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeStorageAssignmentsForDatasetInput_descriptor_,
      ChangeStorageAssignmentsForDatasetInput::default_instance_,
      ChangeStorageAssignmentsForDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeStorageAssignmentsForDatasetInput));
  ChangeStorageAssignmentsForDatasetOutput_descriptor_ = file->message_type(149);
  static const int ChangeStorageAssignmentsForDatasetOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetOutput, error_),
  };
  ChangeStorageAssignmentsForDatasetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeStorageAssignmentsForDatasetOutput_descriptor_,
      ChangeStorageAssignmentsForDatasetOutput::default_instance_,
      ChangeStorageAssignmentsForDatasetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeStorageAssignmentsForDatasetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeStorageAssignmentsForDatasetOutput));
  UpdateDatasetStatusInput_descriptor_ = file->message_type(150);
  static const int UpdateDatasetStatusInput_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, datasetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, datasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, ansnotificationoff_),
  };
  UpdateDatasetStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDatasetStatusInput_descriptor_,
      UpdateDatasetStatusInput::default_instance_,
      UpdateDatasetStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDatasetStatusInput));
  UpdateDatasetStatusOutput_descriptor_ = file->message_type(151);
  static const int UpdateDatasetStatusOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusOutput, error_),
  };
  UpdateDatasetStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDatasetStatusOutput_descriptor_,
      UpdateDatasetStatusOutput::default_instance_,
      UpdateDatasetStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDatasetStatusOutput));
  UpdateDatasetBackupStatusInput_descriptor_ = file->message_type(152);
  static const int UpdateDatasetBackupStatusInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, datasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, version_),
  };
  UpdateDatasetBackupStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDatasetBackupStatusInput_descriptor_,
      UpdateDatasetBackupStatusInput::default_instance_,
      UpdateDatasetBackupStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDatasetBackupStatusInput));
  UpdateDatasetBackupStatusOutput_descriptor_ = file->message_type(153);
  static const int UpdateDatasetBackupStatusOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusOutput, error_),
  };
  UpdateDatasetBackupStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDatasetBackupStatusOutput_descriptor_,
      UpdateDatasetBackupStatusOutput::default_instance_,
      UpdateDatasetBackupStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetBackupStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDatasetBackupStatusOutput));
  UpdateDatasetArchiveStatusInput_descriptor_ = file->message_type(154);
  static const int UpdateDatasetArchiveStatusInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, datasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, version_),
  };
  UpdateDatasetArchiveStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDatasetArchiveStatusInput_descriptor_,
      UpdateDatasetArchiveStatusInput::default_instance_,
      UpdateDatasetArchiveStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDatasetArchiveStatusInput));
  UpdateDatasetArchiveStatusOutput_descriptor_ = file->message_type(155);
  static const int UpdateDatasetArchiveStatusOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusOutput, error_),
  };
  UpdateDatasetArchiveStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDatasetArchiveStatusOutput_descriptor_,
      UpdateDatasetArchiveStatusOutput::default_instance_,
      UpdateDatasetArchiveStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDatasetArchiveStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDatasetArchiveStatusOutput));
  GetDatasetStatusInput_descriptor_ = file->message_type(156);
  static const int GetDatasetStatusInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusInput, version_),
  };
  GetDatasetStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetStatusInput_descriptor_,
      GetDatasetStatusInput::default_instance_,
      GetDatasetStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetStatusInput));
  GetDatasetStatusOutput_descriptor_ = file->message_type(157);
  static const int GetDatasetStatusOutput_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, primarydatasetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, primarydatasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, secondarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, secondarydatasetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, secondarydatasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, datasettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, deletedataafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, backupdatasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, archivedatasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, suspendedflag_),
  };
  GetDatasetStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetStatusOutput_descriptor_,
      GetDatasetStatusOutput::default_instance_,
      GetDatasetStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetStatusOutput));
  StoreDeviceEventInput_descriptor_ = file->message_type(158);
  static const int StoreDeviceEventInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, eventinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, version_),
  };
  StoreDeviceEventInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreDeviceEventInput_descriptor_,
      StoreDeviceEventInput::default_instance_,
      StoreDeviceEventInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreDeviceEventInput));
  StoreDeviceEventOutput_descriptor_ = file->message_type(159);
  static const int StoreDeviceEventOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventOutput, successcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventOutput, errorcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventOutput, nextreporttime_),
  };
  StoreDeviceEventOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreDeviceEventOutput_descriptor_,
      StoreDeviceEventOutput::default_instance_,
      StoreDeviceEventOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreDeviceEventOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreDeviceEventOutput));
  EventInfo_descriptor_ = file->message_type(160);
  static const int EventInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, eventcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, limitreached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, eventinfo_),
  };
  EventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventInfo_descriptor_,
      EventInfo::default_instance_,
      EventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventInfo));
  GetLinkedDatasetStatusInput_descriptor_ = file->message_type(161);
  static const int GetLinkedDatasetStatusInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusInput, version_),
  };
  GetLinkedDatasetStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLinkedDatasetStatusInput_descriptor_,
      GetLinkedDatasetStatusInput::default_instance_,
      GetLinkedDatasetStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLinkedDatasetStatusInput));
  GetLinkedDatasetStatusOutput_descriptor_ = file->message_type(162);
  static const int GetLinkedDatasetStatusOutput_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, linkeddatasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, primarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, primarydatasetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, primarydatasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, secondarystorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, secondarydatasetsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, secondarydatasetversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, datasettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, suspendedflag_),
  };
  GetLinkedDatasetStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLinkedDatasetStatusOutput_descriptor_,
      GetLinkedDatasetStatusOutput::default_instance_,
      GetLinkedDatasetStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkedDatasetStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLinkedDatasetStatusOutput));
  GetUserQuotaStatusInput_descriptor_ = file->message_type(163);
  static const int GetUserQuotaStatusInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusInput, version_),
  };
  GetUserQuotaStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserQuotaStatusInput_descriptor_,
      GetUserQuotaStatusInput::default_instance_,
      GetUserQuotaStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserQuotaStatusInput));
  GetUserQuotaStatusOutput_descriptor_ = file->message_type(164);
  static const int GetUserQuotaStatusOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusOutput, quotalimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusOutput, currentusage_),
  };
  GetUserQuotaStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserQuotaStatusOutput_descriptor_,
      GetUserQuotaStatusOutput::default_instance_,
      GetUserQuotaStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserQuotaStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserQuotaStatusOutput));
  GetDatasetsToBackupInput_descriptor_ = file->message_type(165);
  static const int GetDatasetsToBackupInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, version_),
  };
  GetDatasetsToBackupInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetsToBackupInput_descriptor_,
      GetDatasetsToBackupInput::default_instance_,
      GetDatasetsToBackupInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetsToBackupInput));
  GetDatasetsToBackupOutput_descriptor_ = file->message_type(166);
  static const int GetDatasetsToBackupOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupOutput, datasetstobackup_),
  };
  GetDatasetsToBackupOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetsToBackupOutput_descriptor_,
      GetDatasetsToBackupOutput::default_instance_,
      GetDatasetsToBackupOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetsToBackupOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetsToBackupOutput));
  GetBRSHostNameInput_descriptor_ = file->message_type(167);
  static const int GetBRSHostNameInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameInput, backupstorageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameInput, version_),
  };
  GetBRSHostNameInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBRSHostNameInput_descriptor_,
      GetBRSHostNameInput::default_instance_,
      GetBRSHostNameInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBRSHostNameInput));
  GetBRSHostNameOutput_descriptor_ = file->message_type(168);
  static const int GetBRSHostNameOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameOutput, hostname_),
  };
  GetBRSHostNameOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBRSHostNameOutput_descriptor_,
      GetBRSHostNameOutput::default_instance_,
      GetBRSHostNameOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBRSHostNameOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBRSHostNameOutput));
  GetBackupStorageUnitsForBrsInput_descriptor_ = file->message_type(169);
  static const int GetBackupStorageUnitsForBrsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsInput, brsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsInput, version_),
  };
  GetBackupStorageUnitsForBrsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBackupStorageUnitsForBrsInput_descriptor_,
      GetBackupStorageUnitsForBrsInput::default_instance_,
      GetBackupStorageUnitsForBrsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBackupStorageUnitsForBrsInput));
  GetBackupStorageUnitsForBrsOutput_descriptor_ = file->message_type(170);
  static const int GetBackupStorageUnitsForBrsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsOutput, backupstorageids_),
  };
  GetBackupStorageUnitsForBrsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBackupStorageUnitsForBrsOutput_descriptor_,
      GetBackupStorageUnitsForBrsOutput::default_instance_,
      GetBackupStorageUnitsForBrsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBackupStorageUnitsForBrsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBackupStorageUnitsForBrsOutput));
  GetUpdatedDatasetsInput_descriptor_ = file->message_type(171);
  static const int GetUpdatedDatasetsInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, clusterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, filters_),
  };
  GetUpdatedDatasetsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUpdatedDatasetsInput_descriptor_,
      GetUpdatedDatasetsInput::default_instance_,
      GetUpdatedDatasetsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUpdatedDatasetsInput));
  GetUpdatedDatasetsOutput_descriptor_ = file->message_type(172);
  static const int GetUpdatedDatasetsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsOutput, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsOutput, datasets_),
  };
  GetUpdatedDatasetsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUpdatedDatasetsOutput_descriptor_,
      GetUpdatedDatasetsOutput::default_instance_,
      GetUpdatedDatasetsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUpdatedDatasetsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUpdatedDatasetsOutput));
  AddDatasetArchiveStorageDeviceInput_descriptor_ = file->message_type(173);
  static const int AddDatasetArchiveStorageDeviceInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, archivestoragedeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, version_),
  };
  AddDatasetArchiveStorageDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDatasetArchiveStorageDeviceInput_descriptor_,
      AddDatasetArchiveStorageDeviceInput::default_instance_,
      AddDatasetArchiveStorageDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDatasetArchiveStorageDeviceInput));
  AddDatasetArchiveStorageDeviceOutput_descriptor_ = file->message_type(174);
  static const int AddDatasetArchiveStorageDeviceOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceOutput, error_),
  };
  AddDatasetArchiveStorageDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDatasetArchiveStorageDeviceOutput_descriptor_,
      AddDatasetArchiveStorageDeviceOutput::default_instance_,
      AddDatasetArchiveStorageDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetArchiveStorageDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDatasetArchiveStorageDeviceOutput));
  RemoveDatasetArchiveStorageDeviceInput_descriptor_ = file->message_type(175);
  static const int RemoveDatasetArchiveStorageDeviceInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, datasetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, archivestoragedeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, version_),
  };
  RemoveDatasetArchiveStorageDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDatasetArchiveStorageDeviceInput_descriptor_,
      RemoveDatasetArchiveStorageDeviceInput::default_instance_,
      RemoveDatasetArchiveStorageDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDatasetArchiveStorageDeviceInput));
  RemoveDatasetArchiveStorageDeviceOutput_descriptor_ = file->message_type(176);
  static const int RemoveDatasetArchiveStorageDeviceOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceOutput, error_),
  };
  RemoveDatasetArchiveStorageDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveDatasetArchiveStorageDeviceOutput_descriptor_,
      RemoveDatasetArchiveStorageDeviceOutput::default_instance_,
      RemoveDatasetArchiveStorageDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveDatasetArchiveStorageDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveDatasetArchiveStorageDeviceOutput));
  DatasetType_descriptor_ = file->enum_type(0);
  RouteType_descriptor_ = file->enum_type(1);
  ProtocolType_descriptor_ = file->enum_type(2);
  PortType_descriptor_ = file->enum_type(3);
  SubscriptionRole_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    APIVersion_descriptor_, &APIVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionInfo_descriptor_, &SessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ETicketData_descriptor_, &ETicketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Localization_descriptor_, &Localization::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleData_descriptor_, &TitleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleDetail_descriptor_, &TitleDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentDetail_descriptor_, &ContentDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveData_descriptor_, &SaveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleTicket_descriptor_, &TitleTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Subscription_descriptor_, &Subscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncDirectory_descriptor_, &SyncDirectory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetData_descriptor_, &DatasetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetDetail_descriptor_, &DatasetDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoredDataset_descriptor_, &StoredDataset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageAccessPort_descriptor_, &StorageAccessPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageAccess_descriptor_, &StorageAccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceAccessTicket_descriptor_, &DeviceAccessTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStorage_descriptor_, &UserStorage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatedDataset_descriptor_, &UpdatedDataset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetFilter_descriptor_, &DatasetFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MssDetail_descriptor_, &MssDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageUnitDetail_descriptor_, &StorageUnitDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrsDetail_descriptor_, &BrsDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BrsStorageUnitDetail_descriptor_, &BrsStorageUnitDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackupStatus_descriptor_, &BackupStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSaveTicketsInput_descriptor_, &GetSaveTicketsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSaveTicketsOutput_descriptor_, &GetSaveTicketsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSaveDataInput_descriptor_, &GetSaveDataInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSaveDataOutput_descriptor_, &GetSaveDataOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOwnedTitlesInput_descriptor_, &GetOwnedTitlesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOwnedTitlesOutput_descriptor_, &GetOwnedTitlesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTitlesInput_descriptor_, &GetTitlesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTitlesOutput_descriptor_, &GetTitlesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTitleDetailsInput_descriptor_, &GetTitleDetailsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTitleDetailsOutput_descriptor_, &GetTitleDetailsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttestationChallengeInput_descriptor_, &GetAttestationChallengeInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttestationChallengeOutput_descriptor_, &GetAttestationChallengeOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthenticateDeviceInput_descriptor_, &AuthenticateDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthenticateDeviceOutput_descriptor_, &AuthenticateDeviceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOnlineTitleTicketInput_descriptor_, &GetOnlineTitleTicketInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOnlineTitleTicketOutput_descriptor_, &GetOnlineTitleTicketOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOfflineTitleTicketsInput_descriptor_, &GetOfflineTitleTicketsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOfflineTitleTicketsOutput_descriptor_, &GetOfflineTitleTicketsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListOwnedDataSetsInput_descriptor_, &ListOwnedDataSetsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListOwnedDataSetsOutput_descriptor_, &ListOwnedDataSetsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetDetailsInput_descriptor_, &GetDatasetDetailsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetDetailsOutput_descriptor_, &GetDatasetDetailsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDataSetInput_descriptor_, &AddDataSetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDataSetOutput_descriptor_, &AddDataSetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCameraDatasetInput_descriptor_, &AddCameraDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCameraDatasetOutput_descriptor_, &AddCameraDatasetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteDataSetInput_descriptor_, &DeleteDataSetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteDataSetOutput_descriptor_, &DeleteDataSetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameDataSetInput_descriptor_, &RenameDataSetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameDataSetOutput_descriptor_, &RenameDataSetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDataSetCacheInput_descriptor_, &SetDataSetCacheInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDataSetCacheOutput_descriptor_, &SetDataSetCacheOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDeviceFromSubscriptionsInput_descriptor_, &RemoveDeviceFromSubscriptionsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDeviceFromSubscriptionsOutput_descriptor_, &RemoveDeviceFromSubscriptionsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListSubscriptionsInput_descriptor_, &ListSubscriptionsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListSubscriptionsOutput_descriptor_, &ListSubscriptionsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddSubscriptionsInput_descriptor_, &AddSubscriptionsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddSubscriptionsOutput_descriptor_, &AddSubscriptionsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddUserDatasetSubscriptionInput_descriptor_, &AddUserDatasetSubscriptionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddUserDatasetSubscriptionOutput_descriptor_, &AddUserDatasetSubscriptionOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCameraSubscriptionInput_descriptor_, &AddCameraSubscriptionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCameraSubscriptionOutput_descriptor_, &AddCameraSubscriptionOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDatasetSubscriptionInput_descriptor_, &AddDatasetSubscriptionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDatasetSubscriptionOutput_descriptor_, &AddDatasetSubscriptionOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSubscriptionsInput_descriptor_, &DeleteSubscriptionsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSubscriptionsOutput_descriptor_, &DeleteSubscriptionsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSubscriptionFilterInput_descriptor_, &UpdateSubscriptionFilterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSubscriptionFilterOutput_descriptor_, &UpdateSubscriptionFilterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSubscriptionLimitsInput_descriptor_, &UpdateSubscriptionLimitsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSubscriptionLimitsOutput_descriptor_, &UpdateSubscriptionLimitsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriptionDetailsForDeviceInput_descriptor_, &GetSubscriptionDetailsForDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriptionDetailsForDeviceOutput_descriptor_, &GetSubscriptionDetailsForDeviceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCloudInfoInput_descriptor_, &GetCloudInfoInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCloudInfoOutput_descriptor_, &GetCloudInfoOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscribedDatasetsInput_descriptor_, &GetSubscribedDatasetsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscribedDatasetsOutput_descriptor_, &GetSubscribedDatasetsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriptionDetailsInput_descriptor_, &GetSubscriptionDetailsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSubscriptionDetailsOutput_descriptor_, &GetSubscriptionDetailsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkDeviceInput_descriptor_, &LinkDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkDeviceOutput_descriptor_, &LinkDeviceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlinkDeviceInput_descriptor_, &UnlinkDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlinkDeviceOutput_descriptor_, &UnlinkDeviceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDeviceNameInput_descriptor_, &SetDeviceNameInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDeviceNameOutput_descriptor_, &SetDeviceNameOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDeviceInfoInput_descriptor_, &UpdateDeviceInfoInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDeviceInfoOutput_descriptor_, &UpdateDeviceInfoOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeviceLinkStateInput_descriptor_, &GetDeviceLinkStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeviceLinkStateOutput_descriptor_, &GetDeviceLinkStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeviceNameInput_descriptor_, &GetDeviceNameInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDeviceNameOutput_descriptor_, &GetDeviceNameOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLinkedDevicesInput_descriptor_, &GetLinkedDevicesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLinkedDevicesOutput_descriptor_, &GetLinkedDevicesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLoginSessionInput_descriptor_, &GetLoginSessionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLoginSessionOutput_descriptor_, &GetLoginSessionOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePersonalStorageNodeInput_descriptor_, &CreatePersonalStorageNodeInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatePersonalStorageNodeOutput_descriptor_, &CreatePersonalStorageNodeOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAsyncNoticeServerInput_descriptor_, &GetAsyncNoticeServerInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAsyncNoticeServerOutput_descriptor_, &GetAsyncNoticeServerOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStorageNodeConnectionInput_descriptor_, &UpdateStorageNodeConnectionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStorageNodeConnectionOutput_descriptor_, &UpdateStorageNodeConnectionOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStorageNodeFeaturesInput_descriptor_, &UpdateStorageNodeFeaturesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStorageNodeFeaturesOutput_descriptor_, &UpdateStorageNodeFeaturesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPSNDatasetLocationInput_descriptor_, &GetPSNDatasetLocationInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPSNDatasetLocationOutput_descriptor_, &GetPSNDatasetLocationOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePSNDatasetStatusInput_descriptor_, &UpdatePSNDatasetStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePSNDatasetStatusOutput_descriptor_, &UpdatePSNDatasetStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddUserStorageInput_descriptor_, &AddUserStorageInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddUserStorageOutput_descriptor_, &AddUserStorageOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteUserStorageInput_descriptor_, &DeleteUserStorageInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteUserStorageOutput_descriptor_, &DeleteUserStorageOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserStorageNameInput_descriptor_, &ChangeUserStorageNameInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserStorageNameOutput_descriptor_, &ChangeUserStorageNameOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserStorageQuotaInput_descriptor_, &ChangeUserStorageQuotaInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserStorageQuotaOutput_descriptor_, &ChangeUserStorageQuotaOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListUserStorageInput_descriptor_, &ListUserStorageInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListUserStorageOutput_descriptor_, &ListUserStorageOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserStorageAddressInput_descriptor_, &GetUserStorageAddressInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStorageAddress_descriptor_, &UserStorageAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserStorageAddressOutput_descriptor_, &GetUserStorageAddressOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignUserDatacenterStorageInput_descriptor_, &AssignUserDatacenterStorageInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssignUserDatacenterStorageOutput_descriptor_, &AssignUserDatacenterStorageOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStorageUnitForDatasetInput_descriptor_, &GetStorageUnitForDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStorageUnitForDatasetOutput_descriptor_, &GetStorageUnitForDatasetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoredDatasetsInput_descriptor_, &GetStoredDatasetsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStoredDatasetsOutput_descriptor_, &GetStoredDatasetsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProxyConnectionForClusterInput_descriptor_, &GetProxyConnectionForClusterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetProxyConnectionForClusterOutput_descriptor_, &GetProxyConnectionForClusterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageToPSNInput_descriptor_, &SendMessageToPSNInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMessageToPSNOutput_descriptor_, &SendMessageToPSNOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeStorageUnitForDatasetInput_descriptor_, &ChangeStorageUnitForDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeStorageUnitForDatasetOutput_descriptor_, &ChangeStorageUnitForDatasetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStorageClusterInput_descriptor_, &CreateStorageClusterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateStorageClusterOutput_descriptor_, &CreateStorageClusterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMssInstancesForClusterInput_descriptor_, &GetMssInstancesForClusterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMssInstancesForClusterOutput_descriptor_, &GetMssInstancesForClusterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStorageUnitsForClusterInput_descriptor_, &GetStorageUnitsForClusterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStorageUnitsForClusterOutput_descriptor_, &GetStorageUnitsForClusterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBrsInstancesForClusterInput_descriptor_, &GetBrsInstancesForClusterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBrsInstancesForClusterOutput_descriptor_, &GetBrsInstancesForClusterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBrsStorageUnitsForClusterInput_descriptor_, &GetBrsStorageUnitsForClusterInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBrsStorageUnitsForClusterOutput_descriptor_, &GetBrsStorageUnitsForClusterOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeStorageAssignmentsForDatasetInput_descriptor_, &ChangeStorageAssignmentsForDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeStorageAssignmentsForDatasetOutput_descriptor_, &ChangeStorageAssignmentsForDatasetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDatasetStatusInput_descriptor_, &UpdateDatasetStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDatasetStatusOutput_descriptor_, &UpdateDatasetStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDatasetBackupStatusInput_descriptor_, &UpdateDatasetBackupStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDatasetBackupStatusOutput_descriptor_, &UpdateDatasetBackupStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDatasetArchiveStatusInput_descriptor_, &UpdateDatasetArchiveStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDatasetArchiveStatusOutput_descriptor_, &UpdateDatasetArchiveStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetStatusInput_descriptor_, &GetDatasetStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetStatusOutput_descriptor_, &GetDatasetStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreDeviceEventInput_descriptor_, &StoreDeviceEventInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreDeviceEventOutput_descriptor_, &StoreDeviceEventOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventInfo_descriptor_, &EventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLinkedDatasetStatusInput_descriptor_, &GetLinkedDatasetStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLinkedDatasetStatusOutput_descriptor_, &GetLinkedDatasetStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserQuotaStatusInput_descriptor_, &GetUserQuotaStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserQuotaStatusOutput_descriptor_, &GetUserQuotaStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetsToBackupInput_descriptor_, &GetDatasetsToBackupInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetsToBackupOutput_descriptor_, &GetDatasetsToBackupOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBRSHostNameInput_descriptor_, &GetBRSHostNameInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBRSHostNameOutput_descriptor_, &GetBRSHostNameOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBackupStorageUnitsForBrsInput_descriptor_, &GetBackupStorageUnitsForBrsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBackupStorageUnitsForBrsOutput_descriptor_, &GetBackupStorageUnitsForBrsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUpdatedDatasetsInput_descriptor_, &GetUpdatedDatasetsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUpdatedDatasetsOutput_descriptor_, &GetUpdatedDatasetsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDatasetArchiveStorageDeviceInput_descriptor_, &AddDatasetArchiveStorageDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDatasetArchiveStorageDeviceOutput_descriptor_, &AddDatasetArchiveStorageDeviceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDatasetArchiveStorageDeviceInput_descriptor_, &RemoveDatasetArchiveStorageDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveDatasetArchiveStorageDeviceOutput_descriptor_, &RemoveDatasetArchiveStorageDeviceOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto() {
  delete APIVersion::default_instance_;
  delete APIVersion_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete SessionInfo::default_instance_;
  delete SessionInfo_reflection_;
  delete ETicketData::default_instance_;
  delete ETicketData_reflection_;
  delete Localization::default_instance_;
  delete Localization_reflection_;
  delete TitleData::default_instance_;
  delete TitleData_reflection_;
  delete TitleDetail::default_instance_;
  delete TitleDetail_reflection_;
  delete ContentDetail::default_instance_;
  delete ContentDetail_reflection_;
  delete SaveData::default_instance_;
  delete SaveData_reflection_;
  delete TitleTicket::default_instance_;
  delete TitleTicket_reflection_;
  delete Subscription::default_instance_;
  delete Subscription_reflection_;
  delete SyncDirectory::default_instance_;
  delete SyncDirectory_reflection_;
  delete DatasetData::default_instance_;
  delete DatasetData_reflection_;
  delete DatasetDetail::default_instance_;
  delete DatasetDetail_reflection_;
  delete StoredDataset::default_instance_;
  delete StoredDataset_reflection_;
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete StorageAccessPort::default_instance_;
  delete StorageAccessPort_reflection_;
  delete StorageAccess::default_instance_;
  delete StorageAccess_reflection_;
  delete DeviceAccessTicket::default_instance_;
  delete DeviceAccessTicket_reflection_;
  delete UserStorage::default_instance_;
  delete UserStorage_reflection_;
  delete UpdatedDataset::default_instance_;
  delete UpdatedDataset_reflection_;
  delete DatasetFilter::default_instance_;
  delete DatasetFilter_reflection_;
  delete MssDetail::default_instance_;
  delete MssDetail_reflection_;
  delete StorageUnitDetail::default_instance_;
  delete StorageUnitDetail_reflection_;
  delete BrsDetail::default_instance_;
  delete BrsDetail_reflection_;
  delete BrsStorageUnitDetail::default_instance_;
  delete BrsStorageUnitDetail_reflection_;
  delete BackupStatus::default_instance_;
  delete BackupStatus_reflection_;
  delete GetSaveTicketsInput::default_instance_;
  delete GetSaveTicketsInput_reflection_;
  delete GetSaveTicketsOutput::default_instance_;
  delete GetSaveTicketsOutput_reflection_;
  delete GetSaveDataInput::default_instance_;
  delete GetSaveDataInput_reflection_;
  delete GetSaveDataOutput::default_instance_;
  delete GetSaveDataOutput_reflection_;
  delete GetOwnedTitlesInput::default_instance_;
  delete GetOwnedTitlesInput_reflection_;
  delete GetOwnedTitlesOutput::default_instance_;
  delete GetOwnedTitlesOutput_reflection_;
  delete GetTitlesInput::default_instance_;
  delete GetTitlesInput_reflection_;
  delete GetTitlesOutput::default_instance_;
  delete GetTitlesOutput_reflection_;
  delete GetTitleDetailsInput::default_instance_;
  delete GetTitleDetailsInput_reflection_;
  delete GetTitleDetailsOutput::default_instance_;
  delete GetTitleDetailsOutput_reflection_;
  delete GetAttestationChallengeInput::default_instance_;
  delete GetAttestationChallengeInput_reflection_;
  delete GetAttestationChallengeOutput::default_instance_;
  delete GetAttestationChallengeOutput_reflection_;
  delete AuthenticateDeviceInput::default_instance_;
  delete AuthenticateDeviceInput_reflection_;
  delete AuthenticateDeviceOutput::default_instance_;
  delete AuthenticateDeviceOutput_reflection_;
  delete GetOnlineTitleTicketInput::default_instance_;
  delete GetOnlineTitleTicketInput_reflection_;
  delete GetOnlineTitleTicketOutput::default_instance_;
  delete GetOnlineTitleTicketOutput_reflection_;
  delete GetOfflineTitleTicketsInput::default_instance_;
  delete GetOfflineTitleTicketsInput_reflection_;
  delete GetOfflineTitleTicketsOutput::default_instance_;
  delete GetOfflineTitleTicketsOutput_reflection_;
  delete ListOwnedDataSetsInput::default_instance_;
  delete ListOwnedDataSetsInput_reflection_;
  delete ListOwnedDataSetsOutput::default_instance_;
  delete ListOwnedDataSetsOutput_reflection_;
  delete GetDatasetDetailsInput::default_instance_;
  delete GetDatasetDetailsInput_reflection_;
  delete GetDatasetDetailsOutput::default_instance_;
  delete GetDatasetDetailsOutput_reflection_;
  delete AddDataSetInput::default_instance_;
  delete AddDataSetInput_reflection_;
  delete AddDataSetOutput::default_instance_;
  delete AddDataSetOutput_reflection_;
  delete AddCameraDatasetInput::default_instance_;
  delete AddCameraDatasetInput_reflection_;
  delete AddCameraDatasetOutput::default_instance_;
  delete AddCameraDatasetOutput_reflection_;
  delete DeleteDataSetInput::default_instance_;
  delete DeleteDataSetInput_reflection_;
  delete DeleteDataSetOutput::default_instance_;
  delete DeleteDataSetOutput_reflection_;
  delete RenameDataSetInput::default_instance_;
  delete RenameDataSetInput_reflection_;
  delete RenameDataSetOutput::default_instance_;
  delete RenameDataSetOutput_reflection_;
  delete SetDataSetCacheInput::default_instance_;
  delete SetDataSetCacheInput_reflection_;
  delete SetDataSetCacheOutput::default_instance_;
  delete SetDataSetCacheOutput_reflection_;
  delete RemoveDeviceFromSubscriptionsInput::default_instance_;
  delete RemoveDeviceFromSubscriptionsInput_reflection_;
  delete RemoveDeviceFromSubscriptionsOutput::default_instance_;
  delete RemoveDeviceFromSubscriptionsOutput_reflection_;
  delete ListSubscriptionsInput::default_instance_;
  delete ListSubscriptionsInput_reflection_;
  delete ListSubscriptionsOutput::default_instance_;
  delete ListSubscriptionsOutput_reflection_;
  delete AddSubscriptionsInput::default_instance_;
  delete AddSubscriptionsInput_reflection_;
  delete AddSubscriptionsOutput::default_instance_;
  delete AddSubscriptionsOutput_reflection_;
  delete AddUserDatasetSubscriptionInput::default_instance_;
  delete AddUserDatasetSubscriptionInput_reflection_;
  delete AddUserDatasetSubscriptionOutput::default_instance_;
  delete AddUserDatasetSubscriptionOutput_reflection_;
  delete AddCameraSubscriptionInput::default_instance_;
  delete AddCameraSubscriptionInput_reflection_;
  delete AddCameraSubscriptionOutput::default_instance_;
  delete AddCameraSubscriptionOutput_reflection_;
  delete AddDatasetSubscriptionInput::default_instance_;
  delete AddDatasetSubscriptionInput_reflection_;
  delete AddDatasetSubscriptionOutput::default_instance_;
  delete AddDatasetSubscriptionOutput_reflection_;
  delete DeleteSubscriptionsInput::default_instance_;
  delete DeleteSubscriptionsInput_reflection_;
  delete DeleteSubscriptionsOutput::default_instance_;
  delete DeleteSubscriptionsOutput_reflection_;
  delete UpdateSubscriptionFilterInput::default_instance_;
  delete UpdateSubscriptionFilterInput_reflection_;
  delete UpdateSubscriptionFilterOutput::default_instance_;
  delete UpdateSubscriptionFilterOutput_reflection_;
  delete UpdateSubscriptionLimitsInput::default_instance_;
  delete UpdateSubscriptionLimitsInput_reflection_;
  delete UpdateSubscriptionLimitsOutput::default_instance_;
  delete UpdateSubscriptionLimitsOutput_reflection_;
  delete GetSubscriptionDetailsForDeviceInput::default_instance_;
  delete GetSubscriptionDetailsForDeviceInput_reflection_;
  delete GetSubscriptionDetailsForDeviceOutput::default_instance_;
  delete GetSubscriptionDetailsForDeviceOutput_reflection_;
  delete GetCloudInfoInput::default_instance_;
  delete GetCloudInfoInput_reflection_;
  delete GetCloudInfoOutput::default_instance_;
  delete GetCloudInfoOutput_reflection_;
  delete GetSubscribedDatasetsInput::default_instance_;
  delete GetSubscribedDatasetsInput_reflection_;
  delete GetSubscribedDatasetsOutput::default_instance_;
  delete GetSubscribedDatasetsOutput_reflection_;
  delete GetSubscriptionDetailsInput::default_instance_;
  delete GetSubscriptionDetailsInput_reflection_;
  delete GetSubscriptionDetailsOutput::default_instance_;
  delete GetSubscriptionDetailsOutput_reflection_;
  delete LinkDeviceInput::default_instance_;
  delete LinkDeviceInput_reflection_;
  delete LinkDeviceOutput::default_instance_;
  delete LinkDeviceOutput_reflection_;
  delete UnlinkDeviceInput::default_instance_;
  delete UnlinkDeviceInput_reflection_;
  delete UnlinkDeviceOutput::default_instance_;
  delete UnlinkDeviceOutput_reflection_;
  delete SetDeviceNameInput::default_instance_;
  delete SetDeviceNameInput_reflection_;
  delete SetDeviceNameOutput::default_instance_;
  delete SetDeviceNameOutput_reflection_;
  delete UpdateDeviceInfoInput::default_instance_;
  delete UpdateDeviceInfoInput_reflection_;
  delete UpdateDeviceInfoOutput::default_instance_;
  delete UpdateDeviceInfoOutput_reflection_;
  delete GetDeviceLinkStateInput::default_instance_;
  delete GetDeviceLinkStateInput_reflection_;
  delete GetDeviceLinkStateOutput::default_instance_;
  delete GetDeviceLinkStateOutput_reflection_;
  delete GetDeviceNameInput::default_instance_;
  delete GetDeviceNameInput_reflection_;
  delete GetDeviceNameOutput::default_instance_;
  delete GetDeviceNameOutput_reflection_;
  delete GetLinkedDevicesInput::default_instance_;
  delete GetLinkedDevicesInput_reflection_;
  delete GetLinkedDevicesOutput::default_instance_;
  delete GetLinkedDevicesOutput_reflection_;
  delete GetLoginSessionInput::default_instance_;
  delete GetLoginSessionInput_reflection_;
  delete GetLoginSessionOutput::default_instance_;
  delete GetLoginSessionOutput_reflection_;
  delete CreatePersonalStorageNodeInput::default_instance_;
  delete CreatePersonalStorageNodeInput_reflection_;
  delete CreatePersonalStorageNodeOutput::default_instance_;
  delete CreatePersonalStorageNodeOutput_reflection_;
  delete GetAsyncNoticeServerInput::default_instance_;
  delete GetAsyncNoticeServerInput_reflection_;
  delete GetAsyncNoticeServerOutput::default_instance_;
  delete GetAsyncNoticeServerOutput_reflection_;
  delete UpdateStorageNodeConnectionInput::default_instance_;
  delete UpdateStorageNodeConnectionInput_reflection_;
  delete UpdateStorageNodeConnectionOutput::default_instance_;
  delete UpdateStorageNodeConnectionOutput_reflection_;
  delete UpdateStorageNodeFeaturesInput::default_instance_;
  delete UpdateStorageNodeFeaturesInput_reflection_;
  delete UpdateStorageNodeFeaturesOutput::default_instance_;
  delete UpdateStorageNodeFeaturesOutput_reflection_;
  delete GetPSNDatasetLocationInput::default_instance_;
  delete GetPSNDatasetLocationInput_reflection_;
  delete GetPSNDatasetLocationOutput::default_instance_;
  delete GetPSNDatasetLocationOutput_reflection_;
  delete UpdatePSNDatasetStatusInput::default_instance_;
  delete UpdatePSNDatasetStatusInput_reflection_;
  delete UpdatePSNDatasetStatusOutput::default_instance_;
  delete UpdatePSNDatasetStatusOutput_reflection_;
  delete AddUserStorageInput::default_instance_;
  delete AddUserStorageInput_reflection_;
  delete AddUserStorageOutput::default_instance_;
  delete AddUserStorageOutput_reflection_;
  delete DeleteUserStorageInput::default_instance_;
  delete DeleteUserStorageInput_reflection_;
  delete DeleteUserStorageOutput::default_instance_;
  delete DeleteUserStorageOutput_reflection_;
  delete ChangeUserStorageNameInput::default_instance_;
  delete ChangeUserStorageNameInput_reflection_;
  delete ChangeUserStorageNameOutput::default_instance_;
  delete ChangeUserStorageNameOutput_reflection_;
  delete ChangeUserStorageQuotaInput::default_instance_;
  delete ChangeUserStorageQuotaInput_reflection_;
  delete ChangeUserStorageQuotaOutput::default_instance_;
  delete ChangeUserStorageQuotaOutput_reflection_;
  delete ListUserStorageInput::default_instance_;
  delete ListUserStorageInput_reflection_;
  delete ListUserStorageOutput::default_instance_;
  delete ListUserStorageOutput_reflection_;
  delete GetUserStorageAddressInput::default_instance_;
  delete GetUserStorageAddressInput_reflection_;
  delete UserStorageAddress::default_instance_;
  delete UserStorageAddress_reflection_;
  delete GetUserStorageAddressOutput::default_instance_;
  delete GetUserStorageAddressOutput_reflection_;
  delete AssignUserDatacenterStorageInput::default_instance_;
  delete AssignUserDatacenterStorageInput_reflection_;
  delete AssignUserDatacenterStorageOutput::default_instance_;
  delete AssignUserDatacenterStorageOutput_reflection_;
  delete GetStorageUnitForDatasetInput::default_instance_;
  delete GetStorageUnitForDatasetInput_reflection_;
  delete GetStorageUnitForDatasetOutput::default_instance_;
  delete GetStorageUnitForDatasetOutput_reflection_;
  delete GetStoredDatasetsInput::default_instance_;
  delete GetStoredDatasetsInput_reflection_;
  delete GetStoredDatasetsOutput::default_instance_;
  delete GetStoredDatasetsOutput_reflection_;
  delete GetProxyConnectionForClusterInput::default_instance_;
  delete GetProxyConnectionForClusterInput_reflection_;
  delete GetProxyConnectionForClusterOutput::default_instance_;
  delete GetProxyConnectionForClusterOutput_reflection_;
  delete SendMessageToPSNInput::default_instance_;
  delete SendMessageToPSNInput_reflection_;
  delete SendMessageToPSNOutput::default_instance_;
  delete SendMessageToPSNOutput_reflection_;
  delete ChangeStorageUnitForDatasetInput::default_instance_;
  delete ChangeStorageUnitForDatasetInput_reflection_;
  delete ChangeStorageUnitForDatasetOutput::default_instance_;
  delete ChangeStorageUnitForDatasetOutput_reflection_;
  delete CreateStorageClusterInput::default_instance_;
  delete CreateStorageClusterInput_reflection_;
  delete CreateStorageClusterOutput::default_instance_;
  delete CreateStorageClusterOutput_reflection_;
  delete GetMssInstancesForClusterInput::default_instance_;
  delete GetMssInstancesForClusterInput_reflection_;
  delete GetMssInstancesForClusterOutput::default_instance_;
  delete GetMssInstancesForClusterOutput_reflection_;
  delete GetStorageUnitsForClusterInput::default_instance_;
  delete GetStorageUnitsForClusterInput_reflection_;
  delete GetStorageUnitsForClusterOutput::default_instance_;
  delete GetStorageUnitsForClusterOutput_reflection_;
  delete GetBrsInstancesForClusterInput::default_instance_;
  delete GetBrsInstancesForClusterInput_reflection_;
  delete GetBrsInstancesForClusterOutput::default_instance_;
  delete GetBrsInstancesForClusterOutput_reflection_;
  delete GetBrsStorageUnitsForClusterInput::default_instance_;
  delete GetBrsStorageUnitsForClusterInput_reflection_;
  delete GetBrsStorageUnitsForClusterOutput::default_instance_;
  delete GetBrsStorageUnitsForClusterOutput_reflection_;
  delete ChangeStorageAssignmentsForDatasetInput::default_instance_;
  delete ChangeStorageAssignmentsForDatasetInput_reflection_;
  delete ChangeStorageAssignmentsForDatasetOutput::default_instance_;
  delete ChangeStorageAssignmentsForDatasetOutput_reflection_;
  delete UpdateDatasetStatusInput::default_instance_;
  delete UpdateDatasetStatusInput_reflection_;
  delete UpdateDatasetStatusOutput::default_instance_;
  delete UpdateDatasetStatusOutput_reflection_;
  delete UpdateDatasetBackupStatusInput::default_instance_;
  delete UpdateDatasetBackupStatusInput_reflection_;
  delete UpdateDatasetBackupStatusOutput::default_instance_;
  delete UpdateDatasetBackupStatusOutput_reflection_;
  delete UpdateDatasetArchiveStatusInput::default_instance_;
  delete UpdateDatasetArchiveStatusInput_reflection_;
  delete UpdateDatasetArchiveStatusOutput::default_instance_;
  delete UpdateDatasetArchiveStatusOutput_reflection_;
  delete GetDatasetStatusInput::default_instance_;
  delete GetDatasetStatusInput_reflection_;
  delete GetDatasetStatusOutput::default_instance_;
  delete GetDatasetStatusOutput_reflection_;
  delete StoreDeviceEventInput::default_instance_;
  delete StoreDeviceEventInput_reflection_;
  delete StoreDeviceEventOutput::default_instance_;
  delete StoreDeviceEventOutput_reflection_;
  delete EventInfo::default_instance_;
  delete EventInfo_reflection_;
  delete GetLinkedDatasetStatusInput::default_instance_;
  delete GetLinkedDatasetStatusInput_reflection_;
  delete GetLinkedDatasetStatusOutput::default_instance_;
  delete GetLinkedDatasetStatusOutput_reflection_;
  delete GetUserQuotaStatusInput::default_instance_;
  delete GetUserQuotaStatusInput_reflection_;
  delete GetUserQuotaStatusOutput::default_instance_;
  delete GetUserQuotaStatusOutput_reflection_;
  delete GetDatasetsToBackupInput::default_instance_;
  delete GetDatasetsToBackupInput_reflection_;
  delete GetDatasetsToBackupOutput::default_instance_;
  delete GetDatasetsToBackupOutput_reflection_;
  delete GetBRSHostNameInput::default_instance_;
  delete GetBRSHostNameInput_reflection_;
  delete GetBRSHostNameOutput::default_instance_;
  delete GetBRSHostNameOutput_reflection_;
  delete GetBackupStorageUnitsForBrsInput::default_instance_;
  delete GetBackupStorageUnitsForBrsInput_reflection_;
  delete GetBackupStorageUnitsForBrsOutput::default_instance_;
  delete GetBackupStorageUnitsForBrsOutput_reflection_;
  delete GetUpdatedDatasetsInput::default_instance_;
  delete GetUpdatedDatasetsInput_reflection_;
  delete GetUpdatedDatasetsOutput::default_instance_;
  delete GetUpdatedDatasetsOutput_reflection_;
  delete AddDatasetArchiveStorageDeviceInput::default_instance_;
  delete AddDatasetArchiveStorageDeviceInput_reflection_;
  delete AddDatasetArchiveStorageDeviceOutput::default_instance_;
  delete AddDatasetArchiveStorageDeviceOutput_reflection_;
  delete RemoveDatasetArchiveStorageDeviceInput::default_instance_;
  delete RemoveDatasetArchiveStorageDeviceInput_reflection_;
  delete RemoveDatasetArchiveStorageDeviceOutput::default_instance_;
  delete RemoveDatasetArchiveStorageDeviceOutput_reflection_;
}

void protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::vplex::common::protobuf_AddDesc_vplex_5fcommon_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&vplex_vs_directory_service_types.proto"
    "\022\021vplex.vsDirectory\032\030vplex_common_types."
    "proto\"\"\n\nAPIVersion\022\024\n\007version\030\001 \001(\t:\0031."
    "0\"/\n\005Error\022\021\n\terrorCode\030\001 \002(\021\022\023\n\013errorDe"
    "tail\030\002 \001(\t\";\n\013SessionInfo\022\025\n\rsessionHand"
    "le\030\001 \002(\006\022\025\n\rserviceTicket\030\002 \002(\014\"3\n\013ETick"
    "etData\022\017\n\007eTicket\030\001 \002(\014\022\023\n\013certificate\030\002"
    " \003(\014\"A\n\014Localization\022\020\n\010language\030\001 \002(\t\022\017"
    "\n\007country\030\002 \002(\t\022\016\n\006region\030\003 \002(\t\"|\n\tTitle"
    "Data\022\017\n\007titleId\030\001 \002(\t\022\022\n\ndetailHash\030\002 \002("
    "\005\022\025\n\rticketVersion\030\003 \002(\005\022\030\n\020useOnlineETi"
    "cket\030\004 \002(\010\022\031\n\021useOfflineETicket\030\005 \002(\010\"\266\002"
    "\n\013TitleDetail\022\017\n\007titleId\030\001 \002(\t\022\024\n\014titleV"
    "ersion\030\002 \002(\t\022\016\n\006tmdUrl\030\003 \002(\t\0222\n\010contents"
    "\030\004 \003(\0132 .vplex.vsDirectory.ContentDetail"
    "\022\014\n\004name\030\005 \001(\t\022\017\n\007iconUrl\030\006 \001(\t\022\020\n\010image"
    "Url\030\007 \001(\t\022\021\n\tpublisher\030\010 \001(\t\022\r\n\005genre\030\t "
    "\001(\t\0222\n\rcontentRating\030\n \001(\0132\033.vplex.commo"
    "n.ContentRating\0225\n\020altContentRating\030\013 \001("
    "\0132\033.vplex.common.ContentRating\";\n\rConten"
    "tDetail\022\021\n\tcontentId\030\001 \002(\t\022\027\n\017contentLoc"
    "ation\030\002 \002(\t\"1\n\010SaveData\022\017\n\007titleId\030\001 \002(\t"
    "\022\024\n\014saveLocation\030\002 \002(\t\"O\n\013TitleTicket\022\017\n"
    "\007titleId\030\001 \002(\t\022/\n\007eTicket\030\002 \002(\0132\036.vplex."
    "vsDirectory.ETicketData\"\302\002\n\014Subscription"
    "\022\021\n\tdatasetId\030\001 \001(\006\022\023\n\013datasetName\030\002 \001(\t"
    "\022\016\n\006filter\030\003 \001(\t\022\022\n\ndeviceRoot\030\004 \001(\t\022\023\n\013"
    "datasetRoot\030\005 \001(\t\022\020\n\010uploadOk\030\006 \001(\010\022\022\n\nd"
    "ownloadOk\030\007 \001(\010\022\026\n\016uploadDeleteOk\030\010 \001(\010\022"
    "\030\n\020downloadDeleteOk\030\t \001(\010\022\027\n\017datasetLoca"
    "tion\030\n \001(\t\022\023\n\013contentType\030\013 \001(\t\022\022\n\ncreat"
    "edFor\030\014 \001(\t\022\017\n\007maxSize\030\r \001(\006\022\020\n\010maxFiles"
    "\030\016 \001(\006\022\024\n\014creationTime\030\017 \001(\006\"K\n\rSyncDire"
    "ctory\022\021\n\tlocalPath\030\001 \002(\t\022\022\n\nserverPath\030\002"
    " \002(\t\022\023\n\013privateFlag\030\003 \002(\010\"4\n\013DatasetData"
    "\022\021\n\tdatasetId\030\001 \002(\006\022\022\n\ndetailHash\030\002 \002(\005\""
    "\367\003\n\rDatasetDetail\022\021\n\tdatasetId\030\001 \002(\006\022\023\n\013"
    "datasetName\030\002 \002(\t\022\023\n\013contentType\030\003 \002(\t\022\022"
    "\n\ncreatedFor\030\004 \001(\t\022\022\n\nexternalId\030\005 \001(\t\022\023"
    "\n\013lastUpdated\030\006 \002(\006\022\032\n\022storageClusterNam"
    "e\030\007 \001(\t\022\036\n\026storageClusterHostName\030\010 \001(\t\022"
    "\032\n\022storageClusterPort\030\t \001(\005\022\027\n\017datasetLo"
    "cation\030\n \001(\t\022\022\n\nsizeOnDisk\030\013 \001(\006\0223\n\013data"
    "setType\030\014 \001(\0162\036.vplex.vsDirectory.Datase"
    "tType\022\020\n\010linkedTo\030\r \001(\006\022\021\n\tclusterId\030\016 \001"
    "(\006\022\016\n\006userId\030\017 \001(\006\022\025\n\rsuspendedFlag\030\020 \001("
    "\010\022\030\n\020primaryStorageId\030\021 \001(\006\022\027\n\017deleteDat"
    "aAfter\030\022 \001(\006\022\036\n\026archiveStorageDeviceId\030\023"
    " \003(\006\022\023\n\013displayName\030\024 \001(\t\"\353\001\n\rStoredData"
    "set\022\016\n\006userId\030\001 \002(\006\022\021\n\tdatasetId\030\002 \002(\006\0223"
    "\n\013datasetType\030\003 \002(\0162\036.vplex.vsDirectory."
    "DatasetType\022\031\n\021dataRetentionTime\030\004 \002(\006\022\030"
    "\n\020storageClusterId\030\005 \001(\006\022\030\n\020primaryStora"
    "geId\030\006 \001(\006\022\032\n\022secondaryStorageId\030\007 \001(\006\022\027"
    "\n\017backupStorageId\030\010 \001(\006\"\302\003\n\nDeviceInfo\022\020"
    "\n\010deviceId\030\001 \002(\006\022\023\n\013deviceClass\030\002 \002(\t\022\022\n"
    "\ndeviceName\030\003 \001(\t\022\016\n\006isAcer\030\004 \001(\010\022\021\n\thas"
    "Camera\030\005 \001(\010\022\021\n\tosVersion\030\006 \001(\t\022\027\n\017proto"
    "colVersion\030\007 \001(\t\022\023\n\013isVirtDrive\030\010 \001(\010\022\025\n"
    "\risMediaServer\030\t \001(\010\022!\n\031featureMediaServ"
    "erCapable\030\n \001(\010\022\037\n\027featureVirtDriveCapab"
    "le\030\013 \001(\010\022&\n\036featureRemoteFileAccessCapab"
    "le\030\014 \001(\010\022#\n\033featureFSDatasetTypeCapable\030"
    "\r \001(\010\022\023\n\013modelNumber\030\016 \001(\t\022\021\n\tbuildInfo\030"
    "\017 \001(\t\022\036\n\026featureVirtSyncCapable\030\020 \001(\010\022%\n"
    "\035featureMyStorageServerCapable\030\021 \001(\010\"P\n\021"
    "StorageAccessPort\022-\n\010portType\030\001 \002(\0162\033.vp"
    "lex.vsDirectory.PortType\022\014\n\004port\030\002 \002(\005\"\270"
    "\001\n\rStorageAccess\022/\n\trouteType\030\001 \002(\0162\034.vp"
    "lex.vsDirectory.RouteType\0221\n\010protocol\030\002 "
    "\002(\0162\037.vplex.vsDirectory.ProtocolType\022\016\n\006"
    "server\030\003 \002(\t\0223\n\005ports\030\004 \003(\0132$.vplex.vsDi"
    "rectory.StorageAccessPort\"<\n\022DeviceAcces"
    "sTicket\022\020\n\010deviceId\030\001 \002(\006\022\024\n\014accessTicke"
    "t\030\002 \002(\014\"\213\004\n\013UserStorage\022\030\n\020storageCluste"
    "rId\030\001 \002(\006\022\023\n\013storageName\030\002 \001(\t\022\023\n\013storag"
    "eType\030\003 \001(\005\022\022\n\nusageLimit\030\004 \002(\006\022\023\n\013isVir"
    "tDrive\030\005 \001(\010\022\025\n\risMediaServer\030\006 \001(\010\022\024\n\014a"
    "ccessHandle\030\007 \001(\006\022\024\n\014accessTicket\030\010 \001(\014\022"
    "7\n\rstorageAccess\030\t \003(\0132 .vplex.vsDirecto"
    "ry.StorageAccess\022!\n\031featureMediaServerEn"
    "abled\030\n \001(\010\022\037\n\027featureVirtDriveEnabled\030\013"
    " \001(\010\022&\n\036featureRemoteFileAccessEnabled\030\014"
    " \001(\010\022#\n\033featureFSDatasetTypeEnabled\030\r \001("
    "\010\022\033\n\023devSpecAccessTicket\030\016 \001(\014\022\036\n\026featur"
    "eCloudDocEnabled\030\017 \001(\010\022\036\n\026featureVirtSyn"
    "cEnabled\030\020 \001(\010\022%\n\035featureMyStorageServer"
    "Enabled\030\021 \001(\010\"\324\001\n\016UpdatedDataset\022\021\n\tdata"
    "setId\030\001 \002(\006\022\021\n\tclusterId\030\002 \002(\006\022\016\n\006userId"
    "\030\003 \002(\006\0223\n\013datasetType\030\004 \002(\0162\036.vplex.vsDi"
    "rectory.DatasetType\022\023\n\013datasetName\030\005 \002(\t"
    "\022\023\n\013lastUpdated\030\006 \002(\006\022\025\n\rdestDatasetId\030\007"
    " \001(\006\022\026\n\016primaryVersion\030\010 \001(\006\",\n\rDatasetF"
    "ilter\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"A\n\tMs"
    "sDetail\022\r\n\005mssId\030\001 \002(\006\022\017\n\007mssName\030\002 \002(\t\022"
    "\024\n\014inactiveFlag\030\003 \001(\010\"L\n\021StorageUnitDeta"
    "il\022\021\n\tstorageId\030\001 \002(\006\022\016\n\006mssIds\030\002 \003(\006\022\024\n"
    "\014inactiveFlag\030\003 \001(\010\"A\n\tBrsDetail\022\r\n\005brsI"
    "d\030\001 \002(\006\022\017\n\007brsName\030\002 \002(\t\022\024\n\014inactiveFlag"
    "\030\003 \001(\010\"Q\n\024BrsStorageUnitDetail\022\024\n\014brsSto"
    "rageId\030\001 \002(\006\022\r\n\005brsId\030\002 \002(\006\022\024\n\014inactiveF"
    "lag\030\003 \001(\010\"\231\001\n\014BackupStatus\022\016\n\006userId\030\001 \002"
    "(\006\022\021\n\tdatasetId\030\002 \002(\006\022\026\n\016lastBackupTime\030"
    "\003 \002(\006\022\031\n\021lastBackupVersion\030\004 \002(\006\022\027\n\017last"
    "ArchiveTime\030\005 \001(\006\022\032\n\022lastArchiveVersion\030"
    "\006 \001(\006\"m\n\023GetSaveTicketsInput\022/\n\007session\030"
    "\001 \002(\0132\036.vplex.vsDirectory.SessionInfo\022\020\n"
    "\010deviceId\030\002 \002(\006\022\023\n\013certificate\030\003 \002(\014\"\260\001\n"
    "\024GetSaveTicketsOutput\022\'\n\005error\030\001 \002(\0132\030.v"
    "plex.vsDirectory.Error\0228\n\020encryptionTick"
    "et\030\002 \001(\0132\036.vplex.vsDirectory.ETicketData"
    "\0225\n\rsigningTicket\030\003 \001(\0132\036.vplex.vsDirect"
    "ory.ETicketData\"U\n\020GetSaveDataInput\022/\n\007s"
    "ession\030\001 \002(\0132\036.vplex.vsDirectory.Session"
    "Info\022\020\n\010titleIds\030\002 \003(\t\"g\n\021GetSaveDataOut"
    "put\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.E"
    "rror\022)\n\004data\030\002 \003(\0132\033.vplex.vsDirectory.S"
    "aveData\"u\n\023GetOwnedTitlesInput\022/\n\007sessio"
    "n\030\001 \002(\0132\036.vplex.vsDirectory.SessionInfo\022"
    "-\n\004l10n\030\002 \002(\0132\037.vplex.vsDirectory.Locali"
    "zation\"p\n\024GetOwnedTitlesOutput\022\'\n\005error\030"
    "\001 \002(\0132\030.vplex.vsDirectory.Error\022/\n\ttitle"
    "Data\030\002 \003(\0132\034.vplex.vsDirectory.TitleData"
    "\"\202\001\n\016GetTitlesInput\022/\n\007session\030\001 \002(\0132\036.v"
    "plex.vsDirectory.SessionInfo\022-\n\004l10n\030\002 \002"
    "(\0132\037.vplex.vsDirectory.Localization\022\020\n\010t"
    "itleIds\030\003 \003(\t\"k\n\017GetTitlesOutput\022\'\n\005erro"
    "r\030\001 \002(\0132\030.vplex.vsDirectory.Error\022/\n\ttit"
    "leData\030\002 \003(\0132\034.vplex.vsDirectory.TitleDa"
    "ta\"\210\001\n\024GetTitleDetailsInput\022/\n\007session\030\001"
    " \002(\0132\036.vplex.vsDirectory.SessionInfo\022-\n\004"
    "l10n\030\002 \002(\0132\037.vplex.vsDirectory.Localizat"
    "ion\022\020\n\010titleIds\030\003 \003(\t\"v\n\025GetTitleDetails"
    "Output\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirector"
    "y.Error\0224\n\014titleDetails\030\002 \003(\0132\036.vplex.vs"
    "Directory.TitleDetail\"a\n\034GetAttestationC"
    "hallengeInput\022/\n\007session\030\001 \002(\0132\036.vplex.v"
    "sDirectory.SessionInfo\022\020\n\010deviceId\030\002 \002(\006"
    "\"q\n\035GetAttestationChallengeOutput\022\'\n\005err"
    "or\030\001 \002(\0132\030.vplex.vsDirectory.Error\022\021\n\tch"
    "allenge\030\002 \001(\014\022\024\n\014challengeTmd\030\003 \001(\014\"\200\001\n\027"
    "AuthenticateDeviceInput\022/\n\007session\030\001 \002(\013"
    "2\036.vplex.vsDirectory.SessionInfo\022\031\n\021chal"
    "lengeResponse\030\002 \002(\014\022\031\n\021deviceCertificate"
    "\030\003 \002(\014\"C\n\030AuthenticateDeviceOutput\022\'\n\005er"
    "ror\030\001 \002(\0132\030.vplex.vsDirectory.Error\"\212\001\n\031"
    "GetOnlineTitleTicketInput\022/\n\007session\030\001 \002"
    "(\0132\036.vplex.vsDirectory.SessionInfo\022\020\n\010de"
    "viceId\030\002 \002(\006\022\031\n\021deviceCertificate\030\003 \002(\014\022"
    "\017\n\007titleId\030\004 \002(\t\"v\n\032GetOnlineTitleTicket"
    "Output\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirector"
    "y.Error\022/\n\007eTicket\030\002 \001(\0132\036.vplex.vsDirec"
    "tory.ETicketData\"\215\001\n\033GetOfflineTitleTick"
    "etsInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsDire"
    "ctory.SessionInfo\022\020\n\010deviceId\030\002 \002(\006\022\031\n\021d"
    "eviceCertificate\030\003 \002(\014\022\020\n\010titleIds\030\004 \003(\t"
    "\"}\n\034GetOfflineTitleTicketsOutput\022\'\n\005erro"
    "r\030\001 \002(\0132\030.vplex.vsDirectory.Error\0224\n\014tit"
    "leTickets\030\002 \003(\0132\036.vplex.vsDirectory.Titl"
    "eTicket\"|\n\026ListOwnedDataSetsInput\022/\n\007ses"
    "sion\030\001 \002(\0132\036.vplex.vsDirectory.SessionIn"
    "fo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \001(\006\022\017\n\007"
    "version\030\004 \001(\t\"v\n\027ListOwnedDataSetsOutput"
    "\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Erro"
    "r\0222\n\010datasets\030\002 \003(\0132 .vplex.vsDirectory."
    "DatasetDetail\"}\n\026GetDatasetDetailsInput\022"
    "/\n\007session\030\001 \002(\0132\036.vplex.vsDirectory.Ses"
    "sionInfo\022\016\n\006userId\030\002 \002(\006\022\021\n\tdatasetId\030\003 "
    "\002(\006\022\017\n\007version\030\004 \001(\t\"{\n\027GetDatasetDetail"
    "sOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirecto"
    "ry.Error\0227\n\rdatasetDetail\030\002 \001(\0132 .vplex."
    "vsDirectory.DatasetDetail\"\311\001\n\017AddDataSet"
    "Input\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirecto"
    "ry.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\023\n\013datase"
    "tName\030\003 \002(\t\0225\n\rdatasetTypeId\030\004 \002(\0162\036.vpl"
    "ex.vsDirectory.DatasetType\022\030\n\020storageClu"
    "sterId\030\005 \001(\006\022\017\n\007version\030\006 \001(\t\"N\n\020AddData"
    "SetOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirec"
    "tory.Error\022\021\n\tdatasetId\030\002 \001(\006\"\222\001\n\025AddCam"
    "eraDatasetInput\022/\n\007session\030\001 \002(\0132\036.vplex"
    ".vsDirectory.SessionInfo\022\016\n\006userId\030\002 \002(\006"
    "\022\023\n\013datasetName\030\003 \002(\t\022\022\n\ncreatedFor\030\004 \002("
    "\t\022\017\n\007version\030\005 \001(\t\"T\n\026AddCameraDatasetOu"
    "tput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory."
    "Error\022\021\n\tdatasetId\030\002 \001(\006\"\216\001\n\022DeleteDataS"
    "etInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirec"
    "tory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\021\n\tdata"
    "setId\030\003 \001(\006\022\023\n\013datasetName\030\004 \001(\t\022\017\n\007vers"
    "ion\030\005 \001(\t\">\n\023DeleteDataSetOutput\022\'\n\005erro"
    "r\030\001 \002(\0132\030.vplex.vsDirectory.Error\"\246\001\n\022Re"
    "nameDataSetInput\022/\n\007session\030\001 \002(\0132\036.vple"
    "x.vsDirectory.SessionInfo\022\016\n\006userId\030\002 \002("
    "\006\022\021\n\tdatasetId\030\003 \001(\006\022\023\n\013datasetName\030\004 \001("
    "\t\022\026\n\016datasetNameNew\030\005 \002(\t\022\017\n\007version\030\006 \001"
    "(\t\">\n\023RenameDataSetOutput\022\'\n\005error\030\001 \002(\013"
    "2\030.vplex.vsDirectory.Error\"\223\001\n\024SetDataSe"
    "tCacheInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsD"
    "irectory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\021\n\t"
    "datasetId\030\003 \002(\006\022\026\n\016cacheDatasetId\030\004 \001(\006\022"
    "\017\n\007version\030\005 \001(\t\"@\n\025SetDataSetCacheOutpu"
    "t\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Err"
    "or\"\210\001\n\"RemoveDeviceFromSubscriptionsInpu"
    "t\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirectory.S"
    "essionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003"
    " \002(\006\022\017\n\007version\030\004 \001(\t\"N\n#RemoveDeviceFro"
    "mSubscriptionsOutput\022\'\n\005error\030\001 \002(\0132\030.vp"
    "lex.vsDirectory.Error\"|\n\026ListSubscriptio"
    "nsInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirec"
    "tory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010devi"
    "ceId\030\003 \002(\006\022\017\n\007version\030\004 \001(\t\"z\n\027ListSubsc"
    "riptionsOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vs"
    "Directory.Error\0226\n\rsubscriptions\030\002 \003(\0132\037"
    ".vplex.vsDirectory.Subscription\"\263\001\n\025AddS"
    "ubscriptionsInput\022/\n\007session\030\001 \002(\0132\036.vpl"
    "ex.vsDirectory.SessionInfo\022\016\n\006userId\030\002 \002"
    "(\006\022\020\n\010deviceId\030\003 \002(\006\0226\n\rsubscriptions\030\004 "
    "\003(\0132\037.vplex.vsDirectory.Subscription\022\017\n\007"
    "version\030\005 \001(\t\"A\n\026AddSubscriptionsOutput\022"
    "\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Error"
    "\"\274\001\n\037AddUserDatasetSubscriptionInput\022/\n\007"
    "session\030\001 \002(\0132\036.vplex.vsDirectory.Sessio"
    "nInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006\022"
    "\021\n\tdatasetId\030\004 \002(\006\022\022\n\ndeviceRoot\030\005 \001(\t\022\016"
    "\n\006filter\030\006 \001(\t\022\017\n\007version\030\007 \001(\t\"K\n AddUs"
    "erDatasetSubscriptionOutput\022\'\n\005error\030\001 \002"
    "(\0132\030.vplex.vsDirectory.Error\"\267\001\n\032AddCame"
    "raSubscriptionInput\022/\n\007session\030\001 \002(\0132\036.v"
    "plex.vsDirectory.SessionInfo\022\016\n\006userId\030\002"
    " \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\021\n\tdatasetId\030\004 \002("
    "\006\022\022\n\ndeviceRoot\030\005 \001(\t\022\016\n\006filter\030\006 \001(\t\022\017\n"
    "\007version\030\007 \001(\t\"F\n\033AddCameraSubscriptionO"
    "utput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory"
    ".Error\"\314\002\n\033AddDatasetSubscriptionInput\022/"
    "\n\007session\030\001 \002(\0132\036.vplex.vsDirectory.Sess"
    "ionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \002("
    "\006\022\021\n\tdatasetId\030\004 \002(\006\0223\n\013datasetType\030\005 \001("
    "\0162\036.vplex.vsDirectory.DatasetType\022:\n\004rol"
    "e\030\006 \001(\0162#.vplex.vsDirectory.Subscription"
    "Role:\007GENERAL\022\022\n\ndeviceRoot\030\007 \001(\t\022\016\n\006fil"
    "ter\030\010 \001(\t\022\017\n\007maxSize\030\t \001(\006\022\020\n\010maxFiles\030\n"
    " \001(\006\022\017\n\007version\030\013 \001(\t\"G\n\034AddDatasetSubsc"
    "riptionOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsD"
    "irectory.Error\"\250\001\n\030DeleteSubscriptionsIn"
    "put\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirectory"
    ".SessionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId"
    "\030\003 \002(\006\022\024\n\014datasetNames\030\004 \003(\t\022\022\n\ndatasetI"
    "ds\030\005 \003(\006\022\017\n\007version\030\006 \001(\t\"D\n\031DeleteSubsc"
    "riptionsOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vs"
    "Directory.Error\"\273\001\n\035UpdateSubscriptionFi"
    "lterInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsDir"
    "ectory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010de"
    "viceId\030\003 \002(\006\022\023\n\013datasetName\030\004 \001(\t\022\021\n\tdat"
    "asetId\030\005 \001(\006\022\016\n\006filter\030\006 \001(\t\022\017\n\007version\030"
    "\007 \001(\t\"I\n\036UpdateSubscriptionFilterOutput\022"
    "\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Error"
    "\"\336\001\n\035UpdateSubscriptionLimitsInput\022/\n\007se"
    "ssion\030\001 \002(\0132\036.vplex.vsDirectory.SessionI"
    "nfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\023\n"
    "\013datasetName\030\004 \001(\t\022\021\n\tdatasetId\030\005 \001(\006\022\016\n"
    "\006filter\030\006 \001(\t\022\017\n\007maxSize\030\007 \001(\006\022\020\n\010maxFil"
    "es\030\010 \001(\006\022\017\n\007version\030\t \001(\t\"I\n\036UpdateSubsc"
    "riptionLimitsOutput\022\'\n\005error\030\001 \002(\0132\030.vpl"
    "ex.vsDirectory.Error\"\212\001\n$GetSubscription"
    "DetailsForDeviceInput\022/\n\007session\030\001 \002(\0132\036"
    ".vplex.vsDirectory.SessionInfo\022\016\n\006userId"
    "\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\017\n\007version\030\004 \001("
    "\t\"\210\001\n%GetSubscriptionDetailsForDeviceOut"
    "put\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.E"
    "rror\0226\n\rsubscriptions\030\002 \003(\0132\037.vplex.vsDi"
    "rectory.Subscription\"w\n\021GetCloudInfoInpu"
    "t\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirectory.S"
    "essionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003"
    " \002(\006\022\017\n\007version\030\004 \001(\t\"\225\002\n\022GetCloudInfoOu"
    "tput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory."
    "Error\022.\n\007devices\030\002 \003(\0132\035.vplex.vsDirecto"
    "ry.DeviceInfo\0222\n\010datasets\030\003 \003(\0132 .vplex."
    "vsDirectory.DatasetDetail\0226\n\rsubscriptio"
    "ns\030\004 \003(\0132\037.vplex.vsDirectory.Subscriptio"
    "n\022:\n\022storageAssignments\030\005 \003(\0132\036.vplex.vs"
    "Directory.UserStorage\"\237\001\n\032GetSubscribedD"
    "atasetsInput\022/\n\007session\030\001 \002(\0132\036.vplex.vs"
    "Directory.SessionInfo\022\020\n\010deviceId\030\002 \002(\006\022"
    "-\n\004l10n\030\003 \002(\0132\037.vplex.vsDirectory.Locali"
    "zation\022\017\n\007version\030\004 \001(\t\"\254\001\n\033GetSubscribe"
    "dDatasetsOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.v"
    "sDirectory.Error\022/\n\ttitleData\030\002 \003(\0132\034.vp"
    "lex.vsDirectory.TitleData\0223\n\013datasetData"
    "\030\003 \003(\0132\036.vplex.vsDirectory.DatasetData\"\225"
    "\001\n\033GetSubscriptionDetailsInput\022/\n\007sessio"
    "n\030\001 \002(\0132\036.vplex.vsDirectory.SessionInfo\022"
    "\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\022\n\ndat"
    "asetIds\030\004 \003(\006\022\017\n\007version\030\005 \001(\t\"\177\n\034GetSub"
    "scriptionDetailsOutput\022\'\n\005error\030\001 \002(\0132\030."
    "vplex.vsDirectory.Error\0226\n\rsubscriptions"
    "\030\002 \003(\0132\037.vplex.vsDirectory.Subscription\""
    "\225\002\n\017LinkDeviceInput\022/\n\007session\030\001 \002(\0132\036.v"
    "plex.vsDirectory.SessionInfo\022\016\n\006userId\030\002"
    " \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\023\n\013deviceClass\030\004 "
    "\002(\t\022\022\n\ndeviceName\030\005 \001(\t\022\016\n\006isAcer\030\006 \001(\010\022"
    "\021\n\thasCamera\030\007 \001(\010\022\021\n\tosVersion\030\010 \001(\t\022\027\n"
    "\017protocolVersion\030\t \001(\t\022\017\n\007version\030\n \001(\t\022"
    "\023\n\013modelNumber\030\013 \001(\t\022\021\n\tbuildInfo\030\014 \001(\t\""
    ";\n\020LinkDeviceOutput\022\'\n\005error\030\001 \002(\0132\030.vpl"
    "ex.vsDirectory.Error\"w\n\021UnlinkDeviceInpu"
    "t\022/\n\007session\030\001 \002(\0132\036.vplex.vsDirectory.S"
    "essionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003"
    " \002(\006\022\017\n\007version\030\004 \001(\t\"=\n\022UnlinkDeviceOut"
    "put\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.E"
    "rror\"\214\001\n\022SetDeviceNameInput\022/\n\007session\030\001"
    " \002(\0132\036.vplex.vsDirectory.SessionInfo\022\016\n\006"
    "userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\022\n\ndevice"
    "Name\030\004 \002(\t\022\017\n\007version\030\005 \001(\t\">\n\023SetDevice"
    "NameOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDire"
    "ctory.Error\"\343\001\n\025UpdateDeviceInfoInput\022/\n"
    "\007session\030\001 \002(\0132\036.vplex.vsDirectory.Sessi"
    "onInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006"
    "\022\022\n\ndeviceName\030\004 \001(\t\022\021\n\tosVersion\030\005 \001(\t\022"
    "\027\n\017protocolVersion\030\006 \001(\t\022\017\n\007version\030\007 \001("
    "\t\022\023\n\013modelNumber\030\010 \001(\t\022\021\n\tbuildInfo\030\t \001("
    "\t\"A\n\026UpdateDeviceInfoOutput\022\'\n\005error\030\001 \002"
    "(\0132\030.vplex.vsDirectory.Error\"}\n\027GetDevic"
    "eLinkStateInput\022/\n\007session\030\001 \002(\0132\036.vplex"
    ".vsDirectory.SessionInfo\022\016\n\006userId\030\002 \002(\006"
    "\022\020\n\010deviceId\030\003 \002(\006\022\017\n\007version\030\004 \001(\t\"S\n\030G"
    "etDeviceLinkStateOutput\022\'\n\005error\030\001 \002(\0132\030"
    ".vplex.vsDirectory.Error\022\016\n\006linked\030\002 \002(\010"
    "\"x\n\022GetDeviceNameInput\022/\n\007session\030\001 \002(\0132"
    "\036.vplex.vsDirectory.SessionInfo\022\016\n\006userI"
    "d\030\002 \002(\006\022\020\n\010deviceId\030\003 \002(\006\022\017\n\007version\030\004 \001"
    "(\t\"R\n\023GetDeviceNameOutput\022\'\n\005error\030\001 \002(\013"
    "2\030.vplex.vsDirectory.Error\022\022\n\ndeviceName"
    "\030\002 \001(\t\"i\n\025GetLinkedDevicesInput\022/\n\007sessi"
    "on\030\001 \002(\0132\036.vplex.vsDirectory.SessionInfo"
    "\022\016\n\006userId\030\002 \002(\006\022\017\n\007version\030\003 \001(\t\"q\n\026Get"
    "LinkedDevicesOutput\022\'\n\005error\030\001 \002(\0132\030.vpl"
    "ex.vsDirectory.Error\022.\n\007devices\030\002 \003(\0132\035."
    "vplex.vsDirectory.DeviceInfo\"\221\001\n\024GetLogi"
    "nSessionInput\022/\n\007session\030\001 \002(\0132\036.vplex.v"
    "sDirectory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\020"
    "\n\010deviceId\030\003 \001(\006\022\025\n\rsessionHandle\030\004 \002(\006\022"
    "\017\n\007version\030\005 \001(\t\"g\n\025GetLoginSessionOutpu"
    "t\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Err"
    "or\022\016\n\006userId\030\002 \001(\006\022\025\n\rserviceTicket\030\003 \001("
    "\014\"\250\003\n\036CreatePersonalStorageNodeInput\022/\n\007"
    "session\030\001 \002(\0132\036.vplex.vsDirectory.Sessio"
    "nInfo\022\016\n\006userId\030\002 \002(\006\022\021\n\tclusterId\030\003 \002(\006"
    "\022\023\n\013clusterName\030\004 \002(\t\022\030\n\020virtDriveCapabl"
    "e\030\005 \001(\010\022\032\n\022mediaServerCapable\030\006 \001(\010\022!\n\031f"
    "eatureMediaServerCapable\030\007 \001(\010\022\037\n\027featur"
    "eVirtDriveCapable\030\010 \001(\010\022&\n\036featureRemote"
    "FileAccessCapable\030\t \001(\010\022#\n\033featureFSData"
    "setTypeCapable\030\n \001(\010\022\017\n\007version\030\013 \001(\t\022\036\n"
    "\026featureVirtSyncCapable\030\014 \001(\010\022%\n\035feature"
    "MyStorageServerCapable\030\r \001(\010\"J\n\037CreatePe"
    "rsonalStorageNodeOutput\022\'\n\005error\030\001 \002(\0132\030"
    ".vplex.vsDirectory.Error\"\200\001\n\031GetAsyncNot"
    "iceServerInput\022/\n\007session\030\001 \002(\0132\036.vplex."
    "vsDirectory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022"
    "\021\n\tclusterId\030\003 \002(\006\022\017\n\007version\030\004 \001(\t\"w\n\032G"
    "etAsyncNoticeServerOutput\022\'\n\005error\030\001 \002(\013"
    "2\030.vplex.vsDirectory.Error\022\017\n\007address\030\002 "
    "\001(\t\022\014\n\004port\030\003 \001(\005\022\021\n\tclusterId\030\004 \001(\006\"\256\003\n"
    " UpdateStorageNodeConnectionInput\022/\n\007ses"
    "sion\030\001 \002(\0132\036.vplex.vsDirectory.SessionIn"
    "fo\022\016\n\006userId\030\002 \002(\006\022\021\n\tclusterId\030\003 \002(\006\022\024\n"
    "\014reportedName\030\004 \002(\t\022\024\n\014reportedPort\030\005 \002("
    "\005\022\030\n\020reportedHTTPPort\030\006 \002(\005\022\026\n\016proxyClus"
    "terId\030\007 \001(\006\022\035\n\025proxyConnectionCookie\030\010 \001"
    "(\005\022\033\n\023reportedClearFiPort\030\t \001(\005\022!\n\031repor"
    "tedClearFiSecurePort\030\n \001(\005\022\024\n\014accessHand"
    "le\030\013 \001(\006\022\024\n\014accessTicket\030\014 \001(\014\022<\n\raccess"
    "Tickets\030\r \003(\0132%.vplex.vsDirectory.Device"
    "AccessTicket\022\017\n\007version\030\016 \001(\t\"L\n!UpdateS"
    "torageNodeConnectionOutput\022\'\n\005error\030\001 \002("
    "\0132\030.vplex.vsDirectory.Error\"\211\003\n\036UpdateSt"
    "orageNodeFeaturesInput\022/\n\007session\030\001 \002(\0132"
    "\036.vplex.vsDirectory.SessionInfo\022\016\n\006userI"
    "d\030\002 \002(\006\022\021\n\tclusterId\030\003 \002(\006\022\023\n\013isVirtDriv"
    "e\030\004 \001(\010\022\025\n\risMediaServer\030\005 \001(\010\022!\n\031featur"
    "eMediaServerEnabled\030\006 \001(\010\022\037\n\027featureVirt"
    "DriveEnabled\030\007 \001(\010\022&\n\036featureRemoteFileA"
    "ccessEnabled\030\010 \001(\010\022#\n\033featureFSDatasetTy"
    "peEnabled\030\t \001(\010\022\017\n\007version\030\n \001(\t\022\036\n\026feat"
    "ureVirtSyncEnabled\030\013 \001(\010\022%\n\035featureMySto"
    "rageServerEnabled\030\014 \001(\010\"J\n\037UpdateStorage"
    "NodeFeaturesOutput\022\'\n\005error\030\001 \002(\0132\030.vple"
    "x.vsDirectory.Error\"\230\001\n\032GetPSNDatasetLoc"
    "ationInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsDi"
    "rectory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\025\n\rd"
    "atasetUserId\030\003 \002(\006\022\021\n\tdatasetId\030\004 \002(\006\022\017\n"
    "\007version\030\005 \001(\t\"`\n\033GetPSNDatasetLocationO"
    "utput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory"
    ".Error\022\030\n\020storageClusterId\030\002 \001(\006\"\331\001\n\033Upd"
    "atePSNDatasetStatusInput\022/\n\007session\030\001 \002("
    "\0132\036.vplex.vsDirectory.SessionInfo\022\016\n\006use"
    "rId\030\002 \002(\006\022\025\n\rdatasetUserId\030\003 \002(\006\022\021\n\tdata"
    "setId\030\004 \002(\006\022\021\n\tclusterId\030\005 \002(\006\022\023\n\013datase"
    "tSize\030\006 \002(\006\022\026\n\016datasetVersion\030\007 \002(\006\022\017\n\007v"
    "ersion\030\010 \001(\t\"G\n\034UpdatePSNDatasetStatusOu"
    "tput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory."
    "Error\"\252\001\n\023AddUserStorageInput\022/\n\007session"
    "\030\001 \002(\0132\036.vplex.vsDirectory.SessionInfo\022\016"
    "\n\006userId\030\002 \002(\006\022\030\n\020storageClusterId\030\003 \002(\006"
    "\022\023\n\013storageName\030\004 \002(\t\022\022\n\nusageLimit\030\005 \002("
    "\006\022\017\n\007version\030\006 \001(\t\"\?\n\024AddUserStorageOutp"
    "ut\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Er"
    "ror\"\204\001\n\026DeleteUserStorageInput\022/\n\007sessio"
    "n\030\001 \002(\0132\036.vplex.vsDirectory.SessionInfo\022"
    "\016\n\006userId\030\002 \002(\006\022\030\n\020storageClusterId\030\003 \002("
    "\006\022\017\n\007version\030\004 \001(\t\"B\n\027DeleteUserStorageO"
    "utput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory"
    ".Error\"\240\001\n\032ChangeUserStorageNameInput\022/\n"
    "\007session\030\001 \002(\0132\036.vplex.vsDirectory.Sessi"
    "onInfo\022\016\n\006userId\030\002 \002(\006\022\030\n\020storageCluster"
    "Id\030\003 \002(\006\022\026\n\016newStorageName\030\004 \002(\t\022\017\n\007vers"
    "ion\030\005 \001(\t\"F\n\033ChangeUserStorageNameOutput"
    "\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Erro"
    "r\"\233\001\n\033ChangeUserStorageQuotaInput\022/\n\007ses"
    "sion\030\001 \002(\0132\036.vplex.vsDirectory.SessionIn"
    "fo\022\016\n\006userId\030\002 \002(\006\022\030\n\020storageClusterId\030\003"
    " \002(\006\022\020\n\010newLimit\030\004 \002(\006\022\017\n\007version\030\005 \001(\t\""
    "G\n\034ChangeUserStorageQuotaOutput\022\'\n\005error"
    "\030\001 \002(\0132\030.vplex.vsDirectory.Error\"z\n\024List"
    "UserStorageInput\022/\n\007session\030\001 \002(\0132\036.vple"
    "x.vsDirectory.SessionInfo\022\016\n\006userId\030\002 \002("
    "\006\022\020\n\010deviceId\030\003 \001(\006\022\017\n\007version\030\004 \001(\t\"|\n\025"
    "ListUserStorageOutput\022\'\n\005error\030\001 \002(\0132\030.v"
    "plex.vsDirectory.Error\022:\n\022storageAssignm"
    "ents\030\002 \003(\0132\036.vplex.vsDirectory.UserStora"
    "ge\"\210\001\n\032GetUserStorageAddressInput\022/\n\007ses"
    "sion\030\001 \002(\0132\036.vplex.vsDirectory.SessionIn"
    "fo\022\016\n\006userId\030\002 \002(\006\022\030\n\020storageClusterId\030\003"
    " \002(\006\022\017\n\007version\030\004 \001(\t\"\327\001\n\022UserStorageAdd"
    "ress\022\026\n\016direct_address\030\001 \001(\t\022\023\n\013direct_p"
    "ort\030\002 \001(\005\022\025\n\rproxy_address\030\003 \001(\t\022\022\n\nprox"
    "y_port\030\004 \001(\005\022\037\n\027internal_direct_address\030"
    "\005 \001(\t\022\032\n\022direct_secure_port\030\006 \001(\005\022\025\n\racc"
    "ess_handle\030\007 \001(\006\022\025\n\raccess_ticket\030\010 \001(\014\""
    "\377\001\n\033GetUserStorageAddressOutput\022\'\n\005error"
    "\030\001 \002(\0132\030.vplex.vsDirectory.Error\022\025\n\rdire"
    "ctAddress\030\002 \001(\t\022\022\n\ndirectPort\030\003 \001(\005\022\024\n\014p"
    "roxyAddress\030\004 \001(\t\022\021\n\tproxyPort\030\005 \001(\005\022\035\n\025"
    "internalDirectAddress\030\006 \001(\t\022\030\n\020directSec"
    "urePort\030\007 \001(\005\022\024\n\014accessHandle\030\010 \001(\006\022\024\n\014a"
    "ccessTicket\030\t \001(\014\"\267\001\n AssignUserDatacent"
    "erStorageInput\022\016\n\006userId\030\001 \002(\006\022\016\n\006region"
    "\030\002 \002(\t\022\022\n\nusageLimit\030\003 \002(\006\022\030\n\020storageClu"
    "sterId\030\004 \001(\006\022\030\n\020primaryStorageId\030\005 \001(\006\022\032"
    "\n\022secondaryStorageId\030\006 \001(\006\022\017\n\007version\030\007 "
    "\001(\t\"\207\001\n!AssignUserDatacenterStorageOutpu"
    "t\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Err"
    "or\0229\n\021storageAssignment\030\002 \001(\0132\036.vplex.vs"
    "Directory.UserStorage\"S\n\035GetStorageUnitF"
    "orDatasetInput\022\016\n\006userId\030\001 \002(\006\022\021\n\tdatase"
    "tId\030\002 \002(\006\022\017\n\007version\030\003 \001(\t\"\262\001\n\036GetStorag"
    "eUnitForDatasetOutput\022\'\n\005error\030\001 \002(\0132\030.v"
    "plex.vsDirectory.Error\022\030\n\020storageCluster"
    "Id\030\002 \001(\006\022\030\n\020primaryStorageId\030\003 \001(\006\022\032\n\022se"
    "condaryStorageId\030\004 \001(\006\022\027\n\017backupStorageI"
    "d\030\005 \001(\006\"O\n\026GetStoredDatasetsInput\022\021\n\tclu"
    "sterId\030\001 \002(\006\022\021\n\tstorageId\030\002 \002(\006\022\017\n\007versi"
    "on\030\003 \001(\t\"v\n\027GetStoredDatasetsOutput\022\'\n\005e"
    "rror\030\001 \002(\0132\030.vplex.vsDirectory.Error\0222\n\010"
    "datasets\030\002 \003(\0132 .vplex.vsDirectory.Store"
    "dDataset\"G\n!GetProxyConnectionForCluster"
    "Input\022\021\n\tclusterId\030\001 \002(\006\022\017\n\007version\030\002 \001("
    "\t\"]\n\"GetProxyConnectionForClusterOutput\022"
    "\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Error"
    "\022\016\n\006cookie\030\002 \001(\007\"L\n\025SendMessageToPSNInpu"
    "t\022\021\n\tclusterId\030\001 \002(\006\022\017\n\007message\030\002 \002(\014\022\017\n"
    "\007version\030\003 \001(\t\"A\n\026SendMessageToPSNOutput"
    "\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Erro"
    "r\"\206\001\n ChangeStorageUnitForDatasetInput\022\016"
    "\n\006userId\030\001 \002(\006\022\021\n\tdatasetId\030\002 \002(\006\022\030\n\020cur"
    "rentStorageId\030\003 \002(\006\022\024\n\014newStorageId\030\004 \002("
    "\006\022\017\n\007version\030\005 \001(\t\"_\n!ChangeStorageUnitF"
    "orDatasetOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.v"
    "sDirectory.Error\022\021\n\tstorageId\030\002 \001(\006\"y\n\031C"
    "reateStorageClusterInput\022\021\n\tclusterId\030\001 "
    "\002(\006\022\023\n\013clusterName\030\002 \002(\t\022\023\n\013clusterType\030"
    "\003 \001(\005\022\016\n\006region\030\004 \001(\t\022\017\n\007version\030\005 \001(\t\"E"
    "\n\032CreateStorageClusterOutput\022\'\n\005error\030\001 "
    "\002(\0132\030.vplex.vsDirectory.Error\"D\n\036GetMssI"
    "nstancesForClusterInput\022\021\n\tclusterId\030\001 \002"
    "(\006\022\017\n\007version\030\002 \001(\t\"~\n\037GetMssInstancesFo"
    "rClusterOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vs"
    "Directory.Error\0222\n\014mssInstances\030\002 \003(\0132\034."
    "vplex.vsDirectory.MssDetail\"D\n\036GetStorag"
    "eUnitsForClusterInput\022\021\n\tclusterId\030\001 \002(\006"
    "\022\017\n\007version\030\002 \001(\t\"\206\001\n\037GetStorageUnitsFor"
    "ClusterOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsD"
    "irectory.Error\022:\n\014storageUnits\030\002 \003(\0132$.v"
    "plex.vsDirectory.StorageUnitDetail\"D\n\036Ge"
    "tBrsInstancesForClusterInput\022\021\n\tclusterI"
    "d\030\001 \002(\006\022\017\n\007version\030\002 \001(\t\"~\n\037GetBrsInstan"
    "cesForClusterOutput\022\'\n\005error\030\001 \002(\0132\030.vpl"
    "ex.vsDirectory.Error\0222\n\014brsInstances\030\002 \003"
    "(\0132\034.vplex.vsDirectory.BrsDetail\"G\n!GetB"
    "rsStorageUnitsForClusterInput\022\021\n\tcluster"
    "Id\030\001 \002(\006\022\017\n\007version\030\002 \001(\t\"\217\001\n\"GetBrsStor"
    "ageUnitsForClusterOutput\022\'\n\005error\030\001 \002(\0132"
    "\030.vplex.vsDirectory.Error\022@\n\017brsStorageU"
    "nits\030\002 \003(\0132\'.vplex.vsDirectory.BrsStorag"
    "eUnitDetail\"\277\001\n\'ChangeStorageAssignments"
    "ForDatasetInput\022\016\n\006userId\030\001 \002(\006\022\021\n\tdatas"
    "etId\030\002 \002(\006\022\021\n\tclusterId\030\003 \002(\006\022\030\n\020primary"
    "StorageId\030\004 \002(\006\022\032\n\022secondaryStorageId\030\005 "
    "\002(\006\022\027\n\017backupStorageId\030\006 \002(\006\022\017\n\007version\030"
    "\007 \001(\t\"S\n(ChangeStorageAssignmentsForData"
    "setOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirec"
    "tory.Error\"\275\001\n\030UpdateDatasetStatusInput\022"
    "\016\n\006userId\030\001 \002(\006\022\021\n\tdatasetId\030\002 \002(\006\022\021\n\tcl"
    "usterId\030\003 \002(\006\022\021\n\tstorageId\030\004 \002(\006\022\023\n\013data"
    "setSize\030\005 \002(\006\022\026\n\016datasetVersion\030\006 \002(\006\022\017\n"
    "\007version\030\007 \001(\t\022\032\n\022ansNotificationOff\030\010 \001"
    "(\010\"D\n\031UpdateDatasetStatusOutput\022\'\n\005error"
    "\030\001 \002(\0132\030.vplex.vsDirectory.Error\"\230\001\n\036Upd"
    "ateDatasetBackupStatusInput\022\016\n\006userId\030\001 "
    "\002(\006\022\021\n\tdatasetId\030\002 \002(\006\022\021\n\tclusterId\030\003 \002("
    "\006\022\027\n\017backupStorageId\030\004 \002(\006\022\026\n\016datasetVer"
    "sion\030\005 \002(\006\022\017\n\007version\030\006 \001(\t\"J\n\037UpdateDat"
    "asetBackupStatusOutput\022\'\n\005error\030\001 \002(\0132\030."
    "vplex.vsDirectory.Error\"\231\001\n\037UpdateDatase"
    "tArchiveStatusInput\022\016\n\006userId\030\001 \002(\006\022\021\n\td"
    "atasetId\030\002 \002(\006\022\021\n\tclusterId\030\003 \002(\006\022\027\n\017bac"
    "kupStorageId\030\004 \002(\006\022\026\n\016datasetVersion\030\005 \002"
    "(\006\022\017\n\007version\030\006 \001(\t\"K\n UpdateDatasetArch"
    "iveStatusOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.v"
    "sDirectory.Error\"K\n\025GetDatasetStatusInpu"
    "t\022\016\n\006userId\030\001 \002(\006\022\021\n\tdatasetId\030\002 \002(\006\022\017\n\007"
    "version\030\003 \001(\t\"\277\003\n\026GetDatasetStatusOutput"
    "\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Erro"
    "r\022\021\n\tclusterId\030\002 \001(\006\022\030\n\020primaryStorageId"
    "\030\003 \001(\006\022\032\n\022primaryDatasetSize\030\004 \001(\006\022\035\n\025pr"
    "imaryDatasetVersion\030\005 \001(\006\022\032\n\022secondarySt"
    "orageId\030\006 \001(\006\022\034\n\024secondaryDatasetSize\030\007 "
    "\001(\006\022\037\n\027secondaryDatasetVersion\030\010 \001(\006\022\027\n\017"
    "backupStorageId\030\t \001(\006\0223\n\013datasetType\030\n \001"
    "(\0162\036.vplex.vsDirectory.DatasetType\022\027\n\017de"
    "leteDataAfter\030\013 \001(\006\022\034\n\024backupDatasetVers"
    "ion\030\014 \001(\006\022\035\n\025archiveDatasetVersion\030\r \001(\006"
    "\022\025\n\rsuspendedFlag\030\016 \001(\010\"\255\001\n\025StoreDeviceE"
    "ventInput\022/\n\007session\030\001 \002(\0132\036.vplex.vsDir"
    "ectory.SessionInfo\022\016\n\006userId\030\002 \002(\006\022\020\n\010de"
    "viceId\030\003 \002(\006\0220\n\neventInfos\030\004 \003(\0132\034.vplex"
    ".vsDirectory.EventInfo\022\017\n\007version\030\005 \001(\t\""
    "\203\001\n\026StoreDeviceEventOutput\022\'\n\005error\030\001 \002("
    "\0132\030.vplex.vsDirectory.Error\022\024\n\014successCo"
    "unt\030\002 \001(\007\022\022\n\nerrorCount\030\003 \001(\007\022\026\n\016nextRep"
    "ortTime\030\004 \001(\007\"\214\001\n\tEventInfo\022\r\n\005appId\030\001 \002"
    "(\t\022\017\n\007eventId\030\002 \002(\t\022\021\n\tstartTime\030\003 \002(\006\022\017"
    "\n\007endTime\030\004 \001(\006\022\022\n\neventCount\030\005 \001(\007\022\024\n\014l"
    "imitReached\030\006 \001(\010\022\021\n\teventInfo\030\007 \001(\t\"Q\n\033"
    "GetLinkedDatasetStatusInput\022\016\n\006userId\030\001 "
    "\002(\006\022\021\n\tdatasetId\030\002 \002(\006\022\017\n\007version\030\003 \001(\t\""
    "\210\003\n\034GetLinkedDatasetStatusOutput\022\'\n\005erro"
    "r\030\001 \002(\0132\030.vplex.vsDirectory.Error\022\027\n\017lin"
    "kedDatasetId\030\002 \001(\006\022\021\n\tclusterId\030\003 \001(\006\022\030\n"
    "\020primaryStorageId\030\004 \001(\006\022\032\n\022primaryDatase"
    "tSize\030\005 \001(\006\022\035\n\025primaryDatasetVersion\030\006 \001"
    "(\006\022\032\n\022secondaryStorageId\030\007 \001(\006\022\034\n\024second"
    "aryDatasetSize\030\010 \001(\006\022\037\n\027secondaryDataset"
    "Version\030\t \001(\006\022\027\n\017backupStorageId\030\n \001(\006\0223"
    "\n\013datasetType\030\013 \001(\0162\036.vplex.vsDirectory."
    "DatasetType\022\025\n\rsuspendedFlag\030\014 \001(\010\"M\n\027Ge"
    "tUserQuotaStatusInput\022\016\n\006userId\030\001 \002(\006\022\021\n"
    "\tclusterId\030\002 \002(\006\022\017\n\007version\030\003 \001(\t\"m\n\030Get"
    "UserQuotaStatusOutput\022\'\n\005error\030\001 \002(\0132\030.v"
    "plex.vsDirectory.Error\022\022\n\nquotaLimit\030\002 \001"
    "(\006\022\024\n\014currentUsage\030\003 \001(\006\"\211\001\n\030GetDatasets"
    "ToBackupInput\022\027\n\017backupStorageId\030\001 \002(\006\022\016"
    "\n\006userId\030\002 \002(\006\022\021\n\tdatasetId\030\003 \002(\006\022\r\n\005cou"
    "nt\030\004 \002(\007\022\021\n\tclusterId\030\005 \001(\006\022\017\n\007version\030\006"
    " \001(\t\"\177\n\031GetDatasetsToBackupOutput\022\'\n\005err"
    "or\030\001 \002(\0132\030.vplex.vsDirectory.Error\0229\n\020da"
    "tasetsToBackup\030\002 \003(\0132\037.vplex.vsDirectory"
    ".BackupStatus\"R\n\023GetBRSHostNameInput\022\021\n\t"
    "clusterId\030\001 \002(\006\022\027\n\017backupStorageId\030\002 \002(\006"
    "\022\017\n\007version\030\003 \001(\t\"Q\n\024GetBRSHostNameOutpu"
    "t\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory.Err"
    "or\022\020\n\010hostName\030\002 \001(\t\"U\n GetBackupStorage"
    "UnitsForBrsInput\022\021\n\tclusterId\030\001 \002(\006\022\r\n\005b"
    "rsId\030\002 \002(\006\022\017\n\007version\030\003 \001(\t\"f\n!GetBackup"
    "StorageUnitsForBrsOutput\022\'\n\005error\030\001 \002(\0132"
    "\030.vplex.vsDirectory.Error\022\030\n\020backupStora"
    "geIds\030\002 \003(\006\"\243\001\n\027GetUpdatedDatasetsInput\022"
    "\017\n\007version\030\001 \002(\t\022\021\n\tclusterId\030\002 \002(\006\022\021\n\ts"
    "tartTime\030\003 \002(\006\022\017\n\007endTime\030\004 \002(\006\022\r\n\005count"
    "\030\005 \002(\007\0221\n\007filters\030\006 \003(\0132 .vplex.vsDirect"
    "ory.DatasetFilter\"x\n\030GetUpdatedDatasetsO"
    "utput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDirectory"
    ".Error\0223\n\010datasets\030\002 \003(\0132!.vplex.vsDirec"
    "tory.UpdatedDataset\"\252\001\n#AddDatasetArchiv"
    "eStorageDeviceInput\022\021\n\tdatasetId\030\001 \002(\006\022\036"
    "\n\026archiveStorageDeviceId\030\002 \003(\006\022/\n\007sessio"
    "n\030\003 \002(\0132\036.vplex.vsDirectory.SessionInfo\022"
    "\016\n\006userId\030\004 \002(\006\022\017\n\007version\030\005 \001(\t\"O\n$AddD"
    "atasetArchiveStorageDeviceOutput\022\'\n\005erro"
    "r\030\001 \002(\0132\030.vplex.vsDirectory.Error\"\255\001\n&Re"
    "moveDatasetArchiveStorageDeviceInput\022\021\n\t"
    "datasetId\030\001 \002(\006\022\036\n\026archiveStorageDeviceI"
    "d\030\002 \003(\006\022/\n\007session\030\003 \002(\0132\036.vplex.vsDirec"
    "tory.SessionInfo\022\016\n\006userId\030\004 \002(\006\022\017\n\007vers"
    "ion\030\005 \001(\t\"R\n\'RemoveDatasetArchiveStorage"
    "DeviceOutput\022\'\n\005error\030\001 \002(\0132\030.vplex.vsDi"
    "rectory.Error*\264\002\n\013DatasetType\022\010\n\004USER\020\001\022"
    "\n\n\006CAMERA\020\002\022\014\n\010CLEAR_FI\020\003\022\t\n\005CR_UP\020\004\022\013\n\007"
    "CR_DOWN\020\005\022\007\n\003PIM\020\006\022\t\n\005CACHE\020\007\022\020\n\014PIM_CON"
    "TACTS\020\010\022\016\n\nPIM_EVENTS\020\t\022\r\n\tPIM_NOTES\020\n\022\r"
    "\n\tPIM_TASKS\020\013\022\021\n\rPIM_FAVORITES\020\014\022\t\n\005MEDI"
    "A\020\r\022\022\n\016MEDIA_METADATA\020\016\022\006\n\002FS\020\017\022\016\n\nVIRT_"
    "DRIVE\020\020\022\021\n\rCLEARFI_MEDIA\020\021\022\031\n\025USER_CONTE"
    "NT_METADATA\020\022\022\013\n\007SYNCBOX\020\023\022\007\n\003SBM\020\024\022\007\n\003S"
    "WM\020\025*S\n\tRouteType\022\021\n\rINVALID_ROUTE\020\000\022\023\n\017"
    "DIRECT_INTERNAL\020\001\022\023\n\017DIRECT_EXTERNAL\020\002\022\t"
    "\n\005PROXY\020\003*,\n\014ProtocolType\022\024\n\020INVALID_PRO"
    "TOCOL\020\000\022\006\n\002VS\020\001*e\n\010PortType\022\020\n\014INVALID_P"
    "ORT\020\000\022\r\n\tPORT_VSSI\020\001\022\r\n\tPORT_HTTP\020\002\022\020\n\014P"
    "ORT_CLEARFI\020\003\022\027\n\023PORT_CLEARFI_SECURE\020\004*{"
    "\n\020SubscriptionRole\022\013\n\007GENERAL\020\000\022\014\n\010PRODU"
    "CER\020\001\022\014\n\010CONSUMER\020\002\022\022\n\016CLEARFI_SERVER\020\003\022"
    "\022\n\016CLEARFI_CLIENT\020\004\022\n\n\006WRITER\020\005\022\n\n\006READE"
    "R\020\006B*\n\017igware.vplex.pbB\027VsDirectoryServi"
    "ceTypes", 24927);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vplex_vs_directory_service_types.proto", &protobuf_RegisterTypes);
  APIVersion::default_instance_ = new APIVersion();
  Error::default_instance_ = new Error();
  SessionInfo::default_instance_ = new SessionInfo();
  ETicketData::default_instance_ = new ETicketData();
  Localization::default_instance_ = new Localization();
  TitleData::default_instance_ = new TitleData();
  TitleDetail::default_instance_ = new TitleDetail();
  ContentDetail::default_instance_ = new ContentDetail();
  SaveData::default_instance_ = new SaveData();
  TitleTicket::default_instance_ = new TitleTicket();
  Subscription::default_instance_ = new Subscription();
  SyncDirectory::default_instance_ = new SyncDirectory();
  DatasetData::default_instance_ = new DatasetData();
  DatasetDetail::default_instance_ = new DatasetDetail();
  StoredDataset::default_instance_ = new StoredDataset();
  DeviceInfo::default_instance_ = new DeviceInfo();
  StorageAccessPort::default_instance_ = new StorageAccessPort();
  StorageAccess::default_instance_ = new StorageAccess();
  DeviceAccessTicket::default_instance_ = new DeviceAccessTicket();
  UserStorage::default_instance_ = new UserStorage();
  UpdatedDataset::default_instance_ = new UpdatedDataset();
  DatasetFilter::default_instance_ = new DatasetFilter();
  MssDetail::default_instance_ = new MssDetail();
  StorageUnitDetail::default_instance_ = new StorageUnitDetail();
  BrsDetail::default_instance_ = new BrsDetail();
  BrsStorageUnitDetail::default_instance_ = new BrsStorageUnitDetail();
  BackupStatus::default_instance_ = new BackupStatus();
  GetSaveTicketsInput::default_instance_ = new GetSaveTicketsInput();
  GetSaveTicketsOutput::default_instance_ = new GetSaveTicketsOutput();
  GetSaveDataInput::default_instance_ = new GetSaveDataInput();
  GetSaveDataOutput::default_instance_ = new GetSaveDataOutput();
  GetOwnedTitlesInput::default_instance_ = new GetOwnedTitlesInput();
  GetOwnedTitlesOutput::default_instance_ = new GetOwnedTitlesOutput();
  GetTitlesInput::default_instance_ = new GetTitlesInput();
  GetTitlesOutput::default_instance_ = new GetTitlesOutput();
  GetTitleDetailsInput::default_instance_ = new GetTitleDetailsInput();
  GetTitleDetailsOutput::default_instance_ = new GetTitleDetailsOutput();
  GetAttestationChallengeInput::default_instance_ = new GetAttestationChallengeInput();
  GetAttestationChallengeOutput::default_instance_ = new GetAttestationChallengeOutput();
  AuthenticateDeviceInput::default_instance_ = new AuthenticateDeviceInput();
  AuthenticateDeviceOutput::default_instance_ = new AuthenticateDeviceOutput();
  GetOnlineTitleTicketInput::default_instance_ = new GetOnlineTitleTicketInput();
  GetOnlineTitleTicketOutput::default_instance_ = new GetOnlineTitleTicketOutput();
  GetOfflineTitleTicketsInput::default_instance_ = new GetOfflineTitleTicketsInput();
  GetOfflineTitleTicketsOutput::default_instance_ = new GetOfflineTitleTicketsOutput();
  ListOwnedDataSetsInput::default_instance_ = new ListOwnedDataSetsInput();
  ListOwnedDataSetsOutput::default_instance_ = new ListOwnedDataSetsOutput();
  GetDatasetDetailsInput::default_instance_ = new GetDatasetDetailsInput();
  GetDatasetDetailsOutput::default_instance_ = new GetDatasetDetailsOutput();
  AddDataSetInput::default_instance_ = new AddDataSetInput();
  AddDataSetOutput::default_instance_ = new AddDataSetOutput();
  AddCameraDatasetInput::default_instance_ = new AddCameraDatasetInput();
  AddCameraDatasetOutput::default_instance_ = new AddCameraDatasetOutput();
  DeleteDataSetInput::default_instance_ = new DeleteDataSetInput();
  DeleteDataSetOutput::default_instance_ = new DeleteDataSetOutput();
  RenameDataSetInput::default_instance_ = new RenameDataSetInput();
  RenameDataSetOutput::default_instance_ = new RenameDataSetOutput();
  SetDataSetCacheInput::default_instance_ = new SetDataSetCacheInput();
  SetDataSetCacheOutput::default_instance_ = new SetDataSetCacheOutput();
  RemoveDeviceFromSubscriptionsInput::default_instance_ = new RemoveDeviceFromSubscriptionsInput();
  RemoveDeviceFromSubscriptionsOutput::default_instance_ = new RemoveDeviceFromSubscriptionsOutput();
  ListSubscriptionsInput::default_instance_ = new ListSubscriptionsInput();
  ListSubscriptionsOutput::default_instance_ = new ListSubscriptionsOutput();
  AddSubscriptionsInput::default_instance_ = new AddSubscriptionsInput();
  AddSubscriptionsOutput::default_instance_ = new AddSubscriptionsOutput();
  AddUserDatasetSubscriptionInput::default_instance_ = new AddUserDatasetSubscriptionInput();
  AddUserDatasetSubscriptionOutput::default_instance_ = new AddUserDatasetSubscriptionOutput();
  AddCameraSubscriptionInput::default_instance_ = new AddCameraSubscriptionInput();
  AddCameraSubscriptionOutput::default_instance_ = new AddCameraSubscriptionOutput();
  AddDatasetSubscriptionInput::default_instance_ = new AddDatasetSubscriptionInput();
  AddDatasetSubscriptionOutput::default_instance_ = new AddDatasetSubscriptionOutput();
  DeleteSubscriptionsInput::default_instance_ = new DeleteSubscriptionsInput();
  DeleteSubscriptionsOutput::default_instance_ = new DeleteSubscriptionsOutput();
  UpdateSubscriptionFilterInput::default_instance_ = new UpdateSubscriptionFilterInput();
  UpdateSubscriptionFilterOutput::default_instance_ = new UpdateSubscriptionFilterOutput();
  UpdateSubscriptionLimitsInput::default_instance_ = new UpdateSubscriptionLimitsInput();
  UpdateSubscriptionLimitsOutput::default_instance_ = new UpdateSubscriptionLimitsOutput();
  GetSubscriptionDetailsForDeviceInput::default_instance_ = new GetSubscriptionDetailsForDeviceInput();
  GetSubscriptionDetailsForDeviceOutput::default_instance_ = new GetSubscriptionDetailsForDeviceOutput();
  GetCloudInfoInput::default_instance_ = new GetCloudInfoInput();
  GetCloudInfoOutput::default_instance_ = new GetCloudInfoOutput();
  GetSubscribedDatasetsInput::default_instance_ = new GetSubscribedDatasetsInput();
  GetSubscribedDatasetsOutput::default_instance_ = new GetSubscribedDatasetsOutput();
  GetSubscriptionDetailsInput::default_instance_ = new GetSubscriptionDetailsInput();
  GetSubscriptionDetailsOutput::default_instance_ = new GetSubscriptionDetailsOutput();
  LinkDeviceInput::default_instance_ = new LinkDeviceInput();
  LinkDeviceOutput::default_instance_ = new LinkDeviceOutput();
  UnlinkDeviceInput::default_instance_ = new UnlinkDeviceInput();
  UnlinkDeviceOutput::default_instance_ = new UnlinkDeviceOutput();
  SetDeviceNameInput::default_instance_ = new SetDeviceNameInput();
  SetDeviceNameOutput::default_instance_ = new SetDeviceNameOutput();
  UpdateDeviceInfoInput::default_instance_ = new UpdateDeviceInfoInput();
  UpdateDeviceInfoOutput::default_instance_ = new UpdateDeviceInfoOutput();
  GetDeviceLinkStateInput::default_instance_ = new GetDeviceLinkStateInput();
  GetDeviceLinkStateOutput::default_instance_ = new GetDeviceLinkStateOutput();
  GetDeviceNameInput::default_instance_ = new GetDeviceNameInput();
  GetDeviceNameOutput::default_instance_ = new GetDeviceNameOutput();
  GetLinkedDevicesInput::default_instance_ = new GetLinkedDevicesInput();
  GetLinkedDevicesOutput::default_instance_ = new GetLinkedDevicesOutput();
  GetLoginSessionInput::default_instance_ = new GetLoginSessionInput();
  GetLoginSessionOutput::default_instance_ = new GetLoginSessionOutput();
  CreatePersonalStorageNodeInput::default_instance_ = new CreatePersonalStorageNodeInput();
  CreatePersonalStorageNodeOutput::default_instance_ = new CreatePersonalStorageNodeOutput();
  GetAsyncNoticeServerInput::default_instance_ = new GetAsyncNoticeServerInput();
  GetAsyncNoticeServerOutput::default_instance_ = new GetAsyncNoticeServerOutput();
  UpdateStorageNodeConnectionInput::default_instance_ = new UpdateStorageNodeConnectionInput();
  UpdateStorageNodeConnectionOutput::default_instance_ = new UpdateStorageNodeConnectionOutput();
  UpdateStorageNodeFeaturesInput::default_instance_ = new UpdateStorageNodeFeaturesInput();
  UpdateStorageNodeFeaturesOutput::default_instance_ = new UpdateStorageNodeFeaturesOutput();
  GetPSNDatasetLocationInput::default_instance_ = new GetPSNDatasetLocationInput();
  GetPSNDatasetLocationOutput::default_instance_ = new GetPSNDatasetLocationOutput();
  UpdatePSNDatasetStatusInput::default_instance_ = new UpdatePSNDatasetStatusInput();
  UpdatePSNDatasetStatusOutput::default_instance_ = new UpdatePSNDatasetStatusOutput();
  AddUserStorageInput::default_instance_ = new AddUserStorageInput();
  AddUserStorageOutput::default_instance_ = new AddUserStorageOutput();
  DeleteUserStorageInput::default_instance_ = new DeleteUserStorageInput();
  DeleteUserStorageOutput::default_instance_ = new DeleteUserStorageOutput();
  ChangeUserStorageNameInput::default_instance_ = new ChangeUserStorageNameInput();
  ChangeUserStorageNameOutput::default_instance_ = new ChangeUserStorageNameOutput();
  ChangeUserStorageQuotaInput::default_instance_ = new ChangeUserStorageQuotaInput();
  ChangeUserStorageQuotaOutput::default_instance_ = new ChangeUserStorageQuotaOutput();
  ListUserStorageInput::default_instance_ = new ListUserStorageInput();
  ListUserStorageOutput::default_instance_ = new ListUserStorageOutput();
  GetUserStorageAddressInput::default_instance_ = new GetUserStorageAddressInput();
  UserStorageAddress::default_instance_ = new UserStorageAddress();
  GetUserStorageAddressOutput::default_instance_ = new GetUserStorageAddressOutput();
  AssignUserDatacenterStorageInput::default_instance_ = new AssignUserDatacenterStorageInput();
  AssignUserDatacenterStorageOutput::default_instance_ = new AssignUserDatacenterStorageOutput();
  GetStorageUnitForDatasetInput::default_instance_ = new GetStorageUnitForDatasetInput();
  GetStorageUnitForDatasetOutput::default_instance_ = new GetStorageUnitForDatasetOutput();
  GetStoredDatasetsInput::default_instance_ = new GetStoredDatasetsInput();
  GetStoredDatasetsOutput::default_instance_ = new GetStoredDatasetsOutput();
  GetProxyConnectionForClusterInput::default_instance_ = new GetProxyConnectionForClusterInput();
  GetProxyConnectionForClusterOutput::default_instance_ = new GetProxyConnectionForClusterOutput();
  SendMessageToPSNInput::default_instance_ = new SendMessageToPSNInput();
  SendMessageToPSNOutput::default_instance_ = new SendMessageToPSNOutput();
  ChangeStorageUnitForDatasetInput::default_instance_ = new ChangeStorageUnitForDatasetInput();
  ChangeStorageUnitForDatasetOutput::default_instance_ = new ChangeStorageUnitForDatasetOutput();
  CreateStorageClusterInput::default_instance_ = new CreateStorageClusterInput();
  CreateStorageClusterOutput::default_instance_ = new CreateStorageClusterOutput();
  GetMssInstancesForClusterInput::default_instance_ = new GetMssInstancesForClusterInput();
  GetMssInstancesForClusterOutput::default_instance_ = new GetMssInstancesForClusterOutput();
  GetStorageUnitsForClusterInput::default_instance_ = new GetStorageUnitsForClusterInput();
  GetStorageUnitsForClusterOutput::default_instance_ = new GetStorageUnitsForClusterOutput();
  GetBrsInstancesForClusterInput::default_instance_ = new GetBrsInstancesForClusterInput();
  GetBrsInstancesForClusterOutput::default_instance_ = new GetBrsInstancesForClusterOutput();
  GetBrsStorageUnitsForClusterInput::default_instance_ = new GetBrsStorageUnitsForClusterInput();
  GetBrsStorageUnitsForClusterOutput::default_instance_ = new GetBrsStorageUnitsForClusterOutput();
  ChangeStorageAssignmentsForDatasetInput::default_instance_ = new ChangeStorageAssignmentsForDatasetInput();
  ChangeStorageAssignmentsForDatasetOutput::default_instance_ = new ChangeStorageAssignmentsForDatasetOutput();
  UpdateDatasetStatusInput::default_instance_ = new UpdateDatasetStatusInput();
  UpdateDatasetStatusOutput::default_instance_ = new UpdateDatasetStatusOutput();
  UpdateDatasetBackupStatusInput::default_instance_ = new UpdateDatasetBackupStatusInput();
  UpdateDatasetBackupStatusOutput::default_instance_ = new UpdateDatasetBackupStatusOutput();
  UpdateDatasetArchiveStatusInput::default_instance_ = new UpdateDatasetArchiveStatusInput();
  UpdateDatasetArchiveStatusOutput::default_instance_ = new UpdateDatasetArchiveStatusOutput();
  GetDatasetStatusInput::default_instance_ = new GetDatasetStatusInput();
  GetDatasetStatusOutput::default_instance_ = new GetDatasetStatusOutput();
  StoreDeviceEventInput::default_instance_ = new StoreDeviceEventInput();
  StoreDeviceEventOutput::default_instance_ = new StoreDeviceEventOutput();
  EventInfo::default_instance_ = new EventInfo();
  GetLinkedDatasetStatusInput::default_instance_ = new GetLinkedDatasetStatusInput();
  GetLinkedDatasetStatusOutput::default_instance_ = new GetLinkedDatasetStatusOutput();
  GetUserQuotaStatusInput::default_instance_ = new GetUserQuotaStatusInput();
  GetUserQuotaStatusOutput::default_instance_ = new GetUserQuotaStatusOutput();
  GetDatasetsToBackupInput::default_instance_ = new GetDatasetsToBackupInput();
  GetDatasetsToBackupOutput::default_instance_ = new GetDatasetsToBackupOutput();
  GetBRSHostNameInput::default_instance_ = new GetBRSHostNameInput();
  GetBRSHostNameOutput::default_instance_ = new GetBRSHostNameOutput();
  GetBackupStorageUnitsForBrsInput::default_instance_ = new GetBackupStorageUnitsForBrsInput();
  GetBackupStorageUnitsForBrsOutput::default_instance_ = new GetBackupStorageUnitsForBrsOutput();
  GetUpdatedDatasetsInput::default_instance_ = new GetUpdatedDatasetsInput();
  GetUpdatedDatasetsOutput::default_instance_ = new GetUpdatedDatasetsOutput();
  AddDatasetArchiveStorageDeviceInput::default_instance_ = new AddDatasetArchiveStorageDeviceInput();
  AddDatasetArchiveStorageDeviceOutput::default_instance_ = new AddDatasetArchiveStorageDeviceOutput();
  RemoveDatasetArchiveStorageDeviceInput::default_instance_ = new RemoveDatasetArchiveStorageDeviceInput();
  RemoveDatasetArchiveStorageDeviceOutput::default_instance_ = new RemoveDatasetArchiveStorageDeviceOutput();
  APIVersion::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  SessionInfo::default_instance_->InitAsDefaultInstance();
  ETicketData::default_instance_->InitAsDefaultInstance();
  Localization::default_instance_->InitAsDefaultInstance();
  TitleData::default_instance_->InitAsDefaultInstance();
  TitleDetail::default_instance_->InitAsDefaultInstance();
  ContentDetail::default_instance_->InitAsDefaultInstance();
  SaveData::default_instance_->InitAsDefaultInstance();
  TitleTicket::default_instance_->InitAsDefaultInstance();
  Subscription::default_instance_->InitAsDefaultInstance();
  SyncDirectory::default_instance_->InitAsDefaultInstance();
  DatasetData::default_instance_->InitAsDefaultInstance();
  DatasetDetail::default_instance_->InitAsDefaultInstance();
  StoredDataset::default_instance_->InitAsDefaultInstance();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  StorageAccessPort::default_instance_->InitAsDefaultInstance();
  StorageAccess::default_instance_->InitAsDefaultInstance();
  DeviceAccessTicket::default_instance_->InitAsDefaultInstance();
  UserStorage::default_instance_->InitAsDefaultInstance();
  UpdatedDataset::default_instance_->InitAsDefaultInstance();
  DatasetFilter::default_instance_->InitAsDefaultInstance();
  MssDetail::default_instance_->InitAsDefaultInstance();
  StorageUnitDetail::default_instance_->InitAsDefaultInstance();
  BrsDetail::default_instance_->InitAsDefaultInstance();
  BrsStorageUnitDetail::default_instance_->InitAsDefaultInstance();
  BackupStatus::default_instance_->InitAsDefaultInstance();
  GetSaveTicketsInput::default_instance_->InitAsDefaultInstance();
  GetSaveTicketsOutput::default_instance_->InitAsDefaultInstance();
  GetSaveDataInput::default_instance_->InitAsDefaultInstance();
  GetSaveDataOutput::default_instance_->InitAsDefaultInstance();
  GetOwnedTitlesInput::default_instance_->InitAsDefaultInstance();
  GetOwnedTitlesOutput::default_instance_->InitAsDefaultInstance();
  GetTitlesInput::default_instance_->InitAsDefaultInstance();
  GetTitlesOutput::default_instance_->InitAsDefaultInstance();
  GetTitleDetailsInput::default_instance_->InitAsDefaultInstance();
  GetTitleDetailsOutput::default_instance_->InitAsDefaultInstance();
  GetAttestationChallengeInput::default_instance_->InitAsDefaultInstance();
  GetAttestationChallengeOutput::default_instance_->InitAsDefaultInstance();
  AuthenticateDeviceInput::default_instance_->InitAsDefaultInstance();
  AuthenticateDeviceOutput::default_instance_->InitAsDefaultInstance();
  GetOnlineTitleTicketInput::default_instance_->InitAsDefaultInstance();
  GetOnlineTitleTicketOutput::default_instance_->InitAsDefaultInstance();
  GetOfflineTitleTicketsInput::default_instance_->InitAsDefaultInstance();
  GetOfflineTitleTicketsOutput::default_instance_->InitAsDefaultInstance();
  ListOwnedDataSetsInput::default_instance_->InitAsDefaultInstance();
  ListOwnedDataSetsOutput::default_instance_->InitAsDefaultInstance();
  GetDatasetDetailsInput::default_instance_->InitAsDefaultInstance();
  GetDatasetDetailsOutput::default_instance_->InitAsDefaultInstance();
  AddDataSetInput::default_instance_->InitAsDefaultInstance();
  AddDataSetOutput::default_instance_->InitAsDefaultInstance();
  AddCameraDatasetInput::default_instance_->InitAsDefaultInstance();
  AddCameraDatasetOutput::default_instance_->InitAsDefaultInstance();
  DeleteDataSetInput::default_instance_->InitAsDefaultInstance();
  DeleteDataSetOutput::default_instance_->InitAsDefaultInstance();
  RenameDataSetInput::default_instance_->InitAsDefaultInstance();
  RenameDataSetOutput::default_instance_->InitAsDefaultInstance();
  SetDataSetCacheInput::default_instance_->InitAsDefaultInstance();
  SetDataSetCacheOutput::default_instance_->InitAsDefaultInstance();
  RemoveDeviceFromSubscriptionsInput::default_instance_->InitAsDefaultInstance();
  RemoveDeviceFromSubscriptionsOutput::default_instance_->InitAsDefaultInstance();
  ListSubscriptionsInput::default_instance_->InitAsDefaultInstance();
  ListSubscriptionsOutput::default_instance_->InitAsDefaultInstance();
  AddSubscriptionsInput::default_instance_->InitAsDefaultInstance();
  AddSubscriptionsOutput::default_instance_->InitAsDefaultInstance();
  AddUserDatasetSubscriptionInput::default_instance_->InitAsDefaultInstance();
  AddUserDatasetSubscriptionOutput::default_instance_->InitAsDefaultInstance();
  AddCameraSubscriptionInput::default_instance_->InitAsDefaultInstance();
  AddCameraSubscriptionOutput::default_instance_->InitAsDefaultInstance();
  AddDatasetSubscriptionInput::default_instance_->InitAsDefaultInstance();
  AddDatasetSubscriptionOutput::default_instance_->InitAsDefaultInstance();
  DeleteSubscriptionsInput::default_instance_->InitAsDefaultInstance();
  DeleteSubscriptionsOutput::default_instance_->InitAsDefaultInstance();
  UpdateSubscriptionFilterInput::default_instance_->InitAsDefaultInstance();
  UpdateSubscriptionFilterOutput::default_instance_->InitAsDefaultInstance();
  UpdateSubscriptionLimitsInput::default_instance_->InitAsDefaultInstance();
  UpdateSubscriptionLimitsOutput::default_instance_->InitAsDefaultInstance();
  GetSubscriptionDetailsForDeviceInput::default_instance_->InitAsDefaultInstance();
  GetSubscriptionDetailsForDeviceOutput::default_instance_->InitAsDefaultInstance();
  GetCloudInfoInput::default_instance_->InitAsDefaultInstance();
  GetCloudInfoOutput::default_instance_->InitAsDefaultInstance();
  GetSubscribedDatasetsInput::default_instance_->InitAsDefaultInstance();
  GetSubscribedDatasetsOutput::default_instance_->InitAsDefaultInstance();
  GetSubscriptionDetailsInput::default_instance_->InitAsDefaultInstance();
  GetSubscriptionDetailsOutput::default_instance_->InitAsDefaultInstance();
  LinkDeviceInput::default_instance_->InitAsDefaultInstance();
  LinkDeviceOutput::default_instance_->InitAsDefaultInstance();
  UnlinkDeviceInput::default_instance_->InitAsDefaultInstance();
  UnlinkDeviceOutput::default_instance_->InitAsDefaultInstance();
  SetDeviceNameInput::default_instance_->InitAsDefaultInstance();
  SetDeviceNameOutput::default_instance_->InitAsDefaultInstance();
  UpdateDeviceInfoInput::default_instance_->InitAsDefaultInstance();
  UpdateDeviceInfoOutput::default_instance_->InitAsDefaultInstance();
  GetDeviceLinkStateInput::default_instance_->InitAsDefaultInstance();
  GetDeviceLinkStateOutput::default_instance_->InitAsDefaultInstance();
  GetDeviceNameInput::default_instance_->InitAsDefaultInstance();
  GetDeviceNameOutput::default_instance_->InitAsDefaultInstance();
  GetLinkedDevicesInput::default_instance_->InitAsDefaultInstance();
  GetLinkedDevicesOutput::default_instance_->InitAsDefaultInstance();
  GetLoginSessionInput::default_instance_->InitAsDefaultInstance();
  GetLoginSessionOutput::default_instance_->InitAsDefaultInstance();
  CreatePersonalStorageNodeInput::default_instance_->InitAsDefaultInstance();
  CreatePersonalStorageNodeOutput::default_instance_->InitAsDefaultInstance();
  GetAsyncNoticeServerInput::default_instance_->InitAsDefaultInstance();
  GetAsyncNoticeServerOutput::default_instance_->InitAsDefaultInstance();
  UpdateStorageNodeConnectionInput::default_instance_->InitAsDefaultInstance();
  UpdateStorageNodeConnectionOutput::default_instance_->InitAsDefaultInstance();
  UpdateStorageNodeFeaturesInput::default_instance_->InitAsDefaultInstance();
  UpdateStorageNodeFeaturesOutput::default_instance_->InitAsDefaultInstance();
  GetPSNDatasetLocationInput::default_instance_->InitAsDefaultInstance();
  GetPSNDatasetLocationOutput::default_instance_->InitAsDefaultInstance();
  UpdatePSNDatasetStatusInput::default_instance_->InitAsDefaultInstance();
  UpdatePSNDatasetStatusOutput::default_instance_->InitAsDefaultInstance();
  AddUserStorageInput::default_instance_->InitAsDefaultInstance();
  AddUserStorageOutput::default_instance_->InitAsDefaultInstance();
  DeleteUserStorageInput::default_instance_->InitAsDefaultInstance();
  DeleteUserStorageOutput::default_instance_->InitAsDefaultInstance();
  ChangeUserStorageNameInput::default_instance_->InitAsDefaultInstance();
  ChangeUserStorageNameOutput::default_instance_->InitAsDefaultInstance();
  ChangeUserStorageQuotaInput::default_instance_->InitAsDefaultInstance();
  ChangeUserStorageQuotaOutput::default_instance_->InitAsDefaultInstance();
  ListUserStorageInput::default_instance_->InitAsDefaultInstance();
  ListUserStorageOutput::default_instance_->InitAsDefaultInstance();
  GetUserStorageAddressInput::default_instance_->InitAsDefaultInstance();
  UserStorageAddress::default_instance_->InitAsDefaultInstance();
  GetUserStorageAddressOutput::default_instance_->InitAsDefaultInstance();
  AssignUserDatacenterStorageInput::default_instance_->InitAsDefaultInstance();
  AssignUserDatacenterStorageOutput::default_instance_->InitAsDefaultInstance();
  GetStorageUnitForDatasetInput::default_instance_->InitAsDefaultInstance();
  GetStorageUnitForDatasetOutput::default_instance_->InitAsDefaultInstance();
  GetStoredDatasetsInput::default_instance_->InitAsDefaultInstance();
  GetStoredDatasetsOutput::default_instance_->InitAsDefaultInstance();
  GetProxyConnectionForClusterInput::default_instance_->InitAsDefaultInstance();
  GetProxyConnectionForClusterOutput::default_instance_->InitAsDefaultInstance();
  SendMessageToPSNInput::default_instance_->InitAsDefaultInstance();
  SendMessageToPSNOutput::default_instance_->InitAsDefaultInstance();
  ChangeStorageUnitForDatasetInput::default_instance_->InitAsDefaultInstance();
  ChangeStorageUnitForDatasetOutput::default_instance_->InitAsDefaultInstance();
  CreateStorageClusterInput::default_instance_->InitAsDefaultInstance();
  CreateStorageClusterOutput::default_instance_->InitAsDefaultInstance();
  GetMssInstancesForClusterInput::default_instance_->InitAsDefaultInstance();
  GetMssInstancesForClusterOutput::default_instance_->InitAsDefaultInstance();
  GetStorageUnitsForClusterInput::default_instance_->InitAsDefaultInstance();
  GetStorageUnitsForClusterOutput::default_instance_->InitAsDefaultInstance();
  GetBrsInstancesForClusterInput::default_instance_->InitAsDefaultInstance();
  GetBrsInstancesForClusterOutput::default_instance_->InitAsDefaultInstance();
  GetBrsStorageUnitsForClusterInput::default_instance_->InitAsDefaultInstance();
  GetBrsStorageUnitsForClusterOutput::default_instance_->InitAsDefaultInstance();
  ChangeStorageAssignmentsForDatasetInput::default_instance_->InitAsDefaultInstance();
  ChangeStorageAssignmentsForDatasetOutput::default_instance_->InitAsDefaultInstance();
  UpdateDatasetStatusInput::default_instance_->InitAsDefaultInstance();
  UpdateDatasetStatusOutput::default_instance_->InitAsDefaultInstance();
  UpdateDatasetBackupStatusInput::default_instance_->InitAsDefaultInstance();
  UpdateDatasetBackupStatusOutput::default_instance_->InitAsDefaultInstance();
  UpdateDatasetArchiveStatusInput::default_instance_->InitAsDefaultInstance();
  UpdateDatasetArchiveStatusOutput::default_instance_->InitAsDefaultInstance();
  GetDatasetStatusInput::default_instance_->InitAsDefaultInstance();
  GetDatasetStatusOutput::default_instance_->InitAsDefaultInstance();
  StoreDeviceEventInput::default_instance_->InitAsDefaultInstance();
  StoreDeviceEventOutput::default_instance_->InitAsDefaultInstance();
  EventInfo::default_instance_->InitAsDefaultInstance();
  GetLinkedDatasetStatusInput::default_instance_->InitAsDefaultInstance();
  GetLinkedDatasetStatusOutput::default_instance_->InitAsDefaultInstance();
  GetUserQuotaStatusInput::default_instance_->InitAsDefaultInstance();
  GetUserQuotaStatusOutput::default_instance_->InitAsDefaultInstance();
  GetDatasetsToBackupInput::default_instance_->InitAsDefaultInstance();
  GetDatasetsToBackupOutput::default_instance_->InitAsDefaultInstance();
  GetBRSHostNameInput::default_instance_->InitAsDefaultInstance();
  GetBRSHostNameOutput::default_instance_->InitAsDefaultInstance();
  GetBackupStorageUnitsForBrsInput::default_instance_->InitAsDefaultInstance();
  GetBackupStorageUnitsForBrsOutput::default_instance_->InitAsDefaultInstance();
  GetUpdatedDatasetsInput::default_instance_->InitAsDefaultInstance();
  GetUpdatedDatasetsOutput::default_instance_->InitAsDefaultInstance();
  AddDatasetArchiveStorageDeviceInput::default_instance_->InitAsDefaultInstance();
  AddDatasetArchiveStorageDeviceOutput::default_instance_->InitAsDefaultInstance();
  RemoveDatasetArchiveStorageDeviceInput::default_instance_->InitAsDefaultInstance();
  RemoveDatasetArchiveStorageDeviceOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto {
  StaticDescriptorInitializer_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto() {
    protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();
  }
} static_descriptor_initializer_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto_;

const ::google::protobuf::EnumDescriptor* DatasetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetType_descriptor_;
}
bool DatasetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RouteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteType_descriptor_;
}
bool RouteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProtocolType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolType_descriptor_;
}
bool ProtocolType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortType_descriptor_;
}
bool PortType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubscriptionRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRole_descriptor_;
}
bool SubscriptionRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string APIVersion::_default_version_("1.0");
#ifndef _MSC_VER
const int APIVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

APIVersion::APIVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void APIVersion::InitAsDefaultInstance() {
}

APIVersion::APIVersion(const APIVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void APIVersion::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&_default_version_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

APIVersion::~APIVersion() {
  SharedDtor();
}

void APIVersion::SharedDtor() {
  if (version_ != &_default_version_) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void APIVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* APIVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return APIVersion_descriptor_;
}

const APIVersion& APIVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

APIVersion* APIVersion::default_instance_ = NULL;

APIVersion* APIVersion::New() const {
  return new APIVersion;
}

void APIVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &_default_version_) {
        version_->assign(_default_version_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool APIVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1 [default = "1.0"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void APIVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1 [default = "1.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* APIVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string version = 1 [default = "1.0"];
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int APIVersion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1 [default = "1.0"];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void APIVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const APIVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const APIVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void APIVersion::MergeFrom(const APIVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void APIVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APIVersion::CopyFrom(const APIVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APIVersion::IsInitialized() const {
  
  return true;
}

void APIVersion::Swap(APIVersion* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata APIVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = APIVersion_descriptor_;
  metadata.reflection = APIVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kErrorCodeFieldNumber;
const int Error::kErrorDetailFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  errordetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (errordetail_ != &::google::protobuf::internal::kEmptyString) {
    delete errordetail_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_errordetail()) {
      if (errordetail_ != &::google::protobuf::internal::kEmptyString) {
        errordetail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorDetail;
        break;
      }
      
      // optional string errorDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errordetail().data(), this->errordetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->errorcode(), output);
  }
  
  // optional string errorDetail = 2;
  if (has_errordetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errordetail().data(), this->errordetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errordetail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->errorcode(), target);
  }
  
  // optional string errorDetail = 2;
  if (has_errordetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errordetail().data(), this->errordetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errordetail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->errorcode());
    }
    
    // optional string errorDetail = 2;
    if (has_errordetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errordetail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errordetail()) {
      set_errordetail(from.errordetail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(errordetail_, other->errordetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionInfo::kSessionHandleFieldNumber;
const int SessionInfo::kServiceTicketFieldNumber;
#endif  // !_MSC_VER

SessionInfo::SessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SessionInfo::SharedCtor() {
  _cached_size_ = 0;
  sessionhandle_ = GOOGLE_ULONGLONG(0);
  serviceticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionInfo::~SessionInfo() {
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  if (serviceticket_ != &::google::protobuf::internal::kEmptyString) {
    delete serviceticket_;
  }
  if (this != default_instance_) {
  }
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionInfo_descriptor_;
}

const SessionInfo& SessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SessionInfo* SessionInfo::default_instance_ = NULL;

SessionInfo* SessionInfo::New() const {
  return new SessionInfo;
}

void SessionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sessionhandle_ = GOOGLE_ULONGLONG(0);
    if (has_serviceticket()) {
      if (serviceticket_ != &::google::protobuf::internal::kEmptyString) {
        serviceticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 sessionHandle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionhandle_)));
          set_has_sessionhandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serviceTicket;
        break;
      }
      
      // required bytes serviceTicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serviceticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 sessionHandle = 1;
  if (has_sessionhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->sessionhandle(), output);
  }
  
  // required bytes serviceTicket = 2;
  if (has_serviceticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->serviceticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 sessionHandle = 1;
  if (has_sessionhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->sessionhandle(), target);
  }
  
  // required bytes serviceTicket = 2;
  if (has_serviceticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serviceticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SessionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 sessionHandle = 1;
    if (has_sessionhandle()) {
      total_size += 1 + 8;
    }
    
    // required bytes serviceTicket = 2;
    if (has_serviceticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serviceticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionhandle()) {
      set_sessionhandle(from.sessionhandle());
    }
    if (from.has_serviceticket()) {
      set_serviceticket(from.serviceticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other != this) {
    std::swap(sessionhandle_, other->sessionhandle_);
    std::swap(serviceticket_, other->serviceticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionInfo_descriptor_;
  metadata.reflection = SessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ETicketData::kETicketFieldNumber;
const int ETicketData::kCertificateFieldNumber;
#endif  // !_MSC_VER

ETicketData::ETicketData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ETicketData::InitAsDefaultInstance() {
}

ETicketData::ETicketData(const ETicketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ETicketData::SharedCtor() {
  _cached_size_ = 0;
  eticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ETicketData::~ETicketData() {
  SharedDtor();
}

void ETicketData::SharedDtor() {
  if (eticket_ != &::google::protobuf::internal::kEmptyString) {
    delete eticket_;
  }
  if (this != default_instance_) {
  }
}

void ETicketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ETicketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETicketData_descriptor_;
}

const ETicketData& ETicketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ETicketData* ETicketData::default_instance_ = NULL;

ETicketData* ETicketData::New() const {
  return new ETicketData;
}

void ETicketData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eticket()) {
      if (eticket_ != &::google::protobuf::internal::kEmptyString) {
        eticket_->clear();
      }
    }
  }
  certificate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ETicketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes eTicket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_eticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_certificate;
        break;
      }
      
      // repeated bytes certificate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_certificate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_certificate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ETicketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes eTicket = 1;
  if (has_eticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->eticket(), output);
  }
  
  // repeated bytes certificate = 2;
  for (int i = 0; i < this->certificate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->certificate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ETicketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes eTicket = 1;
  if (has_eticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->eticket(), target);
  }
  
  // repeated bytes certificate = 2;
  for (int i = 0; i < this->certificate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->certificate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ETicketData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes eTicket = 1;
    if (has_eticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->eticket());
    }
    
  }
  // repeated bytes certificate = 2;
  total_size += 1 * this->certificate_size();
  for (int i = 0; i < this->certificate_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->certificate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ETicketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ETicketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ETicketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ETicketData::MergeFrom(const ETicketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  certificate_.MergeFrom(from.certificate_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eticket()) {
      set_eticket(from.eticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ETicketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ETicketData::CopyFrom(const ETicketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ETicketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ETicketData::Swap(ETicketData* other) {
  if (other != this) {
    std::swap(eticket_, other->eticket_);
    certificate_.Swap(&other->certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ETicketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ETicketData_descriptor_;
  metadata.reflection = ETicketData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Localization::kLanguageFieldNumber;
const int Localization::kCountryFieldNumber;
const int Localization::kRegionFieldNumber;
#endif  // !_MSC_VER

Localization::Localization()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Localization::InitAsDefaultInstance() {
}

Localization::Localization(const Localization& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Localization::SharedCtor() {
  _cached_size_ = 0;
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Localization::~Localization() {
  SharedDtor();
}

void Localization::SharedDtor() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (country_ != &::google::protobuf::internal::kEmptyString) {
    delete country_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (this != default_instance_) {
  }
}

void Localization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Localization::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Localization_descriptor_;
}

const Localization& Localization::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

Localization* Localization::default_instance_ = NULL;

Localization* Localization::New() const {
  return new Localization;
}

void Localization::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::kEmptyString) {
        language_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::kEmptyString) {
        country_->clear();
      }
    }
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Localization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string language = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_country;
        break;
      }
      
      // required string country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_region;
        break;
      }
      
      // required string region = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Localization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->language(), output);
  }
  
  // required string country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->country(), output);
  }
  
  // required string region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->region(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Localization::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string language = 1;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->language(), target);
  }
  
  // required string country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country(), target);
  }
  
  // required string region = 3;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->region(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Localization::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }
    
    // required string country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }
    
    // required string region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Localization::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Localization* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Localization*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Localization::MergeFrom(const Localization& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Localization::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Localization::CopyFrom(const Localization& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Localization::Swap(Localization* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(country_, other->country_);
    std::swap(region_, other->region_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Localization::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Localization_descriptor_;
  metadata.reflection = Localization_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleData::kTitleIdFieldNumber;
const int TitleData::kDetailHashFieldNumber;
const int TitleData::kTicketVersionFieldNumber;
const int TitleData::kUseOnlineETicketFieldNumber;
const int TitleData::kUseOfflineETicketFieldNumber;
#endif  // !_MSC_VER

TitleData::TitleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleData::InitAsDefaultInstance() {
}

TitleData::TitleData(const TitleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleData::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detailhash_ = 0;
  ticketversion_ = 0;
  useonlineeticket_ = false;
  useofflineeticket_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleData::~TitleData() {
  SharedDtor();
}

void TitleData::SharedDtor() {
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    delete titleid_;
  }
  if (this != default_instance_) {
  }
}

void TitleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleData_descriptor_;
}

const TitleData& TitleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

TitleData* TitleData::default_instance_ = NULL;

TitleData* TitleData::New() const {
  return new TitleData;
}

void TitleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_titleid()) {
      if (titleid_ != &::google::protobuf::internal::kEmptyString) {
        titleid_->clear();
      }
    }
    detailhash_ = 0;
    ticketversion_ = 0;
    useonlineeticket_ = false;
    useofflineeticket_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid().data(), this->titleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_detailHash;
        break;
      }
      
      // required int32 detailHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detailHash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detailhash_)));
          set_has_detailhash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ticketVersion;
        break;
      }
      
      // required int32 ticketVersion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticketVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticketversion_)));
          set_has_ticketversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useOnlineETicket;
        break;
      }
      
      // required bool useOnlineETicket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useOnlineETicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useonlineeticket_)));
          set_has_useonlineeticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useOfflineETicket;
        break;
      }
      
      // required bool useOfflineETicket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useOfflineETicket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useofflineeticket_)));
          set_has_useofflineeticket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->titleid(), output);
  }
  
  // required int32 detailHash = 2;
  if (has_detailhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->detailhash(), output);
  }
  
  // required int32 ticketVersion = 3;
  if (has_ticketversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ticketversion(), output);
  }
  
  // required bool useOnlineETicket = 4;
  if (has_useonlineeticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->useonlineeticket(), output);
  }
  
  // required bool useOfflineETicket = 5;
  if (has_useofflineeticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->useofflineeticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->titleid(), target);
  }
  
  // required int32 detailHash = 2;
  if (has_detailhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->detailhash(), target);
  }
  
  // required int32 ticketVersion = 3;
  if (has_ticketversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ticketversion(), target);
  }
  
  // required bool useOnlineETicket = 4;
  if (has_useonlineeticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->useonlineeticket(), target);
  }
  
  // required bool useOfflineETicket = 5;
  if (has_useofflineeticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->useofflineeticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleid());
    }
    
    // required int32 detailHash = 2;
    if (has_detailhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detailhash());
    }
    
    // required int32 ticketVersion = 3;
    if (has_ticketversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticketversion());
    }
    
    // required bool useOnlineETicket = 4;
    if (has_useonlineeticket()) {
      total_size += 1 + 1;
    }
    
    // required bool useOfflineETicket = 5;
    if (has_useofflineeticket()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleData::MergeFrom(const TitleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_detailhash()) {
      set_detailhash(from.detailhash());
    }
    if (from.has_ticketversion()) {
      set_ticketversion(from.ticketversion());
    }
    if (from.has_useonlineeticket()) {
      set_useonlineeticket(from.useonlineeticket());
    }
    if (from.has_useofflineeticket()) {
      set_useofflineeticket(from.useofflineeticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleData::CopyFrom(const TitleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void TitleData::Swap(TitleData* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(detailhash_, other->detailhash_);
    std::swap(ticketversion_, other->ticketversion_);
    std::swap(useonlineeticket_, other->useonlineeticket_);
    std::swap(useofflineeticket_, other->useofflineeticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleData_descriptor_;
  metadata.reflection = TitleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleDetail::kTitleIdFieldNumber;
const int TitleDetail::kTitleVersionFieldNumber;
const int TitleDetail::kTmdUrlFieldNumber;
const int TitleDetail::kContentsFieldNumber;
const int TitleDetail::kNameFieldNumber;
const int TitleDetail::kIconUrlFieldNumber;
const int TitleDetail::kImageUrlFieldNumber;
const int TitleDetail::kPublisherFieldNumber;
const int TitleDetail::kGenreFieldNumber;
const int TitleDetail::kContentRatingFieldNumber;
const int TitleDetail::kAltContentRatingFieldNumber;
#endif  // !_MSC_VER

TitleDetail::TitleDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleDetail::InitAsDefaultInstance() {
  contentrating_ = const_cast< ::vplex::common::ContentRating*>(&::vplex::common::ContentRating::default_instance());
  altcontentrating_ = const_cast< ::vplex::common::ContentRating*>(&::vplex::common::ContentRating::default_instance());
}

TitleDetail::TitleDetail(const TitleDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleDetail::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tmdurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iconurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publisher_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contentrating_ = NULL;
  altcontentrating_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleDetail::~TitleDetail() {
  SharedDtor();
}

void TitleDetail::SharedDtor() {
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    delete titleid_;
  }
  if (titleversion_ != &::google::protobuf::internal::kEmptyString) {
    delete titleversion_;
  }
  if (tmdurl_ != &::google::protobuf::internal::kEmptyString) {
    delete tmdurl_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (iconurl_ != &::google::protobuf::internal::kEmptyString) {
    delete iconurl_;
  }
  if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
    delete imageurl_;
  }
  if (publisher_ != &::google::protobuf::internal::kEmptyString) {
    delete publisher_;
  }
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    delete genre_;
  }
  if (this != default_instance_) {
    delete contentrating_;
    delete altcontentrating_;
  }
}

void TitleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleDetail_descriptor_;
}

const TitleDetail& TitleDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

TitleDetail* TitleDetail::default_instance_ = NULL;

TitleDetail* TitleDetail::New() const {
  return new TitleDetail;
}

void TitleDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_titleid()) {
      if (titleid_ != &::google::protobuf::internal::kEmptyString) {
        titleid_->clear();
      }
    }
    if (has_titleversion()) {
      if (titleversion_ != &::google::protobuf::internal::kEmptyString) {
        titleversion_->clear();
      }
    }
    if (has_tmdurl()) {
      if (tmdurl_ != &::google::protobuf::internal::kEmptyString) {
        tmdurl_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_iconurl()) {
      if (iconurl_ != &::google::protobuf::internal::kEmptyString) {
        iconurl_->clear();
      }
    }
    if (has_imageurl()) {
      if (imageurl_ != &::google::protobuf::internal::kEmptyString) {
        imageurl_->clear();
      }
    }
    if (has_publisher()) {
      if (publisher_ != &::google::protobuf::internal::kEmptyString) {
        publisher_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_genre()) {
      if (genre_ != &::google::protobuf::internal::kEmptyString) {
        genre_->clear();
      }
    }
    if (has_contentrating()) {
      if (contentrating_ != NULL) contentrating_->::vplex::common::ContentRating::Clear();
    }
    if (has_altcontentrating()) {
      if (altcontentrating_ != NULL) altcontentrating_->::vplex::common::ContentRating::Clear();
    }
  }
  contents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid().data(), this->titleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleVersion;
        break;
      }
      
      // required string titleVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleversion().data(), this->titleversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tmdUrl;
        break;
      }
      
      // required string tmdUrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tmdUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmdurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tmdurl().data(), this->tmdurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_contents;
        break;
      }
      
      // repeated .vplex.vsDirectory.ContentDetail contents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_contents;
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_iconUrl;
        break;
      }
      
      // optional string iconUrl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconurl().data(), this->iconurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_imageUrl;
        break;
      }
      
      // optional string imageUrl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageurl().data(), this->imageurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_publisher;
        break;
      }
      
      // optional string publisher = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_genre;
        break;
      }
      
      // optional string genre = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_contentRating;
        break;
      }
      
      // optional .vplex.common.ContentRating contentRating = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentRating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_contentrating()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_altContentRating;
        break;
      }
      
      // optional .vplex.common.ContentRating altContentRating = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_altContentRating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_altcontentrating()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->titleid(), output);
  }
  
  // required string titleVersion = 2;
  if (has_titleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleversion().data(), this->titleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->titleversion(), output);
  }
  
  // required string tmdUrl = 3;
  if (has_tmdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tmdurl().data(), this->tmdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tmdurl(), output);
  }
  
  // repeated .vplex.vsDirectory.ContentDetail contents = 4;
  for (int i = 0; i < this->contents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contents(i), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional string iconUrl = 6;
  if (has_iconurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->iconurl(), output);
  }
  
  // optional string imageUrl = 7;
  if (has_imageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageurl().data(), this->imageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->imageurl(), output);
  }
  
  // optional string publisher = 8;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->publisher(), output);
  }
  
  // optional string genre = 9;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->genre(), output);
  }
  
  // optional .vplex.common.ContentRating contentRating = 10;
  if (has_contentrating()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->contentrating(), output);
  }
  
  // optional .vplex.common.ContentRating altContentRating = 11;
  if (has_altcontentrating()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->altcontentrating(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->titleid(), target);
  }
  
  // required string titleVersion = 2;
  if (has_titleversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleversion().data(), this->titleversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->titleversion(), target);
  }
  
  // required string tmdUrl = 3;
  if (has_tmdurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tmdurl().data(), this->tmdurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tmdurl(), target);
  }
  
  // repeated .vplex.vsDirectory.ContentDetail contents = 4;
  for (int i = 0; i < this->contents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->contents(i), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional string iconUrl = 6;
  if (has_iconurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconurl().data(), this->iconurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->iconurl(), target);
  }
  
  // optional string imageUrl = 7;
  if (has_imageurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageurl().data(), this->imageurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->imageurl(), target);
  }
  
  // optional string publisher = 8;
  if (has_publisher()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->publisher(), target);
  }
  
  // optional string genre = 9;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->genre(), target);
  }
  
  // optional .vplex.common.ContentRating contentRating = 10;
  if (has_contentrating()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->contentrating(), target);
  }
  
  // optional .vplex.common.ContentRating altContentRating = 11;
  if (has_altcontentrating()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->altcontentrating(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleid());
    }
    
    // required string titleVersion = 2;
    if (has_titleversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleversion());
    }
    
    // required string tmdUrl = 3;
    if (has_tmdurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmdurl());
    }
    
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string iconUrl = 6;
    if (has_iconurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconurl());
    }
    
    // optional string imageUrl = 7;
    if (has_imageurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageurl());
    }
    
    // optional string publisher = 8;
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string genre = 9;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // optional .vplex.common.ContentRating contentRating = 10;
    if (has_contentrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contentrating());
    }
    
    // optional .vplex.common.ContentRating altContentRating = 11;
    if (has_altcontentrating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->altcontentrating());
    }
    
  }
  // repeated .vplex.vsDirectory.ContentDetail contents = 4;
  total_size += 1 * this->contents_size();
  for (int i = 0; i < this->contents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleDetail::MergeFrom(const TitleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  contents_.MergeFrom(from.contents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_titleversion()) {
      set_titleversion(from.titleversion());
    }
    if (from.has_tmdurl()) {
      set_tmdurl(from.tmdurl());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_iconurl()) {
      set_iconurl(from.iconurl());
    }
    if (from.has_imageurl()) {
      set_imageurl(from.imageurl());
    }
    if (from.has_publisher()) {
      set_publisher(from.publisher());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_genre()) {
      set_genre(from.genre());
    }
    if (from.has_contentrating()) {
      mutable_contentrating()->::vplex::common::ContentRating::MergeFrom(from.contentrating());
    }
    if (from.has_altcontentrating()) {
      mutable_altcontentrating()->::vplex::common::ContentRating::MergeFrom(from.altcontentrating());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleDetail::CopyFrom(const TitleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < contents_size(); i++) {
    if (!this->contents(i).IsInitialized()) return false;
  }
  return true;
}

void TitleDetail::Swap(TitleDetail* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(titleversion_, other->titleversion_);
    std::swap(tmdurl_, other->tmdurl_);
    contents_.Swap(&other->contents_);
    std::swap(name_, other->name_);
    std::swap(iconurl_, other->iconurl_);
    std::swap(imageurl_, other->imageurl_);
    std::swap(publisher_, other->publisher_);
    std::swap(genre_, other->genre_);
    std::swap(contentrating_, other->contentrating_);
    std::swap(altcontentrating_, other->altcontentrating_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleDetail_descriptor_;
  metadata.reflection = TitleDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentDetail::kContentIdFieldNumber;
const int ContentDetail::kContentLocationFieldNumber;
#endif  // !_MSC_VER

ContentDetail::ContentDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContentDetail::InitAsDefaultInstance() {
}

ContentDetail::ContentDetail(const ContentDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContentDetail::SharedCtor() {
  _cached_size_ = 0;
  contentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contentlocation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentDetail::~ContentDetail() {
  SharedDtor();
}

void ContentDetail::SharedDtor() {
  if (contentid_ != &::google::protobuf::internal::kEmptyString) {
    delete contentid_;
  }
  if (contentlocation_ != &::google::protobuf::internal::kEmptyString) {
    delete contentlocation_;
  }
  if (this != default_instance_) {
  }
}

void ContentDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentDetail_descriptor_;
}

const ContentDetail& ContentDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ContentDetail* ContentDetail::default_instance_ = NULL;

ContentDetail* ContentDetail::New() const {
  return new ContentDetail;
}

void ContentDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contentid()) {
      if (contentid_ != &::google::protobuf::internal::kEmptyString) {
        contentid_->clear();
      }
    }
    if (has_contentlocation()) {
      if (contentlocation_ != &::google::protobuf::internal::kEmptyString) {
        contentlocation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string contentId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contentid().data(), this->contentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contentLocation;
        break;
      }
      
      // required string contentLocation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentlocation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contentlocation().data(), this->contentlocation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string contentId = 1;
  if (has_contentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contentid().data(), this->contentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contentid(), output);
  }
  
  // required string contentLocation = 2;
  if (has_contentlocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contentlocation().data(), this->contentlocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contentlocation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContentDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string contentId = 1;
  if (has_contentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contentid().data(), this->contentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contentid(), target);
  }
  
  // required string contentLocation = 2;
  if (has_contentlocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contentlocation().data(), this->contentlocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contentlocation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContentDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string contentId = 1;
    if (has_contentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentid());
    }
    
    // required string contentLocation = 2;
    if (has_contentlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentlocation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentDetail::MergeFrom(const ContentDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contentid()) {
      set_contentid(from.contentid());
    }
    if (from.has_contentlocation()) {
      set_contentlocation(from.contentlocation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentDetail::CopyFrom(const ContentDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ContentDetail::Swap(ContentDetail* other) {
  if (other != this) {
    std::swap(contentid_, other->contentid_);
    std::swap(contentlocation_, other->contentlocation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentDetail_descriptor_;
  metadata.reflection = ContentDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveData::kTitleIdFieldNumber;
const int SaveData::kSaveLocationFieldNumber;
#endif  // !_MSC_VER

SaveData::SaveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveData::InitAsDefaultInstance() {
}

SaveData::SaveData(const SaveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveData::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  savelocation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveData::~SaveData() {
  SharedDtor();
}

void SaveData::SharedDtor() {
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    delete titleid_;
  }
  if (savelocation_ != &::google::protobuf::internal::kEmptyString) {
    delete savelocation_;
  }
  if (this != default_instance_) {
  }
}

void SaveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveData_descriptor_;
}

const SaveData& SaveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SaveData* SaveData::default_instance_ = NULL;

SaveData* SaveData::New() const {
  return new SaveData;
}

void SaveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_titleid()) {
      if (titleid_ != &::google::protobuf::internal::kEmptyString) {
        titleid_->clear();
      }
    }
    if (has_savelocation()) {
      if (savelocation_ != &::google::protobuf::internal::kEmptyString) {
        savelocation_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid().data(), this->titleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_saveLocation;
        break;
      }
      
      // required string saveLocation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_saveLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_savelocation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->savelocation().data(), this->savelocation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->titleid(), output);
  }
  
  // required string saveLocation = 2;
  if (has_savelocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->savelocation().data(), this->savelocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->savelocation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->titleid(), target);
  }
  
  // required string saveLocation = 2;
  if (has_savelocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->savelocation().data(), this->savelocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->savelocation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleid());
    }
    
    // required string saveLocation = 2;
    if (has_savelocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->savelocation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveData::MergeFrom(const SaveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_savelocation()) {
      set_savelocation(from.savelocation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveData::CopyFrom(const SaveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SaveData::Swap(SaveData* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(savelocation_, other->savelocation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveData_descriptor_;
  metadata.reflection = SaveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleTicket::kTitleIdFieldNumber;
const int TitleTicket::kETicketFieldNumber;
#endif  // !_MSC_VER

TitleTicket::TitleTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleTicket::InitAsDefaultInstance() {
  eticket_ = const_cast< ::vplex::vsDirectory::ETicketData*>(&::vplex::vsDirectory::ETicketData::default_instance());
}

TitleTicket::TitleTicket(const TitleTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleTicket::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eticket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleTicket::~TitleTicket() {
  SharedDtor();
}

void TitleTicket::SharedDtor() {
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    delete titleid_;
  }
  if (this != default_instance_) {
    delete eticket_;
  }
}

void TitleTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleTicket_descriptor_;
}

const TitleTicket& TitleTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

TitleTicket* TitleTicket::default_instance_ = NULL;

TitleTicket* TitleTicket::New() const {
  return new TitleTicket;
}

void TitleTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_titleid()) {
      if (titleid_ != &::google::protobuf::internal::kEmptyString) {
        titleid_->clear();
      }
    }
    if (has_eticket()) {
      if (eticket_ != NULL) eticket_->::vplex::vsDirectory::ETicketData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid().data(), this->titleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eTicket;
        break;
      }
      
      // required .vplex.vsDirectory.ETicketData eTicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->titleid(), output);
  }
  
  // required .vplex.vsDirectory.ETicketData eTicket = 2;
  if (has_eticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->titleid(), target);
  }
  
  // required .vplex.vsDirectory.ETicketData eTicket = 2;
  if (has_eticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleTicket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleid());
    }
    
    // required .vplex.vsDirectory.ETicketData eTicket = 2;
    if (has_eticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleTicket::MergeFrom(const TitleTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_eticket()) {
      mutable_eticket()->::vplex::vsDirectory::ETicketData::MergeFrom(from.eticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleTicket::CopyFrom(const TitleTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleTicket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_eticket()) {
    if (!this->eticket().IsInitialized()) return false;
  }
  return true;
}

void TitleTicket::Swap(TitleTicket* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(eticket_, other->eticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleTicket_descriptor_;
  metadata.reflection = TitleTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Subscription::kDatasetIdFieldNumber;
const int Subscription::kDatasetNameFieldNumber;
const int Subscription::kFilterFieldNumber;
const int Subscription::kDeviceRootFieldNumber;
const int Subscription::kDatasetRootFieldNumber;
const int Subscription::kUploadOkFieldNumber;
const int Subscription::kDownloadOkFieldNumber;
const int Subscription::kUploadDeleteOkFieldNumber;
const int Subscription::kDownloadDeleteOkFieldNumber;
const int Subscription::kDatasetLocationFieldNumber;
const int Subscription::kContentTypeFieldNumber;
const int Subscription::kCreatedForFieldNumber;
const int Subscription::kMaxSizeFieldNumber;
const int Subscription::kMaxFilesFieldNumber;
const int Subscription::kCreationTimeFieldNumber;
#endif  // !_MSC_VER

Subscription::Subscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Subscription::InitAsDefaultInstance() {
}

Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Subscription::SharedCtor() {
  _cached_size_ = 0;
  datasetid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasetroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uploadok_ = false;
  downloadok_ = false;
  uploaddeleteok_ = false;
  downloaddeleteok_ = false;
  datasetlocation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createdfor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxsize_ = GOOGLE_ULONGLONG(0);
  maxfiles_ = GOOGLE_ULONGLONG(0);
  creationtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Subscription::~Subscription() {
  SharedDtor();
}

void Subscription::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceroot_;
  }
  if (datasetroot_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetroot_;
  }
  if (datasetlocation_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetlocation_;
  }
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (createdfor_ != &::google::protobuf::internal::kEmptyString) {
    delete createdfor_;
  }
  if (this != default_instance_) {
  }
}

void Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscription_descriptor_;
}

const Subscription& Subscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

Subscription* Subscription::default_instance_ = NULL;

Subscription* Subscription::New() const {
  return new Subscription;
}

void Subscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    if (has_deviceroot()) {
      if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
        deviceroot_->clear();
      }
    }
    if (has_datasetroot()) {
      if (datasetroot_ != &::google::protobuf::internal::kEmptyString) {
        datasetroot_->clear();
      }
    }
    uploadok_ = false;
    downloadok_ = false;
    uploaddeleteok_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    downloaddeleteok_ = false;
    if (has_datasetlocation()) {
      if (datasetlocation_ != &::google::protobuf::internal::kEmptyString) {
        datasetlocation_->clear();
      }
    }
    if (has_contenttype()) {
      if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
        contenttype_->clear();
      }
    }
    if (has_createdfor()) {
      if (createdfor_ != &::google::protobuf::internal::kEmptyString) {
        createdfor_->clear();
      }
    }
    maxsize_ = GOOGLE_ULONGLONG(0);
    maxfiles_ = GOOGLE_ULONGLONG(0);
    creationtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 datasetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasetName;
        break;
      }
      
      // optional string datasetName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filter;
        break;
      }
      
      // optional string filter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceRoot;
        break;
      }
      
      // optional string deviceRoot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceRoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceroot().data(), this->deviceroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_datasetRoot;
        break;
      }
      
      // optional string datasetRoot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetRoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetroot().data(), this->datasetroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uploadOk;
        break;
      }
      
      // optional bool uploadOk = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploadOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uploadok_)));
          set_has_uploadok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_downloadOk;
        break;
      }
      
      // optional bool downloadOk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloadOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &downloadok_)));
          set_has_downloadok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uploadDeleteOk;
        break;
      }
      
      // optional bool uploadDeleteOk = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploadDeleteOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uploaddeleteok_)));
          set_has_uploaddeleteok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_downloadDeleteOk;
        break;
      }
      
      // optional bool downloadDeleteOk = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloadDeleteOk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &downloaddeleteok_)));
          set_has_downloaddeleteok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_datasetLocation;
        break;
      }
      
      // optional string datasetLocation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetlocation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetlocation().data(), this->datasetlocation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_contentType;
        break;
      }
      
      // optional string contentType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_createdFor;
        break;
      }
      
      // optional string createdFor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdFor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdfor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdfor().data(), this->createdfor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_maxSize;
        break;
      }
      
      // optional fixed64 maxSize = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxsize_)));
          set_has_maxsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_maxFiles;
        break;
      }
      
      // optional fixed64 maxFiles = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxfiles_)));
          set_has_maxfiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_creationTime;
        break;
      }
      
      // optional fixed64 creationTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_creationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creationtime_)));
          set_has_creationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 datasetId = 1;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->datasetid(), output);
  }
  
  // optional string datasetName = 2;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->datasetname(), output);
  }
  
  // optional string filter = 3;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filter(), output);
  }
  
  // optional string deviceRoot = 4;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deviceroot(), output);
  }
  
  // optional string datasetRoot = 5;
  if (has_datasetroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetroot().data(), this->datasetroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->datasetroot(), output);
  }
  
  // optional bool uploadOk = 6;
  if (has_uploadok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->uploadok(), output);
  }
  
  // optional bool downloadOk = 7;
  if (has_downloadok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->downloadok(), output);
  }
  
  // optional bool uploadDeleteOk = 8;
  if (has_uploaddeleteok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->uploaddeleteok(), output);
  }
  
  // optional bool downloadDeleteOk = 9;
  if (has_downloaddeleteok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->downloaddeleteok(), output);
  }
  
  // optional string datasetLocation = 10;
  if (has_datasetlocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetlocation().data(), this->datasetlocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->datasetlocation(), output);
  }
  
  // optional string contentType = 11;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->contenttype(), output);
  }
  
  // optional string createdFor = 12;
  if (has_createdfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdfor().data(), this->createdfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->createdfor(), output);
  }
  
  // optional fixed64 maxSize = 13;
  if (has_maxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->maxsize(), output);
  }
  
  // optional fixed64 maxFiles = 14;
  if (has_maxfiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->maxfiles(), output);
  }
  
  // optional fixed64 creationTime = 15;
  if (has_creationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->creationtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Subscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 datasetId = 1;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->datasetid(), target);
  }
  
  // optional string datasetName = 2;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datasetname(), target);
  }
  
  // optional string filter = 3;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filter(), target);
  }
  
  // optional string deviceRoot = 4;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceroot(), target);
  }
  
  // optional string datasetRoot = 5;
  if (has_datasetroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetroot().data(), this->datasetroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->datasetroot(), target);
  }
  
  // optional bool uploadOk = 6;
  if (has_uploadok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->uploadok(), target);
  }
  
  // optional bool downloadOk = 7;
  if (has_downloadok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->downloadok(), target);
  }
  
  // optional bool uploadDeleteOk = 8;
  if (has_uploaddeleteok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->uploaddeleteok(), target);
  }
  
  // optional bool downloadDeleteOk = 9;
  if (has_downloaddeleteok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->downloaddeleteok(), target);
  }
  
  // optional string datasetLocation = 10;
  if (has_datasetlocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetlocation().data(), this->datasetlocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->datasetlocation(), target);
  }
  
  // optional string contentType = 11;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->contenttype(), target);
  }
  
  // optional string createdFor = 12;
  if (has_createdfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdfor().data(), this->createdfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->createdfor(), target);
  }
  
  // optional fixed64 maxSize = 13;
  if (has_maxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->maxsize(), target);
  }
  
  // optional fixed64 maxFiles = 14;
  if (has_maxfiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->maxfiles(), target);
  }
  
  // optional fixed64 creationTime = 15;
  if (has_creationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->creationtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Subscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 datasetId = 1;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string datasetName = 2;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // optional string filter = 3;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // optional string deviceRoot = 4;
    if (has_deviceroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceroot());
    }
    
    // optional string datasetRoot = 5;
    if (has_datasetroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetroot());
    }
    
    // optional bool uploadOk = 6;
    if (has_uploadok()) {
      total_size += 1 + 1;
    }
    
    // optional bool downloadOk = 7;
    if (has_downloadok()) {
      total_size += 1 + 1;
    }
    
    // optional bool uploadDeleteOk = 8;
    if (has_uploaddeleteok()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool downloadDeleteOk = 9;
    if (has_downloaddeleteok()) {
      total_size += 1 + 1;
    }
    
    // optional string datasetLocation = 10;
    if (has_datasetlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetlocation());
    }
    
    // optional string contentType = 11;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }
    
    // optional string createdFor = 12;
    if (has_createdfor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdfor());
    }
    
    // optional fixed64 maxSize = 13;
    if (has_maxsize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 maxFiles = 14;
    if (has_maxfiles()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 creationTime = 15;
    if (has_creationtime()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Subscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Subscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_deviceroot()) {
      set_deviceroot(from.deviceroot());
    }
    if (from.has_datasetroot()) {
      set_datasetroot(from.datasetroot());
    }
    if (from.has_uploadok()) {
      set_uploadok(from.uploadok());
    }
    if (from.has_downloadok()) {
      set_downloadok(from.downloadok());
    }
    if (from.has_uploaddeleteok()) {
      set_uploaddeleteok(from.uploaddeleteok());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_downloaddeleteok()) {
      set_downloaddeleteok(from.downloaddeleteok());
    }
    if (from.has_datasetlocation()) {
      set_datasetlocation(from.datasetlocation());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_createdfor()) {
      set_createdfor(from.createdfor());
    }
    if (from.has_maxsize()) {
      set_maxsize(from.maxsize());
    }
    if (from.has_maxfiles()) {
      set_maxfiles(from.maxfiles());
    }
    if (from.has_creationtime()) {
      set_creationtime(from.creationtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Subscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  
  return true;
}

void Subscription::Swap(Subscription* other) {
  if (other != this) {
    std::swap(datasetid_, other->datasetid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(filter_, other->filter_);
    std::swap(deviceroot_, other->deviceroot_);
    std::swap(datasetroot_, other->datasetroot_);
    std::swap(uploadok_, other->uploadok_);
    std::swap(downloadok_, other->downloadok_);
    std::swap(uploaddeleteok_, other->uploaddeleteok_);
    std::swap(downloaddeleteok_, other->downloaddeleteok_);
    std::swap(datasetlocation_, other->datasetlocation_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(createdfor_, other->createdfor_);
    std::swap(maxsize_, other->maxsize_);
    std::swap(maxfiles_, other->maxfiles_);
    std::swap(creationtime_, other->creationtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscription_descriptor_;
  metadata.reflection = Subscription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncDirectory::kLocalPathFieldNumber;
const int SyncDirectory::kServerPathFieldNumber;
const int SyncDirectory::kPrivateFlagFieldNumber;
#endif  // !_MSC_VER

SyncDirectory::SyncDirectory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncDirectory::InitAsDefaultInstance() {
}

SyncDirectory::SyncDirectory(const SyncDirectory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncDirectory::SharedCtor() {
  _cached_size_ = 0;
  localpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privateflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncDirectory::~SyncDirectory() {
  SharedDtor();
}

void SyncDirectory::SharedDtor() {
  if (localpath_ != &::google::protobuf::internal::kEmptyString) {
    delete localpath_;
  }
  if (serverpath_ != &::google::protobuf::internal::kEmptyString) {
    delete serverpath_;
  }
  if (this != default_instance_) {
  }
}

void SyncDirectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncDirectory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncDirectory_descriptor_;
}

const SyncDirectory& SyncDirectory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SyncDirectory* SyncDirectory::default_instance_ = NULL;

SyncDirectory* SyncDirectory::New() const {
  return new SyncDirectory;
}

void SyncDirectory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_localpath()) {
      if (localpath_ != &::google::protobuf::internal::kEmptyString) {
        localpath_->clear();
      }
    }
    if (has_serverpath()) {
      if (serverpath_ != &::google::protobuf::internal::kEmptyString) {
        serverpath_->clear();
      }
    }
    privateflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncDirectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string localPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localpath().data(), this->localpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_serverPath;
        break;
      }
      
      // required string serverPath = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverpath().data(), this->serverpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_privateFlag;
        break;
      }
      
      // required bool privateFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privateFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privateflag_)));
          set_has_privateflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncDirectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string localPath = 1;
  if (has_localpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localpath().data(), this->localpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->localpath(), output);
  }
  
  // required string serverPath = 2;
  if (has_serverpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverpath().data(), this->serverpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serverpath(), output);
  }
  
  // required bool privateFlag = 3;
  if (has_privateflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->privateflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncDirectory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string localPath = 1;
  if (has_localpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localpath().data(), this->localpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->localpath(), target);
  }
  
  // required string serverPath = 2;
  if (has_serverpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverpath().data(), this->serverpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverpath(), target);
  }
  
  // required bool privateFlag = 3;
  if (has_privateflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->privateflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncDirectory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string localPath = 1;
    if (has_localpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localpath());
    }
    
    // required string serverPath = 2;
    if (has_serverpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverpath());
    }
    
    // required bool privateFlag = 3;
    if (has_privateflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncDirectory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncDirectory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncDirectory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncDirectory::MergeFrom(const SyncDirectory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localpath()) {
      set_localpath(from.localpath());
    }
    if (from.has_serverpath()) {
      set_serverpath(from.serverpath());
    }
    if (from.has_privateflag()) {
      set_privateflag(from.privateflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncDirectory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncDirectory::CopyFrom(const SyncDirectory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncDirectory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SyncDirectory::Swap(SyncDirectory* other) {
  if (other != this) {
    std::swap(localpath_, other->localpath_);
    std::swap(serverpath_, other->serverpath_);
    std::swap(privateflag_, other->privateflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncDirectory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncDirectory_descriptor_;
  metadata.reflection = SyncDirectory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetData::kDatasetIdFieldNumber;
const int DatasetData::kDetailHashFieldNumber;
#endif  // !_MSC_VER

DatasetData::DatasetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetData::InitAsDefaultInstance() {
}

DatasetData::DatasetData(const DatasetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetData::SharedCtor() {
  _cached_size_ = 0;
  datasetid_ = GOOGLE_ULONGLONG(0);
  detailhash_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetData::~DatasetData() {
  SharedDtor();
}

void DatasetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatasetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetData_descriptor_;
}

const DatasetData& DatasetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DatasetData* DatasetData::default_instance_ = NULL;

DatasetData* DatasetData::New() const {
  return new DatasetData;
}

void DatasetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datasetid_ = GOOGLE_ULONGLONG(0);
    detailhash_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 datasetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_detailHash;
        break;
      }
      
      // required int32 detailHash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detailHash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detailhash_)));
          set_has_detailhash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->datasetid(), output);
  }
  
  // required int32 detailHash = 2;
  if (has_detailhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->detailhash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->datasetid(), target);
  }
  
  // required int32 detailHash = 2;
  if (has_detailhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->detailhash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 datasetId = 1;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required int32 detailHash = 2;
    if (has_detailhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detailhash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetData::MergeFrom(const DatasetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_detailhash()) {
      set_detailhash(from.detailhash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetData::CopyFrom(const DatasetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DatasetData::Swap(DatasetData* other) {
  if (other != this) {
    std::swap(datasetid_, other->datasetid_);
    std::swap(detailhash_, other->detailhash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetData_descriptor_;
  metadata.reflection = DatasetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetDetail::kDatasetIdFieldNumber;
const int DatasetDetail::kDatasetNameFieldNumber;
const int DatasetDetail::kContentTypeFieldNumber;
const int DatasetDetail::kCreatedForFieldNumber;
const int DatasetDetail::kExternalIdFieldNumber;
const int DatasetDetail::kLastUpdatedFieldNumber;
const int DatasetDetail::kStorageClusterNameFieldNumber;
const int DatasetDetail::kStorageClusterHostNameFieldNumber;
const int DatasetDetail::kStorageClusterPortFieldNumber;
const int DatasetDetail::kDatasetLocationFieldNumber;
const int DatasetDetail::kSizeOnDiskFieldNumber;
const int DatasetDetail::kDatasetTypeFieldNumber;
const int DatasetDetail::kLinkedToFieldNumber;
const int DatasetDetail::kClusterIdFieldNumber;
const int DatasetDetail::kUserIdFieldNumber;
const int DatasetDetail::kSuspendedFlagFieldNumber;
const int DatasetDetail::kPrimaryStorageIdFieldNumber;
const int DatasetDetail::kDeleteDataAfterFieldNumber;
const int DatasetDetail::kArchiveStorageDeviceIdFieldNumber;
const int DatasetDetail::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

DatasetDetail::DatasetDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetDetail::InitAsDefaultInstance() {
}

DatasetDetail::DatasetDetail(const DatasetDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetDetail::SharedCtor() {
  _cached_size_ = 0;
  datasetid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contenttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createdfor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  externalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastupdated_ = GOOGLE_ULONGLONG(0);
  storageclustername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storageclusterhostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storageclusterport_ = 0;
  datasetlocation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sizeondisk_ = GOOGLE_ULONGLONG(0);
  datasettype_ = 1;
  linkedto_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  suspendedflag_ = false;
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  deletedataafter_ = GOOGLE_ULONGLONG(0);
  displayname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetDetail::~DatasetDetail() {
  SharedDtor();
}

void DatasetDetail::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
    delete contenttype_;
  }
  if (createdfor_ != &::google::protobuf::internal::kEmptyString) {
    delete createdfor_;
  }
  if (externalid_ != &::google::protobuf::internal::kEmptyString) {
    delete externalid_;
  }
  if (storageclustername_ != &::google::protobuf::internal::kEmptyString) {
    delete storageclustername_;
  }
  if (storageclusterhostname_ != &::google::protobuf::internal::kEmptyString) {
    delete storageclusterhostname_;
  }
  if (datasetlocation_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetlocation_;
  }
  if (displayname_ != &::google::protobuf::internal::kEmptyString) {
    delete displayname_;
  }
  if (this != default_instance_) {
  }
}

void DatasetDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetDetail_descriptor_;
}

const DatasetDetail& DatasetDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DatasetDetail* DatasetDetail::default_instance_ = NULL;

DatasetDetail* DatasetDetail::New() const {
  return new DatasetDetail;
}

void DatasetDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    if (has_contenttype()) {
      if (contenttype_ != &::google::protobuf::internal::kEmptyString) {
        contenttype_->clear();
      }
    }
    if (has_createdfor()) {
      if (createdfor_ != &::google::protobuf::internal::kEmptyString) {
        createdfor_->clear();
      }
    }
    if (has_externalid()) {
      if (externalid_ != &::google::protobuf::internal::kEmptyString) {
        externalid_->clear();
      }
    }
    lastupdated_ = GOOGLE_ULONGLONG(0);
    if (has_storageclustername()) {
      if (storageclustername_ != &::google::protobuf::internal::kEmptyString) {
        storageclustername_->clear();
      }
    }
    if (has_storageclusterhostname()) {
      if (storageclusterhostname_ != &::google::protobuf::internal::kEmptyString) {
        storageclusterhostname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    storageclusterport_ = 0;
    if (has_datasetlocation()) {
      if (datasetlocation_ != &::google::protobuf::internal::kEmptyString) {
        datasetlocation_->clear();
      }
    }
    sizeondisk_ = GOOGLE_ULONGLONG(0);
    datasettype_ = 1;
    linkedto_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    suspendedflag_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    deletedataafter_ = GOOGLE_ULONGLONG(0);
    if (has_displayname()) {
      if (displayname_ != &::google::protobuf::internal::kEmptyString) {
        displayname_->clear();
      }
    }
  }
  archivestoragedeviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 datasetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasetName;
        break;
      }
      
      // required string datasetName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contentType;
        break;
      }
      
      // required string contentType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contentType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contenttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contenttype().data(), this->contenttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_createdFor;
        break;
      }
      
      // optional string createdFor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdFor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdfor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdfor().data(), this->createdfor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_externalId;
        break;
      }
      
      // optional string externalId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_externalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_externalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->externalid().data(), this->externalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lastUpdated;
        break;
      }
      
      // required fixed64 lastUpdated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastUpdated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastupdated_)));
          set_has_lastupdated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_storageClusterName;
        break;
      }
      
      // optional string storageClusterName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageClusterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storageclustername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storageclustername().data(), this->storageclustername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_storageClusterHostName;
        break;
      }
      
      // optional string storageClusterHostName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageClusterHostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storageclusterhostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storageclusterhostname().data(), this->storageclusterhostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_storageClusterPort;
        break;
      }
      
      // optional int32 storageClusterPort = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storageClusterPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storageclusterport_)));
          set_has_storageclusterport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_datasetLocation;
        break;
      }
      
      // optional string datasetLocation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetlocation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetlocation().data(), this->datasetlocation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_sizeOnDisk;
        break;
      }
      
      // optional fixed64 sizeOnDisk = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sizeOnDisk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sizeondisk_)));
          set_has_sizeondisk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_datasetType;
        break;
      }
      
      // optional .vplex.vsDirectory.DatasetType datasetType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettype(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_linkedTo;
        break;
      }
      
      // optional fixed64 linkedTo = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_linkedTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &linkedto_)));
          set_has_linkedto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_clusterId;
        break;
      }
      
      // optional fixed64 clusterId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_userId;
        break;
      }
      
      // optional fixed64 userId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_suspendedFlag;
        break;
      }
      
      // optional bool suspendedFlag = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspendedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspendedflag_)));
          set_has_suspendedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_primaryStorageId;
        break;
      }
      
      // optional fixed64 primaryStorageId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_deleteDataAfter;
        break;
      }
      
      // optional fixed64 deleteDataAfter = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deleteDataAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deletedataafter_)));
          set_has_deletedataafter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_archiveStorageDeviceId;
        break;
      }
      
      // repeated fixed64 archiveStorageDeviceId = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_archiveStorageDeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 2, 153, input, this->mutable_archivestoragedeviceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_archivestoragedeviceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_archiveStorageDeviceId;
        if (input->ExpectTag(162)) goto parse_displayName;
        break;
      }
      
      // optional string displayName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_displayName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_displayname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->displayname().data(), this->displayname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->datasetid(), output);
  }
  
  // required string datasetName = 2;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->datasetname(), output);
  }
  
  // required string contentType = 3;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->contenttype(), output);
  }
  
  // optional string createdFor = 4;
  if (has_createdfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdfor().data(), this->createdfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->createdfor(), output);
  }
  
  // optional string externalId = 5;
  if (has_externalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externalid().data(), this->externalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->externalid(), output);
  }
  
  // required fixed64 lastUpdated = 6;
  if (has_lastupdated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->lastupdated(), output);
  }
  
  // optional string storageClusterName = 7;
  if (has_storageclustername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageclustername().data(), this->storageclustername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->storageclustername(), output);
  }
  
  // optional string storageClusterHostName = 8;
  if (has_storageclusterhostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageclusterhostname().data(), this->storageclusterhostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->storageclusterhostname(), output);
  }
  
  // optional int32 storageClusterPort = 9;
  if (has_storageclusterport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->storageclusterport(), output);
  }
  
  // optional string datasetLocation = 10;
  if (has_datasetlocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetlocation().data(), this->datasetlocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->datasetlocation(), output);
  }
  
  // optional fixed64 sizeOnDisk = 11;
  if (has_sizeondisk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->sizeondisk(), output);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 12;
  if (has_datasettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->datasettype(), output);
  }
  
  // optional fixed64 linkedTo = 13;
  if (has_linkedto()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->linkedto(), output);
  }
  
  // optional fixed64 clusterId = 14;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->clusterid(), output);
  }
  
  // optional fixed64 userId = 15;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->userid(), output);
  }
  
  // optional bool suspendedFlag = 16;
  if (has_suspendedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->suspendedflag(), output);
  }
  
  // optional fixed64 primaryStorageId = 17;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(17, this->primarystorageid(), output);
  }
  
  // optional fixed64 deleteDataAfter = 18;
  if (has_deletedataafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(18, this->deletedataafter(), output);
  }
  
  // repeated fixed64 archiveStorageDeviceId = 19;
  for (int i = 0; i < this->archivestoragedeviceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      19, this->archivestoragedeviceid(i), output);
  }
  
  // optional string displayName = 20;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->displayname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->datasetid(), target);
  }
  
  // required string datasetName = 2;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datasetname(), target);
  }
  
  // required string contentType = 3;
  if (has_contenttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contenttype().data(), this->contenttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contenttype(), target);
  }
  
  // optional string createdFor = 4;
  if (has_createdfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdfor().data(), this->createdfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->createdfor(), target);
  }
  
  // optional string externalId = 5;
  if (has_externalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->externalid().data(), this->externalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->externalid(), target);
  }
  
  // required fixed64 lastUpdated = 6;
  if (has_lastupdated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->lastupdated(), target);
  }
  
  // optional string storageClusterName = 7;
  if (has_storageclustername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageclustername().data(), this->storageclustername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->storageclustername(), target);
  }
  
  // optional string storageClusterHostName = 8;
  if (has_storageclusterhostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageclusterhostname().data(), this->storageclusterhostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->storageclusterhostname(), target);
  }
  
  // optional int32 storageClusterPort = 9;
  if (has_storageclusterport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->storageclusterport(), target);
  }
  
  // optional string datasetLocation = 10;
  if (has_datasetlocation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetlocation().data(), this->datasetlocation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->datasetlocation(), target);
  }
  
  // optional fixed64 sizeOnDisk = 11;
  if (has_sizeondisk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->sizeondisk(), target);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 12;
  if (has_datasettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->datasettype(), target);
  }
  
  // optional fixed64 linkedTo = 13;
  if (has_linkedto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->linkedto(), target);
  }
  
  // optional fixed64 clusterId = 14;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->clusterid(), target);
  }
  
  // optional fixed64 userId = 15;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->userid(), target);
  }
  
  // optional bool suspendedFlag = 16;
  if (has_suspendedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->suspendedflag(), target);
  }
  
  // optional fixed64 primaryStorageId = 17;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(17, this->primarystorageid(), target);
  }
  
  // optional fixed64 deleteDataAfter = 18;
  if (has_deletedataafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(18, this->deletedataafter(), target);
  }
  
  // repeated fixed64 archiveStorageDeviceId = 19;
  for (int i = 0; i < this->archivestoragedeviceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(19, this->archivestoragedeviceid(i), target);
  }
  
  // optional string displayName = 20;
  if (has_displayname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->displayname().data(), this->displayname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->displayname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 datasetId = 1;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required string datasetName = 2;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // required string contentType = 3;
    if (has_contenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contenttype());
    }
    
    // optional string createdFor = 4;
    if (has_createdfor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdfor());
    }
    
    // optional string externalId = 5;
    if (has_externalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->externalid());
    }
    
    // required fixed64 lastUpdated = 6;
    if (has_lastupdated()) {
      total_size += 1 + 8;
    }
    
    // optional string storageClusterName = 7;
    if (has_storageclustername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storageclustername());
    }
    
    // optional string storageClusterHostName = 8;
    if (has_storageclusterhostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storageclusterhostname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 storageClusterPort = 9;
    if (has_storageclusterport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storageclusterport());
    }
    
    // optional string datasetLocation = 10;
    if (has_datasetlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetlocation());
    }
    
    // optional fixed64 sizeOnDisk = 11;
    if (has_sizeondisk()) {
      total_size += 1 + 8;
    }
    
    // optional .vplex.vsDirectory.DatasetType datasetType = 12;
    if (has_datasettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettype());
    }
    
    // optional fixed64 linkedTo = 13;
    if (has_linkedto()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 clusterId = 14;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 userId = 15;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional bool suspendedFlag = 16;
    if (has_suspendedflag()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional fixed64 primaryStorageId = 17;
    if (has_primarystorageid()) {
      total_size += 2 + 8;
    }
    
    // optional fixed64 deleteDataAfter = 18;
    if (has_deletedataafter()) {
      total_size += 2 + 8;
    }
    
    // optional string displayName = 20;
    if (has_displayname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->displayname());
    }
    
  }
  // repeated fixed64 archiveStorageDeviceId = 19;
  {
    int data_size = 0;
    data_size = 8 * this->archivestoragedeviceid_size();
    total_size += 2 * this->archivestoragedeviceid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetDetail::MergeFrom(const DatasetDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  archivestoragedeviceid_.MergeFrom(from.archivestoragedeviceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_contenttype()) {
      set_contenttype(from.contenttype());
    }
    if (from.has_createdfor()) {
      set_createdfor(from.createdfor());
    }
    if (from.has_externalid()) {
      set_externalid(from.externalid());
    }
    if (from.has_lastupdated()) {
      set_lastupdated(from.lastupdated());
    }
    if (from.has_storageclustername()) {
      set_storageclustername(from.storageclustername());
    }
    if (from.has_storageclusterhostname()) {
      set_storageclusterhostname(from.storageclusterhostname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_storageclusterport()) {
      set_storageclusterport(from.storageclusterport());
    }
    if (from.has_datasetlocation()) {
      set_datasetlocation(from.datasetlocation());
    }
    if (from.has_sizeondisk()) {
      set_sizeondisk(from.sizeondisk());
    }
    if (from.has_datasettype()) {
      set_datasettype(from.datasettype());
    }
    if (from.has_linkedto()) {
      set_linkedto(from.linkedto());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_suspendedflag()) {
      set_suspendedflag(from.suspendedflag());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_deletedataafter()) {
      set_deletedataafter(from.deletedataafter());
    }
    if (from.has_displayname()) {
      set_displayname(from.displayname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetDetail::CopyFrom(const DatasetDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;
  
  return true;
}

void DatasetDetail::Swap(DatasetDetail* other) {
  if (other != this) {
    std::swap(datasetid_, other->datasetid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(contenttype_, other->contenttype_);
    std::swap(createdfor_, other->createdfor_);
    std::swap(externalid_, other->externalid_);
    std::swap(lastupdated_, other->lastupdated_);
    std::swap(storageclustername_, other->storageclustername_);
    std::swap(storageclusterhostname_, other->storageclusterhostname_);
    std::swap(storageclusterport_, other->storageclusterport_);
    std::swap(datasetlocation_, other->datasetlocation_);
    std::swap(sizeondisk_, other->sizeondisk_);
    std::swap(datasettype_, other->datasettype_);
    std::swap(linkedto_, other->linkedto_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(userid_, other->userid_);
    std::swap(suspendedflag_, other->suspendedflag_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(deletedataafter_, other->deletedataafter_);
    archivestoragedeviceid_.Swap(&other->archivestoragedeviceid_);
    std::swap(displayname_, other->displayname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetDetail_descriptor_;
  metadata.reflection = DatasetDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoredDataset::kUserIdFieldNumber;
const int StoredDataset::kDatasetIdFieldNumber;
const int StoredDataset::kDatasetTypeFieldNumber;
const int StoredDataset::kDataRetentionTimeFieldNumber;
const int StoredDataset::kStorageClusterIdFieldNumber;
const int StoredDataset::kPrimaryStorageIdFieldNumber;
const int StoredDataset::kSecondaryStorageIdFieldNumber;
const int StoredDataset::kBackupStorageIdFieldNumber;
#endif  // !_MSC_VER

StoredDataset::StoredDataset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoredDataset::InitAsDefaultInstance() {
}

StoredDataset::StoredDataset(const StoredDataset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoredDataset::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  datasettype_ = 1;
  dataretentiontime_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  secondarystorageid_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoredDataset::~StoredDataset() {
  SharedDtor();
}

void StoredDataset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoredDataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoredDataset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoredDataset_descriptor_;
}

const StoredDataset& StoredDataset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StoredDataset* StoredDataset::default_instance_ = NULL;

StoredDataset* StoredDataset::New() const {
  return new StoredDataset;
}

void StoredDataset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    datasettype_ = 1;
    dataretentiontime_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    secondarystorageid_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoredDataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_datasetType;
        break;
      }
      
      // required .vplex.vsDirectory.DatasetType datasetType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettype(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dataRetentionTime;
        break;
      }
      
      // required fixed64 dataRetentionTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataRetentionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataretentiontime_)));
          set_has_dataretentiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_storageClusterId;
        break;
      }
      
      // optional fixed64 storageClusterId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_primaryStorageId;
        break;
      }
      
      // optional fixed64 primaryStorageId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_secondaryStorageId;
        break;
      }
      
      // optional fixed64 secondaryStorageId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarystorageid_)));
          set_has_secondarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_backupStorageId;
        break;
      }
      
      // optional fixed64 backupStorageId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoredDataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required .vplex.vsDirectory.DatasetType datasetType = 3;
  if (has_datasettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->datasettype(), output);
  }
  
  // required fixed64 dataRetentionTime = 4;
  if (has_dataretentiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->dataretentiontime(), output);
  }
  
  // optional fixed64 storageClusterId = 5;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->storageclusterid(), output);
  }
  
  // optional fixed64 primaryStorageId = 6;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->primarystorageid(), output);
  }
  
  // optional fixed64 secondaryStorageId = 7;
  if (has_secondarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->secondarystorageid(), output);
  }
  
  // optional fixed64 backupStorageId = 8;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->backupstorageid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoredDataset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required .vplex.vsDirectory.DatasetType datasetType = 3;
  if (has_datasettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->datasettype(), target);
  }
  
  // required fixed64 dataRetentionTime = 4;
  if (has_dataretentiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->dataretentiontime(), target);
  }
  
  // optional fixed64 storageClusterId = 5;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->storageclusterid(), target);
  }
  
  // optional fixed64 primaryStorageId = 6;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->primarystorageid(), target);
  }
  
  // optional fixed64 secondaryStorageId = 7;
  if (has_secondarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->secondarystorageid(), target);
  }
  
  // optional fixed64 backupStorageId = 8;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->backupstorageid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoredDataset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required .vplex.vsDirectory.DatasetType datasetType = 3;
    if (has_datasettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettype());
    }
    
    // required fixed64 dataRetentionTime = 4;
    if (has_dataretentiontime()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 storageClusterId = 5;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryStorageId = 6;
    if (has_primarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryStorageId = 7;
    if (has_secondarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 backupStorageId = 8;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoredDataset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoredDataset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoredDataset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoredDataset::MergeFrom(const StoredDataset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_datasettype()) {
      set_datasettype(from.datasettype());
    }
    if (from.has_dataretentiontime()) {
      set_dataretentiontime(from.dataretentiontime());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_secondarystorageid()) {
      set_secondarystorageid(from.secondarystorageid());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoredDataset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoredDataset::CopyFrom(const StoredDataset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoredDataset::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StoredDataset::Swap(StoredDataset* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(datasettype_, other->datasettype_);
    std::swap(dataretentiontime_, other->dataretentiontime_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(secondarystorageid_, other->secondarystorageid_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoredDataset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoredDataset_descriptor_;
  metadata.reflection = StoredDataset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kDeviceIdFieldNumber;
const int DeviceInfo::kDeviceClassFieldNumber;
const int DeviceInfo::kDeviceNameFieldNumber;
const int DeviceInfo::kIsAcerFieldNumber;
const int DeviceInfo::kHasCameraFieldNumber;
const int DeviceInfo::kOsVersionFieldNumber;
const int DeviceInfo::kProtocolVersionFieldNumber;
const int DeviceInfo::kIsVirtDriveFieldNumber;
const int DeviceInfo::kIsMediaServerFieldNumber;
const int DeviceInfo::kFeatureMediaServerCapableFieldNumber;
const int DeviceInfo::kFeatureVirtDriveCapableFieldNumber;
const int DeviceInfo::kFeatureRemoteFileAccessCapableFieldNumber;
const int DeviceInfo::kFeatureFSDatasetTypeCapableFieldNumber;
const int DeviceInfo::kModelNumberFieldNumber;
const int DeviceInfo::kBuildInfoFieldNumber;
const int DeviceInfo::kFeatureVirtSyncCapableFieldNumber;
const int DeviceInfo::kFeatureMyStorageServerCapableFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = GOOGLE_ULONGLONG(0);
  deviceclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isacer_ = false;
  hascamera_ = false;
  osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocolversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvirtdrive_ = false;
  ismediaserver_ = false;
  featuremediaservercapable_ = false;
  featurevirtdrivecapable_ = false;
  featureremotefileaccesscapable_ = false;
  featurefsdatasettypecapable_ = false;
  modelnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featurevirtsynccapable_ = false;
  featuremystorageservercapable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (deviceclass_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceclass_;
  }
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (protocolversion_ != &::google::protobuf::internal::kEmptyString) {
    delete protocolversion_;
  }
  if (modelnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete modelnumber_;
  }
  if (buildinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete buildinfo_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_deviceclass()) {
      if (deviceclass_ != &::google::protobuf::internal::kEmptyString) {
        deviceclass_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    isacer_ = false;
    hascamera_ = false;
    if (has_osversion()) {
      if (osversion_ != &::google::protobuf::internal::kEmptyString) {
        osversion_->clear();
      }
    }
    if (has_protocolversion()) {
      if (protocolversion_ != &::google::protobuf::internal::kEmptyString) {
        protocolversion_->clear();
      }
    }
    isvirtdrive_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ismediaserver_ = false;
    featuremediaservercapable_ = false;
    featurevirtdrivecapable_ = false;
    featureremotefileaccesscapable_ = false;
    featurefsdatasettypecapable_ = false;
    if (has_modelnumber()) {
      if (modelnumber_ != &::google::protobuf::internal::kEmptyString) {
        modelnumber_->clear();
      }
    }
    if (has_buildinfo()) {
      if (buildinfo_ != &::google::protobuf::internal::kEmptyString) {
        buildinfo_->clear();
      }
    }
    featurevirtsynccapable_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    featuremystorageservercapable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 deviceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceClass;
        break;
      }
      
      // required string deviceClass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceclass().data(), this->deviceclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceName;
        break;
      }
      
      // optional string deviceName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isAcer;
        break;
      }
      
      // optional bool isAcer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAcer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isacer_)));
          set_has_isacer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasCamera;
        break;
      }
      
      // optional bool hasCamera = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascamera_)));
          set_has_hascamera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_osVersion;
        break;
      }
      
      // optional string osVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_protocolVersion;
        break;
      }
      
      // optional string protocolVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocolVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocolversion().data(), this->protocolversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isVirtDrive;
        break;
      }
      
      // optional bool isVirtDrive = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVirtDrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvirtdrive_)));
          set_has_isvirtdrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isMediaServer;
        break;
      }
      
      // optional bool isMediaServer = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMediaServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismediaserver_)));
          set_has_ismediaserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_featureMediaServerCapable;
        break;
      }
      
      // optional bool featureMediaServerCapable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMediaServerCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremediaservercapable_)));
          set_has_featuremediaservercapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_featureVirtDriveCapable;
        break;
      }
      
      // optional bool featureVirtDriveCapable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtDriveCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtdrivecapable_)));
          set_has_featurevirtdrivecapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_featureRemoteFileAccessCapable;
        break;
      }
      
      // optional bool featureRemoteFileAccessCapable = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureRemoteFileAccessCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featureremotefileaccesscapable_)));
          set_has_featureremotefileaccesscapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_featureFSDatasetTypeCapable;
        break;
      }
      
      // optional bool featureFSDatasetTypeCapable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureFSDatasetTypeCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurefsdatasettypecapable_)));
          set_has_featurefsdatasettypecapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_modelNumber;
        break;
      }
      
      // optional string modelNumber = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelnumber().data(), this->modelnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_buildInfo;
        break;
      }
      
      // optional string buildInfo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildinfo().data(), this->buildinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_featureVirtSyncCapable;
        break;
      }
      
      // optional bool featureVirtSyncCapable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtSyncCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtsynccapable_)));
          set_has_featurevirtsynccapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_featureMyStorageServerCapable;
        break;
      }
      
      // optional bool featureMyStorageServerCapable = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMyStorageServerCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremystorageservercapable_)));
          set_has_featuremystorageservercapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->deviceid(), output);
  }
  
  // required string deviceClass = 2;
  if (has_deviceclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceclass().data(), this->deviceclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceclass(), output);
  }
  
  // optional string deviceName = 3;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->devicename(), output);
  }
  
  // optional bool isAcer = 4;
  if (has_isacer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isacer(), output);
  }
  
  // optional bool hasCamera = 5;
  if (has_hascamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hascamera(), output);
  }
  
  // optional string osVersion = 6;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->osversion(), output);
  }
  
  // optional string protocolVersion = 7;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocolversion().data(), this->protocolversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->protocolversion(), output);
  }
  
  // optional bool isVirtDrive = 8;
  if (has_isvirtdrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isvirtdrive(), output);
  }
  
  // optional bool isMediaServer = 9;
  if (has_ismediaserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ismediaserver(), output);
  }
  
  // optional bool featureMediaServerCapable = 10;
  if (has_featuremediaservercapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->featuremediaservercapable(), output);
  }
  
  // optional bool featureVirtDriveCapable = 11;
  if (has_featurevirtdrivecapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->featurevirtdrivecapable(), output);
  }
  
  // optional bool featureRemoteFileAccessCapable = 12;
  if (has_featureremotefileaccesscapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->featureremotefileaccesscapable(), output);
  }
  
  // optional bool featureFSDatasetTypeCapable = 13;
  if (has_featurefsdatasettypecapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->featurefsdatasettypecapable(), output);
  }
  
  // optional string modelNumber = 14;
  if (has_modelnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelnumber().data(), this->modelnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->modelnumber(), output);
  }
  
  // optional string buildInfo = 15;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildinfo().data(), this->buildinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->buildinfo(), output);
  }
  
  // optional bool featureVirtSyncCapable = 16;
  if (has_featurevirtsynccapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->featurevirtsynccapable(), output);
  }
  
  // optional bool featureMyStorageServerCapable = 17;
  if (has_featuremystorageservercapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->featuremystorageservercapable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->deviceid(), target);
  }
  
  // required string deviceClass = 2;
  if (has_deviceclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceclass().data(), this->deviceclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceclass(), target);
  }
  
  // optional string deviceName = 3;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicename(), target);
  }
  
  // optional bool isAcer = 4;
  if (has_isacer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isacer(), target);
  }
  
  // optional bool hasCamera = 5;
  if (has_hascamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hascamera(), target);
  }
  
  // optional string osVersion = 6;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->osversion(), target);
  }
  
  // optional string protocolVersion = 7;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocolversion().data(), this->protocolversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocolversion(), target);
  }
  
  // optional bool isVirtDrive = 8;
  if (has_isvirtdrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isvirtdrive(), target);
  }
  
  // optional bool isMediaServer = 9;
  if (has_ismediaserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ismediaserver(), target);
  }
  
  // optional bool featureMediaServerCapable = 10;
  if (has_featuremediaservercapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->featuremediaservercapable(), target);
  }
  
  // optional bool featureVirtDriveCapable = 11;
  if (has_featurevirtdrivecapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->featurevirtdrivecapable(), target);
  }
  
  // optional bool featureRemoteFileAccessCapable = 12;
  if (has_featureremotefileaccesscapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->featureremotefileaccesscapable(), target);
  }
  
  // optional bool featureFSDatasetTypeCapable = 13;
  if (has_featurefsdatasettypecapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->featurefsdatasettypecapable(), target);
  }
  
  // optional string modelNumber = 14;
  if (has_modelnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelnumber().data(), this->modelnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->modelnumber(), target);
  }
  
  // optional string buildInfo = 15;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildinfo().data(), this->buildinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->buildinfo(), target);
  }
  
  // optional bool featureVirtSyncCapable = 16;
  if (has_featurevirtsynccapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->featurevirtsynccapable(), target);
  }
  
  // optional bool featureMyStorageServerCapable = 17;
  if (has_featuremystorageservercapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->featuremystorageservercapable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required string deviceClass = 2;
    if (has_deviceclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceclass());
    }
    
    // optional string deviceName = 3;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // optional bool isAcer = 4;
    if (has_isacer()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasCamera = 5;
    if (has_hascamera()) {
      total_size += 1 + 1;
    }
    
    // optional string osVersion = 6;
    if (has_osversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osversion());
    }
    
    // optional string protocolVersion = 7;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocolversion());
    }
    
    // optional bool isVirtDrive = 8;
    if (has_isvirtdrive()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isMediaServer = 9;
    if (has_ismediaserver()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureMediaServerCapable = 10;
    if (has_featuremediaservercapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureVirtDriveCapable = 11;
    if (has_featurevirtdrivecapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureRemoteFileAccessCapable = 12;
    if (has_featureremotefileaccesscapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureFSDatasetTypeCapable = 13;
    if (has_featurefsdatasettypecapable()) {
      total_size += 1 + 1;
    }
    
    // optional string modelNumber = 14;
    if (has_modelnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelnumber());
    }
    
    // optional string buildInfo = 15;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildinfo());
    }
    
    // optional bool featureVirtSyncCapable = 16;
    if (has_featurevirtsynccapable()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool featureMyStorageServerCapable = 17;
    if (has_featuremystorageservercapable()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_deviceclass()) {
      set_deviceclass(from.deviceclass());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_isacer()) {
      set_isacer(from.isacer());
    }
    if (from.has_hascamera()) {
      set_hascamera(from.hascamera());
    }
    if (from.has_osversion()) {
      set_osversion(from.osversion());
    }
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_isvirtdrive()) {
      set_isvirtdrive(from.isvirtdrive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ismediaserver()) {
      set_ismediaserver(from.ismediaserver());
    }
    if (from.has_featuremediaservercapable()) {
      set_featuremediaservercapable(from.featuremediaservercapable());
    }
    if (from.has_featurevirtdrivecapable()) {
      set_featurevirtdrivecapable(from.featurevirtdrivecapable());
    }
    if (from.has_featureremotefileaccesscapable()) {
      set_featureremotefileaccesscapable(from.featureremotefileaccesscapable());
    }
    if (from.has_featurefsdatasettypecapable()) {
      set_featurefsdatasettypecapable(from.featurefsdatasettypecapable());
    }
    if (from.has_modelnumber()) {
      set_modelnumber(from.modelnumber());
    }
    if (from.has_buildinfo()) {
      set_buildinfo(from.buildinfo());
    }
    if (from.has_featurevirtsynccapable()) {
      set_featurevirtsynccapable(from.featurevirtsynccapable());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_featuremystorageservercapable()) {
      set_featuremystorageservercapable(from.featuremystorageservercapable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(deviceclass_, other->deviceclass_);
    std::swap(devicename_, other->devicename_);
    std::swap(isacer_, other->isacer_);
    std::swap(hascamera_, other->hascamera_);
    std::swap(osversion_, other->osversion_);
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(isvirtdrive_, other->isvirtdrive_);
    std::swap(ismediaserver_, other->ismediaserver_);
    std::swap(featuremediaservercapable_, other->featuremediaservercapable_);
    std::swap(featurevirtdrivecapable_, other->featurevirtdrivecapable_);
    std::swap(featureremotefileaccesscapable_, other->featureremotefileaccesscapable_);
    std::swap(featurefsdatasettypecapable_, other->featurefsdatasettypecapable_);
    std::swap(modelnumber_, other->modelnumber_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(featurevirtsynccapable_, other->featurevirtsynccapable_);
    std::swap(featuremystorageservercapable_, other->featuremystorageservercapable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageAccessPort::kPortTypeFieldNumber;
const int StorageAccessPort::kPortFieldNumber;
#endif  // !_MSC_VER

StorageAccessPort::StorageAccessPort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageAccessPort::InitAsDefaultInstance() {
}

StorageAccessPort::StorageAccessPort(const StorageAccessPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageAccessPort::SharedCtor() {
  _cached_size_ = 0;
  porttype_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageAccessPort::~StorageAccessPort() {
  SharedDtor();
}

void StorageAccessPort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StorageAccessPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageAccessPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageAccessPort_descriptor_;
}

const StorageAccessPort& StorageAccessPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StorageAccessPort* StorageAccessPort::default_instance_ = NULL;

StorageAccessPort* StorageAccessPort::New() const {
  return new StorageAccessPort;
}

void StorageAccessPort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    porttype_ = 0;
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageAccessPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.PortType portType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::PortType_IsValid(value)) {
            set_porttype(static_cast< vplex::vsDirectory::PortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageAccessPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.PortType portType = 1;
  if (has_porttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->porttype(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageAccessPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.PortType portType = 1;
  if (has_porttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->porttype(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageAccessPort::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.PortType portType = 1;
    if (has_porttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->porttype());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageAccessPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageAccessPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageAccessPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageAccessPort::MergeFrom(const StorageAccessPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_porttype()) {
      set_porttype(from.porttype());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageAccessPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageAccessPort::CopyFrom(const StorageAccessPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageAccessPort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StorageAccessPort::Swap(StorageAccessPort* other) {
  if (other != this) {
    std::swap(porttype_, other->porttype_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageAccessPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageAccessPort_descriptor_;
  metadata.reflection = StorageAccessPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageAccess::kRouteTypeFieldNumber;
const int StorageAccess::kProtocolFieldNumber;
const int StorageAccess::kServerFieldNumber;
const int StorageAccess::kPortsFieldNumber;
#endif  // !_MSC_VER

StorageAccess::StorageAccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageAccess::InitAsDefaultInstance() {
}

StorageAccess::StorageAccess(const StorageAccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageAccess::SharedCtor() {
  _cached_size_ = 0;
  routetype_ = 0;
  protocol_ = 0;
  server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageAccess::~StorageAccess() {
  SharedDtor();
}

void StorageAccess::SharedDtor() {
  if (server_ != &::google::protobuf::internal::kEmptyString) {
    delete server_;
  }
  if (this != default_instance_) {
  }
}

void StorageAccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageAccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageAccess_descriptor_;
}

const StorageAccess& StorageAccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StorageAccess* StorageAccess::default_instance_ = NULL;

StorageAccess* StorageAccess::New() const {
  return new StorageAccess;
}

void StorageAccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    routetype_ = 0;
    protocol_ = 0;
    if (has_server()) {
      if (server_ != &::google::protobuf::internal::kEmptyString) {
        server_->clear();
      }
    }
  }
  ports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.RouteType routeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::RouteType_IsValid(value)) {
            set_routetype(static_cast< vplex::vsDirectory::RouteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_protocol;
        break;
      }
      
      // required .vplex.vsDirectory.ProtocolType protocol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::ProtocolType_IsValid(value)) {
            set_protocol(static_cast< vplex::vsDirectory::ProtocolType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server;
        break;
      }
      
      // required string server = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server().data(), this->server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ports;
        break;
      }
      
      // repeated .vplex.vsDirectory.StorageAccessPort ports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ports;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.RouteType routeType = 1;
  if (has_routetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->routetype(), output);
  }
  
  // required .vplex.vsDirectory.ProtocolType protocol = 2;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->protocol(), output);
  }
  
  // required string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server(), output);
  }
  
  // repeated .vplex.vsDirectory.StorageAccessPort ports = 4;
  for (int i = 0; i < this->ports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ports(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageAccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.RouteType routeType = 1;
  if (has_routetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->routetype(), target);
  }
  
  // required .vplex.vsDirectory.ProtocolType protocol = 2;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->protocol(), target);
  }
  
  // required string server = 3;
  if (has_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server().data(), this->server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server(), target);
  }
  
  // repeated .vplex.vsDirectory.StorageAccessPort ports = 4;
  for (int i = 0; i < this->ports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ports(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageAccess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.RouteType routeType = 1;
    if (has_routetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->routetype());
    }
    
    // required .vplex.vsDirectory.ProtocolType protocol = 2;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }
    
    // required string server = 3;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server());
    }
    
  }
  // repeated .vplex.vsDirectory.StorageAccessPort ports = 4;
  total_size += 1 * this->ports_size();
  for (int i = 0; i < this->ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ports(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageAccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageAccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageAccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageAccess::MergeFrom(const StorageAccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  ports_.MergeFrom(from.ports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routetype()) {
      set_routetype(from.routetype());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_server()) {
      set_server(from.server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageAccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageAccess::CopyFrom(const StorageAccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageAccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < ports_size(); i++) {
    if (!this->ports(i).IsInitialized()) return false;
  }
  return true;
}

void StorageAccess::Swap(StorageAccess* other) {
  if (other != this) {
    std::swap(routetype_, other->routetype_);
    std::swap(protocol_, other->protocol_);
    std::swap(server_, other->server_);
    ports_.Swap(&other->ports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageAccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageAccess_descriptor_;
  metadata.reflection = StorageAccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAccessTicket::kDeviceIdFieldNumber;
const int DeviceAccessTicket::kAccessTicketFieldNumber;
#endif  // !_MSC_VER

DeviceAccessTicket::DeviceAccessTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceAccessTicket::InitAsDefaultInstance() {
}

DeviceAccessTicket::DeviceAccessTicket(const DeviceAccessTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceAccessTicket::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = GOOGLE_ULONGLONG(0);
  accessticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAccessTicket::~DeviceAccessTicket() {
  SharedDtor();
}

void DeviceAccessTicket::SharedDtor() {
  if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
    delete accessticket_;
  }
  if (this != default_instance_) {
  }
}

void DeviceAccessTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAccessTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAccessTicket_descriptor_;
}

const DeviceAccessTicket& DeviceAccessTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeviceAccessTicket* DeviceAccessTicket::default_instance_ = NULL;

DeviceAccessTicket* DeviceAccessTicket::New() const {
  return new DeviceAccessTicket;
}

void DeviceAccessTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_accessticket()) {
      if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
        accessticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceAccessTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 deviceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accessTicket;
        break;
      }
      
      // required bytes accessTicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accessticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceAccessTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->deviceid(), output);
  }
  
  // required bytes accessTicket = 2;
  if (has_accessticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->accessticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceAccessTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->deviceid(), target);
  }
  
  // required bytes accessTicket = 2;
  if (has_accessticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->accessticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceAccessTicket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required bytes accessTicket = 2;
    if (has_accessticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accessticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAccessTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceAccessTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceAccessTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceAccessTicket::MergeFrom(const DeviceAccessTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_accessticket()) {
      set_accessticket(from.accessticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceAccessTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAccessTicket::CopyFrom(const DeviceAccessTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAccessTicket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DeviceAccessTicket::Swap(DeviceAccessTicket* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(accessticket_, other->accessticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceAccessTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAccessTicket_descriptor_;
  metadata.reflection = DeviceAccessTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStorage::kStorageClusterIdFieldNumber;
const int UserStorage::kStorageNameFieldNumber;
const int UserStorage::kStorageTypeFieldNumber;
const int UserStorage::kUsageLimitFieldNumber;
const int UserStorage::kIsVirtDriveFieldNumber;
const int UserStorage::kIsMediaServerFieldNumber;
const int UserStorage::kAccessHandleFieldNumber;
const int UserStorage::kAccessTicketFieldNumber;
const int UserStorage::kStorageAccessFieldNumber;
const int UserStorage::kFeatureMediaServerEnabledFieldNumber;
const int UserStorage::kFeatureVirtDriveEnabledFieldNumber;
const int UserStorage::kFeatureRemoteFileAccessEnabledFieldNumber;
const int UserStorage::kFeatureFSDatasetTypeEnabledFieldNumber;
const int UserStorage::kDevSpecAccessTicketFieldNumber;
const int UserStorage::kFeatureCloudDocEnabledFieldNumber;
const int UserStorage::kFeatureVirtSyncEnabledFieldNumber;
const int UserStorage::kFeatureMyStorageServerEnabledFieldNumber;
#endif  // !_MSC_VER

UserStorage::UserStorage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStorage::InitAsDefaultInstance() {
}

UserStorage::UserStorage(const UserStorage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStorage::SharedCtor() {
  _cached_size_ = 0;
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  storagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storagetype_ = 0;
  usagelimit_ = GOOGLE_ULONGLONG(0);
  isvirtdrive_ = false;
  ismediaserver_ = false;
  accesshandle_ = GOOGLE_ULONGLONG(0);
  accessticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featuremediaserverenabled_ = false;
  featurevirtdriveenabled_ = false;
  featureremotefileaccessenabled_ = false;
  featurefsdatasettypeenabled_ = false;
  devspecaccessticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featureclouddocenabled_ = false;
  featurevirtsyncenabled_ = false;
  featuremystorageserverenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStorage::~UserStorage() {
  SharedDtor();
}

void UserStorage::SharedDtor() {
  if (storagename_ != &::google::protobuf::internal::kEmptyString) {
    delete storagename_;
  }
  if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
    delete accessticket_;
  }
  if (devspecaccessticket_ != &::google::protobuf::internal::kEmptyString) {
    delete devspecaccessticket_;
  }
  if (this != default_instance_) {
  }
}

void UserStorage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStorage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStorage_descriptor_;
}

const UserStorage& UserStorage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UserStorage* UserStorage::default_instance_ = NULL;

UserStorage* UserStorage::New() const {
  return new UserStorage;
}

void UserStorage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    if (has_storagename()) {
      if (storagename_ != &::google::protobuf::internal::kEmptyString) {
        storagename_->clear();
      }
    }
    storagetype_ = 0;
    usagelimit_ = GOOGLE_ULONGLONG(0);
    isvirtdrive_ = false;
    ismediaserver_ = false;
    accesshandle_ = GOOGLE_ULONGLONG(0);
    if (has_accessticket()) {
      if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
        accessticket_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    featuremediaserverenabled_ = false;
    featurevirtdriveenabled_ = false;
    featureremotefileaccessenabled_ = false;
    featurefsdatasettypeenabled_ = false;
    if (has_devspecaccessticket()) {
      if (devspecaccessticket_ != &::google::protobuf::internal::kEmptyString) {
        devspecaccessticket_->clear();
      }
    }
    featureclouddocenabled_ = false;
    featurevirtsyncenabled_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    featuremystorageserverenabled_ = false;
  }
  storageaccess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStorage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 storageClusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storageName;
        break;
      }
      
      // optional string storageName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storagename().data(), this->storagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_storageType;
        break;
      }
      
      // optional int32 storageType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &storagetype_)));
          set_has_storagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_usageLimit;
        break;
      }
      
      // required fixed64 usageLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usageLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &usagelimit_)));
          set_has_usagelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isVirtDrive;
        break;
      }
      
      // optional bool isVirtDrive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVirtDrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvirtdrive_)));
          set_has_isvirtdrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isMediaServer;
        break;
      }
      
      // optional bool isMediaServer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMediaServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismediaserver_)));
          set_has_ismediaserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_accessHandle;
        break;
      }
      
      // optional fixed64 accessHandle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accessHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &accesshandle_)));
          set_has_accesshandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_accessTicket;
        break;
      }
      
      // optional bytes accessTicket = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accessticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_storageAccess;
        break;
      }
      
      // repeated .vplex.vsDirectory.StorageAccess storageAccess = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageAccess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storageaccess()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_storageAccess;
        if (input->ExpectTag(80)) goto parse_featureMediaServerEnabled;
        break;
      }
      
      // optional bool featureMediaServerEnabled = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMediaServerEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremediaserverenabled_)));
          set_has_featuremediaserverenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_featureVirtDriveEnabled;
        break;
      }
      
      // optional bool featureVirtDriveEnabled = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtDriveEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtdriveenabled_)));
          set_has_featurevirtdriveenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_featureRemoteFileAccessEnabled;
        break;
      }
      
      // optional bool featureRemoteFileAccessEnabled = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureRemoteFileAccessEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featureremotefileaccessenabled_)));
          set_has_featureremotefileaccessenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_featureFSDatasetTypeEnabled;
        break;
      }
      
      // optional bool featureFSDatasetTypeEnabled = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureFSDatasetTypeEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurefsdatasettypeenabled_)));
          set_has_featurefsdatasettypeenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_devSpecAccessTicket;
        break;
      }
      
      // optional bytes devSpecAccessTicket = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devSpecAccessTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devspecaccessticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_featureCloudDocEnabled;
        break;
      }
      
      // optional bool featureCloudDocEnabled = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureCloudDocEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featureclouddocenabled_)));
          set_has_featureclouddocenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_featureVirtSyncEnabled;
        break;
      }
      
      // optional bool featureVirtSyncEnabled = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtSyncEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtsyncenabled_)));
          set_has_featurevirtsyncenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_featureMyStorageServerEnabled;
        break;
      }
      
      // optional bool featureMyStorageServerEnabled = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMyStorageServerEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremystorageserverenabled_)));
          set_has_featuremystorageserverenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStorage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 storageClusterId = 1;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->storageclusterid(), output);
  }
  
  // optional string storageName = 2;
  if (has_storagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storagename().data(), this->storagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->storagename(), output);
  }
  
  // optional int32 storageType = 3;
  if (has_storagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->storagetype(), output);
  }
  
  // required fixed64 usageLimit = 4;
  if (has_usagelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->usagelimit(), output);
  }
  
  // optional bool isVirtDrive = 5;
  if (has_isvirtdrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isvirtdrive(), output);
  }
  
  // optional bool isMediaServer = 6;
  if (has_ismediaserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ismediaserver(), output);
  }
  
  // optional fixed64 accessHandle = 7;
  if (has_accesshandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->accesshandle(), output);
  }
  
  // optional bytes accessTicket = 8;
  if (has_accessticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->accessticket(), output);
  }
  
  // repeated .vplex.vsDirectory.StorageAccess storageAccess = 9;
  for (int i = 0; i < this->storageaccess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->storageaccess(i), output);
  }
  
  // optional bool featureMediaServerEnabled = 10;
  if (has_featuremediaserverenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->featuremediaserverenabled(), output);
  }
  
  // optional bool featureVirtDriveEnabled = 11;
  if (has_featurevirtdriveenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->featurevirtdriveenabled(), output);
  }
  
  // optional bool featureRemoteFileAccessEnabled = 12;
  if (has_featureremotefileaccessenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->featureremotefileaccessenabled(), output);
  }
  
  // optional bool featureFSDatasetTypeEnabled = 13;
  if (has_featurefsdatasettypeenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->featurefsdatasettypeenabled(), output);
  }
  
  // optional bytes devSpecAccessTicket = 14;
  if (has_devspecaccessticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->devspecaccessticket(), output);
  }
  
  // optional bool featureCloudDocEnabled = 15;
  if (has_featureclouddocenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->featureclouddocenabled(), output);
  }
  
  // optional bool featureVirtSyncEnabled = 16;
  if (has_featurevirtsyncenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->featurevirtsyncenabled(), output);
  }
  
  // optional bool featureMyStorageServerEnabled = 17;
  if (has_featuremystorageserverenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->featuremystorageserverenabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStorage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 storageClusterId = 1;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->storageclusterid(), target);
  }
  
  // optional string storageName = 2;
  if (has_storagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storagename().data(), this->storagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->storagename(), target);
  }
  
  // optional int32 storageType = 3;
  if (has_storagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->storagetype(), target);
  }
  
  // required fixed64 usageLimit = 4;
  if (has_usagelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->usagelimit(), target);
  }
  
  // optional bool isVirtDrive = 5;
  if (has_isvirtdrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isvirtdrive(), target);
  }
  
  // optional bool isMediaServer = 6;
  if (has_ismediaserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ismediaserver(), target);
  }
  
  // optional fixed64 accessHandle = 7;
  if (has_accesshandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->accesshandle(), target);
  }
  
  // optional bytes accessTicket = 8;
  if (has_accessticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->accessticket(), target);
  }
  
  // repeated .vplex.vsDirectory.StorageAccess storageAccess = 9;
  for (int i = 0; i < this->storageaccess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->storageaccess(i), target);
  }
  
  // optional bool featureMediaServerEnabled = 10;
  if (has_featuremediaserverenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->featuremediaserverenabled(), target);
  }
  
  // optional bool featureVirtDriveEnabled = 11;
  if (has_featurevirtdriveenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->featurevirtdriveenabled(), target);
  }
  
  // optional bool featureRemoteFileAccessEnabled = 12;
  if (has_featureremotefileaccessenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->featureremotefileaccessenabled(), target);
  }
  
  // optional bool featureFSDatasetTypeEnabled = 13;
  if (has_featurefsdatasettypeenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->featurefsdatasettypeenabled(), target);
  }
  
  // optional bytes devSpecAccessTicket = 14;
  if (has_devspecaccessticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->devspecaccessticket(), target);
  }
  
  // optional bool featureCloudDocEnabled = 15;
  if (has_featureclouddocenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->featureclouddocenabled(), target);
  }
  
  // optional bool featureVirtSyncEnabled = 16;
  if (has_featurevirtsyncenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->featurevirtsyncenabled(), target);
  }
  
  // optional bool featureMyStorageServerEnabled = 17;
  if (has_featuremystorageserverenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->featuremystorageserverenabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStorage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 storageClusterId = 1;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string storageName = 2;
    if (has_storagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storagename());
    }
    
    // optional int32 storageType = 3;
    if (has_storagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->storagetype());
    }
    
    // required fixed64 usageLimit = 4;
    if (has_usagelimit()) {
      total_size += 1 + 8;
    }
    
    // optional bool isVirtDrive = 5;
    if (has_isvirtdrive()) {
      total_size += 1 + 1;
    }
    
    // optional bool isMediaServer = 6;
    if (has_ismediaserver()) {
      total_size += 1 + 1;
    }
    
    // optional fixed64 accessHandle = 7;
    if (has_accesshandle()) {
      total_size += 1 + 8;
    }
    
    // optional bytes accessTicket = 8;
    if (has_accessticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accessticket());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool featureMediaServerEnabled = 10;
    if (has_featuremediaserverenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureVirtDriveEnabled = 11;
    if (has_featurevirtdriveenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureRemoteFileAccessEnabled = 12;
    if (has_featureremotefileaccessenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureFSDatasetTypeEnabled = 13;
    if (has_featurefsdatasettypeenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bytes devSpecAccessTicket = 14;
    if (has_devspecaccessticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devspecaccessticket());
    }
    
    // optional bool featureCloudDocEnabled = 15;
    if (has_featureclouddocenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureVirtSyncEnabled = 16;
    if (has_featurevirtsyncenabled()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool featureMyStorageServerEnabled = 17;
    if (has_featuremystorageserverenabled()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .vplex.vsDirectory.StorageAccess storageAccess = 9;
  total_size += 1 * this->storageaccess_size();
  for (int i = 0; i < this->storageaccess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storageaccess(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStorage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStorage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStorage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStorage::MergeFrom(const UserStorage& from) {
  GOOGLE_CHECK_NE(&from, this);
  storageaccess_.MergeFrom(from.storageaccess_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_storagename()) {
      set_storagename(from.storagename());
    }
    if (from.has_storagetype()) {
      set_storagetype(from.storagetype());
    }
    if (from.has_usagelimit()) {
      set_usagelimit(from.usagelimit());
    }
    if (from.has_isvirtdrive()) {
      set_isvirtdrive(from.isvirtdrive());
    }
    if (from.has_ismediaserver()) {
      set_ismediaserver(from.ismediaserver());
    }
    if (from.has_accesshandle()) {
      set_accesshandle(from.accesshandle());
    }
    if (from.has_accessticket()) {
      set_accessticket(from.accessticket());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_featuremediaserverenabled()) {
      set_featuremediaserverenabled(from.featuremediaserverenabled());
    }
    if (from.has_featurevirtdriveenabled()) {
      set_featurevirtdriveenabled(from.featurevirtdriveenabled());
    }
    if (from.has_featureremotefileaccessenabled()) {
      set_featureremotefileaccessenabled(from.featureremotefileaccessenabled());
    }
    if (from.has_featurefsdatasettypeenabled()) {
      set_featurefsdatasettypeenabled(from.featurefsdatasettypeenabled());
    }
    if (from.has_devspecaccessticket()) {
      set_devspecaccessticket(from.devspecaccessticket());
    }
    if (from.has_featureclouddocenabled()) {
      set_featureclouddocenabled(from.featureclouddocenabled());
    }
    if (from.has_featurevirtsyncenabled()) {
      set_featurevirtsyncenabled(from.featurevirtsyncenabled());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_featuremystorageserverenabled()) {
      set_featuremystorageserverenabled(from.featuremystorageserverenabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStorage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStorage::CopyFrom(const UserStorage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStorage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  for (int i = 0; i < storageaccess_size(); i++) {
    if (!this->storageaccess(i).IsInitialized()) return false;
  }
  return true;
}

void UserStorage::Swap(UserStorage* other) {
  if (other != this) {
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(storagename_, other->storagename_);
    std::swap(storagetype_, other->storagetype_);
    std::swap(usagelimit_, other->usagelimit_);
    std::swap(isvirtdrive_, other->isvirtdrive_);
    std::swap(ismediaserver_, other->ismediaserver_);
    std::swap(accesshandle_, other->accesshandle_);
    std::swap(accessticket_, other->accessticket_);
    storageaccess_.Swap(&other->storageaccess_);
    std::swap(featuremediaserverenabled_, other->featuremediaserverenabled_);
    std::swap(featurevirtdriveenabled_, other->featurevirtdriveenabled_);
    std::swap(featureremotefileaccessenabled_, other->featureremotefileaccessenabled_);
    std::swap(featurefsdatasettypeenabled_, other->featurefsdatasettypeenabled_);
    std::swap(devspecaccessticket_, other->devspecaccessticket_);
    std::swap(featureclouddocenabled_, other->featureclouddocenabled_);
    std::swap(featurevirtsyncenabled_, other->featurevirtsyncenabled_);
    std::swap(featuremystorageserverenabled_, other->featuremystorageserverenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStorage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStorage_descriptor_;
  metadata.reflection = UserStorage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatedDataset::kDatasetIdFieldNumber;
const int UpdatedDataset::kClusterIdFieldNumber;
const int UpdatedDataset::kUserIdFieldNumber;
const int UpdatedDataset::kDatasetTypeFieldNumber;
const int UpdatedDataset::kDatasetNameFieldNumber;
const int UpdatedDataset::kLastUpdatedFieldNumber;
const int UpdatedDataset::kDestDatasetIdFieldNumber;
const int UpdatedDataset::kPrimaryVersionFieldNumber;
#endif  // !_MSC_VER

UpdatedDataset::UpdatedDataset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatedDataset::InitAsDefaultInstance() {
}

UpdatedDataset::UpdatedDataset(const UpdatedDataset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatedDataset::SharedCtor() {
  _cached_size_ = 0;
  datasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  datasettype_ = 1;
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastupdated_ = GOOGLE_ULONGLONG(0);
  destdatasetid_ = GOOGLE_ULONGLONG(0);
  primaryversion_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatedDataset::~UpdatedDataset() {
  SharedDtor();
}

void UpdatedDataset::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (this != default_instance_) {
  }
}

void UpdatedDataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatedDataset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatedDataset_descriptor_;
}

const UpdatedDataset& UpdatedDataset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdatedDataset* UpdatedDataset::default_instance_ = NULL;

UpdatedDataset* UpdatedDataset::New() const {
  return new UpdatedDataset;
}

void UpdatedDataset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    datasettype_ = 1;
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    lastupdated_ = GOOGLE_ULONGLONG(0);
    destdatasetid_ = GOOGLE_ULONGLONG(0);
    primaryversion_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatedDataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 datasetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_datasetType;
        break;
      }
      
      // required .vplex.vsDirectory.DatasetType datasetType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettype(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_datasetName;
        break;
      }
      
      // required string datasetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lastUpdated;
        break;
      }
      
      // required fixed64 lastUpdated = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastUpdated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastupdated_)));
          set_has_lastupdated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_destDatasetId;
        break;
      }
      
      // optional fixed64 destDatasetId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_destDatasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &destdatasetid_)));
          set_has_destdatasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_primaryVersion;
        break;
      }
      
      // optional fixed64 primaryVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primaryversion_)));
          set_has_primaryversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatedDataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->datasetid(), output);
  }
  
  // required fixed64 clusterId = 2;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->clusterid(), output);
  }
  
  // required fixed64 userId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->userid(), output);
  }
  
  // required .vplex.vsDirectory.DatasetType datasetType = 4;
  if (has_datasettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datasettype(), output);
  }
  
  // required string datasetName = 5;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->datasetname(), output);
  }
  
  // required fixed64 lastUpdated = 6;
  if (has_lastupdated()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->lastupdated(), output);
  }
  
  // optional fixed64 destDatasetId = 7;
  if (has_destdatasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->destdatasetid(), output);
  }
  
  // optional fixed64 primaryVersion = 8;
  if (has_primaryversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->primaryversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatedDataset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->datasetid(), target);
  }
  
  // required fixed64 clusterId = 2;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->clusterid(), target);
  }
  
  // required fixed64 userId = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->userid(), target);
  }
  
  // required .vplex.vsDirectory.DatasetType datasetType = 4;
  if (has_datasettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datasettype(), target);
  }
  
  // required string datasetName = 5;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->datasetname(), target);
  }
  
  // required fixed64 lastUpdated = 6;
  if (has_lastupdated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->lastupdated(), target);
  }
  
  // optional fixed64 destDatasetId = 7;
  if (has_destdatasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->destdatasetid(), target);
  }
  
  // optional fixed64 primaryVersion = 8;
  if (has_primaryversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->primaryversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatedDataset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 datasetId = 1;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 2;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 userId = 3;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required .vplex.vsDirectory.DatasetType datasetType = 4;
    if (has_datasettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettype());
    }
    
    // required string datasetName = 5;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // required fixed64 lastUpdated = 6;
    if (has_lastupdated()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 destDatasetId = 7;
    if (has_destdatasetid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryVersion = 8;
    if (has_primaryversion()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatedDataset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatedDataset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatedDataset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatedDataset::MergeFrom(const UpdatedDataset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasettype()) {
      set_datasettype(from.datasettype());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_lastupdated()) {
      set_lastupdated(from.lastupdated());
    }
    if (from.has_destdatasetid()) {
      set_destdatasetid(from.destdatasetid());
    }
    if (from.has_primaryversion()) {
      set_primaryversion(from.primaryversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatedDataset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatedDataset::CopyFrom(const UpdatedDataset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatedDataset::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void UpdatedDataset::Swap(UpdatedDataset* other) {
  if (other != this) {
    std::swap(datasetid_, other->datasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(userid_, other->userid_);
    std::swap(datasettype_, other->datasettype_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(lastupdated_, other->lastupdated_);
    std::swap(destdatasetid_, other->destdatasetid_);
    std::swap(primaryversion_, other->primaryversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatedDataset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatedDataset_descriptor_;
  metadata.reflection = UpdatedDataset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetFilter::kNameFieldNumber;
const int DatasetFilter::kValueFieldNumber;
#endif  // !_MSC_VER

DatasetFilter::DatasetFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetFilter::InitAsDefaultInstance() {
}

DatasetFilter::DatasetFilter(const DatasetFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetFilter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetFilter::~DatasetFilter() {
  SharedDtor();
}

void DatasetFilter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DatasetFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetFilter_descriptor_;
}

const DatasetFilter& DatasetFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DatasetFilter* DatasetFilter::default_instance_ = NULL;

DatasetFilter* DatasetFilter::New() const {
  return new DatasetFilter;
}

void DatasetFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetFilter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetFilter::MergeFrom(const DatasetFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetFilter::CopyFrom(const DatasetFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetFilter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DatasetFilter::Swap(DatasetFilter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetFilter_descriptor_;
  metadata.reflection = DatasetFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MssDetail::kMssIdFieldNumber;
const int MssDetail::kMssNameFieldNumber;
const int MssDetail::kInactiveFlagFieldNumber;
#endif  // !_MSC_VER

MssDetail::MssDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MssDetail::InitAsDefaultInstance() {
}

MssDetail::MssDetail(const MssDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MssDetail::SharedCtor() {
  _cached_size_ = 0;
  mssid_ = GOOGLE_ULONGLONG(0);
  mssname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inactiveflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MssDetail::~MssDetail() {
  SharedDtor();
}

void MssDetail::SharedDtor() {
  if (mssname_ != &::google::protobuf::internal::kEmptyString) {
    delete mssname_;
  }
  if (this != default_instance_) {
  }
}

void MssDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MssDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MssDetail_descriptor_;
}

const MssDetail& MssDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

MssDetail* MssDetail::default_instance_ = NULL;

MssDetail* MssDetail::New() const {
  return new MssDetail;
}

void MssDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mssid_ = GOOGLE_ULONGLONG(0);
    if (has_mssname()) {
      if (mssname_ != &::google::protobuf::internal::kEmptyString) {
        mssname_->clear();
      }
    }
    inactiveflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MssDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 mssId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mssid_)));
          set_has_mssid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mssName;
        break;
      }
      
      // required string mssName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mssName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mssname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mssname().data(), this->mssname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inactiveFlag;
        break;
      }
      
      // optional bool inactiveFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactiveFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inactiveflag_)));
          set_has_inactiveflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MssDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 mssId = 1;
  if (has_mssid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->mssid(), output);
  }
  
  // required string mssName = 2;
  if (has_mssname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mssname().data(), this->mssname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mssname(), output);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inactiveflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MssDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 mssId = 1;
  if (has_mssid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->mssid(), target);
  }
  
  // required string mssName = 2;
  if (has_mssname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mssname().data(), this->mssname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mssname(), target);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inactiveflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MssDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 mssId = 1;
    if (has_mssid()) {
      total_size += 1 + 8;
    }
    
    // required string mssName = 2;
    if (has_mssname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mssname());
    }
    
    // optional bool inactiveFlag = 3;
    if (has_inactiveflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MssDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MssDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MssDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MssDetail::MergeFrom(const MssDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mssid()) {
      set_mssid(from.mssid());
    }
    if (from.has_mssname()) {
      set_mssname(from.mssname());
    }
    if (from.has_inactiveflag()) {
      set_inactiveflag(from.inactiveflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MssDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MssDetail::CopyFrom(const MssDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MssDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MssDetail::Swap(MssDetail* other) {
  if (other != this) {
    std::swap(mssid_, other->mssid_);
    std::swap(mssname_, other->mssname_);
    std::swap(inactiveflag_, other->inactiveflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MssDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MssDetail_descriptor_;
  metadata.reflection = MssDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageUnitDetail::kStorageIdFieldNumber;
const int StorageUnitDetail::kMssIdsFieldNumber;
const int StorageUnitDetail::kInactiveFlagFieldNumber;
#endif  // !_MSC_VER

StorageUnitDetail::StorageUnitDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageUnitDetail::InitAsDefaultInstance() {
}

StorageUnitDetail::StorageUnitDetail(const StorageUnitDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageUnitDetail::SharedCtor() {
  _cached_size_ = 0;
  storageid_ = GOOGLE_ULONGLONG(0);
  inactiveflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageUnitDetail::~StorageUnitDetail() {
  SharedDtor();
}

void StorageUnitDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StorageUnitDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageUnitDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageUnitDetail_descriptor_;
}

const StorageUnitDetail& StorageUnitDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StorageUnitDetail* StorageUnitDetail::default_instance_ = NULL;

StorageUnitDetail* StorageUnitDetail::New() const {
  return new StorageUnitDetail;
}

void StorageUnitDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storageid_ = GOOGLE_ULONGLONG(0);
    inactiveflag_ = false;
  }
  mssids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageUnitDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 storageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageid_)));
          set_has_storageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mssIds;
        break;
      }
      
      // repeated fixed64 mssIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mssIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_mssids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_mssids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mssIds;
        if (input->ExpectTag(24)) goto parse_inactiveFlag;
        break;
      }
      
      // optional bool inactiveFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactiveFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inactiveflag_)));
          set_has_inactiveflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageUnitDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 storageId = 1;
  if (has_storageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->storageid(), output);
  }
  
  // repeated fixed64 mssIds = 2;
  for (int i = 0; i < this->mssids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->mssids(i), output);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inactiveflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageUnitDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 storageId = 1;
  if (has_storageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->storageid(), target);
  }
  
  // repeated fixed64 mssIds = 2;
  for (int i = 0; i < this->mssids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->mssids(i), target);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inactiveflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageUnitDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 storageId = 1;
    if (has_storageid()) {
      total_size += 1 + 8;
    }
    
    // optional bool inactiveFlag = 3;
    if (has_inactiveflag()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated fixed64 mssIds = 2;
  {
    int data_size = 0;
    data_size = 8 * this->mssids_size();
    total_size += 1 * this->mssids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageUnitDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageUnitDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageUnitDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageUnitDetail::MergeFrom(const StorageUnitDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mssids_.MergeFrom(from.mssids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storageid()) {
      set_storageid(from.storageid());
    }
    if (from.has_inactiveflag()) {
      set_inactiveflag(from.inactiveflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageUnitDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageUnitDetail::CopyFrom(const StorageUnitDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageUnitDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StorageUnitDetail::Swap(StorageUnitDetail* other) {
  if (other != this) {
    std::swap(storageid_, other->storageid_);
    mssids_.Swap(&other->mssids_);
    std::swap(inactiveflag_, other->inactiveflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageUnitDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageUnitDetail_descriptor_;
  metadata.reflection = StorageUnitDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrsDetail::kBrsIdFieldNumber;
const int BrsDetail::kBrsNameFieldNumber;
const int BrsDetail::kInactiveFlagFieldNumber;
#endif  // !_MSC_VER

BrsDetail::BrsDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrsDetail::InitAsDefaultInstance() {
}

BrsDetail::BrsDetail(const BrsDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrsDetail::SharedCtor() {
  _cached_size_ = 0;
  brsid_ = GOOGLE_ULONGLONG(0);
  brsname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inactiveflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrsDetail::~BrsDetail() {
  SharedDtor();
}

void BrsDetail::SharedDtor() {
  if (brsname_ != &::google::protobuf::internal::kEmptyString) {
    delete brsname_;
  }
  if (this != default_instance_) {
  }
}

void BrsDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrsDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrsDetail_descriptor_;
}

const BrsDetail& BrsDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

BrsDetail* BrsDetail::default_instance_ = NULL;

BrsDetail* BrsDetail::New() const {
  return new BrsDetail;
}

void BrsDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    brsid_ = GOOGLE_ULONGLONG(0);
    if (has_brsname()) {
      if (brsname_ != &::google::protobuf::internal::kEmptyString) {
        brsname_->clear();
      }
    }
    inactiveflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrsDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 brsId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &brsid_)));
          set_has_brsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brsName;
        break;
      }
      
      // required string brsName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brsName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brsname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brsname().data(), this->brsname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inactiveFlag;
        break;
      }
      
      // optional bool inactiveFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactiveFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inactiveflag_)));
          set_has_inactiveflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrsDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 brsId = 1;
  if (has_brsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->brsid(), output);
  }
  
  // required string brsName = 2;
  if (has_brsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brsname().data(), this->brsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brsname(), output);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inactiveflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrsDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 brsId = 1;
  if (has_brsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->brsid(), target);
  }
  
  // required string brsName = 2;
  if (has_brsname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brsname().data(), this->brsname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brsname(), target);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inactiveflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrsDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 brsId = 1;
    if (has_brsid()) {
      total_size += 1 + 8;
    }
    
    // required string brsName = 2;
    if (has_brsname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brsname());
    }
    
    // optional bool inactiveFlag = 3;
    if (has_inactiveflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrsDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrsDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrsDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrsDetail::MergeFrom(const BrsDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brsid()) {
      set_brsid(from.brsid());
    }
    if (from.has_brsname()) {
      set_brsname(from.brsname());
    }
    if (from.has_inactiveflag()) {
      set_inactiveflag(from.inactiveflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrsDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrsDetail::CopyFrom(const BrsDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrsDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BrsDetail::Swap(BrsDetail* other) {
  if (other != this) {
    std::swap(brsid_, other->brsid_);
    std::swap(brsname_, other->brsname_);
    std::swap(inactiveflag_, other->inactiveflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrsDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrsDetail_descriptor_;
  metadata.reflection = BrsDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BrsStorageUnitDetail::kBrsStorageIdFieldNumber;
const int BrsStorageUnitDetail::kBrsIdFieldNumber;
const int BrsStorageUnitDetail::kInactiveFlagFieldNumber;
#endif  // !_MSC_VER

BrsStorageUnitDetail::BrsStorageUnitDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BrsStorageUnitDetail::InitAsDefaultInstance() {
}

BrsStorageUnitDetail::BrsStorageUnitDetail(const BrsStorageUnitDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BrsStorageUnitDetail::SharedCtor() {
  _cached_size_ = 0;
  brsstorageid_ = GOOGLE_ULONGLONG(0);
  brsid_ = GOOGLE_ULONGLONG(0);
  inactiveflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BrsStorageUnitDetail::~BrsStorageUnitDetail() {
  SharedDtor();
}

void BrsStorageUnitDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BrsStorageUnitDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BrsStorageUnitDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BrsStorageUnitDetail_descriptor_;
}

const BrsStorageUnitDetail& BrsStorageUnitDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

BrsStorageUnitDetail* BrsStorageUnitDetail::default_instance_ = NULL;

BrsStorageUnitDetail* BrsStorageUnitDetail::New() const {
  return new BrsStorageUnitDetail;
}

void BrsStorageUnitDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    brsstorageid_ = GOOGLE_ULONGLONG(0);
    brsid_ = GOOGLE_ULONGLONG(0);
    inactiveflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BrsStorageUnitDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 brsStorageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &brsstorageid_)));
          set_has_brsstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_brsId;
        break;
      }
      
      // required fixed64 brsId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_brsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &brsid_)));
          set_has_brsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inactiveFlag;
        break;
      }
      
      // optional bool inactiveFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inactiveFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inactiveflag_)));
          set_has_inactiveflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BrsStorageUnitDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 brsStorageId = 1;
  if (has_brsstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->brsstorageid(), output);
  }
  
  // required fixed64 brsId = 2;
  if (has_brsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->brsid(), output);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inactiveflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BrsStorageUnitDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 brsStorageId = 1;
  if (has_brsstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->brsstorageid(), target);
  }
  
  // required fixed64 brsId = 2;
  if (has_brsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->brsid(), target);
  }
  
  // optional bool inactiveFlag = 3;
  if (has_inactiveflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inactiveflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BrsStorageUnitDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 brsStorageId = 1;
    if (has_brsstorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 brsId = 2;
    if (has_brsid()) {
      total_size += 1 + 8;
    }
    
    // optional bool inactiveFlag = 3;
    if (has_inactiveflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrsStorageUnitDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BrsStorageUnitDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BrsStorageUnitDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BrsStorageUnitDetail::MergeFrom(const BrsStorageUnitDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brsstorageid()) {
      set_brsstorageid(from.brsstorageid());
    }
    if (from.has_brsid()) {
      set_brsid(from.brsid());
    }
    if (from.has_inactiveflag()) {
      set_inactiveflag(from.inactiveflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BrsStorageUnitDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrsStorageUnitDetail::CopyFrom(const BrsStorageUnitDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrsStorageUnitDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BrsStorageUnitDetail::Swap(BrsStorageUnitDetail* other) {
  if (other != this) {
    std::swap(brsstorageid_, other->brsstorageid_);
    std::swap(brsid_, other->brsid_);
    std::swap(inactiveflag_, other->inactiveflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BrsStorageUnitDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BrsStorageUnitDetail_descriptor_;
  metadata.reflection = BrsStorageUnitDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackupStatus::kUserIdFieldNumber;
const int BackupStatus::kDatasetIdFieldNumber;
const int BackupStatus::kLastBackupTimeFieldNumber;
const int BackupStatus::kLastBackupVersionFieldNumber;
const int BackupStatus::kLastArchiveTimeFieldNumber;
const int BackupStatus::kLastArchiveVersionFieldNumber;
#endif  // !_MSC_VER

BackupStatus::BackupStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BackupStatus::InitAsDefaultInstance() {
}

BackupStatus::BackupStatus(const BackupStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BackupStatus::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  lastbackuptime_ = GOOGLE_ULONGLONG(0);
  lastbackupversion_ = GOOGLE_ULONGLONG(0);
  lastarchivetime_ = GOOGLE_ULONGLONG(0);
  lastarchiveversion_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackupStatus::~BackupStatus() {
  SharedDtor();
}

void BackupStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackupStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackupStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackupStatus_descriptor_;
}

const BackupStatus& BackupStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

BackupStatus* BackupStatus::default_instance_ = NULL;

BackupStatus* BackupStatus::New() const {
  return new BackupStatus;
}

void BackupStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    lastbackuptime_ = GOOGLE_ULONGLONG(0);
    lastbackupversion_ = GOOGLE_ULONGLONG(0);
    lastarchivetime_ = GOOGLE_ULONGLONG(0);
    lastarchiveversion_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackupStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lastBackupTime;
        break;
      }
      
      // required fixed64 lastBackupTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastBackupTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastbackuptime_)));
          set_has_lastbackuptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_lastBackupVersion;
        break;
      }
      
      // required fixed64 lastBackupVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastBackupVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastbackupversion_)));
          set_has_lastbackupversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_lastArchiveTime;
        break;
      }
      
      // optional fixed64 lastArchiveTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastArchiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastarchivetime_)));
          set_has_lastarchivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_lastArchiveVersion;
        break;
      }
      
      // optional fixed64 lastArchiveVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastArchiveVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lastarchiveversion_)));
          set_has_lastarchiveversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BackupStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required fixed64 lastBackupTime = 3;
  if (has_lastbackuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->lastbackuptime(), output);
  }
  
  // required fixed64 lastBackupVersion = 4;
  if (has_lastbackupversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->lastbackupversion(), output);
  }
  
  // optional fixed64 lastArchiveTime = 5;
  if (has_lastarchivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->lastarchivetime(), output);
  }
  
  // optional fixed64 lastArchiveVersion = 6;
  if (has_lastarchiveversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->lastarchiveversion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BackupStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required fixed64 lastBackupTime = 3;
  if (has_lastbackuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->lastbackuptime(), target);
  }
  
  // required fixed64 lastBackupVersion = 4;
  if (has_lastbackupversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->lastbackupversion(), target);
  }
  
  // optional fixed64 lastArchiveTime = 5;
  if (has_lastarchivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->lastarchivetime(), target);
  }
  
  // optional fixed64 lastArchiveVersion = 6;
  if (has_lastarchiveversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->lastarchiveversion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BackupStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 lastBackupTime = 3;
    if (has_lastbackuptime()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 lastBackupVersion = 4;
    if (has_lastbackupversion()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 lastArchiveTime = 5;
    if (has_lastarchivetime()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 lastArchiveVersion = 6;
    if (has_lastarchiveversion()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackupStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackupStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackupStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackupStatus::MergeFrom(const BackupStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_lastbackuptime()) {
      set_lastbackuptime(from.lastbackuptime());
    }
    if (from.has_lastbackupversion()) {
      set_lastbackupversion(from.lastbackupversion());
    }
    if (from.has_lastarchivetime()) {
      set_lastarchivetime(from.lastarchivetime());
    }
    if (from.has_lastarchiveversion()) {
      set_lastarchiveversion(from.lastarchiveversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackupStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackupStatus::CopyFrom(const BackupStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void BackupStatus::Swap(BackupStatus* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(lastbackuptime_, other->lastbackuptime_);
    std::swap(lastbackupversion_, other->lastbackupversion_);
    std::swap(lastarchivetime_, other->lastarchivetime_);
    std::swap(lastarchiveversion_, other->lastarchiveversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackupStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackupStatus_descriptor_;
  metadata.reflection = BackupStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSaveTicketsInput::kSessionFieldNumber;
const int GetSaveTicketsInput::kDeviceIdFieldNumber;
const int GetSaveTicketsInput::kCertificateFieldNumber;
#endif  // !_MSC_VER

GetSaveTicketsInput::GetSaveTicketsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSaveTicketsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetSaveTicketsInput::GetSaveTicketsInput(const GetSaveTicketsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSaveTicketsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  deviceid_ = GOOGLE_ULONGLONG(0);
  certificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSaveTicketsInput::~GetSaveTicketsInput() {
  SharedDtor();
}

void GetSaveTicketsInput::SharedDtor() {
  if (certificate_ != &::google::protobuf::internal::kEmptyString) {
    delete certificate_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetSaveTicketsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSaveTicketsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSaveTicketsInput_descriptor_;
}

const GetSaveTicketsInput& GetSaveTicketsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSaveTicketsInput* GetSaveTicketsInput::default_instance_ = NULL;

GetSaveTicketsInput* GetSaveTicketsInput::New() const {
  return new GetSaveTicketsInput;
}

void GetSaveTicketsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_certificate()) {
      if (certificate_ != &::google::protobuf::internal::kEmptyString) {
        certificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSaveTicketsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_certificate;
        break;
      }
      
      // required bytes certificate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_certificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certificate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSaveTicketsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  // required bytes certificate = 3;
  if (has_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->certificate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSaveTicketsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  // required bytes certificate = 3;
  if (has_certificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->certificate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSaveTicketsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required bytes certificate = 3;
    if (has_certificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->certificate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSaveTicketsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSaveTicketsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSaveTicketsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSaveTicketsInput::MergeFrom(const GetSaveTicketsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_certificate()) {
      set_certificate(from.certificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSaveTicketsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSaveTicketsInput::CopyFrom(const GetSaveTicketsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSaveTicketsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetSaveTicketsInput::Swap(GetSaveTicketsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(certificate_, other->certificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSaveTicketsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSaveTicketsInput_descriptor_;
  metadata.reflection = GetSaveTicketsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSaveTicketsOutput::kErrorFieldNumber;
const int GetSaveTicketsOutput::kEncryptionTicketFieldNumber;
const int GetSaveTicketsOutput::kSigningTicketFieldNumber;
#endif  // !_MSC_VER

GetSaveTicketsOutput::GetSaveTicketsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSaveTicketsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
  encryptionticket_ = const_cast< ::vplex::vsDirectory::ETicketData*>(&::vplex::vsDirectory::ETicketData::default_instance());
  signingticket_ = const_cast< ::vplex::vsDirectory::ETicketData*>(&::vplex::vsDirectory::ETicketData::default_instance());
}

GetSaveTicketsOutput::GetSaveTicketsOutput(const GetSaveTicketsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSaveTicketsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  encryptionticket_ = NULL;
  signingticket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSaveTicketsOutput::~GetSaveTicketsOutput() {
  SharedDtor();
}

void GetSaveTicketsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
    delete encryptionticket_;
    delete signingticket_;
  }
}

void GetSaveTicketsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSaveTicketsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSaveTicketsOutput_descriptor_;
}

const GetSaveTicketsOutput& GetSaveTicketsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSaveTicketsOutput* GetSaveTicketsOutput::default_instance_ = NULL;

GetSaveTicketsOutput* GetSaveTicketsOutput::New() const {
  return new GetSaveTicketsOutput;
}

void GetSaveTicketsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_encryptionticket()) {
      if (encryptionticket_ != NULL) encryptionticket_->::vplex::vsDirectory::ETicketData::Clear();
    }
    if (has_signingticket()) {
      if (signingticket_ != NULL) signingticket_->::vplex::vsDirectory::ETicketData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSaveTicketsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encryptionTicket;
        break;
      }
      
      // optional .vplex.vsDirectory.ETicketData encryptionTicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encryptionTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encryptionticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signingTicket;
        break;
      }
      
      // optional .vplex.vsDirectory.ETicketData signingTicket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signingTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signingticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSaveTicketsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional .vplex.vsDirectory.ETicketData encryptionTicket = 2;
  if (has_encryptionticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->encryptionticket(), output);
  }
  
  // optional .vplex.vsDirectory.ETicketData signingTicket = 3;
  if (has_signingticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signingticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSaveTicketsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional .vplex.vsDirectory.ETicketData encryptionTicket = 2;
  if (has_encryptionticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->encryptionticket(), target);
  }
  
  // optional .vplex.vsDirectory.ETicketData signingTicket = 3;
  if (has_signingticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signingticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSaveTicketsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional .vplex.vsDirectory.ETicketData encryptionTicket = 2;
    if (has_encryptionticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encryptionticket());
    }
    
    // optional .vplex.vsDirectory.ETicketData signingTicket = 3;
    if (has_signingticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signingticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSaveTicketsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSaveTicketsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSaveTicketsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSaveTicketsOutput::MergeFrom(const GetSaveTicketsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_encryptionticket()) {
      mutable_encryptionticket()->::vplex::vsDirectory::ETicketData::MergeFrom(from.encryptionticket());
    }
    if (from.has_signingticket()) {
      mutable_signingticket()->::vplex::vsDirectory::ETicketData::MergeFrom(from.signingticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSaveTicketsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSaveTicketsOutput::CopyFrom(const GetSaveTicketsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSaveTicketsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_encryptionticket()) {
    if (!this->encryptionticket().IsInitialized()) return false;
  }
  if (has_signingticket()) {
    if (!this->signingticket().IsInitialized()) return false;
  }
  return true;
}

void GetSaveTicketsOutput::Swap(GetSaveTicketsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(encryptionticket_, other->encryptionticket_);
    std::swap(signingticket_, other->signingticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSaveTicketsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSaveTicketsOutput_descriptor_;
  metadata.reflection = GetSaveTicketsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSaveDataInput::kSessionFieldNumber;
const int GetSaveDataInput::kTitleIdsFieldNumber;
#endif  // !_MSC_VER

GetSaveDataInput::GetSaveDataInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSaveDataInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetSaveDataInput::GetSaveDataInput(const GetSaveDataInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSaveDataInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSaveDataInput::~GetSaveDataInput() {
  SharedDtor();
}

void GetSaveDataInput::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
  }
}

void GetSaveDataInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSaveDataInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSaveDataInput_descriptor_;
}

const GetSaveDataInput& GetSaveDataInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSaveDataInput* GetSaveDataInput::default_instance_ = NULL;

GetSaveDataInput* GetSaveDataInput::New() const {
  return new GetSaveDataInput;
}

void GetSaveDataInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
  }
  titleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSaveDataInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleIds;
        break;
      }
      
      // repeated string titleIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_titleids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleids(0).data(), this->titleids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSaveDataInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // repeated string titleIds = 2;
  for (int i = 0; i < this->titleids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->titleids(i).data(), this->titleids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->titleids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSaveDataInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // repeated string titleIds = 2;
  for (int i = 0; i < this->titleids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleids(i).data(), this->titleids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->titleids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSaveDataInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
  }
  // repeated string titleIds = 2;
  total_size += 1 * this->titleids_size();
  for (int i = 0; i < this->titleids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->titleids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSaveDataInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSaveDataInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSaveDataInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSaveDataInput::MergeFrom(const GetSaveDataInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleids_.MergeFrom(from.titleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSaveDataInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSaveDataInput::CopyFrom(const GetSaveDataInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSaveDataInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetSaveDataInput::Swap(GetSaveDataInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    titleids_.Swap(&other->titleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSaveDataInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSaveDataInput_descriptor_;
  metadata.reflection = GetSaveDataInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSaveDataOutput::kErrorFieldNumber;
const int GetSaveDataOutput::kDataFieldNumber;
#endif  // !_MSC_VER

GetSaveDataOutput::GetSaveDataOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSaveDataOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetSaveDataOutput::GetSaveDataOutput(const GetSaveDataOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSaveDataOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSaveDataOutput::~GetSaveDataOutput() {
  SharedDtor();
}

void GetSaveDataOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetSaveDataOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSaveDataOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSaveDataOutput_descriptor_;
}

const GetSaveDataOutput& GetSaveDataOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSaveDataOutput* GetSaveDataOutput::default_instance_ = NULL;

GetSaveDataOutput* GetSaveDataOutput::New() const {
  return new GetSaveDataOutput;
}

void GetSaveDataOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSaveDataOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // repeated .vplex.vsDirectory.SaveData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSaveDataOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.SaveData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSaveDataOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.SaveData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSaveDataOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.SaveData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSaveDataOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSaveDataOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSaveDataOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSaveDataOutput::MergeFrom(const GetSaveDataOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSaveDataOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSaveDataOutput::CopyFrom(const GetSaveDataOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSaveDataOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void GetSaveDataOutput::Swap(GetSaveDataOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSaveDataOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSaveDataOutput_descriptor_;
  metadata.reflection = GetSaveDataOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOwnedTitlesInput::kSessionFieldNumber;
const int GetOwnedTitlesInput::kL10NFieldNumber;
#endif  // !_MSC_VER

GetOwnedTitlesInput::GetOwnedTitlesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOwnedTitlesInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
  l10n_ = const_cast< ::vplex::vsDirectory::Localization*>(&::vplex::vsDirectory::Localization::default_instance());
}

GetOwnedTitlesInput::GetOwnedTitlesInput(const GetOwnedTitlesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOwnedTitlesInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  l10n_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOwnedTitlesInput::~GetOwnedTitlesInput() {
  SharedDtor();
}

void GetOwnedTitlesInput::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
    delete l10n_;
  }
}

void GetOwnedTitlesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOwnedTitlesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOwnedTitlesInput_descriptor_;
}

const GetOwnedTitlesInput& GetOwnedTitlesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetOwnedTitlesInput* GetOwnedTitlesInput::default_instance_ = NULL;

GetOwnedTitlesInput* GetOwnedTitlesInput::New() const {
  return new GetOwnedTitlesInput;
}

void GetOwnedTitlesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    if (has_l10n()) {
      if (l10n_ != NULL) l10n_->::vplex::vsDirectory::Localization::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOwnedTitlesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_l10n;
        break;
      }
      
      // required .vplex.vsDirectory.Localization l10n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_l10n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_l10n()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOwnedTitlesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 2;
  if (has_l10n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->l10n(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOwnedTitlesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 2;
  if (has_l10n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->l10n(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOwnedTitlesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required .vplex.vsDirectory.Localization l10n = 2;
    if (has_l10n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->l10n());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOwnedTitlesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOwnedTitlesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOwnedTitlesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOwnedTitlesInput::MergeFrom(const GetOwnedTitlesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_l10n()) {
      mutable_l10n()->::vplex::vsDirectory::Localization::MergeFrom(from.l10n());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOwnedTitlesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOwnedTitlesInput::CopyFrom(const GetOwnedTitlesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOwnedTitlesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_l10n()) {
    if (!this->l10n().IsInitialized()) return false;
  }
  return true;
}

void GetOwnedTitlesInput::Swap(GetOwnedTitlesInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(l10n_, other->l10n_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOwnedTitlesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOwnedTitlesInput_descriptor_;
  metadata.reflection = GetOwnedTitlesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOwnedTitlesOutput::kErrorFieldNumber;
const int GetOwnedTitlesOutput::kTitleDataFieldNumber;
#endif  // !_MSC_VER

GetOwnedTitlesOutput::GetOwnedTitlesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOwnedTitlesOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetOwnedTitlesOutput::GetOwnedTitlesOutput(const GetOwnedTitlesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOwnedTitlesOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOwnedTitlesOutput::~GetOwnedTitlesOutput() {
  SharedDtor();
}

void GetOwnedTitlesOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetOwnedTitlesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOwnedTitlesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOwnedTitlesOutput_descriptor_;
}

const GetOwnedTitlesOutput& GetOwnedTitlesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetOwnedTitlesOutput* GetOwnedTitlesOutput::default_instance_ = NULL;

GetOwnedTitlesOutput* GetOwnedTitlesOutput::New() const {
  return new GetOwnedTitlesOutput;
}

void GetOwnedTitlesOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  titledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOwnedTitlesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleData;
        break;
      }
      
      // repeated .vplex.vsDirectory.TitleData titleData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOwnedTitlesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  for (int i = 0; i < this->titledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titledata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOwnedTitlesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  for (int i = 0; i < this->titledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titledata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOwnedTitlesOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  total_size += 1 * this->titledata_size();
  for (int i = 0; i < this->titledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titledata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOwnedTitlesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOwnedTitlesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOwnedTitlesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOwnedTitlesOutput::MergeFrom(const GetOwnedTitlesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titledata_.MergeFrom(from.titledata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOwnedTitlesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOwnedTitlesOutput::CopyFrom(const GetOwnedTitlesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOwnedTitlesOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < titledata_size(); i++) {
    if (!this->titledata(i).IsInitialized()) return false;
  }
  return true;
}

void GetOwnedTitlesOutput::Swap(GetOwnedTitlesOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    titledata_.Swap(&other->titledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOwnedTitlesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOwnedTitlesOutput_descriptor_;
  metadata.reflection = GetOwnedTitlesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTitlesInput::kSessionFieldNumber;
const int GetTitlesInput::kL10NFieldNumber;
const int GetTitlesInput::kTitleIdsFieldNumber;
#endif  // !_MSC_VER

GetTitlesInput::GetTitlesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTitlesInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
  l10n_ = const_cast< ::vplex::vsDirectory::Localization*>(&::vplex::vsDirectory::Localization::default_instance());
}

GetTitlesInput::GetTitlesInput(const GetTitlesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTitlesInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  l10n_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitlesInput::~GetTitlesInput() {
  SharedDtor();
}

void GetTitlesInput::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
    delete l10n_;
  }
}

void GetTitlesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitlesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitlesInput_descriptor_;
}

const GetTitlesInput& GetTitlesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetTitlesInput* GetTitlesInput::default_instance_ = NULL;

GetTitlesInput* GetTitlesInput::New() const {
  return new GetTitlesInput;
}

void GetTitlesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    if (has_l10n()) {
      if (l10n_ != NULL) l10n_->::vplex::vsDirectory::Localization::Clear();
    }
  }
  titleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTitlesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_l10n;
        break;
      }
      
      // required .vplex.vsDirectory.Localization l10n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_l10n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_l10n()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titleIds;
        break;
      }
      
      // repeated string titleIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_titleids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleids(0).data(), this->titleids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTitlesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 2;
  if (has_l10n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->l10n(), output);
  }
  
  // repeated string titleIds = 3;
  for (int i = 0; i < this->titleids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->titleids(i).data(), this->titleids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titleids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTitlesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 2;
  if (has_l10n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->l10n(), target);
  }
  
  // repeated string titleIds = 3;
  for (int i = 0; i < this->titleids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleids(i).data(), this->titleids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->titleids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTitlesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required .vplex.vsDirectory.Localization l10n = 2;
    if (has_l10n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->l10n());
    }
    
  }
  // repeated string titleIds = 3;
  total_size += 1 * this->titleids_size();
  for (int i = 0; i < this->titleids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->titleids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitlesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTitlesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTitlesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTitlesInput::MergeFrom(const GetTitlesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleids_.MergeFrom(from.titleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_l10n()) {
      mutable_l10n()->::vplex::vsDirectory::Localization::MergeFrom(from.l10n());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTitlesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitlesInput::CopyFrom(const GetTitlesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitlesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_l10n()) {
    if (!this->l10n().IsInitialized()) return false;
  }
  return true;
}

void GetTitlesInput::Swap(GetTitlesInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(l10n_, other->l10n_);
    titleids_.Swap(&other->titleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTitlesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitlesInput_descriptor_;
  metadata.reflection = GetTitlesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTitlesOutput::kErrorFieldNumber;
const int GetTitlesOutput::kTitleDataFieldNumber;
#endif  // !_MSC_VER

GetTitlesOutput::GetTitlesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTitlesOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetTitlesOutput::GetTitlesOutput(const GetTitlesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTitlesOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitlesOutput::~GetTitlesOutput() {
  SharedDtor();
}

void GetTitlesOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetTitlesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitlesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitlesOutput_descriptor_;
}

const GetTitlesOutput& GetTitlesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetTitlesOutput* GetTitlesOutput::default_instance_ = NULL;

GetTitlesOutput* GetTitlesOutput::New() const {
  return new GetTitlesOutput;
}

void GetTitlesOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  titledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTitlesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleData;
        break;
      }
      
      // repeated .vplex.vsDirectory.TitleData titleData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTitlesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  for (int i = 0; i < this->titledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titledata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTitlesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  for (int i = 0; i < this->titledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titledata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTitlesOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  total_size += 1 * this->titledata_size();
  for (int i = 0; i < this->titledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titledata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitlesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTitlesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTitlesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTitlesOutput::MergeFrom(const GetTitlesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titledata_.MergeFrom(from.titledata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTitlesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitlesOutput::CopyFrom(const GetTitlesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitlesOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < titledata_size(); i++) {
    if (!this->titledata(i).IsInitialized()) return false;
  }
  return true;
}

void GetTitlesOutput::Swap(GetTitlesOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    titledata_.Swap(&other->titledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTitlesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitlesOutput_descriptor_;
  metadata.reflection = GetTitlesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTitleDetailsInput::kSessionFieldNumber;
const int GetTitleDetailsInput::kL10NFieldNumber;
const int GetTitleDetailsInput::kTitleIdsFieldNumber;
#endif  // !_MSC_VER

GetTitleDetailsInput::GetTitleDetailsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTitleDetailsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
  l10n_ = const_cast< ::vplex::vsDirectory::Localization*>(&::vplex::vsDirectory::Localization::default_instance());
}

GetTitleDetailsInput::GetTitleDetailsInput(const GetTitleDetailsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTitleDetailsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  l10n_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitleDetailsInput::~GetTitleDetailsInput() {
  SharedDtor();
}

void GetTitleDetailsInput::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
    delete l10n_;
  }
}

void GetTitleDetailsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitleDetailsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitleDetailsInput_descriptor_;
}

const GetTitleDetailsInput& GetTitleDetailsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetTitleDetailsInput* GetTitleDetailsInput::default_instance_ = NULL;

GetTitleDetailsInput* GetTitleDetailsInput::New() const {
  return new GetTitleDetailsInput;
}

void GetTitleDetailsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    if (has_l10n()) {
      if (l10n_ != NULL) l10n_->::vplex::vsDirectory::Localization::Clear();
    }
  }
  titleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTitleDetailsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_l10n;
        break;
      }
      
      // required .vplex.vsDirectory.Localization l10n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_l10n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_l10n()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titleIds;
        break;
      }
      
      // repeated string titleIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_titleids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleids(0).data(), this->titleids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTitleDetailsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 2;
  if (has_l10n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->l10n(), output);
  }
  
  // repeated string titleIds = 3;
  for (int i = 0; i < this->titleids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->titleids(i).data(), this->titleids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titleids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTitleDetailsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 2;
  if (has_l10n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->l10n(), target);
  }
  
  // repeated string titleIds = 3;
  for (int i = 0; i < this->titleids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleids(i).data(), this->titleids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->titleids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTitleDetailsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required .vplex.vsDirectory.Localization l10n = 2;
    if (has_l10n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->l10n());
    }
    
  }
  // repeated string titleIds = 3;
  total_size += 1 * this->titleids_size();
  for (int i = 0; i < this->titleids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->titleids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitleDetailsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTitleDetailsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTitleDetailsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTitleDetailsInput::MergeFrom(const GetTitleDetailsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleids_.MergeFrom(from.titleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_l10n()) {
      mutable_l10n()->::vplex::vsDirectory::Localization::MergeFrom(from.l10n());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTitleDetailsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitleDetailsInput::CopyFrom(const GetTitleDetailsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleDetailsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_l10n()) {
    if (!this->l10n().IsInitialized()) return false;
  }
  return true;
}

void GetTitleDetailsInput::Swap(GetTitleDetailsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(l10n_, other->l10n_);
    titleids_.Swap(&other->titleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTitleDetailsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitleDetailsInput_descriptor_;
  metadata.reflection = GetTitleDetailsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTitleDetailsOutput::kErrorFieldNumber;
const int GetTitleDetailsOutput::kTitleDetailsFieldNumber;
#endif  // !_MSC_VER

GetTitleDetailsOutput::GetTitleDetailsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTitleDetailsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetTitleDetailsOutput::GetTitleDetailsOutput(const GetTitleDetailsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTitleDetailsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTitleDetailsOutput::~GetTitleDetailsOutput() {
  SharedDtor();
}

void GetTitleDetailsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetTitleDetailsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTitleDetailsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTitleDetailsOutput_descriptor_;
}

const GetTitleDetailsOutput& GetTitleDetailsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetTitleDetailsOutput* GetTitleDetailsOutput::default_instance_ = NULL;

GetTitleDetailsOutput* GetTitleDetailsOutput::New() const {
  return new GetTitleDetailsOutput;
}

void GetTitleDetailsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  titledetails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTitleDetailsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleDetails;
        break;
      }
      
      // repeated .vplex.vsDirectory.TitleDetail titleDetails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titledetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleDetails;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTitleDetailsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.TitleDetail titleDetails = 2;
  for (int i = 0; i < this->titledetails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titledetails(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTitleDetailsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.TitleDetail titleDetails = 2;
  for (int i = 0; i < this->titledetails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titledetails(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTitleDetailsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.TitleDetail titleDetails = 2;
  total_size += 1 * this->titledetails_size();
  for (int i = 0; i < this->titledetails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titledetails(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTitleDetailsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTitleDetailsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTitleDetailsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTitleDetailsOutput::MergeFrom(const GetTitleDetailsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titledetails_.MergeFrom(from.titledetails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTitleDetailsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTitleDetailsOutput::CopyFrom(const GetTitleDetailsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTitleDetailsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < titledetails_size(); i++) {
    if (!this->titledetails(i).IsInitialized()) return false;
  }
  return true;
}

void GetTitleDetailsOutput::Swap(GetTitleDetailsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    titledetails_.Swap(&other->titledetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTitleDetailsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTitleDetailsOutput_descriptor_;
  metadata.reflection = GetTitleDetailsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAttestationChallengeInput::kSessionFieldNumber;
const int GetAttestationChallengeInput::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

GetAttestationChallengeInput::GetAttestationChallengeInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttestationChallengeInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetAttestationChallengeInput::GetAttestationChallengeInput(const GetAttestationChallengeInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttestationChallengeInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  deviceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttestationChallengeInput::~GetAttestationChallengeInput() {
  SharedDtor();
}

void GetAttestationChallengeInput::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
  }
}

void GetAttestationChallengeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttestationChallengeInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttestationChallengeInput_descriptor_;
}

const GetAttestationChallengeInput& GetAttestationChallengeInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetAttestationChallengeInput* GetAttestationChallengeInput::default_instance_ = NULL;

GetAttestationChallengeInput* GetAttestationChallengeInput::New() const {
  return new GetAttestationChallengeInput;
}

void GetAttestationChallengeInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttestationChallengeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttestationChallengeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttestationChallengeInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttestationChallengeInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttestationChallengeInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttestationChallengeInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttestationChallengeInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttestationChallengeInput::MergeFrom(const GetAttestationChallengeInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttestationChallengeInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttestationChallengeInput::CopyFrom(const GetAttestationChallengeInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttestationChallengeInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetAttestationChallengeInput::Swap(GetAttestationChallengeInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttestationChallengeInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttestationChallengeInput_descriptor_;
  metadata.reflection = GetAttestationChallengeInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAttestationChallengeOutput::kErrorFieldNumber;
const int GetAttestationChallengeOutput::kChallengeFieldNumber;
const int GetAttestationChallengeOutput::kChallengeTmdFieldNumber;
#endif  // !_MSC_VER

GetAttestationChallengeOutput::GetAttestationChallengeOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttestationChallengeOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetAttestationChallengeOutput::GetAttestationChallengeOutput(const GetAttestationChallengeOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttestationChallengeOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  challenge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  challengetmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttestationChallengeOutput::~GetAttestationChallengeOutput() {
  SharedDtor();
}

void GetAttestationChallengeOutput::SharedDtor() {
  if (challenge_ != &::google::protobuf::internal::kEmptyString) {
    delete challenge_;
  }
  if (challengetmd_ != &::google::protobuf::internal::kEmptyString) {
    delete challengetmd_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetAttestationChallengeOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttestationChallengeOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttestationChallengeOutput_descriptor_;
}

const GetAttestationChallengeOutput& GetAttestationChallengeOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetAttestationChallengeOutput* GetAttestationChallengeOutput::default_instance_ = NULL;

GetAttestationChallengeOutput* GetAttestationChallengeOutput::New() const {
  return new GetAttestationChallengeOutput;
}

void GetAttestationChallengeOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_challenge()) {
      if (challenge_ != &::google::protobuf::internal::kEmptyString) {
        challenge_->clear();
      }
    }
    if (has_challengetmd()) {
      if (challengetmd_ != &::google::protobuf::internal::kEmptyString) {
        challengetmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttestationChallengeOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_challenge;
        break;
      }
      
      // optional bytes challenge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challenge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_challengeTmd;
        break;
      }
      
      // optional bytes challengeTmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengeTmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challengetmd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttestationChallengeOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional bytes challenge = 2;
  if (has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->challenge(), output);
  }
  
  // optional bytes challengeTmd = 3;
  if (has_challengetmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->challengetmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttestationChallengeOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional bytes challenge = 2;
  if (has_challenge()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->challenge(), target);
  }
  
  // optional bytes challengeTmd = 3;
  if (has_challengetmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->challengetmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttestationChallengeOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional bytes challenge = 2;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challenge());
    }
    
    // optional bytes challengeTmd = 3;
    if (has_challengetmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challengetmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttestationChallengeOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttestationChallengeOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttestationChallengeOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttestationChallengeOutput::MergeFrom(const GetAttestationChallengeOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_challenge()) {
      set_challenge(from.challenge());
    }
    if (from.has_challengetmd()) {
      set_challengetmd(from.challengetmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttestationChallengeOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttestationChallengeOutput::CopyFrom(const GetAttestationChallengeOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttestationChallengeOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetAttestationChallengeOutput::Swap(GetAttestationChallengeOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(challenge_, other->challenge_);
    std::swap(challengetmd_, other->challengetmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttestationChallengeOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttestationChallengeOutput_descriptor_;
  metadata.reflection = GetAttestationChallengeOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateDeviceInput::kSessionFieldNumber;
const int AuthenticateDeviceInput::kChallengeResponseFieldNumber;
const int AuthenticateDeviceInput::kDeviceCertificateFieldNumber;
#endif  // !_MSC_VER

AuthenticateDeviceInput::AuthenticateDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthenticateDeviceInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AuthenticateDeviceInput::AuthenticateDeviceInput(const AuthenticateDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticateDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  challengeresponse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicecertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateDeviceInput::~AuthenticateDeviceInput() {
  SharedDtor();
}

void AuthenticateDeviceInput::SharedDtor() {
  if (challengeresponse_ != &::google::protobuf::internal::kEmptyString) {
    delete challengeresponse_;
  }
  if (devicecertificate_ != &::google::protobuf::internal::kEmptyString) {
    delete devicecertificate_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AuthenticateDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateDeviceInput_descriptor_;
}

const AuthenticateDeviceInput& AuthenticateDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AuthenticateDeviceInput* AuthenticateDeviceInput::default_instance_ = NULL;

AuthenticateDeviceInput* AuthenticateDeviceInput::New() const {
  return new AuthenticateDeviceInput;
}

void AuthenticateDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    if (has_challengeresponse()) {
      if (challengeresponse_ != &::google::protobuf::internal::kEmptyString) {
        challengeresponse_->clear();
      }
    }
    if (has_devicecertificate()) {
      if (devicecertificate_ != &::google::protobuf::internal::kEmptyString) {
        devicecertificate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticateDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_challengeResponse;
        break;
      }
      
      // required bytes challengeResponse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengeResponse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challengeresponse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceCertificate;
        break;
      }
      
      // required bytes deviceCertificate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicecertificate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticateDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required bytes challengeResponse = 2;
  if (has_challengeresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->challengeresponse(), output);
  }
  
  // required bytes deviceCertificate = 3;
  if (has_devicecertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->devicecertificate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthenticateDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required bytes challengeResponse = 2;
  if (has_challengeresponse()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->challengeresponse(), target);
  }
  
  // required bytes deviceCertificate = 3;
  if (has_devicecertificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->devicecertificate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthenticateDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required bytes challengeResponse = 2;
    if (has_challengeresponse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->challengeresponse());
    }
    
    // required bytes deviceCertificate = 3;
    if (has_devicecertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicecertificate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthenticateDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthenticateDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticateDeviceInput::MergeFrom(const AuthenticateDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_challengeresponse()) {
      set_challengeresponse(from.challengeresponse());
    }
    if (from.has_devicecertificate()) {
      set_devicecertificate(from.devicecertificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticateDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateDeviceInput::CopyFrom(const AuthenticateDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AuthenticateDeviceInput::Swap(AuthenticateDeviceInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(challengeresponse_, other->challengeresponse_);
    std::swap(devicecertificate_, other->devicecertificate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthenticateDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateDeviceInput_descriptor_;
  metadata.reflection = AuthenticateDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateDeviceOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AuthenticateDeviceOutput::AuthenticateDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthenticateDeviceOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AuthenticateDeviceOutput::AuthenticateDeviceOutput(const AuthenticateDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthenticateDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateDeviceOutput::~AuthenticateDeviceOutput() {
  SharedDtor();
}

void AuthenticateDeviceOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AuthenticateDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthenticateDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticateDeviceOutput_descriptor_;
}

const AuthenticateDeviceOutput& AuthenticateDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AuthenticateDeviceOutput* AuthenticateDeviceOutput::default_instance_ = NULL;

AuthenticateDeviceOutput* AuthenticateDeviceOutput::New() const {
  return new AuthenticateDeviceOutput;
}

void AuthenticateDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthenticateDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthenticateDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthenticateDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthenticateDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthenticateDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthenticateDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthenticateDeviceOutput::MergeFrom(const AuthenticateDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthenticateDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateDeviceOutput::CopyFrom(const AuthenticateDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AuthenticateDeviceOutput::Swap(AuthenticateDeviceOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthenticateDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthenticateDeviceOutput_descriptor_;
  metadata.reflection = AuthenticateDeviceOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOnlineTitleTicketInput::kSessionFieldNumber;
const int GetOnlineTitleTicketInput::kDeviceIdFieldNumber;
const int GetOnlineTitleTicketInput::kDeviceCertificateFieldNumber;
const int GetOnlineTitleTicketInput::kTitleIdFieldNumber;
#endif  // !_MSC_VER

GetOnlineTitleTicketInput::GetOnlineTitleTicketInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOnlineTitleTicketInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetOnlineTitleTicketInput::GetOnlineTitleTicketInput(const GetOnlineTitleTicketInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOnlineTitleTicketInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  deviceid_ = GOOGLE_ULONGLONG(0);
  devicecertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOnlineTitleTicketInput::~GetOnlineTitleTicketInput() {
  SharedDtor();
}

void GetOnlineTitleTicketInput::SharedDtor() {
  if (devicecertificate_ != &::google::protobuf::internal::kEmptyString) {
    delete devicecertificate_;
  }
  if (titleid_ != &::google::protobuf::internal::kEmptyString) {
    delete titleid_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetOnlineTitleTicketInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineTitleTicketInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOnlineTitleTicketInput_descriptor_;
}

const GetOnlineTitleTicketInput& GetOnlineTitleTicketInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetOnlineTitleTicketInput* GetOnlineTitleTicketInput::default_instance_ = NULL;

GetOnlineTitleTicketInput* GetOnlineTitleTicketInput::New() const {
  return new GetOnlineTitleTicketInput;
}

void GetOnlineTitleTicketInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_devicecertificate()) {
      if (devicecertificate_ != &::google::protobuf::internal::kEmptyString) {
        devicecertificate_->clear();
      }
    }
    if (has_titleid()) {
      if (titleid_ != &::google::protobuf::internal::kEmptyString) {
        titleid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOnlineTitleTicketInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceCertificate;
        break;
      }
      
      // required bytes deviceCertificate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicecertificate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_titleId;
        break;
      }
      
      // required string titleId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleid().data(), this->titleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOnlineTitleTicketInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  // required bytes deviceCertificate = 3;
  if (has_devicecertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->devicecertificate(), output);
  }
  
  // required string titleId = 4;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->titleid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOnlineTitleTicketInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  // required bytes deviceCertificate = 3;
  if (has_devicecertificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->devicecertificate(), target);
  }
  
  // required string titleId = 4;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleid().data(), this->titleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->titleid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOnlineTitleTicketInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required bytes deviceCertificate = 3;
    if (has_devicecertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicecertificate());
    }
    
    // required string titleId = 4;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineTitleTicketInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOnlineTitleTicketInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOnlineTitleTicketInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOnlineTitleTicketInput::MergeFrom(const GetOnlineTitleTicketInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicecertificate()) {
      set_devicecertificate(from.devicecertificate());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOnlineTitleTicketInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineTitleTicketInput::CopyFrom(const GetOnlineTitleTicketInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineTitleTicketInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetOnlineTitleTicketInput::Swap(GetOnlineTitleTicketInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicecertificate_, other->devicecertificate_);
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOnlineTitleTicketInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOnlineTitleTicketInput_descriptor_;
  metadata.reflection = GetOnlineTitleTicketInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOnlineTitleTicketOutput::kErrorFieldNumber;
const int GetOnlineTitleTicketOutput::kETicketFieldNumber;
#endif  // !_MSC_VER

GetOnlineTitleTicketOutput::GetOnlineTitleTicketOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOnlineTitleTicketOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
  eticket_ = const_cast< ::vplex::vsDirectory::ETicketData*>(&::vplex::vsDirectory::ETicketData::default_instance());
}

GetOnlineTitleTicketOutput::GetOnlineTitleTicketOutput(const GetOnlineTitleTicketOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOnlineTitleTicketOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  eticket_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOnlineTitleTicketOutput::~GetOnlineTitleTicketOutput() {
  SharedDtor();
}

void GetOnlineTitleTicketOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
    delete eticket_;
  }
}

void GetOnlineTitleTicketOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineTitleTicketOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOnlineTitleTicketOutput_descriptor_;
}

const GetOnlineTitleTicketOutput& GetOnlineTitleTicketOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetOnlineTitleTicketOutput* GetOnlineTitleTicketOutput::default_instance_ = NULL;

GetOnlineTitleTicketOutput* GetOnlineTitleTicketOutput::New() const {
  return new GetOnlineTitleTicketOutput;
}

void GetOnlineTitleTicketOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_eticket()) {
      if (eticket_ != NULL) eticket_->::vplex::vsDirectory::ETicketData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOnlineTitleTicketOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eTicket;
        break;
      }
      
      // optional .vplex.vsDirectory.ETicketData eTicket = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOnlineTitleTicketOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional .vplex.vsDirectory.ETicketData eTicket = 2;
  if (has_eticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOnlineTitleTicketOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional .vplex.vsDirectory.ETicketData eTicket = 2;
  if (has_eticket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOnlineTitleTicketOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional .vplex.vsDirectory.ETicketData eTicket = 2;
    if (has_eticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineTitleTicketOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOnlineTitleTicketOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOnlineTitleTicketOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOnlineTitleTicketOutput::MergeFrom(const GetOnlineTitleTicketOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_eticket()) {
      mutable_eticket()->::vplex::vsDirectory::ETicketData::MergeFrom(from.eticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOnlineTitleTicketOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineTitleTicketOutput::CopyFrom(const GetOnlineTitleTicketOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineTitleTicketOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_eticket()) {
    if (!this->eticket().IsInitialized()) return false;
  }
  return true;
}

void GetOnlineTitleTicketOutput::Swap(GetOnlineTitleTicketOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(eticket_, other->eticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOnlineTitleTicketOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOnlineTitleTicketOutput_descriptor_;
  metadata.reflection = GetOnlineTitleTicketOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfflineTitleTicketsInput::kSessionFieldNumber;
const int GetOfflineTitleTicketsInput::kDeviceIdFieldNumber;
const int GetOfflineTitleTicketsInput::kDeviceCertificateFieldNumber;
const int GetOfflineTitleTicketsInput::kTitleIdsFieldNumber;
#endif  // !_MSC_VER

GetOfflineTitleTicketsInput::GetOfflineTitleTicketsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOfflineTitleTicketsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetOfflineTitleTicketsInput::GetOfflineTitleTicketsInput(const GetOfflineTitleTicketsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOfflineTitleTicketsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  deviceid_ = GOOGLE_ULONGLONG(0);
  devicecertificate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfflineTitleTicketsInput::~GetOfflineTitleTicketsInput() {
  SharedDtor();
}

void GetOfflineTitleTicketsInput::SharedDtor() {
  if (devicecertificate_ != &::google::protobuf::internal::kEmptyString) {
    delete devicecertificate_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetOfflineTitleTicketsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOfflineTitleTicketsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOfflineTitleTicketsInput_descriptor_;
}

const GetOfflineTitleTicketsInput& GetOfflineTitleTicketsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetOfflineTitleTicketsInput* GetOfflineTitleTicketsInput::default_instance_ = NULL;

GetOfflineTitleTicketsInput* GetOfflineTitleTicketsInput::New() const {
  return new GetOfflineTitleTicketsInput;
}

void GetOfflineTitleTicketsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_devicecertificate()) {
      if (devicecertificate_ != &::google::protobuf::internal::kEmptyString) {
        devicecertificate_->clear();
      }
    }
  }
  titleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOfflineTitleTicketsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceCertificate;
        break;
      }
      
      // required bytes deviceCertificate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceCertificate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicecertificate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_titleIds;
        break;
      }
      
      // repeated string titleIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_titleids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titleids(0).data(), this->titleids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_titleIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOfflineTitleTicketsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  // required bytes deviceCertificate = 3;
  if (has_devicecertificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->devicecertificate(), output);
  }
  
  // repeated string titleIds = 4;
  for (int i = 0; i < this->titleids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->titleids(i).data(), this->titleids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->titleids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOfflineTitleTicketsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  // required bytes deviceCertificate = 3;
  if (has_devicecertificate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->devicecertificate(), target);
  }
  
  // repeated string titleIds = 4;
  for (int i = 0; i < this->titleids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titleids(i).data(), this->titleids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->titleids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOfflineTitleTicketsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required bytes deviceCertificate = 3;
    if (has_devicecertificate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicecertificate());
    }
    
  }
  // repeated string titleIds = 4;
  total_size += 1 * this->titleids_size();
  for (int i = 0; i < this->titleids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->titleids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfflineTitleTicketsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOfflineTitleTicketsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOfflineTitleTicketsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOfflineTitleTicketsInput::MergeFrom(const GetOfflineTitleTicketsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleids_.MergeFrom(from.titleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicecertificate()) {
      set_devicecertificate(from.devicecertificate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOfflineTitleTicketsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfflineTitleTicketsInput::CopyFrom(const GetOfflineTitleTicketsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfflineTitleTicketsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetOfflineTitleTicketsInput::Swap(GetOfflineTitleTicketsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicecertificate_, other->devicecertificate_);
    titleids_.Swap(&other->titleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOfflineTitleTicketsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOfflineTitleTicketsInput_descriptor_;
  metadata.reflection = GetOfflineTitleTicketsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOfflineTitleTicketsOutput::kErrorFieldNumber;
const int GetOfflineTitleTicketsOutput::kTitleTicketsFieldNumber;
#endif  // !_MSC_VER

GetOfflineTitleTicketsOutput::GetOfflineTitleTicketsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOfflineTitleTicketsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetOfflineTitleTicketsOutput::GetOfflineTitleTicketsOutput(const GetOfflineTitleTicketsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOfflineTitleTicketsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOfflineTitleTicketsOutput::~GetOfflineTitleTicketsOutput() {
  SharedDtor();
}

void GetOfflineTitleTicketsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetOfflineTitleTicketsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOfflineTitleTicketsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOfflineTitleTicketsOutput_descriptor_;
}

const GetOfflineTitleTicketsOutput& GetOfflineTitleTicketsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetOfflineTitleTicketsOutput* GetOfflineTitleTicketsOutput::default_instance_ = NULL;

GetOfflineTitleTicketsOutput* GetOfflineTitleTicketsOutput::New() const {
  return new GetOfflineTitleTicketsOutput;
}

void GetOfflineTitleTicketsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  titletickets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOfflineTitleTicketsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleTickets;
        break;
      }
      
      // repeated .vplex.vsDirectory.TitleTicket titleTickets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleTickets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titletickets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleTickets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOfflineTitleTicketsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.TitleTicket titleTickets = 2;
  for (int i = 0; i < this->titletickets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titletickets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOfflineTitleTicketsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.TitleTicket titleTickets = 2;
  for (int i = 0; i < this->titletickets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titletickets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOfflineTitleTicketsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.TitleTicket titleTickets = 2;
  total_size += 1 * this->titletickets_size();
  for (int i = 0; i < this->titletickets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titletickets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOfflineTitleTicketsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOfflineTitleTicketsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOfflineTitleTicketsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOfflineTitleTicketsOutput::MergeFrom(const GetOfflineTitleTicketsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titletickets_.MergeFrom(from.titletickets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOfflineTitleTicketsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOfflineTitleTicketsOutput::CopyFrom(const GetOfflineTitleTicketsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOfflineTitleTicketsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < titletickets_size(); i++) {
    if (!this->titletickets(i).IsInitialized()) return false;
  }
  return true;
}

void GetOfflineTitleTicketsOutput::Swap(GetOfflineTitleTicketsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    titletickets_.Swap(&other->titletickets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOfflineTitleTicketsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOfflineTitleTicketsOutput_descriptor_;
  metadata.reflection = GetOfflineTitleTicketsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListOwnedDataSetsInput::kSessionFieldNumber;
const int ListOwnedDataSetsInput::kUserIdFieldNumber;
const int ListOwnedDataSetsInput::kDeviceIdFieldNumber;
const int ListOwnedDataSetsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ListOwnedDataSetsInput::ListOwnedDataSetsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListOwnedDataSetsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

ListOwnedDataSetsInput::ListOwnedDataSetsInput(const ListOwnedDataSetsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListOwnedDataSetsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListOwnedDataSetsInput::~ListOwnedDataSetsInput() {
  SharedDtor();
}

void ListOwnedDataSetsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void ListOwnedDataSetsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOwnedDataSetsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListOwnedDataSetsInput_descriptor_;
}

const ListOwnedDataSetsInput& ListOwnedDataSetsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ListOwnedDataSetsInput* ListOwnedDataSetsInput::default_instance_ = NULL;

ListOwnedDataSetsInput* ListOwnedDataSetsInput::New() const {
  return new ListOwnedDataSetsInput;
}

void ListOwnedDataSetsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListOwnedDataSetsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // optional fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListOwnedDataSetsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListOwnedDataSetsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListOwnedDataSetsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOwnedDataSetsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListOwnedDataSetsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListOwnedDataSetsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListOwnedDataSetsInput::MergeFrom(const ListOwnedDataSetsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListOwnedDataSetsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOwnedDataSetsInput::CopyFrom(const ListOwnedDataSetsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOwnedDataSetsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void ListOwnedDataSetsInput::Swap(ListOwnedDataSetsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListOwnedDataSetsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListOwnedDataSetsInput_descriptor_;
  metadata.reflection = ListOwnedDataSetsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListOwnedDataSetsOutput::kErrorFieldNumber;
const int ListOwnedDataSetsOutput::kDatasetsFieldNumber;
#endif  // !_MSC_VER

ListOwnedDataSetsOutput::ListOwnedDataSetsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListOwnedDataSetsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ListOwnedDataSetsOutput::ListOwnedDataSetsOutput(const ListOwnedDataSetsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListOwnedDataSetsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListOwnedDataSetsOutput::~ListOwnedDataSetsOutput() {
  SharedDtor();
}

void ListOwnedDataSetsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ListOwnedDataSetsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOwnedDataSetsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListOwnedDataSetsOutput_descriptor_;
}

const ListOwnedDataSetsOutput& ListOwnedDataSetsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ListOwnedDataSetsOutput* ListOwnedDataSetsOutput::default_instance_ = NULL;

ListOwnedDataSetsOutput* ListOwnedDataSetsOutput::New() const {
  return new ListOwnedDataSetsOutput;
}

void ListOwnedDataSetsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  datasets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListOwnedDataSetsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasets;
        break;
      }
      
      // repeated .vplex.vsDirectory.DatasetDetail datasets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListOwnedDataSetsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.DatasetDetail datasets = 2;
  for (int i = 0; i < this->datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListOwnedDataSetsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.DatasetDetail datasets = 2;
  for (int i = 0; i < this->datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListOwnedDataSetsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.DatasetDetail datasets = 2;
  total_size += 1 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOwnedDataSetsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListOwnedDataSetsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListOwnedDataSetsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListOwnedDataSetsOutput::MergeFrom(const ListOwnedDataSetsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasets_.MergeFrom(from.datasets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListOwnedDataSetsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOwnedDataSetsOutput::CopyFrom(const ListOwnedDataSetsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOwnedDataSetsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < datasets_size(); i++) {
    if (!this->datasets(i).IsInitialized()) return false;
  }
  return true;
}

void ListOwnedDataSetsOutput::Swap(ListOwnedDataSetsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    datasets_.Swap(&other->datasets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListOwnedDataSetsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListOwnedDataSetsOutput_descriptor_;
  metadata.reflection = ListOwnedDataSetsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetDetailsInput::kSessionFieldNumber;
const int GetDatasetDetailsInput::kUserIdFieldNumber;
const int GetDatasetDetailsInput::kDatasetIdFieldNumber;
const int GetDatasetDetailsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetDatasetDetailsInput::GetDatasetDetailsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetDetailsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetDatasetDetailsInput::GetDatasetDetailsInput(const GetDatasetDetailsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetDetailsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetDetailsInput::~GetDatasetDetailsInput() {
  SharedDtor();
}

void GetDatasetDetailsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetDatasetDetailsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetDetailsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetDetailsInput_descriptor_;
}

const GetDatasetDetailsInput& GetDatasetDetailsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDatasetDetailsInput* GetDatasetDetailsInput::default_instance_ = NULL;

GetDatasetDetailsInput* GetDatasetDetailsInput::New() const {
  return new GetDatasetDetailsInput;
}

void GetDatasetDetailsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetDetailsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetDetailsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 datasetId = 3;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetDetailsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 datasetId = 3;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetDetailsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 3;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetDetailsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetDetailsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetDetailsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetDetailsInput::MergeFrom(const GetDatasetDetailsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetDetailsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetDetailsInput::CopyFrom(const GetDatasetDetailsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetDetailsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetDatasetDetailsInput::Swap(GetDatasetDetailsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetDetailsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetDetailsInput_descriptor_;
  metadata.reflection = GetDatasetDetailsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetDetailsOutput::kErrorFieldNumber;
const int GetDatasetDetailsOutput::kDatasetDetailFieldNumber;
#endif  // !_MSC_VER

GetDatasetDetailsOutput::GetDatasetDetailsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetDetailsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
  datasetdetail_ = const_cast< ::vplex::vsDirectory::DatasetDetail*>(&::vplex::vsDirectory::DatasetDetail::default_instance());
}

GetDatasetDetailsOutput::GetDatasetDetailsOutput(const GetDatasetDetailsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetDetailsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  datasetdetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetDetailsOutput::~GetDatasetDetailsOutput() {
  SharedDtor();
}

void GetDatasetDetailsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
    delete datasetdetail_;
  }
}

void GetDatasetDetailsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetDetailsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetDetailsOutput_descriptor_;
}

const GetDatasetDetailsOutput& GetDatasetDetailsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDatasetDetailsOutput* GetDatasetDetailsOutput::default_instance_ = NULL;

GetDatasetDetailsOutput* GetDatasetDetailsOutput::New() const {
  return new GetDatasetDetailsOutput;
}

void GetDatasetDetailsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_datasetdetail()) {
      if (datasetdetail_ != NULL) datasetdetail_->::vplex::vsDirectory::DatasetDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetDetailsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasetDetail;
        break;
      }
      
      // optional .vplex.vsDirectory.DatasetDetail datasetDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datasetdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetDetailsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional .vplex.vsDirectory.DatasetDetail datasetDetail = 2;
  if (has_datasetdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasetdetail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetDetailsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional .vplex.vsDirectory.DatasetDetail datasetDetail = 2;
  if (has_datasetdetail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasetdetail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetDetailsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional .vplex.vsDirectory.DatasetDetail datasetDetail = 2;
    if (has_datasetdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datasetdetail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetDetailsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetDetailsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetDetailsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetDetailsOutput::MergeFrom(const GetDatasetDetailsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_datasetdetail()) {
      mutable_datasetdetail()->::vplex::vsDirectory::DatasetDetail::MergeFrom(from.datasetdetail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetDetailsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetDetailsOutput::CopyFrom(const GetDatasetDetailsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetDetailsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_datasetdetail()) {
    if (!this->datasetdetail().IsInitialized()) return false;
  }
  return true;
}

void GetDatasetDetailsOutput::Swap(GetDatasetDetailsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(datasetdetail_, other->datasetdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetDetailsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetDetailsOutput_descriptor_;
  metadata.reflection = GetDatasetDetailsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDataSetInput::kSessionFieldNumber;
const int AddDataSetInput::kUserIdFieldNumber;
const int AddDataSetInput::kDatasetNameFieldNumber;
const int AddDataSetInput::kDatasetTypeIdFieldNumber;
const int AddDataSetInput::kStorageClusterIdFieldNumber;
const int AddDataSetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddDataSetInput::AddDataSetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDataSetInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddDataSetInput::AddDataSetInput(const AddDataSetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDataSetInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasettypeid_ = 1;
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDataSetInput::~AddDataSetInput() {
  SharedDtor();
}

void AddDataSetInput::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddDataSetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDataSetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDataSetInput_descriptor_;
}

const AddDataSetInput& AddDataSetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddDataSetInput* AddDataSetInput::default_instance_ = NULL;

AddDataSetInput* AddDataSetInput::New() const {
  return new AddDataSetInput;
}

void AddDataSetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    datasettypeid_ = 1;
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDataSetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasetName;
        break;
      }
      
      // required string datasetName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_datasetTypeId;
        break;
      }
      
      // required .vplex.vsDirectory.DatasetType datasetTypeId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetTypeId:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettypeid(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_storageClusterId;
        break;
      }
      
      // optional fixed64 storageClusterId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDataSetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required string datasetName = 3;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datasetname(), output);
  }
  
  // required .vplex.vsDirectory.DatasetType datasetTypeId = 4;
  if (has_datasettypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datasettypeid(), output);
  }
  
  // optional fixed64 storageClusterId = 5;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->storageclusterid(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDataSetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required string datasetName = 3;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datasetname(), target);
  }
  
  // required .vplex.vsDirectory.DatasetType datasetTypeId = 4;
  if (has_datasettypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datasettypeid(), target);
  }
  
  // optional fixed64 storageClusterId = 5;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->storageclusterid(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDataSetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required string datasetName = 3;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // required .vplex.vsDirectory.DatasetType datasetTypeId = 4;
    if (has_datasettypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettypeid());
    }
    
    // optional fixed64 storageClusterId = 5;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDataSetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDataSetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDataSetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDataSetInput::MergeFrom(const AddDataSetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_datasettypeid()) {
      set_datasettypeid(from.datasettypeid());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDataSetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDataSetInput::CopyFrom(const AddDataSetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataSetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddDataSetInput::Swap(AddDataSetInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(datasettypeid_, other->datasettypeid_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDataSetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDataSetInput_descriptor_;
  metadata.reflection = AddDataSetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDataSetOutput::kErrorFieldNumber;
const int AddDataSetOutput::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

AddDataSetOutput::AddDataSetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDataSetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddDataSetOutput::AddDataSetOutput(const AddDataSetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDataSetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  datasetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDataSetOutput::~AddDataSetOutput() {
  SharedDtor();
}

void AddDataSetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddDataSetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDataSetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDataSetOutput_descriptor_;
}

const AddDataSetOutput& AddDataSetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddDataSetOutput* AddDataSetOutput::default_instance_ = NULL;

AddDataSetOutput* AddDataSetOutput::New() const {
  return new AddDataSetOutput;
}

void AddDataSetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    datasetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDataSetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // optional fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDataSetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDataSetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDataSetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDataSetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDataSetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDataSetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDataSetOutput::MergeFrom(const AddDataSetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDataSetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDataSetOutput::CopyFrom(const AddDataSetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDataSetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddDataSetOutput::Swap(AddDataSetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDataSetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDataSetOutput_descriptor_;
  metadata.reflection = AddDataSetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCameraDatasetInput::kSessionFieldNumber;
const int AddCameraDatasetInput::kUserIdFieldNumber;
const int AddCameraDatasetInput::kDatasetNameFieldNumber;
const int AddCameraDatasetInput::kCreatedForFieldNumber;
const int AddCameraDatasetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddCameraDatasetInput::AddCameraDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCameraDatasetInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddCameraDatasetInput::AddCameraDatasetInput(const AddCameraDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCameraDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createdfor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCameraDatasetInput::~AddCameraDatasetInput() {
  SharedDtor();
}

void AddCameraDatasetInput::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (createdfor_ != &::google::protobuf::internal::kEmptyString) {
    delete createdfor_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddCameraDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCameraDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCameraDatasetInput_descriptor_;
}

const AddCameraDatasetInput& AddCameraDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddCameraDatasetInput* AddCameraDatasetInput::default_instance_ = NULL;

AddCameraDatasetInput* AddCameraDatasetInput::New() const {
  return new AddCameraDatasetInput;
}

void AddCameraDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    if (has_createdfor()) {
      if (createdfor_ != &::google::protobuf::internal::kEmptyString) {
        createdfor_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCameraDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasetName;
        break;
      }
      
      // required string datasetName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_createdFor;
        break;
      }
      
      // required string createdFor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createdFor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdfor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdfor().data(), this->createdfor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCameraDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required string datasetName = 3;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->datasetname(), output);
  }
  
  // required string createdFor = 4;
  if (has_createdfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdfor().data(), this->createdfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->createdfor(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCameraDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required string datasetName = 3;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->datasetname(), target);
  }
  
  // required string createdFor = 4;
  if (has_createdfor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdfor().data(), this->createdfor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->createdfor(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCameraDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required string datasetName = 3;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // required string createdFor = 4;
    if (has_createdfor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdfor());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCameraDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCameraDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCameraDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCameraDatasetInput::MergeFrom(const AddCameraDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_createdfor()) {
      set_createdfor(from.createdfor());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCameraDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCameraDatasetInput::CopyFrom(const AddCameraDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCameraDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddCameraDatasetInput::Swap(AddCameraDatasetInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(createdfor_, other->createdfor_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCameraDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCameraDatasetInput_descriptor_;
  metadata.reflection = AddCameraDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCameraDatasetOutput::kErrorFieldNumber;
const int AddCameraDatasetOutput::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

AddCameraDatasetOutput::AddCameraDatasetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCameraDatasetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddCameraDatasetOutput::AddCameraDatasetOutput(const AddCameraDatasetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCameraDatasetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  datasetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCameraDatasetOutput::~AddCameraDatasetOutput() {
  SharedDtor();
}

void AddCameraDatasetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddCameraDatasetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCameraDatasetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCameraDatasetOutput_descriptor_;
}

const AddCameraDatasetOutput& AddCameraDatasetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddCameraDatasetOutput* AddCameraDatasetOutput::default_instance_ = NULL;

AddCameraDatasetOutput* AddCameraDatasetOutput::New() const {
  return new AddCameraDatasetOutput;
}

void AddCameraDatasetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    datasetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCameraDatasetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // optional fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCameraDatasetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCameraDatasetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCameraDatasetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCameraDatasetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCameraDatasetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCameraDatasetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCameraDatasetOutput::MergeFrom(const AddCameraDatasetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCameraDatasetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCameraDatasetOutput::CopyFrom(const AddCameraDatasetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCameraDatasetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddCameraDatasetOutput::Swap(AddCameraDatasetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCameraDatasetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCameraDatasetOutput_descriptor_;
  metadata.reflection = AddCameraDatasetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteDataSetInput::kSessionFieldNumber;
const int DeleteDataSetInput::kUserIdFieldNumber;
const int DeleteDataSetInput::kDatasetIdFieldNumber;
const int DeleteDataSetInput::kDatasetNameFieldNumber;
const int DeleteDataSetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

DeleteDataSetInput::DeleteDataSetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteDataSetInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

DeleteDataSetInput::DeleteDataSetInput(const DeleteDataSetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteDataSetInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteDataSetInput::~DeleteDataSetInput() {
  SharedDtor();
}

void DeleteDataSetInput::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void DeleteDataSetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDataSetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDataSetInput_descriptor_;
}

const DeleteDataSetInput& DeleteDataSetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeleteDataSetInput* DeleteDataSetInput::default_instance_ = NULL;

DeleteDataSetInput* DeleteDataSetInput::New() const {
  return new DeleteDataSetInput;
}

void DeleteDataSetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteDataSetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetId;
        break;
      }
      
      // optional fixed64 datasetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_datasetName;
        break;
      }
      
      // optional string datasetName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteDataSetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional fixed64 datasetId = 3;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetid(), output);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->datasetname(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteDataSetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional fixed64 datasetId = 3;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetid(), target);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datasetname(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteDataSetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 datasetId = 3;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string datasetName = 4;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDataSetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteDataSetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteDataSetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteDataSetInput::MergeFrom(const DeleteDataSetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteDataSetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDataSetInput::CopyFrom(const DeleteDataSetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDataSetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void DeleteDataSetInput::Swap(DeleteDataSetInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteDataSetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDataSetInput_descriptor_;
  metadata.reflection = DeleteDataSetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteDataSetOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

DeleteDataSetOutput::DeleteDataSetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteDataSetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

DeleteDataSetOutput::DeleteDataSetOutput(const DeleteDataSetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteDataSetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteDataSetOutput::~DeleteDataSetOutput() {
  SharedDtor();
}

void DeleteDataSetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void DeleteDataSetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDataSetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDataSetOutput_descriptor_;
}

const DeleteDataSetOutput& DeleteDataSetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeleteDataSetOutput* DeleteDataSetOutput::default_instance_ = NULL;

DeleteDataSetOutput* DeleteDataSetOutput::New() const {
  return new DeleteDataSetOutput;
}

void DeleteDataSetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteDataSetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteDataSetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteDataSetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteDataSetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDataSetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteDataSetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteDataSetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteDataSetOutput::MergeFrom(const DeleteDataSetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteDataSetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDataSetOutput::CopyFrom(const DeleteDataSetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDataSetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DeleteDataSetOutput::Swap(DeleteDataSetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteDataSetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDataSetOutput_descriptor_;
  metadata.reflection = DeleteDataSetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameDataSetInput::kSessionFieldNumber;
const int RenameDataSetInput::kUserIdFieldNumber;
const int RenameDataSetInput::kDatasetIdFieldNumber;
const int RenameDataSetInput::kDatasetNameFieldNumber;
const int RenameDataSetInput::kDatasetNameNewFieldNumber;
const int RenameDataSetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

RenameDataSetInput::RenameDataSetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameDataSetInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

RenameDataSetInput::RenameDataSetInput(const RenameDataSetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameDataSetInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasetnamenew_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameDataSetInput::~RenameDataSetInput() {
  SharedDtor();
}

void RenameDataSetInput::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (datasetnamenew_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetnamenew_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void RenameDataSetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameDataSetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameDataSetInput_descriptor_;
}

const RenameDataSetInput& RenameDataSetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RenameDataSetInput* RenameDataSetInput::default_instance_ = NULL;

RenameDataSetInput* RenameDataSetInput::New() const {
  return new RenameDataSetInput;
}

void RenameDataSetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    if (has_datasetnamenew()) {
      if (datasetnamenew_ != &::google::protobuf::internal::kEmptyString) {
        datasetnamenew_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameDataSetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetId;
        break;
      }
      
      // optional fixed64 datasetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_datasetName;
        break;
      }
      
      // optional string datasetName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_datasetNameNew;
        break;
      }
      
      // required string datasetNameNew = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetNameNew:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetnamenew()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetnamenew().data(), this->datasetnamenew().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameDataSetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional fixed64 datasetId = 3;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetid(), output);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->datasetname(), output);
  }
  
  // required string datasetNameNew = 5;
  if (has_datasetnamenew()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetnamenew().data(), this->datasetnamenew().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->datasetnamenew(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameDataSetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional fixed64 datasetId = 3;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetid(), target);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datasetname(), target);
  }
  
  // required string datasetNameNew = 5;
  if (has_datasetnamenew()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetnamenew().data(), this->datasetnamenew().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->datasetnamenew(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameDataSetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 datasetId = 3;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string datasetName = 4;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // required string datasetNameNew = 5;
    if (has_datasetnamenew()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetnamenew());
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameDataSetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameDataSetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameDataSetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameDataSetInput::MergeFrom(const RenameDataSetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_datasetnamenew()) {
      set_datasetnamenew(from.datasetnamenew());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameDataSetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameDataSetInput::CopyFrom(const RenameDataSetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameDataSetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void RenameDataSetInput::Swap(RenameDataSetInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(datasetnamenew_, other->datasetnamenew_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameDataSetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameDataSetInput_descriptor_;
  metadata.reflection = RenameDataSetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameDataSetOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

RenameDataSetOutput::RenameDataSetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameDataSetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

RenameDataSetOutput::RenameDataSetOutput(const RenameDataSetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameDataSetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameDataSetOutput::~RenameDataSetOutput() {
  SharedDtor();
}

void RenameDataSetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void RenameDataSetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameDataSetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameDataSetOutput_descriptor_;
}

const RenameDataSetOutput& RenameDataSetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RenameDataSetOutput* RenameDataSetOutput::default_instance_ = NULL;

RenameDataSetOutput* RenameDataSetOutput::New() const {
  return new RenameDataSetOutput;
}

void RenameDataSetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameDataSetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameDataSetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameDataSetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameDataSetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameDataSetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameDataSetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameDataSetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameDataSetOutput::MergeFrom(const RenameDataSetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameDataSetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameDataSetOutput::CopyFrom(const RenameDataSetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameDataSetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void RenameDataSetOutput::Swap(RenameDataSetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameDataSetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameDataSetOutput_descriptor_;
  metadata.reflection = RenameDataSetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDataSetCacheInput::kSessionFieldNumber;
const int SetDataSetCacheInput::kUserIdFieldNumber;
const int SetDataSetCacheInput::kDatasetIdFieldNumber;
const int SetDataSetCacheInput::kCacheDatasetIdFieldNumber;
const int SetDataSetCacheInput::kVersionFieldNumber;
#endif  // !_MSC_VER

SetDataSetCacheInput::SetDataSetCacheInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetDataSetCacheInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

SetDataSetCacheInput::SetDataSetCacheInput(const SetDataSetCacheInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetDataSetCacheInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  cachedatasetid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDataSetCacheInput::~SetDataSetCacheInput() {
  SharedDtor();
}

void SetDataSetCacheInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void SetDataSetCacheInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDataSetCacheInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDataSetCacheInput_descriptor_;
}

const SetDataSetCacheInput& SetDataSetCacheInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SetDataSetCacheInput* SetDataSetCacheInput::default_instance_ = NULL;

SetDataSetCacheInput* SetDataSetCacheInput::New() const {
  return new SetDataSetCacheInput;
}

void SetDataSetCacheInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    cachedatasetid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDataSetCacheInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_cacheDatasetId;
        break;
      }
      
      // optional fixed64 cacheDatasetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cacheDatasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cachedatasetid_)));
          set_has_cachedatasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDataSetCacheInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 datasetId = 3;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetid(), output);
  }
  
  // optional fixed64 cacheDatasetId = 4;
  if (has_cachedatasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->cachedatasetid(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetDataSetCacheInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 datasetId = 3;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetid(), target);
  }
  
  // optional fixed64 cacheDatasetId = 4;
  if (has_cachedatasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->cachedatasetid(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetDataSetCacheInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 3;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 cacheDatasetId = 4;
    if (has_cachedatasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDataSetCacheInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDataSetCacheInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDataSetCacheInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDataSetCacheInput::MergeFrom(const SetDataSetCacheInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_cachedatasetid()) {
      set_cachedatasetid(from.cachedatasetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDataSetCacheInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDataSetCacheInput::CopyFrom(const SetDataSetCacheInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDataSetCacheInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void SetDataSetCacheInput::Swap(SetDataSetCacheInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(cachedatasetid_, other->cachedatasetid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDataSetCacheInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDataSetCacheInput_descriptor_;
  metadata.reflection = SetDataSetCacheInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDataSetCacheOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

SetDataSetCacheOutput::SetDataSetCacheOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetDataSetCacheOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

SetDataSetCacheOutput::SetDataSetCacheOutput(const SetDataSetCacheOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetDataSetCacheOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDataSetCacheOutput::~SetDataSetCacheOutput() {
  SharedDtor();
}

void SetDataSetCacheOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void SetDataSetCacheOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDataSetCacheOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDataSetCacheOutput_descriptor_;
}

const SetDataSetCacheOutput& SetDataSetCacheOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SetDataSetCacheOutput* SetDataSetCacheOutput::default_instance_ = NULL;

SetDataSetCacheOutput* SetDataSetCacheOutput::New() const {
  return new SetDataSetCacheOutput;
}

void SetDataSetCacheOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDataSetCacheOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDataSetCacheOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetDataSetCacheOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetDataSetCacheOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDataSetCacheOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDataSetCacheOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDataSetCacheOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDataSetCacheOutput::MergeFrom(const SetDataSetCacheOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDataSetCacheOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDataSetCacheOutput::CopyFrom(const SetDataSetCacheOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDataSetCacheOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void SetDataSetCacheOutput::Swap(SetDataSetCacheOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDataSetCacheOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDataSetCacheOutput_descriptor_;
  metadata.reflection = SetDataSetCacheOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDeviceFromSubscriptionsInput::kSessionFieldNumber;
const int RemoveDeviceFromSubscriptionsInput::kUserIdFieldNumber;
const int RemoveDeviceFromSubscriptionsInput::kDeviceIdFieldNumber;
const int RemoveDeviceFromSubscriptionsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

RemoveDeviceFromSubscriptionsInput::RemoveDeviceFromSubscriptionsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDeviceFromSubscriptionsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

RemoveDeviceFromSubscriptionsInput::RemoveDeviceFromSubscriptionsInput(const RemoveDeviceFromSubscriptionsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDeviceFromSubscriptionsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDeviceFromSubscriptionsInput::~RemoveDeviceFromSubscriptionsInput() {
  SharedDtor();
}

void RemoveDeviceFromSubscriptionsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void RemoveDeviceFromSubscriptionsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDeviceFromSubscriptionsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDeviceFromSubscriptionsInput_descriptor_;
}

const RemoveDeviceFromSubscriptionsInput& RemoveDeviceFromSubscriptionsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RemoveDeviceFromSubscriptionsInput* RemoveDeviceFromSubscriptionsInput::default_instance_ = NULL;

RemoveDeviceFromSubscriptionsInput* RemoveDeviceFromSubscriptionsInput::New() const {
  return new RemoveDeviceFromSubscriptionsInput;
}

void RemoveDeviceFromSubscriptionsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDeviceFromSubscriptionsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDeviceFromSubscriptionsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDeviceFromSubscriptionsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDeviceFromSubscriptionsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDeviceFromSubscriptionsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDeviceFromSubscriptionsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDeviceFromSubscriptionsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDeviceFromSubscriptionsInput::MergeFrom(const RemoveDeviceFromSubscriptionsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDeviceFromSubscriptionsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDeviceFromSubscriptionsInput::CopyFrom(const RemoveDeviceFromSubscriptionsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDeviceFromSubscriptionsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void RemoveDeviceFromSubscriptionsInput::Swap(RemoveDeviceFromSubscriptionsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDeviceFromSubscriptionsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDeviceFromSubscriptionsInput_descriptor_;
  metadata.reflection = RemoveDeviceFromSubscriptionsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDeviceFromSubscriptionsOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

RemoveDeviceFromSubscriptionsOutput::RemoveDeviceFromSubscriptionsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDeviceFromSubscriptionsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

RemoveDeviceFromSubscriptionsOutput::RemoveDeviceFromSubscriptionsOutput(const RemoveDeviceFromSubscriptionsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDeviceFromSubscriptionsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDeviceFromSubscriptionsOutput::~RemoveDeviceFromSubscriptionsOutput() {
  SharedDtor();
}

void RemoveDeviceFromSubscriptionsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void RemoveDeviceFromSubscriptionsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDeviceFromSubscriptionsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDeviceFromSubscriptionsOutput_descriptor_;
}

const RemoveDeviceFromSubscriptionsOutput& RemoveDeviceFromSubscriptionsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RemoveDeviceFromSubscriptionsOutput* RemoveDeviceFromSubscriptionsOutput::default_instance_ = NULL;

RemoveDeviceFromSubscriptionsOutput* RemoveDeviceFromSubscriptionsOutput::New() const {
  return new RemoveDeviceFromSubscriptionsOutput;
}

void RemoveDeviceFromSubscriptionsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDeviceFromSubscriptionsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDeviceFromSubscriptionsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDeviceFromSubscriptionsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDeviceFromSubscriptionsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDeviceFromSubscriptionsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDeviceFromSubscriptionsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDeviceFromSubscriptionsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDeviceFromSubscriptionsOutput::MergeFrom(const RemoveDeviceFromSubscriptionsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDeviceFromSubscriptionsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDeviceFromSubscriptionsOutput::CopyFrom(const RemoveDeviceFromSubscriptionsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDeviceFromSubscriptionsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void RemoveDeviceFromSubscriptionsOutput::Swap(RemoveDeviceFromSubscriptionsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDeviceFromSubscriptionsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDeviceFromSubscriptionsOutput_descriptor_;
  metadata.reflection = RemoveDeviceFromSubscriptionsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListSubscriptionsInput::kSessionFieldNumber;
const int ListSubscriptionsInput::kUserIdFieldNumber;
const int ListSubscriptionsInput::kDeviceIdFieldNumber;
const int ListSubscriptionsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ListSubscriptionsInput::ListSubscriptionsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListSubscriptionsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

ListSubscriptionsInput::ListSubscriptionsInput(const ListSubscriptionsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListSubscriptionsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListSubscriptionsInput::~ListSubscriptionsInput() {
  SharedDtor();
}

void ListSubscriptionsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void ListSubscriptionsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSubscriptionsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSubscriptionsInput_descriptor_;
}

const ListSubscriptionsInput& ListSubscriptionsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ListSubscriptionsInput* ListSubscriptionsInput::default_instance_ = NULL;

ListSubscriptionsInput* ListSubscriptionsInput::New() const {
  return new ListSubscriptionsInput;
}

void ListSubscriptionsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListSubscriptionsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListSubscriptionsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListSubscriptionsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListSubscriptionsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSubscriptionsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListSubscriptionsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListSubscriptionsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListSubscriptionsInput::MergeFrom(const ListSubscriptionsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListSubscriptionsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsInput::CopyFrom(const ListSubscriptionsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void ListSubscriptionsInput::Swap(ListSubscriptionsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListSubscriptionsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSubscriptionsInput_descriptor_;
  metadata.reflection = ListSubscriptionsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListSubscriptionsOutput::kErrorFieldNumber;
const int ListSubscriptionsOutput::kSubscriptionsFieldNumber;
#endif  // !_MSC_VER

ListSubscriptionsOutput::ListSubscriptionsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListSubscriptionsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ListSubscriptionsOutput::ListSubscriptionsOutput(const ListSubscriptionsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListSubscriptionsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListSubscriptionsOutput::~ListSubscriptionsOutput() {
  SharedDtor();
}

void ListSubscriptionsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ListSubscriptionsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSubscriptionsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSubscriptionsOutput_descriptor_;
}

const ListSubscriptionsOutput& ListSubscriptionsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ListSubscriptionsOutput* ListSubscriptionsOutput::default_instance_ = NULL;

ListSubscriptionsOutput* ListSubscriptionsOutput::New() const {
  return new ListSubscriptionsOutput;
}

void ListSubscriptionsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListSubscriptionsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        break;
      }
      
      // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListSubscriptionsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subscriptions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListSubscriptionsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subscriptions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListSubscriptionsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSubscriptionsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListSubscriptionsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListSubscriptionsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListSubscriptionsOutput::MergeFrom(const ListSubscriptionsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListSubscriptionsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsOutput::CopyFrom(const ListSubscriptionsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ListSubscriptionsOutput::Swap(ListSubscriptionsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListSubscriptionsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSubscriptionsOutput_descriptor_;
  metadata.reflection = ListSubscriptionsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddSubscriptionsInput::kSessionFieldNumber;
const int AddSubscriptionsInput::kUserIdFieldNumber;
const int AddSubscriptionsInput::kDeviceIdFieldNumber;
const int AddSubscriptionsInput::kSubscriptionsFieldNumber;
const int AddSubscriptionsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddSubscriptionsInput::AddSubscriptionsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddSubscriptionsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddSubscriptionsInput::AddSubscriptionsInput(const AddSubscriptionsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddSubscriptionsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddSubscriptionsInput::~AddSubscriptionsInput() {
  SharedDtor();
}

void AddSubscriptionsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddSubscriptionsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddSubscriptionsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddSubscriptionsInput_descriptor_;
}

const AddSubscriptionsInput& AddSubscriptionsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddSubscriptionsInput* AddSubscriptionsInput::default_instance_ = NULL;

AddSubscriptionsInput* AddSubscriptionsInput::New() const {
  return new AddSubscriptionsInput;
}

void AddSubscriptionsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddSubscriptionsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subscriptions;
        break;
      }
      
      // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subscriptions;
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddSubscriptionsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subscriptions(i), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddSubscriptionsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subscriptions(i), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddSubscriptionsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddSubscriptionsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddSubscriptionsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddSubscriptionsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddSubscriptionsInput::MergeFrom(const AddSubscriptionsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddSubscriptionsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSubscriptionsInput::CopyFrom(const AddSubscriptionsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSubscriptionsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddSubscriptionsInput::Swap(AddSubscriptionsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddSubscriptionsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddSubscriptionsInput_descriptor_;
  metadata.reflection = AddSubscriptionsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddSubscriptionsOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AddSubscriptionsOutput::AddSubscriptionsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddSubscriptionsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddSubscriptionsOutput::AddSubscriptionsOutput(const AddSubscriptionsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddSubscriptionsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddSubscriptionsOutput::~AddSubscriptionsOutput() {
  SharedDtor();
}

void AddSubscriptionsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddSubscriptionsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddSubscriptionsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddSubscriptionsOutput_descriptor_;
}

const AddSubscriptionsOutput& AddSubscriptionsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddSubscriptionsOutput* AddSubscriptionsOutput::default_instance_ = NULL;

AddSubscriptionsOutput* AddSubscriptionsOutput::New() const {
  return new AddSubscriptionsOutput;
}

void AddSubscriptionsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddSubscriptionsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddSubscriptionsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddSubscriptionsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddSubscriptionsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddSubscriptionsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddSubscriptionsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddSubscriptionsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddSubscriptionsOutput::MergeFrom(const AddSubscriptionsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddSubscriptionsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSubscriptionsOutput::CopyFrom(const AddSubscriptionsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSubscriptionsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddSubscriptionsOutput::Swap(AddSubscriptionsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddSubscriptionsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddSubscriptionsOutput_descriptor_;
  metadata.reflection = AddSubscriptionsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddUserDatasetSubscriptionInput::kSessionFieldNumber;
const int AddUserDatasetSubscriptionInput::kUserIdFieldNumber;
const int AddUserDatasetSubscriptionInput::kDeviceIdFieldNumber;
const int AddUserDatasetSubscriptionInput::kDatasetIdFieldNumber;
const int AddUserDatasetSubscriptionInput::kDeviceRootFieldNumber;
const int AddUserDatasetSubscriptionInput::kFilterFieldNumber;
const int AddUserDatasetSubscriptionInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddUserDatasetSubscriptionInput::AddUserDatasetSubscriptionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddUserDatasetSubscriptionInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddUserDatasetSubscriptionInput::AddUserDatasetSubscriptionInput(const AddUserDatasetSubscriptionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddUserDatasetSubscriptionInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  deviceroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddUserDatasetSubscriptionInput::~AddUserDatasetSubscriptionInput() {
  SharedDtor();
}

void AddUserDatasetSubscriptionInput::SharedDtor() {
  if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceroot_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddUserDatasetSubscriptionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUserDatasetSubscriptionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUserDatasetSubscriptionInput_descriptor_;
}

const AddUserDatasetSubscriptionInput& AddUserDatasetSubscriptionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddUserDatasetSubscriptionInput* AddUserDatasetSubscriptionInput::default_instance_ = NULL;

AddUserDatasetSubscriptionInput* AddUserDatasetSubscriptionInput::New() const {
  return new AddUserDatasetSubscriptionInput;
}

void AddUserDatasetSubscriptionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_deviceroot()) {
      if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
        deviceroot_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddUserDatasetSubscriptionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceRoot;
        break;
      }
      
      // optional string deviceRoot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceRoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceroot().data(), this->deviceroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }
      
      // optional string filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddUserDatasetSubscriptionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datasetid(), output);
  }
  
  // optional string deviceRoot = 5;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deviceroot(), output);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filter(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddUserDatasetSubscriptionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datasetid(), target);
  }
  
  // optional string deviceRoot = 5;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deviceroot(), target);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddUserDatasetSubscriptionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 4;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string deviceRoot = 5;
    if (has_deviceroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceroot());
    }
    
    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUserDatasetSubscriptionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddUserDatasetSubscriptionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddUserDatasetSubscriptionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddUserDatasetSubscriptionInput::MergeFrom(const AddUserDatasetSubscriptionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_deviceroot()) {
      set_deviceroot(from.deviceroot());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddUserDatasetSubscriptionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUserDatasetSubscriptionInput::CopyFrom(const AddUserDatasetSubscriptionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddUserDatasetSubscriptionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddUserDatasetSubscriptionInput::Swap(AddUserDatasetSubscriptionInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(deviceroot_, other->deviceroot_);
    std::swap(filter_, other->filter_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddUserDatasetSubscriptionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUserDatasetSubscriptionInput_descriptor_;
  metadata.reflection = AddUserDatasetSubscriptionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddUserDatasetSubscriptionOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AddUserDatasetSubscriptionOutput::AddUserDatasetSubscriptionOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddUserDatasetSubscriptionOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddUserDatasetSubscriptionOutput::AddUserDatasetSubscriptionOutput(const AddUserDatasetSubscriptionOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddUserDatasetSubscriptionOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddUserDatasetSubscriptionOutput::~AddUserDatasetSubscriptionOutput() {
  SharedDtor();
}

void AddUserDatasetSubscriptionOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddUserDatasetSubscriptionOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUserDatasetSubscriptionOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUserDatasetSubscriptionOutput_descriptor_;
}

const AddUserDatasetSubscriptionOutput& AddUserDatasetSubscriptionOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddUserDatasetSubscriptionOutput* AddUserDatasetSubscriptionOutput::default_instance_ = NULL;

AddUserDatasetSubscriptionOutput* AddUserDatasetSubscriptionOutput::New() const {
  return new AddUserDatasetSubscriptionOutput;
}

void AddUserDatasetSubscriptionOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddUserDatasetSubscriptionOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddUserDatasetSubscriptionOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddUserDatasetSubscriptionOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddUserDatasetSubscriptionOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUserDatasetSubscriptionOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddUserDatasetSubscriptionOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddUserDatasetSubscriptionOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddUserDatasetSubscriptionOutput::MergeFrom(const AddUserDatasetSubscriptionOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddUserDatasetSubscriptionOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUserDatasetSubscriptionOutput::CopyFrom(const AddUserDatasetSubscriptionOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddUserDatasetSubscriptionOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddUserDatasetSubscriptionOutput::Swap(AddUserDatasetSubscriptionOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddUserDatasetSubscriptionOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUserDatasetSubscriptionOutput_descriptor_;
  metadata.reflection = AddUserDatasetSubscriptionOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCameraSubscriptionInput::kSessionFieldNumber;
const int AddCameraSubscriptionInput::kUserIdFieldNumber;
const int AddCameraSubscriptionInput::kDeviceIdFieldNumber;
const int AddCameraSubscriptionInput::kDatasetIdFieldNumber;
const int AddCameraSubscriptionInput::kDeviceRootFieldNumber;
const int AddCameraSubscriptionInput::kFilterFieldNumber;
const int AddCameraSubscriptionInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddCameraSubscriptionInput::AddCameraSubscriptionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCameraSubscriptionInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddCameraSubscriptionInput::AddCameraSubscriptionInput(const AddCameraSubscriptionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCameraSubscriptionInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  deviceroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCameraSubscriptionInput::~AddCameraSubscriptionInput() {
  SharedDtor();
}

void AddCameraSubscriptionInput::SharedDtor() {
  if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceroot_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddCameraSubscriptionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCameraSubscriptionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCameraSubscriptionInput_descriptor_;
}

const AddCameraSubscriptionInput& AddCameraSubscriptionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddCameraSubscriptionInput* AddCameraSubscriptionInput::default_instance_ = NULL;

AddCameraSubscriptionInput* AddCameraSubscriptionInput::New() const {
  return new AddCameraSubscriptionInput;
}

void AddCameraSubscriptionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_deviceroot()) {
      if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
        deviceroot_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCameraSubscriptionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceRoot;
        break;
      }
      
      // optional string deviceRoot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceRoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceroot().data(), this->deviceroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }
      
      // optional string filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCameraSubscriptionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datasetid(), output);
  }
  
  // optional string deviceRoot = 5;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->deviceroot(), output);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filter(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCameraSubscriptionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datasetid(), target);
  }
  
  // optional string deviceRoot = 5;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->deviceroot(), target);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCameraSubscriptionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 4;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string deviceRoot = 5;
    if (has_deviceroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceroot());
    }
    
    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCameraSubscriptionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCameraSubscriptionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCameraSubscriptionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCameraSubscriptionInput::MergeFrom(const AddCameraSubscriptionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_deviceroot()) {
      set_deviceroot(from.deviceroot());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCameraSubscriptionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCameraSubscriptionInput::CopyFrom(const AddCameraSubscriptionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCameraSubscriptionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddCameraSubscriptionInput::Swap(AddCameraSubscriptionInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(deviceroot_, other->deviceroot_);
    std::swap(filter_, other->filter_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCameraSubscriptionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCameraSubscriptionInput_descriptor_;
  metadata.reflection = AddCameraSubscriptionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCameraSubscriptionOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AddCameraSubscriptionOutput::AddCameraSubscriptionOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCameraSubscriptionOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddCameraSubscriptionOutput::AddCameraSubscriptionOutput(const AddCameraSubscriptionOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCameraSubscriptionOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCameraSubscriptionOutput::~AddCameraSubscriptionOutput() {
  SharedDtor();
}

void AddCameraSubscriptionOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddCameraSubscriptionOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCameraSubscriptionOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCameraSubscriptionOutput_descriptor_;
}

const AddCameraSubscriptionOutput& AddCameraSubscriptionOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddCameraSubscriptionOutput* AddCameraSubscriptionOutput::default_instance_ = NULL;

AddCameraSubscriptionOutput* AddCameraSubscriptionOutput::New() const {
  return new AddCameraSubscriptionOutput;
}

void AddCameraSubscriptionOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCameraSubscriptionOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCameraSubscriptionOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCameraSubscriptionOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCameraSubscriptionOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCameraSubscriptionOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCameraSubscriptionOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCameraSubscriptionOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCameraSubscriptionOutput::MergeFrom(const AddCameraSubscriptionOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCameraSubscriptionOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCameraSubscriptionOutput::CopyFrom(const AddCameraSubscriptionOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCameraSubscriptionOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddCameraSubscriptionOutput::Swap(AddCameraSubscriptionOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCameraSubscriptionOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCameraSubscriptionOutput_descriptor_;
  metadata.reflection = AddCameraSubscriptionOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDatasetSubscriptionInput::kSessionFieldNumber;
const int AddDatasetSubscriptionInput::kUserIdFieldNumber;
const int AddDatasetSubscriptionInput::kDeviceIdFieldNumber;
const int AddDatasetSubscriptionInput::kDatasetIdFieldNumber;
const int AddDatasetSubscriptionInput::kDatasetTypeFieldNumber;
const int AddDatasetSubscriptionInput::kRoleFieldNumber;
const int AddDatasetSubscriptionInput::kDeviceRootFieldNumber;
const int AddDatasetSubscriptionInput::kFilterFieldNumber;
const int AddDatasetSubscriptionInput::kMaxSizeFieldNumber;
const int AddDatasetSubscriptionInput::kMaxFilesFieldNumber;
const int AddDatasetSubscriptionInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddDatasetSubscriptionInput::AddDatasetSubscriptionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDatasetSubscriptionInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddDatasetSubscriptionInput::AddDatasetSubscriptionInput(const AddDatasetSubscriptionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDatasetSubscriptionInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  datasettype_ = 1;
  role_ = 0;
  deviceroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxsize_ = GOOGLE_ULONGLONG(0);
  maxfiles_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDatasetSubscriptionInput::~AddDatasetSubscriptionInput() {
  SharedDtor();
}

void AddDatasetSubscriptionInput::SharedDtor() {
  if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceroot_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddDatasetSubscriptionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDatasetSubscriptionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDatasetSubscriptionInput_descriptor_;
}

const AddDatasetSubscriptionInput& AddDatasetSubscriptionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddDatasetSubscriptionInput* AddDatasetSubscriptionInput::default_instance_ = NULL;

AddDatasetSubscriptionInput* AddDatasetSubscriptionInput::New() const {
  return new AddDatasetSubscriptionInput;
}

void AddDatasetSubscriptionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    datasettype_ = 1;
    role_ = 0;
    if (has_deviceroot()) {
      if (deviceroot_ != &::google::protobuf::internal::kEmptyString) {
        deviceroot_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxsize_ = GOOGLE_ULONGLONG(0);
    maxfiles_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDatasetSubscriptionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_datasetType;
        break;
      }
      
      // optional .vplex.vsDirectory.DatasetType datasetType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettype(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role;
        break;
      }
      
      // optional .vplex.vsDirectory.SubscriptionRole role = 6 [default = GENERAL];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::SubscriptionRole_IsValid(value)) {
            set_role(static_cast< vplex::vsDirectory::SubscriptionRole >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_deviceRoot;
        break;
      }
      
      // optional string deviceRoot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceRoot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceroot().data(), this->deviceroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_filter;
        break;
      }
      
      // optional string filter = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_maxSize;
        break;
      }
      
      // optional fixed64 maxSize = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxsize_)));
          set_has_maxsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_maxFiles;
        break;
      }
      
      // optional fixed64 maxFiles = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxfiles_)));
          set_has_maxfiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_version;
        break;
      }
      
      // optional string version = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDatasetSubscriptionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datasetid(), output);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 5;
  if (has_datasettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->datasettype(), output);
  }
  
  // optional .vplex.vsDirectory.SubscriptionRole role = 6 [default = GENERAL];
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->role(), output);
  }
  
  // optional string deviceRoot = 7;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->deviceroot(), output);
  }
  
  // optional string filter = 8;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->filter(), output);
  }
  
  // optional fixed64 maxSize = 9;
  if (has_maxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->maxsize(), output);
  }
  
  // optional fixed64 maxFiles = 10;
  if (has_maxfiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->maxfiles(), output);
  }
  
  // optional string version = 11;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDatasetSubscriptionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datasetid(), target);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 5;
  if (has_datasettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->datasettype(), target);
  }
  
  // optional .vplex.vsDirectory.SubscriptionRole role = 6 [default = GENERAL];
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->role(), target);
  }
  
  // optional string deviceRoot = 7;
  if (has_deviceroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceroot().data(), this->deviceroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->deviceroot(), target);
  }
  
  // optional string filter = 8;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->filter(), target);
  }
  
  // optional fixed64 maxSize = 9;
  if (has_maxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->maxsize(), target);
  }
  
  // optional fixed64 maxFiles = 10;
  if (has_maxfiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->maxfiles(), target);
  }
  
  // optional string version = 11;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDatasetSubscriptionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 4;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional .vplex.vsDirectory.DatasetType datasetType = 5;
    if (has_datasettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettype());
    }
    
    // optional .vplex.vsDirectory.SubscriptionRole role = 6 [default = GENERAL];
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->role());
    }
    
    // optional string deviceRoot = 7;
    if (has_deviceroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceroot());
    }
    
    // optional string filter = 8;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 maxSize = 9;
    if (has_maxsize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 maxFiles = 10;
    if (has_maxfiles()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 11;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDatasetSubscriptionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDatasetSubscriptionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDatasetSubscriptionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDatasetSubscriptionInput::MergeFrom(const AddDatasetSubscriptionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_datasettype()) {
      set_datasettype(from.datasettype());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_deviceroot()) {
      set_deviceroot(from.deviceroot());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxsize()) {
      set_maxsize(from.maxsize());
    }
    if (from.has_maxfiles()) {
      set_maxfiles(from.maxfiles());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDatasetSubscriptionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatasetSubscriptionInput::CopyFrom(const AddDatasetSubscriptionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatasetSubscriptionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddDatasetSubscriptionInput::Swap(AddDatasetSubscriptionInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(datasettype_, other->datasettype_);
    std::swap(role_, other->role_);
    std::swap(deviceroot_, other->deviceroot_);
    std::swap(filter_, other->filter_);
    std::swap(maxsize_, other->maxsize_);
    std::swap(maxfiles_, other->maxfiles_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDatasetSubscriptionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDatasetSubscriptionInput_descriptor_;
  metadata.reflection = AddDatasetSubscriptionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDatasetSubscriptionOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AddDatasetSubscriptionOutput::AddDatasetSubscriptionOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDatasetSubscriptionOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddDatasetSubscriptionOutput::AddDatasetSubscriptionOutput(const AddDatasetSubscriptionOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDatasetSubscriptionOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDatasetSubscriptionOutput::~AddDatasetSubscriptionOutput() {
  SharedDtor();
}

void AddDatasetSubscriptionOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddDatasetSubscriptionOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDatasetSubscriptionOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDatasetSubscriptionOutput_descriptor_;
}

const AddDatasetSubscriptionOutput& AddDatasetSubscriptionOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddDatasetSubscriptionOutput* AddDatasetSubscriptionOutput::default_instance_ = NULL;

AddDatasetSubscriptionOutput* AddDatasetSubscriptionOutput::New() const {
  return new AddDatasetSubscriptionOutput;
}

void AddDatasetSubscriptionOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDatasetSubscriptionOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDatasetSubscriptionOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDatasetSubscriptionOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDatasetSubscriptionOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDatasetSubscriptionOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDatasetSubscriptionOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDatasetSubscriptionOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDatasetSubscriptionOutput::MergeFrom(const AddDatasetSubscriptionOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDatasetSubscriptionOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatasetSubscriptionOutput::CopyFrom(const AddDatasetSubscriptionOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatasetSubscriptionOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddDatasetSubscriptionOutput::Swap(AddDatasetSubscriptionOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDatasetSubscriptionOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDatasetSubscriptionOutput_descriptor_;
  metadata.reflection = AddDatasetSubscriptionOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSubscriptionsInput::kSessionFieldNumber;
const int DeleteSubscriptionsInput::kUserIdFieldNumber;
const int DeleteSubscriptionsInput::kDeviceIdFieldNumber;
const int DeleteSubscriptionsInput::kDatasetNamesFieldNumber;
const int DeleteSubscriptionsInput::kDatasetIdsFieldNumber;
const int DeleteSubscriptionsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

DeleteSubscriptionsInput::DeleteSubscriptionsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSubscriptionsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

DeleteSubscriptionsInput::DeleteSubscriptionsInput(const DeleteSubscriptionsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSubscriptionsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSubscriptionsInput::~DeleteSubscriptionsInput() {
  SharedDtor();
}

void DeleteSubscriptionsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void DeleteSubscriptionsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSubscriptionsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSubscriptionsInput_descriptor_;
}

const DeleteSubscriptionsInput& DeleteSubscriptionsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeleteSubscriptionsInput* DeleteSubscriptionsInput::default_instance_ = NULL;

DeleteSubscriptionsInput* DeleteSubscriptionsInput::New() const {
  return new DeleteSubscriptionsInput;
}

void DeleteSubscriptionsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  datasetnames_.Clear();
  datasetids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSubscriptionsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_datasetNames;
        break;
      }
      
      // repeated string datasetNames = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_datasetnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetnames(0).data(), this->datasetnames(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_datasetNames;
        if (input->ExpectTag(41)) goto parse_datasetIds;
        break;
      }
      
      // repeated fixed64 datasetIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41, input, this->mutable_datasetids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_datasetids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_datasetIds;
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSubscriptionsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // repeated string datasetNames = 4;
  for (int i = 0; i < this->datasetnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->datasetnames(i).data(), this->datasetnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->datasetnames(i), output);
  }
  
  // repeated fixed64 datasetIds = 5;
  for (int i = 0; i < this->datasetids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->datasetids(i), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSubscriptionsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // repeated string datasetNames = 4;
  for (int i = 0; i < this->datasetnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetnames(i).data(), this->datasetnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->datasetnames(i), target);
  }
  
  // repeated fixed64 datasetIds = 5;
  for (int i = 0; i < this->datasetids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(5, this->datasetids(i), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSubscriptionsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated string datasetNames = 4;
  total_size += 1 * this->datasetnames_size();
  for (int i = 0; i < this->datasetnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->datasetnames(i));
  }
  
  // repeated fixed64 datasetIds = 5;
  {
    int data_size = 0;
    data_size = 8 * this->datasetids_size();
    total_size += 1 * this->datasetids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSubscriptionsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSubscriptionsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSubscriptionsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSubscriptionsInput::MergeFrom(const DeleteSubscriptionsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasetnames_.MergeFrom(from.datasetnames_);
  datasetids_.MergeFrom(from.datasetids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSubscriptionsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubscriptionsInput::CopyFrom(const DeleteSubscriptionsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void DeleteSubscriptionsInput::Swap(DeleteSubscriptionsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    datasetnames_.Swap(&other->datasetnames_);
    datasetids_.Swap(&other->datasetids_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSubscriptionsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSubscriptionsInput_descriptor_;
  metadata.reflection = DeleteSubscriptionsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSubscriptionsOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

DeleteSubscriptionsOutput::DeleteSubscriptionsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSubscriptionsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

DeleteSubscriptionsOutput::DeleteSubscriptionsOutput(const DeleteSubscriptionsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSubscriptionsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSubscriptionsOutput::~DeleteSubscriptionsOutput() {
  SharedDtor();
}

void DeleteSubscriptionsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void DeleteSubscriptionsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSubscriptionsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSubscriptionsOutput_descriptor_;
}

const DeleteSubscriptionsOutput& DeleteSubscriptionsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeleteSubscriptionsOutput* DeleteSubscriptionsOutput::default_instance_ = NULL;

DeleteSubscriptionsOutput* DeleteSubscriptionsOutput::New() const {
  return new DeleteSubscriptionsOutput;
}

void DeleteSubscriptionsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSubscriptionsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSubscriptionsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSubscriptionsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSubscriptionsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSubscriptionsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSubscriptionsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSubscriptionsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSubscriptionsOutput::MergeFrom(const DeleteSubscriptionsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSubscriptionsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubscriptionsOutput::CopyFrom(const DeleteSubscriptionsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DeleteSubscriptionsOutput::Swap(DeleteSubscriptionsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSubscriptionsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSubscriptionsOutput_descriptor_;
  metadata.reflection = DeleteSubscriptionsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSubscriptionFilterInput::kSessionFieldNumber;
const int UpdateSubscriptionFilterInput::kUserIdFieldNumber;
const int UpdateSubscriptionFilterInput::kDeviceIdFieldNumber;
const int UpdateSubscriptionFilterInput::kDatasetNameFieldNumber;
const int UpdateSubscriptionFilterInput::kDatasetIdFieldNumber;
const int UpdateSubscriptionFilterInput::kFilterFieldNumber;
const int UpdateSubscriptionFilterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UpdateSubscriptionFilterInput::UpdateSubscriptionFilterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSubscriptionFilterInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UpdateSubscriptionFilterInput::UpdateSubscriptionFilterInput(const UpdateSubscriptionFilterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSubscriptionFilterInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasetid_ = GOOGLE_ULONGLONG(0);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSubscriptionFilterInput::~UpdateSubscriptionFilterInput() {
  SharedDtor();
}

void UpdateSubscriptionFilterInput::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UpdateSubscriptionFilterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSubscriptionFilterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSubscriptionFilterInput_descriptor_;
}

const UpdateSubscriptionFilterInput& UpdateSubscriptionFilterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateSubscriptionFilterInput* UpdateSubscriptionFilterInput::default_instance_ = NULL;

UpdateSubscriptionFilterInput* UpdateSubscriptionFilterInput::New() const {
  return new UpdateSubscriptionFilterInput;
}

void UpdateSubscriptionFilterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSubscriptionFilterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_datasetName;
        break;
      }
      
      // optional string datasetName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_datasetId;
        break;
      }
      
      // optional fixed64 datasetId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }
      
      // optional string filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSubscriptionFilterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->datasetname(), output);
  }
  
  // optional fixed64 datasetId = 5;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->datasetid(), output);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filter(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSubscriptionFilterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datasetname(), target);
  }
  
  // optional fixed64 datasetId = 5;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->datasetid(), target);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSubscriptionFilterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string datasetName = 4;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // optional fixed64 datasetId = 5;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSubscriptionFilterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSubscriptionFilterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSubscriptionFilterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSubscriptionFilterInput::MergeFrom(const UpdateSubscriptionFilterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSubscriptionFilterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionFilterInput::CopyFrom(const UpdateSubscriptionFilterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionFilterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void UpdateSubscriptionFilterInput::Swap(UpdateSubscriptionFilterInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(filter_, other->filter_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSubscriptionFilterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSubscriptionFilterInput_descriptor_;
  metadata.reflection = UpdateSubscriptionFilterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSubscriptionFilterOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateSubscriptionFilterOutput::UpdateSubscriptionFilterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSubscriptionFilterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateSubscriptionFilterOutput::UpdateSubscriptionFilterOutput(const UpdateSubscriptionFilterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSubscriptionFilterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSubscriptionFilterOutput::~UpdateSubscriptionFilterOutput() {
  SharedDtor();
}

void UpdateSubscriptionFilterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateSubscriptionFilterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSubscriptionFilterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSubscriptionFilterOutput_descriptor_;
}

const UpdateSubscriptionFilterOutput& UpdateSubscriptionFilterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateSubscriptionFilterOutput* UpdateSubscriptionFilterOutput::default_instance_ = NULL;

UpdateSubscriptionFilterOutput* UpdateSubscriptionFilterOutput::New() const {
  return new UpdateSubscriptionFilterOutput;
}

void UpdateSubscriptionFilterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSubscriptionFilterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSubscriptionFilterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSubscriptionFilterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSubscriptionFilterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSubscriptionFilterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSubscriptionFilterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSubscriptionFilterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSubscriptionFilterOutput::MergeFrom(const UpdateSubscriptionFilterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSubscriptionFilterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionFilterOutput::CopyFrom(const UpdateSubscriptionFilterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionFilterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateSubscriptionFilterOutput::Swap(UpdateSubscriptionFilterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSubscriptionFilterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSubscriptionFilterOutput_descriptor_;
  metadata.reflection = UpdateSubscriptionFilterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSubscriptionLimitsInput::kSessionFieldNumber;
const int UpdateSubscriptionLimitsInput::kUserIdFieldNumber;
const int UpdateSubscriptionLimitsInput::kDeviceIdFieldNumber;
const int UpdateSubscriptionLimitsInput::kDatasetNameFieldNumber;
const int UpdateSubscriptionLimitsInput::kDatasetIdFieldNumber;
const int UpdateSubscriptionLimitsInput::kFilterFieldNumber;
const int UpdateSubscriptionLimitsInput::kMaxSizeFieldNumber;
const int UpdateSubscriptionLimitsInput::kMaxFilesFieldNumber;
const int UpdateSubscriptionLimitsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UpdateSubscriptionLimitsInput::UpdateSubscriptionLimitsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSubscriptionLimitsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UpdateSubscriptionLimitsInput::UpdateSubscriptionLimitsInput(const UpdateSubscriptionLimitsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSubscriptionLimitsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  datasetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasetid_ = GOOGLE_ULONGLONG(0);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxsize_ = GOOGLE_ULONGLONG(0);
  maxfiles_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSubscriptionLimitsInput::~UpdateSubscriptionLimitsInput() {
  SharedDtor();
}

void UpdateSubscriptionLimitsInput::SharedDtor() {
  if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
    delete datasetname_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UpdateSubscriptionLimitsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSubscriptionLimitsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSubscriptionLimitsInput_descriptor_;
}

const UpdateSubscriptionLimitsInput& UpdateSubscriptionLimitsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateSubscriptionLimitsInput* UpdateSubscriptionLimitsInput::default_instance_ = NULL;

UpdateSubscriptionLimitsInput* UpdateSubscriptionLimitsInput::New() const {
  return new UpdateSubscriptionLimitsInput;
}

void UpdateSubscriptionLimitsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_datasetname()) {
      if (datasetname_ != &::google::protobuf::internal::kEmptyString) {
        datasetname_->clear();
      }
    }
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    maxsize_ = GOOGLE_ULONGLONG(0);
    maxfiles_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSubscriptionLimitsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_datasetName;
        break;
      }
      
      // optional string datasetName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datasetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datasetname().data(), this->datasetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_datasetId;
        break;
      }
      
      // optional fixed64 datasetId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }
      
      // optional string filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_maxSize;
        break;
      }
      
      // optional fixed64 maxSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxsize_)));
          set_has_maxsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_maxFiles;
        break;
      }
      
      // optional fixed64 maxFiles = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxFiles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &maxfiles_)));
          set_has_maxfiles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }
      
      // optional string version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSubscriptionLimitsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->datasetname(), output);
  }
  
  // optional fixed64 datasetId = 5;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->datasetid(), output);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filter(), output);
  }
  
  // optional fixed64 maxSize = 7;
  if (has_maxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->maxsize(), output);
  }
  
  // optional fixed64 maxFiles = 8;
  if (has_maxfiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->maxfiles(), output);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSubscriptionLimitsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string datasetName = 4;
  if (has_datasetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datasetname().data(), this->datasetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->datasetname(), target);
  }
  
  // optional fixed64 datasetId = 5;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->datasetid(), target);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }
  
  // optional fixed64 maxSize = 7;
  if (has_maxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->maxsize(), target);
  }
  
  // optional fixed64 maxFiles = 8;
  if (has_maxfiles()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->maxfiles(), target);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSubscriptionLimitsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string datasetName = 4;
    if (has_datasetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datasetname());
    }
    
    // optional fixed64 datasetId = 5;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // optional fixed64 maxSize = 7;
    if (has_maxsize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 maxFiles = 8;
    if (has_maxfiles()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSubscriptionLimitsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSubscriptionLimitsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSubscriptionLimitsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSubscriptionLimitsInput::MergeFrom(const UpdateSubscriptionLimitsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_datasetname()) {
      set_datasetname(from.datasetname());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_maxsize()) {
      set_maxsize(from.maxsize());
    }
    if (from.has_maxfiles()) {
      set_maxfiles(from.maxfiles());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSubscriptionLimitsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionLimitsInput::CopyFrom(const UpdateSubscriptionLimitsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionLimitsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void UpdateSubscriptionLimitsInput::Swap(UpdateSubscriptionLimitsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(datasetname_, other->datasetname_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(filter_, other->filter_);
    std::swap(maxsize_, other->maxsize_);
    std::swap(maxfiles_, other->maxfiles_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSubscriptionLimitsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSubscriptionLimitsInput_descriptor_;
  metadata.reflection = UpdateSubscriptionLimitsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSubscriptionLimitsOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateSubscriptionLimitsOutput::UpdateSubscriptionLimitsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSubscriptionLimitsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateSubscriptionLimitsOutput::UpdateSubscriptionLimitsOutput(const UpdateSubscriptionLimitsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSubscriptionLimitsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSubscriptionLimitsOutput::~UpdateSubscriptionLimitsOutput() {
  SharedDtor();
}

void UpdateSubscriptionLimitsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateSubscriptionLimitsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSubscriptionLimitsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSubscriptionLimitsOutput_descriptor_;
}

const UpdateSubscriptionLimitsOutput& UpdateSubscriptionLimitsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateSubscriptionLimitsOutput* UpdateSubscriptionLimitsOutput::default_instance_ = NULL;

UpdateSubscriptionLimitsOutput* UpdateSubscriptionLimitsOutput::New() const {
  return new UpdateSubscriptionLimitsOutput;
}

void UpdateSubscriptionLimitsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSubscriptionLimitsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSubscriptionLimitsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSubscriptionLimitsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSubscriptionLimitsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSubscriptionLimitsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSubscriptionLimitsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSubscriptionLimitsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSubscriptionLimitsOutput::MergeFrom(const UpdateSubscriptionLimitsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSubscriptionLimitsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionLimitsOutput::CopyFrom(const UpdateSubscriptionLimitsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionLimitsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateSubscriptionLimitsOutput::Swap(UpdateSubscriptionLimitsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSubscriptionLimitsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSubscriptionLimitsOutput_descriptor_;
  metadata.reflection = UpdateSubscriptionLimitsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriptionDetailsForDeviceInput::kSessionFieldNumber;
const int GetSubscriptionDetailsForDeviceInput::kUserIdFieldNumber;
const int GetSubscriptionDetailsForDeviceInput::kDeviceIdFieldNumber;
const int GetSubscriptionDetailsForDeviceInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetSubscriptionDetailsForDeviceInput::GetSubscriptionDetailsForDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSubscriptionDetailsForDeviceInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetSubscriptionDetailsForDeviceInput::GetSubscriptionDetailsForDeviceInput(const GetSubscriptionDetailsForDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscriptionDetailsForDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriptionDetailsForDeviceInput::~GetSubscriptionDetailsForDeviceInput() {
  SharedDtor();
}

void GetSubscriptionDetailsForDeviceInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetSubscriptionDetailsForDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriptionDetailsForDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionDetailsForDeviceInput_descriptor_;
}

const GetSubscriptionDetailsForDeviceInput& GetSubscriptionDetailsForDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSubscriptionDetailsForDeviceInput* GetSubscriptionDetailsForDeviceInput::default_instance_ = NULL;

GetSubscriptionDetailsForDeviceInput* GetSubscriptionDetailsForDeviceInput::New() const {
  return new GetSubscriptionDetailsForDeviceInput;
}

void GetSubscriptionDetailsForDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriptionDetailsForDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscriptionDetailsForDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSubscriptionDetailsForDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscriptionDetailsForDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionDetailsForDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriptionDetailsForDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscriptionDetailsForDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriptionDetailsForDeviceInput::MergeFrom(const GetSubscriptionDetailsForDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriptionDetailsForDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionDetailsForDeviceInput::CopyFrom(const GetSubscriptionDetailsForDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionDetailsForDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetSubscriptionDetailsForDeviceInput::Swap(GetSubscriptionDetailsForDeviceInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscriptionDetailsForDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionDetailsForDeviceInput_descriptor_;
  metadata.reflection = GetSubscriptionDetailsForDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriptionDetailsForDeviceOutput::kErrorFieldNumber;
const int GetSubscriptionDetailsForDeviceOutput::kSubscriptionsFieldNumber;
#endif  // !_MSC_VER

GetSubscriptionDetailsForDeviceOutput::GetSubscriptionDetailsForDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSubscriptionDetailsForDeviceOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetSubscriptionDetailsForDeviceOutput::GetSubscriptionDetailsForDeviceOutput(const GetSubscriptionDetailsForDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscriptionDetailsForDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriptionDetailsForDeviceOutput::~GetSubscriptionDetailsForDeviceOutput() {
  SharedDtor();
}

void GetSubscriptionDetailsForDeviceOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetSubscriptionDetailsForDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriptionDetailsForDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionDetailsForDeviceOutput_descriptor_;
}

const GetSubscriptionDetailsForDeviceOutput& GetSubscriptionDetailsForDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSubscriptionDetailsForDeviceOutput* GetSubscriptionDetailsForDeviceOutput::default_instance_ = NULL;

GetSubscriptionDetailsForDeviceOutput* GetSubscriptionDetailsForDeviceOutput::New() const {
  return new GetSubscriptionDetailsForDeviceOutput;
}

void GetSubscriptionDetailsForDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriptionDetailsForDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        break;
      }
      
      // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscriptionDetailsForDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subscriptions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSubscriptionDetailsForDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subscriptions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscriptionDetailsForDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionDetailsForDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriptionDetailsForDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscriptionDetailsForDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriptionDetailsForDeviceOutput::MergeFrom(const GetSubscriptionDetailsForDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriptionDetailsForDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionDetailsForDeviceOutput::CopyFrom(const GetSubscriptionDetailsForDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionDetailsForDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetSubscriptionDetailsForDeviceOutput::Swap(GetSubscriptionDetailsForDeviceOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscriptionDetailsForDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionDetailsForDeviceOutput_descriptor_;
  metadata.reflection = GetSubscriptionDetailsForDeviceOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCloudInfoInput::kSessionFieldNumber;
const int GetCloudInfoInput::kUserIdFieldNumber;
const int GetCloudInfoInput::kDeviceIdFieldNumber;
const int GetCloudInfoInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetCloudInfoInput::GetCloudInfoInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCloudInfoInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetCloudInfoInput::GetCloudInfoInput(const GetCloudInfoInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCloudInfoInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCloudInfoInput::~GetCloudInfoInput() {
  SharedDtor();
}

void GetCloudInfoInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetCloudInfoInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCloudInfoInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCloudInfoInput_descriptor_;
}

const GetCloudInfoInput& GetCloudInfoInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetCloudInfoInput* GetCloudInfoInput::default_instance_ = NULL;

GetCloudInfoInput* GetCloudInfoInput::New() const {
  return new GetCloudInfoInput;
}

void GetCloudInfoInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCloudInfoInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCloudInfoInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCloudInfoInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCloudInfoInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCloudInfoInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCloudInfoInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCloudInfoInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCloudInfoInput::MergeFrom(const GetCloudInfoInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCloudInfoInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCloudInfoInput::CopyFrom(const GetCloudInfoInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCloudInfoInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetCloudInfoInput::Swap(GetCloudInfoInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCloudInfoInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCloudInfoInput_descriptor_;
  metadata.reflection = GetCloudInfoInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCloudInfoOutput::kErrorFieldNumber;
const int GetCloudInfoOutput::kDevicesFieldNumber;
const int GetCloudInfoOutput::kDatasetsFieldNumber;
const int GetCloudInfoOutput::kSubscriptionsFieldNumber;
const int GetCloudInfoOutput::kStorageAssignmentsFieldNumber;
#endif  // !_MSC_VER

GetCloudInfoOutput::GetCloudInfoOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCloudInfoOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetCloudInfoOutput::GetCloudInfoOutput(const GetCloudInfoOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCloudInfoOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCloudInfoOutput::~GetCloudInfoOutput() {
  SharedDtor();
}

void GetCloudInfoOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetCloudInfoOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCloudInfoOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCloudInfoOutput_descriptor_;
}

const GetCloudInfoOutput& GetCloudInfoOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetCloudInfoOutput* GetCloudInfoOutput::default_instance_ = NULL;

GetCloudInfoOutput* GetCloudInfoOutput::New() const {
  return new GetCloudInfoOutput;
}

void GetCloudInfoOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  devices_.Clear();
  datasets_.Clear();
  subscriptions_.Clear();
  storageassignments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCloudInfoOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        break;
      }
      
      // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        if (input->ExpectTag(26)) goto parse_datasets;
        break;
      }
      
      // repeated .vplex.vsDirectory.DatasetDetail datasets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasets;
        if (input->ExpectTag(34)) goto parse_subscriptions;
        break;
      }
      
      // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subscriptions;
        if (input->ExpectTag(42)) goto parse_storageAssignments;
        break;
      }
      
      // repeated .vplex.vsDirectory.UserStorage storageAssignments = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageAssignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storageassignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storageAssignments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCloudInfoOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devices(i), output);
  }
  
  // repeated .vplex.vsDirectory.DatasetDetail datasets = 3;
  for (int i = 0; i < this->datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datasets(i), output);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subscriptions(i), output);
  }
  
  // repeated .vplex.vsDirectory.UserStorage storageAssignments = 5;
  for (int i = 0; i < this->storageassignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->storageassignments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCloudInfoOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devices(i), target);
  }
  
  // repeated .vplex.vsDirectory.DatasetDetail datasets = 3;
  for (int i = 0; i < this->datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datasets(i), target);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subscriptions(i), target);
  }
  
  // repeated .vplex.vsDirectory.UserStorage storageAssignments = 5;
  for (int i = 0; i < this->storageassignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->storageassignments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCloudInfoOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }
  
  // repeated .vplex.vsDirectory.DatasetDetail datasets = 3;
  total_size += 1 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 4;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  // repeated .vplex.vsDirectory.UserStorage storageAssignments = 5;
  total_size += 1 * this->storageassignments_size();
  for (int i = 0; i < this->storageassignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storageassignments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCloudInfoOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCloudInfoOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCloudInfoOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCloudInfoOutput::MergeFrom(const GetCloudInfoOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  datasets_.MergeFrom(from.datasets_);
  subscriptions_.MergeFrom(from.subscriptions_);
  storageassignments_.MergeFrom(from.storageassignments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCloudInfoOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCloudInfoOutput::CopyFrom(const GetCloudInfoOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCloudInfoOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < devices_size(); i++) {
    if (!this->devices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < datasets_size(); i++) {
    if (!this->datasets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < storageassignments_size(); i++) {
    if (!this->storageassignments(i).IsInitialized()) return false;
  }
  return true;
}

void GetCloudInfoOutput::Swap(GetCloudInfoOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    devices_.Swap(&other->devices_);
    datasets_.Swap(&other->datasets_);
    subscriptions_.Swap(&other->subscriptions_);
    storageassignments_.Swap(&other->storageassignments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCloudInfoOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCloudInfoOutput_descriptor_;
  metadata.reflection = GetCloudInfoOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscribedDatasetsInput::kSessionFieldNumber;
const int GetSubscribedDatasetsInput::kDeviceIdFieldNumber;
const int GetSubscribedDatasetsInput::kL10NFieldNumber;
const int GetSubscribedDatasetsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetSubscribedDatasetsInput::GetSubscribedDatasetsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSubscribedDatasetsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
  l10n_ = const_cast< ::vplex::vsDirectory::Localization*>(&::vplex::vsDirectory::Localization::default_instance());
}

GetSubscribedDatasetsInput::GetSubscribedDatasetsInput(const GetSubscribedDatasetsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscribedDatasetsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  deviceid_ = GOOGLE_ULONGLONG(0);
  l10n_ = NULL;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscribedDatasetsInput::~GetSubscribedDatasetsInput() {
  SharedDtor();
}

void GetSubscribedDatasetsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
    delete l10n_;
  }
}

void GetSubscribedDatasetsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscribedDatasetsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscribedDatasetsInput_descriptor_;
}

const GetSubscribedDatasetsInput& GetSubscribedDatasetsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSubscribedDatasetsInput* GetSubscribedDatasetsInput::default_instance_ = NULL;

GetSubscribedDatasetsInput* GetSubscribedDatasetsInput::New() const {
  return new GetSubscribedDatasetsInput;
}

void GetSubscribedDatasetsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_l10n()) {
      if (l10n_ != NULL) l10n_->::vplex::vsDirectory::Localization::Clear();
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscribedDatasetsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_l10n;
        break;
      }
      
      // required .vplex.vsDirectory.Localization l10n = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_l10n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_l10n()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscribedDatasetsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->deviceid(), output);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 3;
  if (has_l10n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->l10n(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSubscribedDatasetsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->deviceid(), target);
  }
  
  // required .vplex.vsDirectory.Localization l10n = 3;
  if (has_l10n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->l10n(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscribedDatasetsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required .vplex.vsDirectory.Localization l10n = 3;
    if (has_l10n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->l10n());
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscribedDatasetsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscribedDatasetsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscribedDatasetsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscribedDatasetsInput::MergeFrom(const GetSubscribedDatasetsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_l10n()) {
      mutable_l10n()->::vplex::vsDirectory::Localization::MergeFrom(from.l10n());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscribedDatasetsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscribedDatasetsInput::CopyFrom(const GetSubscribedDatasetsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscribedDatasetsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  if (has_l10n()) {
    if (!this->l10n().IsInitialized()) return false;
  }
  return true;
}

void GetSubscribedDatasetsInput::Swap(GetSubscribedDatasetsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(l10n_, other->l10n_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscribedDatasetsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscribedDatasetsInput_descriptor_;
  metadata.reflection = GetSubscribedDatasetsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscribedDatasetsOutput::kErrorFieldNumber;
const int GetSubscribedDatasetsOutput::kTitleDataFieldNumber;
const int GetSubscribedDatasetsOutput::kDatasetDataFieldNumber;
#endif  // !_MSC_VER

GetSubscribedDatasetsOutput::GetSubscribedDatasetsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSubscribedDatasetsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetSubscribedDatasetsOutput::GetSubscribedDatasetsOutput(const GetSubscribedDatasetsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscribedDatasetsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscribedDatasetsOutput::~GetSubscribedDatasetsOutput() {
  SharedDtor();
}

void GetSubscribedDatasetsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetSubscribedDatasetsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscribedDatasetsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscribedDatasetsOutput_descriptor_;
}

const GetSubscribedDatasetsOutput& GetSubscribedDatasetsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSubscribedDatasetsOutput* GetSubscribedDatasetsOutput::default_instance_ = NULL;

GetSubscribedDatasetsOutput* GetSubscribedDatasetsOutput::New() const {
  return new GetSubscribedDatasetsOutput;
}

void GetSubscribedDatasetsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  titledata_.Clear();
  datasetdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscribedDatasetsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleData;
        break;
      }
      
      // repeated .vplex.vsDirectory.TitleData titleData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titleData;
        if (input->ExpectTag(26)) goto parse_datasetData;
        break;
      }
      
      // repeated .vplex.vsDirectory.DatasetData datasetData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasetdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_datasetData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscribedDatasetsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  for (int i = 0; i < this->titledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->titledata(i), output);
  }
  
  // repeated .vplex.vsDirectory.DatasetData datasetData = 3;
  for (int i = 0; i < this->datasetdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datasetdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSubscribedDatasetsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  for (int i = 0; i < this->titledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->titledata(i), target);
  }
  
  // repeated .vplex.vsDirectory.DatasetData datasetData = 3;
  for (int i = 0; i < this->datasetdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datasetdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscribedDatasetsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.TitleData titleData = 2;
  total_size += 1 * this->titledata_size();
  for (int i = 0; i < this->titledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titledata(i));
  }
  
  // repeated .vplex.vsDirectory.DatasetData datasetData = 3;
  total_size += 1 * this->datasetdata_size();
  for (int i = 0; i < this->datasetdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasetdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscribedDatasetsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscribedDatasetsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscribedDatasetsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscribedDatasetsOutput::MergeFrom(const GetSubscribedDatasetsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  titledata_.MergeFrom(from.titledata_);
  datasetdata_.MergeFrom(from.datasetdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscribedDatasetsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscribedDatasetsOutput::CopyFrom(const GetSubscribedDatasetsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscribedDatasetsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < titledata_size(); i++) {
    if (!this->titledata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < datasetdata_size(); i++) {
    if (!this->datasetdata(i).IsInitialized()) return false;
  }
  return true;
}

void GetSubscribedDatasetsOutput::Swap(GetSubscribedDatasetsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    titledata_.Swap(&other->titledata_);
    datasetdata_.Swap(&other->datasetdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscribedDatasetsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscribedDatasetsOutput_descriptor_;
  metadata.reflection = GetSubscribedDatasetsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriptionDetailsInput::kSessionFieldNumber;
const int GetSubscriptionDetailsInput::kUserIdFieldNumber;
const int GetSubscriptionDetailsInput::kDeviceIdFieldNumber;
const int GetSubscriptionDetailsInput::kDatasetIdsFieldNumber;
const int GetSubscriptionDetailsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetSubscriptionDetailsInput::GetSubscriptionDetailsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSubscriptionDetailsInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetSubscriptionDetailsInput::GetSubscriptionDetailsInput(const GetSubscriptionDetailsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscriptionDetailsInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriptionDetailsInput::~GetSubscriptionDetailsInput() {
  SharedDtor();
}

void GetSubscriptionDetailsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetSubscriptionDetailsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriptionDetailsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionDetailsInput_descriptor_;
}

const GetSubscriptionDetailsInput& GetSubscriptionDetailsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSubscriptionDetailsInput* GetSubscriptionDetailsInput::default_instance_ = NULL;

GetSubscriptionDetailsInput* GetSubscriptionDetailsInput::New() const {
  return new GetSubscriptionDetailsInput;
}

void GetSubscriptionDetailsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  datasetids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriptionDetailsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetIds;
        break;
      }
      
      // repeated fixed64 datasetIds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_datasetids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_datasetids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetIds;
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscriptionDetailsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // repeated fixed64 datasetIds = 4;
  for (int i = 0; i < this->datasetids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->datasetids(i), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSubscriptionDetailsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // repeated fixed64 datasetIds = 4;
  for (int i = 0; i < this->datasetids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->datasetids(i), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscriptionDetailsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated fixed64 datasetIds = 4;
  {
    int data_size = 0;
    data_size = 8 * this->datasetids_size();
    total_size += 1 * this->datasetids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionDetailsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriptionDetailsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscriptionDetailsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriptionDetailsInput::MergeFrom(const GetSubscriptionDetailsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasetids_.MergeFrom(from.datasetids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriptionDetailsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionDetailsInput::CopyFrom(const GetSubscriptionDetailsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionDetailsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetSubscriptionDetailsInput::Swap(GetSubscriptionDetailsInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    datasetids_.Swap(&other->datasetids_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscriptionDetailsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionDetailsInput_descriptor_;
  metadata.reflection = GetSubscriptionDetailsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSubscriptionDetailsOutput::kErrorFieldNumber;
const int GetSubscriptionDetailsOutput::kSubscriptionsFieldNumber;
#endif  // !_MSC_VER

GetSubscriptionDetailsOutput::GetSubscriptionDetailsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSubscriptionDetailsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetSubscriptionDetailsOutput::GetSubscriptionDetailsOutput(const GetSubscriptionDetailsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSubscriptionDetailsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSubscriptionDetailsOutput::~GetSubscriptionDetailsOutput() {
  SharedDtor();
}

void GetSubscriptionDetailsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetSubscriptionDetailsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriptionDetailsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSubscriptionDetailsOutput_descriptor_;
}

const GetSubscriptionDetailsOutput& GetSubscriptionDetailsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetSubscriptionDetailsOutput* GetSubscriptionDetailsOutput::default_instance_ = NULL;

GetSubscriptionDetailsOutput* GetSubscriptionDetailsOutput::New() const {
  return new GetSubscriptionDetailsOutput;
}

void GetSubscriptionDetailsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  subscriptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSubscriptionDetailsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        break;
      }
      
      // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSubscriptionDetailsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subscriptions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSubscriptionDetailsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subscriptions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSubscriptionDetailsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.Subscription subscriptions = 2;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionDetailsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSubscriptionDetailsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSubscriptionDetailsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSubscriptionDetailsOutput::MergeFrom(const GetSubscriptionDetailsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSubscriptionDetailsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionDetailsOutput::CopyFrom(const GetSubscriptionDetailsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionDetailsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetSubscriptionDetailsOutput::Swap(GetSubscriptionDetailsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    subscriptions_.Swap(&other->subscriptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSubscriptionDetailsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSubscriptionDetailsOutput_descriptor_;
  metadata.reflection = GetSubscriptionDetailsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkDeviceInput::kSessionFieldNumber;
const int LinkDeviceInput::kUserIdFieldNumber;
const int LinkDeviceInput::kDeviceIdFieldNumber;
const int LinkDeviceInput::kDeviceClassFieldNumber;
const int LinkDeviceInput::kDeviceNameFieldNumber;
const int LinkDeviceInput::kIsAcerFieldNumber;
const int LinkDeviceInput::kHasCameraFieldNumber;
const int LinkDeviceInput::kOsVersionFieldNumber;
const int LinkDeviceInput::kProtocolVersionFieldNumber;
const int LinkDeviceInput::kVersionFieldNumber;
const int LinkDeviceInput::kModelNumberFieldNumber;
const int LinkDeviceInput::kBuildInfoFieldNumber;
#endif  // !_MSC_VER

LinkDeviceInput::LinkDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkDeviceInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

LinkDeviceInput::LinkDeviceInput(const LinkDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  deviceclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isacer_ = false;
  hascamera_ = false;
  osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocolversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkDeviceInput::~LinkDeviceInput() {
  SharedDtor();
}

void LinkDeviceInput::SharedDtor() {
  if (deviceclass_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceclass_;
  }
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (protocolversion_ != &::google::protobuf::internal::kEmptyString) {
    delete protocolversion_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (modelnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete modelnumber_;
  }
  if (buildinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete buildinfo_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void LinkDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkDeviceInput_descriptor_;
}

const LinkDeviceInput& LinkDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

LinkDeviceInput* LinkDeviceInput::default_instance_ = NULL;

LinkDeviceInput* LinkDeviceInput::New() const {
  return new LinkDeviceInput;
}

void LinkDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_deviceclass()) {
      if (deviceclass_ != &::google::protobuf::internal::kEmptyString) {
        deviceclass_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    isacer_ = false;
    hascamera_ = false;
    if (has_osversion()) {
      if (osversion_ != &::google::protobuf::internal::kEmptyString) {
        osversion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_protocolversion()) {
      if (protocolversion_ != &::google::protobuf::internal::kEmptyString) {
        protocolversion_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_modelnumber()) {
      if (modelnumber_ != &::google::protobuf::internal::kEmptyString) {
        modelnumber_->clear();
      }
    }
    if (has_buildinfo()) {
      if (buildinfo_ != &::google::protobuf::internal::kEmptyString) {
        buildinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceClass;
        break;
      }
      
      // required string deviceClass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceclass().data(), this->deviceclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_deviceName;
        break;
      }
      
      // optional string deviceName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isAcer;
        break;
      }
      
      // optional bool isAcer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAcer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isacer_)));
          set_has_isacer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasCamera;
        break;
      }
      
      // optional bool hasCamera = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasCamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hascamera_)));
          set_has_hascamera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_osVersion;
        break;
      }
      
      // optional string osVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_protocolVersion;
        break;
      }
      
      // optional string protocolVersion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocolVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocolversion().data(), this->protocolversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_version;
        break;
      }
      
      // optional string version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_modelNumber;
        break;
      }
      
      // optional string modelNumber = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelnumber().data(), this->modelnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_buildInfo;
        break;
      }
      
      // optional string buildInfo = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildinfo().data(), this->buildinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required string deviceClass = 4;
  if (has_deviceclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceclass().data(), this->deviceclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deviceclass(), output);
  }
  
  // optional string deviceName = 5;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->devicename(), output);
  }
  
  // optional bool isAcer = 6;
  if (has_isacer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isacer(), output);
  }
  
  // optional bool hasCamera = 7;
  if (has_hascamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hascamera(), output);
  }
  
  // optional string osVersion = 8;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->osversion(), output);
  }
  
  // optional string protocolVersion = 9;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocolversion().data(), this->protocolversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->protocolversion(), output);
  }
  
  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->version(), output);
  }
  
  // optional string modelNumber = 11;
  if (has_modelnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelnumber().data(), this->modelnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->modelnumber(), output);
  }
  
  // optional string buildInfo = 12;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildinfo().data(), this->buildinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->buildinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required string deviceClass = 4;
  if (has_deviceclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceclass().data(), this->deviceclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceclass(), target);
  }
  
  // optional string deviceName = 5;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->devicename(), target);
  }
  
  // optional bool isAcer = 6;
  if (has_isacer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isacer(), target);
  }
  
  // optional bool hasCamera = 7;
  if (has_hascamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hascamera(), target);
  }
  
  // optional string osVersion = 8;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->osversion(), target);
  }
  
  // optional string protocolVersion = 9;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocolversion().data(), this->protocolversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->protocolversion(), target);
  }
  
  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->version(), target);
  }
  
  // optional string modelNumber = 11;
  if (has_modelnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelnumber().data(), this->modelnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->modelnumber(), target);
  }
  
  // optional string buildInfo = 12;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildinfo().data(), this->buildinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->buildinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required string deviceClass = 4;
    if (has_deviceclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceclass());
    }
    
    // optional string deviceName = 5;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // optional bool isAcer = 6;
    if (has_isacer()) {
      total_size += 1 + 1;
    }
    
    // optional bool hasCamera = 7;
    if (has_hascamera()) {
      total_size += 1 + 1;
    }
    
    // optional string osVersion = 8;
    if (has_osversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osversion());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string protocolVersion = 9;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocolversion());
    }
    
    // optional string version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string modelNumber = 11;
    if (has_modelnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelnumber());
    }
    
    // optional string buildInfo = 12;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkDeviceInput::MergeFrom(const LinkDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_deviceclass()) {
      set_deviceclass(from.deviceclass());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_isacer()) {
      set_isacer(from.isacer());
    }
    if (from.has_hascamera()) {
      set_hascamera(from.hascamera());
    }
    if (from.has_osversion()) {
      set_osversion(from.osversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_modelnumber()) {
      set_modelnumber(from.modelnumber());
    }
    if (from.has_buildinfo()) {
      set_buildinfo(from.buildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDeviceInput::CopyFrom(const LinkDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void LinkDeviceInput::Swap(LinkDeviceInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(deviceclass_, other->deviceclass_);
    std::swap(devicename_, other->devicename_);
    std::swap(isacer_, other->isacer_);
    std::swap(hascamera_, other->hascamera_);
    std::swap(osversion_, other->osversion_);
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(version_, other->version_);
    std::swap(modelnumber_, other->modelnumber_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkDeviceInput_descriptor_;
  metadata.reflection = LinkDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkDeviceOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

LinkDeviceOutput::LinkDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkDeviceOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

LinkDeviceOutput::LinkDeviceOutput(const LinkDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkDeviceOutput::~LinkDeviceOutput() {
  SharedDtor();
}

void LinkDeviceOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void LinkDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkDeviceOutput_descriptor_;
}

const LinkDeviceOutput& LinkDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

LinkDeviceOutput* LinkDeviceOutput::default_instance_ = NULL;

LinkDeviceOutput* LinkDeviceOutput::New() const {
  return new LinkDeviceOutput;
}

void LinkDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkDeviceOutput::MergeFrom(const LinkDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDeviceOutput::CopyFrom(const LinkDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void LinkDeviceOutput::Swap(LinkDeviceOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkDeviceOutput_descriptor_;
  metadata.reflection = LinkDeviceOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlinkDeviceInput::kSessionFieldNumber;
const int UnlinkDeviceInput::kUserIdFieldNumber;
const int UnlinkDeviceInput::kDeviceIdFieldNumber;
const int UnlinkDeviceInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UnlinkDeviceInput::UnlinkDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlinkDeviceInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UnlinkDeviceInput::UnlinkDeviceInput(const UnlinkDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlinkDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlinkDeviceInput::~UnlinkDeviceInput() {
  SharedDtor();
}

void UnlinkDeviceInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UnlinkDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkDeviceInput_descriptor_;
}

const UnlinkDeviceInput& UnlinkDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UnlinkDeviceInput* UnlinkDeviceInput::default_instance_ = NULL;

UnlinkDeviceInput* UnlinkDeviceInput::New() const {
  return new UnlinkDeviceInput;
}

void UnlinkDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlinkDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlinkDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlinkDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlinkDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlinkDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlinkDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlinkDeviceInput::MergeFrom(const UnlinkDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlinkDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkDeviceInput::CopyFrom(const UnlinkDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void UnlinkDeviceInput::Swap(UnlinkDeviceInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlinkDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkDeviceInput_descriptor_;
  metadata.reflection = UnlinkDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlinkDeviceOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UnlinkDeviceOutput::UnlinkDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlinkDeviceOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UnlinkDeviceOutput::UnlinkDeviceOutput(const UnlinkDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlinkDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlinkDeviceOutput::~UnlinkDeviceOutput() {
  SharedDtor();
}

void UnlinkDeviceOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UnlinkDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkDeviceOutput_descriptor_;
}

const UnlinkDeviceOutput& UnlinkDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UnlinkDeviceOutput* UnlinkDeviceOutput::default_instance_ = NULL;

UnlinkDeviceOutput* UnlinkDeviceOutput::New() const {
  return new UnlinkDeviceOutput;
}

void UnlinkDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlinkDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlinkDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlinkDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlinkDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlinkDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlinkDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlinkDeviceOutput::MergeFrom(const UnlinkDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlinkDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkDeviceOutput::CopyFrom(const UnlinkDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UnlinkDeviceOutput::Swap(UnlinkDeviceOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlinkDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkDeviceOutput_descriptor_;
  metadata.reflection = UnlinkDeviceOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDeviceNameInput::kSessionFieldNumber;
const int SetDeviceNameInput::kUserIdFieldNumber;
const int SetDeviceNameInput::kDeviceIdFieldNumber;
const int SetDeviceNameInput::kDeviceNameFieldNumber;
const int SetDeviceNameInput::kVersionFieldNumber;
#endif  // !_MSC_VER

SetDeviceNameInput::SetDeviceNameInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetDeviceNameInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

SetDeviceNameInput::SetDeviceNameInput(const SetDeviceNameInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetDeviceNameInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDeviceNameInput::~SetDeviceNameInput() {
  SharedDtor();
}

void SetDeviceNameInput::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void SetDeviceNameInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDeviceNameInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDeviceNameInput_descriptor_;
}

const SetDeviceNameInput& SetDeviceNameInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SetDeviceNameInput* SetDeviceNameInput::default_instance_ = NULL;

SetDeviceNameInput* SetDeviceNameInput::New() const {
  return new SetDeviceNameInput;
}

void SetDeviceNameInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDeviceNameInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceName;
        break;
      }
      
      // required string deviceName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDeviceNameInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required string deviceName = 4;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicename(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetDeviceNameInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required string deviceName = 4;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicename(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetDeviceNameInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required string deviceName = 4;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDeviceNameInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDeviceNameInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDeviceNameInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDeviceNameInput::MergeFrom(const SetDeviceNameInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDeviceNameInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDeviceNameInput::CopyFrom(const SetDeviceNameInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDeviceNameInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void SetDeviceNameInput::Swap(SetDeviceNameInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicename_, other->devicename_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDeviceNameInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDeviceNameInput_descriptor_;
  metadata.reflection = SetDeviceNameInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDeviceNameOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

SetDeviceNameOutput::SetDeviceNameOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetDeviceNameOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

SetDeviceNameOutput::SetDeviceNameOutput(const SetDeviceNameOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetDeviceNameOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDeviceNameOutput::~SetDeviceNameOutput() {
  SharedDtor();
}

void SetDeviceNameOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void SetDeviceNameOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDeviceNameOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDeviceNameOutput_descriptor_;
}

const SetDeviceNameOutput& SetDeviceNameOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SetDeviceNameOutput* SetDeviceNameOutput::default_instance_ = NULL;

SetDeviceNameOutput* SetDeviceNameOutput::New() const {
  return new SetDeviceNameOutput;
}

void SetDeviceNameOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDeviceNameOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDeviceNameOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetDeviceNameOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetDeviceNameOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDeviceNameOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDeviceNameOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDeviceNameOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDeviceNameOutput::MergeFrom(const SetDeviceNameOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDeviceNameOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDeviceNameOutput::CopyFrom(const SetDeviceNameOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDeviceNameOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void SetDeviceNameOutput::Swap(SetDeviceNameOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDeviceNameOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDeviceNameOutput_descriptor_;
  metadata.reflection = SetDeviceNameOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDeviceInfoInput::kSessionFieldNumber;
const int UpdateDeviceInfoInput::kUserIdFieldNumber;
const int UpdateDeviceInfoInput::kDeviceIdFieldNumber;
const int UpdateDeviceInfoInput::kDeviceNameFieldNumber;
const int UpdateDeviceInfoInput::kOsVersionFieldNumber;
const int UpdateDeviceInfoInput::kProtocolVersionFieldNumber;
const int UpdateDeviceInfoInput::kVersionFieldNumber;
const int UpdateDeviceInfoInput::kModelNumberFieldNumber;
const int UpdateDeviceInfoInput::kBuildInfoFieldNumber;
#endif  // !_MSC_VER

UpdateDeviceInfoInput::UpdateDeviceInfoInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDeviceInfoInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UpdateDeviceInfoInput::UpdateDeviceInfoInput(const UpdateDeviceInfoInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDeviceInfoInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocolversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDeviceInfoInput::~UpdateDeviceInfoInput() {
  SharedDtor();
}

void UpdateDeviceInfoInput::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (protocolversion_ != &::google::protobuf::internal::kEmptyString) {
    delete protocolversion_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (modelnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete modelnumber_;
  }
  if (buildinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete buildinfo_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UpdateDeviceInfoInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDeviceInfoInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDeviceInfoInput_descriptor_;
}

const UpdateDeviceInfoInput& UpdateDeviceInfoInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDeviceInfoInput* UpdateDeviceInfoInput::default_instance_ = NULL;

UpdateDeviceInfoInput* UpdateDeviceInfoInput::New() const {
  return new UpdateDeviceInfoInput;
}

void UpdateDeviceInfoInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
    if (has_osversion()) {
      if (osversion_ != &::google::protobuf::internal::kEmptyString) {
        osversion_->clear();
      }
    }
    if (has_protocolversion()) {
      if (protocolversion_ != &::google::protobuf::internal::kEmptyString) {
        protocolversion_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_modelnumber()) {
      if (modelnumber_ != &::google::protobuf::internal::kEmptyString) {
        modelnumber_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_buildinfo()) {
      if (buildinfo_ != &::google::protobuf::internal::kEmptyString) {
        buildinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDeviceInfoInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceName;
        break;
      }
      
      // optional string deviceName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_osVersion;
        break;
      }
      
      // optional string osVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_protocolVersion;
        break;
      }
      
      // optional string protocolVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocolVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocolversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocolversion().data(), this->protocolversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_modelNumber;
        break;
      }
      
      // optional string modelNumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelnumber().data(), this->modelnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_buildInfo;
        break;
      }
      
      // optional string buildInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildinfo().data(), this->buildinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDeviceInfoInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string deviceName = 4;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->devicename(), output);
  }
  
  // optional string osVersion = 5;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->osversion(), output);
  }
  
  // optional string protocolVersion = 6;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocolversion().data(), this->protocolversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->protocolversion(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  // optional string modelNumber = 8;
  if (has_modelnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelnumber().data(), this->modelnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->modelnumber(), output);
  }
  
  // optional string buildInfo = 9;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildinfo().data(), this->buildinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->buildinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDeviceInfoInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string deviceName = 4;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->devicename(), target);
  }
  
  // optional string osVersion = 5;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->osversion(), target);
  }
  
  // optional string protocolVersion = 6;
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocolversion().data(), this->protocolversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->protocolversion(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  // optional string modelNumber = 8;
  if (has_modelnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelnumber().data(), this->modelnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->modelnumber(), target);
  }
  
  // optional string buildInfo = 9;
  if (has_buildinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildinfo().data(), this->buildinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->buildinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDeviceInfoInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string deviceName = 4;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
    // optional string osVersion = 5;
    if (has_osversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osversion());
    }
    
    // optional string protocolVersion = 6;
    if (has_protocolversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocolversion());
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string modelNumber = 8;
    if (has_modelnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelnumber());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string buildInfo = 9;
    if (has_buildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDeviceInfoInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDeviceInfoInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDeviceInfoInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDeviceInfoInput::MergeFrom(const UpdateDeviceInfoInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
    if (from.has_osversion()) {
      set_osversion(from.osversion());
    }
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_modelnumber()) {
      set_modelnumber(from.modelnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buildinfo()) {
      set_buildinfo(from.buildinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDeviceInfoInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceInfoInput::CopyFrom(const UpdateDeviceInfoInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceInfoInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void UpdateDeviceInfoInput::Swap(UpdateDeviceInfoInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(devicename_, other->devicename_);
    std::swap(osversion_, other->osversion_);
    std::swap(protocolversion_, other->protocolversion_);
    std::swap(version_, other->version_);
    std::swap(modelnumber_, other->modelnumber_);
    std::swap(buildinfo_, other->buildinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDeviceInfoInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDeviceInfoInput_descriptor_;
  metadata.reflection = UpdateDeviceInfoInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDeviceInfoOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateDeviceInfoOutput::UpdateDeviceInfoOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDeviceInfoOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateDeviceInfoOutput::UpdateDeviceInfoOutput(const UpdateDeviceInfoOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDeviceInfoOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDeviceInfoOutput::~UpdateDeviceInfoOutput() {
  SharedDtor();
}

void UpdateDeviceInfoOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateDeviceInfoOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDeviceInfoOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDeviceInfoOutput_descriptor_;
}

const UpdateDeviceInfoOutput& UpdateDeviceInfoOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDeviceInfoOutput* UpdateDeviceInfoOutput::default_instance_ = NULL;

UpdateDeviceInfoOutput* UpdateDeviceInfoOutput::New() const {
  return new UpdateDeviceInfoOutput;
}

void UpdateDeviceInfoOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDeviceInfoOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDeviceInfoOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDeviceInfoOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDeviceInfoOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDeviceInfoOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDeviceInfoOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDeviceInfoOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDeviceInfoOutput::MergeFrom(const UpdateDeviceInfoOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDeviceInfoOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeviceInfoOutput::CopyFrom(const UpdateDeviceInfoOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceInfoOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateDeviceInfoOutput::Swap(UpdateDeviceInfoOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDeviceInfoOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDeviceInfoOutput_descriptor_;
  metadata.reflection = UpdateDeviceInfoOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeviceLinkStateInput::kSessionFieldNumber;
const int GetDeviceLinkStateInput::kUserIdFieldNumber;
const int GetDeviceLinkStateInput::kDeviceIdFieldNumber;
const int GetDeviceLinkStateInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetDeviceLinkStateInput::GetDeviceLinkStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDeviceLinkStateInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetDeviceLinkStateInput::GetDeviceLinkStateInput(const GetDeviceLinkStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDeviceLinkStateInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeviceLinkStateInput::~GetDeviceLinkStateInput() {
  SharedDtor();
}

void GetDeviceLinkStateInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetDeviceLinkStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceLinkStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeviceLinkStateInput_descriptor_;
}

const GetDeviceLinkStateInput& GetDeviceLinkStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDeviceLinkStateInput* GetDeviceLinkStateInput::default_instance_ = NULL;

GetDeviceLinkStateInput* GetDeviceLinkStateInput::New() const {
  return new GetDeviceLinkStateInput;
}

void GetDeviceLinkStateInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeviceLinkStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDeviceLinkStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDeviceLinkStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDeviceLinkStateInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceLinkStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeviceLinkStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeviceLinkStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeviceLinkStateInput::MergeFrom(const GetDeviceLinkStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeviceLinkStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceLinkStateInput::CopyFrom(const GetDeviceLinkStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceLinkStateInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetDeviceLinkStateInput::Swap(GetDeviceLinkStateInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeviceLinkStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeviceLinkStateInput_descriptor_;
  metadata.reflection = GetDeviceLinkStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeviceLinkStateOutput::kErrorFieldNumber;
const int GetDeviceLinkStateOutput::kLinkedFieldNumber;
#endif  // !_MSC_VER

GetDeviceLinkStateOutput::GetDeviceLinkStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDeviceLinkStateOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetDeviceLinkStateOutput::GetDeviceLinkStateOutput(const GetDeviceLinkStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDeviceLinkStateOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  linked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeviceLinkStateOutput::~GetDeviceLinkStateOutput() {
  SharedDtor();
}

void GetDeviceLinkStateOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetDeviceLinkStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceLinkStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeviceLinkStateOutput_descriptor_;
}

const GetDeviceLinkStateOutput& GetDeviceLinkStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDeviceLinkStateOutput* GetDeviceLinkStateOutput::default_instance_ = NULL;

GetDeviceLinkStateOutput* GetDeviceLinkStateOutput::New() const {
  return new GetDeviceLinkStateOutput;
}

void GetDeviceLinkStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    linked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeviceLinkStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_linked;
        break;
      }
      
      // required bool linked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDeviceLinkStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // required bool linked = 2;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->linked(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDeviceLinkStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // required bool linked = 2;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->linked(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDeviceLinkStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // required bool linked = 2;
    if (has_linked()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceLinkStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeviceLinkStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeviceLinkStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeviceLinkStateOutput::MergeFrom(const GetDeviceLinkStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_linked()) {
      set_linked(from.linked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeviceLinkStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceLinkStateOutput::CopyFrom(const GetDeviceLinkStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceLinkStateOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetDeviceLinkStateOutput::Swap(GetDeviceLinkStateOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(linked_, other->linked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeviceLinkStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeviceLinkStateOutput_descriptor_;
  metadata.reflection = GetDeviceLinkStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeviceNameInput::kSessionFieldNumber;
const int GetDeviceNameInput::kUserIdFieldNumber;
const int GetDeviceNameInput::kDeviceIdFieldNumber;
const int GetDeviceNameInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetDeviceNameInput::GetDeviceNameInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDeviceNameInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetDeviceNameInput::GetDeviceNameInput(const GetDeviceNameInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDeviceNameInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeviceNameInput::~GetDeviceNameInput() {
  SharedDtor();
}

void GetDeviceNameInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetDeviceNameInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceNameInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeviceNameInput_descriptor_;
}

const GetDeviceNameInput& GetDeviceNameInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDeviceNameInput* GetDeviceNameInput::default_instance_ = NULL;

GetDeviceNameInput* GetDeviceNameInput::New() const {
  return new GetDeviceNameInput;
}

void GetDeviceNameInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeviceNameInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDeviceNameInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDeviceNameInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDeviceNameInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceNameInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeviceNameInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeviceNameInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeviceNameInput::MergeFrom(const GetDeviceNameInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeviceNameInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceNameInput::CopyFrom(const GetDeviceNameInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceNameInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetDeviceNameInput::Swap(GetDeviceNameInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeviceNameInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeviceNameInput_descriptor_;
  metadata.reflection = GetDeviceNameInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDeviceNameOutput::kErrorFieldNumber;
const int GetDeviceNameOutput::kDeviceNameFieldNumber;
#endif  // !_MSC_VER

GetDeviceNameOutput::GetDeviceNameOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDeviceNameOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetDeviceNameOutput::GetDeviceNameOutput(const GetDeviceNameOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDeviceNameOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDeviceNameOutput::~GetDeviceNameOutput() {
  SharedDtor();
}

void GetDeviceNameOutput::SharedDtor() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetDeviceNameOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDeviceNameOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDeviceNameOutput_descriptor_;
}

const GetDeviceNameOutput& GetDeviceNameOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDeviceNameOutput* GetDeviceNameOutput::default_instance_ = NULL;

GetDeviceNameOutput* GetDeviceNameOutput::New() const {
  return new GetDeviceNameOutput;
}

void GetDeviceNameOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDeviceNameOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceName;
        break;
      }
      
      // optional string deviceName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->devicename().data(), this->devicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDeviceNameOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional string deviceName = 2;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->devicename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDeviceNameOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional string deviceName = 2;
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->devicename().data(), this->devicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDeviceNameOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional string deviceName = 2;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDeviceNameOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDeviceNameOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDeviceNameOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDeviceNameOutput::MergeFrom(const GetDeviceNameOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDeviceNameOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDeviceNameOutput::CopyFrom(const GetDeviceNameOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeviceNameOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetDeviceNameOutput::Swap(GetDeviceNameOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(devicename_, other->devicename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDeviceNameOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDeviceNameOutput_descriptor_;
  metadata.reflection = GetDeviceNameOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLinkedDevicesInput::kSessionFieldNumber;
const int GetLinkedDevicesInput::kUserIdFieldNumber;
const int GetLinkedDevicesInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetLinkedDevicesInput::GetLinkedDevicesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLinkedDevicesInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetLinkedDevicesInput::GetLinkedDevicesInput(const GetLinkedDevicesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLinkedDevicesInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLinkedDevicesInput::~GetLinkedDevicesInput() {
  SharedDtor();
}

void GetLinkedDevicesInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetLinkedDevicesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLinkedDevicesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLinkedDevicesInput_descriptor_;
}

const GetLinkedDevicesInput& GetLinkedDevicesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetLinkedDevicesInput* GetLinkedDevicesInput::default_instance_ = NULL;

GetLinkedDevicesInput* GetLinkedDevicesInput::New() const {
  return new GetLinkedDevicesInput;
}

void GetLinkedDevicesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLinkedDevicesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLinkedDevicesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLinkedDevicesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLinkedDevicesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLinkedDevicesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLinkedDevicesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLinkedDevicesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLinkedDevicesInput::MergeFrom(const GetLinkedDevicesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLinkedDevicesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkedDevicesInput::CopyFrom(const GetLinkedDevicesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkedDevicesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetLinkedDevicesInput::Swap(GetLinkedDevicesInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLinkedDevicesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLinkedDevicesInput_descriptor_;
  metadata.reflection = GetLinkedDevicesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLinkedDevicesOutput::kErrorFieldNumber;
const int GetLinkedDevicesOutput::kDevicesFieldNumber;
#endif  // !_MSC_VER

GetLinkedDevicesOutput::GetLinkedDevicesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLinkedDevicesOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetLinkedDevicesOutput::GetLinkedDevicesOutput(const GetLinkedDevicesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLinkedDevicesOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLinkedDevicesOutput::~GetLinkedDevicesOutput() {
  SharedDtor();
}

void GetLinkedDevicesOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetLinkedDevicesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLinkedDevicesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLinkedDevicesOutput_descriptor_;
}

const GetLinkedDevicesOutput& GetLinkedDevicesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetLinkedDevicesOutput* GetLinkedDevicesOutput::default_instance_ = NULL;

GetLinkedDevicesOutput* GetLinkedDevicesOutput::New() const {
  return new GetLinkedDevicesOutput;
}

void GetLinkedDevicesOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLinkedDevicesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        break;
      }
      
      // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLinkedDevicesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLinkedDevicesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLinkedDevicesOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.DeviceInfo devices = 2;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLinkedDevicesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLinkedDevicesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLinkedDevicesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLinkedDevicesOutput::MergeFrom(const GetLinkedDevicesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  devices_.MergeFrom(from.devices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLinkedDevicesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkedDevicesOutput::CopyFrom(const GetLinkedDevicesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkedDevicesOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < devices_size(); i++) {
    if (!this->devices(i).IsInitialized()) return false;
  }
  return true;
}

void GetLinkedDevicesOutput::Swap(GetLinkedDevicesOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    devices_.Swap(&other->devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLinkedDevicesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLinkedDevicesOutput_descriptor_;
  metadata.reflection = GetLinkedDevicesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLoginSessionInput::kSessionFieldNumber;
const int GetLoginSessionInput::kUserIdFieldNumber;
const int GetLoginSessionInput::kDeviceIdFieldNumber;
const int GetLoginSessionInput::kSessionHandleFieldNumber;
const int GetLoginSessionInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetLoginSessionInput::GetLoginSessionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLoginSessionInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetLoginSessionInput::GetLoginSessionInput(const GetLoginSessionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLoginSessionInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  sessionhandle_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLoginSessionInput::~GetLoginSessionInput() {
  SharedDtor();
}

void GetLoginSessionInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetLoginSessionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginSessionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLoginSessionInput_descriptor_;
}

const GetLoginSessionInput& GetLoginSessionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetLoginSessionInput* GetLoginSessionInput::default_instance_ = NULL;

GetLoginSessionInput* GetLoginSessionInput::New() const {
  return new GetLoginSessionInput;
}

void GetLoginSessionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    sessionhandle_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLoginSessionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // optional fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_sessionHandle;
        break;
      }
      
      // required fixed64 sessionHandle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sessionHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sessionhandle_)));
          set_has_sessionhandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLoginSessionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // required fixed64 sessionHandle = 4;
  if (has_sessionhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->sessionhandle(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLoginSessionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // required fixed64 sessionHandle = 4;
  if (has_sessionhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->sessionhandle(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLoginSessionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 sessionHandle = 4;
    if (has_sessionhandle()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginSessionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLoginSessionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLoginSessionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLoginSessionInput::MergeFrom(const GetLoginSessionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_sessionhandle()) {
      set_sessionhandle(from.sessionhandle());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLoginSessionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginSessionInput::CopyFrom(const GetLoginSessionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginSessionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetLoginSessionInput::Swap(GetLoginSessionInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(sessionhandle_, other->sessionhandle_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLoginSessionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLoginSessionInput_descriptor_;
  metadata.reflection = GetLoginSessionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLoginSessionOutput::kErrorFieldNumber;
const int GetLoginSessionOutput::kUserIdFieldNumber;
const int GetLoginSessionOutput::kServiceTicketFieldNumber;
#endif  // !_MSC_VER

GetLoginSessionOutput::GetLoginSessionOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLoginSessionOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetLoginSessionOutput::GetLoginSessionOutput(const GetLoginSessionOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLoginSessionOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  serviceticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLoginSessionOutput::~GetLoginSessionOutput() {
  SharedDtor();
}

void GetLoginSessionOutput::SharedDtor() {
  if (serviceticket_ != &::google::protobuf::internal::kEmptyString) {
    delete serviceticket_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetLoginSessionOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLoginSessionOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLoginSessionOutput_descriptor_;
}

const GetLoginSessionOutput& GetLoginSessionOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetLoginSessionOutput* GetLoginSessionOutput::default_instance_ = NULL;

GetLoginSessionOutput* GetLoginSessionOutput::New() const {
  return new GetLoginSessionOutput;
}

void GetLoginSessionOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_serviceticket()) {
      if (serviceticket_ != &::google::protobuf::internal::kEmptyString) {
        serviceticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLoginSessionOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // optional fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serviceTicket;
        break;
      }
      
      // optional bytes serviceTicket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serviceticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLoginSessionOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional bytes serviceTicket = 3;
  if (has_serviceticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->serviceticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLoginSessionOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional bytes serviceTicket = 3;
  if (has_serviceticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->serviceticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLoginSessionOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional bytes serviceTicket = 3;
    if (has_serviceticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serviceticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLoginSessionOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLoginSessionOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLoginSessionOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLoginSessionOutput::MergeFrom(const GetLoginSessionOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_serviceticket()) {
      set_serviceticket(from.serviceticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLoginSessionOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLoginSessionOutput::CopyFrom(const GetLoginSessionOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLoginSessionOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetLoginSessionOutput::Swap(GetLoginSessionOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(userid_, other->userid_);
    std::swap(serviceticket_, other->serviceticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLoginSessionOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLoginSessionOutput_descriptor_;
  metadata.reflection = GetLoginSessionOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePersonalStorageNodeInput::kSessionFieldNumber;
const int CreatePersonalStorageNodeInput::kUserIdFieldNumber;
const int CreatePersonalStorageNodeInput::kClusterIdFieldNumber;
const int CreatePersonalStorageNodeInput::kClusterNameFieldNumber;
const int CreatePersonalStorageNodeInput::kVirtDriveCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kMediaServerCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kFeatureMediaServerCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kFeatureVirtDriveCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kFeatureRemoteFileAccessCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kFeatureFSDatasetTypeCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kVersionFieldNumber;
const int CreatePersonalStorageNodeInput::kFeatureVirtSyncCapableFieldNumber;
const int CreatePersonalStorageNodeInput::kFeatureMyStorageServerCapableFieldNumber;
#endif  // !_MSC_VER

CreatePersonalStorageNodeInput::CreatePersonalStorageNodeInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePersonalStorageNodeInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

CreatePersonalStorageNodeInput::CreatePersonalStorageNodeInput(const CreatePersonalStorageNodeInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePersonalStorageNodeInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  clustername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  virtdrivecapable_ = false;
  mediaservercapable_ = false;
  featuremediaservercapable_ = false;
  featurevirtdrivecapable_ = false;
  featureremotefileaccesscapable_ = false;
  featurefsdatasettypecapable_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featurevirtsynccapable_ = false;
  featuremystorageservercapable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePersonalStorageNodeInput::~CreatePersonalStorageNodeInput() {
  SharedDtor();
}

void CreatePersonalStorageNodeInput::SharedDtor() {
  if (clustername_ != &::google::protobuf::internal::kEmptyString) {
    delete clustername_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void CreatePersonalStorageNodeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePersonalStorageNodeInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePersonalStorageNodeInput_descriptor_;
}

const CreatePersonalStorageNodeInput& CreatePersonalStorageNodeInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

CreatePersonalStorageNodeInput* CreatePersonalStorageNodeInput::default_instance_ = NULL;

CreatePersonalStorageNodeInput* CreatePersonalStorageNodeInput::New() const {
  return new CreatePersonalStorageNodeInput;
}

void CreatePersonalStorageNodeInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_clustername()) {
      if (clustername_ != &::google::protobuf::internal::kEmptyString) {
        clustername_->clear();
      }
    }
    virtdrivecapable_ = false;
    mediaservercapable_ = false;
    featuremediaservercapable_ = false;
    featurevirtdrivecapable_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    featureremotefileaccesscapable_ = false;
    featurefsdatasettypecapable_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    featurevirtsynccapable_ = false;
    featuremystorageservercapable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePersonalStorageNodeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clusterName;
        break;
      }
      
      // required string clusterName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clusterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clustername().data(), this->clustername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_virtDriveCapable;
        break;
      }
      
      // optional bool virtDriveCapable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtDriveCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtdrivecapable_)));
          set_has_virtdrivecapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mediaServerCapable;
        break;
      }
      
      // optional bool mediaServerCapable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mediaServerCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mediaservercapable_)));
          set_has_mediaservercapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_featureMediaServerCapable;
        break;
      }
      
      // optional bool featureMediaServerCapable = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMediaServerCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremediaservercapable_)));
          set_has_featuremediaservercapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_featureVirtDriveCapable;
        break;
      }
      
      // optional bool featureVirtDriveCapable = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtDriveCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtdrivecapable_)));
          set_has_featurevirtdrivecapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_featureRemoteFileAccessCapable;
        break;
      }
      
      // optional bool featureRemoteFileAccessCapable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureRemoteFileAccessCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featureremotefileaccesscapable_)));
          set_has_featureremotefileaccesscapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_featureFSDatasetTypeCapable;
        break;
      }
      
      // optional bool featureFSDatasetTypeCapable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureFSDatasetTypeCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurefsdatasettypecapable_)));
          set_has_featurefsdatasettypecapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_version;
        break;
      }
      
      // optional string version = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_featureVirtSyncCapable;
        break;
      }
      
      // optional bool featureVirtSyncCapable = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtSyncCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtsynccapable_)));
          set_has_featurevirtsynccapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_featureMyStorageServerCapable;
        break;
      }
      
      // optional bool featureMyStorageServerCapable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMyStorageServerCapable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremystorageservercapable_)));
          set_has_featuremystorageservercapable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePersonalStorageNodeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // required string clusterName = 4;
  if (has_clustername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustername().data(), this->clustername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->clustername(), output);
  }
  
  // optional bool virtDriveCapable = 5;
  if (has_virtdrivecapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->virtdrivecapable(), output);
  }
  
  // optional bool mediaServerCapable = 6;
  if (has_mediaservercapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mediaservercapable(), output);
  }
  
  // optional bool featureMediaServerCapable = 7;
  if (has_featuremediaservercapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->featuremediaservercapable(), output);
  }
  
  // optional bool featureVirtDriveCapable = 8;
  if (has_featurevirtdrivecapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->featurevirtdrivecapable(), output);
  }
  
  // optional bool featureRemoteFileAccessCapable = 9;
  if (has_featureremotefileaccesscapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->featureremotefileaccesscapable(), output);
  }
  
  // optional bool featureFSDatasetTypeCapable = 10;
  if (has_featurefsdatasettypecapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->featurefsdatasettypecapable(), output);
  }
  
  // optional string version = 11;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->version(), output);
  }
  
  // optional bool featureVirtSyncCapable = 12;
  if (has_featurevirtsynccapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->featurevirtsynccapable(), output);
  }
  
  // optional bool featureMyStorageServerCapable = 13;
  if (has_featuremystorageservercapable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->featuremystorageservercapable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePersonalStorageNodeInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // required string clusterName = 4;
  if (has_clustername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustername().data(), this->clustername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clustername(), target);
  }
  
  // optional bool virtDriveCapable = 5;
  if (has_virtdrivecapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->virtdrivecapable(), target);
  }
  
  // optional bool mediaServerCapable = 6;
  if (has_mediaservercapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mediaservercapable(), target);
  }
  
  // optional bool featureMediaServerCapable = 7;
  if (has_featuremediaservercapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->featuremediaservercapable(), target);
  }
  
  // optional bool featureVirtDriveCapable = 8;
  if (has_featurevirtdrivecapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->featurevirtdrivecapable(), target);
  }
  
  // optional bool featureRemoteFileAccessCapable = 9;
  if (has_featureremotefileaccesscapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->featureremotefileaccesscapable(), target);
  }
  
  // optional bool featureFSDatasetTypeCapable = 10;
  if (has_featurefsdatasettypecapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->featurefsdatasettypecapable(), target);
  }
  
  // optional string version = 11;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->version(), target);
  }
  
  // optional bool featureVirtSyncCapable = 12;
  if (has_featurevirtsynccapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->featurevirtsynccapable(), target);
  }
  
  // optional bool featureMyStorageServerCapable = 13;
  if (has_featuremystorageservercapable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->featuremystorageservercapable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePersonalStorageNodeInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required string clusterName = 4;
    if (has_clustername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clustername());
    }
    
    // optional bool virtDriveCapable = 5;
    if (has_virtdrivecapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool mediaServerCapable = 6;
    if (has_mediaservercapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureMediaServerCapable = 7;
    if (has_featuremediaservercapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureVirtDriveCapable = 8;
    if (has_featurevirtdrivecapable()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool featureRemoteFileAccessCapable = 9;
    if (has_featureremotefileaccesscapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureFSDatasetTypeCapable = 10;
    if (has_featurefsdatasettypecapable()) {
      total_size += 1 + 1;
    }
    
    // optional string version = 11;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional bool featureVirtSyncCapable = 12;
    if (has_featurevirtsynccapable()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureMyStorageServerCapable = 13;
    if (has_featuremystorageservercapable()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePersonalStorageNodeInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePersonalStorageNodeInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePersonalStorageNodeInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePersonalStorageNodeInput::MergeFrom(const CreatePersonalStorageNodeInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_clustername()) {
      set_clustername(from.clustername());
    }
    if (from.has_virtdrivecapable()) {
      set_virtdrivecapable(from.virtdrivecapable());
    }
    if (from.has_mediaservercapable()) {
      set_mediaservercapable(from.mediaservercapable());
    }
    if (from.has_featuremediaservercapable()) {
      set_featuremediaservercapable(from.featuremediaservercapable());
    }
    if (from.has_featurevirtdrivecapable()) {
      set_featurevirtdrivecapable(from.featurevirtdrivecapable());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_featureremotefileaccesscapable()) {
      set_featureremotefileaccesscapable(from.featureremotefileaccesscapable());
    }
    if (from.has_featurefsdatasettypecapable()) {
      set_featurefsdatasettypecapable(from.featurefsdatasettypecapable());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_featurevirtsynccapable()) {
      set_featurevirtsynccapable(from.featurevirtsynccapable());
    }
    if (from.has_featuremystorageservercapable()) {
      set_featuremystorageservercapable(from.featuremystorageservercapable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePersonalStorageNodeInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePersonalStorageNodeInput::CopyFrom(const CreatePersonalStorageNodeInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePersonalStorageNodeInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void CreatePersonalStorageNodeInput::Swap(CreatePersonalStorageNodeInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(clustername_, other->clustername_);
    std::swap(virtdrivecapable_, other->virtdrivecapable_);
    std::swap(mediaservercapable_, other->mediaservercapable_);
    std::swap(featuremediaservercapable_, other->featuremediaservercapable_);
    std::swap(featurevirtdrivecapable_, other->featurevirtdrivecapable_);
    std::swap(featureremotefileaccesscapable_, other->featureremotefileaccesscapable_);
    std::swap(featurefsdatasettypecapable_, other->featurefsdatasettypecapable_);
    std::swap(version_, other->version_);
    std::swap(featurevirtsynccapable_, other->featurevirtsynccapable_);
    std::swap(featuremystorageservercapable_, other->featuremystorageservercapable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePersonalStorageNodeInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePersonalStorageNodeInput_descriptor_;
  metadata.reflection = CreatePersonalStorageNodeInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatePersonalStorageNodeOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

CreatePersonalStorageNodeOutput::CreatePersonalStorageNodeOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatePersonalStorageNodeOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

CreatePersonalStorageNodeOutput::CreatePersonalStorageNodeOutput(const CreatePersonalStorageNodeOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatePersonalStorageNodeOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatePersonalStorageNodeOutput::~CreatePersonalStorageNodeOutput() {
  SharedDtor();
}

void CreatePersonalStorageNodeOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CreatePersonalStorageNodeOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatePersonalStorageNodeOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatePersonalStorageNodeOutput_descriptor_;
}

const CreatePersonalStorageNodeOutput& CreatePersonalStorageNodeOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

CreatePersonalStorageNodeOutput* CreatePersonalStorageNodeOutput::default_instance_ = NULL;

CreatePersonalStorageNodeOutput* CreatePersonalStorageNodeOutput::New() const {
  return new CreatePersonalStorageNodeOutput;
}

void CreatePersonalStorageNodeOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatePersonalStorageNodeOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatePersonalStorageNodeOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatePersonalStorageNodeOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatePersonalStorageNodeOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatePersonalStorageNodeOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatePersonalStorageNodeOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatePersonalStorageNodeOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatePersonalStorageNodeOutput::MergeFrom(const CreatePersonalStorageNodeOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatePersonalStorageNodeOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePersonalStorageNodeOutput::CopyFrom(const CreatePersonalStorageNodeOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePersonalStorageNodeOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void CreatePersonalStorageNodeOutput::Swap(CreatePersonalStorageNodeOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatePersonalStorageNodeOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatePersonalStorageNodeOutput_descriptor_;
  metadata.reflection = CreatePersonalStorageNodeOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAsyncNoticeServerInput::kSessionFieldNumber;
const int GetAsyncNoticeServerInput::kUserIdFieldNumber;
const int GetAsyncNoticeServerInput::kClusterIdFieldNumber;
const int GetAsyncNoticeServerInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetAsyncNoticeServerInput::GetAsyncNoticeServerInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAsyncNoticeServerInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetAsyncNoticeServerInput::GetAsyncNoticeServerInput(const GetAsyncNoticeServerInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAsyncNoticeServerInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAsyncNoticeServerInput::~GetAsyncNoticeServerInput() {
  SharedDtor();
}

void GetAsyncNoticeServerInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetAsyncNoticeServerInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAsyncNoticeServerInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAsyncNoticeServerInput_descriptor_;
}

const GetAsyncNoticeServerInput& GetAsyncNoticeServerInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetAsyncNoticeServerInput* GetAsyncNoticeServerInput::default_instance_ = NULL;

GetAsyncNoticeServerInput* GetAsyncNoticeServerInput::New() const {
  return new GetAsyncNoticeServerInput;
}

void GetAsyncNoticeServerInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAsyncNoticeServerInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAsyncNoticeServerInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAsyncNoticeServerInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAsyncNoticeServerInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAsyncNoticeServerInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAsyncNoticeServerInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAsyncNoticeServerInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAsyncNoticeServerInput::MergeFrom(const GetAsyncNoticeServerInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAsyncNoticeServerInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAsyncNoticeServerInput::CopyFrom(const GetAsyncNoticeServerInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAsyncNoticeServerInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetAsyncNoticeServerInput::Swap(GetAsyncNoticeServerInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAsyncNoticeServerInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAsyncNoticeServerInput_descriptor_;
  metadata.reflection = GetAsyncNoticeServerInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAsyncNoticeServerOutput::kErrorFieldNumber;
const int GetAsyncNoticeServerOutput::kAddressFieldNumber;
const int GetAsyncNoticeServerOutput::kPortFieldNumber;
const int GetAsyncNoticeServerOutput::kClusterIdFieldNumber;
#endif  // !_MSC_VER

GetAsyncNoticeServerOutput::GetAsyncNoticeServerOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAsyncNoticeServerOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetAsyncNoticeServerOutput::GetAsyncNoticeServerOutput(const GetAsyncNoticeServerOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAsyncNoticeServerOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAsyncNoticeServerOutput::~GetAsyncNoticeServerOutput() {
  SharedDtor();
}

void GetAsyncNoticeServerOutput::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetAsyncNoticeServerOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAsyncNoticeServerOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAsyncNoticeServerOutput_descriptor_;
}

const GetAsyncNoticeServerOutput& GetAsyncNoticeServerOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetAsyncNoticeServerOutput* GetAsyncNoticeServerOutput::default_instance_ = NULL;

GetAsyncNoticeServerOutput* GetAsyncNoticeServerOutput::New() const {
  return new GetAsyncNoticeServerOutput;
}

void GetAsyncNoticeServerOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    port_ = 0;
    clusterid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAsyncNoticeServerOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }
      
      // optional string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_clusterId;
        break;
      }
      
      // optional fixed64 clusterId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAsyncNoticeServerOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }
  
  // optional fixed64 clusterId = 4;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->clusterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAsyncNoticeServerOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }
  
  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }
  
  // optional fixed64 clusterId = 4;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->clusterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAsyncNoticeServerOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional fixed64 clusterId = 4;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAsyncNoticeServerOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAsyncNoticeServerOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAsyncNoticeServerOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAsyncNoticeServerOutput::MergeFrom(const GetAsyncNoticeServerOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAsyncNoticeServerOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAsyncNoticeServerOutput::CopyFrom(const GetAsyncNoticeServerOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAsyncNoticeServerOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetAsyncNoticeServerOutput::Swap(GetAsyncNoticeServerOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAsyncNoticeServerOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAsyncNoticeServerOutput_descriptor_;
  metadata.reflection = GetAsyncNoticeServerOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStorageNodeConnectionInput::kSessionFieldNumber;
const int UpdateStorageNodeConnectionInput::kUserIdFieldNumber;
const int UpdateStorageNodeConnectionInput::kClusterIdFieldNumber;
const int UpdateStorageNodeConnectionInput::kReportedNameFieldNumber;
const int UpdateStorageNodeConnectionInput::kReportedPortFieldNumber;
const int UpdateStorageNodeConnectionInput::kReportedHTTPPortFieldNumber;
const int UpdateStorageNodeConnectionInput::kProxyClusterIdFieldNumber;
const int UpdateStorageNodeConnectionInput::kProxyConnectionCookieFieldNumber;
const int UpdateStorageNodeConnectionInput::kReportedClearFiPortFieldNumber;
const int UpdateStorageNodeConnectionInput::kReportedClearFiSecurePortFieldNumber;
const int UpdateStorageNodeConnectionInput::kAccessHandleFieldNumber;
const int UpdateStorageNodeConnectionInput::kAccessTicketFieldNumber;
const int UpdateStorageNodeConnectionInput::kAccessTicketsFieldNumber;
const int UpdateStorageNodeConnectionInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UpdateStorageNodeConnectionInput::UpdateStorageNodeConnectionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStorageNodeConnectionInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UpdateStorageNodeConnectionInput::UpdateStorageNodeConnectionInput(const UpdateStorageNodeConnectionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStorageNodeConnectionInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  reportedname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reportedport_ = 0;
  reportedhttpport_ = 0;
  proxyclusterid_ = GOOGLE_ULONGLONG(0);
  proxyconnectioncookie_ = 0;
  reportedclearfiport_ = 0;
  reportedclearfisecureport_ = 0;
  accesshandle_ = GOOGLE_ULONGLONG(0);
  accessticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStorageNodeConnectionInput::~UpdateStorageNodeConnectionInput() {
  SharedDtor();
}

void UpdateStorageNodeConnectionInput::SharedDtor() {
  if (reportedname_ != &::google::protobuf::internal::kEmptyString) {
    delete reportedname_;
  }
  if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
    delete accessticket_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UpdateStorageNodeConnectionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStorageNodeConnectionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStorageNodeConnectionInput_descriptor_;
}

const UpdateStorageNodeConnectionInput& UpdateStorageNodeConnectionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateStorageNodeConnectionInput* UpdateStorageNodeConnectionInput::default_instance_ = NULL;

UpdateStorageNodeConnectionInput* UpdateStorageNodeConnectionInput::New() const {
  return new UpdateStorageNodeConnectionInput;
}

void UpdateStorageNodeConnectionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_reportedname()) {
      if (reportedname_ != &::google::protobuf::internal::kEmptyString) {
        reportedname_->clear();
      }
    }
    reportedport_ = 0;
    reportedhttpport_ = 0;
    proxyclusterid_ = GOOGLE_ULONGLONG(0);
    proxyconnectioncookie_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reportedclearfiport_ = 0;
    reportedclearfisecureport_ = 0;
    accesshandle_ = GOOGLE_ULONGLONG(0);
    if (has_accessticket()) {
      if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
        accessticket_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  accesstickets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStorageNodeConnectionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reportedName;
        break;
      }
      
      // required string reportedName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportedName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reportedname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reportedname().data(), this->reportedname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reportedPort;
        break;
      }
      
      // required int32 reportedPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reportedPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reportedport_)));
          set_has_reportedport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reportedHTTPPort;
        break;
      }
      
      // required int32 reportedHTTPPort = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reportedHTTPPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reportedhttpport_)));
          set_has_reportedhttpport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_proxyClusterId;
        break;
      }
      
      // optional fixed64 proxyClusterId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_proxyClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &proxyclusterid_)));
          set_has_proxyclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_proxyConnectionCookie;
        break;
      }
      
      // optional int32 proxyConnectionCookie = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxyConnectionCookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxyconnectioncookie_)));
          set_has_proxyconnectioncookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reportedClearFiPort;
        break;
      }
      
      // optional int32 reportedClearFiPort = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reportedClearFiPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reportedclearfiport_)));
          set_has_reportedclearfiport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_reportedClearFiSecurePort;
        break;
      }
      
      // optional int32 reportedClearFiSecurePort = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reportedClearFiSecurePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reportedclearfisecureport_)));
          set_has_reportedclearfisecureport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_accessHandle;
        break;
      }
      
      // optional fixed64 accessHandle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accessHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &accesshandle_)));
          set_has_accesshandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_accessTicket;
        break;
      }
      
      // optional bytes accessTicket = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accessticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_accessTickets;
        break;
      }
      
      // repeated .vplex.vsDirectory.DeviceAccessTicket accessTickets = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessTickets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accesstickets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_accessTickets;
        if (input->ExpectTag(114)) goto parse_version;
        break;
      }
      
      // optional string version = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStorageNodeConnectionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // required string reportedName = 4;
  if (has_reportedname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reportedname().data(), this->reportedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reportedname(), output);
  }
  
  // required int32 reportedPort = 5;
  if (has_reportedport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reportedport(), output);
  }
  
  // required int32 reportedHTTPPort = 6;
  if (has_reportedhttpport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reportedhttpport(), output);
  }
  
  // optional fixed64 proxyClusterId = 7;
  if (has_proxyclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->proxyclusterid(), output);
  }
  
  // optional int32 proxyConnectionCookie = 8;
  if (has_proxyconnectioncookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->proxyconnectioncookie(), output);
  }
  
  // optional int32 reportedClearFiPort = 9;
  if (has_reportedclearfiport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reportedclearfiport(), output);
  }
  
  // optional int32 reportedClearFiSecurePort = 10;
  if (has_reportedclearfisecureport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reportedclearfisecureport(), output);
  }
  
  // optional fixed64 accessHandle = 11;
  if (has_accesshandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->accesshandle(), output);
  }
  
  // optional bytes accessTicket = 12;
  if (has_accessticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->accessticket(), output);
  }
  
  // repeated .vplex.vsDirectory.DeviceAccessTicket accessTickets = 13;
  for (int i = 0; i < this->accesstickets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->accesstickets(i), output);
  }
  
  // optional string version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStorageNodeConnectionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // required string reportedName = 4;
  if (has_reportedname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reportedname().data(), this->reportedname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reportedname(), target);
  }
  
  // required int32 reportedPort = 5;
  if (has_reportedport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reportedport(), target);
  }
  
  // required int32 reportedHTTPPort = 6;
  if (has_reportedhttpport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reportedhttpport(), target);
  }
  
  // optional fixed64 proxyClusterId = 7;
  if (has_proxyclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->proxyclusterid(), target);
  }
  
  // optional int32 proxyConnectionCookie = 8;
  if (has_proxyconnectioncookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->proxyconnectioncookie(), target);
  }
  
  // optional int32 reportedClearFiPort = 9;
  if (has_reportedclearfiport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reportedclearfiport(), target);
  }
  
  // optional int32 reportedClearFiSecurePort = 10;
  if (has_reportedclearfisecureport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reportedclearfisecureport(), target);
  }
  
  // optional fixed64 accessHandle = 11;
  if (has_accesshandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->accesshandle(), target);
  }
  
  // optional bytes accessTicket = 12;
  if (has_accessticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->accessticket(), target);
  }
  
  // repeated .vplex.vsDirectory.DeviceAccessTicket accessTickets = 13;
  for (int i = 0; i < this->accesstickets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->accesstickets(i), target);
  }
  
  // optional string version = 14;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStorageNodeConnectionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required string reportedName = 4;
    if (has_reportedname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reportedname());
    }
    
    // required int32 reportedPort = 5;
    if (has_reportedport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reportedport());
    }
    
    // required int32 reportedHTTPPort = 6;
    if (has_reportedhttpport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reportedhttpport());
    }
    
    // optional fixed64 proxyClusterId = 7;
    if (has_proxyclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional int32 proxyConnectionCookie = 8;
    if (has_proxyconnectioncookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxyconnectioncookie());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 reportedClearFiPort = 9;
    if (has_reportedclearfiport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reportedclearfiport());
    }
    
    // optional int32 reportedClearFiSecurePort = 10;
    if (has_reportedclearfisecureport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reportedclearfisecureport());
    }
    
    // optional fixed64 accessHandle = 11;
    if (has_accesshandle()) {
      total_size += 1 + 8;
    }
    
    // optional bytes accessTicket = 12;
    if (has_accessticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accessticket());
    }
    
    // optional string version = 14;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated .vplex.vsDirectory.DeviceAccessTicket accessTickets = 13;
  total_size += 1 * this->accesstickets_size();
  for (int i = 0; i < this->accesstickets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accesstickets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStorageNodeConnectionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStorageNodeConnectionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStorageNodeConnectionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStorageNodeConnectionInput::MergeFrom(const UpdateStorageNodeConnectionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  accesstickets_.MergeFrom(from.accesstickets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_reportedname()) {
      set_reportedname(from.reportedname());
    }
    if (from.has_reportedport()) {
      set_reportedport(from.reportedport());
    }
    if (from.has_reportedhttpport()) {
      set_reportedhttpport(from.reportedhttpport());
    }
    if (from.has_proxyclusterid()) {
      set_proxyclusterid(from.proxyclusterid());
    }
    if (from.has_proxyconnectioncookie()) {
      set_proxyconnectioncookie(from.proxyconnectioncookie());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reportedclearfiport()) {
      set_reportedclearfiport(from.reportedclearfiport());
    }
    if (from.has_reportedclearfisecureport()) {
      set_reportedclearfisecureport(from.reportedclearfisecureport());
    }
    if (from.has_accesshandle()) {
      set_accesshandle(from.accesshandle());
    }
    if (from.has_accessticket()) {
      set_accessticket(from.accessticket());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStorageNodeConnectionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStorageNodeConnectionInput::CopyFrom(const UpdateStorageNodeConnectionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStorageNodeConnectionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  for (int i = 0; i < accesstickets_size(); i++) {
    if (!this->accesstickets(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateStorageNodeConnectionInput::Swap(UpdateStorageNodeConnectionInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(reportedname_, other->reportedname_);
    std::swap(reportedport_, other->reportedport_);
    std::swap(reportedhttpport_, other->reportedhttpport_);
    std::swap(proxyclusterid_, other->proxyclusterid_);
    std::swap(proxyconnectioncookie_, other->proxyconnectioncookie_);
    std::swap(reportedclearfiport_, other->reportedclearfiport_);
    std::swap(reportedclearfisecureport_, other->reportedclearfisecureport_);
    std::swap(accesshandle_, other->accesshandle_);
    std::swap(accessticket_, other->accessticket_);
    accesstickets_.Swap(&other->accesstickets_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStorageNodeConnectionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStorageNodeConnectionInput_descriptor_;
  metadata.reflection = UpdateStorageNodeConnectionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStorageNodeConnectionOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateStorageNodeConnectionOutput::UpdateStorageNodeConnectionOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStorageNodeConnectionOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateStorageNodeConnectionOutput::UpdateStorageNodeConnectionOutput(const UpdateStorageNodeConnectionOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStorageNodeConnectionOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStorageNodeConnectionOutput::~UpdateStorageNodeConnectionOutput() {
  SharedDtor();
}

void UpdateStorageNodeConnectionOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateStorageNodeConnectionOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStorageNodeConnectionOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStorageNodeConnectionOutput_descriptor_;
}

const UpdateStorageNodeConnectionOutput& UpdateStorageNodeConnectionOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateStorageNodeConnectionOutput* UpdateStorageNodeConnectionOutput::default_instance_ = NULL;

UpdateStorageNodeConnectionOutput* UpdateStorageNodeConnectionOutput::New() const {
  return new UpdateStorageNodeConnectionOutput;
}

void UpdateStorageNodeConnectionOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStorageNodeConnectionOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStorageNodeConnectionOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStorageNodeConnectionOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStorageNodeConnectionOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStorageNodeConnectionOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStorageNodeConnectionOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStorageNodeConnectionOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStorageNodeConnectionOutput::MergeFrom(const UpdateStorageNodeConnectionOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStorageNodeConnectionOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStorageNodeConnectionOutput::CopyFrom(const UpdateStorageNodeConnectionOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStorageNodeConnectionOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateStorageNodeConnectionOutput::Swap(UpdateStorageNodeConnectionOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStorageNodeConnectionOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStorageNodeConnectionOutput_descriptor_;
  metadata.reflection = UpdateStorageNodeConnectionOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStorageNodeFeaturesInput::kSessionFieldNumber;
const int UpdateStorageNodeFeaturesInput::kUserIdFieldNumber;
const int UpdateStorageNodeFeaturesInput::kClusterIdFieldNumber;
const int UpdateStorageNodeFeaturesInput::kIsVirtDriveFieldNumber;
const int UpdateStorageNodeFeaturesInput::kIsMediaServerFieldNumber;
const int UpdateStorageNodeFeaturesInput::kFeatureMediaServerEnabledFieldNumber;
const int UpdateStorageNodeFeaturesInput::kFeatureVirtDriveEnabledFieldNumber;
const int UpdateStorageNodeFeaturesInput::kFeatureRemoteFileAccessEnabledFieldNumber;
const int UpdateStorageNodeFeaturesInput::kFeatureFSDatasetTypeEnabledFieldNumber;
const int UpdateStorageNodeFeaturesInput::kVersionFieldNumber;
const int UpdateStorageNodeFeaturesInput::kFeatureVirtSyncEnabledFieldNumber;
const int UpdateStorageNodeFeaturesInput::kFeatureMyStorageServerEnabledFieldNumber;
#endif  // !_MSC_VER

UpdateStorageNodeFeaturesInput::UpdateStorageNodeFeaturesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStorageNodeFeaturesInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UpdateStorageNodeFeaturesInput::UpdateStorageNodeFeaturesInput(const UpdateStorageNodeFeaturesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStorageNodeFeaturesInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  isvirtdrive_ = false;
  ismediaserver_ = false;
  featuremediaserverenabled_ = false;
  featurevirtdriveenabled_ = false;
  featureremotefileaccessenabled_ = false;
  featurefsdatasettypeenabled_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  featurevirtsyncenabled_ = false;
  featuremystorageserverenabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStorageNodeFeaturesInput::~UpdateStorageNodeFeaturesInput() {
  SharedDtor();
}

void UpdateStorageNodeFeaturesInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UpdateStorageNodeFeaturesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStorageNodeFeaturesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStorageNodeFeaturesInput_descriptor_;
}

const UpdateStorageNodeFeaturesInput& UpdateStorageNodeFeaturesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateStorageNodeFeaturesInput* UpdateStorageNodeFeaturesInput::default_instance_ = NULL;

UpdateStorageNodeFeaturesInput* UpdateStorageNodeFeaturesInput::New() const {
  return new UpdateStorageNodeFeaturesInput;
}

void UpdateStorageNodeFeaturesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    isvirtdrive_ = false;
    ismediaserver_ = false;
    featuremediaserverenabled_ = false;
    featurevirtdriveenabled_ = false;
    featureremotefileaccessenabled_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    featurefsdatasettypeenabled_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    featurevirtsyncenabled_ = false;
    featuremystorageserverenabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStorageNodeFeaturesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isVirtDrive;
        break;
      }
      
      // optional bool isVirtDrive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVirtDrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvirtdrive_)));
          set_has_isvirtdrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isMediaServer;
        break;
      }
      
      // optional bool isMediaServer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMediaServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismediaserver_)));
          set_has_ismediaserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_featureMediaServerEnabled;
        break;
      }
      
      // optional bool featureMediaServerEnabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMediaServerEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremediaserverenabled_)));
          set_has_featuremediaserverenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_featureVirtDriveEnabled;
        break;
      }
      
      // optional bool featureVirtDriveEnabled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtDriveEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtdriveenabled_)));
          set_has_featurevirtdriveenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_featureRemoteFileAccessEnabled;
        break;
      }
      
      // optional bool featureRemoteFileAccessEnabled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureRemoteFileAccessEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featureremotefileaccessenabled_)));
          set_has_featureremotefileaccessenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_featureFSDatasetTypeEnabled;
        break;
      }
      
      // optional bool featureFSDatasetTypeEnabled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureFSDatasetTypeEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurefsdatasettypeenabled_)));
          set_has_featurefsdatasettypeenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_version;
        break;
      }
      
      // optional string version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_featureVirtSyncEnabled;
        break;
      }
      
      // optional bool featureVirtSyncEnabled = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureVirtSyncEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featurevirtsyncenabled_)));
          set_has_featurevirtsyncenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_featureMyStorageServerEnabled;
        break;
      }
      
      // optional bool featureMyStorageServerEnabled = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_featureMyStorageServerEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &featuremystorageserverenabled_)));
          set_has_featuremystorageserverenabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStorageNodeFeaturesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // optional bool isVirtDrive = 4;
  if (has_isvirtdrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvirtdrive(), output);
  }
  
  // optional bool isMediaServer = 5;
  if (has_ismediaserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ismediaserver(), output);
  }
  
  // optional bool featureMediaServerEnabled = 6;
  if (has_featuremediaserverenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->featuremediaserverenabled(), output);
  }
  
  // optional bool featureVirtDriveEnabled = 7;
  if (has_featurevirtdriveenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->featurevirtdriveenabled(), output);
  }
  
  // optional bool featureRemoteFileAccessEnabled = 8;
  if (has_featureremotefileaccessenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->featureremotefileaccessenabled(), output);
  }
  
  // optional bool featureFSDatasetTypeEnabled = 9;
  if (has_featurefsdatasettypeenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->featurefsdatasettypeenabled(), output);
  }
  
  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->version(), output);
  }
  
  // optional bool featureVirtSyncEnabled = 11;
  if (has_featurevirtsyncenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->featurevirtsyncenabled(), output);
  }
  
  // optional bool featureMyStorageServerEnabled = 12;
  if (has_featuremystorageserverenabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->featuremystorageserverenabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStorageNodeFeaturesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // optional bool isVirtDrive = 4;
  if (has_isvirtdrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvirtdrive(), target);
  }
  
  // optional bool isMediaServer = 5;
  if (has_ismediaserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ismediaserver(), target);
  }
  
  // optional bool featureMediaServerEnabled = 6;
  if (has_featuremediaserverenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->featuremediaserverenabled(), target);
  }
  
  // optional bool featureVirtDriveEnabled = 7;
  if (has_featurevirtdriveenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->featurevirtdriveenabled(), target);
  }
  
  // optional bool featureRemoteFileAccessEnabled = 8;
  if (has_featureremotefileaccessenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->featureremotefileaccessenabled(), target);
  }
  
  // optional bool featureFSDatasetTypeEnabled = 9;
  if (has_featurefsdatasettypeenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->featurefsdatasettypeenabled(), target);
  }
  
  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->version(), target);
  }
  
  // optional bool featureVirtSyncEnabled = 11;
  if (has_featurevirtsyncenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->featurevirtsyncenabled(), target);
  }
  
  // optional bool featureMyStorageServerEnabled = 12;
  if (has_featuremystorageserverenabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->featuremystorageserverenabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStorageNodeFeaturesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional bool isVirtDrive = 4;
    if (has_isvirtdrive()) {
      total_size += 1 + 1;
    }
    
    // optional bool isMediaServer = 5;
    if (has_ismediaserver()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureMediaServerEnabled = 6;
    if (has_featuremediaserverenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureVirtDriveEnabled = 7;
    if (has_featurevirtdriveenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureRemoteFileAccessEnabled = 8;
    if (has_featureremotefileaccessenabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool featureFSDatasetTypeEnabled = 9;
    if (has_featurefsdatasettypeenabled()) {
      total_size += 1 + 1;
    }
    
    // optional string version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional bool featureVirtSyncEnabled = 11;
    if (has_featurevirtsyncenabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool featureMyStorageServerEnabled = 12;
    if (has_featuremystorageserverenabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStorageNodeFeaturesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStorageNodeFeaturesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStorageNodeFeaturesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStorageNodeFeaturesInput::MergeFrom(const UpdateStorageNodeFeaturesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_isvirtdrive()) {
      set_isvirtdrive(from.isvirtdrive());
    }
    if (from.has_ismediaserver()) {
      set_ismediaserver(from.ismediaserver());
    }
    if (from.has_featuremediaserverenabled()) {
      set_featuremediaserverenabled(from.featuremediaserverenabled());
    }
    if (from.has_featurevirtdriveenabled()) {
      set_featurevirtdriveenabled(from.featurevirtdriveenabled());
    }
    if (from.has_featureremotefileaccessenabled()) {
      set_featureremotefileaccessenabled(from.featureremotefileaccessenabled());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_featurefsdatasettypeenabled()) {
      set_featurefsdatasettypeenabled(from.featurefsdatasettypeenabled());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_featurevirtsyncenabled()) {
      set_featurevirtsyncenabled(from.featurevirtsyncenabled());
    }
    if (from.has_featuremystorageserverenabled()) {
      set_featuremystorageserverenabled(from.featuremystorageserverenabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStorageNodeFeaturesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStorageNodeFeaturesInput::CopyFrom(const UpdateStorageNodeFeaturesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStorageNodeFeaturesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void UpdateStorageNodeFeaturesInput::Swap(UpdateStorageNodeFeaturesInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(isvirtdrive_, other->isvirtdrive_);
    std::swap(ismediaserver_, other->ismediaserver_);
    std::swap(featuremediaserverenabled_, other->featuremediaserverenabled_);
    std::swap(featurevirtdriveenabled_, other->featurevirtdriveenabled_);
    std::swap(featureremotefileaccessenabled_, other->featureremotefileaccessenabled_);
    std::swap(featurefsdatasettypeenabled_, other->featurefsdatasettypeenabled_);
    std::swap(version_, other->version_);
    std::swap(featurevirtsyncenabled_, other->featurevirtsyncenabled_);
    std::swap(featuremystorageserverenabled_, other->featuremystorageserverenabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStorageNodeFeaturesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStorageNodeFeaturesInput_descriptor_;
  metadata.reflection = UpdateStorageNodeFeaturesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStorageNodeFeaturesOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateStorageNodeFeaturesOutput::UpdateStorageNodeFeaturesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStorageNodeFeaturesOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateStorageNodeFeaturesOutput::UpdateStorageNodeFeaturesOutput(const UpdateStorageNodeFeaturesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStorageNodeFeaturesOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStorageNodeFeaturesOutput::~UpdateStorageNodeFeaturesOutput() {
  SharedDtor();
}

void UpdateStorageNodeFeaturesOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateStorageNodeFeaturesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStorageNodeFeaturesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStorageNodeFeaturesOutput_descriptor_;
}

const UpdateStorageNodeFeaturesOutput& UpdateStorageNodeFeaturesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateStorageNodeFeaturesOutput* UpdateStorageNodeFeaturesOutput::default_instance_ = NULL;

UpdateStorageNodeFeaturesOutput* UpdateStorageNodeFeaturesOutput::New() const {
  return new UpdateStorageNodeFeaturesOutput;
}

void UpdateStorageNodeFeaturesOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStorageNodeFeaturesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStorageNodeFeaturesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStorageNodeFeaturesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStorageNodeFeaturesOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStorageNodeFeaturesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStorageNodeFeaturesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStorageNodeFeaturesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStorageNodeFeaturesOutput::MergeFrom(const UpdateStorageNodeFeaturesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStorageNodeFeaturesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStorageNodeFeaturesOutput::CopyFrom(const UpdateStorageNodeFeaturesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStorageNodeFeaturesOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateStorageNodeFeaturesOutput::Swap(UpdateStorageNodeFeaturesOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStorageNodeFeaturesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStorageNodeFeaturesOutput_descriptor_;
  metadata.reflection = UpdateStorageNodeFeaturesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPSNDatasetLocationInput::kSessionFieldNumber;
const int GetPSNDatasetLocationInput::kUserIdFieldNumber;
const int GetPSNDatasetLocationInput::kDatasetUserIdFieldNumber;
const int GetPSNDatasetLocationInput::kDatasetIdFieldNumber;
const int GetPSNDatasetLocationInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetPSNDatasetLocationInput::GetPSNDatasetLocationInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPSNDatasetLocationInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetPSNDatasetLocationInput::GetPSNDatasetLocationInput(const GetPSNDatasetLocationInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPSNDatasetLocationInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetuserid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPSNDatasetLocationInput::~GetPSNDatasetLocationInput() {
  SharedDtor();
}

void GetPSNDatasetLocationInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetPSNDatasetLocationInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPSNDatasetLocationInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPSNDatasetLocationInput_descriptor_;
}

const GetPSNDatasetLocationInput& GetPSNDatasetLocationInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetPSNDatasetLocationInput* GetPSNDatasetLocationInput::default_instance_ = NULL;

GetPSNDatasetLocationInput* GetPSNDatasetLocationInput::New() const {
  return new GetPSNDatasetLocationInput;
}

void GetPSNDatasetLocationInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    datasetuserid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPSNDatasetLocationInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetUserId;
        break;
      }
      
      // required fixed64 datasetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetuserid_)));
          set_has_datasetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPSNDatasetLocationInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 datasetUserId = 3;
  if (has_datasetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetuserid(), output);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datasetid(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPSNDatasetLocationInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 datasetUserId = 3;
  if (has_datasetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetuserid(), target);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datasetid(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPSNDatasetLocationInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetUserId = 3;
    if (has_datasetuserid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 4;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPSNDatasetLocationInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPSNDatasetLocationInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPSNDatasetLocationInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPSNDatasetLocationInput::MergeFrom(const GetPSNDatasetLocationInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetuserid()) {
      set_datasetuserid(from.datasetuserid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPSNDatasetLocationInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPSNDatasetLocationInput::CopyFrom(const GetPSNDatasetLocationInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPSNDatasetLocationInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetPSNDatasetLocationInput::Swap(GetPSNDatasetLocationInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetuserid_, other->datasetuserid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPSNDatasetLocationInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPSNDatasetLocationInput_descriptor_;
  metadata.reflection = GetPSNDatasetLocationInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPSNDatasetLocationOutput::kErrorFieldNumber;
const int GetPSNDatasetLocationOutput::kStorageClusterIdFieldNumber;
#endif  // !_MSC_VER

GetPSNDatasetLocationOutput::GetPSNDatasetLocationOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPSNDatasetLocationOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetPSNDatasetLocationOutput::GetPSNDatasetLocationOutput(const GetPSNDatasetLocationOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPSNDatasetLocationOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPSNDatasetLocationOutput::~GetPSNDatasetLocationOutput() {
  SharedDtor();
}

void GetPSNDatasetLocationOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetPSNDatasetLocationOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPSNDatasetLocationOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPSNDatasetLocationOutput_descriptor_;
}

const GetPSNDatasetLocationOutput& GetPSNDatasetLocationOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetPSNDatasetLocationOutput* GetPSNDatasetLocationOutput::default_instance_ = NULL;

GetPSNDatasetLocationOutput* GetPSNDatasetLocationOutput::New() const {
  return new GetPSNDatasetLocationOutput;
}

void GetPSNDatasetLocationOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    storageclusterid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPSNDatasetLocationOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_storageClusterId;
        break;
      }
      
      // optional fixed64 storageClusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPSNDatasetLocationOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 storageClusterId = 2;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->storageclusterid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPSNDatasetLocationOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 storageClusterId = 2;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->storageclusterid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPSNDatasetLocationOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 storageClusterId = 2;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPSNDatasetLocationOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPSNDatasetLocationOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPSNDatasetLocationOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPSNDatasetLocationOutput::MergeFrom(const GetPSNDatasetLocationOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPSNDatasetLocationOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPSNDatasetLocationOutput::CopyFrom(const GetPSNDatasetLocationOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPSNDatasetLocationOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetPSNDatasetLocationOutput::Swap(GetPSNDatasetLocationOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPSNDatasetLocationOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPSNDatasetLocationOutput_descriptor_;
  metadata.reflection = GetPSNDatasetLocationOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePSNDatasetStatusInput::kSessionFieldNumber;
const int UpdatePSNDatasetStatusInput::kUserIdFieldNumber;
const int UpdatePSNDatasetStatusInput::kDatasetUserIdFieldNumber;
const int UpdatePSNDatasetStatusInput::kDatasetIdFieldNumber;
const int UpdatePSNDatasetStatusInput::kClusterIdFieldNumber;
const int UpdatePSNDatasetStatusInput::kDatasetSizeFieldNumber;
const int UpdatePSNDatasetStatusInput::kDatasetVersionFieldNumber;
const int UpdatePSNDatasetStatusInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UpdatePSNDatasetStatusInput::UpdatePSNDatasetStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePSNDatasetStatusInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

UpdatePSNDatasetStatusInput::UpdatePSNDatasetStatusInput(const UpdatePSNDatasetStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePSNDatasetStatusInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetuserid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  datasetsize_ = GOOGLE_ULONGLONG(0);
  datasetversion_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePSNDatasetStatusInput::~UpdatePSNDatasetStatusInput() {
  SharedDtor();
}

void UpdatePSNDatasetStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void UpdatePSNDatasetStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePSNDatasetStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePSNDatasetStatusInput_descriptor_;
}

const UpdatePSNDatasetStatusInput& UpdatePSNDatasetStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdatePSNDatasetStatusInput* UpdatePSNDatasetStatusInput::default_instance_ = NULL;

UpdatePSNDatasetStatusInput* UpdatePSNDatasetStatusInput::New() const {
  return new UpdatePSNDatasetStatusInput;
}

void UpdatePSNDatasetStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    datasetuserid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    datasetsize_ = GOOGLE_ULONGLONG(0);
    datasetversion_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePSNDatasetStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetUserId;
        break;
      }
      
      // required fixed64 datasetUserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetUserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetuserid_)));
          set_has_datasetuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_datasetSize;
        break;
      }
      
      // required fixed64 datasetSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetsize_)));
          set_has_datasetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_datasetVersion;
        break;
      }
      
      // required fixed64 datasetVersion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetversion_)));
          set_has_datasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_version;
        break;
      }
      
      // optional string version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePSNDatasetStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 datasetUserId = 3;
  if (has_datasetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetuserid(), output);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->datasetid(), output);
  }
  
  // required fixed64 clusterId = 5;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->clusterid(), output);
  }
  
  // required fixed64 datasetSize = 6;
  if (has_datasetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->datasetsize(), output);
  }
  
  // required fixed64 datasetVersion = 7;
  if (has_datasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->datasetversion(), output);
  }
  
  // optional string version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePSNDatasetStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 datasetUserId = 3;
  if (has_datasetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetuserid(), target);
  }
  
  // required fixed64 datasetId = 4;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->datasetid(), target);
  }
  
  // required fixed64 clusterId = 5;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->clusterid(), target);
  }
  
  // required fixed64 datasetSize = 6;
  if (has_datasetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->datasetsize(), target);
  }
  
  // required fixed64 datasetVersion = 7;
  if (has_datasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->datasetversion(), target);
  }
  
  // optional string version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePSNDatasetStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetUserId = 3;
    if (has_datasetuserid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 4;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 5;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetSize = 6;
    if (has_datasetsize()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetVersion = 7;
    if (has_datasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePSNDatasetStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePSNDatasetStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePSNDatasetStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePSNDatasetStatusInput::MergeFrom(const UpdatePSNDatasetStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetuserid()) {
      set_datasetuserid(from.datasetuserid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_datasetsize()) {
      set_datasetsize(from.datasetsize());
    }
    if (from.has_datasetversion()) {
      set_datasetversion(from.datasetversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePSNDatasetStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePSNDatasetStatusInput::CopyFrom(const UpdatePSNDatasetStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePSNDatasetStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void UpdatePSNDatasetStatusInput::Swap(UpdatePSNDatasetStatusInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(datasetuserid_, other->datasetuserid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(datasetsize_, other->datasetsize_);
    std::swap(datasetversion_, other->datasetversion_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePSNDatasetStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePSNDatasetStatusInput_descriptor_;
  metadata.reflection = UpdatePSNDatasetStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePSNDatasetStatusOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdatePSNDatasetStatusOutput::UpdatePSNDatasetStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePSNDatasetStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdatePSNDatasetStatusOutput::UpdatePSNDatasetStatusOutput(const UpdatePSNDatasetStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePSNDatasetStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePSNDatasetStatusOutput::~UpdatePSNDatasetStatusOutput() {
  SharedDtor();
}

void UpdatePSNDatasetStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdatePSNDatasetStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePSNDatasetStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePSNDatasetStatusOutput_descriptor_;
}

const UpdatePSNDatasetStatusOutput& UpdatePSNDatasetStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdatePSNDatasetStatusOutput* UpdatePSNDatasetStatusOutput::default_instance_ = NULL;

UpdatePSNDatasetStatusOutput* UpdatePSNDatasetStatusOutput::New() const {
  return new UpdatePSNDatasetStatusOutput;
}

void UpdatePSNDatasetStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePSNDatasetStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePSNDatasetStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePSNDatasetStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePSNDatasetStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePSNDatasetStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePSNDatasetStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePSNDatasetStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePSNDatasetStatusOutput::MergeFrom(const UpdatePSNDatasetStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePSNDatasetStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePSNDatasetStatusOutput::CopyFrom(const UpdatePSNDatasetStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePSNDatasetStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdatePSNDatasetStatusOutput::Swap(UpdatePSNDatasetStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePSNDatasetStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePSNDatasetStatusOutput_descriptor_;
  metadata.reflection = UpdatePSNDatasetStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddUserStorageInput::kSessionFieldNumber;
const int AddUserStorageInput::kUserIdFieldNumber;
const int AddUserStorageInput::kStorageClusterIdFieldNumber;
const int AddUserStorageInput::kStorageNameFieldNumber;
const int AddUserStorageInput::kUsageLimitFieldNumber;
const int AddUserStorageInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddUserStorageInput::AddUserStorageInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddUserStorageInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddUserStorageInput::AddUserStorageInput(const AddUserStorageInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddUserStorageInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  storagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usagelimit_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddUserStorageInput::~AddUserStorageInput() {
  SharedDtor();
}

void AddUserStorageInput::SharedDtor() {
  if (storagename_ != &::google::protobuf::internal::kEmptyString) {
    delete storagename_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddUserStorageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUserStorageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUserStorageInput_descriptor_;
}

const AddUserStorageInput& AddUserStorageInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddUserStorageInput* AddUserStorageInput::default_instance_ = NULL;

AddUserStorageInput* AddUserStorageInput::New() const {
  return new AddUserStorageInput;
}

void AddUserStorageInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    if (has_storagename()) {
      if (storagename_ != &::google::protobuf::internal::kEmptyString) {
        storagename_->clear();
      }
    }
    usagelimit_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddUserStorageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_storageClusterId;
        break;
      }
      
      // required fixed64 storageClusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_storageName;
        break;
      }
      
      // required string storageName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storagename().data(), this->storagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_usageLimit;
        break;
      }
      
      // required fixed64 usageLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usageLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &usagelimit_)));
          set_has_usagelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddUserStorageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->storageclusterid(), output);
  }
  
  // required string storageName = 4;
  if (has_storagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storagename().data(), this->storagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->storagename(), output);
  }
  
  // required fixed64 usageLimit = 5;
  if (has_usagelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->usagelimit(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddUserStorageInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->storageclusterid(), target);
  }
  
  // required string storageName = 4;
  if (has_storagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storagename().data(), this->storagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->storagename(), target);
  }
  
  // required fixed64 usageLimit = 5;
  if (has_usagelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->usagelimit(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddUserStorageInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageClusterId = 3;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // required string storageName = 4;
    if (has_storagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storagename());
    }
    
    // required fixed64 usageLimit = 5;
    if (has_usagelimit()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUserStorageInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddUserStorageInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddUserStorageInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddUserStorageInput::MergeFrom(const AddUserStorageInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_storagename()) {
      set_storagename(from.storagename());
    }
    if (from.has_usagelimit()) {
      set_usagelimit(from.usagelimit());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddUserStorageInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUserStorageInput::CopyFrom(const AddUserStorageInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddUserStorageInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddUserStorageInput::Swap(AddUserStorageInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(storagename_, other->storagename_);
    std::swap(usagelimit_, other->usagelimit_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddUserStorageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUserStorageInput_descriptor_;
  metadata.reflection = AddUserStorageInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddUserStorageOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AddUserStorageOutput::AddUserStorageOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddUserStorageOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddUserStorageOutput::AddUserStorageOutput(const AddUserStorageOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddUserStorageOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddUserStorageOutput::~AddUserStorageOutput() {
  SharedDtor();
}

void AddUserStorageOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddUserStorageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddUserStorageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddUserStorageOutput_descriptor_;
}

const AddUserStorageOutput& AddUserStorageOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddUserStorageOutput* AddUserStorageOutput::default_instance_ = NULL;

AddUserStorageOutput* AddUserStorageOutput::New() const {
  return new AddUserStorageOutput;
}

void AddUserStorageOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddUserStorageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddUserStorageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddUserStorageOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddUserStorageOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddUserStorageOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddUserStorageOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddUserStorageOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddUserStorageOutput::MergeFrom(const AddUserStorageOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddUserStorageOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddUserStorageOutput::CopyFrom(const AddUserStorageOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddUserStorageOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddUserStorageOutput::Swap(AddUserStorageOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddUserStorageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddUserStorageOutput_descriptor_;
  metadata.reflection = AddUserStorageOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteUserStorageInput::kSessionFieldNumber;
const int DeleteUserStorageInput::kUserIdFieldNumber;
const int DeleteUserStorageInput::kStorageClusterIdFieldNumber;
const int DeleteUserStorageInput::kVersionFieldNumber;
#endif  // !_MSC_VER

DeleteUserStorageInput::DeleteUserStorageInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteUserStorageInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

DeleteUserStorageInput::DeleteUserStorageInput(const DeleteUserStorageInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteUserStorageInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteUserStorageInput::~DeleteUserStorageInput() {
  SharedDtor();
}

void DeleteUserStorageInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void DeleteUserStorageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteUserStorageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteUserStorageInput_descriptor_;
}

const DeleteUserStorageInput& DeleteUserStorageInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeleteUserStorageInput* DeleteUserStorageInput::default_instance_ = NULL;

DeleteUserStorageInput* DeleteUserStorageInput::New() const {
  return new DeleteUserStorageInput;
}

void DeleteUserStorageInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteUserStorageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_storageClusterId;
        break;
      }
      
      // required fixed64 storageClusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteUserStorageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->storageclusterid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteUserStorageInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->storageclusterid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteUserStorageInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageClusterId = 3;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteUserStorageInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteUserStorageInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteUserStorageInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteUserStorageInput::MergeFrom(const DeleteUserStorageInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteUserStorageInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserStorageInput::CopyFrom(const DeleteUserStorageInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserStorageInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void DeleteUserStorageInput::Swap(DeleteUserStorageInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteUserStorageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteUserStorageInput_descriptor_;
  metadata.reflection = DeleteUserStorageInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteUserStorageOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

DeleteUserStorageOutput::DeleteUserStorageOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteUserStorageOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

DeleteUserStorageOutput::DeleteUserStorageOutput(const DeleteUserStorageOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteUserStorageOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteUserStorageOutput::~DeleteUserStorageOutput() {
  SharedDtor();
}

void DeleteUserStorageOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void DeleteUserStorageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteUserStorageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteUserStorageOutput_descriptor_;
}

const DeleteUserStorageOutput& DeleteUserStorageOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

DeleteUserStorageOutput* DeleteUserStorageOutput::default_instance_ = NULL;

DeleteUserStorageOutput* DeleteUserStorageOutput::New() const {
  return new DeleteUserStorageOutput;
}

void DeleteUserStorageOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteUserStorageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteUserStorageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteUserStorageOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteUserStorageOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteUserStorageOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteUserStorageOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteUserStorageOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteUserStorageOutput::MergeFrom(const DeleteUserStorageOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteUserStorageOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserStorageOutput::CopyFrom(const DeleteUserStorageOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserStorageOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void DeleteUserStorageOutput::Swap(DeleteUserStorageOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteUserStorageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteUserStorageOutput_descriptor_;
  metadata.reflection = DeleteUserStorageOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserStorageNameInput::kSessionFieldNumber;
const int ChangeUserStorageNameInput::kUserIdFieldNumber;
const int ChangeUserStorageNameInput::kStorageClusterIdFieldNumber;
const int ChangeUserStorageNameInput::kNewStorageNameFieldNumber;
const int ChangeUserStorageNameInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ChangeUserStorageNameInput::ChangeUserStorageNameInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserStorageNameInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

ChangeUserStorageNameInput::ChangeUserStorageNameInput(const ChangeUserStorageNameInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserStorageNameInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  newstoragename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserStorageNameInput::~ChangeUserStorageNameInput() {
  SharedDtor();
}

void ChangeUserStorageNameInput::SharedDtor() {
  if (newstoragename_ != &::google::protobuf::internal::kEmptyString) {
    delete newstoragename_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void ChangeUserStorageNameInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserStorageNameInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserStorageNameInput_descriptor_;
}

const ChangeUserStorageNameInput& ChangeUserStorageNameInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeUserStorageNameInput* ChangeUserStorageNameInput::default_instance_ = NULL;

ChangeUserStorageNameInput* ChangeUserStorageNameInput::New() const {
  return new ChangeUserStorageNameInput;
}

void ChangeUserStorageNameInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    if (has_newstoragename()) {
      if (newstoragename_ != &::google::protobuf::internal::kEmptyString) {
        newstoragename_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserStorageNameInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_storageClusterId;
        break;
      }
      
      // required fixed64 storageClusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newStorageName;
        break;
      }
      
      // required string newStorageName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newStorageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newstoragename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newstoragename().data(), this->newstoragename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserStorageNameInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->storageclusterid(), output);
  }
  
  // required string newStorageName = 4;
  if (has_newstoragename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newstoragename().data(), this->newstoragename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->newstoragename(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserStorageNameInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->storageclusterid(), target);
  }
  
  // required string newStorageName = 4;
  if (has_newstoragename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newstoragename().data(), this->newstoragename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newstoragename(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserStorageNameInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageClusterId = 3;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // required string newStorageName = 4;
    if (has_newstoragename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newstoragename());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserStorageNameInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserStorageNameInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserStorageNameInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserStorageNameInput::MergeFrom(const ChangeUserStorageNameInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_newstoragename()) {
      set_newstoragename(from.newstoragename());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserStorageNameInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserStorageNameInput::CopyFrom(const ChangeUserStorageNameInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserStorageNameInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void ChangeUserStorageNameInput::Swap(ChangeUserStorageNameInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(newstoragename_, other->newstoragename_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserStorageNameInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserStorageNameInput_descriptor_;
  metadata.reflection = ChangeUserStorageNameInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserStorageNameOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

ChangeUserStorageNameOutput::ChangeUserStorageNameOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserStorageNameOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ChangeUserStorageNameOutput::ChangeUserStorageNameOutput(const ChangeUserStorageNameOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserStorageNameOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserStorageNameOutput::~ChangeUserStorageNameOutput() {
  SharedDtor();
}

void ChangeUserStorageNameOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ChangeUserStorageNameOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserStorageNameOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserStorageNameOutput_descriptor_;
}

const ChangeUserStorageNameOutput& ChangeUserStorageNameOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeUserStorageNameOutput* ChangeUserStorageNameOutput::default_instance_ = NULL;

ChangeUserStorageNameOutput* ChangeUserStorageNameOutput::New() const {
  return new ChangeUserStorageNameOutput;
}

void ChangeUserStorageNameOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserStorageNameOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserStorageNameOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserStorageNameOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserStorageNameOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserStorageNameOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserStorageNameOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserStorageNameOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserStorageNameOutput::MergeFrom(const ChangeUserStorageNameOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserStorageNameOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserStorageNameOutput::CopyFrom(const ChangeUserStorageNameOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserStorageNameOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ChangeUserStorageNameOutput::Swap(ChangeUserStorageNameOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserStorageNameOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserStorageNameOutput_descriptor_;
  metadata.reflection = ChangeUserStorageNameOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserStorageQuotaInput::kSessionFieldNumber;
const int ChangeUserStorageQuotaInput::kUserIdFieldNumber;
const int ChangeUserStorageQuotaInput::kStorageClusterIdFieldNumber;
const int ChangeUserStorageQuotaInput::kNewLimitFieldNumber;
const int ChangeUserStorageQuotaInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ChangeUserStorageQuotaInput::ChangeUserStorageQuotaInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserStorageQuotaInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

ChangeUserStorageQuotaInput::ChangeUserStorageQuotaInput(const ChangeUserStorageQuotaInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserStorageQuotaInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  newlimit_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserStorageQuotaInput::~ChangeUserStorageQuotaInput() {
  SharedDtor();
}

void ChangeUserStorageQuotaInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void ChangeUserStorageQuotaInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserStorageQuotaInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserStorageQuotaInput_descriptor_;
}

const ChangeUserStorageQuotaInput& ChangeUserStorageQuotaInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeUserStorageQuotaInput* ChangeUserStorageQuotaInput::default_instance_ = NULL;

ChangeUserStorageQuotaInput* ChangeUserStorageQuotaInput::New() const {
  return new ChangeUserStorageQuotaInput;
}

void ChangeUserStorageQuotaInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    newlimit_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserStorageQuotaInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_storageClusterId;
        break;
      }
      
      // required fixed64 storageClusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_newLimit;
        break;
      }
      
      // required fixed64 newLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_newLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &newlimit_)));
          set_has_newlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserStorageQuotaInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->storageclusterid(), output);
  }
  
  // required fixed64 newLimit = 4;
  if (has_newlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->newlimit(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserStorageQuotaInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->storageclusterid(), target);
  }
  
  // required fixed64 newLimit = 4;
  if (has_newlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->newlimit(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserStorageQuotaInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageClusterId = 3;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 newLimit = 4;
    if (has_newlimit()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserStorageQuotaInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserStorageQuotaInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserStorageQuotaInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserStorageQuotaInput::MergeFrom(const ChangeUserStorageQuotaInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_newlimit()) {
      set_newlimit(from.newlimit());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserStorageQuotaInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserStorageQuotaInput::CopyFrom(const ChangeUserStorageQuotaInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserStorageQuotaInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void ChangeUserStorageQuotaInput::Swap(ChangeUserStorageQuotaInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(newlimit_, other->newlimit_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserStorageQuotaInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserStorageQuotaInput_descriptor_;
  metadata.reflection = ChangeUserStorageQuotaInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserStorageQuotaOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

ChangeUserStorageQuotaOutput::ChangeUserStorageQuotaOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserStorageQuotaOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ChangeUserStorageQuotaOutput::ChangeUserStorageQuotaOutput(const ChangeUserStorageQuotaOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserStorageQuotaOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserStorageQuotaOutput::~ChangeUserStorageQuotaOutput() {
  SharedDtor();
}

void ChangeUserStorageQuotaOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ChangeUserStorageQuotaOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserStorageQuotaOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserStorageQuotaOutput_descriptor_;
}

const ChangeUserStorageQuotaOutput& ChangeUserStorageQuotaOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeUserStorageQuotaOutput* ChangeUserStorageQuotaOutput::default_instance_ = NULL;

ChangeUserStorageQuotaOutput* ChangeUserStorageQuotaOutput::New() const {
  return new ChangeUserStorageQuotaOutput;
}

void ChangeUserStorageQuotaOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserStorageQuotaOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserStorageQuotaOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserStorageQuotaOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserStorageQuotaOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserStorageQuotaOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserStorageQuotaOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserStorageQuotaOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserStorageQuotaOutput::MergeFrom(const ChangeUserStorageQuotaOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserStorageQuotaOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserStorageQuotaOutput::CopyFrom(const ChangeUserStorageQuotaOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserStorageQuotaOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ChangeUserStorageQuotaOutput::Swap(ChangeUserStorageQuotaOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserStorageQuotaOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserStorageQuotaOutput_descriptor_;
  metadata.reflection = ChangeUserStorageQuotaOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListUserStorageInput::kSessionFieldNumber;
const int ListUserStorageInput::kUserIdFieldNumber;
const int ListUserStorageInput::kDeviceIdFieldNumber;
const int ListUserStorageInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ListUserStorageInput::ListUserStorageInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListUserStorageInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

ListUserStorageInput::ListUserStorageInput(const ListUserStorageInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListUserStorageInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListUserStorageInput::~ListUserStorageInput() {
  SharedDtor();
}

void ListUserStorageInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void ListUserStorageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListUserStorageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListUserStorageInput_descriptor_;
}

const ListUserStorageInput& ListUserStorageInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ListUserStorageInput* ListUserStorageInput::default_instance_ = NULL;

ListUserStorageInput* ListUserStorageInput::New() const {
  return new ListUserStorageInput;
}

void ListUserStorageInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListUserStorageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // optional fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListUserStorageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // optional fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListUserStorageInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // optional fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListUserStorageInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListUserStorageInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListUserStorageInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListUserStorageInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListUserStorageInput::MergeFrom(const ListUserStorageInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListUserStorageInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserStorageInput::CopyFrom(const ListUserStorageInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserStorageInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void ListUserStorageInput::Swap(ListUserStorageInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListUserStorageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListUserStorageInput_descriptor_;
  metadata.reflection = ListUserStorageInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListUserStorageOutput::kErrorFieldNumber;
const int ListUserStorageOutput::kStorageAssignmentsFieldNumber;
#endif  // !_MSC_VER

ListUserStorageOutput::ListUserStorageOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListUserStorageOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ListUserStorageOutput::ListUserStorageOutput(const ListUserStorageOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListUserStorageOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListUserStorageOutput::~ListUserStorageOutput() {
  SharedDtor();
}

void ListUserStorageOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ListUserStorageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListUserStorageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListUserStorageOutput_descriptor_;
}

const ListUserStorageOutput& ListUserStorageOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ListUserStorageOutput* ListUserStorageOutput::default_instance_ = NULL;

ListUserStorageOutput* ListUserStorageOutput::New() const {
  return new ListUserStorageOutput;
}

void ListUserStorageOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  storageassignments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListUserStorageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storageAssignments;
        break;
      }
      
      // repeated .vplex.vsDirectory.UserStorage storageAssignments = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageAssignments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storageassignments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storageAssignments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListUserStorageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.UserStorage storageAssignments = 2;
  for (int i = 0; i < this->storageassignments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storageassignments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListUserStorageOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.UserStorage storageAssignments = 2;
  for (int i = 0; i < this->storageassignments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storageassignments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListUserStorageOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.UserStorage storageAssignments = 2;
  total_size += 1 * this->storageassignments_size();
  for (int i = 0; i < this->storageassignments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storageassignments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListUserStorageOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListUserStorageOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListUserStorageOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListUserStorageOutput::MergeFrom(const ListUserStorageOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  storageassignments_.MergeFrom(from.storageassignments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListUserStorageOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserStorageOutput::CopyFrom(const ListUserStorageOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserStorageOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < storageassignments_size(); i++) {
    if (!this->storageassignments(i).IsInitialized()) return false;
  }
  return true;
}

void ListUserStorageOutput::Swap(ListUserStorageOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    storageassignments_.Swap(&other->storageassignments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListUserStorageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListUserStorageOutput_descriptor_;
  metadata.reflection = ListUserStorageOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserStorageAddressInput::kSessionFieldNumber;
const int GetUserStorageAddressInput::kUserIdFieldNumber;
const int GetUserStorageAddressInput::kStorageClusterIdFieldNumber;
const int GetUserStorageAddressInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetUserStorageAddressInput::GetUserStorageAddressInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserStorageAddressInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

GetUserStorageAddressInput::GetUserStorageAddressInput(const GetUserStorageAddressInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserStorageAddressInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserStorageAddressInput::~GetUserStorageAddressInput() {
  SharedDtor();
}

void GetUserStorageAddressInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void GetUserStorageAddressInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserStorageAddressInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserStorageAddressInput_descriptor_;
}

const GetUserStorageAddressInput& GetUserStorageAddressInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetUserStorageAddressInput* GetUserStorageAddressInput::default_instance_ = NULL;

GetUserStorageAddressInput* GetUserStorageAddressInput::New() const {
  return new GetUserStorageAddressInput;
}

void GetUserStorageAddressInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserStorageAddressInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_storageClusterId;
        break;
      }
      
      // required fixed64 storageClusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserStorageAddressInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->storageclusterid(), output);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserStorageAddressInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 storageClusterId = 3;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->storageclusterid(), target);
  }
  
  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserStorageAddressInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageClusterId = 3;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserStorageAddressInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserStorageAddressInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserStorageAddressInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserStorageAddressInput::MergeFrom(const GetUserStorageAddressInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserStorageAddressInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserStorageAddressInput::CopyFrom(const GetUserStorageAddressInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserStorageAddressInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void GetUserStorageAddressInput::Swap(GetUserStorageAddressInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserStorageAddressInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserStorageAddressInput_descriptor_;
  metadata.reflection = GetUserStorageAddressInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStorageAddress::kDirectAddressFieldNumber;
const int UserStorageAddress::kDirectPortFieldNumber;
const int UserStorageAddress::kProxyAddressFieldNumber;
const int UserStorageAddress::kProxyPortFieldNumber;
const int UserStorageAddress::kInternalDirectAddressFieldNumber;
const int UserStorageAddress::kDirectSecurePortFieldNumber;
const int UserStorageAddress::kAccessHandleFieldNumber;
const int UserStorageAddress::kAccessTicketFieldNumber;
#endif  // !_MSC_VER

UserStorageAddress::UserStorageAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStorageAddress::InitAsDefaultInstance() {
}

UserStorageAddress::UserStorageAddress(const UserStorageAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStorageAddress::SharedCtor() {
  _cached_size_ = 0;
  direct_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direct_port_ = 0;
  proxy_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proxy_port_ = 0;
  internal_direct_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direct_secure_port_ = 0;
  access_handle_ = GOOGLE_ULONGLONG(0);
  access_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStorageAddress::~UserStorageAddress() {
  SharedDtor();
}

void UserStorageAddress::SharedDtor() {
  if (direct_address_ != &::google::protobuf::internal::kEmptyString) {
    delete direct_address_;
  }
  if (proxy_address_ != &::google::protobuf::internal::kEmptyString) {
    delete proxy_address_;
  }
  if (internal_direct_address_ != &::google::protobuf::internal::kEmptyString) {
    delete internal_direct_address_;
  }
  if (access_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete access_ticket_;
  }
  if (this != default_instance_) {
  }
}

void UserStorageAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStorageAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStorageAddress_descriptor_;
}

const UserStorageAddress& UserStorageAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UserStorageAddress* UserStorageAddress::default_instance_ = NULL;

UserStorageAddress* UserStorageAddress::New() const {
  return new UserStorageAddress;
}

void UserStorageAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_direct_address()) {
      if (direct_address_ != &::google::protobuf::internal::kEmptyString) {
        direct_address_->clear();
      }
    }
    direct_port_ = 0;
    if (has_proxy_address()) {
      if (proxy_address_ != &::google::protobuf::internal::kEmptyString) {
        proxy_address_->clear();
      }
    }
    proxy_port_ = 0;
    if (has_internal_direct_address()) {
      if (internal_direct_address_ != &::google::protobuf::internal::kEmptyString) {
        internal_direct_address_->clear();
      }
    }
    direct_secure_port_ = 0;
    access_handle_ = GOOGLE_ULONGLONG(0);
    if (has_access_ticket()) {
      if (access_ticket_ != &::google::protobuf::internal::kEmptyString) {
        access_ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStorageAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string direct_address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direct_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->direct_address().data(), this->direct_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_direct_port;
        break;
      }
      
      // optional int32 direct_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_port_)));
          set_has_direct_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proxy_address;
        break;
      }
      
      // optional string proxy_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxy_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proxy_address().data(), this->proxy_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proxy_port;
        break;
      }
      
      // optional int32 proxy_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_port_)));
          set_has_proxy_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_internal_direct_address;
        break;
      }
      
      // optional string internal_direct_address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internal_direct_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internal_direct_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->internal_direct_address().data(), this->internal_direct_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_direct_secure_port;
        break;
      }
      
      // optional int32 direct_secure_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct_secure_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_secure_port_)));
          set_has_direct_secure_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_access_handle;
        break;
      }
      
      // optional fixed64 access_handle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_access_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &access_handle_)));
          set_has_access_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_access_ticket;
        break;
      }
      
      // optional bytes access_ticket = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_access_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_access_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStorageAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string direct_address = 1;
  if (has_direct_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direct_address().data(), this->direct_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->direct_address(), output);
  }
  
  // optional int32 direct_port = 2;
  if (has_direct_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->direct_port(), output);
  }
  
  // optional string proxy_address = 3;
  if (has_proxy_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxy_address().data(), this->proxy_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proxy_address(), output);
  }
  
  // optional int32 proxy_port = 4;
  if (has_proxy_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->proxy_port(), output);
  }
  
  // optional string internal_direct_address = 5;
  if (has_internal_direct_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->internal_direct_address().data(), this->internal_direct_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->internal_direct_address(), output);
  }
  
  // optional int32 direct_secure_port = 6;
  if (has_direct_secure_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->direct_secure_port(), output);
  }
  
  // optional fixed64 access_handle = 7;
  if (has_access_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->access_handle(), output);
  }
  
  // optional bytes access_ticket = 8;
  if (has_access_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->access_ticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStorageAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string direct_address = 1;
  if (has_direct_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direct_address().data(), this->direct_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->direct_address(), target);
  }
  
  // optional int32 direct_port = 2;
  if (has_direct_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->direct_port(), target);
  }
  
  // optional string proxy_address = 3;
  if (has_proxy_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxy_address().data(), this->proxy_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxy_address(), target);
  }
  
  // optional int32 proxy_port = 4;
  if (has_proxy_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->proxy_port(), target);
  }
  
  // optional string internal_direct_address = 5;
  if (has_internal_direct_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->internal_direct_address().data(), this->internal_direct_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->internal_direct_address(), target);
  }
  
  // optional int32 direct_secure_port = 6;
  if (has_direct_secure_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->direct_secure_port(), target);
  }
  
  // optional fixed64 access_handle = 7;
  if (has_access_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->access_handle(), target);
  }
  
  // optional bytes access_ticket = 8;
  if (has_access_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->access_ticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStorageAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string direct_address = 1;
    if (has_direct_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direct_address());
    }
    
    // optional int32 direct_port = 2;
    if (has_direct_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direct_port());
    }
    
    // optional string proxy_address = 3;
    if (has_proxy_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxy_address());
    }
    
    // optional int32 proxy_port = 4;
    if (has_proxy_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxy_port());
    }
    
    // optional string internal_direct_address = 5;
    if (has_internal_direct_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internal_direct_address());
    }
    
    // optional int32 direct_secure_port = 6;
    if (has_direct_secure_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direct_secure_port());
    }
    
    // optional fixed64 access_handle = 7;
    if (has_access_handle()) {
      total_size += 1 + 8;
    }
    
    // optional bytes access_ticket = 8;
    if (has_access_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->access_ticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStorageAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStorageAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStorageAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStorageAddress::MergeFrom(const UserStorageAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direct_address()) {
      set_direct_address(from.direct_address());
    }
    if (from.has_direct_port()) {
      set_direct_port(from.direct_port());
    }
    if (from.has_proxy_address()) {
      set_proxy_address(from.proxy_address());
    }
    if (from.has_proxy_port()) {
      set_proxy_port(from.proxy_port());
    }
    if (from.has_internal_direct_address()) {
      set_internal_direct_address(from.internal_direct_address());
    }
    if (from.has_direct_secure_port()) {
      set_direct_secure_port(from.direct_secure_port());
    }
    if (from.has_access_handle()) {
      set_access_handle(from.access_handle());
    }
    if (from.has_access_ticket()) {
      set_access_ticket(from.access_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStorageAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStorageAddress::CopyFrom(const UserStorageAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStorageAddress::IsInitialized() const {
  
  return true;
}

void UserStorageAddress::Swap(UserStorageAddress* other) {
  if (other != this) {
    std::swap(direct_address_, other->direct_address_);
    std::swap(direct_port_, other->direct_port_);
    std::swap(proxy_address_, other->proxy_address_);
    std::swap(proxy_port_, other->proxy_port_);
    std::swap(internal_direct_address_, other->internal_direct_address_);
    std::swap(direct_secure_port_, other->direct_secure_port_);
    std::swap(access_handle_, other->access_handle_);
    std::swap(access_ticket_, other->access_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStorageAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStorageAddress_descriptor_;
  metadata.reflection = UserStorageAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserStorageAddressOutput::kErrorFieldNumber;
const int GetUserStorageAddressOutput::kDirectAddressFieldNumber;
const int GetUserStorageAddressOutput::kDirectPortFieldNumber;
const int GetUserStorageAddressOutput::kProxyAddressFieldNumber;
const int GetUserStorageAddressOutput::kProxyPortFieldNumber;
const int GetUserStorageAddressOutput::kInternalDirectAddressFieldNumber;
const int GetUserStorageAddressOutput::kDirectSecurePortFieldNumber;
const int GetUserStorageAddressOutput::kAccessHandleFieldNumber;
const int GetUserStorageAddressOutput::kAccessTicketFieldNumber;
#endif  // !_MSC_VER

GetUserStorageAddressOutput::GetUserStorageAddressOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserStorageAddressOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetUserStorageAddressOutput::GetUserStorageAddressOutput(const GetUserStorageAddressOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserStorageAddressOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  directaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  directport_ = 0;
  proxyaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proxyport_ = 0;
  internaldirectaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  directsecureport_ = 0;
  accesshandle_ = GOOGLE_ULONGLONG(0);
  accessticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserStorageAddressOutput::~GetUserStorageAddressOutput() {
  SharedDtor();
}

void GetUserStorageAddressOutput::SharedDtor() {
  if (directaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete directaddress_;
  }
  if (proxyaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete proxyaddress_;
  }
  if (internaldirectaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete internaldirectaddress_;
  }
  if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
    delete accessticket_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetUserStorageAddressOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserStorageAddressOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserStorageAddressOutput_descriptor_;
}

const GetUserStorageAddressOutput& GetUserStorageAddressOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetUserStorageAddressOutput* GetUserStorageAddressOutput::default_instance_ = NULL;

GetUserStorageAddressOutput* GetUserStorageAddressOutput::New() const {
  return new GetUserStorageAddressOutput;
}

void GetUserStorageAddressOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_directaddress()) {
      if (directaddress_ != &::google::protobuf::internal::kEmptyString) {
        directaddress_->clear();
      }
    }
    directport_ = 0;
    if (has_proxyaddress()) {
      if (proxyaddress_ != &::google::protobuf::internal::kEmptyString) {
        proxyaddress_->clear();
      }
    }
    proxyport_ = 0;
    if (has_internaldirectaddress()) {
      if (internaldirectaddress_ != &::google::protobuf::internal::kEmptyString) {
        internaldirectaddress_->clear();
      }
    }
    directsecureport_ = 0;
    accesshandle_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_accessticket()) {
      if (accessticket_ != &::google::protobuf::internal::kEmptyString) {
        accessticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserStorageAddressOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_directAddress;
        break;
      }
      
      // optional string directAddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directaddress().data(), this->directaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_directPort;
        break;
      }
      
      // optional int32 directPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directport_)));
          set_has_directport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_proxyAddress;
        break;
      }
      
      // optional string proxyAddress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proxyAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proxyaddress().data(), this->proxyaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proxyPort;
        break;
      }
      
      // optional int32 proxyPort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxyPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxyport_)));
          set_has_proxyport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_internalDirectAddress;
        break;
      }
      
      // optional string internalDirectAddress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_internalDirectAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_internaldirectaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->internaldirectaddress().data(), this->internaldirectaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_directSecurePort;
        break;
      }
      
      // optional int32 directSecurePort = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directSecurePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directsecureport_)));
          set_has_directsecureport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_accessHandle;
        break;
      }
      
      // optional fixed64 accessHandle = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accessHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &accesshandle_)));
          set_has_accesshandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_accessTicket;
        break;
      }
      
      // optional bytes accessTicket = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessTicket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accessticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserStorageAddressOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional string directAddress = 2;
  if (has_directaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directaddress().data(), this->directaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->directaddress(), output);
  }
  
  // optional int32 directPort = 3;
  if (has_directport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->directport(), output);
  }
  
  // optional string proxyAddress = 4;
  if (has_proxyaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxyaddress().data(), this->proxyaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->proxyaddress(), output);
  }
  
  // optional int32 proxyPort = 5;
  if (has_proxyport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->proxyport(), output);
  }
  
  // optional string internalDirectAddress = 6;
  if (has_internaldirectaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->internaldirectaddress().data(), this->internaldirectaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->internaldirectaddress(), output);
  }
  
  // optional int32 directSecurePort = 7;
  if (has_directsecureport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->directsecureport(), output);
  }
  
  // optional fixed64 accessHandle = 8;
  if (has_accesshandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->accesshandle(), output);
  }
  
  // optional bytes accessTicket = 9;
  if (has_accessticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->accessticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserStorageAddressOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional string directAddress = 2;
  if (has_directaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directaddress().data(), this->directaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->directaddress(), target);
  }
  
  // optional int32 directPort = 3;
  if (has_directport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->directport(), target);
  }
  
  // optional string proxyAddress = 4;
  if (has_proxyaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proxyaddress().data(), this->proxyaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->proxyaddress(), target);
  }
  
  // optional int32 proxyPort = 5;
  if (has_proxyport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->proxyport(), target);
  }
  
  // optional string internalDirectAddress = 6;
  if (has_internaldirectaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->internaldirectaddress().data(), this->internaldirectaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->internaldirectaddress(), target);
  }
  
  // optional int32 directSecurePort = 7;
  if (has_directsecureport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->directsecureport(), target);
  }
  
  // optional fixed64 accessHandle = 8;
  if (has_accesshandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->accesshandle(), target);
  }
  
  // optional bytes accessTicket = 9;
  if (has_accessticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->accessticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserStorageAddressOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional string directAddress = 2;
    if (has_directaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directaddress());
    }
    
    // optional int32 directPort = 3;
    if (has_directport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directport());
    }
    
    // optional string proxyAddress = 4;
    if (has_proxyaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyaddress());
    }
    
    // optional int32 proxyPort = 5;
    if (has_proxyport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proxyport());
    }
    
    // optional string internalDirectAddress = 6;
    if (has_internaldirectaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->internaldirectaddress());
    }
    
    // optional int32 directSecurePort = 7;
    if (has_directsecureport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directsecureport());
    }
    
    // optional fixed64 accessHandle = 8;
    if (has_accesshandle()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes accessTicket = 9;
    if (has_accessticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accessticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserStorageAddressOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserStorageAddressOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserStorageAddressOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserStorageAddressOutput::MergeFrom(const GetUserStorageAddressOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_directaddress()) {
      set_directaddress(from.directaddress());
    }
    if (from.has_directport()) {
      set_directport(from.directport());
    }
    if (from.has_proxyaddress()) {
      set_proxyaddress(from.proxyaddress());
    }
    if (from.has_proxyport()) {
      set_proxyport(from.proxyport());
    }
    if (from.has_internaldirectaddress()) {
      set_internaldirectaddress(from.internaldirectaddress());
    }
    if (from.has_directsecureport()) {
      set_directsecureport(from.directsecureport());
    }
    if (from.has_accesshandle()) {
      set_accesshandle(from.accesshandle());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_accessticket()) {
      set_accessticket(from.accessticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserStorageAddressOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserStorageAddressOutput::CopyFrom(const GetUserStorageAddressOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserStorageAddressOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetUserStorageAddressOutput::Swap(GetUserStorageAddressOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(directaddress_, other->directaddress_);
    std::swap(directport_, other->directport_);
    std::swap(proxyaddress_, other->proxyaddress_);
    std::swap(proxyport_, other->proxyport_);
    std::swap(internaldirectaddress_, other->internaldirectaddress_);
    std::swap(directsecureport_, other->directsecureport_);
    std::swap(accesshandle_, other->accesshandle_);
    std::swap(accessticket_, other->accessticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserStorageAddressOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserStorageAddressOutput_descriptor_;
  metadata.reflection = GetUserStorageAddressOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignUserDatacenterStorageInput::kUserIdFieldNumber;
const int AssignUserDatacenterStorageInput::kRegionFieldNumber;
const int AssignUserDatacenterStorageInput::kUsageLimitFieldNumber;
const int AssignUserDatacenterStorageInput::kStorageClusterIdFieldNumber;
const int AssignUserDatacenterStorageInput::kPrimaryStorageIdFieldNumber;
const int AssignUserDatacenterStorageInput::kSecondaryStorageIdFieldNumber;
const int AssignUserDatacenterStorageInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AssignUserDatacenterStorageInput::AssignUserDatacenterStorageInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssignUserDatacenterStorageInput::InitAsDefaultInstance() {
}

AssignUserDatacenterStorageInput::AssignUserDatacenterStorageInput(const AssignUserDatacenterStorageInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssignUserDatacenterStorageInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usagelimit_ = GOOGLE_ULONGLONG(0);
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  secondarystorageid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignUserDatacenterStorageInput::~AssignUserDatacenterStorageInput() {
  SharedDtor();
}

void AssignUserDatacenterStorageInput::SharedDtor() {
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void AssignUserDatacenterStorageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignUserDatacenterStorageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignUserDatacenterStorageInput_descriptor_;
}

const AssignUserDatacenterStorageInput& AssignUserDatacenterStorageInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AssignUserDatacenterStorageInput* AssignUserDatacenterStorageInput::default_instance_ = NULL;

AssignUserDatacenterStorageInput* AssignUserDatacenterStorageInput::New() const {
  return new AssignUserDatacenterStorageInput;
}

void AssignUserDatacenterStorageInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    usagelimit_ = GOOGLE_ULONGLONG(0);
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    secondarystorageid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignUserDatacenterStorageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_region;
        break;
      }
      
      // required string region = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_usageLimit;
        break;
      }
      
      // required fixed64 usageLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usageLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &usagelimit_)));
          set_has_usagelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_storageClusterId;
        break;
      }
      
      // optional fixed64 storageClusterId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_primaryStorageId;
        break;
      }
      
      // optional fixed64 primaryStorageId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_secondaryStorageId;
        break;
      }
      
      // optional fixed64 secondaryStorageId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarystorageid_)));
          set_has_secondarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssignUserDatacenterStorageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required string region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->region(), output);
  }
  
  // required fixed64 usageLimit = 3;
  if (has_usagelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->usagelimit(), output);
  }
  
  // optional fixed64 storageClusterId = 4;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->storageclusterid(), output);
  }
  
  // optional fixed64 primaryStorageId = 5;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->primarystorageid(), output);
  }
  
  // optional fixed64 secondaryStorageId = 6;
  if (has_secondarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->secondarystorageid(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssignUserDatacenterStorageInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required string region = 2;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->region(), target);
  }
  
  // required fixed64 usageLimit = 3;
  if (has_usagelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->usagelimit(), target);
  }
  
  // optional fixed64 storageClusterId = 4;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->storageclusterid(), target);
  }
  
  // optional fixed64 primaryStorageId = 5;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->primarystorageid(), target);
  }
  
  // optional fixed64 secondaryStorageId = 6;
  if (has_secondarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->secondarystorageid(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssignUserDatacenterStorageInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required string region = 2;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }
    
    // required fixed64 usageLimit = 3;
    if (has_usagelimit()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 storageClusterId = 4;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryStorageId = 5;
    if (has_primarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryStorageId = 6;
    if (has_secondarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignUserDatacenterStorageInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignUserDatacenterStorageInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignUserDatacenterStorageInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignUserDatacenterStorageInput::MergeFrom(const AssignUserDatacenterStorageInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_usagelimit()) {
      set_usagelimit(from.usagelimit());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_secondarystorageid()) {
      set_secondarystorageid(from.secondarystorageid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignUserDatacenterStorageInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignUserDatacenterStorageInput::CopyFrom(const AssignUserDatacenterStorageInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignUserDatacenterStorageInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AssignUserDatacenterStorageInput::Swap(AssignUserDatacenterStorageInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(region_, other->region_);
    std::swap(usagelimit_, other->usagelimit_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(secondarystorageid_, other->secondarystorageid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignUserDatacenterStorageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignUserDatacenterStorageInput_descriptor_;
  metadata.reflection = AssignUserDatacenterStorageInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssignUserDatacenterStorageOutput::kErrorFieldNumber;
const int AssignUserDatacenterStorageOutput::kStorageAssignmentFieldNumber;
#endif  // !_MSC_VER

AssignUserDatacenterStorageOutput::AssignUserDatacenterStorageOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssignUserDatacenterStorageOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
  storageassignment_ = const_cast< ::vplex::vsDirectory::UserStorage*>(&::vplex::vsDirectory::UserStorage::default_instance());
}

AssignUserDatacenterStorageOutput::AssignUserDatacenterStorageOutput(const AssignUserDatacenterStorageOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssignUserDatacenterStorageOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  storageassignment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssignUserDatacenterStorageOutput::~AssignUserDatacenterStorageOutput() {
  SharedDtor();
}

void AssignUserDatacenterStorageOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
    delete storageassignment_;
  }
}

void AssignUserDatacenterStorageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssignUserDatacenterStorageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssignUserDatacenterStorageOutput_descriptor_;
}

const AssignUserDatacenterStorageOutput& AssignUserDatacenterStorageOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AssignUserDatacenterStorageOutput* AssignUserDatacenterStorageOutput::default_instance_ = NULL;

AssignUserDatacenterStorageOutput* AssignUserDatacenterStorageOutput::New() const {
  return new AssignUserDatacenterStorageOutput;
}

void AssignUserDatacenterStorageOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_storageassignment()) {
      if (storageassignment_ != NULL) storageassignment_->::vplex::vsDirectory::UserStorage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssignUserDatacenterStorageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storageAssignment;
        break;
      }
      
      // optional .vplex.vsDirectory.UserStorage storageAssignment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageAssignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storageassignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssignUserDatacenterStorageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional .vplex.vsDirectory.UserStorage storageAssignment = 2;
  if (has_storageassignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storageassignment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssignUserDatacenterStorageOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional .vplex.vsDirectory.UserStorage storageAssignment = 2;
  if (has_storageassignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storageassignment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssignUserDatacenterStorageOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional .vplex.vsDirectory.UserStorage storageAssignment = 2;
    if (has_storageassignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storageassignment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssignUserDatacenterStorageOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssignUserDatacenterStorageOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssignUserDatacenterStorageOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssignUserDatacenterStorageOutput::MergeFrom(const AssignUserDatacenterStorageOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_storageassignment()) {
      mutable_storageassignment()->::vplex::vsDirectory::UserStorage::MergeFrom(from.storageassignment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssignUserDatacenterStorageOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssignUserDatacenterStorageOutput::CopyFrom(const AssignUserDatacenterStorageOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssignUserDatacenterStorageOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_storageassignment()) {
    if (!this->storageassignment().IsInitialized()) return false;
  }
  return true;
}

void AssignUserDatacenterStorageOutput::Swap(AssignUserDatacenterStorageOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(storageassignment_, other->storageassignment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssignUserDatacenterStorageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssignUserDatacenterStorageOutput_descriptor_;
  metadata.reflection = AssignUserDatacenterStorageOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStorageUnitForDatasetInput::kUserIdFieldNumber;
const int GetStorageUnitForDatasetInput::kDatasetIdFieldNumber;
const int GetStorageUnitForDatasetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetStorageUnitForDatasetInput::GetStorageUnitForDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStorageUnitForDatasetInput::InitAsDefaultInstance() {
}

GetStorageUnitForDatasetInput::GetStorageUnitForDatasetInput(const GetStorageUnitForDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStorageUnitForDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStorageUnitForDatasetInput::~GetStorageUnitForDatasetInput() {
  SharedDtor();
}

void GetStorageUnitForDatasetInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetStorageUnitForDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStorageUnitForDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStorageUnitForDatasetInput_descriptor_;
}

const GetStorageUnitForDatasetInput& GetStorageUnitForDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetStorageUnitForDatasetInput* GetStorageUnitForDatasetInput::default_instance_ = NULL;

GetStorageUnitForDatasetInput* GetStorageUnitForDatasetInput::New() const {
  return new GetStorageUnitForDatasetInput;
}

void GetStorageUnitForDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStorageUnitForDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStorageUnitForDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStorageUnitForDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStorageUnitForDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStorageUnitForDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStorageUnitForDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStorageUnitForDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStorageUnitForDatasetInput::MergeFrom(const GetStorageUnitForDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStorageUnitForDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStorageUnitForDatasetInput::CopyFrom(const GetStorageUnitForDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStorageUnitForDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetStorageUnitForDatasetInput::Swap(GetStorageUnitForDatasetInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStorageUnitForDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStorageUnitForDatasetInput_descriptor_;
  metadata.reflection = GetStorageUnitForDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStorageUnitForDatasetOutput::kErrorFieldNumber;
const int GetStorageUnitForDatasetOutput::kStorageClusterIdFieldNumber;
const int GetStorageUnitForDatasetOutput::kPrimaryStorageIdFieldNumber;
const int GetStorageUnitForDatasetOutput::kSecondaryStorageIdFieldNumber;
const int GetStorageUnitForDatasetOutput::kBackupStorageIdFieldNumber;
#endif  // !_MSC_VER

GetStorageUnitForDatasetOutput::GetStorageUnitForDatasetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStorageUnitForDatasetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetStorageUnitForDatasetOutput::GetStorageUnitForDatasetOutput(const GetStorageUnitForDatasetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStorageUnitForDatasetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  storageclusterid_ = GOOGLE_ULONGLONG(0);
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  secondarystorageid_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStorageUnitForDatasetOutput::~GetStorageUnitForDatasetOutput() {
  SharedDtor();
}

void GetStorageUnitForDatasetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetStorageUnitForDatasetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStorageUnitForDatasetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStorageUnitForDatasetOutput_descriptor_;
}

const GetStorageUnitForDatasetOutput& GetStorageUnitForDatasetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetStorageUnitForDatasetOutput* GetStorageUnitForDatasetOutput::default_instance_ = NULL;

GetStorageUnitForDatasetOutput* GetStorageUnitForDatasetOutput::New() const {
  return new GetStorageUnitForDatasetOutput;
}

void GetStorageUnitForDatasetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    storageclusterid_ = GOOGLE_ULONGLONG(0);
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    secondarystorageid_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStorageUnitForDatasetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_storageClusterId;
        break;
      }
      
      // optional fixed64 storageClusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageClusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageclusterid_)));
          set_has_storageclusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_primaryStorageId;
        break;
      }
      
      // optional fixed64 primaryStorageId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_secondaryStorageId;
        break;
      }
      
      // optional fixed64 secondaryStorageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarystorageid_)));
          set_has_secondarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_backupStorageId;
        break;
      }
      
      // optional fixed64 backupStorageId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStorageUnitForDatasetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 storageClusterId = 2;
  if (has_storageclusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->storageclusterid(), output);
  }
  
  // optional fixed64 primaryStorageId = 3;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->primarystorageid(), output);
  }
  
  // optional fixed64 secondaryStorageId = 4;
  if (has_secondarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->secondarystorageid(), output);
  }
  
  // optional fixed64 backupStorageId = 5;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->backupstorageid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStorageUnitForDatasetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 storageClusterId = 2;
  if (has_storageclusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->storageclusterid(), target);
  }
  
  // optional fixed64 primaryStorageId = 3;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->primarystorageid(), target);
  }
  
  // optional fixed64 secondaryStorageId = 4;
  if (has_secondarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->secondarystorageid(), target);
  }
  
  // optional fixed64 backupStorageId = 5;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->backupstorageid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStorageUnitForDatasetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 storageClusterId = 2;
    if (has_storageclusterid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryStorageId = 3;
    if (has_primarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryStorageId = 4;
    if (has_secondarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 backupStorageId = 5;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStorageUnitForDatasetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStorageUnitForDatasetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStorageUnitForDatasetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStorageUnitForDatasetOutput::MergeFrom(const GetStorageUnitForDatasetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_storageclusterid()) {
      set_storageclusterid(from.storageclusterid());
    }
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_secondarystorageid()) {
      set_secondarystorageid(from.secondarystorageid());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStorageUnitForDatasetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStorageUnitForDatasetOutput::CopyFrom(const GetStorageUnitForDatasetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStorageUnitForDatasetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetStorageUnitForDatasetOutput::Swap(GetStorageUnitForDatasetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(storageclusterid_, other->storageclusterid_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(secondarystorageid_, other->secondarystorageid_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStorageUnitForDatasetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStorageUnitForDatasetOutput_descriptor_;
  metadata.reflection = GetStorageUnitForDatasetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoredDatasetsInput::kClusterIdFieldNumber;
const int GetStoredDatasetsInput::kStorageIdFieldNumber;
const int GetStoredDatasetsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetStoredDatasetsInput::GetStoredDatasetsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoredDatasetsInput::InitAsDefaultInstance() {
}

GetStoredDatasetsInput::GetStoredDatasetsInput(const GetStoredDatasetsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoredDatasetsInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  storageid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoredDatasetsInput::~GetStoredDatasetsInput() {
  SharedDtor();
}

void GetStoredDatasetsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetStoredDatasetsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoredDatasetsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoredDatasetsInput_descriptor_;
}

const GetStoredDatasetsInput& GetStoredDatasetsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetStoredDatasetsInput* GetStoredDatasetsInput::default_instance_ = NULL;

GetStoredDatasetsInput* GetStoredDatasetsInput::New() const {
  return new GetStoredDatasetsInput;
}

void GetStoredDatasetsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    storageid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoredDatasetsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_storageId;
        break;
      }
      
      // required fixed64 storageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageid_)));
          set_has_storageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoredDatasetsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // required fixed64 storageId = 2;
  if (has_storageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->storageid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoredDatasetsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // required fixed64 storageId = 2;
  if (has_storageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->storageid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoredDatasetsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageId = 2;
    if (has_storageid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoredDatasetsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoredDatasetsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoredDatasetsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoredDatasetsInput::MergeFrom(const GetStoredDatasetsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_storageid()) {
      set_storageid(from.storageid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoredDatasetsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoredDatasetsInput::CopyFrom(const GetStoredDatasetsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoredDatasetsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetStoredDatasetsInput::Swap(GetStoredDatasetsInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(storageid_, other->storageid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoredDatasetsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoredDatasetsInput_descriptor_;
  metadata.reflection = GetStoredDatasetsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStoredDatasetsOutput::kErrorFieldNumber;
const int GetStoredDatasetsOutput::kDatasetsFieldNumber;
#endif  // !_MSC_VER

GetStoredDatasetsOutput::GetStoredDatasetsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStoredDatasetsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetStoredDatasetsOutput::GetStoredDatasetsOutput(const GetStoredDatasetsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStoredDatasetsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStoredDatasetsOutput::~GetStoredDatasetsOutput() {
  SharedDtor();
}

void GetStoredDatasetsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetStoredDatasetsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStoredDatasetsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStoredDatasetsOutput_descriptor_;
}

const GetStoredDatasetsOutput& GetStoredDatasetsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetStoredDatasetsOutput* GetStoredDatasetsOutput::default_instance_ = NULL;

GetStoredDatasetsOutput* GetStoredDatasetsOutput::New() const {
  return new GetStoredDatasetsOutput;
}

void GetStoredDatasetsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  datasets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStoredDatasetsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasets;
        break;
      }
      
      // repeated .vplex.vsDirectory.StoredDataset datasets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStoredDatasetsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.StoredDataset datasets = 2;
  for (int i = 0; i < this->datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStoredDatasetsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.StoredDataset datasets = 2;
  for (int i = 0; i < this->datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStoredDatasetsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.StoredDataset datasets = 2;
  total_size += 1 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStoredDatasetsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStoredDatasetsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStoredDatasetsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStoredDatasetsOutput::MergeFrom(const GetStoredDatasetsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasets_.MergeFrom(from.datasets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStoredDatasetsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStoredDatasetsOutput::CopyFrom(const GetStoredDatasetsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStoredDatasetsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < datasets_size(); i++) {
    if (!this->datasets(i).IsInitialized()) return false;
  }
  return true;
}

void GetStoredDatasetsOutput::Swap(GetStoredDatasetsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    datasets_.Swap(&other->datasets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStoredDatasetsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStoredDatasetsOutput_descriptor_;
  metadata.reflection = GetStoredDatasetsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProxyConnectionForClusterInput::kClusterIdFieldNumber;
const int GetProxyConnectionForClusterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetProxyConnectionForClusterInput::GetProxyConnectionForClusterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProxyConnectionForClusterInput::InitAsDefaultInstance() {
}

GetProxyConnectionForClusterInput::GetProxyConnectionForClusterInput(const GetProxyConnectionForClusterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProxyConnectionForClusterInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProxyConnectionForClusterInput::~GetProxyConnectionForClusterInput() {
  SharedDtor();
}

void GetProxyConnectionForClusterInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetProxyConnectionForClusterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProxyConnectionForClusterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProxyConnectionForClusterInput_descriptor_;
}

const GetProxyConnectionForClusterInput& GetProxyConnectionForClusterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetProxyConnectionForClusterInput* GetProxyConnectionForClusterInput::default_instance_ = NULL;

GetProxyConnectionForClusterInput* GetProxyConnectionForClusterInput::New() const {
  return new GetProxyConnectionForClusterInput;
}

void GetProxyConnectionForClusterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProxyConnectionForClusterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProxyConnectionForClusterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProxyConnectionForClusterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProxyConnectionForClusterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProxyConnectionForClusterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProxyConnectionForClusterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProxyConnectionForClusterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProxyConnectionForClusterInput::MergeFrom(const GetProxyConnectionForClusterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProxyConnectionForClusterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProxyConnectionForClusterInput::CopyFrom(const GetProxyConnectionForClusterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProxyConnectionForClusterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetProxyConnectionForClusterInput::Swap(GetProxyConnectionForClusterInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProxyConnectionForClusterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProxyConnectionForClusterInput_descriptor_;
  metadata.reflection = GetProxyConnectionForClusterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetProxyConnectionForClusterOutput::kErrorFieldNumber;
const int GetProxyConnectionForClusterOutput::kCookieFieldNumber;
#endif  // !_MSC_VER

GetProxyConnectionForClusterOutput::GetProxyConnectionForClusterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetProxyConnectionForClusterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetProxyConnectionForClusterOutput::GetProxyConnectionForClusterOutput(const GetProxyConnectionForClusterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetProxyConnectionForClusterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  cookie_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetProxyConnectionForClusterOutput::~GetProxyConnectionForClusterOutput() {
  SharedDtor();
}

void GetProxyConnectionForClusterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetProxyConnectionForClusterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetProxyConnectionForClusterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetProxyConnectionForClusterOutput_descriptor_;
}

const GetProxyConnectionForClusterOutput& GetProxyConnectionForClusterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetProxyConnectionForClusterOutput* GetProxyConnectionForClusterOutput::default_instance_ = NULL;

GetProxyConnectionForClusterOutput* GetProxyConnectionForClusterOutput::New() const {
  return new GetProxyConnectionForClusterOutput;
}

void GetProxyConnectionForClusterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    cookie_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetProxyConnectionForClusterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_cookie;
        break;
      }
      
      // optional fixed32 cookie = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cookie_)));
          set_has_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetProxyConnectionForClusterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed32 cookie = 2;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->cookie(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetProxyConnectionForClusterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed32 cookie = 2;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->cookie(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetProxyConnectionForClusterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed32 cookie = 2;
    if (has_cookie()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetProxyConnectionForClusterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetProxyConnectionForClusterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetProxyConnectionForClusterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetProxyConnectionForClusterOutput::MergeFrom(const GetProxyConnectionForClusterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetProxyConnectionForClusterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetProxyConnectionForClusterOutput::CopyFrom(const GetProxyConnectionForClusterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetProxyConnectionForClusterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetProxyConnectionForClusterOutput::Swap(GetProxyConnectionForClusterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetProxyConnectionForClusterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetProxyConnectionForClusterOutput_descriptor_;
  metadata.reflection = GetProxyConnectionForClusterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageToPSNInput::kClusterIdFieldNumber;
const int SendMessageToPSNInput::kMessageFieldNumber;
const int SendMessageToPSNInput::kVersionFieldNumber;
#endif  // !_MSC_VER

SendMessageToPSNInput::SendMessageToPSNInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageToPSNInput::InitAsDefaultInstance() {
}

SendMessageToPSNInput::SendMessageToPSNInput(const SendMessageToPSNInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageToPSNInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageToPSNInput::~SendMessageToPSNInput() {
  SharedDtor();
}

void SendMessageToPSNInput::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void SendMessageToPSNInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageToPSNInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageToPSNInput_descriptor_;
}

const SendMessageToPSNInput& SendMessageToPSNInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SendMessageToPSNInput* SendMessageToPSNInput::default_instance_ = NULL;

SendMessageToPSNInput* SendMessageToPSNInput::New() const {
  return new SendMessageToPSNInput;
}

void SendMessageToPSNInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageToPSNInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required bytes message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageToPSNInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // required bytes message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->message(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageToPSNInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // required bytes message = 2;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageToPSNInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required bytes message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageToPSNInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageToPSNInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageToPSNInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageToPSNInput::MergeFrom(const SendMessageToPSNInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageToPSNInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageToPSNInput::CopyFrom(const SendMessageToPSNInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageToPSNInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SendMessageToPSNInput::Swap(SendMessageToPSNInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(message_, other->message_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageToPSNInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageToPSNInput_descriptor_;
  metadata.reflection = SendMessageToPSNInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMessageToPSNOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

SendMessageToPSNOutput::SendMessageToPSNOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMessageToPSNOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

SendMessageToPSNOutput::SendMessageToPSNOutput(const SendMessageToPSNOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMessageToPSNOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMessageToPSNOutput::~SendMessageToPSNOutput() {
  SharedDtor();
}

void SendMessageToPSNOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void SendMessageToPSNOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMessageToPSNOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMessageToPSNOutput_descriptor_;
}

const SendMessageToPSNOutput& SendMessageToPSNOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

SendMessageToPSNOutput* SendMessageToPSNOutput::default_instance_ = NULL;

SendMessageToPSNOutput* SendMessageToPSNOutput::New() const {
  return new SendMessageToPSNOutput;
}

void SendMessageToPSNOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMessageToPSNOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMessageToPSNOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMessageToPSNOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMessageToPSNOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMessageToPSNOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMessageToPSNOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMessageToPSNOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMessageToPSNOutput::MergeFrom(const SendMessageToPSNOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMessageToPSNOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageToPSNOutput::CopyFrom(const SendMessageToPSNOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageToPSNOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void SendMessageToPSNOutput::Swap(SendMessageToPSNOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMessageToPSNOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMessageToPSNOutput_descriptor_;
  metadata.reflection = SendMessageToPSNOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeStorageUnitForDatasetInput::kUserIdFieldNumber;
const int ChangeStorageUnitForDatasetInput::kDatasetIdFieldNumber;
const int ChangeStorageUnitForDatasetInput::kCurrentStorageIdFieldNumber;
const int ChangeStorageUnitForDatasetInput::kNewStorageIdFieldNumber;
const int ChangeStorageUnitForDatasetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ChangeStorageUnitForDatasetInput::ChangeStorageUnitForDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeStorageUnitForDatasetInput::InitAsDefaultInstance() {
}

ChangeStorageUnitForDatasetInput::ChangeStorageUnitForDatasetInput(const ChangeStorageUnitForDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeStorageUnitForDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  currentstorageid_ = GOOGLE_ULONGLONG(0);
  newstorageid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeStorageUnitForDatasetInput::~ChangeStorageUnitForDatasetInput() {
  SharedDtor();
}

void ChangeStorageUnitForDatasetInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void ChangeStorageUnitForDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeStorageUnitForDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeStorageUnitForDatasetInput_descriptor_;
}

const ChangeStorageUnitForDatasetInput& ChangeStorageUnitForDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeStorageUnitForDatasetInput* ChangeStorageUnitForDatasetInput::default_instance_ = NULL;

ChangeStorageUnitForDatasetInput* ChangeStorageUnitForDatasetInput::New() const {
  return new ChangeStorageUnitForDatasetInput;
}

void ChangeStorageUnitForDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    currentstorageid_ = GOOGLE_ULONGLONG(0);
    newstorageid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeStorageUnitForDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_currentStorageId;
        break;
      }
      
      // required fixed64 currentStorageId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &currentstorageid_)));
          set_has_currentstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_newStorageId;
        break;
      }
      
      // required fixed64 newStorageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_newStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &newstorageid_)));
          set_has_newstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeStorageUnitForDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required fixed64 currentStorageId = 3;
  if (has_currentstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->currentstorageid(), output);
  }
  
  // required fixed64 newStorageId = 4;
  if (has_newstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->newstorageid(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeStorageUnitForDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required fixed64 currentStorageId = 3;
  if (has_currentstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->currentstorageid(), target);
  }
  
  // required fixed64 newStorageId = 4;
  if (has_newstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->newstorageid(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeStorageUnitForDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 currentStorageId = 3;
    if (has_currentstorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 newStorageId = 4;
    if (has_newstorageid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeStorageUnitForDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeStorageUnitForDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeStorageUnitForDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeStorageUnitForDatasetInput::MergeFrom(const ChangeStorageUnitForDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_currentstorageid()) {
      set_currentstorageid(from.currentstorageid());
    }
    if (from.has_newstorageid()) {
      set_newstorageid(from.newstorageid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeStorageUnitForDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStorageUnitForDatasetInput::CopyFrom(const ChangeStorageUnitForDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStorageUnitForDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ChangeStorageUnitForDatasetInput::Swap(ChangeStorageUnitForDatasetInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(currentstorageid_, other->currentstorageid_);
    std::swap(newstorageid_, other->newstorageid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeStorageUnitForDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeStorageUnitForDatasetInput_descriptor_;
  metadata.reflection = ChangeStorageUnitForDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeStorageUnitForDatasetOutput::kErrorFieldNumber;
const int ChangeStorageUnitForDatasetOutput::kStorageIdFieldNumber;
#endif  // !_MSC_VER

ChangeStorageUnitForDatasetOutput::ChangeStorageUnitForDatasetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeStorageUnitForDatasetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ChangeStorageUnitForDatasetOutput::ChangeStorageUnitForDatasetOutput(const ChangeStorageUnitForDatasetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeStorageUnitForDatasetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  storageid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeStorageUnitForDatasetOutput::~ChangeStorageUnitForDatasetOutput() {
  SharedDtor();
}

void ChangeStorageUnitForDatasetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ChangeStorageUnitForDatasetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeStorageUnitForDatasetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeStorageUnitForDatasetOutput_descriptor_;
}

const ChangeStorageUnitForDatasetOutput& ChangeStorageUnitForDatasetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeStorageUnitForDatasetOutput* ChangeStorageUnitForDatasetOutput::default_instance_ = NULL;

ChangeStorageUnitForDatasetOutput* ChangeStorageUnitForDatasetOutput::New() const {
  return new ChangeStorageUnitForDatasetOutput;
}

void ChangeStorageUnitForDatasetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    storageid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeStorageUnitForDatasetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_storageId;
        break;
      }
      
      // optional fixed64 storageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageid_)));
          set_has_storageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeStorageUnitForDatasetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 storageId = 2;
  if (has_storageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->storageid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeStorageUnitForDatasetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 storageId = 2;
  if (has_storageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->storageid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeStorageUnitForDatasetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 storageId = 2;
    if (has_storageid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeStorageUnitForDatasetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeStorageUnitForDatasetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeStorageUnitForDatasetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeStorageUnitForDatasetOutput::MergeFrom(const ChangeStorageUnitForDatasetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_storageid()) {
      set_storageid(from.storageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeStorageUnitForDatasetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStorageUnitForDatasetOutput::CopyFrom(const ChangeStorageUnitForDatasetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStorageUnitForDatasetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ChangeStorageUnitForDatasetOutput::Swap(ChangeStorageUnitForDatasetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(storageid_, other->storageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeStorageUnitForDatasetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeStorageUnitForDatasetOutput_descriptor_;
  metadata.reflection = ChangeStorageUnitForDatasetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStorageClusterInput::kClusterIdFieldNumber;
const int CreateStorageClusterInput::kClusterNameFieldNumber;
const int CreateStorageClusterInput::kClusterTypeFieldNumber;
const int CreateStorageClusterInput::kRegionFieldNumber;
const int CreateStorageClusterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

CreateStorageClusterInput::CreateStorageClusterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateStorageClusterInput::InitAsDefaultInstance() {
}

CreateStorageClusterInput::CreateStorageClusterInput(const CreateStorageClusterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateStorageClusterInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  clustername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clustertype_ = 0;
  region_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStorageClusterInput::~CreateStorageClusterInput() {
  SharedDtor();
}

void CreateStorageClusterInput::SharedDtor() {
  if (clustername_ != &::google::protobuf::internal::kEmptyString) {
    delete clustername_;
  }
  if (region_ != &::google::protobuf::internal::kEmptyString) {
    delete region_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void CreateStorageClusterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStorageClusterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStorageClusterInput_descriptor_;
}

const CreateStorageClusterInput& CreateStorageClusterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

CreateStorageClusterInput* CreateStorageClusterInput::default_instance_ = NULL;

CreateStorageClusterInput* CreateStorageClusterInput::New() const {
  return new CreateStorageClusterInput;
}

void CreateStorageClusterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_clustername()) {
      if (clustername_ != &::google::protobuf::internal::kEmptyString) {
        clustername_->clear();
      }
    }
    clustertype_ = 0;
    if (has_region()) {
      if (region_ != &::google::protobuf::internal::kEmptyString) {
        region_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStorageClusterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clusterName;
        break;
      }
      
      // required string clusterName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clusterName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clustername().data(), this->clustername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clusterType;
        break;
      }
      
      // optional int32 clusterType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clusterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clustertype_)));
          set_has_clustertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_region;
        break;
      }
      
      // optional string region = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region().data(), this->region().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateStorageClusterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // required string clusterName = 2;
  if (has_clustername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustername().data(), this->clustername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clustername(), output);
  }
  
  // optional int32 clusterType = 3;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clustertype(), output);
  }
  
  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->region(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateStorageClusterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // required string clusterName = 2;
  if (has_clustername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustername().data(), this->clustername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clustername(), target);
  }
  
  // optional int32 clusterType = 3;
  if (has_clustertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clustertype(), target);
  }
  
  // optional string region = 4;
  if (has_region()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region().data(), this->region().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->region(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateStorageClusterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required string clusterName = 2;
    if (has_clustername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clustername());
    }
    
    // optional int32 clusterType = 3;
    if (has_clustertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clustertype());
    }
    
    // optional string region = 4;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region());
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStorageClusterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStorageClusterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStorageClusterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStorageClusterInput::MergeFrom(const CreateStorageClusterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_clustername()) {
      set_clustername(from.clustername());
    }
    if (from.has_clustertype()) {
      set_clustertype(from.clustertype());
    }
    if (from.has_region()) {
      set_region(from.region());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStorageClusterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStorageClusterInput::CopyFrom(const CreateStorageClusterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageClusterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CreateStorageClusterInput::Swap(CreateStorageClusterInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(clustername_, other->clustername_);
    std::swap(clustertype_, other->clustertype_);
    std::swap(region_, other->region_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStorageClusterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStorageClusterInput_descriptor_;
  metadata.reflection = CreateStorageClusterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateStorageClusterOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

CreateStorageClusterOutput::CreateStorageClusterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateStorageClusterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

CreateStorageClusterOutput::CreateStorageClusterOutput(const CreateStorageClusterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateStorageClusterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateStorageClusterOutput::~CreateStorageClusterOutput() {
  SharedDtor();
}

void CreateStorageClusterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void CreateStorageClusterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStorageClusterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateStorageClusterOutput_descriptor_;
}

const CreateStorageClusterOutput& CreateStorageClusterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

CreateStorageClusterOutput* CreateStorageClusterOutput::default_instance_ = NULL;

CreateStorageClusterOutput* CreateStorageClusterOutput::New() const {
  return new CreateStorageClusterOutput;
}

void CreateStorageClusterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateStorageClusterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateStorageClusterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateStorageClusterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateStorageClusterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStorageClusterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateStorageClusterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateStorageClusterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateStorageClusterOutput::MergeFrom(const CreateStorageClusterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateStorageClusterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStorageClusterOutput::CopyFrom(const CreateStorageClusterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStorageClusterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void CreateStorageClusterOutput::Swap(CreateStorageClusterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateStorageClusterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateStorageClusterOutput_descriptor_;
  metadata.reflection = CreateStorageClusterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMssInstancesForClusterInput::kClusterIdFieldNumber;
const int GetMssInstancesForClusterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetMssInstancesForClusterInput::GetMssInstancesForClusterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMssInstancesForClusterInput::InitAsDefaultInstance() {
}

GetMssInstancesForClusterInput::GetMssInstancesForClusterInput(const GetMssInstancesForClusterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMssInstancesForClusterInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMssInstancesForClusterInput::~GetMssInstancesForClusterInput() {
  SharedDtor();
}

void GetMssInstancesForClusterInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetMssInstancesForClusterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMssInstancesForClusterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMssInstancesForClusterInput_descriptor_;
}

const GetMssInstancesForClusterInput& GetMssInstancesForClusterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetMssInstancesForClusterInput* GetMssInstancesForClusterInput::default_instance_ = NULL;

GetMssInstancesForClusterInput* GetMssInstancesForClusterInput::New() const {
  return new GetMssInstancesForClusterInput;
}

void GetMssInstancesForClusterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMssInstancesForClusterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMssInstancesForClusterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMssInstancesForClusterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMssInstancesForClusterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMssInstancesForClusterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMssInstancesForClusterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMssInstancesForClusterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMssInstancesForClusterInput::MergeFrom(const GetMssInstancesForClusterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMssInstancesForClusterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMssInstancesForClusterInput::CopyFrom(const GetMssInstancesForClusterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMssInstancesForClusterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetMssInstancesForClusterInput::Swap(GetMssInstancesForClusterInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMssInstancesForClusterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMssInstancesForClusterInput_descriptor_;
  metadata.reflection = GetMssInstancesForClusterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMssInstancesForClusterOutput::kErrorFieldNumber;
const int GetMssInstancesForClusterOutput::kMssInstancesFieldNumber;
#endif  // !_MSC_VER

GetMssInstancesForClusterOutput::GetMssInstancesForClusterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMssInstancesForClusterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetMssInstancesForClusterOutput::GetMssInstancesForClusterOutput(const GetMssInstancesForClusterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMssInstancesForClusterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMssInstancesForClusterOutput::~GetMssInstancesForClusterOutput() {
  SharedDtor();
}

void GetMssInstancesForClusterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetMssInstancesForClusterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMssInstancesForClusterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMssInstancesForClusterOutput_descriptor_;
}

const GetMssInstancesForClusterOutput& GetMssInstancesForClusterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetMssInstancesForClusterOutput* GetMssInstancesForClusterOutput::default_instance_ = NULL;

GetMssInstancesForClusterOutput* GetMssInstancesForClusterOutput::New() const {
  return new GetMssInstancesForClusterOutput;
}

void GetMssInstancesForClusterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  mssinstances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMssInstancesForClusterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mssInstances;
        break;
      }
      
      // repeated .vplex.vsDirectory.MssDetail mssInstances = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mssInstances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mssinstances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mssInstances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMssInstancesForClusterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.MssDetail mssInstances = 2;
  for (int i = 0; i < this->mssinstances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mssinstances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMssInstancesForClusterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.MssDetail mssInstances = 2;
  for (int i = 0; i < this->mssinstances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mssinstances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMssInstancesForClusterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.MssDetail mssInstances = 2;
  total_size += 1 * this->mssinstances_size();
  for (int i = 0; i < this->mssinstances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mssinstances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMssInstancesForClusterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMssInstancesForClusterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMssInstancesForClusterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMssInstancesForClusterOutput::MergeFrom(const GetMssInstancesForClusterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mssinstances_.MergeFrom(from.mssinstances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMssInstancesForClusterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMssInstancesForClusterOutput::CopyFrom(const GetMssInstancesForClusterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMssInstancesForClusterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < mssinstances_size(); i++) {
    if (!this->mssinstances(i).IsInitialized()) return false;
  }
  return true;
}

void GetMssInstancesForClusterOutput::Swap(GetMssInstancesForClusterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    mssinstances_.Swap(&other->mssinstances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMssInstancesForClusterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMssInstancesForClusterOutput_descriptor_;
  metadata.reflection = GetMssInstancesForClusterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStorageUnitsForClusterInput::kClusterIdFieldNumber;
const int GetStorageUnitsForClusterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetStorageUnitsForClusterInput::GetStorageUnitsForClusterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStorageUnitsForClusterInput::InitAsDefaultInstance() {
}

GetStorageUnitsForClusterInput::GetStorageUnitsForClusterInput(const GetStorageUnitsForClusterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStorageUnitsForClusterInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStorageUnitsForClusterInput::~GetStorageUnitsForClusterInput() {
  SharedDtor();
}

void GetStorageUnitsForClusterInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetStorageUnitsForClusterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStorageUnitsForClusterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStorageUnitsForClusterInput_descriptor_;
}

const GetStorageUnitsForClusterInput& GetStorageUnitsForClusterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetStorageUnitsForClusterInput* GetStorageUnitsForClusterInput::default_instance_ = NULL;

GetStorageUnitsForClusterInput* GetStorageUnitsForClusterInput::New() const {
  return new GetStorageUnitsForClusterInput;
}

void GetStorageUnitsForClusterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStorageUnitsForClusterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStorageUnitsForClusterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStorageUnitsForClusterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStorageUnitsForClusterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStorageUnitsForClusterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStorageUnitsForClusterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStorageUnitsForClusterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStorageUnitsForClusterInput::MergeFrom(const GetStorageUnitsForClusterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStorageUnitsForClusterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStorageUnitsForClusterInput::CopyFrom(const GetStorageUnitsForClusterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStorageUnitsForClusterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetStorageUnitsForClusterInput::Swap(GetStorageUnitsForClusterInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStorageUnitsForClusterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStorageUnitsForClusterInput_descriptor_;
  metadata.reflection = GetStorageUnitsForClusterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStorageUnitsForClusterOutput::kErrorFieldNumber;
const int GetStorageUnitsForClusterOutput::kStorageUnitsFieldNumber;
#endif  // !_MSC_VER

GetStorageUnitsForClusterOutput::GetStorageUnitsForClusterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStorageUnitsForClusterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetStorageUnitsForClusterOutput::GetStorageUnitsForClusterOutput(const GetStorageUnitsForClusterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStorageUnitsForClusterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStorageUnitsForClusterOutput::~GetStorageUnitsForClusterOutput() {
  SharedDtor();
}

void GetStorageUnitsForClusterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetStorageUnitsForClusterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStorageUnitsForClusterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStorageUnitsForClusterOutput_descriptor_;
}

const GetStorageUnitsForClusterOutput& GetStorageUnitsForClusterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetStorageUnitsForClusterOutput* GetStorageUnitsForClusterOutput::default_instance_ = NULL;

GetStorageUnitsForClusterOutput* GetStorageUnitsForClusterOutput::New() const {
  return new GetStorageUnitsForClusterOutput;
}

void GetStorageUnitsForClusterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  storageunits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStorageUnitsForClusterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storageUnits;
        break;
      }
      
      // repeated .vplex.vsDirectory.StorageUnitDetail storageUnits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageUnits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storageunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storageUnits;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStorageUnitsForClusterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.StorageUnitDetail storageUnits = 2;
  for (int i = 0; i < this->storageunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storageunits(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStorageUnitsForClusterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.StorageUnitDetail storageUnits = 2;
  for (int i = 0; i < this->storageunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storageunits(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStorageUnitsForClusterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.StorageUnitDetail storageUnits = 2;
  total_size += 1 * this->storageunits_size();
  for (int i = 0; i < this->storageunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storageunits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStorageUnitsForClusterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStorageUnitsForClusterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStorageUnitsForClusterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStorageUnitsForClusterOutput::MergeFrom(const GetStorageUnitsForClusterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  storageunits_.MergeFrom(from.storageunits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStorageUnitsForClusterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStorageUnitsForClusterOutput::CopyFrom(const GetStorageUnitsForClusterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStorageUnitsForClusterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < storageunits_size(); i++) {
    if (!this->storageunits(i).IsInitialized()) return false;
  }
  return true;
}

void GetStorageUnitsForClusterOutput::Swap(GetStorageUnitsForClusterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    storageunits_.Swap(&other->storageunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStorageUnitsForClusterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStorageUnitsForClusterOutput_descriptor_;
  metadata.reflection = GetStorageUnitsForClusterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBrsInstancesForClusterInput::kClusterIdFieldNumber;
const int GetBrsInstancesForClusterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetBrsInstancesForClusterInput::GetBrsInstancesForClusterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBrsInstancesForClusterInput::InitAsDefaultInstance() {
}

GetBrsInstancesForClusterInput::GetBrsInstancesForClusterInput(const GetBrsInstancesForClusterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBrsInstancesForClusterInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBrsInstancesForClusterInput::~GetBrsInstancesForClusterInput() {
  SharedDtor();
}

void GetBrsInstancesForClusterInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetBrsInstancesForClusterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrsInstancesForClusterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBrsInstancesForClusterInput_descriptor_;
}

const GetBrsInstancesForClusterInput& GetBrsInstancesForClusterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBrsInstancesForClusterInput* GetBrsInstancesForClusterInput::default_instance_ = NULL;

GetBrsInstancesForClusterInput* GetBrsInstancesForClusterInput::New() const {
  return new GetBrsInstancesForClusterInput;
}

void GetBrsInstancesForClusterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBrsInstancesForClusterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBrsInstancesForClusterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBrsInstancesForClusterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBrsInstancesForClusterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrsInstancesForClusterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBrsInstancesForClusterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBrsInstancesForClusterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBrsInstancesForClusterInput::MergeFrom(const GetBrsInstancesForClusterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBrsInstancesForClusterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrsInstancesForClusterInput::CopyFrom(const GetBrsInstancesForClusterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrsInstancesForClusterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBrsInstancesForClusterInput::Swap(GetBrsInstancesForClusterInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBrsInstancesForClusterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBrsInstancesForClusterInput_descriptor_;
  metadata.reflection = GetBrsInstancesForClusterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBrsInstancesForClusterOutput::kErrorFieldNumber;
const int GetBrsInstancesForClusterOutput::kBrsInstancesFieldNumber;
#endif  // !_MSC_VER

GetBrsInstancesForClusterOutput::GetBrsInstancesForClusterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBrsInstancesForClusterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetBrsInstancesForClusterOutput::GetBrsInstancesForClusterOutput(const GetBrsInstancesForClusterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBrsInstancesForClusterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBrsInstancesForClusterOutput::~GetBrsInstancesForClusterOutput() {
  SharedDtor();
}

void GetBrsInstancesForClusterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetBrsInstancesForClusterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrsInstancesForClusterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBrsInstancesForClusterOutput_descriptor_;
}

const GetBrsInstancesForClusterOutput& GetBrsInstancesForClusterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBrsInstancesForClusterOutput* GetBrsInstancesForClusterOutput::default_instance_ = NULL;

GetBrsInstancesForClusterOutput* GetBrsInstancesForClusterOutput::New() const {
  return new GetBrsInstancesForClusterOutput;
}

void GetBrsInstancesForClusterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  brsinstances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBrsInstancesForClusterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brsInstances;
        break;
      }
      
      // repeated .vplex.vsDirectory.BrsDetail brsInstances = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brsInstances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_brsinstances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brsInstances;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBrsInstancesForClusterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.BrsDetail brsInstances = 2;
  for (int i = 0; i < this->brsinstances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->brsinstances(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBrsInstancesForClusterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.BrsDetail brsInstances = 2;
  for (int i = 0; i < this->brsinstances_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->brsinstances(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBrsInstancesForClusterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.BrsDetail brsInstances = 2;
  total_size += 1 * this->brsinstances_size();
  for (int i = 0; i < this->brsinstances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->brsinstances(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrsInstancesForClusterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBrsInstancesForClusterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBrsInstancesForClusterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBrsInstancesForClusterOutput::MergeFrom(const GetBrsInstancesForClusterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  brsinstances_.MergeFrom(from.brsinstances_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBrsInstancesForClusterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrsInstancesForClusterOutput::CopyFrom(const GetBrsInstancesForClusterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrsInstancesForClusterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < brsinstances_size(); i++) {
    if (!this->brsinstances(i).IsInitialized()) return false;
  }
  return true;
}

void GetBrsInstancesForClusterOutput::Swap(GetBrsInstancesForClusterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    brsinstances_.Swap(&other->brsinstances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBrsInstancesForClusterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBrsInstancesForClusterOutput_descriptor_;
  metadata.reflection = GetBrsInstancesForClusterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBrsStorageUnitsForClusterInput::kClusterIdFieldNumber;
const int GetBrsStorageUnitsForClusterInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetBrsStorageUnitsForClusterInput::GetBrsStorageUnitsForClusterInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBrsStorageUnitsForClusterInput::InitAsDefaultInstance() {
}

GetBrsStorageUnitsForClusterInput::GetBrsStorageUnitsForClusterInput(const GetBrsStorageUnitsForClusterInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBrsStorageUnitsForClusterInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBrsStorageUnitsForClusterInput::~GetBrsStorageUnitsForClusterInput() {
  SharedDtor();
}

void GetBrsStorageUnitsForClusterInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetBrsStorageUnitsForClusterInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrsStorageUnitsForClusterInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBrsStorageUnitsForClusterInput_descriptor_;
}

const GetBrsStorageUnitsForClusterInput& GetBrsStorageUnitsForClusterInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBrsStorageUnitsForClusterInput* GetBrsStorageUnitsForClusterInput::default_instance_ = NULL;

GetBrsStorageUnitsForClusterInput* GetBrsStorageUnitsForClusterInput::New() const {
  return new GetBrsStorageUnitsForClusterInput;
}

void GetBrsStorageUnitsForClusterInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBrsStorageUnitsForClusterInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // optional string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBrsStorageUnitsForClusterInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBrsStorageUnitsForClusterInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBrsStorageUnitsForClusterInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrsStorageUnitsForClusterInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBrsStorageUnitsForClusterInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBrsStorageUnitsForClusterInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBrsStorageUnitsForClusterInput::MergeFrom(const GetBrsStorageUnitsForClusterInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBrsStorageUnitsForClusterInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrsStorageUnitsForClusterInput::CopyFrom(const GetBrsStorageUnitsForClusterInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrsStorageUnitsForClusterInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBrsStorageUnitsForClusterInput::Swap(GetBrsStorageUnitsForClusterInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBrsStorageUnitsForClusterInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBrsStorageUnitsForClusterInput_descriptor_;
  metadata.reflection = GetBrsStorageUnitsForClusterInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBrsStorageUnitsForClusterOutput::kErrorFieldNumber;
const int GetBrsStorageUnitsForClusterOutput::kBrsStorageUnitsFieldNumber;
#endif  // !_MSC_VER

GetBrsStorageUnitsForClusterOutput::GetBrsStorageUnitsForClusterOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBrsStorageUnitsForClusterOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetBrsStorageUnitsForClusterOutput::GetBrsStorageUnitsForClusterOutput(const GetBrsStorageUnitsForClusterOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBrsStorageUnitsForClusterOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBrsStorageUnitsForClusterOutput::~GetBrsStorageUnitsForClusterOutput() {
  SharedDtor();
}

void GetBrsStorageUnitsForClusterOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetBrsStorageUnitsForClusterOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBrsStorageUnitsForClusterOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBrsStorageUnitsForClusterOutput_descriptor_;
}

const GetBrsStorageUnitsForClusterOutput& GetBrsStorageUnitsForClusterOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBrsStorageUnitsForClusterOutput* GetBrsStorageUnitsForClusterOutput::default_instance_ = NULL;

GetBrsStorageUnitsForClusterOutput* GetBrsStorageUnitsForClusterOutput::New() const {
  return new GetBrsStorageUnitsForClusterOutput;
}

void GetBrsStorageUnitsForClusterOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  brsstorageunits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBrsStorageUnitsForClusterOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brsStorageUnits;
        break;
      }
      
      // repeated .vplex.vsDirectory.BrsStorageUnitDetail brsStorageUnits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brsStorageUnits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_brsstorageunits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brsStorageUnits;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBrsStorageUnitsForClusterOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.BrsStorageUnitDetail brsStorageUnits = 2;
  for (int i = 0; i < this->brsstorageunits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->brsstorageunits(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBrsStorageUnitsForClusterOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.BrsStorageUnitDetail brsStorageUnits = 2;
  for (int i = 0; i < this->brsstorageunits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->brsstorageunits(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBrsStorageUnitsForClusterOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.BrsStorageUnitDetail brsStorageUnits = 2;
  total_size += 1 * this->brsstorageunits_size();
  for (int i = 0; i < this->brsstorageunits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->brsstorageunits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBrsStorageUnitsForClusterOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBrsStorageUnitsForClusterOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBrsStorageUnitsForClusterOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBrsStorageUnitsForClusterOutput::MergeFrom(const GetBrsStorageUnitsForClusterOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  brsstorageunits_.MergeFrom(from.brsstorageunits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBrsStorageUnitsForClusterOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBrsStorageUnitsForClusterOutput::CopyFrom(const GetBrsStorageUnitsForClusterOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBrsStorageUnitsForClusterOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < brsstorageunits_size(); i++) {
    if (!this->brsstorageunits(i).IsInitialized()) return false;
  }
  return true;
}

void GetBrsStorageUnitsForClusterOutput::Swap(GetBrsStorageUnitsForClusterOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    brsstorageunits_.Swap(&other->brsstorageunits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBrsStorageUnitsForClusterOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBrsStorageUnitsForClusterOutput_descriptor_;
  metadata.reflection = GetBrsStorageUnitsForClusterOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeStorageAssignmentsForDatasetInput::kUserIdFieldNumber;
const int ChangeStorageAssignmentsForDatasetInput::kDatasetIdFieldNumber;
const int ChangeStorageAssignmentsForDatasetInput::kClusterIdFieldNumber;
const int ChangeStorageAssignmentsForDatasetInput::kPrimaryStorageIdFieldNumber;
const int ChangeStorageAssignmentsForDatasetInput::kSecondaryStorageIdFieldNumber;
const int ChangeStorageAssignmentsForDatasetInput::kBackupStorageIdFieldNumber;
const int ChangeStorageAssignmentsForDatasetInput::kVersionFieldNumber;
#endif  // !_MSC_VER

ChangeStorageAssignmentsForDatasetInput::ChangeStorageAssignmentsForDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeStorageAssignmentsForDatasetInput::InitAsDefaultInstance() {
}

ChangeStorageAssignmentsForDatasetInput::ChangeStorageAssignmentsForDatasetInput(const ChangeStorageAssignmentsForDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeStorageAssignmentsForDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  secondarystorageid_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeStorageAssignmentsForDatasetInput::~ChangeStorageAssignmentsForDatasetInput() {
  SharedDtor();
}

void ChangeStorageAssignmentsForDatasetInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void ChangeStorageAssignmentsForDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeStorageAssignmentsForDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeStorageAssignmentsForDatasetInput_descriptor_;
}

const ChangeStorageAssignmentsForDatasetInput& ChangeStorageAssignmentsForDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeStorageAssignmentsForDatasetInput* ChangeStorageAssignmentsForDatasetInput::default_instance_ = NULL;

ChangeStorageAssignmentsForDatasetInput* ChangeStorageAssignmentsForDatasetInput::New() const {
  return new ChangeStorageAssignmentsForDatasetInput;
}

void ChangeStorageAssignmentsForDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    secondarystorageid_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeStorageAssignmentsForDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_primaryStorageId;
        break;
      }
      
      // required fixed64 primaryStorageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_secondaryStorageId;
        break;
      }
      
      // required fixed64 secondaryStorageId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarystorageid_)));
          set_has_secondarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_backupStorageId;
        break;
      }
      
      // required fixed64 backupStorageId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeStorageAssignmentsForDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // required fixed64 primaryStorageId = 4;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->primarystorageid(), output);
  }
  
  // required fixed64 secondaryStorageId = 5;
  if (has_secondarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->secondarystorageid(), output);
  }
  
  // required fixed64 backupStorageId = 6;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->backupstorageid(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeStorageAssignmentsForDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // required fixed64 primaryStorageId = 4;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->primarystorageid(), target);
  }
  
  // required fixed64 secondaryStorageId = 5;
  if (has_secondarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->secondarystorageid(), target);
  }
  
  // required fixed64 backupStorageId = 6;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->backupstorageid(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeStorageAssignmentsForDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 primaryStorageId = 4;
    if (has_primarystorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 secondaryStorageId = 5;
    if (has_secondarystorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 backupStorageId = 6;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeStorageAssignmentsForDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeStorageAssignmentsForDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeStorageAssignmentsForDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeStorageAssignmentsForDatasetInput::MergeFrom(const ChangeStorageAssignmentsForDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_secondarystorageid()) {
      set_secondarystorageid(from.secondarystorageid());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeStorageAssignmentsForDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStorageAssignmentsForDatasetInput::CopyFrom(const ChangeStorageAssignmentsForDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStorageAssignmentsForDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ChangeStorageAssignmentsForDatasetInput::Swap(ChangeStorageAssignmentsForDatasetInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(secondarystorageid_, other->secondarystorageid_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeStorageAssignmentsForDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeStorageAssignmentsForDatasetInput_descriptor_;
  metadata.reflection = ChangeStorageAssignmentsForDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeStorageAssignmentsForDatasetOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

ChangeStorageAssignmentsForDatasetOutput::ChangeStorageAssignmentsForDatasetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeStorageAssignmentsForDatasetOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

ChangeStorageAssignmentsForDatasetOutput::ChangeStorageAssignmentsForDatasetOutput(const ChangeStorageAssignmentsForDatasetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeStorageAssignmentsForDatasetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeStorageAssignmentsForDatasetOutput::~ChangeStorageAssignmentsForDatasetOutput() {
  SharedDtor();
}

void ChangeStorageAssignmentsForDatasetOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ChangeStorageAssignmentsForDatasetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeStorageAssignmentsForDatasetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeStorageAssignmentsForDatasetOutput_descriptor_;
}

const ChangeStorageAssignmentsForDatasetOutput& ChangeStorageAssignmentsForDatasetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

ChangeStorageAssignmentsForDatasetOutput* ChangeStorageAssignmentsForDatasetOutput::default_instance_ = NULL;

ChangeStorageAssignmentsForDatasetOutput* ChangeStorageAssignmentsForDatasetOutput::New() const {
  return new ChangeStorageAssignmentsForDatasetOutput;
}

void ChangeStorageAssignmentsForDatasetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeStorageAssignmentsForDatasetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeStorageAssignmentsForDatasetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeStorageAssignmentsForDatasetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeStorageAssignmentsForDatasetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeStorageAssignmentsForDatasetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeStorageAssignmentsForDatasetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeStorageAssignmentsForDatasetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeStorageAssignmentsForDatasetOutput::MergeFrom(const ChangeStorageAssignmentsForDatasetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeStorageAssignmentsForDatasetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStorageAssignmentsForDatasetOutput::CopyFrom(const ChangeStorageAssignmentsForDatasetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStorageAssignmentsForDatasetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void ChangeStorageAssignmentsForDatasetOutput::Swap(ChangeStorageAssignmentsForDatasetOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeStorageAssignmentsForDatasetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeStorageAssignmentsForDatasetOutput_descriptor_;
  metadata.reflection = ChangeStorageAssignmentsForDatasetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDatasetStatusInput::kUserIdFieldNumber;
const int UpdateDatasetStatusInput::kDatasetIdFieldNumber;
const int UpdateDatasetStatusInput::kClusterIdFieldNumber;
const int UpdateDatasetStatusInput::kStorageIdFieldNumber;
const int UpdateDatasetStatusInput::kDatasetSizeFieldNumber;
const int UpdateDatasetStatusInput::kDatasetVersionFieldNumber;
const int UpdateDatasetStatusInput::kVersionFieldNumber;
const int UpdateDatasetStatusInput::kAnsNotificationOffFieldNumber;
#endif  // !_MSC_VER

UpdateDatasetStatusInput::UpdateDatasetStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDatasetStatusInput::InitAsDefaultInstance() {
}

UpdateDatasetStatusInput::UpdateDatasetStatusInput(const UpdateDatasetStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDatasetStatusInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  storageid_ = GOOGLE_ULONGLONG(0);
  datasetsize_ = GOOGLE_ULONGLONG(0);
  datasetversion_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ansnotificationoff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDatasetStatusInput::~UpdateDatasetStatusInput() {
  SharedDtor();
}

void UpdateDatasetStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void UpdateDatasetStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetStatusInput_descriptor_;
}

const UpdateDatasetStatusInput& UpdateDatasetStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDatasetStatusInput* UpdateDatasetStatusInput::default_instance_ = NULL;

UpdateDatasetStatusInput* UpdateDatasetStatusInput::New() const {
  return new UpdateDatasetStatusInput;
}

void UpdateDatasetStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    storageid_ = GOOGLE_ULONGLONG(0);
    datasetsize_ = GOOGLE_ULONGLONG(0);
    datasetversion_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    ansnotificationoff_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDatasetStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_storageId;
        break;
      }
      
      // required fixed64 storageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_storageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &storageid_)));
          set_has_storageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_datasetSize;
        break;
      }
      
      // required fixed64 datasetSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetsize_)));
          set_has_datasetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_datasetVersion;
        break;
      }
      
      // required fixed64 datasetVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetversion_)));
          set_has_datasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }
      
      // optional string version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ansNotificationOff;
        break;
      }
      
      // optional bool ansNotificationOff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ansNotificationOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ansnotificationoff_)));
          set_has_ansnotificationoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDatasetStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // required fixed64 storageId = 4;
  if (has_storageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->storageid(), output);
  }
  
  // required fixed64 datasetSize = 5;
  if (has_datasetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->datasetsize(), output);
  }
  
  // required fixed64 datasetVersion = 6;
  if (has_datasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->datasetversion(), output);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->version(), output);
  }
  
  // optional bool ansNotificationOff = 8;
  if (has_ansnotificationoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ansnotificationoff(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDatasetStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // required fixed64 storageId = 4;
  if (has_storageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->storageid(), target);
  }
  
  // required fixed64 datasetSize = 5;
  if (has_datasetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->datasetsize(), target);
  }
  
  // required fixed64 datasetVersion = 6;
  if (has_datasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->datasetversion(), target);
  }
  
  // optional string version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->version(), target);
  }
  
  // optional bool ansNotificationOff = 8;
  if (has_ansnotificationoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ansnotificationoff(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDatasetStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 storageId = 4;
    if (has_storageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetSize = 5;
    if (has_datasetsize()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetVersion = 6;
    if (has_datasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional bool ansNotificationOff = 8;
    if (has_ansnotificationoff()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDatasetStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDatasetStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDatasetStatusInput::MergeFrom(const UpdateDatasetStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_storageid()) {
      set_storageid(from.storageid());
    }
    if (from.has_datasetsize()) {
      set_datasetsize(from.datasetsize());
    }
    if (from.has_datasetversion()) {
      set_datasetversion(from.datasetversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ansnotificationoff()) {
      set_ansnotificationoff(from.ansnotificationoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDatasetStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetStatusInput::CopyFrom(const UpdateDatasetStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatasetStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void UpdateDatasetStatusInput::Swap(UpdateDatasetStatusInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(storageid_, other->storageid_);
    std::swap(datasetsize_, other->datasetsize_);
    std::swap(datasetversion_, other->datasetversion_);
    std::swap(version_, other->version_);
    std::swap(ansnotificationoff_, other->ansnotificationoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDatasetStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetStatusInput_descriptor_;
  metadata.reflection = UpdateDatasetStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDatasetStatusOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateDatasetStatusOutput::UpdateDatasetStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDatasetStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateDatasetStatusOutput::UpdateDatasetStatusOutput(const UpdateDatasetStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDatasetStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDatasetStatusOutput::~UpdateDatasetStatusOutput() {
  SharedDtor();
}

void UpdateDatasetStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateDatasetStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetStatusOutput_descriptor_;
}

const UpdateDatasetStatusOutput& UpdateDatasetStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDatasetStatusOutput* UpdateDatasetStatusOutput::default_instance_ = NULL;

UpdateDatasetStatusOutput* UpdateDatasetStatusOutput::New() const {
  return new UpdateDatasetStatusOutput;
}

void UpdateDatasetStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDatasetStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDatasetStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDatasetStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDatasetStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDatasetStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDatasetStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDatasetStatusOutput::MergeFrom(const UpdateDatasetStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDatasetStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetStatusOutput::CopyFrom(const UpdateDatasetStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatasetStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateDatasetStatusOutput::Swap(UpdateDatasetStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDatasetStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetStatusOutput_descriptor_;
  metadata.reflection = UpdateDatasetStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDatasetBackupStatusInput::kUserIdFieldNumber;
const int UpdateDatasetBackupStatusInput::kDatasetIdFieldNumber;
const int UpdateDatasetBackupStatusInput::kClusterIdFieldNumber;
const int UpdateDatasetBackupStatusInput::kBackupStorageIdFieldNumber;
const int UpdateDatasetBackupStatusInput::kDatasetVersionFieldNumber;
const int UpdateDatasetBackupStatusInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UpdateDatasetBackupStatusInput::UpdateDatasetBackupStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDatasetBackupStatusInput::InitAsDefaultInstance() {
}

UpdateDatasetBackupStatusInput::UpdateDatasetBackupStatusInput(const UpdateDatasetBackupStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDatasetBackupStatusInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  datasetversion_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDatasetBackupStatusInput::~UpdateDatasetBackupStatusInput() {
  SharedDtor();
}

void UpdateDatasetBackupStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void UpdateDatasetBackupStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetBackupStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetBackupStatusInput_descriptor_;
}

const UpdateDatasetBackupStatusInput& UpdateDatasetBackupStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDatasetBackupStatusInput* UpdateDatasetBackupStatusInput::default_instance_ = NULL;

UpdateDatasetBackupStatusInput* UpdateDatasetBackupStatusInput::New() const {
  return new UpdateDatasetBackupStatusInput;
}

void UpdateDatasetBackupStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    datasetversion_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDatasetBackupStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_backupStorageId;
        break;
      }
      
      // required fixed64 backupStorageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_datasetVersion;
        break;
      }
      
      // required fixed64 datasetVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetversion_)));
          set_has_datasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDatasetBackupStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // required fixed64 backupStorageId = 4;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->backupstorageid(), output);
  }
  
  // required fixed64 datasetVersion = 5;
  if (has_datasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->datasetversion(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDatasetBackupStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // required fixed64 backupStorageId = 4;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->backupstorageid(), target);
  }
  
  // required fixed64 datasetVersion = 5;
  if (has_datasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->datasetversion(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDatasetBackupStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 backupStorageId = 4;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetVersion = 5;
    if (has_datasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetBackupStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDatasetBackupStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDatasetBackupStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDatasetBackupStatusInput::MergeFrom(const UpdateDatasetBackupStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_datasetversion()) {
      set_datasetversion(from.datasetversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDatasetBackupStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetBackupStatusInput::CopyFrom(const UpdateDatasetBackupStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatasetBackupStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void UpdateDatasetBackupStatusInput::Swap(UpdateDatasetBackupStatusInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(datasetversion_, other->datasetversion_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDatasetBackupStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetBackupStatusInput_descriptor_;
  metadata.reflection = UpdateDatasetBackupStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDatasetBackupStatusOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateDatasetBackupStatusOutput::UpdateDatasetBackupStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDatasetBackupStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateDatasetBackupStatusOutput::UpdateDatasetBackupStatusOutput(const UpdateDatasetBackupStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDatasetBackupStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDatasetBackupStatusOutput::~UpdateDatasetBackupStatusOutput() {
  SharedDtor();
}

void UpdateDatasetBackupStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateDatasetBackupStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetBackupStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetBackupStatusOutput_descriptor_;
}

const UpdateDatasetBackupStatusOutput& UpdateDatasetBackupStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDatasetBackupStatusOutput* UpdateDatasetBackupStatusOutput::default_instance_ = NULL;

UpdateDatasetBackupStatusOutput* UpdateDatasetBackupStatusOutput::New() const {
  return new UpdateDatasetBackupStatusOutput;
}

void UpdateDatasetBackupStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDatasetBackupStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDatasetBackupStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDatasetBackupStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDatasetBackupStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetBackupStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDatasetBackupStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDatasetBackupStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDatasetBackupStatusOutput::MergeFrom(const UpdateDatasetBackupStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDatasetBackupStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetBackupStatusOutput::CopyFrom(const UpdateDatasetBackupStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatasetBackupStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateDatasetBackupStatusOutput::Swap(UpdateDatasetBackupStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDatasetBackupStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetBackupStatusOutput_descriptor_;
  metadata.reflection = UpdateDatasetBackupStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDatasetArchiveStatusInput::kUserIdFieldNumber;
const int UpdateDatasetArchiveStatusInput::kDatasetIdFieldNumber;
const int UpdateDatasetArchiveStatusInput::kClusterIdFieldNumber;
const int UpdateDatasetArchiveStatusInput::kBackupStorageIdFieldNumber;
const int UpdateDatasetArchiveStatusInput::kDatasetVersionFieldNumber;
const int UpdateDatasetArchiveStatusInput::kVersionFieldNumber;
#endif  // !_MSC_VER

UpdateDatasetArchiveStatusInput::UpdateDatasetArchiveStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDatasetArchiveStatusInput::InitAsDefaultInstance() {
}

UpdateDatasetArchiveStatusInput::UpdateDatasetArchiveStatusInput(const UpdateDatasetArchiveStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDatasetArchiveStatusInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  datasetversion_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDatasetArchiveStatusInput::~UpdateDatasetArchiveStatusInput() {
  SharedDtor();
}

void UpdateDatasetArchiveStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void UpdateDatasetArchiveStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetArchiveStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetArchiveStatusInput_descriptor_;
}

const UpdateDatasetArchiveStatusInput& UpdateDatasetArchiveStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDatasetArchiveStatusInput* UpdateDatasetArchiveStatusInput::default_instance_ = NULL;

UpdateDatasetArchiveStatusInput* UpdateDatasetArchiveStatusInput::New() const {
  return new UpdateDatasetArchiveStatusInput;
}

void UpdateDatasetArchiveStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    datasetversion_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDatasetArchiveStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_backupStorageId;
        break;
      }
      
      // required fixed64 backupStorageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_datasetVersion;
        break;
      }
      
      // required fixed64 datasetVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetversion_)));
          set_has_datasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDatasetArchiveStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // required fixed64 backupStorageId = 4;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->backupstorageid(), output);
  }
  
  // required fixed64 datasetVersion = 5;
  if (has_datasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->datasetversion(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDatasetArchiveStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // required fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // required fixed64 backupStorageId = 4;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->backupstorageid(), target);
  }
  
  // required fixed64 datasetVersion = 5;
  if (has_datasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->datasetversion(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDatasetArchiveStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 backupStorageId = 4;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetVersion = 5;
    if (has_datasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetArchiveStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDatasetArchiveStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDatasetArchiveStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDatasetArchiveStatusInput::MergeFrom(const UpdateDatasetArchiveStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_datasetversion()) {
      set_datasetversion(from.datasetversion());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDatasetArchiveStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetArchiveStatusInput::CopyFrom(const UpdateDatasetArchiveStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatasetArchiveStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void UpdateDatasetArchiveStatusInput::Swap(UpdateDatasetArchiveStatusInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(datasetversion_, other->datasetversion_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDatasetArchiveStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetArchiveStatusInput_descriptor_;
  metadata.reflection = UpdateDatasetArchiveStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDatasetArchiveStatusOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

UpdateDatasetArchiveStatusOutput::UpdateDatasetArchiveStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDatasetArchiveStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

UpdateDatasetArchiveStatusOutput::UpdateDatasetArchiveStatusOutput(const UpdateDatasetArchiveStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDatasetArchiveStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDatasetArchiveStatusOutput::~UpdateDatasetArchiveStatusOutput() {
  SharedDtor();
}

void UpdateDatasetArchiveStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void UpdateDatasetArchiveStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDatasetArchiveStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDatasetArchiveStatusOutput_descriptor_;
}

const UpdateDatasetArchiveStatusOutput& UpdateDatasetArchiveStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

UpdateDatasetArchiveStatusOutput* UpdateDatasetArchiveStatusOutput::default_instance_ = NULL;

UpdateDatasetArchiveStatusOutput* UpdateDatasetArchiveStatusOutput::New() const {
  return new UpdateDatasetArchiveStatusOutput;
}

void UpdateDatasetArchiveStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDatasetArchiveStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDatasetArchiveStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDatasetArchiveStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDatasetArchiveStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDatasetArchiveStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDatasetArchiveStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDatasetArchiveStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDatasetArchiveStatusOutput::MergeFrom(const UpdateDatasetArchiveStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDatasetArchiveStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDatasetArchiveStatusOutput::CopyFrom(const UpdateDatasetArchiveStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDatasetArchiveStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void UpdateDatasetArchiveStatusOutput::Swap(UpdateDatasetArchiveStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDatasetArchiveStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDatasetArchiveStatusOutput_descriptor_;
  metadata.reflection = UpdateDatasetArchiveStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetStatusInput::kUserIdFieldNumber;
const int GetDatasetStatusInput::kDatasetIdFieldNumber;
const int GetDatasetStatusInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetDatasetStatusInput::GetDatasetStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetStatusInput::InitAsDefaultInstance() {
}

GetDatasetStatusInput::GetDatasetStatusInput(const GetDatasetStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetStatusInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetStatusInput::~GetDatasetStatusInput() {
  SharedDtor();
}

void GetDatasetStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetDatasetStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetStatusInput_descriptor_;
}

const GetDatasetStatusInput& GetDatasetStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDatasetStatusInput* GetDatasetStatusInput::default_instance_ = NULL;

GetDatasetStatusInput* GetDatasetStatusInput::New() const {
  return new GetDatasetStatusInput;
}

void GetDatasetStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetStatusInput::MergeFrom(const GetDatasetStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetStatusInput::CopyFrom(const GetDatasetStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetDatasetStatusInput::Swap(GetDatasetStatusInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetStatusInput_descriptor_;
  metadata.reflection = GetDatasetStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetStatusOutput::kErrorFieldNumber;
const int GetDatasetStatusOutput::kClusterIdFieldNumber;
const int GetDatasetStatusOutput::kPrimaryStorageIdFieldNumber;
const int GetDatasetStatusOutput::kPrimaryDatasetSizeFieldNumber;
const int GetDatasetStatusOutput::kPrimaryDatasetVersionFieldNumber;
const int GetDatasetStatusOutput::kSecondaryStorageIdFieldNumber;
const int GetDatasetStatusOutput::kSecondaryDatasetSizeFieldNumber;
const int GetDatasetStatusOutput::kSecondaryDatasetVersionFieldNumber;
const int GetDatasetStatusOutput::kBackupStorageIdFieldNumber;
const int GetDatasetStatusOutput::kDatasetTypeFieldNumber;
const int GetDatasetStatusOutput::kDeleteDataAfterFieldNumber;
const int GetDatasetStatusOutput::kBackupDatasetVersionFieldNumber;
const int GetDatasetStatusOutput::kArchiveDatasetVersionFieldNumber;
const int GetDatasetStatusOutput::kSuspendedFlagFieldNumber;
#endif  // !_MSC_VER

GetDatasetStatusOutput::GetDatasetStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetDatasetStatusOutput::GetDatasetStatusOutput(const GetDatasetStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  clusterid_ = GOOGLE_ULONGLONG(0);
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  primarydatasetsize_ = GOOGLE_ULONGLONG(0);
  primarydatasetversion_ = GOOGLE_ULONGLONG(0);
  secondarystorageid_ = GOOGLE_ULONGLONG(0);
  secondarydatasetsize_ = GOOGLE_ULONGLONG(0);
  secondarydatasetversion_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  datasettype_ = 1;
  deletedataafter_ = GOOGLE_ULONGLONG(0);
  backupdatasetversion_ = GOOGLE_ULONGLONG(0);
  archivedatasetversion_ = GOOGLE_ULONGLONG(0);
  suspendedflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetStatusOutput::~GetDatasetStatusOutput() {
  SharedDtor();
}

void GetDatasetStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetDatasetStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetStatusOutput_descriptor_;
}

const GetDatasetStatusOutput& GetDatasetStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDatasetStatusOutput* GetDatasetStatusOutput::default_instance_ = NULL;

GetDatasetStatusOutput* GetDatasetStatusOutput::New() const {
  return new GetDatasetStatusOutput;
}

void GetDatasetStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    clusterid_ = GOOGLE_ULONGLONG(0);
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    primarydatasetsize_ = GOOGLE_ULONGLONG(0);
    primarydatasetversion_ = GOOGLE_ULONGLONG(0);
    secondarystorageid_ = GOOGLE_ULONGLONG(0);
    secondarydatasetsize_ = GOOGLE_ULONGLONG(0);
    secondarydatasetversion_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    datasettype_ = 1;
    deletedataafter_ = GOOGLE_ULONGLONG(0);
    backupdatasetversion_ = GOOGLE_ULONGLONG(0);
    archivedatasetversion_ = GOOGLE_ULONGLONG(0);
    suspendedflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_clusterId;
        break;
      }
      
      // optional fixed64 clusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_primaryStorageId;
        break;
      }
      
      // optional fixed64 primaryStorageId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_primaryDatasetSize;
        break;
      }
      
      // optional fixed64 primaryDatasetSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryDatasetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarydatasetsize_)));
          set_has_primarydatasetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_primaryDatasetVersion;
        break;
      }
      
      // optional fixed64 primaryDatasetVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryDatasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarydatasetversion_)));
          set_has_primarydatasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_secondaryStorageId;
        break;
      }
      
      // optional fixed64 secondaryStorageId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarystorageid_)));
          set_has_secondarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_secondaryDatasetSize;
        break;
      }
      
      // optional fixed64 secondaryDatasetSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryDatasetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarydatasetsize_)));
          set_has_secondarydatasetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_secondaryDatasetVersion;
        break;
      }
      
      // optional fixed64 secondaryDatasetVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryDatasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarydatasetversion_)));
          set_has_secondarydatasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_backupStorageId;
        break;
      }
      
      // optional fixed64 backupStorageId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_datasetType;
        break;
      }
      
      // optional .vplex.vsDirectory.DatasetType datasetType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettype(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_deleteDataAfter;
        break;
      }
      
      // optional fixed64 deleteDataAfter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deleteDataAfter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deletedataafter_)));
          set_has_deletedataafter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_backupDatasetVersion;
        break;
      }
      
      // optional fixed64 backupDatasetVersion = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupDatasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupdatasetversion_)));
          set_has_backupdatasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_archiveDatasetVersion;
        break;
      }
      
      // optional fixed64 archiveDatasetVersion = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_archiveDatasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &archivedatasetversion_)));
          set_has_archivedatasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_suspendedFlag;
        break;
      }
      
      // optional bool suspendedFlag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspendedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspendedflag_)));
          set_has_suspendedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 clusterId = 2;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->clusterid(), output);
  }
  
  // optional fixed64 primaryStorageId = 3;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->primarystorageid(), output);
  }
  
  // optional fixed64 primaryDatasetSize = 4;
  if (has_primarydatasetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->primarydatasetsize(), output);
  }
  
  // optional fixed64 primaryDatasetVersion = 5;
  if (has_primarydatasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->primarydatasetversion(), output);
  }
  
  // optional fixed64 secondaryStorageId = 6;
  if (has_secondarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->secondarystorageid(), output);
  }
  
  // optional fixed64 secondaryDatasetSize = 7;
  if (has_secondarydatasetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->secondarydatasetsize(), output);
  }
  
  // optional fixed64 secondaryDatasetVersion = 8;
  if (has_secondarydatasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->secondarydatasetversion(), output);
  }
  
  // optional fixed64 backupStorageId = 9;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->backupstorageid(), output);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 10;
  if (has_datasettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->datasettype(), output);
  }
  
  // optional fixed64 deleteDataAfter = 11;
  if (has_deletedataafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->deletedataafter(), output);
  }
  
  // optional fixed64 backupDatasetVersion = 12;
  if (has_backupdatasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->backupdatasetversion(), output);
  }
  
  // optional fixed64 archiveDatasetVersion = 13;
  if (has_archivedatasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->archivedatasetversion(), output);
  }
  
  // optional bool suspendedFlag = 14;
  if (has_suspendedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->suspendedflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 clusterId = 2;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->clusterid(), target);
  }
  
  // optional fixed64 primaryStorageId = 3;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->primarystorageid(), target);
  }
  
  // optional fixed64 primaryDatasetSize = 4;
  if (has_primarydatasetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->primarydatasetsize(), target);
  }
  
  // optional fixed64 primaryDatasetVersion = 5;
  if (has_primarydatasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->primarydatasetversion(), target);
  }
  
  // optional fixed64 secondaryStorageId = 6;
  if (has_secondarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->secondarystorageid(), target);
  }
  
  // optional fixed64 secondaryDatasetSize = 7;
  if (has_secondarydatasetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->secondarydatasetsize(), target);
  }
  
  // optional fixed64 secondaryDatasetVersion = 8;
  if (has_secondarydatasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->secondarydatasetversion(), target);
  }
  
  // optional fixed64 backupStorageId = 9;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->backupstorageid(), target);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 10;
  if (has_datasettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->datasettype(), target);
  }
  
  // optional fixed64 deleteDataAfter = 11;
  if (has_deletedataafter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->deletedataafter(), target);
  }
  
  // optional fixed64 backupDatasetVersion = 12;
  if (has_backupdatasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->backupdatasetversion(), target);
  }
  
  // optional fixed64 archiveDatasetVersion = 13;
  if (has_archivedatasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->archivedatasetversion(), target);
  }
  
  // optional bool suspendedFlag = 14;
  if (has_suspendedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->suspendedflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 clusterId = 2;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryStorageId = 3;
    if (has_primarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryDatasetSize = 4;
    if (has_primarydatasetsize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryDatasetVersion = 5;
    if (has_primarydatasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryStorageId = 6;
    if (has_secondarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryDatasetSize = 7;
    if (has_secondarydatasetsize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryDatasetVersion = 8;
    if (has_secondarydatasetversion()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 backupStorageId = 9;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // optional .vplex.vsDirectory.DatasetType datasetType = 10;
    if (has_datasettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettype());
    }
    
    // optional fixed64 deleteDataAfter = 11;
    if (has_deletedataafter()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 backupDatasetVersion = 12;
    if (has_backupdatasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 archiveDatasetVersion = 13;
    if (has_archivedatasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional bool suspendedFlag = 14;
    if (has_suspendedflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetStatusOutput::MergeFrom(const GetDatasetStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_primarydatasetsize()) {
      set_primarydatasetsize(from.primarydatasetsize());
    }
    if (from.has_primarydatasetversion()) {
      set_primarydatasetversion(from.primarydatasetversion());
    }
    if (from.has_secondarystorageid()) {
      set_secondarystorageid(from.secondarystorageid());
    }
    if (from.has_secondarydatasetsize()) {
      set_secondarydatasetsize(from.secondarydatasetsize());
    }
    if (from.has_secondarydatasetversion()) {
      set_secondarydatasetversion(from.secondarydatasetversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_datasettype()) {
      set_datasettype(from.datasettype());
    }
    if (from.has_deletedataafter()) {
      set_deletedataafter(from.deletedataafter());
    }
    if (from.has_backupdatasetversion()) {
      set_backupdatasetversion(from.backupdatasetversion());
    }
    if (from.has_archivedatasetversion()) {
      set_archivedatasetversion(from.archivedatasetversion());
    }
    if (from.has_suspendedflag()) {
      set_suspendedflag(from.suspendedflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetStatusOutput::CopyFrom(const GetDatasetStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetDatasetStatusOutput::Swap(GetDatasetStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(primarydatasetsize_, other->primarydatasetsize_);
    std::swap(primarydatasetversion_, other->primarydatasetversion_);
    std::swap(secondarystorageid_, other->secondarystorageid_);
    std::swap(secondarydatasetsize_, other->secondarydatasetsize_);
    std::swap(secondarydatasetversion_, other->secondarydatasetversion_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(datasettype_, other->datasettype_);
    std::swap(deletedataafter_, other->deletedataafter_);
    std::swap(backupdatasetversion_, other->backupdatasetversion_);
    std::swap(archivedatasetversion_, other->archivedatasetversion_);
    std::swap(suspendedflag_, other->suspendedflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetStatusOutput_descriptor_;
  metadata.reflection = GetDatasetStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreDeviceEventInput::kSessionFieldNumber;
const int StoreDeviceEventInput::kUserIdFieldNumber;
const int StoreDeviceEventInput::kDeviceIdFieldNumber;
const int StoreDeviceEventInput::kEventInfosFieldNumber;
const int StoreDeviceEventInput::kVersionFieldNumber;
#endif  // !_MSC_VER

StoreDeviceEventInput::StoreDeviceEventInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreDeviceEventInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

StoreDeviceEventInput::StoreDeviceEventInput(const StoreDeviceEventInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreDeviceEventInput::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  deviceid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreDeviceEventInput::~StoreDeviceEventInput() {
  SharedDtor();
}

void StoreDeviceEventInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void StoreDeviceEventInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreDeviceEventInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreDeviceEventInput_descriptor_;
}

const StoreDeviceEventInput& StoreDeviceEventInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StoreDeviceEventInput* StoreDeviceEventInput::default_instance_ = NULL;

StoreDeviceEventInput* StoreDeviceEventInput::New() const {
  return new StoreDeviceEventInput;
}

void StoreDeviceEventInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  eventinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreDeviceEventInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.SessionInfo session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_deviceId;
        break;
      }
      
      // required fixed64 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eventInfos;
        break;
      }
      
      // repeated .vplex.vsDirectory.EventInfo eventInfos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eventinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_eventInfos;
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreDeviceEventInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->deviceid(), output);
  }
  
  // repeated .vplex.vsDirectory.EventInfo eventInfos = 4;
  for (int i = 0; i < this->eventinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->eventinfos(i), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreDeviceEventInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.SessionInfo session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->deviceid(), target);
  }
  
  // repeated .vplex.vsDirectory.EventInfo eventInfos = 4;
  for (int i = 0; i < this->eventinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->eventinfos(i), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreDeviceEventInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.SessionInfo session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated .vplex.vsDirectory.EventInfo eventInfos = 4;
  total_size += 1 * this->eventinfos_size();
  for (int i = 0; i < this->eventinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eventinfos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDeviceEventInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreDeviceEventInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreDeviceEventInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreDeviceEventInput::MergeFrom(const StoreDeviceEventInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  eventinfos_.MergeFrom(from.eventinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreDeviceEventInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDeviceEventInput::CopyFrom(const StoreDeviceEventInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDeviceEventInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  for (int i = 0; i < eventinfos_size(); i++) {
    if (!this->eventinfos(i).IsInitialized()) return false;
  }
  return true;
}

void StoreDeviceEventInput::Swap(StoreDeviceEventInput* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(deviceid_, other->deviceid_);
    eventinfos_.Swap(&other->eventinfos_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreDeviceEventInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreDeviceEventInput_descriptor_;
  metadata.reflection = StoreDeviceEventInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreDeviceEventOutput::kErrorFieldNumber;
const int StoreDeviceEventOutput::kSuccessCountFieldNumber;
const int StoreDeviceEventOutput::kErrorCountFieldNumber;
const int StoreDeviceEventOutput::kNextReportTimeFieldNumber;
#endif  // !_MSC_VER

StoreDeviceEventOutput::StoreDeviceEventOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreDeviceEventOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

StoreDeviceEventOutput::StoreDeviceEventOutput(const StoreDeviceEventOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreDeviceEventOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  successcount_ = 0u;
  errorcount_ = 0u;
  nextreporttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreDeviceEventOutput::~StoreDeviceEventOutput() {
  SharedDtor();
}

void StoreDeviceEventOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void StoreDeviceEventOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreDeviceEventOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreDeviceEventOutput_descriptor_;
}

const StoreDeviceEventOutput& StoreDeviceEventOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

StoreDeviceEventOutput* StoreDeviceEventOutput::default_instance_ = NULL;

StoreDeviceEventOutput* StoreDeviceEventOutput::New() const {
  return new StoreDeviceEventOutput;
}

void StoreDeviceEventOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    successcount_ = 0u;
    errorcount_ = 0u;
    nextreporttime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreDeviceEventOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_successCount;
        break;
      }
      
      // optional fixed32 successCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_successCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &successcount_)));
          set_has_successcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_errorCount;
        break;
      }
      
      // optional fixed32 errorCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_errorCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &errorcount_)));
          set_has_errorcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_nextReportTime;
        break;
      }
      
      // optional fixed32 nextReportTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nextReportTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &nextreporttime_)));
          set_has_nextreporttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreDeviceEventOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed32 successCount = 2;
  if (has_successcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->successcount(), output);
  }
  
  // optional fixed32 errorCount = 3;
  if (has_errorcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->errorcount(), output);
  }
  
  // optional fixed32 nextReportTime = 4;
  if (has_nextreporttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->nextreporttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreDeviceEventOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed32 successCount = 2;
  if (has_successcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->successcount(), target);
  }
  
  // optional fixed32 errorCount = 3;
  if (has_errorcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->errorcount(), target);
  }
  
  // optional fixed32 nextReportTime = 4;
  if (has_nextreporttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->nextreporttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreDeviceEventOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed32 successCount = 2;
    if (has_successcount()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 errorCount = 3;
    if (has_errorcount()) {
      total_size += 1 + 4;
    }
    
    // optional fixed32 nextReportTime = 4;
    if (has_nextreporttime()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreDeviceEventOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreDeviceEventOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreDeviceEventOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreDeviceEventOutput::MergeFrom(const StoreDeviceEventOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_successcount()) {
      set_successcount(from.successcount());
    }
    if (from.has_errorcount()) {
      set_errorcount(from.errorcount());
    }
    if (from.has_nextreporttime()) {
      set_nextreporttime(from.nextreporttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreDeviceEventOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreDeviceEventOutput::CopyFrom(const StoreDeviceEventOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreDeviceEventOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void StoreDeviceEventOutput::Swap(StoreDeviceEventOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(successcount_, other->successcount_);
    std::swap(errorcount_, other->errorcount_);
    std::swap(nextreporttime_, other->nextreporttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreDeviceEventOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreDeviceEventOutput_descriptor_;
  metadata.reflection = StoreDeviceEventOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventInfo::kAppIdFieldNumber;
const int EventInfo::kEventIdFieldNumber;
const int EventInfo::kStartTimeFieldNumber;
const int EventInfo::kEndTimeFieldNumber;
const int EventInfo::kEventCountFieldNumber;
const int EventInfo::kLimitReachedFieldNumber;
const int EventInfo::kEventInfoFieldNumber;
#endif  // !_MSC_VER

EventInfo::EventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventInfo::InitAsDefaultInstance() {
}

EventInfo::EventInfo(const EventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventInfo::SharedCtor() {
  _cached_size_ = 0;
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eventid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  eventcount_ = 0u;
  limitreached_ = false;
  eventinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventInfo::~EventInfo() {
  SharedDtor();
}

void EventInfo::SharedDtor() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (eventid_ != &::google::protobuf::internal::kEmptyString) {
    delete eventid_;
  }
  if (eventinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete eventinfo_;
  }
  if (this != default_instance_) {
  }
}

void EventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventInfo_descriptor_;
}

const EventInfo& EventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

EventInfo* EventInfo::default_instance_ = NULL;

EventInfo* EventInfo::New() const {
  return new EventInfo;
}

void EventInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_eventid()) {
      if (eventid_ != &::google::protobuf::internal::kEmptyString) {
        eventid_->clear();
      }
    }
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    eventcount_ = 0u;
    limitreached_ = false;
    if (has_eventinfo()) {
      if (eventinfo_ != &::google::protobuf::internal::kEmptyString) {
        eventinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eventId;
        break;
      }
      
      // required string eventId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventid().data(), this->eventid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_startTime;
        break;
      }
      
      // required fixed64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_endTime;
        break;
      }
      
      // optional fixed64 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_eventCount;
        break;
      }
      
      // optional fixed32 eventCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eventCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &eventcount_)));
          set_has_eventcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limitReached;
        break;
      }
      
      // optional bool limitReached = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitReached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limitreached_)));
          set_has_limitreached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eventInfo;
        break;
      }
      
      // optional string eventInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventinfo().data(), this->eventinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appid(), output);
  }
  
  // required string eventId = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->eventid(), output);
  }
  
  // required fixed64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->starttime(), output);
  }
  
  // optional fixed64 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->endtime(), output);
  }
  
  // optional fixed32 eventCount = 5;
  if (has_eventcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->eventcount(), output);
  }
  
  // optional bool limitReached = 6;
  if (has_limitreached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->limitreached(), output);
  }
  
  // optional string eventInfo = 7;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventinfo().data(), this->eventinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->eventinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appId = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appid(), target);
  }
  
  // required string eventId = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventid().data(), this->eventid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eventid(), target);
  }
  
  // required fixed64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->starttime(), target);
  }
  
  // optional fixed64 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->endtime(), target);
  }
  
  // optional fixed32 eventCount = 5;
  if (has_eventcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->eventcount(), target);
  }
  
  // optional bool limitReached = 6;
  if (has_limitreached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->limitreached(), target);
  }
  
  // optional string eventInfo = 7;
  if (has_eventinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventinfo().data(), this->eventinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->eventinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appId = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }
    
    // required string eventId = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventid());
    }
    
    // required fixed64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 endTime = 4;
    if (has_endtime()) {
      total_size += 1 + 8;
    }
    
    // optional fixed32 eventCount = 5;
    if (has_eventcount()) {
      total_size += 1 + 4;
    }
    
    // optional bool limitReached = 6;
    if (has_limitreached()) {
      total_size += 1 + 1;
    }
    
    // optional string eventInfo = 7;
    if (has_eventinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventInfo::MergeFrom(const EventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_eventcount()) {
      set_eventcount(from.eventcount());
    }
    if (from.has_limitreached()) {
      set_limitreached(from.limitreached());
    }
    if (from.has_eventinfo()) {
      set_eventinfo(from.eventinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventInfo::CopyFrom(const EventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void EventInfo::Swap(EventInfo* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(eventid_, other->eventid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(eventcount_, other->eventcount_);
    std::swap(limitreached_, other->limitreached_);
    std::swap(eventinfo_, other->eventinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventInfo_descriptor_;
  metadata.reflection = EventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLinkedDatasetStatusInput::kUserIdFieldNumber;
const int GetLinkedDatasetStatusInput::kDatasetIdFieldNumber;
const int GetLinkedDatasetStatusInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetLinkedDatasetStatusInput::GetLinkedDatasetStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLinkedDatasetStatusInput::InitAsDefaultInstance() {
}

GetLinkedDatasetStatusInput::GetLinkedDatasetStatusInput(const GetLinkedDatasetStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLinkedDatasetStatusInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLinkedDatasetStatusInput::~GetLinkedDatasetStatusInput() {
  SharedDtor();
}

void GetLinkedDatasetStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetLinkedDatasetStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLinkedDatasetStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLinkedDatasetStatusInput_descriptor_;
}

const GetLinkedDatasetStatusInput& GetLinkedDatasetStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetLinkedDatasetStatusInput* GetLinkedDatasetStatusInput::default_instance_ = NULL;

GetLinkedDatasetStatusInput* GetLinkedDatasetStatusInput::New() const {
  return new GetLinkedDatasetStatusInput;
}

void GetLinkedDatasetStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLinkedDatasetStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLinkedDatasetStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->datasetid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLinkedDatasetStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 datasetId = 2;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->datasetid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLinkedDatasetStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 2;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLinkedDatasetStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLinkedDatasetStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLinkedDatasetStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLinkedDatasetStatusInput::MergeFrom(const GetLinkedDatasetStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLinkedDatasetStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkedDatasetStatusInput::CopyFrom(const GetLinkedDatasetStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkedDatasetStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetLinkedDatasetStatusInput::Swap(GetLinkedDatasetStatusInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLinkedDatasetStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLinkedDatasetStatusInput_descriptor_;
  metadata.reflection = GetLinkedDatasetStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLinkedDatasetStatusOutput::kErrorFieldNumber;
const int GetLinkedDatasetStatusOutput::kLinkedDatasetIdFieldNumber;
const int GetLinkedDatasetStatusOutput::kClusterIdFieldNumber;
const int GetLinkedDatasetStatusOutput::kPrimaryStorageIdFieldNumber;
const int GetLinkedDatasetStatusOutput::kPrimaryDatasetSizeFieldNumber;
const int GetLinkedDatasetStatusOutput::kPrimaryDatasetVersionFieldNumber;
const int GetLinkedDatasetStatusOutput::kSecondaryStorageIdFieldNumber;
const int GetLinkedDatasetStatusOutput::kSecondaryDatasetSizeFieldNumber;
const int GetLinkedDatasetStatusOutput::kSecondaryDatasetVersionFieldNumber;
const int GetLinkedDatasetStatusOutput::kBackupStorageIdFieldNumber;
const int GetLinkedDatasetStatusOutput::kDatasetTypeFieldNumber;
const int GetLinkedDatasetStatusOutput::kSuspendedFlagFieldNumber;
#endif  // !_MSC_VER

GetLinkedDatasetStatusOutput::GetLinkedDatasetStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLinkedDatasetStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetLinkedDatasetStatusOutput::GetLinkedDatasetStatusOutput(const GetLinkedDatasetStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLinkedDatasetStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  linkeddatasetid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  primarystorageid_ = GOOGLE_ULONGLONG(0);
  primarydatasetsize_ = GOOGLE_ULONGLONG(0);
  primarydatasetversion_ = GOOGLE_ULONGLONG(0);
  secondarystorageid_ = GOOGLE_ULONGLONG(0);
  secondarydatasetsize_ = GOOGLE_ULONGLONG(0);
  secondarydatasetversion_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  datasettype_ = 1;
  suspendedflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLinkedDatasetStatusOutput::~GetLinkedDatasetStatusOutput() {
  SharedDtor();
}

void GetLinkedDatasetStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetLinkedDatasetStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLinkedDatasetStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLinkedDatasetStatusOutput_descriptor_;
}

const GetLinkedDatasetStatusOutput& GetLinkedDatasetStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetLinkedDatasetStatusOutput* GetLinkedDatasetStatusOutput::default_instance_ = NULL;

GetLinkedDatasetStatusOutput* GetLinkedDatasetStatusOutput::New() const {
  return new GetLinkedDatasetStatusOutput;
}

void GetLinkedDatasetStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    linkeddatasetid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    primarystorageid_ = GOOGLE_ULONGLONG(0);
    primarydatasetsize_ = GOOGLE_ULONGLONG(0);
    primarydatasetversion_ = GOOGLE_ULONGLONG(0);
    secondarystorageid_ = GOOGLE_ULONGLONG(0);
    secondarydatasetsize_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    secondarydatasetversion_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    datasettype_ = 1;
    suspendedflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLinkedDatasetStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_linkedDatasetId;
        break;
      }
      
      // optional fixed64 linkedDatasetId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_linkedDatasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &linkeddatasetid_)));
          set_has_linkeddatasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_clusterId;
        break;
      }
      
      // optional fixed64 clusterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_primaryStorageId;
        break;
      }
      
      // optional fixed64 primaryStorageId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarystorageid_)));
          set_has_primarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_primaryDatasetSize;
        break;
      }
      
      // optional fixed64 primaryDatasetSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryDatasetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarydatasetsize_)));
          set_has_primarydatasetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_primaryDatasetVersion;
        break;
      }
      
      // optional fixed64 primaryDatasetVersion = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_primaryDatasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &primarydatasetversion_)));
          set_has_primarydatasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_secondaryStorageId;
        break;
      }
      
      // optional fixed64 secondaryStorageId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarystorageid_)));
          set_has_secondarystorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_secondaryDatasetSize;
        break;
      }
      
      // optional fixed64 secondaryDatasetSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryDatasetSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarydatasetsize_)));
          set_has_secondarydatasetsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_secondaryDatasetVersion;
        break;
      }
      
      // optional fixed64 secondaryDatasetVersion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondaryDatasetVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &secondarydatasetversion_)));
          set_has_secondarydatasetversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_backupStorageId;
        break;
      }
      
      // optional fixed64 backupStorageId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_datasetType;
        break;
      }
      
      // optional .vplex.vsDirectory.DatasetType datasetType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datasetType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (vplex::vsDirectory::DatasetType_IsValid(value)) {
            set_datasettype(static_cast< vplex::vsDirectory::DatasetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_suspendedFlag;
        break;
      }
      
      // optional bool suspendedFlag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suspendedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suspendedflag_)));
          set_has_suspendedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLinkedDatasetStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 linkedDatasetId = 2;
  if (has_linkeddatasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->linkeddatasetid(), output);
  }
  
  // optional fixed64 clusterId = 3;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->clusterid(), output);
  }
  
  // optional fixed64 primaryStorageId = 4;
  if (has_primarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->primarystorageid(), output);
  }
  
  // optional fixed64 primaryDatasetSize = 5;
  if (has_primarydatasetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->primarydatasetsize(), output);
  }
  
  // optional fixed64 primaryDatasetVersion = 6;
  if (has_primarydatasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->primarydatasetversion(), output);
  }
  
  // optional fixed64 secondaryStorageId = 7;
  if (has_secondarystorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->secondarystorageid(), output);
  }
  
  // optional fixed64 secondaryDatasetSize = 8;
  if (has_secondarydatasetsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->secondarydatasetsize(), output);
  }
  
  // optional fixed64 secondaryDatasetVersion = 9;
  if (has_secondarydatasetversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->secondarydatasetversion(), output);
  }
  
  // optional fixed64 backupStorageId = 10;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->backupstorageid(), output);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 11;
  if (has_datasettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->datasettype(), output);
  }
  
  // optional bool suspendedFlag = 12;
  if (has_suspendedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->suspendedflag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLinkedDatasetStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 linkedDatasetId = 2;
  if (has_linkeddatasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->linkeddatasetid(), target);
  }
  
  // optional fixed64 clusterId = 3;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->clusterid(), target);
  }
  
  // optional fixed64 primaryStorageId = 4;
  if (has_primarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->primarystorageid(), target);
  }
  
  // optional fixed64 primaryDatasetSize = 5;
  if (has_primarydatasetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->primarydatasetsize(), target);
  }
  
  // optional fixed64 primaryDatasetVersion = 6;
  if (has_primarydatasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->primarydatasetversion(), target);
  }
  
  // optional fixed64 secondaryStorageId = 7;
  if (has_secondarystorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->secondarystorageid(), target);
  }
  
  // optional fixed64 secondaryDatasetSize = 8;
  if (has_secondarydatasetsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->secondarydatasetsize(), target);
  }
  
  // optional fixed64 secondaryDatasetVersion = 9;
  if (has_secondarydatasetversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->secondarydatasetversion(), target);
  }
  
  // optional fixed64 backupStorageId = 10;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->backupstorageid(), target);
  }
  
  // optional .vplex.vsDirectory.DatasetType datasetType = 11;
  if (has_datasettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->datasettype(), target);
  }
  
  // optional bool suspendedFlag = 12;
  if (has_suspendedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->suspendedflag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLinkedDatasetStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 linkedDatasetId = 2;
    if (has_linkeddatasetid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 clusterId = 3;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryStorageId = 4;
    if (has_primarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryDatasetSize = 5;
    if (has_primarydatasetsize()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 primaryDatasetVersion = 6;
    if (has_primarydatasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryStorageId = 7;
    if (has_secondarystorageid()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 secondaryDatasetSize = 8;
    if (has_secondarydatasetsize()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed64 secondaryDatasetVersion = 9;
    if (has_secondarydatasetversion()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 backupStorageId = 10;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // optional .vplex.vsDirectory.DatasetType datasetType = 11;
    if (has_datasettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datasettype());
    }
    
    // optional bool suspendedFlag = 12;
    if (has_suspendedflag()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLinkedDatasetStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLinkedDatasetStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLinkedDatasetStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLinkedDatasetStatusOutput::MergeFrom(const GetLinkedDatasetStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_linkeddatasetid()) {
      set_linkeddatasetid(from.linkeddatasetid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_primarystorageid()) {
      set_primarystorageid(from.primarystorageid());
    }
    if (from.has_primarydatasetsize()) {
      set_primarydatasetsize(from.primarydatasetsize());
    }
    if (from.has_primarydatasetversion()) {
      set_primarydatasetversion(from.primarydatasetversion());
    }
    if (from.has_secondarystorageid()) {
      set_secondarystorageid(from.secondarystorageid());
    }
    if (from.has_secondarydatasetsize()) {
      set_secondarydatasetsize(from.secondarydatasetsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_secondarydatasetversion()) {
      set_secondarydatasetversion(from.secondarydatasetversion());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_datasettype()) {
      set_datasettype(from.datasettype());
    }
    if (from.has_suspendedflag()) {
      set_suspendedflag(from.suspendedflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLinkedDatasetStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkedDatasetStatusOutput::CopyFrom(const GetLinkedDatasetStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkedDatasetStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetLinkedDatasetStatusOutput::Swap(GetLinkedDatasetStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(linkeddatasetid_, other->linkeddatasetid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(primarystorageid_, other->primarystorageid_);
    std::swap(primarydatasetsize_, other->primarydatasetsize_);
    std::swap(primarydatasetversion_, other->primarydatasetversion_);
    std::swap(secondarystorageid_, other->secondarystorageid_);
    std::swap(secondarydatasetsize_, other->secondarydatasetsize_);
    std::swap(secondarydatasetversion_, other->secondarydatasetversion_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(datasettype_, other->datasettype_);
    std::swap(suspendedflag_, other->suspendedflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLinkedDatasetStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLinkedDatasetStatusOutput_descriptor_;
  metadata.reflection = GetLinkedDatasetStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserQuotaStatusInput::kUserIdFieldNumber;
const int GetUserQuotaStatusInput::kClusterIdFieldNumber;
const int GetUserQuotaStatusInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetUserQuotaStatusInput::GetUserQuotaStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserQuotaStatusInput::InitAsDefaultInstance() {
}

GetUserQuotaStatusInput::GetUserQuotaStatusInput(const GetUserQuotaStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserQuotaStatusInput::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserQuotaStatusInput::~GetUserQuotaStatusInput() {
  SharedDtor();
}

void GetUserQuotaStatusInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetUserQuotaStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserQuotaStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserQuotaStatusInput_descriptor_;
}

const GetUserQuotaStatusInput& GetUserQuotaStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetUserQuotaStatusInput* GetUserQuotaStatusInput::default_instance_ = NULL;

GetUserQuotaStatusInput* GetUserQuotaStatusInput::New() const {
  return new GetUserQuotaStatusInput;
}

void GetUserQuotaStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = GOOGLE_ULONGLONG(0);
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserQuotaStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserQuotaStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->userid(), output);
  }
  
  // required fixed64 clusterId = 2;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->clusterid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserQuotaStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->userid(), target);
  }
  
  // required fixed64 clusterId = 2;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->clusterid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserQuotaStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 userId = 1;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 clusterId = 2;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserQuotaStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserQuotaStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserQuotaStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserQuotaStatusInput::MergeFrom(const GetUserQuotaStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserQuotaStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserQuotaStatusInput::CopyFrom(const GetUserQuotaStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserQuotaStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetUserQuotaStatusInput::Swap(GetUserQuotaStatusInput* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserQuotaStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserQuotaStatusInput_descriptor_;
  metadata.reflection = GetUserQuotaStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserQuotaStatusOutput::kErrorFieldNumber;
const int GetUserQuotaStatusOutput::kQuotaLimitFieldNumber;
const int GetUserQuotaStatusOutput::kCurrentUsageFieldNumber;
#endif  // !_MSC_VER

GetUserQuotaStatusOutput::GetUserQuotaStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserQuotaStatusOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetUserQuotaStatusOutput::GetUserQuotaStatusOutput(const GetUserQuotaStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserQuotaStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  quotalimit_ = GOOGLE_ULONGLONG(0);
  currentusage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserQuotaStatusOutput::~GetUserQuotaStatusOutput() {
  SharedDtor();
}

void GetUserQuotaStatusOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetUserQuotaStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserQuotaStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserQuotaStatusOutput_descriptor_;
}

const GetUserQuotaStatusOutput& GetUserQuotaStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetUserQuotaStatusOutput* GetUserQuotaStatusOutput::default_instance_ = NULL;

GetUserQuotaStatusOutput* GetUserQuotaStatusOutput::New() const {
  return new GetUserQuotaStatusOutput;
}

void GetUserQuotaStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    quotalimit_ = GOOGLE_ULONGLONG(0);
    currentusage_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserQuotaStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_quotaLimit;
        break;
      }
      
      // optional fixed64 quotaLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quotaLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &quotalimit_)));
          set_has_quotalimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_currentUsage;
        break;
      }
      
      // optional fixed64 currentUsage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_currentUsage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &currentusage_)));
          set_has_currentusage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserQuotaStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional fixed64 quotaLimit = 2;
  if (has_quotalimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->quotalimit(), output);
  }
  
  // optional fixed64 currentUsage = 3;
  if (has_currentusage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->currentusage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserQuotaStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional fixed64 quotaLimit = 2;
  if (has_quotalimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->quotalimit(), target);
  }
  
  // optional fixed64 currentUsage = 3;
  if (has_currentusage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->currentusage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserQuotaStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional fixed64 quotaLimit = 2;
    if (has_quotalimit()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 currentUsage = 3;
    if (has_currentusage()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserQuotaStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserQuotaStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserQuotaStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserQuotaStatusOutput::MergeFrom(const GetUserQuotaStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_quotalimit()) {
      set_quotalimit(from.quotalimit());
    }
    if (from.has_currentusage()) {
      set_currentusage(from.currentusage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserQuotaStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserQuotaStatusOutput::CopyFrom(const GetUserQuotaStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserQuotaStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetUserQuotaStatusOutput::Swap(GetUserQuotaStatusOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(quotalimit_, other->quotalimit_);
    std::swap(currentusage_, other->currentusage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserQuotaStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserQuotaStatusOutput_descriptor_;
  metadata.reflection = GetUserQuotaStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetsToBackupInput::kBackupStorageIdFieldNumber;
const int GetDatasetsToBackupInput::kUserIdFieldNumber;
const int GetDatasetsToBackupInput::kDatasetIdFieldNumber;
const int GetDatasetsToBackupInput::kCountFieldNumber;
const int GetDatasetsToBackupInput::kClusterIdFieldNumber;
const int GetDatasetsToBackupInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetDatasetsToBackupInput::GetDatasetsToBackupInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetsToBackupInput::InitAsDefaultInstance() {
}

GetDatasetsToBackupInput::GetDatasetsToBackupInput(const GetDatasetsToBackupInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetsToBackupInput::SharedCtor() {
  _cached_size_ = 0;
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  datasetid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  clusterid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetsToBackupInput::~GetDatasetsToBackupInput() {
  SharedDtor();
}

void GetDatasetsToBackupInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetDatasetsToBackupInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetsToBackupInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetsToBackupInput_descriptor_;
}

const GetDatasetsToBackupInput& GetDatasetsToBackupInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDatasetsToBackupInput* GetDatasetsToBackupInput::default_instance_ = NULL;

GetDatasetsToBackupInput* GetDatasetsToBackupInput::New() const {
  return new GetDatasetsToBackupInput;
}

void GetDatasetsToBackupInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    userid_ = GOOGLE_ULONGLONG(0);
    datasetid_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    clusterid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetsToBackupInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 backupStorageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_datasetId;
        break;
      }
      
      // required fixed64 datasetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_datasetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_count;
        break;
      }
      
      // required fixed32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_clusterId;
        break;
      }
      
      // optional fixed64 clusterId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }
      
      // optional string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetsToBackupInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 backupStorageId = 1;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->backupstorageid(), output);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->userid(), output);
  }
  
  // required fixed64 datasetId = 3;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->datasetid(), output);
  }
  
  // required fixed32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->count(), output);
  }
  
  // optional fixed64 clusterId = 5;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->clusterid(), output);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetsToBackupInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 backupStorageId = 1;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->backupstorageid(), target);
  }
  
  // required fixed64 userId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->userid(), target);
  }
  
  // required fixed64 datasetId = 3;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->datasetid(), target);
  }
  
  // required fixed32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->count(), target);
  }
  
  // optional fixed64 clusterId = 5;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->clusterid(), target);
  }
  
  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetsToBackupInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 backupStorageId = 1;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 userId = 2;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 datasetId = 3;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required fixed32 count = 4;
    if (has_count()) {
      total_size += 1 + 4;
    }
    
    // optional fixed64 clusterId = 5;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetsToBackupInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetsToBackupInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetsToBackupInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetsToBackupInput::MergeFrom(const GetDatasetsToBackupInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetsToBackupInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetsToBackupInput::CopyFrom(const GetDatasetsToBackupInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetsToBackupInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GetDatasetsToBackupInput::Swap(GetDatasetsToBackupInput* other) {
  if (other != this) {
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(userid_, other->userid_);
    std::swap(datasetid_, other->datasetid_);
    std::swap(count_, other->count_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetsToBackupInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetsToBackupInput_descriptor_;
  metadata.reflection = GetDatasetsToBackupInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetsToBackupOutput::kErrorFieldNumber;
const int GetDatasetsToBackupOutput::kDatasetsToBackupFieldNumber;
#endif  // !_MSC_VER

GetDatasetsToBackupOutput::GetDatasetsToBackupOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetsToBackupOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetDatasetsToBackupOutput::GetDatasetsToBackupOutput(const GetDatasetsToBackupOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetsToBackupOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetsToBackupOutput::~GetDatasetsToBackupOutput() {
  SharedDtor();
}

void GetDatasetsToBackupOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetDatasetsToBackupOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetsToBackupOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetsToBackupOutput_descriptor_;
}

const GetDatasetsToBackupOutput& GetDatasetsToBackupOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetDatasetsToBackupOutput* GetDatasetsToBackupOutput::default_instance_ = NULL;

GetDatasetsToBackupOutput* GetDatasetsToBackupOutput::New() const {
  return new GetDatasetsToBackupOutput;
}

void GetDatasetsToBackupOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  datasetstobackup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetsToBackupOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasetsToBackup;
        break;
      }
      
      // repeated .vplex.vsDirectory.BackupStatus datasetsToBackup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasetsToBackup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasetstobackup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasetsToBackup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetsToBackupOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.BackupStatus datasetsToBackup = 2;
  for (int i = 0; i < this->datasetstobackup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasetstobackup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetsToBackupOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.BackupStatus datasetsToBackup = 2;
  for (int i = 0; i < this->datasetstobackup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasetstobackup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetsToBackupOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.BackupStatus datasetsToBackup = 2;
  total_size += 1 * this->datasetstobackup_size();
  for (int i = 0; i < this->datasetstobackup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasetstobackup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetsToBackupOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetsToBackupOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetsToBackupOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetsToBackupOutput::MergeFrom(const GetDatasetsToBackupOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasetstobackup_.MergeFrom(from.datasetstobackup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetsToBackupOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetsToBackupOutput::CopyFrom(const GetDatasetsToBackupOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetsToBackupOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < datasetstobackup_size(); i++) {
    if (!this->datasetstobackup(i).IsInitialized()) return false;
  }
  return true;
}

void GetDatasetsToBackupOutput::Swap(GetDatasetsToBackupOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    datasetstobackup_.Swap(&other->datasetstobackup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetsToBackupOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetsToBackupOutput_descriptor_;
  metadata.reflection = GetDatasetsToBackupOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBRSHostNameInput::kClusterIdFieldNumber;
const int GetBRSHostNameInput::kBackupStorageIdFieldNumber;
const int GetBRSHostNameInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetBRSHostNameInput::GetBRSHostNameInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBRSHostNameInput::InitAsDefaultInstance() {
}

GetBRSHostNameInput::GetBRSHostNameInput(const GetBRSHostNameInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBRSHostNameInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  backupstorageid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBRSHostNameInput::~GetBRSHostNameInput() {
  SharedDtor();
}

void GetBRSHostNameInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetBRSHostNameInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBRSHostNameInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBRSHostNameInput_descriptor_;
}

const GetBRSHostNameInput& GetBRSHostNameInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBRSHostNameInput* GetBRSHostNameInput::default_instance_ = NULL;

GetBRSHostNameInput* GetBRSHostNameInput::New() const {
  return new GetBRSHostNameInput;
}

void GetBRSHostNameInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    backupstorageid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBRSHostNameInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_backupStorageId;
        break;
      }
      
      // required fixed64 backupStorageId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &backupstorageid_)));
          set_has_backupstorageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBRSHostNameInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // required fixed64 backupStorageId = 2;
  if (has_backupstorageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->backupstorageid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBRSHostNameInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // required fixed64 backupStorageId = 2;
  if (has_backupstorageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->backupstorageid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBRSHostNameInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 backupStorageId = 2;
    if (has_backupstorageid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBRSHostNameInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBRSHostNameInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBRSHostNameInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBRSHostNameInput::MergeFrom(const GetBRSHostNameInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_backupstorageid()) {
      set_backupstorageid(from.backupstorageid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBRSHostNameInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBRSHostNameInput::CopyFrom(const GetBRSHostNameInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBRSHostNameInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetBRSHostNameInput::Swap(GetBRSHostNameInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(backupstorageid_, other->backupstorageid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBRSHostNameInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBRSHostNameInput_descriptor_;
  metadata.reflection = GetBRSHostNameInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBRSHostNameOutput::kErrorFieldNumber;
const int GetBRSHostNameOutput::kHostNameFieldNumber;
#endif  // !_MSC_VER

GetBRSHostNameOutput::GetBRSHostNameOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBRSHostNameOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetBRSHostNameOutput::GetBRSHostNameOutput(const GetBRSHostNameOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBRSHostNameOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBRSHostNameOutput::~GetBRSHostNameOutput() {
  SharedDtor();
}

void GetBRSHostNameOutput::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete error_;
  }
}

void GetBRSHostNameOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBRSHostNameOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBRSHostNameOutput_descriptor_;
}

const GetBRSHostNameOutput& GetBRSHostNameOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBRSHostNameOutput* GetBRSHostNameOutput::default_instance_ = NULL;

GetBRSHostNameOutput* GetBRSHostNameOutput::New() const {
  return new GetBRSHostNameOutput;
}

void GetBRSHostNameOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBRSHostNameOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hostName;
        break;
      }
      
      // optional string hostName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBRSHostNameOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // optional string hostName = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBRSHostNameOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // optional string hostName = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBRSHostNameOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional string hostName = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBRSHostNameOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBRSHostNameOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBRSHostNameOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBRSHostNameOutput::MergeFrom(const GetBRSHostNameOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBRSHostNameOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBRSHostNameOutput::CopyFrom(const GetBRSHostNameOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBRSHostNameOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetBRSHostNameOutput::Swap(GetBRSHostNameOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(hostname_, other->hostname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBRSHostNameOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBRSHostNameOutput_descriptor_;
  metadata.reflection = GetBRSHostNameOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBackupStorageUnitsForBrsInput::kClusterIdFieldNumber;
const int GetBackupStorageUnitsForBrsInput::kBrsIdFieldNumber;
const int GetBackupStorageUnitsForBrsInput::kVersionFieldNumber;
#endif  // !_MSC_VER

GetBackupStorageUnitsForBrsInput::GetBackupStorageUnitsForBrsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBackupStorageUnitsForBrsInput::InitAsDefaultInstance() {
}

GetBackupStorageUnitsForBrsInput::GetBackupStorageUnitsForBrsInput(const GetBackupStorageUnitsForBrsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBackupStorageUnitsForBrsInput::SharedCtor() {
  _cached_size_ = 0;
  clusterid_ = GOOGLE_ULONGLONG(0);
  brsid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBackupStorageUnitsForBrsInput::~GetBackupStorageUnitsForBrsInput() {
  SharedDtor();
}

void GetBackupStorageUnitsForBrsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetBackupStorageUnitsForBrsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBackupStorageUnitsForBrsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBackupStorageUnitsForBrsInput_descriptor_;
}

const GetBackupStorageUnitsForBrsInput& GetBackupStorageUnitsForBrsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBackupStorageUnitsForBrsInput* GetBackupStorageUnitsForBrsInput::default_instance_ = NULL;

GetBackupStorageUnitsForBrsInput* GetBackupStorageUnitsForBrsInput::New() const {
  return new GetBackupStorageUnitsForBrsInput;
}

void GetBackupStorageUnitsForBrsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clusterid_ = GOOGLE_ULONGLONG(0);
    brsid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBackupStorageUnitsForBrsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 clusterId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_brsId;
        break;
      }
      
      // required fixed64 brsId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_brsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &brsid_)));
          set_has_brsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBackupStorageUnitsForBrsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->clusterid(), output);
  }
  
  // required fixed64 brsId = 2;
  if (has_brsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->brsid(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBackupStorageUnitsForBrsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 clusterId = 1;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->clusterid(), target);
  }
  
  // required fixed64 brsId = 2;
  if (has_brsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->brsid(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBackupStorageUnitsForBrsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 clusterId = 1;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 brsId = 2;
    if (has_brsid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBackupStorageUnitsForBrsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBackupStorageUnitsForBrsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBackupStorageUnitsForBrsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBackupStorageUnitsForBrsInput::MergeFrom(const GetBackupStorageUnitsForBrsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_brsid()) {
      set_brsid(from.brsid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBackupStorageUnitsForBrsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBackupStorageUnitsForBrsInput::CopyFrom(const GetBackupStorageUnitsForBrsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBackupStorageUnitsForBrsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetBackupStorageUnitsForBrsInput::Swap(GetBackupStorageUnitsForBrsInput* other) {
  if (other != this) {
    std::swap(clusterid_, other->clusterid_);
    std::swap(brsid_, other->brsid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBackupStorageUnitsForBrsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBackupStorageUnitsForBrsInput_descriptor_;
  metadata.reflection = GetBackupStorageUnitsForBrsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBackupStorageUnitsForBrsOutput::kErrorFieldNumber;
const int GetBackupStorageUnitsForBrsOutput::kBackupStorageIdsFieldNumber;
#endif  // !_MSC_VER

GetBackupStorageUnitsForBrsOutput::GetBackupStorageUnitsForBrsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBackupStorageUnitsForBrsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetBackupStorageUnitsForBrsOutput::GetBackupStorageUnitsForBrsOutput(const GetBackupStorageUnitsForBrsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBackupStorageUnitsForBrsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBackupStorageUnitsForBrsOutput::~GetBackupStorageUnitsForBrsOutput() {
  SharedDtor();
}

void GetBackupStorageUnitsForBrsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetBackupStorageUnitsForBrsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBackupStorageUnitsForBrsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBackupStorageUnitsForBrsOutput_descriptor_;
}

const GetBackupStorageUnitsForBrsOutput& GetBackupStorageUnitsForBrsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetBackupStorageUnitsForBrsOutput* GetBackupStorageUnitsForBrsOutput::default_instance_ = NULL;

GetBackupStorageUnitsForBrsOutput* GetBackupStorageUnitsForBrsOutput::New() const {
  return new GetBackupStorageUnitsForBrsOutput;
}

void GetBackupStorageUnitsForBrsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  backupstorageids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBackupStorageUnitsForBrsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_backupStorageIds;
        break;
      }
      
      // repeated fixed64 backupStorageIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_backupStorageIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_backupstorageids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_backupstorageids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_backupStorageIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBackupStorageUnitsForBrsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated fixed64 backupStorageIds = 2;
  for (int i = 0; i < this->backupstorageids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->backupstorageids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBackupStorageUnitsForBrsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated fixed64 backupStorageIds = 2;
  for (int i = 0; i < this->backupstorageids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->backupstorageids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBackupStorageUnitsForBrsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated fixed64 backupStorageIds = 2;
  {
    int data_size = 0;
    data_size = 8 * this->backupstorageids_size();
    total_size += 1 * this->backupstorageids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBackupStorageUnitsForBrsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBackupStorageUnitsForBrsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBackupStorageUnitsForBrsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBackupStorageUnitsForBrsOutput::MergeFrom(const GetBackupStorageUnitsForBrsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  backupstorageids_.MergeFrom(from.backupstorageids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBackupStorageUnitsForBrsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBackupStorageUnitsForBrsOutput::CopyFrom(const GetBackupStorageUnitsForBrsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBackupStorageUnitsForBrsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void GetBackupStorageUnitsForBrsOutput::Swap(GetBackupStorageUnitsForBrsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    backupstorageids_.Swap(&other->backupstorageids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBackupStorageUnitsForBrsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBackupStorageUnitsForBrsOutput_descriptor_;
  metadata.reflection = GetBackupStorageUnitsForBrsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdatedDatasetsInput::kVersionFieldNumber;
const int GetUpdatedDatasetsInput::kClusterIdFieldNumber;
const int GetUpdatedDatasetsInput::kStartTimeFieldNumber;
const int GetUpdatedDatasetsInput::kEndTimeFieldNumber;
const int GetUpdatedDatasetsInput::kCountFieldNumber;
const int GetUpdatedDatasetsInput::kFiltersFieldNumber;
#endif  // !_MSC_VER

GetUpdatedDatasetsInput::GetUpdatedDatasetsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUpdatedDatasetsInput::InitAsDefaultInstance() {
}

GetUpdatedDatasetsInput::GetUpdatedDatasetsInput(const GetUpdatedDatasetsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatedDatasetsInput::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clusterid_ = GOOGLE_ULONGLONG(0);
  starttime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatedDatasetsInput::~GetUpdatedDatasetsInput() {
  SharedDtor();
}

void GetUpdatedDatasetsInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void GetUpdatedDatasetsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpdatedDatasetsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUpdatedDatasetsInput_descriptor_;
}

const GetUpdatedDatasetsInput& GetUpdatedDatasetsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetUpdatedDatasetsInput* GetUpdatedDatasetsInput::default_instance_ = NULL;

GetUpdatedDatasetsInput* GetUpdatedDatasetsInput::New() const {
  return new GetUpdatedDatasetsInput;
}

void GetUpdatedDatasetsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    clusterid_ = GOOGLE_ULONGLONG(0);
    starttime_ = GOOGLE_ULONGLONG(0);
    endtime_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
  }
  filters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatedDatasetsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_clusterId;
        break;
      }
      
      // required fixed64 clusterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_clusterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &clusterid_)));
          set_has_clusterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_startTime;
        break;
      }
      
      // required fixed64 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_endTime;
        break;
      }
      
      // required fixed64 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_count;
        break;
      }
      
      // required fixed32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filters;
        break;
      }
      
      // repeated .vplex.vsDirectory.DatasetFilter filters = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatedDatasetsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required fixed64 clusterId = 2;
  if (has_clusterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->clusterid(), output);
  }
  
  // required fixed64 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->starttime(), output);
  }
  
  // required fixed64 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->endtime(), output);
  }
  
  // required fixed32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->count(), output);
  }
  
  // repeated .vplex.vsDirectory.DatasetFilter filters = 6;
  for (int i = 0; i < this->filters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUpdatedDatasetsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required fixed64 clusterId = 2;
  if (has_clusterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->clusterid(), target);
  }
  
  // required fixed64 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->starttime(), target);
  }
  
  // required fixed64 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->endtime(), target);
  }
  
  // required fixed32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->count(), target);
  }
  
  // repeated .vplex.vsDirectory.DatasetFilter filters = 6;
  for (int i = 0; i < this->filters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->filters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUpdatedDatasetsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required fixed64 clusterId = 2;
    if (has_clusterid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 startTime = 3;
    if (has_starttime()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 endTime = 4;
    if (has_endtime()) {
      total_size += 1 + 8;
    }
    
    // required fixed32 count = 5;
    if (has_count()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .vplex.vsDirectory.DatasetFilter filters = 6;
  total_size += 1 * this->filters_size();
  for (int i = 0; i < this->filters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatedDatasetsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUpdatedDatasetsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUpdatedDatasetsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUpdatedDatasetsInput::MergeFrom(const GetUpdatedDatasetsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  filters_.MergeFrom(from.filters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_clusterid()) {
      set_clusterid(from.clusterid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatedDatasetsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdatedDatasetsInput::CopyFrom(const GetUpdatedDatasetsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatedDatasetsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < filters_size(); i++) {
    if (!this->filters(i).IsInitialized()) return false;
  }
  return true;
}

void GetUpdatedDatasetsInput::Swap(GetUpdatedDatasetsInput* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(clusterid_, other->clusterid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(count_, other->count_);
    filters_.Swap(&other->filters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUpdatedDatasetsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUpdatedDatasetsInput_descriptor_;
  metadata.reflection = GetUpdatedDatasetsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUpdatedDatasetsOutput::kErrorFieldNumber;
const int GetUpdatedDatasetsOutput::kDatasetsFieldNumber;
#endif  // !_MSC_VER

GetUpdatedDatasetsOutput::GetUpdatedDatasetsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUpdatedDatasetsOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

GetUpdatedDatasetsOutput::GetUpdatedDatasetsOutput(const GetUpdatedDatasetsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUpdatedDatasetsOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUpdatedDatasetsOutput::~GetUpdatedDatasetsOutput() {
  SharedDtor();
}

void GetUpdatedDatasetsOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GetUpdatedDatasetsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUpdatedDatasetsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUpdatedDatasetsOutput_descriptor_;
}

const GetUpdatedDatasetsOutput& GetUpdatedDatasetsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

GetUpdatedDatasetsOutput* GetUpdatedDatasetsOutput::default_instance_ = NULL;

GetUpdatedDatasetsOutput* GetUpdatedDatasetsOutput::New() const {
  return new GetUpdatedDatasetsOutput;
}

void GetUpdatedDatasetsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  datasets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUpdatedDatasetsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasets;
        break;
      }
      
      // repeated .vplex.vsDirectory.UpdatedDataset datasets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datasets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUpdatedDatasetsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  // repeated .vplex.vsDirectory.UpdatedDataset datasets = 2;
  for (int i = 0; i < this->datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datasets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUpdatedDatasetsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  // repeated .vplex.vsDirectory.UpdatedDataset datasets = 2;
  for (int i = 0; i < this->datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datasets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUpdatedDatasetsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  // repeated .vplex.vsDirectory.UpdatedDataset datasets = 2;
  total_size += 1 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUpdatedDatasetsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUpdatedDatasetsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUpdatedDatasetsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUpdatedDatasetsOutput::MergeFrom(const GetUpdatedDatasetsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasets_.MergeFrom(from.datasets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUpdatedDatasetsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUpdatedDatasetsOutput::CopyFrom(const GetUpdatedDatasetsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUpdatedDatasetsOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  for (int i = 0; i < datasets_size(); i++) {
    if (!this->datasets(i).IsInitialized()) return false;
  }
  return true;
}

void GetUpdatedDatasetsOutput::Swap(GetUpdatedDatasetsOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    datasets_.Swap(&other->datasets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUpdatedDatasetsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUpdatedDatasetsOutput_descriptor_;
  metadata.reflection = GetUpdatedDatasetsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDatasetArchiveStorageDeviceInput::kDatasetIdFieldNumber;
const int AddDatasetArchiveStorageDeviceInput::kArchiveStorageDeviceIdFieldNumber;
const int AddDatasetArchiveStorageDeviceInput::kSessionFieldNumber;
const int AddDatasetArchiveStorageDeviceInput::kUserIdFieldNumber;
const int AddDatasetArchiveStorageDeviceInput::kVersionFieldNumber;
#endif  // !_MSC_VER

AddDatasetArchiveStorageDeviceInput::AddDatasetArchiveStorageDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDatasetArchiveStorageDeviceInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

AddDatasetArchiveStorageDeviceInput::AddDatasetArchiveStorageDeviceInput(const AddDatasetArchiveStorageDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDatasetArchiveStorageDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  datasetid_ = GOOGLE_ULONGLONG(0);
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDatasetArchiveStorageDeviceInput::~AddDatasetArchiveStorageDeviceInput() {
  SharedDtor();
}

void AddDatasetArchiveStorageDeviceInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void AddDatasetArchiveStorageDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDatasetArchiveStorageDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDatasetArchiveStorageDeviceInput_descriptor_;
}

const AddDatasetArchiveStorageDeviceInput& AddDatasetArchiveStorageDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddDatasetArchiveStorageDeviceInput* AddDatasetArchiveStorageDeviceInput::default_instance_ = NULL;

AddDatasetArchiveStorageDeviceInput* AddDatasetArchiveStorageDeviceInput::New() const {
  return new AddDatasetArchiveStorageDeviceInput;
}

void AddDatasetArchiveStorageDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  archivestoragedeviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDatasetArchiveStorageDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 datasetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_archiveStorageDeviceId;
        break;
      }
      
      // repeated fixed64 archiveStorageDeviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_archiveStorageDeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_archivestoragedeviceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_archivestoragedeviceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_archiveStorageDeviceId;
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }
      
      // required .vplex.vsDirectory.SessionInfo session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDatasetArchiveStorageDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->datasetid(), output);
  }
  
  // repeated fixed64 archiveStorageDeviceId = 2;
  for (int i = 0; i < this->archivestoragedeviceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->archivestoragedeviceid(i), output);
  }
  
  // required .vplex.vsDirectory.SessionInfo session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->session(), output);
  }
  
  // required fixed64 userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->userid(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDatasetArchiveStorageDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->datasetid(), target);
  }
  
  // repeated fixed64 archiveStorageDeviceId = 2;
  for (int i = 0; i < this->archivestoragedeviceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->archivestoragedeviceid(i), target);
  }
  
  // required .vplex.vsDirectory.SessionInfo session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->session(), target);
  }
  
  // required fixed64 userId = 4;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->userid(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDatasetArchiveStorageDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 datasetId = 1;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required .vplex.vsDirectory.SessionInfo session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 4;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated fixed64 archiveStorageDeviceId = 2;
  {
    int data_size = 0;
    data_size = 8 * this->archivestoragedeviceid_size();
    total_size += 1 * this->archivestoragedeviceid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDatasetArchiveStorageDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDatasetArchiveStorageDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDatasetArchiveStorageDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDatasetArchiveStorageDeviceInput::MergeFrom(const AddDatasetArchiveStorageDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  archivestoragedeviceid_.MergeFrom(from.archivestoragedeviceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDatasetArchiveStorageDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatasetArchiveStorageDeviceInput::CopyFrom(const AddDatasetArchiveStorageDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatasetArchiveStorageDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void AddDatasetArchiveStorageDeviceInput::Swap(AddDatasetArchiveStorageDeviceInput* other) {
  if (other != this) {
    std::swap(datasetid_, other->datasetid_);
    archivestoragedeviceid_.Swap(&other->archivestoragedeviceid_);
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDatasetArchiveStorageDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDatasetArchiveStorageDeviceInput_descriptor_;
  metadata.reflection = AddDatasetArchiveStorageDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDatasetArchiveStorageDeviceOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

AddDatasetArchiveStorageDeviceOutput::AddDatasetArchiveStorageDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDatasetArchiveStorageDeviceOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

AddDatasetArchiveStorageDeviceOutput::AddDatasetArchiveStorageDeviceOutput(const AddDatasetArchiveStorageDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDatasetArchiveStorageDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDatasetArchiveStorageDeviceOutput::~AddDatasetArchiveStorageDeviceOutput() {
  SharedDtor();
}

void AddDatasetArchiveStorageDeviceOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void AddDatasetArchiveStorageDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDatasetArchiveStorageDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDatasetArchiveStorageDeviceOutput_descriptor_;
}

const AddDatasetArchiveStorageDeviceOutput& AddDatasetArchiveStorageDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

AddDatasetArchiveStorageDeviceOutput* AddDatasetArchiveStorageDeviceOutput::default_instance_ = NULL;

AddDatasetArchiveStorageDeviceOutput* AddDatasetArchiveStorageDeviceOutput::New() const {
  return new AddDatasetArchiveStorageDeviceOutput;
}

void AddDatasetArchiveStorageDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDatasetArchiveStorageDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDatasetArchiveStorageDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDatasetArchiveStorageDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDatasetArchiveStorageDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDatasetArchiveStorageDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDatasetArchiveStorageDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDatasetArchiveStorageDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDatasetArchiveStorageDeviceOutput::MergeFrom(const AddDatasetArchiveStorageDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDatasetArchiveStorageDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatasetArchiveStorageDeviceOutput::CopyFrom(const AddDatasetArchiveStorageDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatasetArchiveStorageDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void AddDatasetArchiveStorageDeviceOutput::Swap(AddDatasetArchiveStorageDeviceOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDatasetArchiveStorageDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDatasetArchiveStorageDeviceOutput_descriptor_;
  metadata.reflection = AddDatasetArchiveStorageDeviceOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDatasetArchiveStorageDeviceInput::kDatasetIdFieldNumber;
const int RemoveDatasetArchiveStorageDeviceInput::kArchiveStorageDeviceIdFieldNumber;
const int RemoveDatasetArchiveStorageDeviceInput::kSessionFieldNumber;
const int RemoveDatasetArchiveStorageDeviceInput::kUserIdFieldNumber;
const int RemoveDatasetArchiveStorageDeviceInput::kVersionFieldNumber;
#endif  // !_MSC_VER

RemoveDatasetArchiveStorageDeviceInput::RemoveDatasetArchiveStorageDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDatasetArchiveStorageDeviceInput::InitAsDefaultInstance() {
  session_ = const_cast< ::vplex::vsDirectory::SessionInfo*>(&::vplex::vsDirectory::SessionInfo::default_instance());
}

RemoveDatasetArchiveStorageDeviceInput::RemoveDatasetArchiveStorageDeviceInput(const RemoveDatasetArchiveStorageDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDatasetArchiveStorageDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  datasetid_ = GOOGLE_ULONGLONG(0);
  session_ = NULL;
  userid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDatasetArchiveStorageDeviceInput::~RemoveDatasetArchiveStorageDeviceInput() {
  SharedDtor();
}

void RemoveDatasetArchiveStorageDeviceInput::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void RemoveDatasetArchiveStorageDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDatasetArchiveStorageDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDatasetArchiveStorageDeviceInput_descriptor_;
}

const RemoveDatasetArchiveStorageDeviceInput& RemoveDatasetArchiveStorageDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RemoveDatasetArchiveStorageDeviceInput* RemoveDatasetArchiveStorageDeviceInput::default_instance_ = NULL;

RemoveDatasetArchiveStorageDeviceInput* RemoveDatasetArchiveStorageDeviceInput::New() const {
  return new RemoveDatasetArchiveStorageDeviceInput;
}

void RemoveDatasetArchiveStorageDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    datasetid_ = GOOGLE_ULONGLONG(0);
    if (has_session()) {
      if (session_ != NULL) session_->::vplex::vsDirectory::SessionInfo::Clear();
    }
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  archivestoragedeviceid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDatasetArchiveStorageDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 datasetId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &datasetid_)));
          set_has_datasetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_archiveStorageDeviceId;
        break;
      }
      
      // repeated fixed64 archiveStorageDeviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_archiveStorageDeviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_archivestoragedeviceid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_archivestoragedeviceid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_archiveStorageDeviceId;
        if (input->ExpectTag(26)) goto parse_session;
        break;
      }
      
      // required .vplex.vsDirectory.SessionInfo session = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_userId;
        break;
      }
      
      // required fixed64 userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // optional string version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDatasetArchiveStorageDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->datasetid(), output);
  }
  
  // repeated fixed64 archiveStorageDeviceId = 2;
  for (int i = 0; i < this->archivestoragedeviceid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->archivestoragedeviceid(i), output);
  }
  
  // required .vplex.vsDirectory.SessionInfo session = 3;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->session(), output);
  }
  
  // required fixed64 userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->userid(), output);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDatasetArchiveStorageDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 datasetId = 1;
  if (has_datasetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->datasetid(), target);
  }
  
  // repeated fixed64 archiveStorageDeviceId = 2;
  for (int i = 0; i < this->archivestoragedeviceid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->archivestoragedeviceid(i), target);
  }
  
  // required .vplex.vsDirectory.SessionInfo session = 3;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->session(), target);
  }
  
  // required fixed64 userId = 4;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->userid(), target);
  }
  
  // optional string version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDatasetArchiveStorageDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 datasetId = 1;
    if (has_datasetid()) {
      total_size += 1 + 8;
    }
    
    // required .vplex.vsDirectory.SessionInfo session = 3;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // required fixed64 userId = 4;
    if (has_userid()) {
      total_size += 1 + 8;
    }
    
    // optional string version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated fixed64 archiveStorageDeviceId = 2;
  {
    int data_size = 0;
    data_size = 8 * this->archivestoragedeviceid_size();
    total_size += 1 * this->archivestoragedeviceid_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDatasetArchiveStorageDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDatasetArchiveStorageDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDatasetArchiveStorageDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDatasetArchiveStorageDeviceInput::MergeFrom(const RemoveDatasetArchiveStorageDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  archivestoragedeviceid_.MergeFrom(from.archivestoragedeviceid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datasetid()) {
      set_datasetid(from.datasetid());
    }
    if (from.has_session()) {
      mutable_session()->::vplex::vsDirectory::SessionInfo::MergeFrom(from.session());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDatasetArchiveStorageDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDatasetArchiveStorageDeviceInput::CopyFrom(const RemoveDatasetArchiveStorageDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDatasetArchiveStorageDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void RemoveDatasetArchiveStorageDeviceInput::Swap(RemoveDatasetArchiveStorageDeviceInput* other) {
  if (other != this) {
    std::swap(datasetid_, other->datasetid_);
    archivestoragedeviceid_.Swap(&other->archivestoragedeviceid_);
    std::swap(session_, other->session_);
    std::swap(userid_, other->userid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDatasetArchiveStorageDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDatasetArchiveStorageDeviceInput_descriptor_;
  metadata.reflection = RemoveDatasetArchiveStorageDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveDatasetArchiveStorageDeviceOutput::kErrorFieldNumber;
#endif  // !_MSC_VER

RemoveDatasetArchiveStorageDeviceOutput::RemoveDatasetArchiveStorageDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveDatasetArchiveStorageDeviceOutput::InitAsDefaultInstance() {
  error_ = const_cast< ::vplex::vsDirectory::Error*>(&::vplex::vsDirectory::Error::default_instance());
}

RemoveDatasetArchiveStorageDeviceOutput::RemoveDatasetArchiveStorageDeviceOutput(const RemoveDatasetArchiveStorageDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveDatasetArchiveStorageDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveDatasetArchiveStorageDeviceOutput::~RemoveDatasetArchiveStorageDeviceOutput() {
  SharedDtor();
}

void RemoveDatasetArchiveStorageDeviceOutput::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void RemoveDatasetArchiveStorageDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveDatasetArchiveStorageDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveDatasetArchiveStorageDeviceOutput_descriptor_;
}

const RemoveDatasetArchiveStorageDeviceOutput& RemoveDatasetArchiveStorageDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();  return *default_instance_;
}

RemoveDatasetArchiveStorageDeviceOutput* RemoveDatasetArchiveStorageDeviceOutput::default_instance_ = NULL;

RemoveDatasetArchiveStorageDeviceOutput* RemoveDatasetArchiveStorageDeviceOutput::New() const {
  return new RemoveDatasetArchiveStorageDeviceOutput;
}

void RemoveDatasetArchiveStorageDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_error()) {
      if (error_ != NULL) error_->::vplex::vsDirectory::Error::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveDatasetArchiveStorageDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Error error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveDatasetArchiveStorageDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveDatasetArchiveStorageDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveDatasetArchiveStorageDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveDatasetArchiveStorageDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveDatasetArchiveStorageDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveDatasetArchiveStorageDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveDatasetArchiveStorageDeviceOutput::MergeFrom(const RemoveDatasetArchiveStorageDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::vplex::vsDirectory::Error::MergeFrom(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveDatasetArchiveStorageDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveDatasetArchiveStorageDeviceOutput::CopyFrom(const RemoveDatasetArchiveStorageDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDatasetArchiveStorageDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  return true;
}

void RemoveDatasetArchiveStorageDeviceOutput::Swap(RemoveDatasetArchiveStorageDeviceOutput* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveDatasetArchiveStorageDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveDatasetArchiveStorageDeviceOutput_descriptor_;
  metadata.reflection = RemoveDatasetArchiveStorageDeviceOutput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vsDirectory
}  // namespace vplex

// @@protoc_insertion_point(global_scope)
