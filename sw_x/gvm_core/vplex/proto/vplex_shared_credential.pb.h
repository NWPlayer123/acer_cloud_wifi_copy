// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vplex_shared_credential.proto

#ifndef PROTOBUF_vplex_5fshared_5fcredential_2eproto__INCLUDED
#define PROTOBUF_vplex_5fshared_5fcredential_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace sharedCredential {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vplex_5fshared_5fcredential_2eproto();
void protobuf_AssignDesc_vplex_5fshared_5fcredential_2eproto();
void protobuf_ShutdownFile_vplex_5fshared_5fcredential_2eproto();

class UserCredential;
class DeviceCredential;

// ===================================================================

class UserCredential : public ::google::protobuf::Message {
 public:
  UserCredential();
  virtual ~UserCredential();
  
  UserCredential(const UserCredential& from);
  
  inline UserCredential& operator=(const UserCredential& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCredential& default_instance();
  
  void Swap(UserCredential* other);
  
  // implements Message ----------------------------------------------
  
  UserCredential* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserCredential& from);
  void MergeFrom(const UserCredential& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string user_name = 1;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // optional bytes ias_output = 2;
  inline bool has_ias_output() const;
  inline void clear_ias_output();
  static const int kIasOutputFieldNumber = 2;
  inline const ::std::string& ias_output() const;
  inline void set_ias_output(const ::std::string& value);
  inline void set_ias_output(const char* value);
  inline void set_ias_output(const void* value, size_t size);
  inline ::std::string* mutable_ias_output();
  inline ::std::string* release_ias_output();
  
  // @@protoc_insertion_point(class_scope:vplex.sharedCredential.UserCredential)
 private:
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_ias_output();
  inline void clear_has_ias_output();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_name_;
  ::std::string* ias_output_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fshared_5fcredential_2eproto();
  friend void protobuf_AssignDesc_vplex_5fshared_5fcredential_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fshared_5fcredential_2eproto();
  
  void InitAsDefaultInstance();
  static UserCredential* default_instance_;
};
// -------------------------------------------------------------------

class DeviceCredential : public ::google::protobuf::Message {
 public:
  DeviceCredential();
  virtual ~DeviceCredential();
  
  DeviceCredential(const DeviceCredential& from);
  
  inline DeviceCredential& operator=(const DeviceCredential& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceCredential& default_instance();
  
  void Swap(DeviceCredential* other);
  
  // implements Message ----------------------------------------------
  
  DeviceCredential* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceCredential& from);
  void MergeFrom(const DeviceCredential& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional bytes creds_clear = 2;
  inline bool has_creds_clear() const;
  inline void clear_creds_clear();
  static const int kCredsClearFieldNumber = 2;
  inline const ::std::string& creds_clear() const;
  inline void set_creds_clear(const ::std::string& value);
  inline void set_creds_clear(const char* value);
  inline void set_creds_clear(const void* value, size_t size);
  inline ::std::string* mutable_creds_clear();
  inline ::std::string* release_creds_clear();
  
  // optional bytes creds_secret = 3;
  inline bool has_creds_secret() const;
  inline void clear_creds_secret();
  static const int kCredsSecretFieldNumber = 3;
  inline const ::std::string& creds_secret() const;
  inline void set_creds_secret(const ::std::string& value);
  inline void set_creds_secret(const char* value);
  inline void set_creds_secret(const void* value, size_t size);
  inline ::std::string* mutable_creds_secret();
  inline ::std::string* release_creds_secret();
  
  // optional bytes renewal_token = 4;
  inline bool has_renewal_token() const;
  inline void clear_renewal_token();
  static const int kRenewalTokenFieldNumber = 4;
  inline const ::std::string& renewal_token() const;
  inline void set_renewal_token(const ::std::string& value);
  inline void set_renewal_token(const char* value);
  inline void set_renewal_token(const void* value, size_t size);
  inline ::std::string* mutable_renewal_token();
  inline ::std::string* release_renewal_token();
  
  // @@protoc_insertion_point(class_scope:vplex.sharedCredential.DeviceCredential)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_creds_clear();
  inline void clear_has_creds_clear();
  inline void set_has_creds_secret();
  inline void clear_has_creds_secret();
  inline void set_has_renewal_token();
  inline void clear_has_renewal_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::std::string* creds_clear_;
  ::std::string* creds_secret_;
  ::std::string* renewal_token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_vplex_5fshared_5fcredential_2eproto();
  friend void protobuf_AssignDesc_vplex_5fshared_5fcredential_2eproto();
  friend void protobuf_ShutdownFile_vplex_5fshared_5fcredential_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceCredential* default_instance_;
};
// ===================================================================


// ===================================================================

// UserCredential

// optional string user_name = 1;
inline bool UserCredential::has_user_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCredential::set_has_user_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserCredential::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserCredential::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& UserCredential::user_name() const {
  return *user_name_;
}
inline void UserCredential::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserCredential::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserCredential::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserCredential::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* UserCredential::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes ias_output = 2;
inline bool UserCredential::has_ias_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCredential::set_has_ias_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserCredential::clear_has_ias_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserCredential::clear_ias_output() {
  if (ias_output_ != &::google::protobuf::internal::kEmptyString) {
    ias_output_->clear();
  }
  clear_has_ias_output();
}
inline const ::std::string& UserCredential::ias_output() const {
  return *ias_output_;
}
inline void UserCredential::set_ias_output(const ::std::string& value) {
  set_has_ias_output();
  if (ias_output_ == &::google::protobuf::internal::kEmptyString) {
    ias_output_ = new ::std::string;
  }
  ias_output_->assign(value);
}
inline void UserCredential::set_ias_output(const char* value) {
  set_has_ias_output();
  if (ias_output_ == &::google::protobuf::internal::kEmptyString) {
    ias_output_ = new ::std::string;
  }
  ias_output_->assign(value);
}
inline void UserCredential::set_ias_output(const void* value, size_t size) {
  set_has_ias_output();
  if (ias_output_ == &::google::protobuf::internal::kEmptyString) {
    ias_output_ = new ::std::string;
  }
  ias_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserCredential::mutable_ias_output() {
  set_has_ias_output();
  if (ias_output_ == &::google::protobuf::internal::kEmptyString) {
    ias_output_ = new ::std::string;
  }
  return ias_output_;
}
inline ::std::string* UserCredential::release_ias_output() {
  clear_has_ias_output();
  if (ias_output_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ias_output_;
    ias_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DeviceCredential

// optional fixed64 device_id = 1;
inline bool DeviceCredential::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceCredential::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceCredential::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceCredential::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 DeviceCredential::device_id() const {
  return device_id_;
}
inline void DeviceCredential::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional bytes creds_clear = 2;
inline bool DeviceCredential::has_creds_clear() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceCredential::set_has_creds_clear() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceCredential::clear_has_creds_clear() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceCredential::clear_creds_clear() {
  if (creds_clear_ != &::google::protobuf::internal::kEmptyString) {
    creds_clear_->clear();
  }
  clear_has_creds_clear();
}
inline const ::std::string& DeviceCredential::creds_clear() const {
  return *creds_clear_;
}
inline void DeviceCredential::set_creds_clear(const ::std::string& value) {
  set_has_creds_clear();
  if (creds_clear_ == &::google::protobuf::internal::kEmptyString) {
    creds_clear_ = new ::std::string;
  }
  creds_clear_->assign(value);
}
inline void DeviceCredential::set_creds_clear(const char* value) {
  set_has_creds_clear();
  if (creds_clear_ == &::google::protobuf::internal::kEmptyString) {
    creds_clear_ = new ::std::string;
  }
  creds_clear_->assign(value);
}
inline void DeviceCredential::set_creds_clear(const void* value, size_t size) {
  set_has_creds_clear();
  if (creds_clear_ == &::google::protobuf::internal::kEmptyString) {
    creds_clear_ = new ::std::string;
  }
  creds_clear_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceCredential::mutable_creds_clear() {
  set_has_creds_clear();
  if (creds_clear_ == &::google::protobuf::internal::kEmptyString) {
    creds_clear_ = new ::std::string;
  }
  return creds_clear_;
}
inline ::std::string* DeviceCredential::release_creds_clear() {
  clear_has_creds_clear();
  if (creds_clear_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creds_clear_;
    creds_clear_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes creds_secret = 3;
inline bool DeviceCredential::has_creds_secret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceCredential::set_has_creds_secret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceCredential::clear_has_creds_secret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceCredential::clear_creds_secret() {
  if (creds_secret_ != &::google::protobuf::internal::kEmptyString) {
    creds_secret_->clear();
  }
  clear_has_creds_secret();
}
inline const ::std::string& DeviceCredential::creds_secret() const {
  return *creds_secret_;
}
inline void DeviceCredential::set_creds_secret(const ::std::string& value) {
  set_has_creds_secret();
  if (creds_secret_ == &::google::protobuf::internal::kEmptyString) {
    creds_secret_ = new ::std::string;
  }
  creds_secret_->assign(value);
}
inline void DeviceCredential::set_creds_secret(const char* value) {
  set_has_creds_secret();
  if (creds_secret_ == &::google::protobuf::internal::kEmptyString) {
    creds_secret_ = new ::std::string;
  }
  creds_secret_->assign(value);
}
inline void DeviceCredential::set_creds_secret(const void* value, size_t size) {
  set_has_creds_secret();
  if (creds_secret_ == &::google::protobuf::internal::kEmptyString) {
    creds_secret_ = new ::std::string;
  }
  creds_secret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceCredential::mutable_creds_secret() {
  set_has_creds_secret();
  if (creds_secret_ == &::google::protobuf::internal::kEmptyString) {
    creds_secret_ = new ::std::string;
  }
  return creds_secret_;
}
inline ::std::string* DeviceCredential::release_creds_secret() {
  clear_has_creds_secret();
  if (creds_secret_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creds_secret_;
    creds_secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes renewal_token = 4;
inline bool DeviceCredential::has_renewal_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceCredential::set_has_renewal_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceCredential::clear_has_renewal_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceCredential::clear_renewal_token() {
  if (renewal_token_ != &::google::protobuf::internal::kEmptyString) {
    renewal_token_->clear();
  }
  clear_has_renewal_token();
}
inline const ::std::string& DeviceCredential::renewal_token() const {
  return *renewal_token_;
}
inline void DeviceCredential::set_renewal_token(const ::std::string& value) {
  set_has_renewal_token();
  if (renewal_token_ == &::google::protobuf::internal::kEmptyString) {
    renewal_token_ = new ::std::string;
  }
  renewal_token_->assign(value);
}
inline void DeviceCredential::set_renewal_token(const char* value) {
  set_has_renewal_token();
  if (renewal_token_ == &::google::protobuf::internal::kEmptyString) {
    renewal_token_ = new ::std::string;
  }
  renewal_token_->assign(value);
}
inline void DeviceCredential::set_renewal_token(const void* value, size_t size) {
  set_has_renewal_token();
  if (renewal_token_ == &::google::protobuf::internal::kEmptyString) {
    renewal_token_ = new ::std::string;
  }
  renewal_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceCredential::mutable_renewal_token() {
  set_has_renewal_token();
  if (renewal_token_ == &::google::protobuf::internal::kEmptyString) {
    renewal_token_ = new ::std::string;
  }
  return renewal_token_;
}
inline ::std::string* DeviceCredential::release_renewal_token() {
  clear_has_renewal_token();
  if (renewal_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = renewal_token_;
    renewal_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sharedCredential
}  // namespace vplex

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vplex_5fshared_5fcredential_2eproto__INCLUDED
