// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vplex_sync_agent_notifier.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vplex {
namespace syncagent {
namespace notifier {

namespace {

const ::google::protobuf::Descriptor* DatasetUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetContentUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetContentUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscriptionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscriptionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceUnlinked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceUnlinked_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceLinked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceLinked_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PSNConnectionUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PSNConnectionUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStorageUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStorageUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncAgentNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncAgentNotification_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vplex_5fsync_5fagent_5fnotifier_2eproto() {
  protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vplex_sync_agent_notifier.proto");
  GOOGLE_CHECK(file != NULL);
  DatasetUpdate_descriptor_ = file->message_type(0);
  static const int DatasetUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdate, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdate, dataset_id_),
  };
  DatasetUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetUpdate_descriptor_,
      DatasetUpdate::default_instance_,
      DatasetUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetUpdate));
  DatasetContentUpdate_descriptor_ = file->message_type(1);
  static const int DatasetContentUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetContentUpdate, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetContentUpdate, dataset_id_),
  };
  DatasetContentUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetContentUpdate_descriptor_,
      DatasetContentUpdate::default_instance_,
      DatasetContentUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetContentUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetContentUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetContentUpdate));
  SubscriptionUpdate_descriptor_ = file->message_type(2);
  static const int SubscriptionUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdate, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdate, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdate, dataset_id_),
  };
  SubscriptionUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubscriptionUpdate_descriptor_,
      SubscriptionUpdate::default_instance_,
      SubscriptionUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscriptionUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubscriptionUpdate));
  DeviceUnlinked_descriptor_ = file->message_type(3);
  static const int DeviceUnlinked_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUnlinked, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUnlinked, device_id_),
  };
  DeviceUnlinked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceUnlinked_descriptor_,
      DeviceUnlinked::default_instance_,
      DeviceUnlinked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUnlinked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUnlinked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceUnlinked));
  DeviceLinked_descriptor_ = file->message_type(4);
  static const int DeviceLinked_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLinked, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLinked, device_id_),
  };
  DeviceLinked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceLinked_descriptor_,
      DeviceLinked::default_instance_,
      DeviceLinked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLinked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceLinked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceLinked));
  DeviceUpdate_descriptor_ = file->message_type(5);
  static const int DeviceUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, device_id_),
  };
  DeviceUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceUpdate_descriptor_,
      DeviceUpdate::default_instance_,
      DeviceUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceUpdate));
  PSNConnectionUpdate_descriptor_ = file->message_type(6);
  static const int PSNConnectionUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSNConnectionUpdate, recipient_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSNConnectionUpdate, cluster_id_),
  };
  PSNConnectionUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PSNConnectionUpdate_descriptor_,
      PSNConnectionUpdate::default_instance_,
      PSNConnectionUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSNConnectionUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSNConnectionUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PSNConnectionUpdate));
  UserStorageUpdate_descriptor_ = file->message_type(7);
  static const int UserStorageUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageUpdate, recipient_uid_),
  };
  UserStorageUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStorageUpdate_descriptor_,
      UserStorageUpdate::default_instance_,
      UserStorageUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStorageUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStorageUpdate));
  SyncAgentNotification_descriptor_ = file->message_type(8);
  static const int SyncAgentNotification_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, user_storage_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, dataset_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, dataset_content_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, subscription_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, device_unlinked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, psn_connection_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, device_linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, device_update_),
  };
  SyncAgentNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncAgentNotification_descriptor_,
      SyncAgentNotification::default_instance_,
      SyncAgentNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAgentNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncAgentNotification));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vplex_5fsync_5fagent_5fnotifier_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetUpdate_descriptor_, &DatasetUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetContentUpdate_descriptor_, &DatasetContentUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubscriptionUpdate_descriptor_, &SubscriptionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceUnlinked_descriptor_, &DeviceUnlinked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceLinked_descriptor_, &DeviceLinked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceUpdate_descriptor_, &DeviceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PSNConnectionUpdate_descriptor_, &PSNConnectionUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStorageUpdate_descriptor_, &UserStorageUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncAgentNotification_descriptor_, &SyncAgentNotification::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vplex_5fsync_5fagent_5fnotifier_2eproto() {
  delete DatasetUpdate::default_instance_;
  delete DatasetUpdate_reflection_;
  delete DatasetContentUpdate::default_instance_;
  delete DatasetContentUpdate_reflection_;
  delete SubscriptionUpdate::default_instance_;
  delete SubscriptionUpdate_reflection_;
  delete DeviceUnlinked::default_instance_;
  delete DeviceUnlinked_reflection_;
  delete DeviceLinked::default_instance_;
  delete DeviceLinked_reflection_;
  delete DeviceUpdate::default_instance_;
  delete DeviceUpdate_reflection_;
  delete PSNConnectionUpdate::default_instance_;
  delete PSNConnectionUpdate_reflection_;
  delete UserStorageUpdate::default_instance_;
  delete UserStorageUpdate_reflection_;
  delete SyncAgentNotification::default_instance_;
  delete SyncAgentNotification_reflection_;
}

void protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037vplex_sync_agent_notifier.proto\022\030vplex"
    ".syncagent.notifier\":\n\rDatasetUpdate\022\025\n\r"
    "recipient_uid\030\001 \002(\006\022\022\n\ndataset_id\030\002 \002(\006\""
    "A\n\024DatasetContentUpdate\022\025\n\rrecipient_uid"
    "\030\001 \002(\006\022\022\n\ndataset_id\030\002 \002(\006\"R\n\022Subscripti"
    "onUpdate\022\025\n\rrecipient_uid\030\001 \002(\006\022\021\n\tdevic"
    "e_id\030\002 \002(\006\022\022\n\ndataset_id\030\003 \002(\006\":\n\016Device"
    "Unlinked\022\025\n\rrecipient_uid\030\001 \002(\006\022\021\n\tdevic"
    "e_id\030\002 \002(\006\"8\n\014DeviceLinked\022\025\n\rrecipient_"
    "uid\030\001 \002(\006\022\021\n\tdevice_id\030\002 \002(\006\"8\n\014DeviceUp"
    "date\022\025\n\rrecipient_uid\030\001 \002(\006\022\021\n\tdevice_id"
    "\030\002 \002(\006\"@\n\023PSNConnectionUpdate\022\025\n\rrecipie"
    "nt_uid\030\001 \002(\006\022\022\n\ncluster_id\030\002 \002(\006\"*\n\021User"
    "StorageUpdate\022\025\n\rrecipient_uid\030\001 \002(\006\"\314\004\n"
    "\025SyncAgentNotification\022H\n\023user_storage_u"
    "pdate\030\001 \003(\0132+.vplex.syncagent.notifier.U"
    "serStorageUpdate\022\?\n\016dataset_update\030\002 \003(\013"
    "2\'.vplex.syncagent.notifier.DatasetUpdat"
    "e\022N\n\026dataset_content_update\030\003 \003(\0132..vple"
    "x.syncagent.notifier.DatasetContentUpdat"
    "e\022I\n\023subscription_update\030\004 \003(\0132,.vplex.s"
    "yncagent.notifier.SubscriptionUpdate\022A\n\017"
    "device_unlinked\030\005 \003(\0132(.vplex.syncagent."
    "notifier.DeviceUnlinked\022L\n\025psn_connectio"
    "n_update\030\006 \003(\0132-.vplex.syncagent.notifie"
    "r.PSNConnectionUpdate\022=\n\rdevice_linked\030\007"
    " \003(\0132&.vplex.syncagent.notifier.DeviceLi"
    "nked\022=\n\rdevice_update\030\010 \003(\0132&.vplex.sync"
    "agent.notifier.DeviceUpdateB$\n\017igware.vp"
    "lex.pbB\021SyncAgentNotifier", 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vplex_sync_agent_notifier.proto", &protobuf_RegisterTypes);
  DatasetUpdate::default_instance_ = new DatasetUpdate();
  DatasetContentUpdate::default_instance_ = new DatasetContentUpdate();
  SubscriptionUpdate::default_instance_ = new SubscriptionUpdate();
  DeviceUnlinked::default_instance_ = new DeviceUnlinked();
  DeviceLinked::default_instance_ = new DeviceLinked();
  DeviceUpdate::default_instance_ = new DeviceUpdate();
  PSNConnectionUpdate::default_instance_ = new PSNConnectionUpdate();
  UserStorageUpdate::default_instance_ = new UserStorageUpdate();
  SyncAgentNotification::default_instance_ = new SyncAgentNotification();
  DatasetUpdate::default_instance_->InitAsDefaultInstance();
  DatasetContentUpdate::default_instance_->InitAsDefaultInstance();
  SubscriptionUpdate::default_instance_->InitAsDefaultInstance();
  DeviceUnlinked::default_instance_->InitAsDefaultInstance();
  DeviceLinked::default_instance_->InitAsDefaultInstance();
  DeviceUpdate::default_instance_->InitAsDefaultInstance();
  PSNConnectionUpdate::default_instance_->InitAsDefaultInstance();
  UserStorageUpdate::default_instance_->InitAsDefaultInstance();
  SyncAgentNotification::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vplex_5fsync_5fagent_5fnotifier_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vplex_5fsync_5fagent_5fnotifier_2eproto {
  StaticDescriptorInitializer_vplex_5fsync_5fagent_5fnotifier_2eproto() {
    protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();
  }
} static_descriptor_initializer_vplex_5fsync_5fagent_5fnotifier_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DatasetUpdate::kRecipientUidFieldNumber;
const int DatasetUpdate::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

DatasetUpdate::DatasetUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetUpdate::InitAsDefaultInstance() {
}

DatasetUpdate::DatasetUpdate(const DatasetUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetUpdate::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetUpdate::~DatasetUpdate() {
  SharedDtor();
}

void DatasetUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatasetUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetUpdate_descriptor_;
}

const DatasetUpdate& DatasetUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

DatasetUpdate* DatasetUpdate::default_instance_ = NULL;

DatasetUpdate* DatasetUpdate::New() const {
  return new DatasetUpdate;
}

void DatasetUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetUpdate::MergeFrom(const DatasetUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetUpdate::CopyFrom(const DatasetUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DatasetUpdate::Swap(DatasetUpdate* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetUpdate_descriptor_;
  metadata.reflection = DatasetUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetContentUpdate::kRecipientUidFieldNumber;
const int DatasetContentUpdate::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

DatasetContentUpdate::DatasetContentUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetContentUpdate::InitAsDefaultInstance() {
}

DatasetContentUpdate::DatasetContentUpdate(const DatasetContentUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetContentUpdate::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetContentUpdate::~DatasetContentUpdate() {
  SharedDtor();
}

void DatasetContentUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatasetContentUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetContentUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetContentUpdate_descriptor_;
}

const DatasetContentUpdate& DatasetContentUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

DatasetContentUpdate* DatasetContentUpdate::default_instance_ = NULL;

DatasetContentUpdate* DatasetContentUpdate::New() const {
  return new DatasetContentUpdate;
}

void DatasetContentUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetContentUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetContentUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetContentUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetContentUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetContentUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetContentUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetContentUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetContentUpdate::MergeFrom(const DatasetContentUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetContentUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetContentUpdate::CopyFrom(const DatasetContentUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetContentUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DatasetContentUpdate::Swap(DatasetContentUpdate* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetContentUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetContentUpdate_descriptor_;
  metadata.reflection = DatasetContentUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubscriptionUpdate::kRecipientUidFieldNumber;
const int SubscriptionUpdate::kDeviceIdFieldNumber;
const int SubscriptionUpdate::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

SubscriptionUpdate::SubscriptionUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubscriptionUpdate::InitAsDefaultInstance() {
}

SubscriptionUpdate::SubscriptionUpdate(const SubscriptionUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubscriptionUpdate::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubscriptionUpdate::~SubscriptionUpdate() {
  SharedDtor();
}

void SubscriptionUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscriptionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscriptionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionUpdate_descriptor_;
}

const SubscriptionUpdate& SubscriptionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

SubscriptionUpdate* SubscriptionUpdate::default_instance_ = NULL;

SubscriptionUpdate* SubscriptionUpdate::New() const {
  return new SubscriptionUpdate;
}

void SubscriptionUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubscriptionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // required fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubscriptionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  // required fixed64 dataset_id = 3;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubscriptionUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  // required fixed64 dataset_id = 3;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubscriptionUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 3;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubscriptionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubscriptionUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubscriptionUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubscriptionUpdate::MergeFrom(const SubscriptionUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubscriptionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionUpdate::CopyFrom(const SubscriptionUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SubscriptionUpdate::Swap(SubscriptionUpdate* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(device_id_, other->device_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubscriptionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscriptionUpdate_descriptor_;
  metadata.reflection = SubscriptionUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceUnlinked::kRecipientUidFieldNumber;
const int DeviceUnlinked::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

DeviceUnlinked::DeviceUnlinked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceUnlinked::InitAsDefaultInstance() {
}

DeviceUnlinked::DeviceUnlinked(const DeviceUnlinked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceUnlinked::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceUnlinked::~DeviceUnlinked() {
  SharedDtor();
}

void DeviceUnlinked::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceUnlinked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceUnlinked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceUnlinked_descriptor_;
}

const DeviceUnlinked& DeviceUnlinked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

DeviceUnlinked* DeviceUnlinked::default_instance_ = NULL;

DeviceUnlinked* DeviceUnlinked::New() const {
  return new DeviceUnlinked;
}

void DeviceUnlinked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceUnlinked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // required fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceUnlinked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceUnlinked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceUnlinked::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUnlinked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceUnlinked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceUnlinked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceUnlinked::MergeFrom(const DeviceUnlinked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceUnlinked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceUnlinked::CopyFrom(const DeviceUnlinked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUnlinked::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DeviceUnlinked::Swap(DeviceUnlinked* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceUnlinked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceUnlinked_descriptor_;
  metadata.reflection = DeviceUnlinked_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceLinked::kRecipientUidFieldNumber;
const int DeviceLinked::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

DeviceLinked::DeviceLinked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceLinked::InitAsDefaultInstance() {
}

DeviceLinked::DeviceLinked(const DeviceLinked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceLinked::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceLinked::~DeviceLinked() {
  SharedDtor();
}

void DeviceLinked::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceLinked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceLinked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceLinked_descriptor_;
}

const DeviceLinked& DeviceLinked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

DeviceLinked* DeviceLinked::default_instance_ = NULL;

DeviceLinked* DeviceLinked::New() const {
  return new DeviceLinked;
}

void DeviceLinked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceLinked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // required fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceLinked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceLinked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceLinked::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceLinked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceLinked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceLinked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceLinked::MergeFrom(const DeviceLinked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceLinked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceLinked::CopyFrom(const DeviceLinked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLinked::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DeviceLinked::Swap(DeviceLinked* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceLinked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceLinked_descriptor_;
  metadata.reflection = DeviceLinked_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceUpdate::kRecipientUidFieldNumber;
const int DeviceUpdate::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

DeviceUpdate::DeviceUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceUpdate::InitAsDefaultInstance() {
}

DeviceUpdate::DeviceUpdate(const DeviceUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceUpdate::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceUpdate::~DeviceUpdate() {
  SharedDtor();
}

void DeviceUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceUpdate_descriptor_;
}

const DeviceUpdate& DeviceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

DeviceUpdate* DeviceUpdate::default_instance_ = NULL;

DeviceUpdate* DeviceUpdate::New() const {
  return new DeviceUpdate;
}

void DeviceUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // required fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceUpdate::MergeFrom(const DeviceUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceUpdate::CopyFrom(const DeviceUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DeviceUpdate::Swap(DeviceUpdate* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceUpdate_descriptor_;
  metadata.reflection = DeviceUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PSNConnectionUpdate::kRecipientUidFieldNumber;
const int PSNConnectionUpdate::kClusterIdFieldNumber;
#endif  // !_MSC_VER

PSNConnectionUpdate::PSNConnectionUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PSNConnectionUpdate::InitAsDefaultInstance() {
}

PSNConnectionUpdate::PSNConnectionUpdate(const PSNConnectionUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PSNConnectionUpdate::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  cluster_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PSNConnectionUpdate::~PSNConnectionUpdate() {
  SharedDtor();
}

void PSNConnectionUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PSNConnectionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSNConnectionUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PSNConnectionUpdate_descriptor_;
}

const PSNConnectionUpdate& PSNConnectionUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

PSNConnectionUpdate* PSNConnectionUpdate::default_instance_ = NULL;

PSNConnectionUpdate* PSNConnectionUpdate::New() const {
  return new PSNConnectionUpdate;
}

void PSNConnectionUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
    cluster_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PSNConnectionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cluster_id;
        break;
      }
      
      // required fixed64 cluster_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cluster_id_)));
          set_has_cluster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PSNConnectionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  // required fixed64 cluster_id = 2;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->cluster_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PSNConnectionUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  // required fixed64 cluster_id = 2;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->cluster_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PSNConnectionUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 cluster_id = 2;
    if (has_cluster_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSNConnectionUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PSNConnectionUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PSNConnectionUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PSNConnectionUpdate::MergeFrom(const PSNConnectionUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PSNConnectionUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSNConnectionUpdate::CopyFrom(const PSNConnectionUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSNConnectionUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PSNConnectionUpdate::Swap(PSNConnectionUpdate* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PSNConnectionUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PSNConnectionUpdate_descriptor_;
  metadata.reflection = PSNConnectionUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStorageUpdate::kRecipientUidFieldNumber;
#endif  // !_MSC_VER

UserStorageUpdate::UserStorageUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStorageUpdate::InitAsDefaultInstance() {
}

UserStorageUpdate::UserStorageUpdate(const UserStorageUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStorageUpdate::SharedCtor() {
  _cached_size_ = 0;
  recipient_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStorageUpdate::~UserStorageUpdate() {
  SharedDtor();
}

void UserStorageUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStorageUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStorageUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStorageUpdate_descriptor_;
}

const UserStorageUpdate& UserStorageUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

UserStorageUpdate* UserStorageUpdate::default_instance_ = NULL;

UserStorageUpdate* UserStorageUpdate::New() const {
  return new UserStorageUpdate;
}

void UserStorageUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recipient_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStorageUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 recipient_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &recipient_uid_)));
          set_has_recipient_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStorageUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->recipient_uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStorageUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 recipient_uid = 1;
  if (has_recipient_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->recipient_uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStorageUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 recipient_uid = 1;
    if (has_recipient_uid()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStorageUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStorageUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStorageUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStorageUpdate::MergeFrom(const UserStorageUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipient_uid()) {
      set_recipient_uid(from.recipient_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStorageUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStorageUpdate::CopyFrom(const UserStorageUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStorageUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserStorageUpdate::Swap(UserStorageUpdate* other) {
  if (other != this) {
    std::swap(recipient_uid_, other->recipient_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStorageUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStorageUpdate_descriptor_;
  metadata.reflection = UserStorageUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncAgentNotification::kUserStorageUpdateFieldNumber;
const int SyncAgentNotification::kDatasetUpdateFieldNumber;
const int SyncAgentNotification::kDatasetContentUpdateFieldNumber;
const int SyncAgentNotification::kSubscriptionUpdateFieldNumber;
const int SyncAgentNotification::kDeviceUnlinkedFieldNumber;
const int SyncAgentNotification::kPsnConnectionUpdateFieldNumber;
const int SyncAgentNotification::kDeviceLinkedFieldNumber;
const int SyncAgentNotification::kDeviceUpdateFieldNumber;
#endif  // !_MSC_VER

SyncAgentNotification::SyncAgentNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncAgentNotification::InitAsDefaultInstance() {
}

SyncAgentNotification::SyncAgentNotification(const SyncAgentNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncAgentNotification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncAgentNotification::~SyncAgentNotification() {
  SharedDtor();
}

void SyncAgentNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncAgentNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncAgentNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncAgentNotification_descriptor_;
}

const SyncAgentNotification& SyncAgentNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vplex_5fsync_5fagent_5fnotifier_2eproto();  return *default_instance_;
}

SyncAgentNotification* SyncAgentNotification::default_instance_ = NULL;

SyncAgentNotification* SyncAgentNotification::New() const {
  return new SyncAgentNotification;
}

void SyncAgentNotification::Clear() {
  user_storage_update_.Clear();
  dataset_update_.Clear();
  dataset_content_update_.Clear();
  subscription_update_.Clear();
  device_unlinked_.Clear();
  psn_connection_update_.Clear();
  device_linked_.Clear();
  device_update_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncAgentNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vplex.syncagent.notifier.UserStorageUpdate user_storage_update = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_storage_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_storage_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_storage_update;
        if (input->ExpectTag(18)) goto parse_dataset_update;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.DatasetUpdate dataset_update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataset_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataset_update;
        if (input->ExpectTag(26)) goto parse_dataset_content_update;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.DatasetContentUpdate dataset_content_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_content_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataset_content_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dataset_content_update;
        if (input->ExpectTag(34)) goto parse_subscription_update;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.SubscriptionUpdate subscription_update = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscription_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscription_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subscription_update;
        if (input->ExpectTag(42)) goto parse_device_unlinked;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.DeviceUnlinked device_unlinked = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_unlinked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_unlinked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_unlinked;
        if (input->ExpectTag(50)) goto parse_psn_connection_update;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.PSNConnectionUpdate psn_connection_update = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psn_connection_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_psn_connection_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_psn_connection_update;
        if (input->ExpectTag(58)) goto parse_device_linked;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.DeviceLinked device_linked = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_linked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_linked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_device_linked;
        if (input->ExpectTag(66)) goto parse_device_update;
        break;
      }
      
      // repeated .vplex.syncagent.notifier.DeviceUpdate device_update = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_update;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncAgentNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vplex.syncagent.notifier.UserStorageUpdate user_storage_update = 1;
  for (int i = 0; i < this->user_storage_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_storage_update(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.DatasetUpdate dataset_update = 2;
  for (int i = 0; i < this->dataset_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dataset_update(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.DatasetContentUpdate dataset_content_update = 3;
  for (int i = 0; i < this->dataset_content_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dataset_content_update(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.SubscriptionUpdate subscription_update = 4;
  for (int i = 0; i < this->subscription_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subscription_update(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.DeviceUnlinked device_unlinked = 5;
  for (int i = 0; i < this->device_unlinked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device_unlinked(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.PSNConnectionUpdate psn_connection_update = 6;
  for (int i = 0; i < this->psn_connection_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->psn_connection_update(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.DeviceLinked device_linked = 7;
  for (int i = 0; i < this->device_linked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->device_linked(i), output);
  }
  
  // repeated .vplex.syncagent.notifier.DeviceUpdate device_update = 8;
  for (int i = 0; i < this->device_update_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->device_update(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncAgentNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .vplex.syncagent.notifier.UserStorageUpdate user_storage_update = 1;
  for (int i = 0; i < this->user_storage_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_storage_update(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.DatasetUpdate dataset_update = 2;
  for (int i = 0; i < this->dataset_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dataset_update(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.DatasetContentUpdate dataset_content_update = 3;
  for (int i = 0; i < this->dataset_content_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dataset_content_update(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.SubscriptionUpdate subscription_update = 4;
  for (int i = 0; i < this->subscription_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subscription_update(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.DeviceUnlinked device_unlinked = 5;
  for (int i = 0; i < this->device_unlinked_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device_unlinked(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.PSNConnectionUpdate psn_connection_update = 6;
  for (int i = 0; i < this->psn_connection_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->psn_connection_update(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.DeviceLinked device_linked = 7;
  for (int i = 0; i < this->device_linked_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->device_linked(i), target);
  }
  
  // repeated .vplex.syncagent.notifier.DeviceUpdate device_update = 8;
  for (int i = 0; i < this->device_update_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->device_update(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncAgentNotification::ByteSize() const {
  int total_size = 0;
  
  // repeated .vplex.syncagent.notifier.UserStorageUpdate user_storage_update = 1;
  total_size += 1 * this->user_storage_update_size();
  for (int i = 0; i < this->user_storage_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_storage_update(i));
  }
  
  // repeated .vplex.syncagent.notifier.DatasetUpdate dataset_update = 2;
  total_size += 1 * this->dataset_update_size();
  for (int i = 0; i < this->dataset_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataset_update(i));
  }
  
  // repeated .vplex.syncagent.notifier.DatasetContentUpdate dataset_content_update = 3;
  total_size += 1 * this->dataset_content_update_size();
  for (int i = 0; i < this->dataset_content_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataset_content_update(i));
  }
  
  // repeated .vplex.syncagent.notifier.SubscriptionUpdate subscription_update = 4;
  total_size += 1 * this->subscription_update_size();
  for (int i = 0; i < this->subscription_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscription_update(i));
  }
  
  // repeated .vplex.syncagent.notifier.DeviceUnlinked device_unlinked = 5;
  total_size += 1 * this->device_unlinked_size();
  for (int i = 0; i < this->device_unlinked_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_unlinked(i));
  }
  
  // repeated .vplex.syncagent.notifier.PSNConnectionUpdate psn_connection_update = 6;
  total_size += 1 * this->psn_connection_update_size();
  for (int i = 0; i < this->psn_connection_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->psn_connection_update(i));
  }
  
  // repeated .vplex.syncagent.notifier.DeviceLinked device_linked = 7;
  total_size += 1 * this->device_linked_size();
  for (int i = 0; i < this->device_linked_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_linked(i));
  }
  
  // repeated .vplex.syncagent.notifier.DeviceUpdate device_update = 8;
  total_size += 1 * this->device_update_size();
  for (int i = 0; i < this->device_update_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_update(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncAgentNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncAgentNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncAgentNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncAgentNotification::MergeFrom(const SyncAgentNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_storage_update_.MergeFrom(from.user_storage_update_);
  dataset_update_.MergeFrom(from.dataset_update_);
  dataset_content_update_.MergeFrom(from.dataset_content_update_);
  subscription_update_.MergeFrom(from.subscription_update_);
  device_unlinked_.MergeFrom(from.device_unlinked_);
  psn_connection_update_.MergeFrom(from.psn_connection_update_);
  device_linked_.MergeFrom(from.device_linked_);
  device_update_.MergeFrom(from.device_update_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncAgentNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAgentNotification::CopyFrom(const SyncAgentNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAgentNotification::IsInitialized() const {
  
  for (int i = 0; i < user_storage_update_size(); i++) {
    if (!this->user_storage_update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dataset_update_size(); i++) {
    if (!this->dataset_update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dataset_content_update_size(); i++) {
    if (!this->dataset_content_update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subscription_update_size(); i++) {
    if (!this->subscription_update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < device_unlinked_size(); i++) {
    if (!this->device_unlinked(i).IsInitialized()) return false;
  }
  for (int i = 0; i < psn_connection_update_size(); i++) {
    if (!this->psn_connection_update(i).IsInitialized()) return false;
  }
  for (int i = 0; i < device_linked_size(); i++) {
    if (!this->device_linked(i).IsInitialized()) return false;
  }
  for (int i = 0; i < device_update_size(); i++) {
    if (!this->device_update(i).IsInitialized()) return false;
  }
  return true;
}

void SyncAgentNotification::Swap(SyncAgentNotification* other) {
  if (other != this) {
    user_storage_update_.Swap(&other->user_storage_update_);
    dataset_update_.Swap(&other->dataset_update_);
    dataset_content_update_.Swap(&other->dataset_content_update_);
    subscription_update_.Swap(&other->subscription_update_);
    device_unlinked_.Swap(&other->device_unlinked_);
    psn_connection_update_.Swap(&other->psn_connection_update_);
    device_linked_.Swap(&other->device_linked_);
    device_update_.Swap(&other->device_update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncAgentNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncAgentNotification_descriptor_;
  metadata.reflection = SyncAgentNotification_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace notifier
}  // namespace syncagent
}  // namespace vplex

// @@protoc_insertion_point(global_scope)
