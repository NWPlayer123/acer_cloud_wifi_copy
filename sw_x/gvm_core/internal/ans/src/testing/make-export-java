#! /bin/csh -fb
#
#  Installation
#
#  This script creates a tar file (~/java.tar) that contains most things
#  needed to run a test ANS cluster.
#
#  To get start, you must have set the $WORKAREA and $BUILDROOT variables,
#  and built the ans package and the test program:
#
#     cd $WORKAREA/sw_i/infra/modules/ans;          make install
#     mkdir ~/java
#     cd $WORKAREA/sw_x/gvm_core/internal/ans/src;  make install 
#
#  The entire sw_i and sw_x builds must have been done at least once for
#  most these steps to work.
#
#  In addition to the java.tar that this script will construct, the
#  cluster machine must have:
#
#     /sbin/printconf
#     /sbin/setconf
#     a java virtual machine
#
#  You probably will need to make the directory used to store the setconf
#  data on each cluster member:
#
#     mkdir -p /broadon_sys/config
#
#  Then, you must install scripts and tools into ~/java:
#
#     cd ~; tar xf $WORKAREA/sw_x/gvm_core/internal/ans/src/testing/java.tar
#
#  After creating ~/java, you must change the various machine names coded
#  into the ~/java scripts.  The machine names in the script are:
#
#     bertoni-vm
#     bertoni-ol6a
#     bertoni-ol6b
#     bertoni-ol6c
#
#  You'll also have to set some printconf values on each member of the
#  test cluster:
#
#      ans.cluster  the local machine name, i.e., bertoni-vm, is best
#      ans.name     the local machine name
#      ans.members  the machine names of the cluster members, i.e.:
#                       bertoni-vm bertoni-ol6a bertoni-ol6b bertoni-ol6
#
#  So,
#      /sbin/setconf ans.cluster  bertoni-vm
#      /sbin/setconf ans.name     bertoni-vm
#      /sbin/setconf ans.members  bertoni-vm bertoni-ol6a bertoni-ol6b bertoni-ol6c
#
#  would work on bertoni-vm.
#
#
#  Test Programs:
#
#      The basic test scripts are run-device and run-lots.  run-device
#  runs one iteration of the ans_circle test program.  run-lots invokes
#  run-device repeatedly until a failure occurs.  The various run-device-*
#  and run-lots-* scripts configure the ans_circle program to use various
#  machines in the cluster for different functions, thus testing more
#  code paths.
#

set target  = ~/export
set infra   = $BUILDROOT/infra

rm -rf $target            || exit 1

if (! -d $target) then
    mkdir $target
endif

cd $target                || exit 1

cp -f /dev/null sacrifice
rm -rf *                  || exit 1
cp -r ~/java/.     .      || exit 1

rm -rf com conf javax META-INF org WEB-INFO jars RCS
rm -f  libsetSockOpt.so simplelog.properties

mkdir jars                || exit 1

cp $infra/packages/ans/package/ans.jar             jars/. || exit 1
cp $infra/modules/wsclient/wsclient.jar            jars/. || exit 1
cp $infra/modules/wstypes/wstypes.jar              jars/. || exit 1
cp $infra/packages/javalib/package/jar/common.jar  jars/. || exit 1
cp $infra/imports/lib/commons-logging-1.1.1.jar    jars/. || exit 1
cp $infra/imports/lib/jaxrpc.jar                   jars/. || exit 1
cp $infra/imports/lib/servlet.jar                  jars/. || exit 1
cp $infra/imports/lib/axis.jar                     jars/. || exit 1
cp $infra/imports/lib/commons-discovery-0.2.jar    jars/. || exit 1
cp $infra/imports/lib/wsdl4j-1.5.1.jar             jars/. || exit 1
cp $infra/imports/lib/mail.jar                     jars/. || exit 1
cp $infra/imports/lib/activation.jar               jars/. || exit 1

cp -r $WORKAREA/sw_i/infra/modules/ans/conf .             || exit 1
cp $infra/packages/ans/package/64/libsetSockOpt.so .      || exit 1

cp -f /dev/null .x123.swp
rm -f .*.swp

cp -f /dev/null .nfs
rm -f .nfs*

cp -f /dev/null core.
rm -f core.*

cp -f /dev/null vgcore.
rm -f vgcore.*

tar cf ~/java.tar .      || exit 1

#echo "Time for scp:"

#scp ../java.tar root@bertoni-vm:
#scp ../java.tar root@bertoni-OL6A:
#scp ../java.tar root@bertoni-OL6B:
#scp ../java.tar root@bertoni-OL6C:

echo "Done."
