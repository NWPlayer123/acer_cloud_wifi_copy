// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RpcRequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcRequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcStatus_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rpc_2eproto() {
  protobuf_AddDesc_rpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rpc.proto");
  GOOGLE_CHECK(file != NULL);
  RpcRequestHeader_descriptor_ = file->message_type(0);
  static const int RpcRequestHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestHeader, methodname_),
  };
  RpcRequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcRequestHeader_descriptor_,
      RpcRequestHeader::default_instance_,
      RpcRequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcRequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcRequestHeader));
  RpcStatus_descriptor_ = file->message_type(1);
  static const int RpcStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatus, appstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatus, errordetail_),
  };
  RpcStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcStatus_descriptor_,
      RpcStatus::default_instance_,
      RpcStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcStatus));
  RpcStatus_Status_descriptor_ = RpcStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcRequestHeader_descriptor_, &RpcRequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcStatus_descriptor_, &RpcStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rpc_2eproto() {
  delete RpcRequestHeader::default_instance_;
  delete RpcRequestHeader_reflection_;
  delete RpcStatus::default_instance_;
  delete RpcStatus_reflection_;
}

void protobuf_AddDesc_rpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\trpc.proto\"&\n\020RpcRequestHeader\022\022\n\nmetho"
    "dName\030\001 \002(\t\"\205\002\n\tRpcStatus\022!\n\006status\030\001 \002("
    "\0162\021.RpcStatus.Status\022\021\n\tappStatus\030\003 \001(\005\022"
    "\023\n\013errorDetail\030\002 \001(\t\"\254\001\n\006Status\022\006\n\002OK\020\000\022"
    "\014\n\010IO_ERROR\020\001\022\017\n\013BAD_REQUEST\020\002\022\026\n\022BAD_RE"
    "QUEST_SERVER\020\n\022\020\n\014BAD_RESPONSE\020\003\022\027\n\023BAD_"
    "RESPONSE_SERVER\020\004\022\022\n\016INTERNAL_ERROR\020\005\022\020\n"
    "\014HEADER_ERROR\020\006\022\022\n\016UNKNOWN_METHOD\020\007B\031\n\022i"
    "gware.protobuf.pbB\003Rpc", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  RpcRequestHeader::default_instance_ = new RpcRequestHeader();
  RpcStatus::default_instance_ = new RpcStatus();
  RpcRequestHeader::default_instance_->InitAsDefaultInstance();
  RpcStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rpc_2eproto {
  StaticDescriptorInitializer_rpc_2eproto() {
    protobuf_AddDesc_rpc_2eproto();
  }
} static_descriptor_initializer_rpc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RpcRequestHeader::kMethodNameFieldNumber;
#endif  // !_MSC_VER

RpcRequestHeader::RpcRequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcRequestHeader::InitAsDefaultInstance() {
}

RpcRequestHeader::RpcRequestHeader(const RpcRequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcRequestHeader::SharedCtor() {
  _cached_size_ = 0;
  methodname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcRequestHeader::~RpcRequestHeader() {
  SharedDtor();
}

void RpcRequestHeader::SharedDtor() {
  if (methodname_ != &::google::protobuf::internal::kEmptyString) {
    delete methodname_;
  }
  if (this != default_instance_) {
  }
}

void RpcRequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcRequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcRequestHeader_descriptor_;
}

const RpcRequestHeader& RpcRequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

RpcRequestHeader* RpcRequestHeader::default_instance_ = NULL;

RpcRequestHeader* RpcRequestHeader::New() const {
  return new RpcRequestHeader;
}

void RpcRequestHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_methodname()) {
      if (methodname_ != &::google::protobuf::internal::kEmptyString) {
        methodname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcRequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string methodName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_methodname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->methodname().data(), this->methodname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcRequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string methodName = 1;
  if (has_methodname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->methodname().data(), this->methodname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->methodname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcRequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string methodName = 1;
  if (has_methodname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->methodname().data(), this->methodname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->methodname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcRequestHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string methodName = 1;
    if (has_methodname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->methodname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcRequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcRequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcRequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcRequestHeader::MergeFrom(const RpcRequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_methodname()) {
      set_methodname(from.methodname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcRequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcRequestHeader::CopyFrom(const RpcRequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcRequestHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpcRequestHeader::Swap(RpcRequestHeader* other) {
  if (other != this) {
    std::swap(methodname_, other->methodname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcRequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcRequestHeader_descriptor_;
  metadata.reflection = RpcRequestHeader_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RpcStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatus_Status_descriptor_;
}
bool RpcStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpcStatus_Status RpcStatus::OK;
const RpcStatus_Status RpcStatus::IO_ERROR;
const RpcStatus_Status RpcStatus::BAD_REQUEST;
const RpcStatus_Status RpcStatus::BAD_REQUEST_SERVER;
const RpcStatus_Status RpcStatus::BAD_RESPONSE;
const RpcStatus_Status RpcStatus::BAD_RESPONSE_SERVER;
const RpcStatus_Status RpcStatus::INTERNAL_ERROR;
const RpcStatus_Status RpcStatus::HEADER_ERROR;
const RpcStatus_Status RpcStatus::UNKNOWN_METHOD;
const RpcStatus_Status RpcStatus::Status_MIN;
const RpcStatus_Status RpcStatus::Status_MAX;
const int RpcStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpcStatus::kStatusFieldNumber;
const int RpcStatus::kAppStatusFieldNumber;
const int RpcStatus::kErrorDetailFieldNumber;
#endif  // !_MSC_VER

RpcStatus::RpcStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpcStatus::InitAsDefaultInstance() {
}

RpcStatus::RpcStatus(const RpcStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpcStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  appstatus_ = 0;
  errordetail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcStatus::~RpcStatus() {
  SharedDtor();
}

void RpcStatus::SharedDtor() {
  if (errordetail_ != &::google::protobuf::internal::kEmptyString) {
    delete errordetail_;
  }
  if (this != default_instance_) {
  }
}

void RpcStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatus_descriptor_;
}

const RpcStatus& RpcStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rpc_2eproto();  return *default_instance_;
}

RpcStatus* RpcStatus::default_instance_ = NULL;

RpcStatus* RpcStatus::New() const {
  return new RpcStatus;
}

void RpcStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    appstatus_ = 0;
    if (has_errordetail()) {
      if (errordetail_ != &::google::protobuf::internal::kEmptyString) {
        errordetail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpcStatus.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::RpcStatus_Status_IsValid(value)) {
            set_status(static_cast< ::RpcStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorDetail;
        break;
      }
      
      // optional string errorDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordetail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errordetail().data(), this->errordetail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appStatus;
        break;
      }
      
      // optional int32 appStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appstatus_)));
          set_has_appstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RpcStatus.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional string errorDetail = 2;
  if (has_errordetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errordetail().data(), this->errordetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errordetail(), output);
  }
  
  // optional int32 appStatus = 3;
  if (has_appstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appstatus(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpcStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RpcStatus.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional string errorDetail = 2;
  if (has_errordetail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errordetail().data(), this->errordetail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errordetail(), target);
  }
  
  // optional int32 appStatus = 3;
  if (has_appstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appstatus(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpcStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpcStatus.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional int32 appStatus = 3;
    if (has_appstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appstatus());
    }
    
    // optional string errorDetail = 2;
    if (has_errordetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errordetail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcStatus::MergeFrom(const RpcStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_appstatus()) {
      set_appstatus(from.appstatus());
    }
    if (from.has_errordetail()) {
      set_errordetail(from.errordetail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcStatus::CopyFrom(const RpcStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpcStatus::Swap(RpcStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(appstatus_, other->appstatus_);
    std::swap(errordetail_, other->errordetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcStatus_descriptor_;
  metadata.reflection = RpcStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
