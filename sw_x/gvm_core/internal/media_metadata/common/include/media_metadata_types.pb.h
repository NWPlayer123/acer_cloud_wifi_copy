// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_metadata_types.proto

#ifndef PROTOBUF_media_5fmetadata_5ftypes_2eproto__INCLUDED
#define PROTOBUF_media_5fmetadata_5ftypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace media_metadata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();

class NoParamInput;
class NoParamOutput;
class MediaServerInfo;
class MusicTrackFields;
class MusicAlbumFields;
class MusicArtistFields;
class MusicGenreFields;
class VideoItemFields;
class VideoAlbumFields;
class ImageItemFields;
class ImageAlbumFields;
class PlaylistFields;
class ContentDirectoryObject;
class MCAMetadataQueryObject;
class GetMetadataSyncStateInput;
class GetMetadataSyncStateOutput;
class ListCollectionsOutput;
class GetObjectMetadataInput;
class GetObjectMetadataOutput;

enum MediaSource_t {
  MEDIA_SOURCE_LIBRARY = 1,
  MEDIA_SOURCE_ITUNES = 2,
  MEDIA_SOURCE_WMP = 3
};
bool MediaSource_t_IsValid(int value);
const MediaSource_t MediaSource_t_MIN = MEDIA_SOURCE_LIBRARY;
const MediaSource_t MediaSource_t_MAX = MEDIA_SOURCE_WMP;
const int MediaSource_t_ARRAYSIZE = MediaSource_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaSource_t_descriptor();
inline const ::std::string& MediaSource_t_Name(MediaSource_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaSource_t_descriptor(), value);
}
inline bool MediaSource_t_Parse(
    const ::std::string& name, MediaSource_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaSource_t>(
    MediaSource_t_descriptor(), name, value);
}
enum MetadataSyncStateType_t {
  MSA_SYNC_STATE_IN_SYNC = 1,
  MSA_SYNC_STATE_SYNCING = 2,
  MSA_SYNC_STATE_OUT_OF_SYNC = 3,
  MSA_SYNC_STATE_NO_DATA = 4
};
bool MetadataSyncStateType_t_IsValid(int value);
const MetadataSyncStateType_t MetadataSyncStateType_t_MIN = MSA_SYNC_STATE_IN_SYNC;
const MetadataSyncStateType_t MetadataSyncStateType_t_MAX = MSA_SYNC_STATE_NO_DATA;
const int MetadataSyncStateType_t_ARRAYSIZE = MetadataSyncStateType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* MetadataSyncStateType_t_descriptor();
inline const ::std::string& MetadataSyncStateType_t_Name(MetadataSyncStateType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    MetadataSyncStateType_t_descriptor(), value);
}
inline bool MetadataSyncStateType_t_Parse(
    const ::std::string& name, MetadataSyncStateType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MetadataSyncStateType_t>(
    MetadataSyncStateType_t_descriptor(), name, value);
}
enum CatalogType_t {
  MM_CATALOG_MUSIC = 1,
  MM_CATALOG_PHOTO = 2,
  MM_CATALOG_VIDEO = 3
};
bool CatalogType_t_IsValid(int value);
const CatalogType_t CatalogType_t_MIN = MM_CATALOG_MUSIC;
const CatalogType_t CatalogType_t_MAX = MM_CATALOG_VIDEO;
const int CatalogType_t_ARRAYSIZE = CatalogType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CatalogType_t_descriptor();
inline const ::std::string& CatalogType_t_Name(CatalogType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CatalogType_t_descriptor(), value);
}
inline bool CatalogType_t_Parse(
    const ::std::string& name, CatalogType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CatalogType_t>(
    CatalogType_t_descriptor(), name, value);
}
enum DBFilterType_t {
  MCA_MDQUERY_MUSICTRACK = 1,
  MCA_MDQUERY_MUSICALBUM = 2,
  MCA_MDQUERY_MUSICARTIST = 3,
  MCA_MDQUERY_MUSICGENRE = 4,
  MCA_MDQUERY_PHOTOITEM = 5,
  MCA_MDQUERY_PHOTOALBUM = 6,
  MCA_MDQUERY_VIDEOITEM = 7,
  MCA_MDQUERY_VIDEOALBUM = 8
};
bool DBFilterType_t_IsValid(int value);
const DBFilterType_t DBFilterType_t_MIN = MCA_MDQUERY_MUSICTRACK;
const DBFilterType_t DBFilterType_t_MAX = MCA_MDQUERY_VIDEOALBUM;
const int DBFilterType_t_ARRAYSIZE = DBFilterType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DBFilterType_t_descriptor();
inline const ::std::string& DBFilterType_t_Name(DBFilterType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DBFilterType_t_descriptor(), value);
}
inline bool DBFilterType_t_Parse(
    const ::std::string& name, DBFilterType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DBFilterType_t>(
    DBFilterType_t_descriptor(), name, value);
}
enum MediaType_t {
  MEDIA_MUSIC_TRACK = 1,
  MEDIA_MUSIC_ALBUM = 2,
  MEDIA_VIDEO = 3,
  MEDIA_PHOTO = 4,
  MEDIA_PHOTO_ALBUM = 5,
  MEDIA_NONE = 6
};
bool MediaType_t_IsValid(int value);
const MediaType_t MediaType_t_MIN = MEDIA_MUSIC_TRACK;
const MediaType_t MediaType_t_MAX = MEDIA_NONE;
const int MediaType_t_ARRAYSIZE = MediaType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaType_t_descriptor();
inline const ::std::string& MediaType_t_Name(MediaType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaType_t_descriptor(), value);
}
inline bool MediaType_t_Parse(
    const ::std::string& name, MediaType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaType_t>(
    MediaType_t_descriptor(), name, value);
}
// ===================================================================

class NoParamInput : public ::google::protobuf::Message {
 public:
  NoParamInput();
  virtual ~NoParamInput();
  
  NoParamInput(const NoParamInput& from);
  
  inline NoParamInput& operator=(const NoParamInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoParamInput& default_instance();
  
  void Swap(NoParamInput* other);
  
  // implements Message ----------------------------------------------
  
  NoParamInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoParamInput& from);
  void MergeFrom(const NoParamInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:media_metadata.NoParamInput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static NoParamInput* default_instance_;
};
// -------------------------------------------------------------------

class NoParamOutput : public ::google::protobuf::Message {
 public:
  NoParamOutput();
  virtual ~NoParamOutput();
  
  NoParamOutput(const NoParamOutput& from);
  
  inline NoParamOutput& operator=(const NoParamOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoParamOutput& default_instance();
  
  void Swap(NoParamOutput* other);
  
  // implements Message ----------------------------------------------
  
  NoParamOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoParamOutput& from);
  void MergeFrom(const NoParamOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:media_metadata.NoParamOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static NoParamOutput* default_instance_;
};
// -------------------------------------------------------------------

class MediaServerInfo : public ::google::protobuf::Message {
 public:
  MediaServerInfo();
  virtual ~MediaServerInfo();
  
  MediaServerInfo(const MediaServerInfo& from);
  
  inline MediaServerInfo& operator=(const MediaServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaServerInfo& default_instance();
  
  void Swap(MediaServerInfo* other);
  
  // implements Message ----------------------------------------------
  
  MediaServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaServerInfo& from);
  void MergeFrom(const MediaServerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 cloud_device_id = 1;
  inline bool has_cloud_device_id() const;
  inline void clear_cloud_device_id();
  static const int kCloudDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 cloud_device_id() const;
  inline void set_cloud_device_id(::google::protobuf::uint64 value);
  
  // required string device_name = 2;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 2;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // required string uuid = 3;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 3;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // optional bool is_online = 4 [default = false];
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 4;
  inline bool is_online() const;
  inline void set_is_online(bool value);
  
  // optional bool is_linked = 5 [default = false];
  inline bool has_is_linked() const;
  inline void clear_is_linked();
  static const int kIsLinkedFieldNumber = 5;
  inline bool is_linked() const;
  inline void set_is_linked(bool value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.MediaServerInfo)
 private:
  inline void set_has_cloud_device_id();
  inline void clear_has_cloud_device_id();
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_is_linked();
  inline void clear_has_is_linked();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 cloud_device_id_;
  ::std::string* device_name_;
  ::std::string* uuid_;
  bool is_online_;
  bool is_linked_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static MediaServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MusicTrackFields : public ::google::protobuf::Message {
 public:
  MusicTrackFields();
  virtual ~MusicTrackFields();
  
  MusicTrackFields(const MusicTrackFields& from);
  
  inline MusicTrackFields& operator=(const MusicTrackFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicTrackFields& default_instance();
  
  void Swap(MusicTrackFields* other);
  
  // implements Message ----------------------------------------------
  
  MusicTrackFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicTrackFields& from);
  void MergeFrom(const MusicTrackFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string absolute_path = 1;
  inline bool has_absolute_path() const;
  inline void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 1;
  inline const ::std::string& absolute_path() const;
  inline void set_absolute_path(const ::std::string& value);
  inline void set_absolute_path(const char* value);
  inline void set_absolute_path(const char* value, size_t size);
  inline ::std::string* mutable_absolute_path();
  inline ::std::string* release_absolute_path();
  
  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required string artist = 3;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 3;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  inline ::std::string* release_artist();
  
  // required string album_ref = 4;
  inline bool has_album_ref() const;
  inline void clear_album_ref();
  static const int kAlbumRefFieldNumber = 4;
  inline const ::std::string& album_ref() const;
  inline void set_album_ref(const ::std::string& value);
  inline void set_album_ref(const char* value);
  inline void set_album_ref(const char* value, size_t size);
  inline ::std::string* mutable_album_ref();
  inline ::std::string* release_album_ref();
  
  // optional int32 track_number = 5;
  inline bool has_track_number() const;
  inline void clear_track_number();
  static const int kTrackNumberFieldNumber = 5;
  inline ::google::protobuf::int32 track_number() const;
  inline void set_track_number(::google::protobuf::int32 value);
  
  // optional string genre = 6;
  inline bool has_genre() const;
  inline void clear_genre();
  static const int kGenreFieldNumber = 6;
  inline const ::std::string& genre() const;
  inline void set_genre(const ::std::string& value);
  inline void set_genre(const char* value);
  inline void set_genre(const char* value, size_t size);
  inline ::std::string* mutable_genre();
  inline ::std::string* release_genre();
  
  // optional uint64 duration_sec = 7;
  inline bool has_duration_sec() const;
  inline void clear_duration_sec();
  static const int kDurationSecFieldNumber = 7;
  inline ::google::protobuf::uint64 duration_sec() const;
  inline void set_duration_sec(::google::protobuf::uint64 value);
  
  // optional uint64 file_size = 8;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // optional string file_format = 9;
  inline bool has_file_format() const;
  inline void clear_file_format();
  static const int kFileFormatFieldNumber = 9;
  inline const ::std::string& file_format() const;
  inline void set_file_format(const ::std::string& value);
  inline void set_file_format(const char* value);
  inline void set_file_format(const char* value, size_t size);
  inline ::std::string* mutable_file_format();
  inline ::std::string* release_file_format();
  
  // optional uint64 date_time = 10;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 date_time() const;
  inline void set_date_time(::google::protobuf::uint64 value);
  
  // optional uint64 date_time_updated = 11;
  inline bool has_date_time_updated() const;
  inline void clear_date_time_updated();
  static const int kDateTimeUpdatedFieldNumber = 11;
  inline ::google::protobuf::uint64 date_time_updated() const;
  inline void set_date_time_updated(::google::protobuf::uint64 value);
  
  // optional string album_name = 12;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 12;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // optional string album_artist = 13;
  inline bool has_album_artist() const;
  inline void clear_album_artist();
  static const int kAlbumArtistFieldNumber = 13;
  inline const ::std::string& album_artist() const;
  inline void set_album_artist(const ::std::string& value);
  inline void set_album_artist(const char* value);
  inline void set_album_artist(const char* value, size_t size);
  inline ::std::string* mutable_album_artist();
  inline ::std::string* release_album_artist();
  
  // optional string checksum = 14;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 14;
  inline const ::std::string& checksum() const;
  inline void set_checksum(const ::std::string& value);
  inline void set_checksum(const char* value);
  inline void set_checksum(const char* value, size_t size);
  inline ::std::string* mutable_checksum();
  inline ::std::string* release_checksum();
  
  // optional uint64 length = 15;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 15;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);
  
  // optional string composer = 16;
  inline bool has_composer() const;
  inline void clear_composer();
  static const int kComposerFieldNumber = 16;
  inline const ::std::string& composer() const;
  inline void set_composer(const ::std::string& value);
  inline void set_composer(const char* value);
  inline void set_composer(const char* value, size_t size);
  inline ::std::string* mutable_composer();
  inline ::std::string* release_composer();
  
  // optional string disk_number = 17;
  inline bool has_disk_number() const;
  inline void clear_disk_number();
  static const int kDiskNumberFieldNumber = 17;
  inline const ::std::string& disk_number() const;
  inline void set_disk_number(const ::std::string& value);
  inline void set_disk_number(const char* value);
  inline void set_disk_number(const char* value, size_t size);
  inline ::std::string* mutable_disk_number();
  inline ::std::string* release_disk_number();
  
  // optional string year = 18;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 18;
  inline const ::std::string& year() const;
  inline void set_year(const ::std::string& value);
  inline void set_year(const char* value);
  inline void set_year(const char* value, size_t size);
  inline ::std::string* mutable_year();
  inline ::std::string* release_year();
  
  // @@protoc_insertion_point(class_scope:media_metadata.MusicTrackFields)
 private:
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_artist();
  inline void clear_has_artist();
  inline void set_has_album_ref();
  inline void clear_has_album_ref();
  inline void set_has_track_number();
  inline void clear_has_track_number();
  inline void set_has_genre();
  inline void clear_has_genre();
  inline void set_has_duration_sec();
  inline void clear_has_duration_sec();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_file_format();
  inline void clear_has_file_format();
  inline void set_has_date_time();
  inline void clear_has_date_time();
  inline void set_has_date_time_updated();
  inline void clear_has_date_time_updated();
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_album_artist();
  inline void clear_has_album_artist();
  inline void set_has_checksum();
  inline void clear_has_checksum();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_composer();
  inline void clear_has_composer();
  inline void set_has_disk_number();
  inline void clear_has_disk_number();
  inline void set_has_year();
  inline void clear_has_year();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* absolute_path_;
  ::std::string* title_;
  ::std::string* artist_;
  ::std::string* album_ref_;
  ::std::string* genre_;
  ::google::protobuf::uint64 duration_sec_;
  ::google::protobuf::uint64 file_size_;
  ::std::string* file_format_;
  ::google::protobuf::uint64 date_time_;
  ::google::protobuf::uint64 date_time_updated_;
  ::std::string* album_name_;
  ::std::string* album_artist_;
  ::std::string* checksum_;
  ::google::protobuf::uint64 length_;
  ::std::string* composer_;
  ::std::string* disk_number_;
  ::std::string* year_;
  ::google::protobuf::int32 track_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static MusicTrackFields* default_instance_;
};
// -------------------------------------------------------------------

class MusicAlbumFields : public ::google::protobuf::Message {
 public:
  MusicAlbumFields();
  virtual ~MusicAlbumFields();
  
  MusicAlbumFields(const MusicAlbumFields& from);
  
  inline MusicAlbumFields& operator=(const MusicAlbumFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicAlbumFields& default_instance();
  
  void Swap(MusicAlbumFields* other);
  
  // implements Message ----------------------------------------------
  
  MusicAlbumFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicAlbumFields& from);
  void MergeFrom(const MusicAlbumFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string album_name = 1;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 1;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // optional string album_artist = 2;
  inline bool has_album_artist() const;
  inline void clear_album_artist();
  static const int kAlbumArtistFieldNumber = 2;
  inline const ::std::string& album_artist() const;
  inline void set_album_artist(const ::std::string& value);
  inline void set_album_artist(const char* value);
  inline void set_album_artist(const char* value, size_t size);
  inline ::std::string* mutable_album_artist();
  inline ::std::string* release_album_artist();
  
  // optional string album_thumbnail = 3;
  inline bool has_album_thumbnail() const;
  inline void clear_album_thumbnail();
  static const int kAlbumThumbnailFieldNumber = 3;
  inline const ::std::string& album_thumbnail() const;
  inline void set_album_thumbnail(const ::std::string& value);
  inline void set_album_thumbnail(const char* value);
  inline void set_album_thumbnail(const char* value, size_t size);
  inline ::std::string* mutable_album_thumbnail();
  inline ::std::string* release_album_thumbnail();
  
  // optional uint32 album_trackcount = 4;
  inline bool has_album_trackcount() const;
  inline void clear_album_trackcount();
  static const int kAlbumTrackcountFieldNumber = 4;
  inline ::google::protobuf::uint32 album_trackcount() const;
  inline void set_album_trackcount(::google::protobuf::uint32 value);
  
  // optional uint64 album_tracksize = 5;
  inline bool has_album_tracksize() const;
  inline void clear_album_tracksize();
  static const int kAlbumTracksizeFieldNumber = 5;
  inline ::google::protobuf::uint64 album_tracksize() const;
  inline void set_album_tracksize(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.MusicAlbumFields)
 private:
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_album_artist();
  inline void clear_has_album_artist();
  inline void set_has_album_thumbnail();
  inline void clear_has_album_thumbnail();
  inline void set_has_album_trackcount();
  inline void clear_has_album_trackcount();
  inline void set_has_album_tracksize();
  inline void clear_has_album_tracksize();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* album_name_;
  ::std::string* album_artist_;
  ::std::string* album_thumbnail_;
  ::google::protobuf::uint64 album_tracksize_;
  ::google::protobuf::uint32 album_trackcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static MusicAlbumFields* default_instance_;
};
// -------------------------------------------------------------------

class MusicArtistFields : public ::google::protobuf::Message {
 public:
  MusicArtistFields();
  virtual ~MusicArtistFields();
  
  MusicArtistFields(const MusicArtistFields& from);
  
  inline MusicArtistFields& operator=(const MusicArtistFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicArtistFields& default_instance();
  
  void Swap(MusicArtistFields* other);
  
  // implements Message ----------------------------------------------
  
  MusicArtistFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicArtistFields& from);
  void MergeFrom(const MusicArtistFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string artist = 1;
  inline bool has_artist() const;
  inline void clear_artist();
  static const int kArtistFieldNumber = 1;
  inline const ::std::string& artist() const;
  inline void set_artist(const ::std::string& value);
  inline void set_artist(const char* value);
  inline void set_artist(const char* value, size_t size);
  inline ::std::string* mutable_artist();
  inline ::std::string* release_artist();
  
  // required uint32 album_count = 2;
  inline bool has_album_count() const;
  inline void clear_album_count();
  static const int kAlbumCountFieldNumber = 2;
  inline ::google::protobuf::uint32 album_count() const;
  inline void set_album_count(::google::protobuf::uint32 value);
  
  // required uint32 track_count = 3;
  inline bool has_track_count() const;
  inline void clear_track_count();
  static const int kTrackCountFieldNumber = 3;
  inline ::google::protobuf::uint32 track_count() const;
  inline void set_track_count(::google::protobuf::uint32 value);
  
  // required uint64 item_total_size = 4;
  inline bool has_item_total_size() const;
  inline void clear_item_total_size();
  static const int kItemTotalSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 item_total_size() const;
  inline void set_item_total_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.MusicArtistFields)
 private:
  inline void set_has_artist();
  inline void clear_has_artist();
  inline void set_has_album_count();
  inline void clear_has_album_count();
  inline void set_has_track_count();
  inline void clear_has_track_count();
  inline void set_has_item_total_size();
  inline void clear_has_item_total_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* artist_;
  ::google::protobuf::uint32 album_count_;
  ::google::protobuf::uint32 track_count_;
  ::google::protobuf::uint64 item_total_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static MusicArtistFields* default_instance_;
};
// -------------------------------------------------------------------

class MusicGenreFields : public ::google::protobuf::Message {
 public:
  MusicGenreFields();
  virtual ~MusicGenreFields();
  
  MusicGenreFields(const MusicGenreFields& from);
  
  inline MusicGenreFields& operator=(const MusicGenreFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MusicGenreFields& default_instance();
  
  void Swap(MusicGenreFields* other);
  
  // implements Message ----------------------------------------------
  
  MusicGenreFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MusicGenreFields& from);
  void MergeFrom(const MusicGenreFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string genre = 1;
  inline bool has_genre() const;
  inline void clear_genre();
  static const int kGenreFieldNumber = 1;
  inline const ::std::string& genre() const;
  inline void set_genre(const ::std::string& value);
  inline void set_genre(const char* value);
  inline void set_genre(const char* value, size_t size);
  inline ::std::string* mutable_genre();
  inline ::std::string* release_genre();
  
  // required uint32 track_count = 2;
  inline bool has_track_count() const;
  inline void clear_track_count();
  static const int kTrackCountFieldNumber = 2;
  inline ::google::protobuf::uint32 track_count() const;
  inline void set_track_count(::google::protobuf::uint32 value);
  
  // required uint32 album_count = 3;
  inline bool has_album_count() const;
  inline void clear_album_count();
  static const int kAlbumCountFieldNumber = 3;
  inline ::google::protobuf::uint32 album_count() const;
  inline void set_album_count(::google::protobuf::uint32 value);
  
  // required uint64 item_total_size = 4;
  inline bool has_item_total_size() const;
  inline void clear_item_total_size();
  static const int kItemTotalSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 item_total_size() const;
  inline void set_item_total_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.MusicGenreFields)
 private:
  inline void set_has_genre();
  inline void clear_has_genre();
  inline void set_has_track_count();
  inline void clear_has_track_count();
  inline void set_has_album_count();
  inline void clear_has_album_count();
  inline void set_has_item_total_size();
  inline void clear_has_item_total_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* genre_;
  ::google::protobuf::uint32 track_count_;
  ::google::protobuf::uint32 album_count_;
  ::google::protobuf::uint64 item_total_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static MusicGenreFields* default_instance_;
};
// -------------------------------------------------------------------

class VideoItemFields : public ::google::protobuf::Message {
 public:
  VideoItemFields();
  virtual ~VideoItemFields();
  
  VideoItemFields(const VideoItemFields& from);
  
  inline VideoItemFields& operator=(const VideoItemFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoItemFields& default_instance();
  
  void Swap(VideoItemFields* other);
  
  // implements Message ----------------------------------------------
  
  VideoItemFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoItemFields& from);
  void MergeFrom(const VideoItemFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string absolute_path = 1;
  inline bool has_absolute_path() const;
  inline void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 1;
  inline const ::std::string& absolute_path() const;
  inline void set_absolute_path(const ::std::string& value);
  inline void set_absolute_path(const char* value);
  inline void set_absolute_path(const char* value, size_t size);
  inline ::std::string* mutable_absolute_path();
  inline ::std::string* release_absolute_path();
  
  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string thumbnail = 3;
  inline bool has_thumbnail() const;
  inline void clear_thumbnail();
  static const int kThumbnailFieldNumber = 3;
  inline const ::std::string& thumbnail() const;
  inline void set_thumbnail(const ::std::string& value);
  inline void set_thumbnail(const char* value);
  inline void set_thumbnail(const char* value, size_t size);
  inline ::std::string* mutable_thumbnail();
  inline ::std::string* release_thumbnail();
  
  // required string album_name = 4;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 4;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // optional uint64 duration_sec = 5;
  inline bool has_duration_sec() const;
  inline void clear_duration_sec();
  static const int kDurationSecFieldNumber = 5;
  inline ::google::protobuf::uint64 duration_sec() const;
  inline void set_duration_sec(::google::protobuf::uint64 value);
  
  // optional uint64 file_size = 6;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 6;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // optional uint64 date_time = 7;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 date_time() const;
  inline void set_date_time(::google::protobuf::uint64 value);
  
  // optional string file_format = 8;
  inline bool has_file_format() const;
  inline void clear_file_format();
  static const int kFileFormatFieldNumber = 8;
  inline const ::std::string& file_format() const;
  inline void set_file_format(const ::std::string& value);
  inline void set_file_format(const char* value);
  inline void set_file_format(const char* value, size_t size);
  inline ::std::string* mutable_file_format();
  inline ::std::string* release_file_format();
  
  // optional uint64 date_time_updated = 9;
  inline bool has_date_time_updated() const;
  inline void clear_date_time_updated();
  static const int kDateTimeUpdatedFieldNumber = 9;
  inline ::google::protobuf::uint64 date_time_updated() const;
  inline void set_date_time_updated(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.VideoItemFields)
 private:
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_thumbnail();
  inline void clear_has_thumbnail();
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_duration_sec();
  inline void clear_has_duration_sec();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_date_time();
  inline void clear_has_date_time();
  inline void set_has_file_format();
  inline void clear_has_file_format();
  inline void set_has_date_time_updated();
  inline void clear_has_date_time_updated();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* absolute_path_;
  ::std::string* title_;
  ::std::string* thumbnail_;
  ::std::string* album_name_;
  ::google::protobuf::uint64 duration_sec_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::uint64 date_time_;
  ::std::string* file_format_;
  ::google::protobuf::uint64 date_time_updated_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static VideoItemFields* default_instance_;
};
// -------------------------------------------------------------------

class VideoAlbumFields : public ::google::protobuf::Message {
 public:
  VideoAlbumFields();
  virtual ~VideoAlbumFields();
  
  VideoAlbumFields(const VideoAlbumFields& from);
  
  inline VideoAlbumFields& operator=(const VideoAlbumFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoAlbumFields& default_instance();
  
  void Swap(VideoAlbumFields* other);
  
  // implements Message ----------------------------------------------
  
  VideoAlbumFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoAlbumFields& from);
  void MergeFrom(const VideoAlbumFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string collection_id_ref = 1;
  inline bool has_collection_id_ref() const;
  inline void clear_collection_id_ref();
  static const int kCollectionIdRefFieldNumber = 1;
  inline const ::std::string& collection_id_ref() const;
  inline void set_collection_id_ref(const ::std::string& value);
  inline void set_collection_id_ref(const char* value);
  inline void set_collection_id_ref(const char* value, size_t size);
  inline ::std::string* mutable_collection_id_ref();
  inline ::std::string* release_collection_id_ref();
  
  // required string album_name = 2;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 2;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // required uint32 item_count = 3;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // required uint64 item_total_size = 4;
  inline bool has_item_total_size() const;
  inline void clear_item_total_size();
  static const int kItemTotalSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 item_total_size() const;
  inline void set_item_total_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.VideoAlbumFields)
 private:
  inline void set_has_collection_id_ref();
  inline void clear_has_collection_id_ref();
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_item_total_size();
  inline void clear_has_item_total_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* collection_id_ref_;
  ::std::string* album_name_;
  ::google::protobuf::uint64 item_total_size_;
  ::google::protobuf::uint32 item_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static VideoAlbumFields* default_instance_;
};
// -------------------------------------------------------------------

class ImageItemFields : public ::google::protobuf::Message {
 public:
  ImageItemFields();
  virtual ~ImageItemFields();
  
  ImageItemFields(const ImageItemFields& from);
  
  inline ImageItemFields& operator=(const ImageItemFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageItemFields& default_instance();
  
  void Swap(ImageItemFields* other);
  
  // implements Message ----------------------------------------------
  
  ImageItemFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageItemFields& from);
  void MergeFrom(const ImageItemFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string absolute_path = 1;
  inline bool has_absolute_path() const;
  inline void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 1;
  inline const ::std::string& absolute_path() const;
  inline void set_absolute_path(const ::std::string& value);
  inline void set_absolute_path(const char* value);
  inline void set_absolute_path(const char* value, size_t size);
  inline ::std::string* mutable_absolute_path();
  inline ::std::string* release_absolute_path();
  
  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // optional string thumbnail = 3;
  inline bool has_thumbnail() const;
  inline void clear_thumbnail();
  static const int kThumbnailFieldNumber = 3;
  inline const ::std::string& thumbnail() const;
  inline void set_thumbnail(const ::std::string& value);
  inline void set_thumbnail(const char* value);
  inline void set_thumbnail(const char* value, size_t size);
  inline ::std::string* mutable_thumbnail();
  inline ::std::string* release_thumbnail();
  
  // required string album_name = 4;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 4;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // required uint64 date_time = 5;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 date_time() const;
  inline void set_date_time(::google::protobuf::uint64 value);
  
  // optional uint64 file_size = 6;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 6;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // optional string file_format = 9;
  inline bool has_file_format() const;
  inline void clear_file_format();
  static const int kFileFormatFieldNumber = 9;
  inline const ::std::string& file_format() const;
  inline void set_file_format(const ::std::string& value);
  inline void set_file_format(const char* value);
  inline void set_file_format(const char* value, size_t size);
  inline ::std::string* mutable_file_format();
  inline ::std::string* release_file_format();
  
  // optional uint64 date_time_updated = 10;
  inline bool has_date_time_updated() const;
  inline void clear_date_time_updated();
  static const int kDateTimeUpdatedFieldNumber = 10;
  inline ::google::protobuf::uint64 date_time_updated() const;
  inline void set_date_time_updated(::google::protobuf::uint64 value);
  
  // optional string dimensions = 11;
  inline bool has_dimensions() const;
  inline void clear_dimensions();
  static const int kDimensionsFieldNumber = 11;
  inline const ::std::string& dimensions() const;
  inline void set_dimensions(const ::std::string& value);
  inline void set_dimensions(const char* value);
  inline void set_dimensions(const char* value, size_t size);
  inline ::std::string* mutable_dimensions();
  inline ::std::string* release_dimensions();
  
  // optional uint32 orientation = 12;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 12;
  inline ::google::protobuf::uint32 orientation() const;
  inline void set_orientation(::google::protobuf::uint32 value);
  
  // optional string comp_id = 13;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 13;
  inline const ::std::string& comp_id() const;
  inline void set_comp_id(const ::std::string& value);
  inline void set_comp_id(const char* value);
  inline void set_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_comp_id();
  inline ::std::string* release_comp_id();
  
  // optional uint32 special_format_flag = 14;
  inline bool has_special_format_flag() const;
  inline void clear_special_format_flag();
  static const int kSpecialFormatFlagFieldNumber = 14;
  inline ::google::protobuf::uint32 special_format_flag() const;
  inline void set_special_format_flag(::google::protobuf::uint32 value);
  
  // optional string album_ref = 15;
  inline bool has_album_ref() const;
  inline void clear_album_ref();
  static const int kAlbumRefFieldNumber = 15;
  inline const ::std::string& album_ref() const;
  inline void set_album_ref(const ::std::string& value);
  inline void set_album_ref(const char* value);
  inline void set_album_ref(const char* value, size_t size);
  inline ::std::string* mutable_album_ref();
  inline ::std::string* release_album_ref();
  
  // @@protoc_insertion_point(class_scope:media_metadata.ImageItemFields)
 private:
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_thumbnail();
  inline void clear_has_thumbnail();
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_date_time();
  inline void clear_has_date_time();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_file_format();
  inline void clear_has_file_format();
  inline void set_has_date_time_updated();
  inline void clear_has_date_time_updated();
  inline void set_has_dimensions();
  inline void clear_has_dimensions();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_special_format_flag();
  inline void clear_has_special_format_flag();
  inline void set_has_album_ref();
  inline void clear_has_album_ref();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* absolute_path_;
  ::std::string* title_;
  ::std::string* thumbnail_;
  ::std::string* album_name_;
  ::google::protobuf::uint64 date_time_;
  ::google::protobuf::uint64 file_size_;
  ::std::string* file_format_;
  ::google::protobuf::uint64 date_time_updated_;
  ::std::string* dimensions_;
  ::std::string* comp_id_;
  ::google::protobuf::uint32 orientation_;
  ::google::protobuf::uint32 special_format_flag_;
  ::std::string* album_ref_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ImageItemFields* default_instance_;
};
// -------------------------------------------------------------------

class ImageAlbumFields : public ::google::protobuf::Message {
 public:
  ImageAlbumFields();
  virtual ~ImageAlbumFields();
  
  ImageAlbumFields(const ImageAlbumFields& from);
  
  inline ImageAlbumFields& operator=(const ImageAlbumFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageAlbumFields& default_instance();
  
  void Swap(ImageAlbumFields* other);
  
  // implements Message ----------------------------------------------
  
  ImageAlbumFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageAlbumFields& from);
  void MergeFrom(const ImageAlbumFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string album_name = 2;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 2;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // optional uint32 item_count = 3;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 3;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // optional uint64 item_total_size = 4;
  inline bool has_item_total_size() const;
  inline void clear_item_total_size();
  static const int kItemTotalSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 item_total_size() const;
  inline void set_item_total_size(::google::protobuf::uint64 value);
  
  // optional string album_thumbnail = 5;
  inline bool has_album_thumbnail() const;
  inline void clear_album_thumbnail();
  static const int kAlbumThumbnailFieldNumber = 5;
  inline const ::std::string& album_thumbnail() const;
  inline void set_album_thumbnail(const ::std::string& value);
  inline void set_album_thumbnail(const char* value);
  inline void set_album_thumbnail(const char* value, size_t size);
  inline ::std::string* mutable_album_thumbnail();
  inline ::std::string* release_album_thumbnail();
  
  // optional uint64 timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.ImageAlbumFields)
 private:
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_item_total_size();
  inline void clear_has_item_total_size();
  inline void set_has_album_thumbnail();
  inline void clear_has_album_thumbnail();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* album_name_;
  ::google::protobuf::uint64 item_total_size_;
  ::std::string* album_thumbnail_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 item_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ImageAlbumFields* default_instance_;
};
// -------------------------------------------------------------------

class PlaylistFields : public ::google::protobuf::Message {
 public:
  PlaylistFields();
  virtual ~PlaylistFields();
  
  PlaylistFields(const PlaylistFields& from);
  
  inline PlaylistFields& operator=(const PlaylistFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlaylistFields& default_instance();
  
  void Swap(PlaylistFields* other);
  
  // implements Message ----------------------------------------------
  
  PlaylistFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlaylistFields& from);
  void MergeFrom(const PlaylistFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string playlist_name = 1;
  inline bool has_playlist_name() const;
  inline void clear_playlist_name();
  static const int kPlaylistNameFieldNumber = 1;
  inline const ::std::string& playlist_name() const;
  inline void set_playlist_name(const ::std::string& value);
  inline void set_playlist_name(const char* value);
  inline void set_playlist_name(const char* value, size_t size);
  inline ::std::string* mutable_playlist_name();
  inline ::std::string* release_playlist_name();
  
  // repeated string content_refs = 2;
  inline int content_refs_size() const;
  inline void clear_content_refs();
  static const int kContentRefsFieldNumber = 2;
  inline const ::std::string& content_refs(int index) const;
  inline ::std::string* mutable_content_refs(int index);
  inline void set_content_refs(int index, const ::std::string& value);
  inline void set_content_refs(int index, const char* value);
  inline void set_content_refs(int index, const char* value, size_t size);
  inline ::std::string* add_content_refs();
  inline void add_content_refs(const ::std::string& value);
  inline void add_content_refs(const char* value);
  inline void add_content_refs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& content_refs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_content_refs();
  
  // @@protoc_insertion_point(class_scope:media_metadata.PlaylistFields)
 private:
  inline void set_has_playlist_name();
  inline void clear_has_playlist_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* playlist_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> content_refs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static PlaylistFields* default_instance_;
};
// -------------------------------------------------------------------

class ContentDirectoryObject : public ::google::protobuf::Message {
 public:
  ContentDirectoryObject();
  virtual ~ContentDirectoryObject();
  
  ContentDirectoryObject(const ContentDirectoryObject& from);
  
  inline ContentDirectoryObject& operator=(const ContentDirectoryObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContentDirectoryObject& default_instance();
  
  void Swap(ContentDirectoryObject* other);
  
  // implements Message ----------------------------------------------
  
  ContentDirectoryObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContentDirectoryObject& from);
  void MergeFrom(const ContentDirectoryObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline const ::std::string& object_id() const;
  inline void set_object_id(const ::std::string& value);
  inline void set_object_id(const char* value);
  inline void set_object_id(const char* value, size_t size);
  inline ::std::string* mutable_object_id();
  inline ::std::string* release_object_id();
  
  // repeated string optional_fields = 2;
  inline int optional_fields_size() const;
  inline void clear_optional_fields();
  static const int kOptionalFieldsFieldNumber = 2;
  inline const ::std::string& optional_fields(int index) const;
  inline ::std::string* mutable_optional_fields(int index);
  inline void set_optional_fields(int index, const ::std::string& value);
  inline void set_optional_fields(int index, const char* value);
  inline void set_optional_fields(int index, const char* value, size_t size);
  inline ::std::string* add_optional_fields();
  inline void add_optional_fields(const ::std::string& value);
  inline void add_optional_fields(const char* value);
  inline void add_optional_fields(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& optional_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_optional_fields();
  
  // required .media_metadata.MediaSource_t source = 3;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 3;
  inline media_metadata::MediaSource_t source() const;
  inline void set_source(media_metadata::MediaSource_t value);
  
  // optional .media_metadata.MusicTrackFields music_track = 4;
  inline bool has_music_track() const;
  inline void clear_music_track();
  static const int kMusicTrackFieldNumber = 4;
  inline const ::media_metadata::MusicTrackFields& music_track() const;
  inline ::media_metadata::MusicTrackFields* mutable_music_track();
  inline ::media_metadata::MusicTrackFields* release_music_track();
  
  // optional .media_metadata.MusicAlbumFields music_album = 5;
  inline bool has_music_album() const;
  inline void clear_music_album();
  static const int kMusicAlbumFieldNumber = 5;
  inline const ::media_metadata::MusicAlbumFields& music_album() const;
  inline ::media_metadata::MusicAlbumFields* mutable_music_album();
  inline ::media_metadata::MusicAlbumFields* release_music_album();
  
  // optional .media_metadata.VideoItemFields video_item = 6;
  inline bool has_video_item() const;
  inline void clear_video_item();
  static const int kVideoItemFieldNumber = 6;
  inline const ::media_metadata::VideoItemFields& video_item() const;
  inline ::media_metadata::VideoItemFields* mutable_video_item();
  inline ::media_metadata::VideoItemFields* release_video_item();
  
  // optional .media_metadata.ImageItemFields photo_item = 7;
  inline bool has_photo_item() const;
  inline void clear_photo_item();
  static const int kPhotoItemFieldNumber = 7;
  inline const ::media_metadata::ImageItemFields& photo_item() const;
  inline ::media_metadata::ImageItemFields* mutable_photo_item();
  inline ::media_metadata::ImageItemFields* release_photo_item();
  
  // optional .media_metadata.PlaylistFields playlist = 8;
  inline bool has_playlist() const;
  inline void clear_playlist();
  static const int kPlaylistFieldNumber = 8;
  inline const ::media_metadata::PlaylistFields& playlist() const;
  inline ::media_metadata::PlaylistFields* mutable_playlist();
  inline ::media_metadata::PlaylistFields* release_playlist();
  
  // optional .media_metadata.ImageAlbumFields photo_album = 9;
  inline bool has_photo_album() const;
  inline void clear_photo_album();
  static const int kPhotoAlbumFieldNumber = 9;
  inline const ::media_metadata::ImageAlbumFields& photo_album() const;
  inline ::media_metadata::ImageAlbumFields* mutable_photo_album();
  inline ::media_metadata::ImageAlbumFields* release_photo_album();
  
  // @@protoc_insertion_point(class_scope:media_metadata.ContentDirectoryObject)
 private:
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_music_track();
  inline void clear_has_music_track();
  inline void set_has_music_album();
  inline void clear_has_music_album();
  inline void set_has_video_item();
  inline void clear_has_video_item();
  inline void set_has_photo_item();
  inline void clear_has_photo_item();
  inline void set_has_playlist();
  inline void clear_has_playlist();
  inline void set_has_photo_album();
  inline void clear_has_photo_album();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* object_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> optional_fields_;
  ::media_metadata::MusicTrackFields* music_track_;
  ::media_metadata::MusicAlbumFields* music_album_;
  ::media_metadata::VideoItemFields* video_item_;
  ::media_metadata::ImageItemFields* photo_item_;
  ::media_metadata::PlaylistFields* playlist_;
  ::media_metadata::ImageAlbumFields* photo_album_;
  int source_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ContentDirectoryObject* default_instance_;
};
// -------------------------------------------------------------------

class MCAMetadataQueryObject : public ::google::protobuf::Message {
 public:
  MCAMetadataQueryObject();
  virtual ~MCAMetadataQueryObject();
  
  MCAMetadataQueryObject(const MCAMetadataQueryObject& from);
  
  inline MCAMetadataQueryObject& operator=(const MCAMetadataQueryObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MCAMetadataQueryObject& default_instance();
  
  void Swap(MCAMetadataQueryObject* other);
  
  // implements Message ----------------------------------------------
  
  MCAMetadataQueryObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MCAMetadataQueryObject& from);
  void MergeFrom(const MCAMetadataQueryObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .media_metadata.ContentDirectoryObject cdo = 1;
  inline bool has_cdo() const;
  inline void clear_cdo();
  static const int kCdoFieldNumber = 1;
  inline const ::media_metadata::ContentDirectoryObject& cdo() const;
  inline ::media_metadata::ContentDirectoryObject* mutable_cdo();
  inline ::media_metadata::ContentDirectoryObject* release_cdo();
  
  // optional string collection_id = 2;
  inline bool has_collection_id() const;
  inline void clear_collection_id();
  static const int kCollectionIdFieldNumber = 2;
  inline const ::std::string& collection_id() const;
  inline void set_collection_id(const ::std::string& value);
  inline void set_collection_id(const char* value);
  inline void set_collection_id(const char* value, size_t size);
  inline ::std::string* mutable_collection_id();
  inline ::std::string* release_collection_id();
  
  // optional .media_metadata.MusicArtistFields music_artist = 3;
  inline bool has_music_artist() const;
  inline void clear_music_artist();
  static const int kMusicArtistFieldNumber = 3;
  inline const ::media_metadata::MusicArtistFields& music_artist() const;
  inline ::media_metadata::MusicArtistFields* mutable_music_artist();
  inline ::media_metadata::MusicArtistFields* release_music_artist();
  
  // optional .media_metadata.MusicGenreFields music_genre = 4;
  inline bool has_music_genre() const;
  inline void clear_music_genre();
  static const int kMusicGenreFieldNumber = 4;
  inline const ::media_metadata::MusicGenreFields& music_genre() const;
  inline ::media_metadata::MusicGenreFields* mutable_music_genre();
  inline ::media_metadata::MusicGenreFields* release_music_genre();
  
  // optional .media_metadata.VideoAlbumFields video_album = 5;
  inline bool has_video_album() const;
  inline void clear_video_album();
  static const int kVideoAlbumFieldNumber = 5;
  inline const ::media_metadata::VideoAlbumFields& video_album() const;
  inline ::media_metadata::VideoAlbumFields* mutable_video_album();
  inline ::media_metadata::VideoAlbumFields* release_video_album();
  
  // optional string url = 7;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 7;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional string thumbnail_url = 8;
  inline bool has_thumbnail_url() const;
  inline void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 8;
  inline const ::std::string& thumbnail_url() const;
  inline void set_thumbnail_url(const ::std::string& value);
  inline void set_thumbnail_url(const char* value);
  inline void set_thumbnail_url(const char* value, size_t size);
  inline ::std::string* mutable_thumbnail_url();
  inline ::std::string* release_thumbnail_url();
  
  // @@protoc_insertion_point(class_scope:media_metadata.MCAMetadataQueryObject)
 private:
  inline void set_has_cdo();
  inline void clear_has_cdo();
  inline void set_has_collection_id();
  inline void clear_has_collection_id();
  inline void set_has_music_artist();
  inline void clear_has_music_artist();
  inline void set_has_music_genre();
  inline void clear_has_music_genre();
  inline void set_has_video_album();
  inline void clear_has_video_album();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_thumbnail_url();
  inline void clear_has_thumbnail_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::media_metadata::ContentDirectoryObject* cdo_;
  ::std::string* collection_id_;
  ::media_metadata::MusicArtistFields* music_artist_;
  ::media_metadata::MusicGenreFields* music_genre_;
  ::media_metadata::VideoAlbumFields* video_album_;
  ::std::string* url_;
  ::std::string* thumbnail_url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static MCAMetadataQueryObject* default_instance_;
};
// -------------------------------------------------------------------

class GetMetadataSyncStateInput : public ::google::protobuf::Message {
 public:
  GetMetadataSyncStateInput();
  virtual ~GetMetadataSyncStateInput();
  
  GetMetadataSyncStateInput(const GetMetadataSyncStateInput& from);
  
  inline GetMetadataSyncStateInput& operator=(const GetMetadataSyncStateInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetadataSyncStateInput& default_instance();
  
  void Swap(GetMetadataSyncStateInput* other);
  
  // implements Message ----------------------------------------------
  
  GetMetadataSyncStateInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMetadataSyncStateInput& from);
  void MergeFrom(const GetMetadataSyncStateInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:media_metadata.GetMetadataSyncStateInput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetMetadataSyncStateInput* default_instance_;
};
// -------------------------------------------------------------------

class GetMetadataSyncStateOutput : public ::google::protobuf::Message {
 public:
  GetMetadataSyncStateOutput();
  virtual ~GetMetadataSyncStateOutput();
  
  GetMetadataSyncStateOutput(const GetMetadataSyncStateOutput& from);
  
  inline GetMetadataSyncStateOutput& operator=(const GetMetadataSyncStateOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMetadataSyncStateOutput& default_instance();
  
  void Swap(GetMetadataSyncStateOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetMetadataSyncStateOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetMetadataSyncStateOutput& from);
  void MergeFrom(const GetMetadataSyncStateOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .media_metadata.MetadataSyncStateType_t sync_state = 1;
  inline bool has_sync_state() const;
  inline void clear_sync_state();
  static const int kSyncStateFieldNumber = 1;
  inline media_metadata::MetadataSyncStateType_t sync_state() const;
  inline void set_sync_state(media_metadata::MetadataSyncStateType_t value);
  
  // optional fixed64 metadata_update_time = 2;
  inline bool has_metadata_update_time() const;
  inline void clear_metadata_update_time();
  static const int kMetadataUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 metadata_update_time() const;
  inline void set_metadata_update_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.GetMetadataSyncStateOutput)
 private:
  inline void set_has_sync_state();
  inline void clear_has_sync_state();
  inline void set_has_metadata_update_time();
  inline void clear_has_metadata_update_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 metadata_update_time_;
  int sync_state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetMetadataSyncStateOutput* default_instance_;
};
// -------------------------------------------------------------------

class ListCollectionsOutput : public ::google::protobuf::Message {
 public:
  ListCollectionsOutput();
  virtual ~ListCollectionsOutput();
  
  ListCollectionsOutput(const ListCollectionsOutput& from);
  
  inline ListCollectionsOutput& operator=(const ListCollectionsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCollectionsOutput& default_instance();
  
  void Swap(ListCollectionsOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListCollectionsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCollectionsOutput& from);
  void MergeFrom(const ListCollectionsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string collection_id = 1;
  inline int collection_id_size() const;
  inline void clear_collection_id();
  static const int kCollectionIdFieldNumber = 1;
  inline const ::std::string& collection_id(int index) const;
  inline ::std::string* mutable_collection_id(int index);
  inline void set_collection_id(int index, const ::std::string& value);
  inline void set_collection_id(int index, const char* value);
  inline void set_collection_id(int index, const char* value, size_t size);
  inline ::std::string* add_collection_id();
  inline void add_collection_id(const ::std::string& value);
  inline void add_collection_id(const char* value);
  inline void add_collection_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& collection_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_collection_id();
  
  // repeated uint64 collection_timestamp = 2;
  inline int collection_timestamp_size() const;
  inline void clear_collection_timestamp();
  static const int kCollectionTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 collection_timestamp(int index) const;
  inline void set_collection_timestamp(int index, ::google::protobuf::uint64 value);
  inline void add_collection_timestamp(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      collection_timestamp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_collection_timestamp();
  
  // @@protoc_insertion_point(class_scope:media_metadata.ListCollectionsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> collection_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > collection_timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static ListCollectionsOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetObjectMetadataInput : public ::google::protobuf::Message {
 public:
  GetObjectMetadataInput();
  virtual ~GetObjectMetadataInput();
  
  GetObjectMetadataInput(const GetObjectMetadataInput& from);
  
  inline GetObjectMetadataInput& operator=(const GetObjectMetadataInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetObjectMetadataInput& default_instance();
  
  void Swap(GetObjectMetadataInput* other);
  
  // implements Message ----------------------------------------------
  
  GetObjectMetadataInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetObjectMetadataInput& from);
  void MergeFrom(const GetObjectMetadataInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional string object_id = 2;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 2;
  inline const ::std::string& object_id() const;
  inline void set_object_id(const ::std::string& value);
  inline void set_object_id(const char* value);
  inline void set_object_id(const char* value, size_t size);
  inline ::std::string* mutable_object_id();
  inline ::std::string* release_object_id();
  
  // optional .media_metadata.CatalogType_t catalog_type = 3;
  inline bool has_catalog_type() const;
  inline void clear_catalog_type();
  static const int kCatalogTypeFieldNumber = 3;
  inline media_metadata::CatalogType_t catalog_type() const;
  inline void set_catalog_type(media_metadata::CatalogType_t value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.GetObjectMetadataInput)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_catalog_type();
  inline void clear_has_catalog_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  ::std::string* object_id_;
  int catalog_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetObjectMetadataInput* default_instance_;
};
// -------------------------------------------------------------------

class GetObjectMetadataOutput : public ::google::protobuf::Message {
 public:
  GetObjectMetadataOutput();
  virtual ~GetObjectMetadataOutput();
  
  GetObjectMetadataOutput(const GetObjectMetadataOutput& from);
  
  inline GetObjectMetadataOutput& operator=(const GetObjectMetadataOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetObjectMetadataOutput& default_instance();
  
  void Swap(GetObjectMetadataOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetObjectMetadataOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetObjectMetadataOutput& from);
  void MergeFrom(const GetObjectMetadataOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .media_metadata.MediaType_t media_type = 1;
  inline bool has_media_type() const;
  inline void clear_media_type();
  static const int kMediaTypeFieldNumber = 1;
  inline media_metadata::MediaType_t media_type() const;
  inline void set_media_type(media_metadata::MediaType_t value);
  
  // optional string absolute_path = 2;
  inline bool has_absolute_path() const;
  inline void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 2;
  inline const ::std::string& absolute_path() const;
  inline void set_absolute_path(const ::std::string& value);
  inline void set_absolute_path(const char* value);
  inline void set_absolute_path(const char* value, size_t size);
  inline ::std::string* mutable_absolute_path();
  inline ::std::string* release_absolute_path();
  
  // optional string thumbnail = 3;
  inline bool has_thumbnail() const;
  inline void clear_thumbnail();
  static const int kThumbnailFieldNumber = 3;
  inline const ::std::string& thumbnail() const;
  inline void set_thumbnail(const ::std::string& value);
  inline void set_thumbnail(const char* value);
  inline void set_thumbnail(const char* value, size_t size);
  inline ::std::string* mutable_thumbnail();
  inline ::std::string* release_thumbnail();
  
  // optional string file_format = 4;
  inline bool has_file_format() const;
  inline void clear_file_format();
  static const int kFileFormatFieldNumber = 4;
  inline const ::std::string& file_format() const;
  inline void set_file_format(const ::std::string& value);
  inline void set_file_format(const char* value);
  inline void set_file_format(const char* value, size_t size);
  inline ::std::string* mutable_file_format();
  inline ::std::string* release_file_format();
  
  // optional string comp_id = 5;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 5;
  inline const ::std::string& comp_id() const;
  inline void set_comp_id(const ::std::string& value);
  inline void set_comp_id(const char* value);
  inline void set_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_comp_id();
  inline ::std::string* release_comp_id();
  
  // optional uint32 special_format_flag = 6;
  inline bool has_special_format_flag() const;
  inline void clear_special_format_flag();
  static const int kSpecialFormatFlagFieldNumber = 6;
  inline ::google::protobuf::uint32 special_format_flag() const;
  inline void set_special_format_flag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:media_metadata.GetObjectMetadataOutput)
 private:
  inline void set_has_media_type();
  inline void clear_has_media_type();
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_thumbnail();
  inline void clear_has_thumbnail();
  inline void set_has_file_format();
  inline void clear_has_file_format();
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_special_format_flag();
  inline void clear_has_special_format_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* absolute_path_;
  ::std::string* thumbnail_;
  int media_type_;
  ::google::protobuf::uint32 special_format_flag_;
  ::std::string* file_format_;
  ::std::string* comp_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto();
  friend void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto();
  
  void InitAsDefaultInstance();
  static GetObjectMetadataOutput* default_instance_;
};
// ===================================================================


// ===================================================================

// NoParamInput

// -------------------------------------------------------------------

// NoParamOutput

// -------------------------------------------------------------------

// MediaServerInfo

// required fixed64 cloud_device_id = 1;
inline bool MediaServerInfo::has_cloud_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaServerInfo::set_has_cloud_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaServerInfo::clear_has_cloud_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaServerInfo::clear_cloud_device_id() {
  cloud_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cloud_device_id();
}
inline ::google::protobuf::uint64 MediaServerInfo::cloud_device_id() const {
  return cloud_device_id_;
}
inline void MediaServerInfo::set_cloud_device_id(::google::protobuf::uint64 value) {
  set_has_cloud_device_id();
  cloud_device_id_ = value;
}

// required string device_name = 2;
inline bool MediaServerInfo::has_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaServerInfo::set_has_device_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaServerInfo::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaServerInfo::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& MediaServerInfo::device_name() const {
  return *device_name_;
}
inline void MediaServerInfo::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void MediaServerInfo::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void MediaServerInfo::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaServerInfo::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* MediaServerInfo::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string uuid = 3;
inline bool MediaServerInfo::has_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MediaServerInfo::set_has_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MediaServerInfo::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MediaServerInfo::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& MediaServerInfo::uuid() const {
  return *uuid_;
}
inline void MediaServerInfo::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void MediaServerInfo::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void MediaServerInfo::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaServerInfo::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* MediaServerInfo::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_online = 4 [default = false];
inline bool MediaServerInfo::has_is_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MediaServerInfo::set_has_is_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MediaServerInfo::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MediaServerInfo::clear_is_online() {
  is_online_ = false;
  clear_has_is_online();
}
inline bool MediaServerInfo::is_online() const {
  return is_online_;
}
inline void MediaServerInfo::set_is_online(bool value) {
  set_has_is_online();
  is_online_ = value;
}

// optional bool is_linked = 5 [default = false];
inline bool MediaServerInfo::has_is_linked() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MediaServerInfo::set_has_is_linked() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MediaServerInfo::clear_has_is_linked() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MediaServerInfo::clear_is_linked() {
  is_linked_ = false;
  clear_has_is_linked();
}
inline bool MediaServerInfo::is_linked() const {
  return is_linked_;
}
inline void MediaServerInfo::set_is_linked(bool value) {
  set_has_is_linked();
  is_linked_ = value;
}

// -------------------------------------------------------------------

// MusicTrackFields

// required string absolute_path = 1;
inline bool MusicTrackFields::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicTrackFields::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicTrackFields::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicTrackFields::clear_absolute_path() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    absolute_path_->clear();
  }
  clear_has_absolute_path();
}
inline const ::std::string& MusicTrackFields::absolute_path() const {
  return *absolute_path_;
}
inline void MusicTrackFields::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void MusicTrackFields::set_absolute_path(const char* value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void MusicTrackFields::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_absolute_path() {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  return absolute_path_;
}
inline ::std::string* MusicTrackFields::release_absolute_path() {
  clear_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_path_;
    absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string title = 2;
inline bool MusicTrackFields::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicTrackFields::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicTrackFields::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicTrackFields::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& MusicTrackFields::title() const {
  return *title_;
}
inline void MusicTrackFields::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MusicTrackFields::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void MusicTrackFields::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* MusicTrackFields::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string artist = 3;
inline bool MusicTrackFields::has_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MusicTrackFields::set_has_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MusicTrackFields::clear_has_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MusicTrackFields::clear_artist() {
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    artist_->clear();
  }
  clear_has_artist();
}
inline const ::std::string& MusicTrackFields::artist() const {
  return *artist_;
}
inline void MusicTrackFields::set_artist(const ::std::string& value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void MusicTrackFields::set_artist(const char* value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void MusicTrackFields::set_artist(const char* value, size_t size) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_artist() {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  return artist_;
}
inline ::std::string* MusicTrackFields::release_artist() {
  clear_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = artist_;
    artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string album_ref = 4;
inline bool MusicTrackFields::has_album_ref() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MusicTrackFields::set_has_album_ref() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MusicTrackFields::clear_has_album_ref() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MusicTrackFields::clear_album_ref() {
  if (album_ref_ != &::google::protobuf::internal::kEmptyString) {
    album_ref_->clear();
  }
  clear_has_album_ref();
}
inline const ::std::string& MusicTrackFields::album_ref() const {
  return *album_ref_;
}
inline void MusicTrackFields::set_album_ref(const ::std::string& value) {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  album_ref_->assign(value);
}
inline void MusicTrackFields::set_album_ref(const char* value) {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  album_ref_->assign(value);
}
inline void MusicTrackFields::set_album_ref(const char* value, size_t size) {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  album_ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_album_ref() {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  return album_ref_;
}
inline ::std::string* MusicTrackFields::release_album_ref() {
  clear_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_ref_;
    album_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 track_number = 5;
inline bool MusicTrackFields::has_track_number() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MusicTrackFields::set_has_track_number() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MusicTrackFields::clear_has_track_number() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MusicTrackFields::clear_track_number() {
  track_number_ = 0;
  clear_has_track_number();
}
inline ::google::protobuf::int32 MusicTrackFields::track_number() const {
  return track_number_;
}
inline void MusicTrackFields::set_track_number(::google::protobuf::int32 value) {
  set_has_track_number();
  track_number_ = value;
}

// optional string genre = 6;
inline bool MusicTrackFields::has_genre() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MusicTrackFields::set_has_genre() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MusicTrackFields::clear_has_genre() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MusicTrackFields::clear_genre() {
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    genre_->clear();
  }
  clear_has_genre();
}
inline const ::std::string& MusicTrackFields::genre() const {
  return *genre_;
}
inline void MusicTrackFields::set_genre(const ::std::string& value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void MusicTrackFields::set_genre(const char* value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void MusicTrackFields::set_genre(const char* value, size_t size) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_genre() {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  return genre_;
}
inline ::std::string* MusicTrackFields::release_genre() {
  clear_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = genre_;
    genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 duration_sec = 7;
inline bool MusicTrackFields::has_duration_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MusicTrackFields::set_has_duration_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MusicTrackFields::clear_has_duration_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MusicTrackFields::clear_duration_sec() {
  duration_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_duration_sec();
}
inline ::google::protobuf::uint64 MusicTrackFields::duration_sec() const {
  return duration_sec_;
}
inline void MusicTrackFields::set_duration_sec(::google::protobuf::uint64 value) {
  set_has_duration_sec();
  duration_sec_ = value;
}

// optional uint64 file_size = 8;
inline bool MusicTrackFields::has_file_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MusicTrackFields::set_has_file_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MusicTrackFields::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MusicTrackFields::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 MusicTrackFields::file_size() const {
  return file_size_;
}
inline void MusicTrackFields::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional string file_format = 9;
inline bool MusicTrackFields::has_file_format() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MusicTrackFields::set_has_file_format() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MusicTrackFields::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MusicTrackFields::clear_file_format() {
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    file_format_->clear();
  }
  clear_has_file_format();
}
inline const ::std::string& MusicTrackFields::file_format() const {
  return *file_format_;
}
inline void MusicTrackFields::set_file_format(const ::std::string& value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void MusicTrackFields::set_file_format(const char* value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void MusicTrackFields::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_file_format() {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  return file_format_;
}
inline ::std::string* MusicTrackFields::release_file_format() {
  clear_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_format_;
    file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 date_time = 10;
inline bool MusicTrackFields::has_date_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MusicTrackFields::set_has_date_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MusicTrackFields::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MusicTrackFields::clear_date_time() {
  date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time();
}
inline ::google::protobuf::uint64 MusicTrackFields::date_time() const {
  return date_time_;
}
inline void MusicTrackFields::set_date_time(::google::protobuf::uint64 value) {
  set_has_date_time();
  date_time_ = value;
}

// optional uint64 date_time_updated = 11;
inline bool MusicTrackFields::has_date_time_updated() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MusicTrackFields::set_has_date_time_updated() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MusicTrackFields::clear_has_date_time_updated() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MusicTrackFields::clear_date_time_updated() {
  date_time_updated_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time_updated();
}
inline ::google::protobuf::uint64 MusicTrackFields::date_time_updated() const {
  return date_time_updated_;
}
inline void MusicTrackFields::set_date_time_updated(::google::protobuf::uint64 value) {
  set_has_date_time_updated();
  date_time_updated_ = value;
}

// optional string album_name = 12;
inline bool MusicTrackFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MusicTrackFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MusicTrackFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MusicTrackFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& MusicTrackFields::album_name() const {
  return *album_name_;
}
inline void MusicTrackFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void MusicTrackFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void MusicTrackFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* MusicTrackFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string album_artist = 13;
inline bool MusicTrackFields::has_album_artist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MusicTrackFields::set_has_album_artist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MusicTrackFields::clear_has_album_artist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MusicTrackFields::clear_album_artist() {
  if (album_artist_ != &::google::protobuf::internal::kEmptyString) {
    album_artist_->clear();
  }
  clear_has_album_artist();
}
inline const ::std::string& MusicTrackFields::album_artist() const {
  return *album_artist_;
}
inline void MusicTrackFields::set_album_artist(const ::std::string& value) {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  album_artist_->assign(value);
}
inline void MusicTrackFields::set_album_artist(const char* value) {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  album_artist_->assign(value);
}
inline void MusicTrackFields::set_album_artist(const char* value, size_t size) {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  album_artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_album_artist() {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  return album_artist_;
}
inline ::std::string* MusicTrackFields::release_album_artist() {
  clear_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_artist_;
    album_artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string checksum = 14;
inline bool MusicTrackFields::has_checksum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MusicTrackFields::set_has_checksum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MusicTrackFields::clear_has_checksum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MusicTrackFields::clear_checksum() {
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    checksum_->clear();
  }
  clear_has_checksum();
}
inline const ::std::string& MusicTrackFields::checksum() const {
  return *checksum_;
}
inline void MusicTrackFields::set_checksum(const ::std::string& value) {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::kEmptyString) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
}
inline void MusicTrackFields::set_checksum(const char* value) {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::kEmptyString) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(value);
}
inline void MusicTrackFields::set_checksum(const char* value, size_t size) {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::kEmptyString) {
    checksum_ = new ::std::string;
  }
  checksum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_checksum() {
  set_has_checksum();
  if (checksum_ == &::google::protobuf::internal::kEmptyString) {
    checksum_ = new ::std::string;
  }
  return checksum_;
}
inline ::std::string* MusicTrackFields::release_checksum() {
  clear_has_checksum();
  if (checksum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = checksum_;
    checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 length = 15;
inline bool MusicTrackFields::has_length() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MusicTrackFields::set_has_length() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MusicTrackFields::clear_has_length() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MusicTrackFields::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 MusicTrackFields::length() const {
  return length_;
}
inline void MusicTrackFields::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// optional string composer = 16;
inline bool MusicTrackFields::has_composer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MusicTrackFields::set_has_composer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MusicTrackFields::clear_has_composer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MusicTrackFields::clear_composer() {
  if (composer_ != &::google::protobuf::internal::kEmptyString) {
    composer_->clear();
  }
  clear_has_composer();
}
inline const ::std::string& MusicTrackFields::composer() const {
  return *composer_;
}
inline void MusicTrackFields::set_composer(const ::std::string& value) {
  set_has_composer();
  if (composer_ == &::google::protobuf::internal::kEmptyString) {
    composer_ = new ::std::string;
  }
  composer_->assign(value);
}
inline void MusicTrackFields::set_composer(const char* value) {
  set_has_composer();
  if (composer_ == &::google::protobuf::internal::kEmptyString) {
    composer_ = new ::std::string;
  }
  composer_->assign(value);
}
inline void MusicTrackFields::set_composer(const char* value, size_t size) {
  set_has_composer();
  if (composer_ == &::google::protobuf::internal::kEmptyString) {
    composer_ = new ::std::string;
  }
  composer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_composer() {
  set_has_composer();
  if (composer_ == &::google::protobuf::internal::kEmptyString) {
    composer_ = new ::std::string;
  }
  return composer_;
}
inline ::std::string* MusicTrackFields::release_composer() {
  clear_has_composer();
  if (composer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = composer_;
    composer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string disk_number = 17;
inline bool MusicTrackFields::has_disk_number() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MusicTrackFields::set_has_disk_number() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MusicTrackFields::clear_has_disk_number() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MusicTrackFields::clear_disk_number() {
  if (disk_number_ != &::google::protobuf::internal::kEmptyString) {
    disk_number_->clear();
  }
  clear_has_disk_number();
}
inline const ::std::string& MusicTrackFields::disk_number() const {
  return *disk_number_;
}
inline void MusicTrackFields::set_disk_number(const ::std::string& value) {
  set_has_disk_number();
  if (disk_number_ == &::google::protobuf::internal::kEmptyString) {
    disk_number_ = new ::std::string;
  }
  disk_number_->assign(value);
}
inline void MusicTrackFields::set_disk_number(const char* value) {
  set_has_disk_number();
  if (disk_number_ == &::google::protobuf::internal::kEmptyString) {
    disk_number_ = new ::std::string;
  }
  disk_number_->assign(value);
}
inline void MusicTrackFields::set_disk_number(const char* value, size_t size) {
  set_has_disk_number();
  if (disk_number_ == &::google::protobuf::internal::kEmptyString) {
    disk_number_ = new ::std::string;
  }
  disk_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_disk_number() {
  set_has_disk_number();
  if (disk_number_ == &::google::protobuf::internal::kEmptyString) {
    disk_number_ = new ::std::string;
  }
  return disk_number_;
}
inline ::std::string* MusicTrackFields::release_disk_number() {
  clear_has_disk_number();
  if (disk_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = disk_number_;
    disk_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string year = 18;
inline bool MusicTrackFields::has_year() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MusicTrackFields::set_has_year() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MusicTrackFields::clear_has_year() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MusicTrackFields::clear_year() {
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    year_->clear();
  }
  clear_has_year();
}
inline const ::std::string& MusicTrackFields::year() const {
  return *year_;
}
inline void MusicTrackFields::set_year(const ::std::string& value) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(value);
}
inline void MusicTrackFields::set_year(const char* value) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(value);
}
inline void MusicTrackFields::set_year(const char* value, size_t size) {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  year_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicTrackFields::mutable_year() {
  set_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    year_ = new ::std::string;
  }
  return year_;
}
inline ::std::string* MusicTrackFields::release_year() {
  clear_has_year();
  if (year_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = year_;
    year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MusicAlbumFields

// required string album_name = 1;
inline bool MusicAlbumFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicAlbumFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicAlbumFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicAlbumFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& MusicAlbumFields::album_name() const {
  return *album_name_;
}
inline void MusicAlbumFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void MusicAlbumFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void MusicAlbumFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicAlbumFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* MusicAlbumFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string album_artist = 2;
inline bool MusicAlbumFields::has_album_artist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicAlbumFields::set_has_album_artist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicAlbumFields::clear_has_album_artist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicAlbumFields::clear_album_artist() {
  if (album_artist_ != &::google::protobuf::internal::kEmptyString) {
    album_artist_->clear();
  }
  clear_has_album_artist();
}
inline const ::std::string& MusicAlbumFields::album_artist() const {
  return *album_artist_;
}
inline void MusicAlbumFields::set_album_artist(const ::std::string& value) {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  album_artist_->assign(value);
}
inline void MusicAlbumFields::set_album_artist(const char* value) {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  album_artist_->assign(value);
}
inline void MusicAlbumFields::set_album_artist(const char* value, size_t size) {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  album_artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicAlbumFields::mutable_album_artist() {
  set_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    album_artist_ = new ::std::string;
  }
  return album_artist_;
}
inline ::std::string* MusicAlbumFields::release_album_artist() {
  clear_has_album_artist();
  if (album_artist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_artist_;
    album_artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string album_thumbnail = 3;
inline bool MusicAlbumFields::has_album_thumbnail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MusicAlbumFields::set_has_album_thumbnail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MusicAlbumFields::clear_has_album_thumbnail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MusicAlbumFields::clear_album_thumbnail() {
  if (album_thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_->clear();
  }
  clear_has_album_thumbnail();
}
inline const ::std::string& MusicAlbumFields::album_thumbnail() const {
  return *album_thumbnail_;
}
inline void MusicAlbumFields::set_album_thumbnail(const ::std::string& value) {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  album_thumbnail_->assign(value);
}
inline void MusicAlbumFields::set_album_thumbnail(const char* value) {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  album_thumbnail_->assign(value);
}
inline void MusicAlbumFields::set_album_thumbnail(const char* value, size_t size) {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  album_thumbnail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicAlbumFields::mutable_album_thumbnail() {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  return album_thumbnail_;
}
inline ::std::string* MusicAlbumFields::release_album_thumbnail() {
  clear_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_thumbnail_;
    album_thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 album_trackcount = 4;
inline bool MusicAlbumFields::has_album_trackcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MusicAlbumFields::set_has_album_trackcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MusicAlbumFields::clear_has_album_trackcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MusicAlbumFields::clear_album_trackcount() {
  album_trackcount_ = 0u;
  clear_has_album_trackcount();
}
inline ::google::protobuf::uint32 MusicAlbumFields::album_trackcount() const {
  return album_trackcount_;
}
inline void MusicAlbumFields::set_album_trackcount(::google::protobuf::uint32 value) {
  set_has_album_trackcount();
  album_trackcount_ = value;
}

// optional uint64 album_tracksize = 5;
inline bool MusicAlbumFields::has_album_tracksize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MusicAlbumFields::set_has_album_tracksize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MusicAlbumFields::clear_has_album_tracksize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MusicAlbumFields::clear_album_tracksize() {
  album_tracksize_ = GOOGLE_ULONGLONG(0);
  clear_has_album_tracksize();
}
inline ::google::protobuf::uint64 MusicAlbumFields::album_tracksize() const {
  return album_tracksize_;
}
inline void MusicAlbumFields::set_album_tracksize(::google::protobuf::uint64 value) {
  set_has_album_tracksize();
  album_tracksize_ = value;
}

// -------------------------------------------------------------------

// MusicArtistFields

// required string artist = 1;
inline bool MusicArtistFields::has_artist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicArtistFields::set_has_artist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicArtistFields::clear_has_artist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicArtistFields::clear_artist() {
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    artist_->clear();
  }
  clear_has_artist();
}
inline const ::std::string& MusicArtistFields::artist() const {
  return *artist_;
}
inline void MusicArtistFields::set_artist(const ::std::string& value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void MusicArtistFields::set_artist(const char* value) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(value);
}
inline void MusicArtistFields::set_artist(const char* value, size_t size) {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  artist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicArtistFields::mutable_artist() {
  set_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    artist_ = new ::std::string;
  }
  return artist_;
}
inline ::std::string* MusicArtistFields::release_artist() {
  clear_has_artist();
  if (artist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = artist_;
    artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 album_count = 2;
inline bool MusicArtistFields::has_album_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicArtistFields::set_has_album_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicArtistFields::clear_has_album_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicArtistFields::clear_album_count() {
  album_count_ = 0u;
  clear_has_album_count();
}
inline ::google::protobuf::uint32 MusicArtistFields::album_count() const {
  return album_count_;
}
inline void MusicArtistFields::set_album_count(::google::protobuf::uint32 value) {
  set_has_album_count();
  album_count_ = value;
}

// required uint32 track_count = 3;
inline bool MusicArtistFields::has_track_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MusicArtistFields::set_has_track_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MusicArtistFields::clear_has_track_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MusicArtistFields::clear_track_count() {
  track_count_ = 0u;
  clear_has_track_count();
}
inline ::google::protobuf::uint32 MusicArtistFields::track_count() const {
  return track_count_;
}
inline void MusicArtistFields::set_track_count(::google::protobuf::uint32 value) {
  set_has_track_count();
  track_count_ = value;
}

// required uint64 item_total_size = 4;
inline bool MusicArtistFields::has_item_total_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MusicArtistFields::set_has_item_total_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MusicArtistFields::clear_has_item_total_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MusicArtistFields::clear_item_total_size() {
  item_total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_item_total_size();
}
inline ::google::protobuf::uint64 MusicArtistFields::item_total_size() const {
  return item_total_size_;
}
inline void MusicArtistFields::set_item_total_size(::google::protobuf::uint64 value) {
  set_has_item_total_size();
  item_total_size_ = value;
}

// -------------------------------------------------------------------

// MusicGenreFields

// required string genre = 1;
inline bool MusicGenreFields::has_genre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MusicGenreFields::set_has_genre() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MusicGenreFields::clear_has_genre() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MusicGenreFields::clear_genre() {
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    genre_->clear();
  }
  clear_has_genre();
}
inline const ::std::string& MusicGenreFields::genre() const {
  return *genre_;
}
inline void MusicGenreFields::set_genre(const ::std::string& value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void MusicGenreFields::set_genre(const char* value) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(value);
}
inline void MusicGenreFields::set_genre(const char* value, size_t size) {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  genre_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MusicGenreFields::mutable_genre() {
  set_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    genre_ = new ::std::string;
  }
  return genre_;
}
inline ::std::string* MusicGenreFields::release_genre() {
  clear_has_genre();
  if (genre_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = genre_;
    genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 track_count = 2;
inline bool MusicGenreFields::has_track_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MusicGenreFields::set_has_track_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MusicGenreFields::clear_has_track_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MusicGenreFields::clear_track_count() {
  track_count_ = 0u;
  clear_has_track_count();
}
inline ::google::protobuf::uint32 MusicGenreFields::track_count() const {
  return track_count_;
}
inline void MusicGenreFields::set_track_count(::google::protobuf::uint32 value) {
  set_has_track_count();
  track_count_ = value;
}

// required uint32 album_count = 3;
inline bool MusicGenreFields::has_album_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MusicGenreFields::set_has_album_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MusicGenreFields::clear_has_album_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MusicGenreFields::clear_album_count() {
  album_count_ = 0u;
  clear_has_album_count();
}
inline ::google::protobuf::uint32 MusicGenreFields::album_count() const {
  return album_count_;
}
inline void MusicGenreFields::set_album_count(::google::protobuf::uint32 value) {
  set_has_album_count();
  album_count_ = value;
}

// required uint64 item_total_size = 4;
inline bool MusicGenreFields::has_item_total_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MusicGenreFields::set_has_item_total_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MusicGenreFields::clear_has_item_total_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MusicGenreFields::clear_item_total_size() {
  item_total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_item_total_size();
}
inline ::google::protobuf::uint64 MusicGenreFields::item_total_size() const {
  return item_total_size_;
}
inline void MusicGenreFields::set_item_total_size(::google::protobuf::uint64 value) {
  set_has_item_total_size();
  item_total_size_ = value;
}

// -------------------------------------------------------------------

// VideoItemFields

// required string absolute_path = 1;
inline bool VideoItemFields::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoItemFields::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoItemFields::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoItemFields::clear_absolute_path() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    absolute_path_->clear();
  }
  clear_has_absolute_path();
}
inline const ::std::string& VideoItemFields::absolute_path() const {
  return *absolute_path_;
}
inline void VideoItemFields::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void VideoItemFields::set_absolute_path(const char* value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void VideoItemFields::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoItemFields::mutable_absolute_path() {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  return absolute_path_;
}
inline ::std::string* VideoItemFields::release_absolute_path() {
  clear_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_path_;
    absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string title = 2;
inline bool VideoItemFields::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoItemFields::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoItemFields::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoItemFields::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& VideoItemFields::title() const {
  return *title_;
}
inline void VideoItemFields::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void VideoItemFields::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void VideoItemFields::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoItemFields::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* VideoItemFields::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string thumbnail = 3;
inline bool VideoItemFields::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoItemFields::set_has_thumbnail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoItemFields::clear_has_thumbnail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoItemFields::clear_thumbnail() {
  if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    thumbnail_->clear();
  }
  clear_has_thumbnail();
}
inline const ::std::string& VideoItemFields::thumbnail() const {
  return *thumbnail_;
}
inline void VideoItemFields::set_thumbnail(const ::std::string& value) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(value);
}
inline void VideoItemFields::set_thumbnail(const char* value) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(value);
}
inline void VideoItemFields::set_thumbnail(const char* value, size_t size) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoItemFields::mutable_thumbnail() {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  return thumbnail_;
}
inline ::std::string* VideoItemFields::release_thumbnail() {
  clear_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thumbnail_;
    thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string album_name = 4;
inline bool VideoItemFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoItemFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoItemFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoItemFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& VideoItemFields::album_name() const {
  return *album_name_;
}
inline void VideoItemFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void VideoItemFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void VideoItemFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoItemFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* VideoItemFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 duration_sec = 5;
inline bool VideoItemFields::has_duration_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoItemFields::set_has_duration_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoItemFields::clear_has_duration_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoItemFields::clear_duration_sec() {
  duration_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_duration_sec();
}
inline ::google::protobuf::uint64 VideoItemFields::duration_sec() const {
  return duration_sec_;
}
inline void VideoItemFields::set_duration_sec(::google::protobuf::uint64 value) {
  set_has_duration_sec();
  duration_sec_ = value;
}

// optional uint64 file_size = 6;
inline bool VideoItemFields::has_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoItemFields::set_has_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoItemFields::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoItemFields::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 VideoItemFields::file_size() const {
  return file_size_;
}
inline void VideoItemFields::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional uint64 date_time = 7;
inline bool VideoItemFields::has_date_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoItemFields::set_has_date_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoItemFields::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoItemFields::clear_date_time() {
  date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time();
}
inline ::google::protobuf::uint64 VideoItemFields::date_time() const {
  return date_time_;
}
inline void VideoItemFields::set_date_time(::google::protobuf::uint64 value) {
  set_has_date_time();
  date_time_ = value;
}

// optional string file_format = 8;
inline bool VideoItemFields::has_file_format() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoItemFields::set_has_file_format() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoItemFields::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoItemFields::clear_file_format() {
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    file_format_->clear();
  }
  clear_has_file_format();
}
inline const ::std::string& VideoItemFields::file_format() const {
  return *file_format_;
}
inline void VideoItemFields::set_file_format(const ::std::string& value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void VideoItemFields::set_file_format(const char* value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void VideoItemFields::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoItemFields::mutable_file_format() {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  return file_format_;
}
inline ::std::string* VideoItemFields::release_file_format() {
  clear_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_format_;
    file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 date_time_updated = 9;
inline bool VideoItemFields::has_date_time_updated() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoItemFields::set_has_date_time_updated() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoItemFields::clear_has_date_time_updated() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoItemFields::clear_date_time_updated() {
  date_time_updated_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time_updated();
}
inline ::google::protobuf::uint64 VideoItemFields::date_time_updated() const {
  return date_time_updated_;
}
inline void VideoItemFields::set_date_time_updated(::google::protobuf::uint64 value) {
  set_has_date_time_updated();
  date_time_updated_ = value;
}

// -------------------------------------------------------------------

// VideoAlbumFields

// required string collection_id_ref = 1;
inline bool VideoAlbumFields::has_collection_id_ref() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoAlbumFields::set_has_collection_id_ref() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoAlbumFields::clear_has_collection_id_ref() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoAlbumFields::clear_collection_id_ref() {
  if (collection_id_ref_ != &::google::protobuf::internal::kEmptyString) {
    collection_id_ref_->clear();
  }
  clear_has_collection_id_ref();
}
inline const ::std::string& VideoAlbumFields::collection_id_ref() const {
  return *collection_id_ref_;
}
inline void VideoAlbumFields::set_collection_id_ref(const ::std::string& value) {
  set_has_collection_id_ref();
  if (collection_id_ref_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ref_ = new ::std::string;
  }
  collection_id_ref_->assign(value);
}
inline void VideoAlbumFields::set_collection_id_ref(const char* value) {
  set_has_collection_id_ref();
  if (collection_id_ref_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ref_ = new ::std::string;
  }
  collection_id_ref_->assign(value);
}
inline void VideoAlbumFields::set_collection_id_ref(const char* value, size_t size) {
  set_has_collection_id_ref();
  if (collection_id_ref_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ref_ = new ::std::string;
  }
  collection_id_ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoAlbumFields::mutable_collection_id_ref() {
  set_has_collection_id_ref();
  if (collection_id_ref_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ref_ = new ::std::string;
  }
  return collection_id_ref_;
}
inline ::std::string* VideoAlbumFields::release_collection_id_ref() {
  clear_has_collection_id_ref();
  if (collection_id_ref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collection_id_ref_;
    collection_id_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string album_name = 2;
inline bool VideoAlbumFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoAlbumFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoAlbumFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoAlbumFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& VideoAlbumFields::album_name() const {
  return *album_name_;
}
inline void VideoAlbumFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void VideoAlbumFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void VideoAlbumFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoAlbumFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* VideoAlbumFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 item_count = 3;
inline bool VideoAlbumFields::has_item_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoAlbumFields::set_has_item_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoAlbumFields::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoAlbumFields::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 VideoAlbumFields::item_count() const {
  return item_count_;
}
inline void VideoAlbumFields::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// required uint64 item_total_size = 4;
inline bool VideoAlbumFields::has_item_total_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoAlbumFields::set_has_item_total_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoAlbumFields::clear_has_item_total_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoAlbumFields::clear_item_total_size() {
  item_total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_item_total_size();
}
inline ::google::protobuf::uint64 VideoAlbumFields::item_total_size() const {
  return item_total_size_;
}
inline void VideoAlbumFields::set_item_total_size(::google::protobuf::uint64 value) {
  set_has_item_total_size();
  item_total_size_ = value;
}

// -------------------------------------------------------------------

// ImageItemFields

// required string absolute_path = 1;
inline bool ImageItemFields::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageItemFields::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageItemFields::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageItemFields::clear_absolute_path() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    absolute_path_->clear();
  }
  clear_has_absolute_path();
}
inline const ::std::string& ImageItemFields::absolute_path() const {
  return *absolute_path_;
}
inline void ImageItemFields::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void ImageItemFields::set_absolute_path(const char* value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void ImageItemFields::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_absolute_path() {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  return absolute_path_;
}
inline ::std::string* ImageItemFields::release_absolute_path() {
  clear_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_path_;
    absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string title = 2;
inline bool ImageItemFields::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageItemFields::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageItemFields::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageItemFields::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ImageItemFields::title() const {
  return *title_;
}
inline void ImageItemFields::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ImageItemFields::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ImageItemFields::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ImageItemFields::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string thumbnail = 3;
inline bool ImageItemFields::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageItemFields::set_has_thumbnail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageItemFields::clear_has_thumbnail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageItemFields::clear_thumbnail() {
  if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    thumbnail_->clear();
  }
  clear_has_thumbnail();
}
inline const ::std::string& ImageItemFields::thumbnail() const {
  return *thumbnail_;
}
inline void ImageItemFields::set_thumbnail(const ::std::string& value) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(value);
}
inline void ImageItemFields::set_thumbnail(const char* value) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(value);
}
inline void ImageItemFields::set_thumbnail(const char* value, size_t size) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_thumbnail() {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  return thumbnail_;
}
inline ::std::string* ImageItemFields::release_thumbnail() {
  clear_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thumbnail_;
    thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string album_name = 4;
inline bool ImageItemFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageItemFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageItemFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageItemFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& ImageItemFields::album_name() const {
  return *album_name_;
}
inline void ImageItemFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void ImageItemFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void ImageItemFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* ImageItemFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 date_time = 5;
inline bool ImageItemFields::has_date_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageItemFields::set_has_date_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageItemFields::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageItemFields::clear_date_time() {
  date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time();
}
inline ::google::protobuf::uint64 ImageItemFields::date_time() const {
  return date_time_;
}
inline void ImageItemFields::set_date_time(::google::protobuf::uint64 value) {
  set_has_date_time();
  date_time_ = value;
}

// optional uint64 file_size = 6;
inline bool ImageItemFields::has_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImageItemFields::set_has_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImageItemFields::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImageItemFields::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 ImageItemFields::file_size() const {
  return file_size_;
}
inline void ImageItemFields::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional string file_format = 9;
inline bool ImageItemFields::has_file_format() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImageItemFields::set_has_file_format() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImageItemFields::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImageItemFields::clear_file_format() {
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    file_format_->clear();
  }
  clear_has_file_format();
}
inline const ::std::string& ImageItemFields::file_format() const {
  return *file_format_;
}
inline void ImageItemFields::set_file_format(const ::std::string& value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void ImageItemFields::set_file_format(const char* value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void ImageItemFields::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_file_format() {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  return file_format_;
}
inline ::std::string* ImageItemFields::release_file_format() {
  clear_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_format_;
    file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 date_time_updated = 10;
inline bool ImageItemFields::has_date_time_updated() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImageItemFields::set_has_date_time_updated() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImageItemFields::clear_has_date_time_updated() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImageItemFields::clear_date_time_updated() {
  date_time_updated_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time_updated();
}
inline ::google::protobuf::uint64 ImageItemFields::date_time_updated() const {
  return date_time_updated_;
}
inline void ImageItemFields::set_date_time_updated(::google::protobuf::uint64 value) {
  set_has_date_time_updated();
  date_time_updated_ = value;
}

// optional string dimensions = 11;
inline bool ImageItemFields::has_dimensions() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImageItemFields::set_has_dimensions() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImageItemFields::clear_has_dimensions() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImageItemFields::clear_dimensions() {
  if (dimensions_ != &::google::protobuf::internal::kEmptyString) {
    dimensions_->clear();
  }
  clear_has_dimensions();
}
inline const ::std::string& ImageItemFields::dimensions() const {
  return *dimensions_;
}
inline void ImageItemFields::set_dimensions(const ::std::string& value) {
  set_has_dimensions();
  if (dimensions_ == &::google::protobuf::internal::kEmptyString) {
    dimensions_ = new ::std::string;
  }
  dimensions_->assign(value);
}
inline void ImageItemFields::set_dimensions(const char* value) {
  set_has_dimensions();
  if (dimensions_ == &::google::protobuf::internal::kEmptyString) {
    dimensions_ = new ::std::string;
  }
  dimensions_->assign(value);
}
inline void ImageItemFields::set_dimensions(const char* value, size_t size) {
  set_has_dimensions();
  if (dimensions_ == &::google::protobuf::internal::kEmptyString) {
    dimensions_ = new ::std::string;
  }
  dimensions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_dimensions() {
  set_has_dimensions();
  if (dimensions_ == &::google::protobuf::internal::kEmptyString) {
    dimensions_ = new ::std::string;
  }
  return dimensions_;
}
inline ::std::string* ImageItemFields::release_dimensions() {
  clear_has_dimensions();
  if (dimensions_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dimensions_;
    dimensions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 orientation = 12;
inline bool ImageItemFields::has_orientation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImageItemFields::set_has_orientation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImageItemFields::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImageItemFields::clear_orientation() {
  orientation_ = 0u;
  clear_has_orientation();
}
inline ::google::protobuf::uint32 ImageItemFields::orientation() const {
  return orientation_;
}
inline void ImageItemFields::set_orientation(::google::protobuf::uint32 value) {
  set_has_orientation();
  orientation_ = value;
}

// optional string comp_id = 13;
inline bool ImageItemFields::has_comp_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImageItemFields::set_has_comp_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImageItemFields::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImageItemFields::clear_comp_id() {
  if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
    comp_id_->clear();
  }
  clear_has_comp_id();
}
inline const ::std::string& ImageItemFields::comp_id() const {
  return *comp_id_;
}
inline void ImageItemFields::set_comp_id(const ::std::string& value) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(value);
}
inline void ImageItemFields::set_comp_id(const char* value) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(value);
}
inline void ImageItemFields::set_comp_id(const char* value, size_t size) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_comp_id() {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  return comp_id_;
}
inline ::std::string* ImageItemFields::release_comp_id() {
  clear_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comp_id_;
    comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 special_format_flag = 14;
inline bool ImageItemFields::has_special_format_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImageItemFields::set_has_special_format_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImageItemFields::clear_has_special_format_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImageItemFields::clear_special_format_flag() {
  special_format_flag_ = 0u;
  clear_has_special_format_flag();
}
inline ::google::protobuf::uint32 ImageItemFields::special_format_flag() const {
  return special_format_flag_;
}
inline void ImageItemFields::set_special_format_flag(::google::protobuf::uint32 value) {
  set_has_special_format_flag();
  special_format_flag_ = value;
}

// optional string album_ref = 15;
inline bool ImageItemFields::has_album_ref() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImageItemFields::set_has_album_ref() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImageItemFields::clear_has_album_ref() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImageItemFields::clear_album_ref() {
  if (album_ref_ != &::google::protobuf::internal::kEmptyString) {
    album_ref_->clear();
  }
  clear_has_album_ref();
}
inline const ::std::string& ImageItemFields::album_ref() const {
  return *album_ref_;
}
inline void ImageItemFields::set_album_ref(const ::std::string& value) {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  album_ref_->assign(value);
}
inline void ImageItemFields::set_album_ref(const char* value) {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  album_ref_->assign(value);
}
inline void ImageItemFields::set_album_ref(const char* value, size_t size) {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  album_ref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageItemFields::mutable_album_ref() {
  set_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    album_ref_ = new ::std::string;
  }
  return album_ref_;
}
inline ::std::string* ImageItemFields::release_album_ref() {
  clear_has_album_ref();
  if (album_ref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_ref_;
    album_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ImageAlbumFields

// required string album_name = 2;
inline bool ImageAlbumFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageAlbumFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageAlbumFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageAlbumFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& ImageAlbumFields::album_name() const {
  return *album_name_;
}
inline void ImageAlbumFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void ImageAlbumFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void ImageAlbumFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAlbumFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* ImageAlbumFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 item_count = 3;
inline bool ImageAlbumFields::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageAlbumFields::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageAlbumFields::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageAlbumFields::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 ImageAlbumFields::item_count() const {
  return item_count_;
}
inline void ImageAlbumFields::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// optional uint64 item_total_size = 4;
inline bool ImageAlbumFields::has_item_total_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageAlbumFields::set_has_item_total_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageAlbumFields::clear_has_item_total_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageAlbumFields::clear_item_total_size() {
  item_total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_item_total_size();
}
inline ::google::protobuf::uint64 ImageAlbumFields::item_total_size() const {
  return item_total_size_;
}
inline void ImageAlbumFields::set_item_total_size(::google::protobuf::uint64 value) {
  set_has_item_total_size();
  item_total_size_ = value;
}

// optional string album_thumbnail = 5;
inline bool ImageAlbumFields::has_album_thumbnail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImageAlbumFields::set_has_album_thumbnail() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImageAlbumFields::clear_has_album_thumbnail() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImageAlbumFields::clear_album_thumbnail() {
  if (album_thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_->clear();
  }
  clear_has_album_thumbnail();
}
inline const ::std::string& ImageAlbumFields::album_thumbnail() const {
  return *album_thumbnail_;
}
inline void ImageAlbumFields::set_album_thumbnail(const ::std::string& value) {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  album_thumbnail_->assign(value);
}
inline void ImageAlbumFields::set_album_thumbnail(const char* value) {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  album_thumbnail_->assign(value);
}
inline void ImageAlbumFields::set_album_thumbnail(const char* value, size_t size) {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  album_thumbnail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ImageAlbumFields::mutable_album_thumbnail() {
  set_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    album_thumbnail_ = new ::std::string;
  }
  return album_thumbnail_;
}
inline ::std::string* ImageAlbumFields::release_album_thumbnail() {
  clear_has_album_thumbnail();
  if (album_thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_thumbnail_;
    album_thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 timestamp = 6;
inline bool ImageAlbumFields::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ImageAlbumFields::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ImageAlbumFields::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ImageAlbumFields::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 ImageAlbumFields::timestamp() const {
  return timestamp_;
}
inline void ImageAlbumFields::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// PlaylistFields

// required string playlist_name = 1;
inline bool PlaylistFields::has_playlist_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlaylistFields::set_has_playlist_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlaylistFields::clear_has_playlist_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlaylistFields::clear_playlist_name() {
  if (playlist_name_ != &::google::protobuf::internal::kEmptyString) {
    playlist_name_->clear();
  }
  clear_has_playlist_name();
}
inline const ::std::string& PlaylistFields::playlist_name() const {
  return *playlist_name_;
}
inline void PlaylistFields::set_playlist_name(const ::std::string& value) {
  set_has_playlist_name();
  if (playlist_name_ == &::google::protobuf::internal::kEmptyString) {
    playlist_name_ = new ::std::string;
  }
  playlist_name_->assign(value);
}
inline void PlaylistFields::set_playlist_name(const char* value) {
  set_has_playlist_name();
  if (playlist_name_ == &::google::protobuf::internal::kEmptyString) {
    playlist_name_ = new ::std::string;
  }
  playlist_name_->assign(value);
}
inline void PlaylistFields::set_playlist_name(const char* value, size_t size) {
  set_has_playlist_name();
  if (playlist_name_ == &::google::protobuf::internal::kEmptyString) {
    playlist_name_ = new ::std::string;
  }
  playlist_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlaylistFields::mutable_playlist_name() {
  set_has_playlist_name();
  if (playlist_name_ == &::google::protobuf::internal::kEmptyString) {
    playlist_name_ = new ::std::string;
  }
  return playlist_name_;
}
inline ::std::string* PlaylistFields::release_playlist_name() {
  clear_has_playlist_name();
  if (playlist_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playlist_name_;
    playlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string content_refs = 2;
inline int PlaylistFields::content_refs_size() const {
  return content_refs_.size();
}
inline void PlaylistFields::clear_content_refs() {
  content_refs_.Clear();
}
inline const ::std::string& PlaylistFields::content_refs(int index) const {
  return content_refs_.Get(index);
}
inline ::std::string* PlaylistFields::mutable_content_refs(int index) {
  return content_refs_.Mutable(index);
}
inline void PlaylistFields::set_content_refs(int index, const ::std::string& value) {
  content_refs_.Mutable(index)->assign(value);
}
inline void PlaylistFields::set_content_refs(int index, const char* value) {
  content_refs_.Mutable(index)->assign(value);
}
inline void PlaylistFields::set_content_refs(int index, const char* value, size_t size) {
  content_refs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlaylistFields::add_content_refs() {
  return content_refs_.Add();
}
inline void PlaylistFields::add_content_refs(const ::std::string& value) {
  content_refs_.Add()->assign(value);
}
inline void PlaylistFields::add_content_refs(const char* value) {
  content_refs_.Add()->assign(value);
}
inline void PlaylistFields::add_content_refs(const char* value, size_t size) {
  content_refs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PlaylistFields::content_refs() const {
  return content_refs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PlaylistFields::mutable_content_refs() {
  return &content_refs_;
}

// -------------------------------------------------------------------

// ContentDirectoryObject

// required string object_id = 1;
inline bool ContentDirectoryObject::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentDirectoryObject::set_has_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContentDirectoryObject::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContentDirectoryObject::clear_object_id() {
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    object_id_->clear();
  }
  clear_has_object_id();
}
inline const ::std::string& ContentDirectoryObject::object_id() const {
  return *object_id_;
}
inline void ContentDirectoryObject::set_object_id(const ::std::string& value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void ContentDirectoryObject::set_object_id(const char* value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void ContentDirectoryObject::set_object_id(const char* value, size_t size) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentDirectoryObject::mutable_object_id() {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  return object_id_;
}
inline ::std::string* ContentDirectoryObject::release_object_id() {
  clear_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_id_;
    object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string optional_fields = 2;
inline int ContentDirectoryObject::optional_fields_size() const {
  return optional_fields_.size();
}
inline void ContentDirectoryObject::clear_optional_fields() {
  optional_fields_.Clear();
}
inline const ::std::string& ContentDirectoryObject::optional_fields(int index) const {
  return optional_fields_.Get(index);
}
inline ::std::string* ContentDirectoryObject::mutable_optional_fields(int index) {
  return optional_fields_.Mutable(index);
}
inline void ContentDirectoryObject::set_optional_fields(int index, const ::std::string& value) {
  optional_fields_.Mutable(index)->assign(value);
}
inline void ContentDirectoryObject::set_optional_fields(int index, const char* value) {
  optional_fields_.Mutable(index)->assign(value);
}
inline void ContentDirectoryObject::set_optional_fields(int index, const char* value, size_t size) {
  optional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ContentDirectoryObject::add_optional_fields() {
  return optional_fields_.Add();
}
inline void ContentDirectoryObject::add_optional_fields(const ::std::string& value) {
  optional_fields_.Add()->assign(value);
}
inline void ContentDirectoryObject::add_optional_fields(const char* value) {
  optional_fields_.Add()->assign(value);
}
inline void ContentDirectoryObject::add_optional_fields(const char* value, size_t size) {
  optional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ContentDirectoryObject::optional_fields() const {
  return optional_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ContentDirectoryObject::mutable_optional_fields() {
  return &optional_fields_;
}

// required .media_metadata.MediaSource_t source = 3;
inline bool ContentDirectoryObject::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentDirectoryObject::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContentDirectoryObject::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContentDirectoryObject::clear_source() {
  source_ = 1;
  clear_has_source();
}
inline media_metadata::MediaSource_t ContentDirectoryObject::source() const {
  return static_cast< media_metadata::MediaSource_t >(source_);
}
inline void ContentDirectoryObject::set_source(media_metadata::MediaSource_t value) {
  GOOGLE_DCHECK(media_metadata::MediaSource_t_IsValid(value));
  set_has_source();
  source_ = value;
}

// optional .media_metadata.MusicTrackFields music_track = 4;
inline bool ContentDirectoryObject::has_music_track() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentDirectoryObject::set_has_music_track() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContentDirectoryObject::clear_has_music_track() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContentDirectoryObject::clear_music_track() {
  if (music_track_ != NULL) music_track_->::media_metadata::MusicTrackFields::Clear();
  clear_has_music_track();
}
inline const ::media_metadata::MusicTrackFields& ContentDirectoryObject::music_track() const {
  return music_track_ != NULL ? *music_track_ : *default_instance_->music_track_;
}
inline ::media_metadata::MusicTrackFields* ContentDirectoryObject::mutable_music_track() {
  set_has_music_track();
  if (music_track_ == NULL) music_track_ = new ::media_metadata::MusicTrackFields;
  return music_track_;
}
inline ::media_metadata::MusicTrackFields* ContentDirectoryObject::release_music_track() {
  clear_has_music_track();
  ::media_metadata::MusicTrackFields* temp = music_track_;
  music_track_ = NULL;
  return temp;
}

// optional .media_metadata.MusicAlbumFields music_album = 5;
inline bool ContentDirectoryObject::has_music_album() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentDirectoryObject::set_has_music_album() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContentDirectoryObject::clear_has_music_album() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContentDirectoryObject::clear_music_album() {
  if (music_album_ != NULL) music_album_->::media_metadata::MusicAlbumFields::Clear();
  clear_has_music_album();
}
inline const ::media_metadata::MusicAlbumFields& ContentDirectoryObject::music_album() const {
  return music_album_ != NULL ? *music_album_ : *default_instance_->music_album_;
}
inline ::media_metadata::MusicAlbumFields* ContentDirectoryObject::mutable_music_album() {
  set_has_music_album();
  if (music_album_ == NULL) music_album_ = new ::media_metadata::MusicAlbumFields;
  return music_album_;
}
inline ::media_metadata::MusicAlbumFields* ContentDirectoryObject::release_music_album() {
  clear_has_music_album();
  ::media_metadata::MusicAlbumFields* temp = music_album_;
  music_album_ = NULL;
  return temp;
}

// optional .media_metadata.VideoItemFields video_item = 6;
inline bool ContentDirectoryObject::has_video_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ContentDirectoryObject::set_has_video_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ContentDirectoryObject::clear_has_video_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ContentDirectoryObject::clear_video_item() {
  if (video_item_ != NULL) video_item_->::media_metadata::VideoItemFields::Clear();
  clear_has_video_item();
}
inline const ::media_metadata::VideoItemFields& ContentDirectoryObject::video_item() const {
  return video_item_ != NULL ? *video_item_ : *default_instance_->video_item_;
}
inline ::media_metadata::VideoItemFields* ContentDirectoryObject::mutable_video_item() {
  set_has_video_item();
  if (video_item_ == NULL) video_item_ = new ::media_metadata::VideoItemFields;
  return video_item_;
}
inline ::media_metadata::VideoItemFields* ContentDirectoryObject::release_video_item() {
  clear_has_video_item();
  ::media_metadata::VideoItemFields* temp = video_item_;
  video_item_ = NULL;
  return temp;
}

// optional .media_metadata.ImageItemFields photo_item = 7;
inline bool ContentDirectoryObject::has_photo_item() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ContentDirectoryObject::set_has_photo_item() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ContentDirectoryObject::clear_has_photo_item() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ContentDirectoryObject::clear_photo_item() {
  if (photo_item_ != NULL) photo_item_->::media_metadata::ImageItemFields::Clear();
  clear_has_photo_item();
}
inline const ::media_metadata::ImageItemFields& ContentDirectoryObject::photo_item() const {
  return photo_item_ != NULL ? *photo_item_ : *default_instance_->photo_item_;
}
inline ::media_metadata::ImageItemFields* ContentDirectoryObject::mutable_photo_item() {
  set_has_photo_item();
  if (photo_item_ == NULL) photo_item_ = new ::media_metadata::ImageItemFields;
  return photo_item_;
}
inline ::media_metadata::ImageItemFields* ContentDirectoryObject::release_photo_item() {
  clear_has_photo_item();
  ::media_metadata::ImageItemFields* temp = photo_item_;
  photo_item_ = NULL;
  return temp;
}

// optional .media_metadata.PlaylistFields playlist = 8;
inline bool ContentDirectoryObject::has_playlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ContentDirectoryObject::set_has_playlist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ContentDirectoryObject::clear_has_playlist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ContentDirectoryObject::clear_playlist() {
  if (playlist_ != NULL) playlist_->::media_metadata::PlaylistFields::Clear();
  clear_has_playlist();
}
inline const ::media_metadata::PlaylistFields& ContentDirectoryObject::playlist() const {
  return playlist_ != NULL ? *playlist_ : *default_instance_->playlist_;
}
inline ::media_metadata::PlaylistFields* ContentDirectoryObject::mutable_playlist() {
  set_has_playlist();
  if (playlist_ == NULL) playlist_ = new ::media_metadata::PlaylistFields;
  return playlist_;
}
inline ::media_metadata::PlaylistFields* ContentDirectoryObject::release_playlist() {
  clear_has_playlist();
  ::media_metadata::PlaylistFields* temp = playlist_;
  playlist_ = NULL;
  return temp;
}

// optional .media_metadata.ImageAlbumFields photo_album = 9;
inline bool ContentDirectoryObject::has_photo_album() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ContentDirectoryObject::set_has_photo_album() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ContentDirectoryObject::clear_has_photo_album() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ContentDirectoryObject::clear_photo_album() {
  if (photo_album_ != NULL) photo_album_->::media_metadata::ImageAlbumFields::Clear();
  clear_has_photo_album();
}
inline const ::media_metadata::ImageAlbumFields& ContentDirectoryObject::photo_album() const {
  return photo_album_ != NULL ? *photo_album_ : *default_instance_->photo_album_;
}
inline ::media_metadata::ImageAlbumFields* ContentDirectoryObject::mutable_photo_album() {
  set_has_photo_album();
  if (photo_album_ == NULL) photo_album_ = new ::media_metadata::ImageAlbumFields;
  return photo_album_;
}
inline ::media_metadata::ImageAlbumFields* ContentDirectoryObject::release_photo_album() {
  clear_has_photo_album();
  ::media_metadata::ImageAlbumFields* temp = photo_album_;
  photo_album_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MCAMetadataQueryObject

// optional .media_metadata.ContentDirectoryObject cdo = 1;
inline bool MCAMetadataQueryObject::has_cdo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MCAMetadataQueryObject::set_has_cdo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MCAMetadataQueryObject::clear_has_cdo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MCAMetadataQueryObject::clear_cdo() {
  if (cdo_ != NULL) cdo_->::media_metadata::ContentDirectoryObject::Clear();
  clear_has_cdo();
}
inline const ::media_metadata::ContentDirectoryObject& MCAMetadataQueryObject::cdo() const {
  return cdo_ != NULL ? *cdo_ : *default_instance_->cdo_;
}
inline ::media_metadata::ContentDirectoryObject* MCAMetadataQueryObject::mutable_cdo() {
  set_has_cdo();
  if (cdo_ == NULL) cdo_ = new ::media_metadata::ContentDirectoryObject;
  return cdo_;
}
inline ::media_metadata::ContentDirectoryObject* MCAMetadataQueryObject::release_cdo() {
  clear_has_cdo();
  ::media_metadata::ContentDirectoryObject* temp = cdo_;
  cdo_ = NULL;
  return temp;
}

// optional string collection_id = 2;
inline bool MCAMetadataQueryObject::has_collection_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MCAMetadataQueryObject::set_has_collection_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MCAMetadataQueryObject::clear_has_collection_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MCAMetadataQueryObject::clear_collection_id() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    collection_id_->clear();
  }
  clear_has_collection_id();
}
inline const ::std::string& MCAMetadataQueryObject::collection_id() const {
  return *collection_id_;
}
inline void MCAMetadataQueryObject::set_collection_id(const ::std::string& value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void MCAMetadataQueryObject::set_collection_id(const char* value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void MCAMetadataQueryObject::set_collection_id(const char* value, size_t size) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCAMetadataQueryObject::mutable_collection_id() {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  return collection_id_;
}
inline ::std::string* MCAMetadataQueryObject::release_collection_id() {
  clear_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collection_id_;
    collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .media_metadata.MusicArtistFields music_artist = 3;
inline bool MCAMetadataQueryObject::has_music_artist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MCAMetadataQueryObject::set_has_music_artist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MCAMetadataQueryObject::clear_has_music_artist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MCAMetadataQueryObject::clear_music_artist() {
  if (music_artist_ != NULL) music_artist_->::media_metadata::MusicArtistFields::Clear();
  clear_has_music_artist();
}
inline const ::media_metadata::MusicArtistFields& MCAMetadataQueryObject::music_artist() const {
  return music_artist_ != NULL ? *music_artist_ : *default_instance_->music_artist_;
}
inline ::media_metadata::MusicArtistFields* MCAMetadataQueryObject::mutable_music_artist() {
  set_has_music_artist();
  if (music_artist_ == NULL) music_artist_ = new ::media_metadata::MusicArtistFields;
  return music_artist_;
}
inline ::media_metadata::MusicArtistFields* MCAMetadataQueryObject::release_music_artist() {
  clear_has_music_artist();
  ::media_metadata::MusicArtistFields* temp = music_artist_;
  music_artist_ = NULL;
  return temp;
}

// optional .media_metadata.MusicGenreFields music_genre = 4;
inline bool MCAMetadataQueryObject::has_music_genre() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MCAMetadataQueryObject::set_has_music_genre() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MCAMetadataQueryObject::clear_has_music_genre() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MCAMetadataQueryObject::clear_music_genre() {
  if (music_genre_ != NULL) music_genre_->::media_metadata::MusicGenreFields::Clear();
  clear_has_music_genre();
}
inline const ::media_metadata::MusicGenreFields& MCAMetadataQueryObject::music_genre() const {
  return music_genre_ != NULL ? *music_genre_ : *default_instance_->music_genre_;
}
inline ::media_metadata::MusicGenreFields* MCAMetadataQueryObject::mutable_music_genre() {
  set_has_music_genre();
  if (music_genre_ == NULL) music_genre_ = new ::media_metadata::MusicGenreFields;
  return music_genre_;
}
inline ::media_metadata::MusicGenreFields* MCAMetadataQueryObject::release_music_genre() {
  clear_has_music_genre();
  ::media_metadata::MusicGenreFields* temp = music_genre_;
  music_genre_ = NULL;
  return temp;
}

// optional .media_metadata.VideoAlbumFields video_album = 5;
inline bool MCAMetadataQueryObject::has_video_album() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MCAMetadataQueryObject::set_has_video_album() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MCAMetadataQueryObject::clear_has_video_album() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MCAMetadataQueryObject::clear_video_album() {
  if (video_album_ != NULL) video_album_->::media_metadata::VideoAlbumFields::Clear();
  clear_has_video_album();
}
inline const ::media_metadata::VideoAlbumFields& MCAMetadataQueryObject::video_album() const {
  return video_album_ != NULL ? *video_album_ : *default_instance_->video_album_;
}
inline ::media_metadata::VideoAlbumFields* MCAMetadataQueryObject::mutable_video_album() {
  set_has_video_album();
  if (video_album_ == NULL) video_album_ = new ::media_metadata::VideoAlbumFields;
  return video_album_;
}
inline ::media_metadata::VideoAlbumFields* MCAMetadataQueryObject::release_video_album() {
  clear_has_video_album();
  ::media_metadata::VideoAlbumFields* temp = video_album_;
  video_album_ = NULL;
  return temp;
}

// optional string url = 7;
inline bool MCAMetadataQueryObject::has_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MCAMetadataQueryObject::set_has_url() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MCAMetadataQueryObject::clear_has_url() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MCAMetadataQueryObject::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MCAMetadataQueryObject::url() const {
  return *url_;
}
inline void MCAMetadataQueryObject::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void MCAMetadataQueryObject::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void MCAMetadataQueryObject::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCAMetadataQueryObject::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* MCAMetadataQueryObject::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string thumbnail_url = 8;
inline bool MCAMetadataQueryObject::has_thumbnail_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MCAMetadataQueryObject::set_has_thumbnail_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MCAMetadataQueryObject::clear_has_thumbnail_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MCAMetadataQueryObject::clear_thumbnail_url() {
  if (thumbnail_url_ != &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_->clear();
  }
  clear_has_thumbnail_url();
}
inline const ::std::string& MCAMetadataQueryObject::thumbnail_url() const {
  return *thumbnail_url_;
}
inline void MCAMetadataQueryObject::set_thumbnail_url(const ::std::string& value) {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  thumbnail_url_->assign(value);
}
inline void MCAMetadataQueryObject::set_thumbnail_url(const char* value) {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  thumbnail_url_->assign(value);
}
inline void MCAMetadataQueryObject::set_thumbnail_url(const char* value, size_t size) {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  thumbnail_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCAMetadataQueryObject::mutable_thumbnail_url() {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  return thumbnail_url_;
}
inline ::std::string* MCAMetadataQueryObject::release_thumbnail_url() {
  clear_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thumbnail_url_;
    thumbnail_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetMetadataSyncStateInput

// -------------------------------------------------------------------

// GetMetadataSyncStateOutput

// required .media_metadata.MetadataSyncStateType_t sync_state = 1;
inline bool GetMetadataSyncStateOutput::has_sync_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMetadataSyncStateOutput::set_has_sync_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMetadataSyncStateOutput::clear_has_sync_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMetadataSyncStateOutput::clear_sync_state() {
  sync_state_ = 1;
  clear_has_sync_state();
}
inline media_metadata::MetadataSyncStateType_t GetMetadataSyncStateOutput::sync_state() const {
  return static_cast< media_metadata::MetadataSyncStateType_t >(sync_state_);
}
inline void GetMetadataSyncStateOutput::set_sync_state(media_metadata::MetadataSyncStateType_t value) {
  GOOGLE_DCHECK(media_metadata::MetadataSyncStateType_t_IsValid(value));
  set_has_sync_state();
  sync_state_ = value;
}

// optional fixed64 metadata_update_time = 2;
inline bool GetMetadataSyncStateOutput::has_metadata_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMetadataSyncStateOutput::set_has_metadata_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMetadataSyncStateOutput::clear_has_metadata_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMetadataSyncStateOutput::clear_metadata_update_time() {
  metadata_update_time_ = GOOGLE_ULONGLONG(0);
  clear_has_metadata_update_time();
}
inline ::google::protobuf::uint64 GetMetadataSyncStateOutput::metadata_update_time() const {
  return metadata_update_time_;
}
inline void GetMetadataSyncStateOutput::set_metadata_update_time(::google::protobuf::uint64 value) {
  set_has_metadata_update_time();
  metadata_update_time_ = value;
}

// -------------------------------------------------------------------

// ListCollectionsOutput

// repeated string collection_id = 1;
inline int ListCollectionsOutput::collection_id_size() const {
  return collection_id_.size();
}
inline void ListCollectionsOutput::clear_collection_id() {
  collection_id_.Clear();
}
inline const ::std::string& ListCollectionsOutput::collection_id(int index) const {
  return collection_id_.Get(index);
}
inline ::std::string* ListCollectionsOutput::mutable_collection_id(int index) {
  return collection_id_.Mutable(index);
}
inline void ListCollectionsOutput::set_collection_id(int index, const ::std::string& value) {
  collection_id_.Mutable(index)->assign(value);
}
inline void ListCollectionsOutput::set_collection_id(int index, const char* value) {
  collection_id_.Mutable(index)->assign(value);
}
inline void ListCollectionsOutput::set_collection_id(int index, const char* value, size_t size) {
  collection_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListCollectionsOutput::add_collection_id() {
  return collection_id_.Add();
}
inline void ListCollectionsOutput::add_collection_id(const ::std::string& value) {
  collection_id_.Add()->assign(value);
}
inline void ListCollectionsOutput::add_collection_id(const char* value) {
  collection_id_.Add()->assign(value);
}
inline void ListCollectionsOutput::add_collection_id(const char* value, size_t size) {
  collection_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListCollectionsOutput::collection_id() const {
  return collection_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListCollectionsOutput::mutable_collection_id() {
  return &collection_id_;
}

// repeated uint64 collection_timestamp = 2;
inline int ListCollectionsOutput::collection_timestamp_size() const {
  return collection_timestamp_.size();
}
inline void ListCollectionsOutput::clear_collection_timestamp() {
  collection_timestamp_.Clear();
}
inline ::google::protobuf::uint64 ListCollectionsOutput::collection_timestamp(int index) const {
  return collection_timestamp_.Get(index);
}
inline void ListCollectionsOutput::set_collection_timestamp(int index, ::google::protobuf::uint64 value) {
  collection_timestamp_.Set(index, value);
}
inline void ListCollectionsOutput::add_collection_timestamp(::google::protobuf::uint64 value) {
  collection_timestamp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ListCollectionsOutput::collection_timestamp() const {
  return collection_timestamp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ListCollectionsOutput::mutable_collection_timestamp() {
  return &collection_timestamp_;
}

// -------------------------------------------------------------------

// GetObjectMetadataInput

// optional string url = 1;
inline bool GetObjectMetadataInput::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetObjectMetadataInput::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetObjectMetadataInput::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetObjectMetadataInput::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& GetObjectMetadataInput::url() const {
  return *url_;
}
inline void GetObjectMetadataInput::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void GetObjectMetadataInput::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void GetObjectMetadataInput::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetObjectMetadataInput::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* GetObjectMetadataInput::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string object_id = 2;
inline bool GetObjectMetadataInput::has_object_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetObjectMetadataInput::set_has_object_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetObjectMetadataInput::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetObjectMetadataInput::clear_object_id() {
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    object_id_->clear();
  }
  clear_has_object_id();
}
inline const ::std::string& GetObjectMetadataInput::object_id() const {
  return *object_id_;
}
inline void GetObjectMetadataInput::set_object_id(const ::std::string& value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void GetObjectMetadataInput::set_object_id(const char* value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void GetObjectMetadataInput::set_object_id(const char* value, size_t size) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetObjectMetadataInput::mutable_object_id() {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  return object_id_;
}
inline ::std::string* GetObjectMetadataInput::release_object_id() {
  clear_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_id_;
    object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .media_metadata.CatalogType_t catalog_type = 3;
inline bool GetObjectMetadataInput::has_catalog_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetObjectMetadataInput::set_has_catalog_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetObjectMetadataInput::clear_has_catalog_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetObjectMetadataInput::clear_catalog_type() {
  catalog_type_ = 1;
  clear_has_catalog_type();
}
inline media_metadata::CatalogType_t GetObjectMetadataInput::catalog_type() const {
  return static_cast< media_metadata::CatalogType_t >(catalog_type_);
}
inline void GetObjectMetadataInput::set_catalog_type(media_metadata::CatalogType_t value) {
  GOOGLE_DCHECK(media_metadata::CatalogType_t_IsValid(value));
  set_has_catalog_type();
  catalog_type_ = value;
}

// -------------------------------------------------------------------

// GetObjectMetadataOutput

// required .media_metadata.MediaType_t media_type = 1;
inline bool GetObjectMetadataOutput::has_media_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetObjectMetadataOutput::set_has_media_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetObjectMetadataOutput::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetObjectMetadataOutput::clear_media_type() {
  media_type_ = 1;
  clear_has_media_type();
}
inline media_metadata::MediaType_t GetObjectMetadataOutput::media_type() const {
  return static_cast< media_metadata::MediaType_t >(media_type_);
}
inline void GetObjectMetadataOutput::set_media_type(media_metadata::MediaType_t value) {
  GOOGLE_DCHECK(media_metadata::MediaType_t_IsValid(value));
  set_has_media_type();
  media_type_ = value;
}

// optional string absolute_path = 2;
inline bool GetObjectMetadataOutput::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetObjectMetadataOutput::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetObjectMetadataOutput::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetObjectMetadataOutput::clear_absolute_path() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    absolute_path_->clear();
  }
  clear_has_absolute_path();
}
inline const ::std::string& GetObjectMetadataOutput::absolute_path() const {
  return *absolute_path_;
}
inline void GetObjectMetadataOutput::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void GetObjectMetadataOutput::set_absolute_path(const char* value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void GetObjectMetadataOutput::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetObjectMetadataOutput::mutable_absolute_path() {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  return absolute_path_;
}
inline ::std::string* GetObjectMetadataOutput::release_absolute_path() {
  clear_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_path_;
    absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string thumbnail = 3;
inline bool GetObjectMetadataOutput::has_thumbnail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetObjectMetadataOutput::set_has_thumbnail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetObjectMetadataOutput::clear_has_thumbnail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetObjectMetadataOutput::clear_thumbnail() {
  if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    thumbnail_->clear();
  }
  clear_has_thumbnail();
}
inline const ::std::string& GetObjectMetadataOutput::thumbnail() const {
  return *thumbnail_;
}
inline void GetObjectMetadataOutput::set_thumbnail(const ::std::string& value) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(value);
}
inline void GetObjectMetadataOutput::set_thumbnail(const char* value) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(value);
}
inline void GetObjectMetadataOutput::set_thumbnail(const char* value, size_t size) {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  thumbnail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetObjectMetadataOutput::mutable_thumbnail() {
  set_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_ = new ::std::string;
  }
  return thumbnail_;
}
inline ::std::string* GetObjectMetadataOutput::release_thumbnail() {
  clear_has_thumbnail();
  if (thumbnail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thumbnail_;
    thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string file_format = 4;
inline bool GetObjectMetadataOutput::has_file_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetObjectMetadataOutput::set_has_file_format() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetObjectMetadataOutput::clear_has_file_format() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetObjectMetadataOutput::clear_file_format() {
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    file_format_->clear();
  }
  clear_has_file_format();
}
inline const ::std::string& GetObjectMetadataOutput::file_format() const {
  return *file_format_;
}
inline void GetObjectMetadataOutput::set_file_format(const ::std::string& value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void GetObjectMetadataOutput::set_file_format(const char* value) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(value);
}
inline void GetObjectMetadataOutput::set_file_format(const char* value, size_t size) {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  file_format_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetObjectMetadataOutput::mutable_file_format() {
  set_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    file_format_ = new ::std::string;
  }
  return file_format_;
}
inline ::std::string* GetObjectMetadataOutput::release_file_format() {
  clear_has_file_format();
  if (file_format_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_format_;
    file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comp_id = 5;
inline bool GetObjectMetadataOutput::has_comp_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetObjectMetadataOutput::set_has_comp_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetObjectMetadataOutput::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetObjectMetadataOutput::clear_comp_id() {
  if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
    comp_id_->clear();
  }
  clear_has_comp_id();
}
inline const ::std::string& GetObjectMetadataOutput::comp_id() const {
  return *comp_id_;
}
inline void GetObjectMetadataOutput::set_comp_id(const ::std::string& value) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(value);
}
inline void GetObjectMetadataOutput::set_comp_id(const char* value) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(value);
}
inline void GetObjectMetadataOutput::set_comp_id(const char* value, size_t size) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetObjectMetadataOutput::mutable_comp_id() {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  return comp_id_;
}
inline ::std::string* GetObjectMetadataOutput::release_comp_id() {
  clear_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comp_id_;
    comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 special_format_flag = 6;
inline bool GetObjectMetadataOutput::has_special_format_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetObjectMetadataOutput::set_has_special_format_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetObjectMetadataOutput::clear_has_special_format_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetObjectMetadataOutput::clear_special_format_flag() {
  special_format_flag_ = 0u;
  clear_has_special_format_flag();
}
inline ::google::protobuf::uint32 GetObjectMetadataOutput::special_format_flag() const {
  return special_format_flag_;
}
inline void GetObjectMetadataOutput::set_special_format_flag(::google::protobuf::uint32 value) {
  set_has_special_format_flag();
  special_format_flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace media_metadata

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< media_metadata::MediaSource_t>() {
  return media_metadata::MediaSource_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< media_metadata::MetadataSyncStateType_t>() {
  return media_metadata::MetadataSyncStateType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< media_metadata::CatalogType_t>() {
  return media_metadata::CatalogType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< media_metadata::DBFilterType_t>() {
  return media_metadata::DBFilterType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< media_metadata::MediaType_t>() {
  return media_metadata::MediaType_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_media_5fmetadata_5ftypes_2eproto__INCLUDED
