// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "media_metadata_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace media_metadata {

namespace {

const ::google::protobuf::Descriptor* NoParamInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoParamInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoParamOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoParamOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaServerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaServerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicTrackFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicTrackFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicAlbumFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicAlbumFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicArtistFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicArtistFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicGenreFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicGenreFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoItemFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoItemFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoAlbumFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoAlbumFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageItemFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageItemFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageAlbumFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageAlbumFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaylistFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaylistFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentDirectoryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentDirectoryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* MCAMetadataQueryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MCAMetadataQueryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadataSyncStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMetadataSyncStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMetadataSyncStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMetadataSyncStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCollectionsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCollectionsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectMetadataInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectMetadataInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetObjectMetadataOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetObjectMetadataOutput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaSource_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MetadataSyncStateType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CatalogType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DBFilterType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaType_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto() {
  protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "media_metadata_types.proto");
  GOOGLE_CHECK(file != NULL);
  NoParamInput_descriptor_ = file->message_type(0);
  static const int NoParamInput_offsets_[1] = {
  };
  NoParamInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoParamInput_descriptor_,
      NoParamInput::default_instance_,
      NoParamInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoParamInput));
  NoParamOutput_descriptor_ = file->message_type(1);
  static const int NoParamOutput_offsets_[1] = {
  };
  NoParamOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoParamOutput_descriptor_,
      NoParamOutput::default_instance_,
      NoParamOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoParamOutput));
  MediaServerInfo_descriptor_ = file->message_type(2);
  static const int MediaServerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, cloud_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, is_online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, is_linked_),
  };
  MediaServerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaServerInfo_descriptor_,
      MediaServerInfo::default_instance_,
      MediaServerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaServerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaServerInfo));
  MusicTrackFields_descriptor_ = file->message_type(3);
  static const int MusicTrackFields_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, album_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, track_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, duration_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, file_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, date_time_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, album_artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, composer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, disk_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, year_),
  };
  MusicTrackFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicTrackFields_descriptor_,
      MusicTrackFields::default_instance_,
      MusicTrackFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicTrackFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicTrackFields));
  MusicAlbumFields_descriptor_ = file->message_type(4);
  static const int MusicAlbumFields_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, album_artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, album_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, album_trackcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, album_tracksize_),
  };
  MusicAlbumFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicAlbumFields_descriptor_,
      MusicAlbumFields::default_instance_,
      MusicAlbumFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicAlbumFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicAlbumFields));
  MusicArtistFields_descriptor_ = file->message_type(5);
  static const int MusicArtistFields_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicArtistFields, artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicArtistFields, album_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicArtistFields, track_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicArtistFields, item_total_size_),
  };
  MusicArtistFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicArtistFields_descriptor_,
      MusicArtistFields::default_instance_,
      MusicArtistFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicArtistFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicArtistFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicArtistFields));
  MusicGenreFields_descriptor_ = file->message_type(6);
  static const int MusicGenreFields_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicGenreFields, genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicGenreFields, track_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicGenreFields, album_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicGenreFields, item_total_size_),
  };
  MusicGenreFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicGenreFields_descriptor_,
      MusicGenreFields::default_instance_,
      MusicGenreFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicGenreFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicGenreFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicGenreFields));
  VideoItemFields_descriptor_ = file->message_type(7);
  static const int VideoItemFields_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, duration_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, file_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, date_time_updated_),
  };
  VideoItemFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoItemFields_descriptor_,
      VideoItemFields::default_instance_,
      VideoItemFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoItemFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoItemFields));
  VideoAlbumFields_descriptor_ = file->message_type(8);
  static const int VideoAlbumFields_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAlbumFields, collection_id_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAlbumFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAlbumFields, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAlbumFields, item_total_size_),
  };
  VideoAlbumFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoAlbumFields_descriptor_,
      VideoAlbumFields::default_instance_,
      VideoAlbumFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAlbumFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoAlbumFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoAlbumFields));
  ImageItemFields_descriptor_ = file->message_type(9);
  static const int ImageItemFields_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, file_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, date_time_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, special_format_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, album_ref_),
  };
  ImageItemFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageItemFields_descriptor_,
      ImageItemFields::default_instance_,
      ImageItemFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageItemFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageItemFields));
  ImageAlbumFields_descriptor_ = file->message_type(10);
  static const int ImageAlbumFields_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, item_total_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, album_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, timestamp_),
  };
  ImageAlbumFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageAlbumFields_descriptor_,
      ImageAlbumFields::default_instance_,
      ImageAlbumFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageAlbumFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageAlbumFields));
  PlaylistFields_descriptor_ = file->message_type(11);
  static const int PlaylistFields_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistFields, playlist_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistFields, content_refs_),
  };
  PlaylistFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaylistFields_descriptor_,
      PlaylistFields::default_instance_,
      PlaylistFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaylistFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaylistFields));
  ContentDirectoryObject_descriptor_ = file->message_type(12);
  static const int ContentDirectoryObject_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, optional_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, music_track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, music_album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, video_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, photo_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, playlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, photo_album_),
  };
  ContentDirectoryObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentDirectoryObject_descriptor_,
      ContentDirectoryObject::default_instance_,
      ContentDirectoryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentDirectoryObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentDirectoryObject));
  MCAMetadataQueryObject_descriptor_ = file->message_type(13);
  static const int MCAMetadataQueryObject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, cdo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, collection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, music_artist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, music_genre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, video_album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, thumbnail_url_),
  };
  MCAMetadataQueryObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MCAMetadataQueryObject_descriptor_,
      MCAMetadataQueryObject::default_instance_,
      MCAMetadataQueryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAMetadataQueryObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MCAMetadataQueryObject));
  GetMetadataSyncStateInput_descriptor_ = file->message_type(14);
  static const int GetMetadataSyncStateInput_offsets_[1] = {
  };
  GetMetadataSyncStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMetadataSyncStateInput_descriptor_,
      GetMetadataSyncStateInput::default_instance_,
      GetMetadataSyncStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadataSyncStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadataSyncStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMetadataSyncStateInput));
  GetMetadataSyncStateOutput_descriptor_ = file->message_type(15);
  static const int GetMetadataSyncStateOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadataSyncStateOutput, sync_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadataSyncStateOutput, metadata_update_time_),
  };
  GetMetadataSyncStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMetadataSyncStateOutput_descriptor_,
      GetMetadataSyncStateOutput::default_instance_,
      GetMetadataSyncStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadataSyncStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMetadataSyncStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMetadataSyncStateOutput));
  ListCollectionsOutput_descriptor_ = file->message_type(16);
  static const int ListCollectionsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCollectionsOutput, collection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCollectionsOutput, collection_timestamp_),
  };
  ListCollectionsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCollectionsOutput_descriptor_,
      ListCollectionsOutput::default_instance_,
      ListCollectionsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCollectionsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCollectionsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCollectionsOutput));
  GetObjectMetadataInput_descriptor_ = file->message_type(17);
  static const int GetObjectMetadataInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataInput, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataInput, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataInput, catalog_type_),
  };
  GetObjectMetadataInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectMetadataInput_descriptor_,
      GetObjectMetadataInput::default_instance_,
      GetObjectMetadataInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectMetadataInput));
  GetObjectMetadataOutput_descriptor_ = file->message_type(18);
  static const int GetObjectMetadataOutput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, media_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, file_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, special_format_flag_),
  };
  GetObjectMetadataOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetObjectMetadataOutput_descriptor_,
      GetObjectMetadataOutput::default_instance_,
      GetObjectMetadataOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetObjectMetadataOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetObjectMetadataOutput));
  MediaSource_t_descriptor_ = file->enum_type(0);
  MetadataSyncStateType_t_descriptor_ = file->enum_type(1);
  CatalogType_t_descriptor_ = file->enum_type(2);
  DBFilterType_t_descriptor_ = file->enum_type(3);
  MediaType_t_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_media_5fmetadata_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoParamInput_descriptor_, &NoParamInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoParamOutput_descriptor_, &NoParamOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaServerInfo_descriptor_, &MediaServerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicTrackFields_descriptor_, &MusicTrackFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicAlbumFields_descriptor_, &MusicAlbumFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicArtistFields_descriptor_, &MusicArtistFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicGenreFields_descriptor_, &MusicGenreFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoItemFields_descriptor_, &VideoItemFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoAlbumFields_descriptor_, &VideoAlbumFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageItemFields_descriptor_, &ImageItemFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageAlbumFields_descriptor_, &ImageAlbumFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaylistFields_descriptor_, &PlaylistFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentDirectoryObject_descriptor_, &ContentDirectoryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MCAMetadataQueryObject_descriptor_, &MCAMetadataQueryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMetadataSyncStateInput_descriptor_, &GetMetadataSyncStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMetadataSyncStateOutput_descriptor_, &GetMetadataSyncStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCollectionsOutput_descriptor_, &ListCollectionsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectMetadataInput_descriptor_, &GetObjectMetadataInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetObjectMetadataOutput_descriptor_, &GetObjectMetadataOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto() {
  delete NoParamInput::default_instance_;
  delete NoParamInput_reflection_;
  delete NoParamOutput::default_instance_;
  delete NoParamOutput_reflection_;
  delete MediaServerInfo::default_instance_;
  delete MediaServerInfo_reflection_;
  delete MusicTrackFields::default_instance_;
  delete MusicTrackFields_reflection_;
  delete MusicAlbumFields::default_instance_;
  delete MusicAlbumFields_reflection_;
  delete MusicArtistFields::default_instance_;
  delete MusicArtistFields_reflection_;
  delete MusicGenreFields::default_instance_;
  delete MusicGenreFields_reflection_;
  delete VideoItemFields::default_instance_;
  delete VideoItemFields_reflection_;
  delete VideoAlbumFields::default_instance_;
  delete VideoAlbumFields_reflection_;
  delete ImageItemFields::default_instance_;
  delete ImageItemFields_reflection_;
  delete ImageAlbumFields::default_instance_;
  delete ImageAlbumFields_reflection_;
  delete PlaylistFields::default_instance_;
  delete PlaylistFields_reflection_;
  delete ContentDirectoryObject::default_instance_;
  delete ContentDirectoryObject_reflection_;
  delete MCAMetadataQueryObject::default_instance_;
  delete MCAMetadataQueryObject_reflection_;
  delete GetMetadataSyncStateInput::default_instance_;
  delete GetMetadataSyncStateInput_reflection_;
  delete GetMetadataSyncStateOutput::default_instance_;
  delete GetMetadataSyncStateOutput_reflection_;
  delete ListCollectionsOutput::default_instance_;
  delete ListCollectionsOutput_reflection_;
  delete GetObjectMetadataInput::default_instance_;
  delete GetObjectMetadataInput_reflection_;
  delete GetObjectMetadataOutput::default_instance_;
  delete GetObjectMetadataOutput_reflection_;
}

void protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032media_metadata_types.proto\022\016media_meta"
    "data\"\016\n\014NoParamInput\"\017\n\rNoParamOutput\"\201\001"
    "\n\017MediaServerInfo\022\027\n\017cloud_device_id\030\001 \002"
    "(\006\022\023\n\013device_name\030\002 \002(\t\022\014\n\004uuid\030\003 \002(\t\022\030\n"
    "\tis_online\030\004 \001(\010:\005false\022\030\n\tis_linked\030\005 \001"
    "(\010:\005false\"\355\002\n\020MusicTrackFields\022\025\n\rabsolu"
    "te_path\030\001 \002(\t\022\r\n\005title\030\002 \002(\t\022\016\n\006artist\030\003"
    " \002(\t\022\021\n\talbum_ref\030\004 \002(\t\022\024\n\014track_number\030"
    "\005 \001(\005\022\r\n\005genre\030\006 \001(\t\022\024\n\014duration_sec\030\007 \001"
    "(\004\022\021\n\tfile_size\030\010 \001(\004\022\023\n\013file_format\030\t \001"
    "(\t\022\021\n\tdate_time\030\n \001(\004\022\031\n\021date_time_updat"
    "ed\030\013 \001(\004\022\022\n\nalbum_name\030\014 \001(\t\022\024\n\014album_ar"
    "tist\030\r \001(\t\022\020\n\010checksum\030\016 \001(\t\022\016\n\006length\030\017"
    " \001(\004\022\020\n\010composer\030\020 \001(\t\022\023\n\013disk_number\030\021 "
    "\001(\t\022\014\n\004year\030\022 \001(\t\"\210\001\n\020MusicAlbumFields\022\022"
    "\n\nalbum_name\030\001 \002(\t\022\024\n\014album_artist\030\002 \001(\t"
    "\022\027\n\017album_thumbnail\030\003 \001(\t\022\030\n\020album_track"
    "count\030\004 \001(\r\022\027\n\017album_tracksize\030\005 \001(\004\"f\n\021"
    "MusicArtistFields\022\016\n\006artist\030\001 \002(\t\022\023\n\013alb"
    "um_count\030\002 \002(\r\022\023\n\013track_count\030\003 \002(\r\022\027\n\017i"
    "tem_total_size\030\004 \002(\004\"d\n\020MusicGenreFields"
    "\022\r\n\005genre\030\001 \002(\t\022\023\n\013track_count\030\002 \002(\r\022\023\n\013"
    "album_count\030\003 \002(\r\022\027\n\017item_total_size\030\004 \002"
    "(\004\"\312\001\n\017VideoItemFields\022\025\n\rabsolute_path\030"
    "\001 \002(\t\022\r\n\005title\030\002 \002(\t\022\021\n\tthumbnail\030\003 \001(\t\022"
    "\022\n\nalbum_name\030\004 \002(\t\022\024\n\014duration_sec\030\005 \001("
    "\004\022\021\n\tfile_size\030\006 \001(\004\022\021\n\tdate_time\030\007 \001(\004\022"
    "\023\n\013file_format\030\010 \001(\t\022\031\n\021date_time_update"
    "d\030\t \001(\004\"n\n\020VideoAlbumFields\022\031\n\021collectio"
    "n_id_ref\030\001 \002(\t\022\022\n\nalbum_name\030\002 \002(\t\022\022\n\nit"
    "em_count\030\003 \002(\r\022\027\n\017item_total_size\030\004 \002(\004\""
    "\236\002\n\017ImageItemFields\022\025\n\rabsolute_path\030\001 \002"
    "(\t\022\r\n\005title\030\002 \002(\t\022\021\n\tthumbnail\030\003 \001(\t\022\022\n\n"
    "album_name\030\004 \002(\t\022\021\n\tdate_time\030\005 \002(\004\022\021\n\tf"
    "ile_size\030\006 \001(\004\022\023\n\013file_format\030\t \001(\t\022\031\n\021d"
    "ate_time_updated\030\n \001(\004\022\022\n\ndimensions\030\013 \001"
    "(\t\022\023\n\013orientation\030\014 \001(\r\022\017\n\007comp_id\030\r \001(\t"
    "\022\033\n\023special_format_flag\030\016 \001(\r\022\021\n\talbum_r"
    "ef\030\017 \001(\t\"\177\n\020ImageAlbumFields\022\022\n\nalbum_na"
    "me\030\002 \002(\t\022\022\n\nitem_count\030\003 \001(\r\022\027\n\017item_tot"
    "al_size\030\004 \001(\004\022\027\n\017album_thumbnail\030\005 \001(\t\022\021"
    "\n\ttimestamp\030\006 \001(\004\"=\n\016PlaylistFields\022\025\n\rp"
    "laylist_name\030\001 \002(\t\022\024\n\014content_refs\030\002 \003(\t"
    "\"\264\003\n\026ContentDirectoryObject\022\021\n\tobject_id"
    "\030\001 \002(\t\022\027\n\017optional_fields\030\002 \003(\t\022-\n\006sourc"
    "e\030\003 \002(\0162\035.media_metadata.MediaSource_t\0225"
    "\n\013music_track\030\004 \001(\0132 .media_metadata.Mus"
    "icTrackFields\0225\n\013music_album\030\005 \001(\0132 .med"
    "ia_metadata.MusicAlbumFields\0223\n\nvideo_it"
    "em\030\006 \001(\0132\037.media_metadata.VideoItemField"
    "s\0223\n\nphoto_item\030\007 \001(\0132\037.media_metadata.I"
    "mageItemFields\0220\n\010playlist\030\010 \001(\0132\036.media"
    "_metadata.PlaylistFields\0225\n\013photo_album\030"
    "\t \001(\0132 .media_metadata.ImageAlbumFields\""
    "\257\002\n\026MCAMetadataQueryObject\0223\n\003cdo\030\001 \001(\0132"
    "&.media_metadata.ContentDirectoryObject\022"
    "\025\n\rcollection_id\030\002 \001(\t\0227\n\014music_artist\030\003"
    " \001(\0132!.media_metadata.MusicArtistFields\022"
    "5\n\013music_genre\030\004 \001(\0132 .media_metadata.Mu"
    "sicGenreFields\0225\n\013video_album\030\005 \001(\0132 .me"
    "dia_metadata.VideoAlbumFields\022\013\n\003url\030\007 \001"
    "(\t\022\025\n\rthumbnail_url\030\010 \001(\t\"\033\n\031GetMetadata"
    "SyncStateInput\"w\n\032GetMetadataSyncStateOu"
    "tput\022;\n\nsync_state\030\001 \002(\0162\'.media_metadat"
    "a.MetadataSyncStateType_t\022\034\n\024metadata_up"
    "date_time\030\002 \001(\006\"L\n\025ListCollectionsOutput"
    "\022\025\n\rcollection_id\030\001 \003(\t\022\034\n\024collection_ti"
    "mestamp\030\002 \003(\004\"m\n\026GetObjectMetadataInput\022"
    "\013\n\003url\030\001 \001(\t\022\021\n\tobject_id\030\002 \001(\t\0223\n\014catal"
    "og_type\030\003 \001(\0162\035.media_metadata.CatalogTy"
    "pe_t\"\267\001\n\027GetObjectMetadataOutput\022/\n\nmedi"
    "a_type\030\001 \002(\0162\033.media_metadata.MediaType_"
    "t\022\025\n\rabsolute_path\030\002 \001(\t\022\021\n\tthumbnail\030\003 "
    "\001(\t\022\023\n\013file_format\030\004 \001(\t\022\017\n\007comp_id\030\005 \001("
    "\t\022\033\n\023special_format_flag\030\006 \001(\r*X\n\rMediaS"
    "ource_t\022\030\n\024MEDIA_SOURCE_LIBRARY\020\001\022\027\n\023MED"
    "IA_SOURCE_ITUNES\020\002\022\024\n\020MEDIA_SOURCE_WMP\020\003"
    "*\215\001\n\027MetadataSyncStateType_t\022\032\n\026MSA_SYNC"
    "_STATE_IN_SYNC\020\001\022\032\n\026MSA_SYNC_STATE_SYNCI"
    "NG\020\002\022\036\n\032MSA_SYNC_STATE_OUT_OF_SYNC\020\003\022\032\n\026"
    "MSA_SYNC_STATE_NO_DATA\020\004*Q\n\rCatalogType_"
    "t\022\024\n\020MM_CATALOG_MUSIC\020\001\022\024\n\020MM_CATALOG_PH"
    "OTO\020\002\022\024\n\020MM_CATALOG_VIDEO\020\003*\357\001\n\016DBFilter"
    "Type_t\022\032\n\026MCA_MDQUERY_MUSICTRACK\020\001\022\032\n\026MC"
    "A_MDQUERY_MUSICALBUM\020\002\022\033\n\027MCA_MDQUERY_MU"
    "SICARTIST\020\003\022\032\n\026MCA_MDQUERY_MUSICGENRE\020\004\022"
    "\031\n\025MCA_MDQUERY_PHOTOITEM\020\005\022\032\n\026MCA_MDQUER"
    "Y_PHOTOALBUM\020\006\022\031\n\025MCA_MDQUERY_VIDEOITEM\020"
    "\007\022\032\n\026MCA_MDQUERY_VIDEOALBUM\020\010*\204\001\n\013MediaT"
    "ype_t\022\025\n\021MEDIA_MUSIC_TRACK\020\001\022\025\n\021MEDIA_MU"
    "SIC_ALBUM\020\002\022\017\n\013MEDIA_VIDEO\020\003\022\017\n\013MEDIA_PH"
    "OTO\020\004\022\025\n\021MEDIA_PHOTO_ALBUM\020\005\022\016\n\nMEDIA_NO"
    "NE\020\006B/\n\036igware.cloud.media_metadata.pbB\r"
    "MediaMetadata", 3733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "media_metadata_types.proto", &protobuf_RegisterTypes);
  NoParamInput::default_instance_ = new NoParamInput();
  NoParamOutput::default_instance_ = new NoParamOutput();
  MediaServerInfo::default_instance_ = new MediaServerInfo();
  MusicTrackFields::default_instance_ = new MusicTrackFields();
  MusicAlbumFields::default_instance_ = new MusicAlbumFields();
  MusicArtistFields::default_instance_ = new MusicArtistFields();
  MusicGenreFields::default_instance_ = new MusicGenreFields();
  VideoItemFields::default_instance_ = new VideoItemFields();
  VideoAlbumFields::default_instance_ = new VideoAlbumFields();
  ImageItemFields::default_instance_ = new ImageItemFields();
  ImageAlbumFields::default_instance_ = new ImageAlbumFields();
  PlaylistFields::default_instance_ = new PlaylistFields();
  ContentDirectoryObject::default_instance_ = new ContentDirectoryObject();
  MCAMetadataQueryObject::default_instance_ = new MCAMetadataQueryObject();
  GetMetadataSyncStateInput::default_instance_ = new GetMetadataSyncStateInput();
  GetMetadataSyncStateOutput::default_instance_ = new GetMetadataSyncStateOutput();
  ListCollectionsOutput::default_instance_ = new ListCollectionsOutput();
  GetObjectMetadataInput::default_instance_ = new GetObjectMetadataInput();
  GetObjectMetadataOutput::default_instance_ = new GetObjectMetadataOutput();
  NoParamInput::default_instance_->InitAsDefaultInstance();
  NoParamOutput::default_instance_->InitAsDefaultInstance();
  MediaServerInfo::default_instance_->InitAsDefaultInstance();
  MusicTrackFields::default_instance_->InitAsDefaultInstance();
  MusicAlbumFields::default_instance_->InitAsDefaultInstance();
  MusicArtistFields::default_instance_->InitAsDefaultInstance();
  MusicGenreFields::default_instance_->InitAsDefaultInstance();
  VideoItemFields::default_instance_->InitAsDefaultInstance();
  VideoAlbumFields::default_instance_->InitAsDefaultInstance();
  ImageItemFields::default_instance_->InitAsDefaultInstance();
  ImageAlbumFields::default_instance_->InitAsDefaultInstance();
  PlaylistFields::default_instance_->InitAsDefaultInstance();
  ContentDirectoryObject::default_instance_->InitAsDefaultInstance();
  MCAMetadataQueryObject::default_instance_->InitAsDefaultInstance();
  GetMetadataSyncStateInput::default_instance_->InitAsDefaultInstance();
  GetMetadataSyncStateOutput::default_instance_->InitAsDefaultInstance();
  ListCollectionsOutput::default_instance_->InitAsDefaultInstance();
  GetObjectMetadataInput::default_instance_->InitAsDefaultInstance();
  GetObjectMetadataOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_media_5fmetadata_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_media_5fmetadata_5ftypes_2eproto {
  StaticDescriptorInitializer_media_5fmetadata_5ftypes_2eproto() {
    protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  }
} static_descriptor_initializer_media_5fmetadata_5ftypes_2eproto_;

const ::google::protobuf::EnumDescriptor* MediaSource_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaSource_t_descriptor_;
}
bool MediaSource_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MetadataSyncStateType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetadataSyncStateType_t_descriptor_;
}
bool MetadataSyncStateType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CatalogType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatalogType_t_descriptor_;
}
bool CatalogType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DBFilterType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBFilterType_t_descriptor_;
}
bool DBFilterType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MediaType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaType_t_descriptor_;
}
bool MediaType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NoParamInput::NoParamInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoParamInput::InitAsDefaultInstance() {
}

NoParamInput::NoParamInput(const NoParamInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoParamInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoParamInput::~NoParamInput() {
  SharedDtor();
}

void NoParamInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoParamInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoParamInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoParamInput_descriptor_;
}

const NoParamInput& NoParamInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

NoParamInput* NoParamInput::default_instance_ = NULL;

NoParamInput* NoParamInput::New() const {
  return new NoParamInput;
}

void NoParamInput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoParamInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NoParamInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoParamInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoParamInput::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoParamInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoParamInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoParamInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoParamInput::MergeFrom(const NoParamInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoParamInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoParamInput::CopyFrom(const NoParamInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoParamInput::IsInitialized() const {
  
  return true;
}

void NoParamInput::Swap(NoParamInput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoParamInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoParamInput_descriptor_;
  metadata.reflection = NoParamInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NoParamOutput::NoParamOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoParamOutput::InitAsDefaultInstance() {
}

NoParamOutput::NoParamOutput(const NoParamOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoParamOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoParamOutput::~NoParamOutput() {
  SharedDtor();
}

void NoParamOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoParamOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoParamOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoParamOutput_descriptor_;
}

const NoParamOutput& NoParamOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

NoParamOutput* NoParamOutput::default_instance_ = NULL;

NoParamOutput* NoParamOutput::New() const {
  return new NoParamOutput;
}

void NoParamOutput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoParamOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NoParamOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoParamOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoParamOutput::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoParamOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoParamOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoParamOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoParamOutput::MergeFrom(const NoParamOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoParamOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoParamOutput::CopyFrom(const NoParamOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoParamOutput::IsInitialized() const {
  
  return true;
}

void NoParamOutput::Swap(NoParamOutput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoParamOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoParamOutput_descriptor_;
  metadata.reflection = NoParamOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaServerInfo::kCloudDeviceIdFieldNumber;
const int MediaServerInfo::kDeviceNameFieldNumber;
const int MediaServerInfo::kUuidFieldNumber;
const int MediaServerInfo::kIsOnlineFieldNumber;
const int MediaServerInfo::kIsLinkedFieldNumber;
#endif  // !_MSC_VER

MediaServerInfo::MediaServerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaServerInfo::InitAsDefaultInstance() {
}

MediaServerInfo::MediaServerInfo(const MediaServerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaServerInfo::SharedCtor() {
  _cached_size_ = 0;
  cloud_device_id_ = GOOGLE_ULONGLONG(0);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_online_ = false;
  is_linked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaServerInfo::~MediaServerInfo() {
  SharedDtor();
}

void MediaServerInfo::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (this != default_instance_) {
  }
}

void MediaServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaServerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaServerInfo_descriptor_;
}

const MediaServerInfo& MediaServerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

MediaServerInfo* MediaServerInfo::default_instance_ = NULL;

MediaServerInfo* MediaServerInfo::New() const {
  return new MediaServerInfo;
}

void MediaServerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cloud_device_id_ = GOOGLE_ULONGLONG(0);
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    is_online_ = false;
    is_linked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 cloud_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cloud_device_id_)));
          set_has_cloud_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_name;
        break;
      }
      
      // required string device_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_uuid;
        break;
      }
      
      // required string uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_online;
        break;
      }
      
      // optional bool is_online = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_linked;
        break;
      }
      
      // optional bool is_linked = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_linked_)));
          set_has_is_linked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 cloud_device_id = 1;
  if (has_cloud_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->cloud_device_id(), output);
  }
  
  // required string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_name(), output);
  }
  
  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->uuid(), output);
  }
  
  // optional bool is_online = 4 [default = false];
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_online(), output);
  }
  
  // optional bool is_linked = 5 [default = false];
  if (has_is_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_linked(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaServerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 cloud_device_id = 1;
  if (has_cloud_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->cloud_device_id(), target);
  }
  
  // required string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }
  
  // required string uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uuid(), target);
  }
  
  // optional bool is_online = 4 [default = false];
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_online(), target);
  }
  
  // optional bool is_linked = 5 [default = false];
  if (has_is_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_linked(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaServerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 cloud_device_id = 1;
    if (has_cloud_device_id()) {
      total_size += 1 + 8;
    }
    
    // required string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // required string uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional bool is_online = 4 [default = false];
    if (has_is_online()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_linked = 5 [default = false];
    if (has_is_linked()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaServerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaServerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaServerInfo::MergeFrom(const MediaServerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cloud_device_id()) {
      set_cloud_device_id(from.cloud_device_id());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
    if (from.has_is_linked()) {
      set_is_linked(from.is_linked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaServerInfo::CopyFrom(const MediaServerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaServerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MediaServerInfo::Swap(MediaServerInfo* other) {
  if (other != this) {
    std::swap(cloud_device_id_, other->cloud_device_id_);
    std::swap(device_name_, other->device_name_);
    std::swap(uuid_, other->uuid_);
    std::swap(is_online_, other->is_online_);
    std::swap(is_linked_, other->is_linked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaServerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaServerInfo_descriptor_;
  metadata.reflection = MediaServerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusicTrackFields::kAbsolutePathFieldNumber;
const int MusicTrackFields::kTitleFieldNumber;
const int MusicTrackFields::kArtistFieldNumber;
const int MusicTrackFields::kAlbumRefFieldNumber;
const int MusicTrackFields::kTrackNumberFieldNumber;
const int MusicTrackFields::kGenreFieldNumber;
const int MusicTrackFields::kDurationSecFieldNumber;
const int MusicTrackFields::kFileSizeFieldNumber;
const int MusicTrackFields::kFileFormatFieldNumber;
const int MusicTrackFields::kDateTimeFieldNumber;
const int MusicTrackFields::kDateTimeUpdatedFieldNumber;
const int MusicTrackFields::kAlbumNameFieldNumber;
const int MusicTrackFields::kAlbumArtistFieldNumber;
const int MusicTrackFields::kChecksumFieldNumber;
const int MusicTrackFields::kLengthFieldNumber;
const int MusicTrackFields::kComposerFieldNumber;
const int MusicTrackFields::kDiskNumberFieldNumber;
const int MusicTrackFields::kYearFieldNumber;
#endif  // !_MSC_VER

MusicTrackFields::MusicTrackFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MusicTrackFields::InitAsDefaultInstance() {
}

MusicTrackFields::MusicTrackFields(const MusicTrackFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MusicTrackFields::SharedCtor() {
  _cached_size_ = 0;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  track_number_ = 0;
  genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_sec_ = GOOGLE_ULONGLONG(0);
  file_size_ = GOOGLE_ULONGLONG(0);
  file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = GOOGLE_ULONGLONG(0);
  date_time_updated_ = GOOGLE_ULONGLONG(0);
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  checksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = GOOGLE_ULONGLONG(0);
  composer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disk_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  year_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicTrackFields::~MusicTrackFields() {
  SharedDtor();
}

void MusicTrackFields::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    delete artist_;
  }
  if (album_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete album_ref_;
  }
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    delete genre_;
  }
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    delete file_format_;
  }
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (album_artist_ != &::google::protobuf::internal::kEmptyString) {
    delete album_artist_;
  }
  if (checksum_ != &::google::protobuf::internal::kEmptyString) {
    delete checksum_;
  }
  if (composer_ != &::google::protobuf::internal::kEmptyString) {
    delete composer_;
  }
  if (disk_number_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_number_;
  }
  if (year_ != &::google::protobuf::internal::kEmptyString) {
    delete year_;
  }
  if (this != default_instance_) {
  }
}

void MusicTrackFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicTrackFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicTrackFields_descriptor_;
}

const MusicTrackFields& MusicTrackFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

MusicTrackFields* MusicTrackFields::default_instance_ = NULL;

MusicTrackFields* MusicTrackFields::New() const {
  return new MusicTrackFields;
}

void MusicTrackFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::kEmptyString) {
        artist_->clear();
      }
    }
    if (has_album_ref()) {
      if (album_ref_ != &::google::protobuf::internal::kEmptyString) {
        album_ref_->clear();
      }
    }
    track_number_ = 0;
    if (has_genre()) {
      if (genre_ != &::google::protobuf::internal::kEmptyString) {
        genre_->clear();
      }
    }
    duration_sec_ = GOOGLE_ULONGLONG(0);
    file_size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_file_format()) {
      if (file_format_ != &::google::protobuf::internal::kEmptyString) {
        file_format_->clear();
      }
    }
    date_time_ = GOOGLE_ULONGLONG(0);
    date_time_updated_ = GOOGLE_ULONGLONG(0);
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    if (has_album_artist()) {
      if (album_artist_ != &::google::protobuf::internal::kEmptyString) {
        album_artist_->clear();
      }
    }
    if (has_checksum()) {
      if (checksum_ != &::google::protobuf::internal::kEmptyString) {
        checksum_->clear();
      }
    }
    length_ = GOOGLE_ULONGLONG(0);
    if (has_composer()) {
      if (composer_ != &::google::protobuf::internal::kEmptyString) {
        composer_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_disk_number()) {
      if (disk_number_ != &::google::protobuf::internal::kEmptyString) {
        disk_number_->clear();
      }
    }
    if (has_year()) {
      if (year_ != &::google::protobuf::internal::kEmptyString) {
        year_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicTrackFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string absolute_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_artist;
        break;
      }
      
      // required string artist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_album_ref;
        break;
      }
      
      // required string album_ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_ref().data(), this->album_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_track_number;
        break;
      }
      
      // optional int32 track_number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_number_)));
          set_has_track_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_genre;
        break;
      }
      
      // optional string genre = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_duration_sec;
        break;
      }
      
      // optional uint64 duration_sec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_sec_)));
          set_has_duration_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_file_size;
        break;
      }
      
      // optional uint64 file_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_file_format;
        break;
      }
      
      // optional string file_format = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_format().data(), this->file_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_date_time;
        break;
      }
      
      // optional uint64 date_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_)));
          set_has_date_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_date_time_updated;
        break;
      }
      
      // optional uint64 date_time_updated = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_updated_)));
          set_has_date_time_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_album_name;
        break;
      }
      
      // optional string album_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_album_artist;
        break;
      }
      
      // optional string album_artist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_artist().data(), this->album_artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_checksum;
        break;
      }
      
      // optional string checksum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->checksum().data(), this->checksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_length;
        break;
      }
      
      // optional uint64 length = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_composer;
        break;
      }
      
      // optional string composer = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_composer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_composer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->composer().data(), this->composer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_disk_number;
        break;
      }
      
      // optional string disk_number = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_number().data(), this->disk_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_year;
        break;
      }
      
      // optional string year = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_year:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_year()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->year().data(), this->year().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MusicTrackFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string absolute_path = 1;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->absolute_path(), output);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // required string artist = 3;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->artist(), output);
  }
  
  // required string album_ref = 4;
  if (has_album_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_ref().data(), this->album_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->album_ref(), output);
  }
  
  // optional int32 track_number = 5;
  if (has_track_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->track_number(), output);
  }
  
  // optional string genre = 6;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->genre(), output);
  }
  
  // optional uint64 duration_sec = 7;
  if (has_duration_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->duration_sec(), output);
  }
  
  // optional uint64 file_size = 8;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->file_size(), output);
  }
  
  // optional string file_format = 9;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->file_format(), output);
  }
  
  // optional uint64 date_time = 10;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->date_time(), output);
  }
  
  // optional uint64 date_time_updated = 11;
  if (has_date_time_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->date_time_updated(), output);
  }
  
  // optional string album_name = 12;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->album_name(), output);
  }
  
  // optional string album_artist = 13;
  if (has_album_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_artist().data(), this->album_artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->album_artist(), output);
  }
  
  // optional string checksum = 14;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->checksum(), output);
  }
  
  // optional uint64 length = 15;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->length(), output);
  }
  
  // optional string composer = 16;
  if (has_composer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->composer().data(), this->composer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->composer(), output);
  }
  
  // optional string disk_number = 17;
  if (has_disk_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_number().data(), this->disk_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->disk_number(), output);
  }
  
  // optional string year = 18;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->year(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MusicTrackFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string absolute_path = 1;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->absolute_path(), target);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // required string artist = 3;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->artist(), target);
  }
  
  // required string album_ref = 4;
  if (has_album_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_ref().data(), this->album_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album_ref(), target);
  }
  
  // optional int32 track_number = 5;
  if (has_track_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->track_number(), target);
  }
  
  // optional string genre = 6;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->genre(), target);
  }
  
  // optional uint64 duration_sec = 7;
  if (has_duration_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->duration_sec(), target);
  }
  
  // optional uint64 file_size = 8;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_size(), target);
  }
  
  // optional string file_format = 9;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->file_format(), target);
  }
  
  // optional uint64 date_time = 10;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->date_time(), target);
  }
  
  // optional uint64 date_time_updated = 11;
  if (has_date_time_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->date_time_updated(), target);
  }
  
  // optional string album_name = 12;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->album_name(), target);
  }
  
  // optional string album_artist = 13;
  if (has_album_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_artist().data(), this->album_artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->album_artist(), target);
  }
  
  // optional string checksum = 14;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->checksum().data(), this->checksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->checksum(), target);
  }
  
  // optional uint64 length = 15;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->length(), target);
  }
  
  // optional string composer = 16;
  if (has_composer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->composer().data(), this->composer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->composer(), target);
  }
  
  // optional string disk_number = 17;
  if (has_disk_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_number().data(), this->disk_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->disk_number(), target);
  }
  
  // optional string year = 18;
  if (has_year()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->year().data(), this->year().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->year(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MusicTrackFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string absolute_path = 1;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string artist = 3;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }
    
    // required string album_ref = 4;
    if (has_album_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_ref());
    }
    
    // optional int32 track_number = 5;
    if (has_track_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_number());
    }
    
    // optional string genre = 6;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // optional uint64 duration_sec = 7;
    if (has_duration_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration_sec());
    }
    
    // optional uint64 file_size = 8;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string file_format = 9;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }
    
    // optional uint64 date_time = 10;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time());
    }
    
    // optional uint64 date_time_updated = 11;
    if (has_date_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time_updated());
    }
    
    // optional string album_name = 12;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // optional string album_artist = 13;
    if (has_album_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_artist());
    }
    
    // optional string checksum = 14;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->checksum());
    }
    
    // optional uint64 length = 15;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }
    
    // optional string composer = 16;
    if (has_composer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->composer());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string disk_number = 17;
    if (has_disk_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_number());
    }
    
    // optional string year = 18;
    if (has_year()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->year());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicTrackFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicTrackFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicTrackFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicTrackFields::MergeFrom(const MusicTrackFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_artist()) {
      set_artist(from.artist());
    }
    if (from.has_album_ref()) {
      set_album_ref(from.album_ref());
    }
    if (from.has_track_number()) {
      set_track_number(from.track_number());
    }
    if (from.has_genre()) {
      set_genre(from.genre());
    }
    if (from.has_duration_sec()) {
      set_duration_sec(from.duration_sec());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_file_format()) {
      set_file_format(from.file_format());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_date_time_updated()) {
      set_date_time_updated(from.date_time_updated());
    }
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_album_artist()) {
      set_album_artist(from.album_artist());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_composer()) {
      set_composer(from.composer());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_disk_number()) {
      set_disk_number(from.disk_number());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicTrackFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicTrackFields::CopyFrom(const MusicTrackFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicTrackFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MusicTrackFields::Swap(MusicTrackFields* other) {
  if (other != this) {
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(title_, other->title_);
    std::swap(artist_, other->artist_);
    std::swap(album_ref_, other->album_ref_);
    std::swap(track_number_, other->track_number_);
    std::swap(genre_, other->genre_);
    std::swap(duration_sec_, other->duration_sec_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_format_, other->file_format_);
    std::swap(date_time_, other->date_time_);
    std::swap(date_time_updated_, other->date_time_updated_);
    std::swap(album_name_, other->album_name_);
    std::swap(album_artist_, other->album_artist_);
    std::swap(checksum_, other->checksum_);
    std::swap(length_, other->length_);
    std::swap(composer_, other->composer_);
    std::swap(disk_number_, other->disk_number_);
    std::swap(year_, other->year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicTrackFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicTrackFields_descriptor_;
  metadata.reflection = MusicTrackFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusicAlbumFields::kAlbumNameFieldNumber;
const int MusicAlbumFields::kAlbumArtistFieldNumber;
const int MusicAlbumFields::kAlbumThumbnailFieldNumber;
const int MusicAlbumFields::kAlbumTrackcountFieldNumber;
const int MusicAlbumFields::kAlbumTracksizeFieldNumber;
#endif  // !_MSC_VER

MusicAlbumFields::MusicAlbumFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MusicAlbumFields::InitAsDefaultInstance() {
}

MusicAlbumFields::MusicAlbumFields(const MusicAlbumFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MusicAlbumFields::SharedCtor() {
  _cached_size_ = 0;
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_trackcount_ = 0u;
  album_tracksize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicAlbumFields::~MusicAlbumFields() {
  SharedDtor();
}

void MusicAlbumFields::SharedDtor() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (album_artist_ != &::google::protobuf::internal::kEmptyString) {
    delete album_artist_;
  }
  if (album_thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    delete album_thumbnail_;
  }
  if (this != default_instance_) {
  }
}

void MusicAlbumFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicAlbumFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicAlbumFields_descriptor_;
}

const MusicAlbumFields& MusicAlbumFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

MusicAlbumFields* MusicAlbumFields::default_instance_ = NULL;

MusicAlbumFields* MusicAlbumFields::New() const {
  return new MusicAlbumFields;
}

void MusicAlbumFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    if (has_album_artist()) {
      if (album_artist_ != &::google::protobuf::internal::kEmptyString) {
        album_artist_->clear();
      }
    }
    if (has_album_thumbnail()) {
      if (album_thumbnail_ != &::google::protobuf::internal::kEmptyString) {
        album_thumbnail_->clear();
      }
    }
    album_trackcount_ = 0u;
    album_tracksize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicAlbumFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string album_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_album_artist;
        break;
      }
      
      // optional string album_artist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_artist().data(), this->album_artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_album_thumbnail;
        break;
      }
      
      // optional string album_thumbnail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_thumbnail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_thumbnail().data(), this->album_thumbnail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_album_trackcount;
        break;
      }
      
      // optional uint32 album_trackcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_album_trackcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &album_trackcount_)));
          set_has_album_trackcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_album_tracksize;
        break;
      }
      
      // optional uint64 album_tracksize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_album_tracksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &album_tracksize_)));
          set_has_album_tracksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MusicAlbumFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string album_name = 1;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->album_name(), output);
  }
  
  // optional string album_artist = 2;
  if (has_album_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_artist().data(), this->album_artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->album_artist(), output);
  }
  
  // optional string album_thumbnail = 3;
  if (has_album_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_thumbnail().data(), this->album_thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->album_thumbnail(), output);
  }
  
  // optional uint32 album_trackcount = 4;
  if (has_album_trackcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->album_trackcount(), output);
  }
  
  // optional uint64 album_tracksize = 5;
  if (has_album_tracksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->album_tracksize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MusicAlbumFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string album_name = 1;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->album_name(), target);
  }
  
  // optional string album_artist = 2;
  if (has_album_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_artist().data(), this->album_artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->album_artist(), target);
  }
  
  // optional string album_thumbnail = 3;
  if (has_album_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_thumbnail().data(), this->album_thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->album_thumbnail(), target);
  }
  
  // optional uint32 album_trackcount = 4;
  if (has_album_trackcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->album_trackcount(), target);
  }
  
  // optional uint64 album_tracksize = 5;
  if (has_album_tracksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->album_tracksize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MusicAlbumFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string album_name = 1;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // optional string album_artist = 2;
    if (has_album_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_artist());
    }
    
    // optional string album_thumbnail = 3;
    if (has_album_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_thumbnail());
    }
    
    // optional uint32 album_trackcount = 4;
    if (has_album_trackcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->album_trackcount());
    }
    
    // optional uint64 album_tracksize = 5;
    if (has_album_tracksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->album_tracksize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicAlbumFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicAlbumFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicAlbumFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicAlbumFields::MergeFrom(const MusicAlbumFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_album_artist()) {
      set_album_artist(from.album_artist());
    }
    if (from.has_album_thumbnail()) {
      set_album_thumbnail(from.album_thumbnail());
    }
    if (from.has_album_trackcount()) {
      set_album_trackcount(from.album_trackcount());
    }
    if (from.has_album_tracksize()) {
      set_album_tracksize(from.album_tracksize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicAlbumFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicAlbumFields::CopyFrom(const MusicAlbumFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicAlbumFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MusicAlbumFields::Swap(MusicAlbumFields* other) {
  if (other != this) {
    std::swap(album_name_, other->album_name_);
    std::swap(album_artist_, other->album_artist_);
    std::swap(album_thumbnail_, other->album_thumbnail_);
    std::swap(album_trackcount_, other->album_trackcount_);
    std::swap(album_tracksize_, other->album_tracksize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicAlbumFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicAlbumFields_descriptor_;
  metadata.reflection = MusicAlbumFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusicArtistFields::kArtistFieldNumber;
const int MusicArtistFields::kAlbumCountFieldNumber;
const int MusicArtistFields::kTrackCountFieldNumber;
const int MusicArtistFields::kItemTotalSizeFieldNumber;
#endif  // !_MSC_VER

MusicArtistFields::MusicArtistFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MusicArtistFields::InitAsDefaultInstance() {
}

MusicArtistFields::MusicArtistFields(const MusicArtistFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MusicArtistFields::SharedCtor() {
  _cached_size_ = 0;
  artist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_count_ = 0u;
  track_count_ = 0u;
  item_total_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicArtistFields::~MusicArtistFields() {
  SharedDtor();
}

void MusicArtistFields::SharedDtor() {
  if (artist_ != &::google::protobuf::internal::kEmptyString) {
    delete artist_;
  }
  if (this != default_instance_) {
  }
}

void MusicArtistFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicArtistFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicArtistFields_descriptor_;
}

const MusicArtistFields& MusicArtistFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

MusicArtistFields* MusicArtistFields::default_instance_ = NULL;

MusicArtistFields* MusicArtistFields::New() const {
  return new MusicArtistFields;
}

void MusicArtistFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_artist()) {
      if (artist_ != &::google::protobuf::internal::kEmptyString) {
        artist_->clear();
      }
    }
    album_count_ = 0u;
    track_count_ = 0u;
    item_total_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicArtistFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string artist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->artist().data(), this->artist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_album_count;
        break;
      }
      
      // required uint32 album_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_album_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &album_count_)));
          set_has_album_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_track_count;
        break;
      }
      
      // required uint32 track_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &track_count_)));
          set_has_track_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_total_size;
        break;
      }
      
      // required uint64 item_total_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_total_size_)));
          set_has_item_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MusicArtistFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string artist = 1;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->artist(), output);
  }
  
  // required uint32 album_count = 2;
  if (has_album_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->album_count(), output);
  }
  
  // required uint32 track_count = 3;
  if (has_track_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->track_count(), output);
  }
  
  // required uint64 item_total_size = 4;
  if (has_item_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_total_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MusicArtistFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string artist = 1;
  if (has_artist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->artist().data(), this->artist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->artist(), target);
  }
  
  // required uint32 album_count = 2;
  if (has_album_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->album_count(), target);
  }
  
  // required uint32 track_count = 3;
  if (has_track_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->track_count(), target);
  }
  
  // required uint64 item_total_size = 4;
  if (has_item_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_total_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MusicArtistFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string artist = 1;
    if (has_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artist());
    }
    
    // required uint32 album_count = 2;
    if (has_album_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->album_count());
    }
    
    // required uint32 track_count = 3;
    if (has_track_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->track_count());
    }
    
    // required uint64 item_total_size = 4;
    if (has_item_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_total_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicArtistFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicArtistFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicArtistFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicArtistFields::MergeFrom(const MusicArtistFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_artist()) {
      set_artist(from.artist());
    }
    if (from.has_album_count()) {
      set_album_count(from.album_count());
    }
    if (from.has_track_count()) {
      set_track_count(from.track_count());
    }
    if (from.has_item_total_size()) {
      set_item_total_size(from.item_total_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicArtistFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicArtistFields::CopyFrom(const MusicArtistFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicArtistFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MusicArtistFields::Swap(MusicArtistFields* other) {
  if (other != this) {
    std::swap(artist_, other->artist_);
    std::swap(album_count_, other->album_count_);
    std::swap(track_count_, other->track_count_);
    std::swap(item_total_size_, other->item_total_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicArtistFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicArtistFields_descriptor_;
  metadata.reflection = MusicArtistFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusicGenreFields::kGenreFieldNumber;
const int MusicGenreFields::kTrackCountFieldNumber;
const int MusicGenreFields::kAlbumCountFieldNumber;
const int MusicGenreFields::kItemTotalSizeFieldNumber;
#endif  // !_MSC_VER

MusicGenreFields::MusicGenreFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MusicGenreFields::InitAsDefaultInstance() {
}

MusicGenreFields::MusicGenreFields(const MusicGenreFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MusicGenreFields::SharedCtor() {
  _cached_size_ = 0;
  genre_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  track_count_ = 0u;
  album_count_ = 0u;
  item_total_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicGenreFields::~MusicGenreFields() {
  SharedDtor();
}

void MusicGenreFields::SharedDtor() {
  if (genre_ != &::google::protobuf::internal::kEmptyString) {
    delete genre_;
  }
  if (this != default_instance_) {
  }
}

void MusicGenreFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicGenreFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicGenreFields_descriptor_;
}

const MusicGenreFields& MusicGenreFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

MusicGenreFields* MusicGenreFields::default_instance_ = NULL;

MusicGenreFields* MusicGenreFields::New() const {
  return new MusicGenreFields;
}

void MusicGenreFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_genre()) {
      if (genre_ != &::google::protobuf::internal::kEmptyString) {
        genre_->clear();
      }
    }
    track_count_ = 0u;
    album_count_ = 0u;
    item_total_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicGenreFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string genre = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genre()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->genre().data(), this->genre().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_track_count;
        break;
      }
      
      // required uint32 track_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &track_count_)));
          set_has_track_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_album_count;
        break;
      }
      
      // required uint32 album_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_album_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &album_count_)));
          set_has_album_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_total_size;
        break;
      }
      
      // required uint64 item_total_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_total_size_)));
          set_has_item_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MusicGenreFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string genre = 1;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->genre(), output);
  }
  
  // required uint32 track_count = 2;
  if (has_track_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->track_count(), output);
  }
  
  // required uint32 album_count = 3;
  if (has_album_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->album_count(), output);
  }
  
  // required uint64 item_total_size = 4;
  if (has_item_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_total_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MusicGenreFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string genre = 1;
  if (has_genre()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->genre().data(), this->genre().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->genre(), target);
  }
  
  // required uint32 track_count = 2;
  if (has_track_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->track_count(), target);
  }
  
  // required uint32 album_count = 3;
  if (has_album_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->album_count(), target);
  }
  
  // required uint64 item_total_size = 4;
  if (has_item_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_total_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MusicGenreFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string genre = 1;
    if (has_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->genre());
    }
    
    // required uint32 track_count = 2;
    if (has_track_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->track_count());
    }
    
    // required uint32 album_count = 3;
    if (has_album_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->album_count());
    }
    
    // required uint64 item_total_size = 4;
    if (has_item_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_total_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicGenreFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicGenreFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicGenreFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicGenreFields::MergeFrom(const MusicGenreFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_genre()) {
      set_genre(from.genre());
    }
    if (from.has_track_count()) {
      set_track_count(from.track_count());
    }
    if (from.has_album_count()) {
      set_album_count(from.album_count());
    }
    if (from.has_item_total_size()) {
      set_item_total_size(from.item_total_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicGenreFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicGenreFields::CopyFrom(const MusicGenreFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicGenreFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MusicGenreFields::Swap(MusicGenreFields* other) {
  if (other != this) {
    std::swap(genre_, other->genre_);
    std::swap(track_count_, other->track_count_);
    std::swap(album_count_, other->album_count_);
    std::swap(item_total_size_, other->item_total_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicGenreFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicGenreFields_descriptor_;
  metadata.reflection = MusicGenreFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoItemFields::kAbsolutePathFieldNumber;
const int VideoItemFields::kTitleFieldNumber;
const int VideoItemFields::kThumbnailFieldNumber;
const int VideoItemFields::kAlbumNameFieldNumber;
const int VideoItemFields::kDurationSecFieldNumber;
const int VideoItemFields::kFileSizeFieldNumber;
const int VideoItemFields::kDateTimeFieldNumber;
const int VideoItemFields::kFileFormatFieldNumber;
const int VideoItemFields::kDateTimeUpdatedFieldNumber;
#endif  // !_MSC_VER

VideoItemFields::VideoItemFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoItemFields::InitAsDefaultInstance() {
}

VideoItemFields::VideoItemFields(const VideoItemFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoItemFields::SharedCtor() {
  _cached_size_ = 0;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_sec_ = GOOGLE_ULONGLONG(0);
  file_size_ = GOOGLE_ULONGLONG(0);
  date_time_ = GOOGLE_ULONGLONG(0);
  file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_updated_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoItemFields::~VideoItemFields() {
  SharedDtor();
}

void VideoItemFields::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnail_;
  }
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    delete file_format_;
  }
  if (this != default_instance_) {
  }
}

void VideoItemFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoItemFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoItemFields_descriptor_;
}

const VideoItemFields& VideoItemFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

VideoItemFields* VideoItemFields::default_instance_ = NULL;

VideoItemFields* VideoItemFields::New() const {
  return new VideoItemFields;
}

void VideoItemFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_thumbnail()) {
      if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
        thumbnail_->clear();
      }
    }
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    duration_sec_ = GOOGLE_ULONGLONG(0);
    file_size_ = GOOGLE_ULONGLONG(0);
    date_time_ = GOOGLE_ULONGLONG(0);
    if (has_file_format()) {
      if (file_format_ != &::google::protobuf::internal::kEmptyString) {
        file_format_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    date_time_updated_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoItemFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string absolute_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thumbnail;
        break;
      }
      
      // optional string thumbnail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnail().data(), this->thumbnail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_album_name;
        break;
      }
      
      // required string album_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duration_sec;
        break;
      }
      
      // optional uint64 duration_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_sec_)));
          set_has_duration_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_size;
        break;
      }
      
      // optional uint64 file_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_date_time;
        break;
      }
      
      // optional uint64 date_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_)));
          set_has_date_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_file_format;
        break;
      }
      
      // optional string file_format = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_format().data(), this->file_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_date_time_updated;
        break;
      }
      
      // optional uint64 date_time_updated = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_updated_)));
          set_has_date_time_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoItemFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string absolute_path = 1;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->absolute_path(), output);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional string thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail().data(), this->thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->thumbnail(), output);
  }
  
  // required string album_name = 4;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->album_name(), output);
  }
  
  // optional uint64 duration_sec = 5;
  if (has_duration_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->duration_sec(), output);
  }
  
  // optional uint64 file_size = 6;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->file_size(), output);
  }
  
  // optional uint64 date_time = 7;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->date_time(), output);
  }
  
  // optional string file_format = 8;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->file_format(), output);
  }
  
  // optional uint64 date_time_updated = 9;
  if (has_date_time_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->date_time_updated(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoItemFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string absolute_path = 1;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->absolute_path(), target);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional string thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail().data(), this->thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thumbnail(), target);
  }
  
  // required string album_name = 4;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album_name(), target);
  }
  
  // optional uint64 duration_sec = 5;
  if (has_duration_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->duration_sec(), target);
  }
  
  // optional uint64 file_size = 6;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->file_size(), target);
  }
  
  // optional uint64 date_time = 7;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->date_time(), target);
  }
  
  // optional string file_format = 8;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->file_format(), target);
  }
  
  // optional uint64 date_time_updated = 9;
  if (has_date_time_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->date_time_updated(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoItemFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string absolute_path = 1;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string thumbnail = 3;
    if (has_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail());
    }
    
    // required string album_name = 4;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // optional uint64 duration_sec = 5;
    if (has_duration_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration_sec());
    }
    
    // optional uint64 file_size = 6;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }
    
    // optional uint64 date_time = 7;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time());
    }
    
    // optional string file_format = 8;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 date_time_updated = 9;
    if (has_date_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time_updated());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoItemFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoItemFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoItemFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoItemFields::MergeFrom(const VideoItemFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_thumbnail()) {
      set_thumbnail(from.thumbnail());
    }
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_duration_sec()) {
      set_duration_sec(from.duration_sec());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_file_format()) {
      set_file_format(from.file_format());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_date_time_updated()) {
      set_date_time_updated(from.date_time_updated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoItemFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoItemFields::CopyFrom(const VideoItemFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoItemFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void VideoItemFields::Swap(VideoItemFields* other) {
  if (other != this) {
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(title_, other->title_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(album_name_, other->album_name_);
    std::swap(duration_sec_, other->duration_sec_);
    std::swap(file_size_, other->file_size_);
    std::swap(date_time_, other->date_time_);
    std::swap(file_format_, other->file_format_);
    std::swap(date_time_updated_, other->date_time_updated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoItemFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoItemFields_descriptor_;
  metadata.reflection = VideoItemFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoAlbumFields::kCollectionIdRefFieldNumber;
const int VideoAlbumFields::kAlbumNameFieldNumber;
const int VideoAlbumFields::kItemCountFieldNumber;
const int VideoAlbumFields::kItemTotalSizeFieldNumber;
#endif  // !_MSC_VER

VideoAlbumFields::VideoAlbumFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoAlbumFields::InitAsDefaultInstance() {
}

VideoAlbumFields::VideoAlbumFields(const VideoAlbumFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoAlbumFields::SharedCtor() {
  _cached_size_ = 0;
  collection_id_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0u;
  item_total_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoAlbumFields::~VideoAlbumFields() {
  SharedDtor();
}

void VideoAlbumFields::SharedDtor() {
  if (collection_id_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete collection_id_ref_;
  }
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (this != default_instance_) {
  }
}

void VideoAlbumFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoAlbumFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoAlbumFields_descriptor_;
}

const VideoAlbumFields& VideoAlbumFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

VideoAlbumFields* VideoAlbumFields::default_instance_ = NULL;

VideoAlbumFields* VideoAlbumFields::New() const {
  return new VideoAlbumFields;
}

void VideoAlbumFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collection_id_ref()) {
      if (collection_id_ref_ != &::google::protobuf::internal::kEmptyString) {
        collection_id_ref_->clear();
      }
    }
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    item_count_ = 0u;
    item_total_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoAlbumFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collection_id_ref = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id_ref().data(), this->collection_id_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_album_name;
        break;
      }
      
      // required string album_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // required uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_total_size;
        break;
      }
      
      // required uint64 item_total_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_total_size_)));
          set_has_item_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoAlbumFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string collection_id_ref = 1;
  if (has_collection_id_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id_ref().data(), this->collection_id_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collection_id_ref(), output);
  }
  
  // required string album_name = 2;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->album_name(), output);
  }
  
  // required uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  // required uint64 item_total_size = 4;
  if (has_item_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_total_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoAlbumFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string collection_id_ref = 1;
  if (has_collection_id_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id_ref().data(), this->collection_id_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection_id_ref(), target);
  }
  
  // required string album_name = 2;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->album_name(), target);
  }
  
  // required uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  // required uint64 item_total_size = 4;
  if (has_item_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_total_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoAlbumFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string collection_id_ref = 1;
    if (has_collection_id_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_id_ref());
    }
    
    // required string album_name = 2;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // required uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // required uint64 item_total_size = 4;
    if (has_item_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_total_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoAlbumFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoAlbumFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoAlbumFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoAlbumFields::MergeFrom(const VideoAlbumFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collection_id_ref()) {
      set_collection_id_ref(from.collection_id_ref());
    }
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_total_size()) {
      set_item_total_size(from.item_total_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoAlbumFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoAlbumFields::CopyFrom(const VideoAlbumFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoAlbumFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void VideoAlbumFields::Swap(VideoAlbumFields* other) {
  if (other != this) {
    std::swap(collection_id_ref_, other->collection_id_ref_);
    std::swap(album_name_, other->album_name_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_total_size_, other->item_total_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoAlbumFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoAlbumFields_descriptor_;
  metadata.reflection = VideoAlbumFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageItemFields::kAbsolutePathFieldNumber;
const int ImageItemFields::kTitleFieldNumber;
const int ImageItemFields::kThumbnailFieldNumber;
const int ImageItemFields::kAlbumNameFieldNumber;
const int ImageItemFields::kDateTimeFieldNumber;
const int ImageItemFields::kFileSizeFieldNumber;
const int ImageItemFields::kFileFormatFieldNumber;
const int ImageItemFields::kDateTimeUpdatedFieldNumber;
const int ImageItemFields::kDimensionsFieldNumber;
const int ImageItemFields::kOrientationFieldNumber;
const int ImageItemFields::kCompIdFieldNumber;
const int ImageItemFields::kSpecialFormatFlagFieldNumber;
const int ImageItemFields::kAlbumRefFieldNumber;
#endif  // !_MSC_VER

ImageItemFields::ImageItemFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageItemFields::InitAsDefaultInstance() {
}

ImageItemFields::ImageItemFields(const ImageItemFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageItemFields::SharedCtor() {
  _cached_size_ = 0;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = GOOGLE_ULONGLONG(0);
  file_size_ = GOOGLE_ULONGLONG(0);
  file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_updated_ = GOOGLE_ULONGLONG(0);
  dimensions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orientation_ = 0u;
  comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  special_format_flag_ = 0u;
  album_ref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageItemFields::~ImageItemFields() {
  SharedDtor();
}

void ImageItemFields::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnail_;
  }
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    delete file_format_;
  }
  if (dimensions_ != &::google::protobuf::internal::kEmptyString) {
    delete dimensions_;
  }
  if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
    delete comp_id_;
  }
  if (album_ref_ != &::google::protobuf::internal::kEmptyString) {
    delete album_ref_;
  }
  if (this != default_instance_) {
  }
}

void ImageItemFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageItemFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageItemFields_descriptor_;
}

const ImageItemFields& ImageItemFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

ImageItemFields* ImageItemFields::default_instance_ = NULL;

ImageItemFields* ImageItemFields::New() const {
  return new ImageItemFields;
}

void ImageItemFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_thumbnail()) {
      if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
        thumbnail_->clear();
      }
    }
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    date_time_ = GOOGLE_ULONGLONG(0);
    file_size_ = GOOGLE_ULONGLONG(0);
    if (has_file_format()) {
      if (file_format_ != &::google::protobuf::internal::kEmptyString) {
        file_format_->clear();
      }
    }
    date_time_updated_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dimensions()) {
      if (dimensions_ != &::google::protobuf::internal::kEmptyString) {
        dimensions_->clear();
      }
    }
    orientation_ = 0u;
    if (has_comp_id()) {
      if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
        comp_id_->clear();
      }
    }
    special_format_flag_ = 0u;
    if (has_album_ref()) {
      if (album_ref_ != &::google::protobuf::internal::kEmptyString) {
        album_ref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageItemFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string absolute_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thumbnail;
        break;
      }
      
      // optional string thumbnail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnail().data(), this->thumbnail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_album_name;
        break;
      }
      
      // required string album_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_date_time;
        break;
      }
      
      // required uint64 date_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_)));
          set_has_date_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_size;
        break;
      }
      
      // optional uint64 file_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_file_format;
        break;
      }
      
      // optional string file_format = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_format().data(), this->file_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_date_time_updated;
        break;
      }
      
      // optional uint64 date_time_updated = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_updated_)));
          set_has_date_time_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dimensions;
        break;
      }
      
      // optional string dimensions = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dimensions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dimensions().data(), this->dimensions().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_orientation;
        break;
      }
      
      // optional uint32 orientation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_comp_id;
        break;
      }
      
      // optional string comp_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comp_id().data(), this->comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_special_format_flag;
        break;
      }
      
      // optional uint32 special_format_flag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_format_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_format_flag_)));
          set_has_special_format_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_album_ref;
        break;
      }
      
      // optional string album_ref = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_ref:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_ref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_ref().data(), this->album_ref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageItemFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string absolute_path = 1;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->absolute_path(), output);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // optional string thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail().data(), this->thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->thumbnail(), output);
  }
  
  // required string album_name = 4;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->album_name(), output);
  }
  
  // required uint64 date_time = 5;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->date_time(), output);
  }
  
  // optional uint64 file_size = 6;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->file_size(), output);
  }
  
  // optional string file_format = 9;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->file_format(), output);
  }
  
  // optional uint64 date_time_updated = 10;
  if (has_date_time_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->date_time_updated(), output);
  }
  
  // optional string dimensions = 11;
  if (has_dimensions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dimensions().data(), this->dimensions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->dimensions(), output);
  }
  
  // optional uint32 orientation = 12;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->orientation(), output);
  }
  
  // optional string comp_id = 13;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_id().data(), this->comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->comp_id(), output);
  }
  
  // optional uint32 special_format_flag = 14;
  if (has_special_format_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->special_format_flag(), output);
  }
  
  // optional string album_ref = 15;
  if (has_album_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_ref().data(), this->album_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->album_ref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageItemFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string absolute_path = 1;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->absolute_path(), target);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // optional string thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail().data(), this->thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thumbnail(), target);
  }
  
  // required string album_name = 4;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->album_name(), target);
  }
  
  // required uint64 date_time = 5;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->date_time(), target);
  }
  
  // optional uint64 file_size = 6;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->file_size(), target);
  }
  
  // optional string file_format = 9;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->file_format(), target);
  }
  
  // optional uint64 date_time_updated = 10;
  if (has_date_time_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->date_time_updated(), target);
  }
  
  // optional string dimensions = 11;
  if (has_dimensions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dimensions().data(), this->dimensions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dimensions(), target);
  }
  
  // optional uint32 orientation = 12;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->orientation(), target);
  }
  
  // optional string comp_id = 13;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_id().data(), this->comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->comp_id(), target);
  }
  
  // optional uint32 special_format_flag = 14;
  if (has_special_format_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->special_format_flag(), target);
  }
  
  // optional string album_ref = 15;
  if (has_album_ref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_ref().data(), this->album_ref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->album_ref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageItemFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string absolute_path = 1;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string thumbnail = 3;
    if (has_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail());
    }
    
    // required string album_name = 4;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // required uint64 date_time = 5;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time());
    }
    
    // optional uint64 file_size = 6;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }
    
    // optional string file_format = 9;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }
    
    // optional uint64 date_time_updated = 10;
    if (has_date_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time_updated());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string dimensions = 11;
    if (has_dimensions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dimensions());
    }
    
    // optional uint32 orientation = 12;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orientation());
    }
    
    // optional string comp_id = 13;
    if (has_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comp_id());
    }
    
    // optional uint32 special_format_flag = 14;
    if (has_special_format_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_format_flag());
    }
    
    // optional string album_ref = 15;
    if (has_album_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_ref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageItemFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageItemFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageItemFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageItemFields::MergeFrom(const ImageItemFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_thumbnail()) {
      set_thumbnail(from.thumbnail());
    }
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_file_format()) {
      set_file_format(from.file_format());
    }
    if (from.has_date_time_updated()) {
      set_date_time_updated(from.date_time_updated());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dimensions()) {
      set_dimensions(from.dimensions());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_special_format_flag()) {
      set_special_format_flag(from.special_format_flag());
    }
    if (from.has_album_ref()) {
      set_album_ref(from.album_ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageItemFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageItemFields::CopyFrom(const ImageItemFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageItemFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void ImageItemFields::Swap(ImageItemFields* other) {
  if (other != this) {
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(title_, other->title_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(album_name_, other->album_name_);
    std::swap(date_time_, other->date_time_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_format_, other->file_format_);
    std::swap(date_time_updated_, other->date_time_updated_);
    std::swap(dimensions_, other->dimensions_);
    std::swap(orientation_, other->orientation_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(special_format_flag_, other->special_format_flag_);
    std::swap(album_ref_, other->album_ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageItemFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageItemFields_descriptor_;
  metadata.reflection = ImageItemFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageAlbumFields::kAlbumNameFieldNumber;
const int ImageAlbumFields::kItemCountFieldNumber;
const int ImageAlbumFields::kItemTotalSizeFieldNumber;
const int ImageAlbumFields::kAlbumThumbnailFieldNumber;
const int ImageAlbumFields::kTimestampFieldNumber;
#endif  // !_MSC_VER

ImageAlbumFields::ImageAlbumFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ImageAlbumFields::InitAsDefaultInstance() {
}

ImageAlbumFields::ImageAlbumFields(const ImageAlbumFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ImageAlbumFields::SharedCtor() {
  _cached_size_ = 0;
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0u;
  item_total_size_ = GOOGLE_ULONGLONG(0);
  album_thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageAlbumFields::~ImageAlbumFields() {
  SharedDtor();
}

void ImageAlbumFields::SharedDtor() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (album_thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    delete album_thumbnail_;
  }
  if (this != default_instance_) {
  }
}

void ImageAlbumFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageAlbumFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageAlbumFields_descriptor_;
}

const ImageAlbumFields& ImageAlbumFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

ImageAlbumFields* ImageAlbumFields::default_instance_ = NULL;

ImageAlbumFields* ImageAlbumFields::New() const {
  return new ImageAlbumFields;
}

void ImageAlbumFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    item_count_ = 0u;
    item_total_size_ = GOOGLE_ULONGLONG(0);
    if (has_album_thumbnail()) {
      if (album_thumbnail_ != &::google::protobuf::internal::kEmptyString) {
        album_thumbnail_->clear();
      }
    }
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageAlbumFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string album_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }
      
      // optional uint32 item_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_total_size;
        break;
      }
      
      // optional uint64 item_total_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_total_size_)));
          set_has_item_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_album_thumbnail;
        break;
      }
      
      // optional string album_thumbnail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_thumbnail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_thumbnail().data(), this->album_thumbnail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timestamp;
        break;
      }
      
      // optional uint64 timestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageAlbumFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string album_name = 2;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->album_name(), output);
  }
  
  // optional uint32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_count(), output);
  }
  
  // optional uint64 item_total_size = 4;
  if (has_item_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_total_size(), output);
  }
  
  // optional string album_thumbnail = 5;
  if (has_album_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_thumbnail().data(), this->album_thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->album_thumbnail(), output);
  }
  
  // optional uint64 timestamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ImageAlbumFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string album_name = 2;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->album_name(), target);
  }
  
  // optional uint32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_count(), target);
  }
  
  // optional uint64 item_total_size = 4;
  if (has_item_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_total_size(), target);
  }
  
  // optional string album_thumbnail = 5;
  if (has_album_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_thumbnail().data(), this->album_thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->album_thumbnail(), target);
  }
  
  // optional uint64 timestamp = 6;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ImageAlbumFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string album_name = 2;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // optional uint32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // optional uint64 item_total_size = 4;
    if (has_item_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_total_size());
    }
    
    // optional string album_thumbnail = 5;
    if (has_album_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_thumbnail());
    }
    
    // optional uint64 timestamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageAlbumFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageAlbumFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageAlbumFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageAlbumFields::MergeFrom(const ImageAlbumFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_total_size()) {
      set_item_total_size(from.item_total_size());
    }
    if (from.has_album_thumbnail()) {
      set_album_thumbnail(from.album_thumbnail());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageAlbumFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageAlbumFields::CopyFrom(const ImageAlbumFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageAlbumFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ImageAlbumFields::Swap(ImageAlbumFields* other) {
  if (other != this) {
    std::swap(album_name_, other->album_name_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_total_size_, other->item_total_size_);
    std::swap(album_thumbnail_, other->album_thumbnail_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageAlbumFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageAlbumFields_descriptor_;
  metadata.reflection = ImageAlbumFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaylistFields::kPlaylistNameFieldNumber;
const int PlaylistFields::kContentRefsFieldNumber;
#endif  // !_MSC_VER

PlaylistFields::PlaylistFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaylistFields::InitAsDefaultInstance() {
}

PlaylistFields::PlaylistFields(const PlaylistFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaylistFields::SharedCtor() {
  _cached_size_ = 0;
  playlist_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaylistFields::~PlaylistFields() {
  SharedDtor();
}

void PlaylistFields::SharedDtor() {
  if (playlist_name_ != &::google::protobuf::internal::kEmptyString) {
    delete playlist_name_;
  }
  if (this != default_instance_) {
  }
}

void PlaylistFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaylistFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaylistFields_descriptor_;
}

const PlaylistFields& PlaylistFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

PlaylistFields* PlaylistFields::default_instance_ = NULL;

PlaylistFields* PlaylistFields::New() const {
  return new PlaylistFields;
}

void PlaylistFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playlist_name()) {
      if (playlist_name_ != &::google::protobuf::internal::kEmptyString) {
        playlist_name_->clear();
      }
    }
  }
  content_refs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaylistFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playlist_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playlist_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playlist_name().data(), this->playlist_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content_refs;
        break;
      }
      
      // repeated string content_refs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_refs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_content_refs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content_refs(0).data(), this->content_refs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content_refs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaylistFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playlist_name = 1;
  if (has_playlist_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playlist_name().data(), this->playlist_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playlist_name(), output);
  }
  
  // repeated string content_refs = 2;
  for (int i = 0; i < this->content_refs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->content_refs(i).data(), this->content_refs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content_refs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaylistFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playlist_name = 1;
  if (has_playlist_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playlist_name().data(), this->playlist_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playlist_name(), target);
  }
  
  // repeated string content_refs = 2;
  for (int i = 0; i < this->content_refs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_refs(i).data(), this->content_refs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->content_refs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaylistFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playlist_name = 1;
    if (has_playlist_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playlist_name());
    }
    
  }
  // repeated string content_refs = 2;
  total_size += 1 * this->content_refs_size();
  for (int i = 0; i < this->content_refs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->content_refs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaylistFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaylistFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaylistFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaylistFields::MergeFrom(const PlaylistFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_refs_.MergeFrom(from.content_refs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playlist_name()) {
      set_playlist_name(from.playlist_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaylistFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaylistFields::CopyFrom(const PlaylistFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaylistFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlaylistFields::Swap(PlaylistFields* other) {
  if (other != this) {
    std::swap(playlist_name_, other->playlist_name_);
    content_refs_.Swap(&other->content_refs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaylistFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaylistFields_descriptor_;
  metadata.reflection = PlaylistFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentDirectoryObject::kObjectIdFieldNumber;
const int ContentDirectoryObject::kOptionalFieldsFieldNumber;
const int ContentDirectoryObject::kSourceFieldNumber;
const int ContentDirectoryObject::kMusicTrackFieldNumber;
const int ContentDirectoryObject::kMusicAlbumFieldNumber;
const int ContentDirectoryObject::kVideoItemFieldNumber;
const int ContentDirectoryObject::kPhotoItemFieldNumber;
const int ContentDirectoryObject::kPlaylistFieldNumber;
const int ContentDirectoryObject::kPhotoAlbumFieldNumber;
#endif  // !_MSC_VER

ContentDirectoryObject::ContentDirectoryObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContentDirectoryObject::InitAsDefaultInstance() {
  music_track_ = const_cast< ::media_metadata::MusicTrackFields*>(&::media_metadata::MusicTrackFields::default_instance());
  music_album_ = const_cast< ::media_metadata::MusicAlbumFields*>(&::media_metadata::MusicAlbumFields::default_instance());
  video_item_ = const_cast< ::media_metadata::VideoItemFields*>(&::media_metadata::VideoItemFields::default_instance());
  photo_item_ = const_cast< ::media_metadata::ImageItemFields*>(&::media_metadata::ImageItemFields::default_instance());
  playlist_ = const_cast< ::media_metadata::PlaylistFields*>(&::media_metadata::PlaylistFields::default_instance());
  photo_album_ = const_cast< ::media_metadata::ImageAlbumFields*>(&::media_metadata::ImageAlbumFields::default_instance());
}

ContentDirectoryObject::ContentDirectoryObject(const ContentDirectoryObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContentDirectoryObject::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = 1;
  music_track_ = NULL;
  music_album_ = NULL;
  video_item_ = NULL;
  photo_item_ = NULL;
  playlist_ = NULL;
  photo_album_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentDirectoryObject::~ContentDirectoryObject() {
  SharedDtor();
}

void ContentDirectoryObject::SharedDtor() {
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    delete object_id_;
  }
  if (this != default_instance_) {
    delete music_track_;
    delete music_album_;
    delete video_item_;
    delete photo_item_;
    delete playlist_;
    delete photo_album_;
  }
}

void ContentDirectoryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentDirectoryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentDirectoryObject_descriptor_;
}

const ContentDirectoryObject& ContentDirectoryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

ContentDirectoryObject* ContentDirectoryObject::default_instance_ = NULL;

ContentDirectoryObject* ContentDirectoryObject::New() const {
  return new ContentDirectoryObject;
}

void ContentDirectoryObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_object_id()) {
      if (object_id_ != &::google::protobuf::internal::kEmptyString) {
        object_id_->clear();
      }
    }
    source_ = 1;
    if (has_music_track()) {
      if (music_track_ != NULL) music_track_->::media_metadata::MusicTrackFields::Clear();
    }
    if (has_music_album()) {
      if (music_album_ != NULL) music_album_->::media_metadata::MusicAlbumFields::Clear();
    }
    if (has_video_item()) {
      if (video_item_ != NULL) video_item_->::media_metadata::VideoItemFields::Clear();
    }
    if (has_photo_item()) {
      if (photo_item_ != NULL) photo_item_->::media_metadata::ImageItemFields::Clear();
    }
    if (has_playlist()) {
      if (playlist_ != NULL) playlist_->::media_metadata::PlaylistFields::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_photo_album()) {
      if (photo_album_ != NULL) photo_album_->::media_metadata::ImageAlbumFields::Clear();
    }
  }
  optional_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentDirectoryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_optional_fields;
        break;
      }
      
      // repeated string optional_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optional_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->optional_fields(0).data(), this->optional_fields(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_optional_fields;
        if (input->ExpectTag(24)) goto parse_source;
        break;
      }
      
      // required .media_metadata.MediaSource_t source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::MediaSource_t_IsValid(value)) {
            set_source(static_cast< media_metadata::MediaSource_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_music_track;
        break;
      }
      
      // optional .media_metadata.MusicTrackFields music_track = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_music_album;
        break;
      }
      
      // optional .media_metadata.MusicAlbumFields music_album = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_video_item;
        break;
      }
      
      // optional .media_metadata.VideoItemFields video_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_photo_item;
        break;
      }
      
      // optional .media_metadata.ImageItemFields photo_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_photo_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playlist;
        break;
      }
      
      // optional .media_metadata.PlaylistFields playlist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_photo_album;
        break;
      }
      
      // optional .media_metadata.ImageAlbumFields photo_album = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_photo_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photo_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContentDirectoryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->object_id(), output);
  }
  
  // repeated string optional_fields = 2;
  for (int i = 0; i < this->optional_fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->optional_fields(i).data(), this->optional_fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->optional_fields(i), output);
  }
  
  // required .media_metadata.MediaSource_t source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }
  
  // optional .media_metadata.MusicTrackFields music_track = 4;
  if (has_music_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->music_track(), output);
  }
  
  // optional .media_metadata.MusicAlbumFields music_album = 5;
  if (has_music_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->music_album(), output);
  }
  
  // optional .media_metadata.VideoItemFields video_item = 6;
  if (has_video_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->video_item(), output);
  }
  
  // optional .media_metadata.ImageItemFields photo_item = 7;
  if (has_photo_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->photo_item(), output);
  }
  
  // optional .media_metadata.PlaylistFields playlist = 8;
  if (has_playlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->playlist(), output);
  }
  
  // optional .media_metadata.ImageAlbumFields photo_album = 9;
  if (has_photo_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->photo_album(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContentDirectoryObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }
  
  // repeated string optional_fields = 2;
  for (int i = 0; i < this->optional_fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optional_fields(i).data(), this->optional_fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->optional_fields(i), target);
  }
  
  // required .media_metadata.MediaSource_t source = 3;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source(), target);
  }
  
  // optional .media_metadata.MusicTrackFields music_track = 4;
  if (has_music_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->music_track(), target);
  }
  
  // optional .media_metadata.MusicAlbumFields music_album = 5;
  if (has_music_album()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->music_album(), target);
  }
  
  // optional .media_metadata.VideoItemFields video_item = 6;
  if (has_video_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->video_item(), target);
  }
  
  // optional .media_metadata.ImageItemFields photo_item = 7;
  if (has_photo_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->photo_item(), target);
  }
  
  // optional .media_metadata.PlaylistFields playlist = 8;
  if (has_playlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->playlist(), target);
  }
  
  // optional .media_metadata.ImageAlbumFields photo_album = 9;
  if (has_photo_album()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->photo_album(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContentDirectoryObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_id());
    }
    
    // required .media_metadata.MediaSource_t source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }
    
    // optional .media_metadata.MusicTrackFields music_track = 4;
    if (has_music_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music_track());
    }
    
    // optional .media_metadata.MusicAlbumFields music_album = 5;
    if (has_music_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music_album());
    }
    
    // optional .media_metadata.VideoItemFields video_item = 6;
    if (has_video_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_item());
    }
    
    // optional .media_metadata.ImageItemFields photo_item = 7;
    if (has_photo_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo_item());
    }
    
    // optional .media_metadata.PlaylistFields playlist = 8;
    if (has_playlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playlist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .media_metadata.ImageAlbumFields photo_album = 9;
    if (has_photo_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photo_album());
    }
    
  }
  // repeated string optional_fields = 2;
  total_size += 1 * this->optional_fields_size();
  for (int i = 0; i < this->optional_fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optional_fields(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentDirectoryObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentDirectoryObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentDirectoryObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentDirectoryObject::MergeFrom(const ContentDirectoryObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  optional_fields_.MergeFrom(from.optional_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_music_track()) {
      mutable_music_track()->::media_metadata::MusicTrackFields::MergeFrom(from.music_track());
    }
    if (from.has_music_album()) {
      mutable_music_album()->::media_metadata::MusicAlbumFields::MergeFrom(from.music_album());
    }
    if (from.has_video_item()) {
      mutable_video_item()->::media_metadata::VideoItemFields::MergeFrom(from.video_item());
    }
    if (from.has_photo_item()) {
      mutable_photo_item()->::media_metadata::ImageItemFields::MergeFrom(from.photo_item());
    }
    if (from.has_playlist()) {
      mutable_playlist()->::media_metadata::PlaylistFields::MergeFrom(from.playlist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photo_album()) {
      mutable_photo_album()->::media_metadata::ImageAlbumFields::MergeFrom(from.photo_album());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentDirectoryObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentDirectoryObject::CopyFrom(const ContentDirectoryObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentDirectoryObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_music_track()) {
    if (!this->music_track().IsInitialized()) return false;
  }
  if (has_music_album()) {
    if (!this->music_album().IsInitialized()) return false;
  }
  if (has_video_item()) {
    if (!this->video_item().IsInitialized()) return false;
  }
  if (has_photo_item()) {
    if (!this->photo_item().IsInitialized()) return false;
  }
  if (has_playlist()) {
    if (!this->playlist().IsInitialized()) return false;
  }
  if (has_photo_album()) {
    if (!this->photo_album().IsInitialized()) return false;
  }
  return true;
}

void ContentDirectoryObject::Swap(ContentDirectoryObject* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    optional_fields_.Swap(&other->optional_fields_);
    std::swap(source_, other->source_);
    std::swap(music_track_, other->music_track_);
    std::swap(music_album_, other->music_album_);
    std::swap(video_item_, other->video_item_);
    std::swap(photo_item_, other->photo_item_);
    std::swap(playlist_, other->playlist_);
    std::swap(photo_album_, other->photo_album_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentDirectoryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentDirectoryObject_descriptor_;
  metadata.reflection = ContentDirectoryObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MCAMetadataQueryObject::kCdoFieldNumber;
const int MCAMetadataQueryObject::kCollectionIdFieldNumber;
const int MCAMetadataQueryObject::kMusicArtistFieldNumber;
const int MCAMetadataQueryObject::kMusicGenreFieldNumber;
const int MCAMetadataQueryObject::kVideoAlbumFieldNumber;
const int MCAMetadataQueryObject::kUrlFieldNumber;
const int MCAMetadataQueryObject::kThumbnailUrlFieldNumber;
#endif  // !_MSC_VER

MCAMetadataQueryObject::MCAMetadataQueryObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MCAMetadataQueryObject::InitAsDefaultInstance() {
  cdo_ = const_cast< ::media_metadata::ContentDirectoryObject*>(&::media_metadata::ContentDirectoryObject::default_instance());
  music_artist_ = const_cast< ::media_metadata::MusicArtistFields*>(&::media_metadata::MusicArtistFields::default_instance());
  music_genre_ = const_cast< ::media_metadata::MusicGenreFields*>(&::media_metadata::MusicGenreFields::default_instance());
  video_album_ = const_cast< ::media_metadata::VideoAlbumFields*>(&::media_metadata::VideoAlbumFields::default_instance());
}

MCAMetadataQueryObject::MCAMetadataQueryObject(const MCAMetadataQueryObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MCAMetadataQueryObject::SharedCtor() {
  _cached_size_ = 0;
  cdo_ = NULL;
  collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  music_artist_ = NULL;
  music_genre_ = NULL;
  video_album_ = NULL;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbnail_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MCAMetadataQueryObject::~MCAMetadataQueryObject() {
  SharedDtor();
}

void MCAMetadataQueryObject::SharedDtor() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete collection_id_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (thumbnail_url_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnail_url_;
  }
  if (this != default_instance_) {
    delete cdo_;
    delete music_artist_;
    delete music_genre_;
    delete video_album_;
  }
}

void MCAMetadataQueryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCAMetadataQueryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCAMetadataQueryObject_descriptor_;
}

const MCAMetadataQueryObject& MCAMetadataQueryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

MCAMetadataQueryObject* MCAMetadataQueryObject::default_instance_ = NULL;

MCAMetadataQueryObject* MCAMetadataQueryObject::New() const {
  return new MCAMetadataQueryObject;
}

void MCAMetadataQueryObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cdo()) {
      if (cdo_ != NULL) cdo_->::media_metadata::ContentDirectoryObject::Clear();
    }
    if (has_collection_id()) {
      if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
        collection_id_->clear();
      }
    }
    if (has_music_artist()) {
      if (music_artist_ != NULL) music_artist_->::media_metadata::MusicArtistFields::Clear();
    }
    if (has_music_genre()) {
      if (music_genre_ != NULL) music_genre_->::media_metadata::MusicGenreFields::Clear();
    }
    if (has_video_album()) {
      if (video_album_ != NULL) video_album_->::media_metadata::VideoAlbumFields::Clear();
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_thumbnail_url()) {
      if (thumbnail_url_ != &::google::protobuf::internal::kEmptyString) {
        thumbnail_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MCAMetadataQueryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media_metadata.ContentDirectoryObject cdo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collection_id;
        break;
      }
      
      // optional string collection_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id().data(), this->collection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_music_artist;
        break;
      }
      
      // optional .media_metadata.MusicArtistFields music_artist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music_artist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_artist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_music_genre;
        break;
      }
      
      // optional .media_metadata.MusicGenreFields music_genre = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_music_genre:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music_genre()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_video_album;
        break;
      }
      
      // optional .media_metadata.VideoAlbumFields video_album = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_url;
        break;
      }
      
      // optional string url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_thumbnail_url;
        break;
      }
      
      // optional string thumbnail_url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnail_url().data(), this->thumbnail_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MCAMetadataQueryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .media_metadata.ContentDirectoryObject cdo = 1;
  if (has_cdo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cdo(), output);
  }
  
  // optional string collection_id = 2;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->collection_id(), output);
  }
  
  // optional .media_metadata.MusicArtistFields music_artist = 3;
  if (has_music_artist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->music_artist(), output);
  }
  
  // optional .media_metadata.MusicGenreFields music_genre = 4;
  if (has_music_genre()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->music_genre(), output);
  }
  
  // optional .media_metadata.VideoAlbumFields video_album = 5;
  if (has_video_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->video_album(), output);
  }
  
  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->url(), output);
  }
  
  // optional string thumbnail_url = 8;
  if (has_thumbnail_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail_url().data(), this->thumbnail_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->thumbnail_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MCAMetadataQueryObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .media_metadata.ContentDirectoryObject cdo = 1;
  if (has_cdo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cdo(), target);
  }
  
  // optional string collection_id = 2;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->collection_id(), target);
  }
  
  // optional .media_metadata.MusicArtistFields music_artist = 3;
  if (has_music_artist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->music_artist(), target);
  }
  
  // optional .media_metadata.MusicGenreFields music_genre = 4;
  if (has_music_genre()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->music_genre(), target);
  }
  
  // optional .media_metadata.VideoAlbumFields video_album = 5;
  if (has_video_album()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->video_album(), target);
  }
  
  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url(), target);
  }
  
  // optional string thumbnail_url = 8;
  if (has_thumbnail_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail_url().data(), this->thumbnail_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->thumbnail_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MCAMetadataQueryObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .media_metadata.ContentDirectoryObject cdo = 1;
    if (has_cdo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdo());
    }
    
    // optional string collection_id = 2;
    if (has_collection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_id());
    }
    
    // optional .media_metadata.MusicArtistFields music_artist = 3;
    if (has_music_artist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music_artist());
    }
    
    // optional .media_metadata.MusicGenreFields music_genre = 4;
    if (has_music_genre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music_genre());
    }
    
    // optional .media_metadata.VideoAlbumFields video_album = 5;
    if (has_video_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_album());
    }
    
    // optional string url = 7;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string thumbnail_url = 8;
    if (has_thumbnail_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCAMetadataQueryObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MCAMetadataQueryObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MCAMetadataQueryObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MCAMetadataQueryObject::MergeFrom(const MCAMetadataQueryObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cdo()) {
      mutable_cdo()->::media_metadata::ContentDirectoryObject::MergeFrom(from.cdo());
    }
    if (from.has_collection_id()) {
      set_collection_id(from.collection_id());
    }
    if (from.has_music_artist()) {
      mutable_music_artist()->::media_metadata::MusicArtistFields::MergeFrom(from.music_artist());
    }
    if (from.has_music_genre()) {
      mutable_music_genre()->::media_metadata::MusicGenreFields::MergeFrom(from.music_genre());
    }
    if (from.has_video_album()) {
      mutable_video_album()->::media_metadata::VideoAlbumFields::MergeFrom(from.video_album());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_thumbnail_url()) {
      set_thumbnail_url(from.thumbnail_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MCAMetadataQueryObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCAMetadataQueryObject::CopyFrom(const MCAMetadataQueryObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCAMetadataQueryObject::IsInitialized() const {
  
  if (has_cdo()) {
    if (!this->cdo().IsInitialized()) return false;
  }
  if (has_music_artist()) {
    if (!this->music_artist().IsInitialized()) return false;
  }
  if (has_music_genre()) {
    if (!this->music_genre().IsInitialized()) return false;
  }
  if (has_video_album()) {
    if (!this->video_album().IsInitialized()) return false;
  }
  return true;
}

void MCAMetadataQueryObject::Swap(MCAMetadataQueryObject* other) {
  if (other != this) {
    std::swap(cdo_, other->cdo_);
    std::swap(collection_id_, other->collection_id_);
    std::swap(music_artist_, other->music_artist_);
    std::swap(music_genre_, other->music_genre_);
    std::swap(video_album_, other->video_album_);
    std::swap(url_, other->url_);
    std::swap(thumbnail_url_, other->thumbnail_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MCAMetadataQueryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MCAMetadataQueryObject_descriptor_;
  metadata.reflection = MCAMetadataQueryObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetMetadataSyncStateInput::GetMetadataSyncStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadataSyncStateInput::InitAsDefaultInstance() {
}

GetMetadataSyncStateInput::GetMetadataSyncStateInput(const GetMetadataSyncStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadataSyncStateInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadataSyncStateInput::~GetMetadataSyncStateInput() {
  SharedDtor();
}

void GetMetadataSyncStateInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMetadataSyncStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadataSyncStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadataSyncStateInput_descriptor_;
}

const GetMetadataSyncStateInput& GetMetadataSyncStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

GetMetadataSyncStateInput* GetMetadataSyncStateInput::default_instance_ = NULL;

GetMetadataSyncStateInput* GetMetadataSyncStateInput::New() const {
  return new GetMetadataSyncStateInput;
}

void GetMetadataSyncStateInput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadataSyncStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetMetadataSyncStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadataSyncStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMetadataSyncStateInput::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadataSyncStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadataSyncStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMetadataSyncStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadataSyncStateInput::MergeFrom(const GetMetadataSyncStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadataSyncStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadataSyncStateInput::CopyFrom(const GetMetadataSyncStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadataSyncStateInput::IsInitialized() const {
  
  return true;
}

void GetMetadataSyncStateInput::Swap(GetMetadataSyncStateInput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadataSyncStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadataSyncStateInput_descriptor_;
  metadata.reflection = GetMetadataSyncStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMetadataSyncStateOutput::kSyncStateFieldNumber;
const int GetMetadataSyncStateOutput::kMetadataUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GetMetadataSyncStateOutput::GetMetadataSyncStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetMetadataSyncStateOutput::InitAsDefaultInstance() {
}

GetMetadataSyncStateOutput::GetMetadataSyncStateOutput(const GetMetadataSyncStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetMetadataSyncStateOutput::SharedCtor() {
  _cached_size_ = 0;
  sync_state_ = 1;
  metadata_update_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMetadataSyncStateOutput::~GetMetadataSyncStateOutput() {
  SharedDtor();
}

void GetMetadataSyncStateOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetMetadataSyncStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMetadataSyncStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMetadataSyncStateOutput_descriptor_;
}

const GetMetadataSyncStateOutput& GetMetadataSyncStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

GetMetadataSyncStateOutput* GetMetadataSyncStateOutput::default_instance_ = NULL;

GetMetadataSyncStateOutput* GetMetadataSyncStateOutput::New() const {
  return new GetMetadataSyncStateOutput;
}

void GetMetadataSyncStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sync_state_ = 1;
    metadata_update_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMetadataSyncStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .media_metadata.MetadataSyncStateType_t sync_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::MetadataSyncStateType_t_IsValid(value)) {
            set_sync_state(static_cast< media_metadata::MetadataSyncStateType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_metadata_update_time;
        break;
      }
      
      // optional fixed64 metadata_update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_metadata_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &metadata_update_time_)));
          set_has_metadata_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetMetadataSyncStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .media_metadata.MetadataSyncStateType_t sync_state = 1;
  if (has_sync_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sync_state(), output);
  }
  
  // optional fixed64 metadata_update_time = 2;
  if (has_metadata_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->metadata_update_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetMetadataSyncStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .media_metadata.MetadataSyncStateType_t sync_state = 1;
  if (has_sync_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sync_state(), target);
  }
  
  // optional fixed64 metadata_update_time = 2;
  if (has_metadata_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->metadata_update_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetMetadataSyncStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .media_metadata.MetadataSyncStateType_t sync_state = 1;
    if (has_sync_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_state());
    }
    
    // optional fixed64 metadata_update_time = 2;
    if (has_metadata_update_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMetadataSyncStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMetadataSyncStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMetadataSyncStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMetadataSyncStateOutput::MergeFrom(const GetMetadataSyncStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sync_state()) {
      set_sync_state(from.sync_state());
    }
    if (from.has_metadata_update_time()) {
      set_metadata_update_time(from.metadata_update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMetadataSyncStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMetadataSyncStateOutput::CopyFrom(const GetMetadataSyncStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMetadataSyncStateOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetMetadataSyncStateOutput::Swap(GetMetadataSyncStateOutput* other) {
  if (other != this) {
    std::swap(sync_state_, other->sync_state_);
    std::swap(metadata_update_time_, other->metadata_update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMetadataSyncStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMetadataSyncStateOutput_descriptor_;
  metadata.reflection = GetMetadataSyncStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCollectionsOutput::kCollectionIdFieldNumber;
const int ListCollectionsOutput::kCollectionTimestampFieldNumber;
#endif  // !_MSC_VER

ListCollectionsOutput::ListCollectionsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCollectionsOutput::InitAsDefaultInstance() {
}

ListCollectionsOutput::ListCollectionsOutput(const ListCollectionsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCollectionsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCollectionsOutput::~ListCollectionsOutput() {
  SharedDtor();
}

void ListCollectionsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListCollectionsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCollectionsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCollectionsOutput_descriptor_;
}

const ListCollectionsOutput& ListCollectionsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

ListCollectionsOutput* ListCollectionsOutput::default_instance_ = NULL;

ListCollectionsOutput* ListCollectionsOutput::New() const {
  return new ListCollectionsOutput;
}

void ListCollectionsOutput::Clear() {
  collection_id_.Clear();
  collection_timestamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCollectionsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string collection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id(0).data(), this->collection_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_collection_id;
        if (input->ExpectTag(16)) goto parse_collection_timestamp;
        break;
      }
      
      // repeated uint64 collection_timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collection_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_collection_timestamp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_collection_timestamp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collection_timestamp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCollectionsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string collection_id = 1;
  for (int i = 0; i < this->collection_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->collection_id(i).data(), this->collection_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collection_id(i), output);
  }
  
  // repeated uint64 collection_timestamp = 2;
  for (int i = 0; i < this->collection_timestamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->collection_timestamp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCollectionsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string collection_id = 1;
  for (int i = 0; i < this->collection_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id(i).data(), this->collection_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->collection_id(i), target);
  }
  
  // repeated uint64 collection_timestamp = 2;
  for (int i = 0; i < this->collection_timestamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->collection_timestamp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCollectionsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated string collection_id = 1;
  total_size += 1 * this->collection_id_size();
  for (int i = 0; i < this->collection_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->collection_id(i));
  }
  
  // repeated uint64 collection_timestamp = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->collection_timestamp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->collection_timestamp(i));
    }
    total_size += 1 * this->collection_timestamp_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCollectionsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCollectionsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCollectionsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCollectionsOutput::MergeFrom(const ListCollectionsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  collection_id_.MergeFrom(from.collection_id_);
  collection_timestamp_.MergeFrom(from.collection_timestamp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCollectionsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCollectionsOutput::CopyFrom(const ListCollectionsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectionsOutput::IsInitialized() const {
  
  return true;
}

void ListCollectionsOutput::Swap(ListCollectionsOutput* other) {
  if (other != this) {
    collection_id_.Swap(&other->collection_id_);
    collection_timestamp_.Swap(&other->collection_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCollectionsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCollectionsOutput_descriptor_;
  metadata.reflection = ListCollectionsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectMetadataInput::kUrlFieldNumber;
const int GetObjectMetadataInput::kObjectIdFieldNumber;
const int GetObjectMetadataInput::kCatalogTypeFieldNumber;
#endif  // !_MSC_VER

GetObjectMetadataInput::GetObjectMetadataInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectMetadataInput::InitAsDefaultInstance() {
}

GetObjectMetadataInput::GetObjectMetadataInput(const GetObjectMetadataInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectMetadataInput::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  catalog_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectMetadataInput::~GetObjectMetadataInput() {
  SharedDtor();
}

void GetObjectMetadataInput::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    delete object_id_;
  }
  if (this != default_instance_) {
  }
}

void GetObjectMetadataInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectMetadataInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectMetadataInput_descriptor_;
}

const GetObjectMetadataInput& GetObjectMetadataInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

GetObjectMetadataInput* GetObjectMetadataInput::default_instance_ = NULL;

GetObjectMetadataInput* GetObjectMetadataInput::New() const {
  return new GetObjectMetadataInput;
}

void GetObjectMetadataInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_object_id()) {
      if (object_id_ != &::google::protobuf::internal::kEmptyString) {
        object_id_->clear();
      }
    }
    catalog_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectMetadataInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_id;
        break;
      }
      
      // optional string object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_catalog_type;
        break;
      }
      
      // optional .media_metadata.CatalogType_t catalog_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catalog_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::CatalogType_t_IsValid(value)) {
            set_catalog_type(static_cast< media_metadata::CatalogType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectMetadataInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }
  
  // optional string object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_id(), output);
  }
  
  // optional .media_metadata.CatalogType_t catalog_type = 3;
  if (has_catalog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->catalog_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectMetadataInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }
  
  // optional string object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_id(), target);
  }
  
  // optional .media_metadata.CatalogType_t catalog_type = 3;
  if (has_catalog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->catalog_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectMetadataInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional string object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_id());
    }
    
    // optional .media_metadata.CatalogType_t catalog_type = 3;
    if (has_catalog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->catalog_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectMetadataInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectMetadataInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectMetadataInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectMetadataInput::MergeFrom(const GetObjectMetadataInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_catalog_type()) {
      set_catalog_type(from.catalog_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectMetadataInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectMetadataInput::CopyFrom(const GetObjectMetadataInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectMetadataInput::IsInitialized() const {
  
  return true;
}

void GetObjectMetadataInput::Swap(GetObjectMetadataInput* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(object_id_, other->object_id_);
    std::swap(catalog_type_, other->catalog_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectMetadataInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectMetadataInput_descriptor_;
  metadata.reflection = GetObjectMetadataInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetObjectMetadataOutput::kMediaTypeFieldNumber;
const int GetObjectMetadataOutput::kAbsolutePathFieldNumber;
const int GetObjectMetadataOutput::kThumbnailFieldNumber;
const int GetObjectMetadataOutput::kFileFormatFieldNumber;
const int GetObjectMetadataOutput::kCompIdFieldNumber;
const int GetObjectMetadataOutput::kSpecialFormatFlagFieldNumber;
#endif  // !_MSC_VER

GetObjectMetadataOutput::GetObjectMetadataOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetObjectMetadataOutput::InitAsDefaultInstance() {
}

GetObjectMetadataOutput::GetObjectMetadataOutput(const GetObjectMetadataOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetObjectMetadataOutput::SharedCtor() {
  _cached_size_ = 0;
  media_type_ = 1;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  special_format_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetObjectMetadataOutput::~GetObjectMetadataOutput() {
  SharedDtor();
}

void GetObjectMetadataOutput::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnail_;
  }
  if (file_format_ != &::google::protobuf::internal::kEmptyString) {
    delete file_format_;
  }
  if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
    delete comp_id_;
  }
  if (this != default_instance_) {
  }
}

void GetObjectMetadataOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetObjectMetadataOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetObjectMetadataOutput_descriptor_;
}

const GetObjectMetadataOutput& GetObjectMetadataOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();  return *default_instance_;
}

GetObjectMetadataOutput* GetObjectMetadataOutput::default_instance_ = NULL;

GetObjectMetadataOutput* GetObjectMetadataOutput::New() const {
  return new GetObjectMetadataOutput;
}

void GetObjectMetadataOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    media_type_ = 1;
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
    if (has_thumbnail()) {
      if (thumbnail_ != &::google::protobuf::internal::kEmptyString) {
        thumbnail_->clear();
      }
    }
    if (has_file_format()) {
      if (file_format_ != &::google::protobuf::internal::kEmptyString) {
        file_format_->clear();
      }
    }
    if (has_comp_id()) {
      if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
        comp_id_->clear();
      }
    }
    special_format_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetObjectMetadataOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .media_metadata.MediaType_t media_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::MediaType_t_IsValid(value)) {
            set_media_type(static_cast< media_metadata::MediaType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_absolute_path;
        break;
      }
      
      // optional string absolute_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absolute_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thumbnail;
        break;
      }
      
      // optional string thumbnail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnail().data(), this->thumbnail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_format;
        break;
      }
      
      // optional string file_format = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_format().data(), this->file_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comp_id;
        break;
      }
      
      // optional string comp_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comp_id().data(), this->comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_special_format_flag;
        break;
      }
      
      // optional uint32 special_format_flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_special_format_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &special_format_flag_)));
          set_has_special_format_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetObjectMetadataOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .media_metadata.MediaType_t media_type = 1;
  if (has_media_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->media_type(), output);
  }
  
  // optional string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->absolute_path(), output);
  }
  
  // optional string thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail().data(), this->thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->thumbnail(), output);
  }
  
  // optional string file_format = 4;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->file_format(), output);
  }
  
  // optional string comp_id = 5;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_id().data(), this->comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comp_id(), output);
  }
  
  // optional uint32 special_format_flag = 6;
  if (has_special_format_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->special_format_flag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetObjectMetadataOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .media_metadata.MediaType_t media_type = 1;
  if (has_media_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->media_type(), target);
  }
  
  // optional string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->absolute_path(), target);
  }
  
  // optional string thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail().data(), this->thumbnail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->thumbnail(), target);
  }
  
  // optional string file_format = 4;
  if (has_file_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_format().data(), this->file_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_format(), target);
  }
  
  // optional string comp_id = 5;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_id().data(), this->comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comp_id(), target);
  }
  
  // optional uint32 special_format_flag = 6;
  if (has_special_format_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->special_format_flag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetObjectMetadataOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .media_metadata.MediaType_t media_type = 1;
    if (has_media_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
    }
    
    // optional string absolute_path = 2;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
    // optional string thumbnail = 3;
    if (has_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail());
    }
    
    // optional string file_format = 4;
    if (has_file_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_format());
    }
    
    // optional string comp_id = 5;
    if (has_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comp_id());
    }
    
    // optional uint32 special_format_flag = 6;
    if (has_special_format_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->special_format_flag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetObjectMetadataOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetObjectMetadataOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetObjectMetadataOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetObjectMetadataOutput::MergeFrom(const GetObjectMetadataOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_type()) {
      set_media_type(from.media_type());
    }
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
    if (from.has_thumbnail()) {
      set_thumbnail(from.thumbnail());
    }
    if (from.has_file_format()) {
      set_file_format(from.file_format());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_special_format_flag()) {
      set_special_format_flag(from.special_format_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetObjectMetadataOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetObjectMetadataOutput::CopyFrom(const GetObjectMetadataOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectMetadataOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetObjectMetadataOutput::Swap(GetObjectMetadataOutput* other) {
  if (other != this) {
    std::swap(media_type_, other->media_type_);
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(file_format_, other->file_format_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(special_format_flag_, other->special_format_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetObjectMetadataOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetObjectMetadataOutput_descriptor_;
  metadata.reflection = GetObjectMetadataOutput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace media_metadata

// @@protoc_insertion_point(global_scope)
