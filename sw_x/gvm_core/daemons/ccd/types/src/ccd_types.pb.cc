// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ccd_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ccd {

namespace {

const ::google::protobuf::Descriptor* CameraRollDownloadDirSpecInternal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraRollDownloadDirSpecInternal_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedUserSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedUserSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedUserSummaryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedUserSummaryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDToCCDCredential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDToCCDCredential_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedDataset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedDataset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedSubscription_reflection_ = NULL;
const ::google::protobuf::Descriptor* PicstreamDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PicstreamDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedStatEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedStatEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMetadataThumbMigrateInternal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMetadataThumbMigrateInternal_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncBoxSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncBoxSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedUserDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedUserDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachedUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachedUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDMainState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDMainState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ccd_5ftypes_2eproto() {
  protobuf_AddDesc_ccd_5ftypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ccd_types.proto");
  GOOGLE_CHECK(file != NULL);
  CameraRollDownloadDirSpecInternal_descriptor_ = file->message_type(0);
  static const int CameraRollDownloadDirSpecInternal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, max_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, preserve_free_disk_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, preserve_free_disk_size_bytes_),
  };
  CameraRollDownloadDirSpecInternal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraRollDownloadDirSpecInternal_descriptor_,
      CameraRollDownloadDirSpecInternal::default_instance_,
      CameraRollDownloadDirSpecInternal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpecInternal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraRollDownloadDirSpecInternal));
  CachedUserSummary_descriptor_ = file->message_type(1);
  static const int CachedUserSummary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummary, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummary, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummary, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummary, cluster_id_),
  };
  CachedUserSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedUserSummary_descriptor_,
      CachedUserSummary::default_instance_,
      CachedUserSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedUserSummary));
  CachedUserSummaryList_descriptor_ = file->message_type(2);
  static const int CachedUserSummaryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummaryList, users_),
  };
  CachedUserSummaryList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedUserSummaryList_descriptor_,
      CachedUserSummaryList::default_instance_,
      CachedUserSummaryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummaryList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserSummaryList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedUserSummaryList));
  UserSession_descriptor_ = file->message_type(3);
  static const int UserSession_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, session_secret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ias_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ops_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, cs_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, vs_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ec_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ans_session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ans_login_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, rf_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, pxd_session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, pxd_login_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ccd_server_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, ccd_creds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, instance_id_),
  };
  UserSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSession_descriptor_,
      UserSession::default_instance_,
      UserSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSession));
  CCDToCCDCredential_descriptor_ = file->message_type(4);
  static const int CCDToCCDCredential_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, ccd_svr_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, ccd_svr_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, ccd_svr_inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, ccd_session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, ccd_login_blob_),
  };
  CCDToCCDCredential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDToCCDCredential_descriptor_,
      CCDToCCDCredential::default_instance_,
      CCDToCCDCredential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDToCCDCredential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDToCCDCredential));
  CachedDataset_descriptor_ = file->message_type(5);
  static const int CachedDataset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedDataset, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedDataset, details_hash_),
  };
  CachedDataset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedDataset_descriptor_,
      CachedDataset::default_instance_,
      CachedDataset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedDataset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedDataset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedDataset));
  CachedSubscription_descriptor_ = file->message_type(6);
  static const int CachedSubscription_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSubscription, details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSubscription, details_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSubscription, abs_device_root_),
  };
  CachedSubscription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedSubscription_descriptor_,
      CachedSubscription::default_instance_,
      CachedSubscription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSubscription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedSubscription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedSubscription));
  PicstreamDir_descriptor_ = file->message_type(7);
  static const int PicstreamDir_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicstreamDir, directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicstreamDir, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicstreamDir, never_init_),
  };
  PicstreamDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PicstreamDir_descriptor_,
      PicstreamDir::default_instance_,
      PicstreamDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicstreamDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicstreamDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PicstreamDir));
  CachedStatEvent_descriptor_ = file->message_type(8);
  static const int CachedStatEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, start_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, end_time_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, event_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, event_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, limit_reached_),
  };
  CachedStatEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedStatEvent_descriptor_,
      CachedStatEvent::default_instance_,
      CachedStatEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedStatEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedStatEvent));
  MediaMetadataThumbMigrateInternal_descriptor_ = file->message_type(9);
  static const int MediaMetadataThumbMigrateInternal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateInternal, mm_thumb_src_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateInternal, mm_thumb_dest_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateInternal, mm_delete_phase_),
  };
  MediaMetadataThumbMigrateInternal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMetadataThumbMigrateInternal_descriptor_,
      MediaMetadataThumbMigrateInternal::default_instance_,
      MediaMetadataThumbMigrateInternal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateInternal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateInternal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMetadataThumbMigrateInternal));
  SyncBoxSettings_descriptor_ = file->message_type(10);
  static const int SyncBoxSettings_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, enable_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, sync_feature_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, is_archive_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, coherent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, syncbox_staging_area_abs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, syncbox_dataset_id_),
  };
  SyncBoxSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncBoxSettings_descriptor_,
      SyncBoxSettings::default_instance_,
      SyncBoxSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncBoxSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncBoxSettings));
  CachedUserDetails_descriptor_ = file->message_type(11);
  static const int CachedUserDetails_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, datasets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, cached_devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, cached_user_storage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, disable_background_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, disable_auto_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, disable_mobile_network_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, camera_upload_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, enable_camera_roll_trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, picstream_download_dirs_full_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, picstream_download_dirs_low_res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, picstream_download_dirs_thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, enable_notes_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, notes_sync_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, stat_event_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, stat_event_wait_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, enable_clouddoc_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, mm_thumb_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, migrate_mm_thumb_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, mm_thumb_sync_disabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, picstream_storage_conservation_dropping_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, mm_thumb_sync_disabled_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, mm_thumb_sync_converted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, syncbox_sync_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, allow_syncbox_archive_storage_create_db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, need_to_recreate_syncbox_dataset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, local_syncbox_archive_storage_dataset_id_),
  };
  CachedUserDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedUserDetails_descriptor_,
      CachedUserDetails::default_instance_,
      CachedUserDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedUserDetails));
  CachedUserData_descriptor_ = file->message_type(12);
  static const int CachedUserData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserData, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserData, details_),
  };
  CachedUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachedUserData_descriptor_,
      CachedUserData::default_instance_,
      CachedUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachedUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachedUserData));
  CCDMainState_descriptor_ = file->message_type(13);
  static const int CCDMainState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDMainState, logged_in_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDMainState, background_mode_interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDMainState, logged_out_users_),
  };
  CCDMainState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDMainState_descriptor_,
      CCDMainState::default_instance_,
      CCDMainState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDMainState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDMainState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDMainState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ccd_5ftypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraRollDownloadDirSpecInternal_descriptor_, &CameraRollDownloadDirSpecInternal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedUserSummary_descriptor_, &CachedUserSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedUserSummaryList_descriptor_, &CachedUserSummaryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSession_descriptor_, &UserSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDToCCDCredential_descriptor_, &CCDToCCDCredential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedDataset_descriptor_, &CachedDataset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedSubscription_descriptor_, &CachedSubscription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicstreamDir_descriptor_, &PicstreamDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedStatEvent_descriptor_, &CachedStatEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMetadataThumbMigrateInternal_descriptor_, &MediaMetadataThumbMigrateInternal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncBoxSettings_descriptor_, &SyncBoxSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedUserDetails_descriptor_, &CachedUserDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachedUserData_descriptor_, &CachedUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDMainState_descriptor_, &CCDMainState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ccd_5ftypes_2eproto() {
  delete CameraRollDownloadDirSpecInternal::default_instance_;
  delete CameraRollDownloadDirSpecInternal_reflection_;
  delete CachedUserSummary::default_instance_;
  delete CachedUserSummary_reflection_;
  delete CachedUserSummaryList::default_instance_;
  delete CachedUserSummaryList_reflection_;
  delete UserSession::default_instance_;
  delete UserSession_reflection_;
  delete CCDToCCDCredential::default_instance_;
  delete CCDToCCDCredential_reflection_;
  delete CachedDataset::default_instance_;
  delete CachedDataset_reflection_;
  delete CachedSubscription::default_instance_;
  delete CachedSubscription_reflection_;
  delete PicstreamDir::default_instance_;
  delete PicstreamDir_reflection_;
  delete CachedStatEvent::default_instance_;
  delete CachedStatEvent_reflection_;
  delete MediaMetadataThumbMigrateInternal::default_instance_;
  delete MediaMetadataThumbMigrateInternal_reflection_;
  delete SyncBoxSettings::default_instance_;
  delete SyncBoxSettings_reflection_;
  delete CachedUserDetails::default_instance_;
  delete CachedUserDetails_reflection_;
  delete CachedUserData::default_instance_;
  delete CachedUserData_reflection_;
  delete CCDMainState::default_instance_;
  delete CCDMainState_reflection_;
}

void protobuf_AddDesc_ccd_5ftypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ccd::protobuf_AddDesc_ccdi_5frpc_2eproto();
  ::vplex::vsDirectory::protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ccd_types.proto\022\003ccd\032\016ccdi_rpc.proto\032&"
    "vplex_vs_directory_service_types.proto\"\257"
    "\001\n!CameraRollDownloadDirSpecInternal\022\013\n\003"
    "dir\030\001 \002(\t\022\023\n\010max_size\030\007 \001(\r:\0010\022\024\n\tmax_fi"
    "les\030\010 \001(\r:\0010\022(\n\035preserve_free_disk_perce"
    "ntage\030\t \001(\r:\0010\022(\n\035preserve_free_disk_siz"
    "e_bytes\030\n \001(\004:\0010\"^\n\021CachedUserSummary\022\017\n"
    "\007user_id\030\001 \002(\006\022\020\n\010username\030\002 \002(\t\022\022\n\nacco"
    "unt_id\030\005 \001(\t\022\022\n\ncluster_id\030\007 \001(\003\">\n\025Cach"
    "edUserSummaryList\022%\n\005users\030\001 \003(\0132\026.ccd.C"
    "achedUserSummary\"\354\002\n\013UserSession\022\026\n\016sess"
    "ion_handle\030\001 \001(\006\022\026\n\016session_secret\030\002 \001(\014"
    "\022\022\n\nias_ticket\030\004 \001(\014\022\022\n\nops_ticket\030\005 \001(\014"
    "\022\021\n\tcs_ticket\030\006 \001(\014\022\021\n\tvs_ticket\030\007 \001(\014\022\021"
    "\n\tec_ticket\030\010 \001(\014\022\027\n\017ans_session_key\030\t \001"
    "(\014\022\026\n\016ans_login_blob\030\n \001(\014\022\021\n\trf_ticket\030"
    "\013 \001(\014\022\027\n\017pxd_session_key\030\014 \001(\014\022\026\n\016pxd_lo"
    "gin_blob\030\r \001(\014\022\026\n\016ccd_server_key\030\016 \001(\014\022*"
    "\n\tccd_creds\030\017 \003(\0132\027.ccd.CCDToCCDCredenti"
    "al\022\023\n\013instance_id\030\020 \001(\r\"\222\001\n\022CCDToCCDCred"
    "ential\022\027\n\017ccd_svr_user_id\030\001 \002(\006\022\031\n\021ccd_s"
    "vr_device_id\030\002 \002(\006\022\027\n\017ccd_svr_inst_id\030\003 "
    "\002(\r\022\027\n\017ccd_session_key\030\004 \002(\014\022\026\n\016ccd_logi"
    "n_blob\030\005 \002(\014\"X\n\rCachedDataset\0221\n\007details"
    "\030\001 \002(\0132 .vplex.vsDirectory.DatasetDetail"
    "\022\024\n\014details_hash\030\002 \001(\t\"u\n\022CachedSubscrip"
    "tion\0220\n\007details\030\001 \002(\0132\037.vplex.vsDirector"
    "y.Subscription\022\024\n\014details_hash\030\002 \001(\t\022\027\n\017"
    "abs_device_root\030\003 \002(\t\"D\n\014PicstreamDir\022\021\n"
    "\tdirectory\030\001 \002(\t\022\r\n\005index\030\002 \002(\006\022\022\n\nnever"
    "_init\030\003 \001(\010\"\242\001\n\017CachedStatEvent\022\016\n\006app_i"
    "d\030\001 \002(\t\022\020\n\010event_id\030\002 \002(\t\022\025\n\rstart_time_"
    "ms\030\003 \002(\004\022\023\n\013end_time_ms\030\004 \001(\004\022\026\n\013event_c"
    "ount\030\005 \002(\r:\0011\022\022\n\nevent_info\030\006 \001(\t\022\025\n\rlim"
    "it_reached\030\007 \001(\010\"q\n!MediaMetadataThumbMi"
    "grateInternal\022\030\n\020mm_thumb_src_dir\030\001 \001(\t\022"
    "\031\n\021mm_thumb_dest_dir\030\002 \001(\t\022\027\n\017mm_delete_"
    "phase\030\003 \001(\010\"\307\001\n\017SyncBoxSettings\022\032\n\013enabl"
    "e_sync\030\001 \001(\010:\005false\022\031\n\021sync_feature_path"
    "\030\002 \001(\t\022!\n\022is_archive_storage\030\003 \001(\010:\005fals"
    "e\022\027\n\010coherent\030\004 \001(\010:\005false\022%\n\035syncbox_st"
    "aging_area_abs_path\030\005 \001(\t\022\032\n\022syncbox_dat"
    "aset_id\030\006 \001(\006\"\334\n\n\021CachedUserDetails\022$\n\010d"
    "atasets\030\001 \003(\0132\022.ccd.CachedDataset\022.\n\rsub"
    "scriptions\030\002 \003(\0132\027.ccd.CachedSubscriptio"
    "n\0225\n\016cached_devices\030\016 \003(\0132\035.vplex.vsDire"
    "ctory.DeviceInfo\022!\n\007session\030\006 \002(\0132\020.ccd."
    "UserSession\022;\n\023cached_user_storage\030\017 \003(\013"
    "2\036.vplex.vsDirectory.UserStorage\022\037\n\027disa"
    "ble_background_data\030\020 \001(\010\022\031\n\021disable_aut"
    "o_sync\030\021 \001(\010\022)\n\033disable_mobile_network_d"
    "ata\030\022 \001(\010:\004true\022-\n\022camera_upload_dirs\030\023 "
    "\003(\0132\021.ccd.PicstreamDir\022\"\n\032enable_camera_"
    "roll_trigger\030\024 \001(\010\022P\n picstream_download"
    "_dirs_full_res\030  \003(\0132&.ccd.CameraRollDow"
    "nloadDirSpecInternal\022O\n\037picstream_downlo"
    "ad_dirs_low_res\030! \003(\0132&.ccd.CameraRollDo"
    "wnloadDirSpecInternal\022Q\n!picstream_downl"
    "oad_dirs_thumbnail\030) \003(\0132&.ccd.CameraRol"
    "lDownloadDirSpecInternal\022 \n\021enable_notes"
    "_sync\030\027 \001(\010:\005false\022\027\n\017notes_sync_path\030\032 "
    "\001(\t\022-\n\017stat_event_list\030\030 \003(\0132\024.ccd.Cache"
    "dStatEvent\0222\n\024stat_event_wait_list\030& \003(\013"
    "2\024.ccd.CachedStatEvent\022\"\n\024enable_clouddo"
    "c_sync\030\031 \001(\010:\004true\022\036\n\026mm_thumb_download_"
    "path\030\" \001(\t\022N\n\036migrate_mm_thumb_download_"
    "path\030# \001(\0132&.ccd.MediaMetadataThumbMigra"
    "teInternal\022\036\n\026mm_thumb_sync_disabled\030$ \001"
    "(\010\022;\n,picstream_storage_conservation_dro"
    "pping_mode\030% \001(\010:\005false\0228\n\034mm_thumb_sync"
    "_disabled_types\030\' \003(\0162\022.ccd.SyncFeature_"
    "t\022\037\n\027mm_thumb_sync_converted\030( \001(\010\0223\n\025sy"
    "ncbox_sync_settings\030* \001(\0132\024.ccd.SyncBoxS"
    "ettings\022/\n\'allow_syncbox_archive_storage"
    "_create_db\030+ \001(\010\022(\n need_to_recreate_syn"
    "cbox_dataset\030, \001(\006\0220\n(local_syncbox_arch"
    "ive_storage_dataset_id\030- \001(\006\"b\n\016CachedUs"
    "erData\022\'\n\007summary\030\001 \002(\0132\026.ccd.CachedUser"
    "Summary\022\'\n\007details\030\002 \002(\0132\026.ccd.CachedUse"
    "rDetails\"\201\001\n\014CCDMainState\022\031\n\016logged_in_u"
    "ser\030\001 \001(\006:\0010\022(\n\034background_mode_interval"
    "_sec\030\004 \001(\005:\002-1\022,\n\020logged_out_users\030\005 \003(\013"
    "2\022.ccd.LoggedOutUserB\031\n\rigware.gvm.pbB\010C"
    "cdTypes", 3327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ccd_types.proto", &protobuf_RegisterTypes);
  CameraRollDownloadDirSpecInternal::default_instance_ = new CameraRollDownloadDirSpecInternal();
  CachedUserSummary::default_instance_ = new CachedUserSummary();
  CachedUserSummaryList::default_instance_ = new CachedUserSummaryList();
  UserSession::default_instance_ = new UserSession();
  CCDToCCDCredential::default_instance_ = new CCDToCCDCredential();
  CachedDataset::default_instance_ = new CachedDataset();
  CachedSubscription::default_instance_ = new CachedSubscription();
  PicstreamDir::default_instance_ = new PicstreamDir();
  CachedStatEvent::default_instance_ = new CachedStatEvent();
  MediaMetadataThumbMigrateInternal::default_instance_ = new MediaMetadataThumbMigrateInternal();
  SyncBoxSettings::default_instance_ = new SyncBoxSettings();
  CachedUserDetails::default_instance_ = new CachedUserDetails();
  CachedUserData::default_instance_ = new CachedUserData();
  CCDMainState::default_instance_ = new CCDMainState();
  CameraRollDownloadDirSpecInternal::default_instance_->InitAsDefaultInstance();
  CachedUserSummary::default_instance_->InitAsDefaultInstance();
  CachedUserSummaryList::default_instance_->InitAsDefaultInstance();
  UserSession::default_instance_->InitAsDefaultInstance();
  CCDToCCDCredential::default_instance_->InitAsDefaultInstance();
  CachedDataset::default_instance_->InitAsDefaultInstance();
  CachedSubscription::default_instance_->InitAsDefaultInstance();
  PicstreamDir::default_instance_->InitAsDefaultInstance();
  CachedStatEvent::default_instance_->InitAsDefaultInstance();
  MediaMetadataThumbMigrateInternal::default_instance_->InitAsDefaultInstance();
  SyncBoxSettings::default_instance_->InitAsDefaultInstance();
  CachedUserDetails::default_instance_->InitAsDefaultInstance();
  CachedUserData::default_instance_->InitAsDefaultInstance();
  CCDMainState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ccd_5ftypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ccd_5ftypes_2eproto {
  StaticDescriptorInitializer_ccd_5ftypes_2eproto() {
    protobuf_AddDesc_ccd_5ftypes_2eproto();
  }
} static_descriptor_initializer_ccd_5ftypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CameraRollDownloadDirSpecInternal::kDirFieldNumber;
const int CameraRollDownloadDirSpecInternal::kMaxSizeFieldNumber;
const int CameraRollDownloadDirSpecInternal::kMaxFilesFieldNumber;
const int CameraRollDownloadDirSpecInternal::kPreserveFreeDiskPercentageFieldNumber;
const int CameraRollDownloadDirSpecInternal::kPreserveFreeDiskSizeBytesFieldNumber;
#endif  // !_MSC_VER

CameraRollDownloadDirSpecInternal::CameraRollDownloadDirSpecInternal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraRollDownloadDirSpecInternal::InitAsDefaultInstance() {
}

CameraRollDownloadDirSpecInternal::CameraRollDownloadDirSpecInternal(const CameraRollDownloadDirSpecInternal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraRollDownloadDirSpecInternal::SharedCtor() {
  _cached_size_ = 0;
  dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = 0u;
  max_files_ = 0u;
  preserve_free_disk_percentage_ = 0u;
  preserve_free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraRollDownloadDirSpecInternal::~CameraRollDownloadDirSpecInternal() {
  SharedDtor();
}

void CameraRollDownloadDirSpecInternal::SharedDtor() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_;
  }
  if (this != default_instance_) {
  }
}

void CameraRollDownloadDirSpecInternal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraRollDownloadDirSpecInternal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraRollDownloadDirSpecInternal_descriptor_;
}

const CameraRollDownloadDirSpecInternal& CameraRollDownloadDirSpecInternal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CameraRollDownloadDirSpecInternal* CameraRollDownloadDirSpecInternal::default_instance_ = NULL;

CameraRollDownloadDirSpecInternal* CameraRollDownloadDirSpecInternal::New() const {
  return new CameraRollDownloadDirSpecInternal;
}

void CameraRollDownloadDirSpecInternal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dir()) {
      if (dir_ != &::google::protobuf::internal::kEmptyString) {
        dir_->clear();
      }
    }
    max_size_ = 0u;
    max_files_ = 0u;
    preserve_free_disk_percentage_ = 0u;
    preserve_free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraRollDownloadDirSpecInternal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_size;
        break;
      }
      
      // optional uint32 max_size = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_files;
        break;
      }
      
      // optional uint32 max_files = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_files_)));
          set_has_max_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_preserve_free_disk_percentage;
        break;
      }
      
      // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_free_disk_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preserve_free_disk_percentage_)));
          set_has_preserve_free_disk_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preserve_free_disk_size_bytes;
        break;
      }
      
      // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_free_disk_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preserve_free_disk_size_bytes_)));
          set_has_preserve_free_disk_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraRollDownloadDirSpecInternal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dir(), output);
  }
  
  // optional uint32 max_size = 7 [default = 0];
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_size(), output);
  }
  
  // optional uint32 max_files = 8 [default = 0];
  if (has_max_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_files(), output);
  }
  
  // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
  if (has_preserve_free_disk_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->preserve_free_disk_percentage(), output);
  }
  
  // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
  if (has_preserve_free_disk_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->preserve_free_disk_size_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraRollDownloadDirSpecInternal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dir(), target);
  }
  
  // optional uint32 max_size = 7 [default = 0];
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_size(), target);
  }
  
  // optional uint32 max_files = 8 [default = 0];
  if (has_max_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_files(), target);
  }
  
  // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
  if (has_preserve_free_disk_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->preserve_free_disk_percentage(), target);
  }
  
  // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
  if (has_preserve_free_disk_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->preserve_free_disk_size_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraRollDownloadDirSpecInternal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dir = 1;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir());
    }
    
    // optional uint32 max_size = 7 [default = 0];
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_size());
    }
    
    // optional uint32 max_files = 8 [default = 0];
    if (has_max_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_files());
    }
    
    // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
    if (has_preserve_free_disk_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preserve_free_disk_percentage());
    }
    
    // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
    if (has_preserve_free_disk_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->preserve_free_disk_size_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraRollDownloadDirSpecInternal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraRollDownloadDirSpecInternal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraRollDownloadDirSpecInternal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraRollDownloadDirSpecInternal::MergeFrom(const CameraRollDownloadDirSpecInternal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_max_files()) {
      set_max_files(from.max_files());
    }
    if (from.has_preserve_free_disk_percentage()) {
      set_preserve_free_disk_percentage(from.preserve_free_disk_percentage());
    }
    if (from.has_preserve_free_disk_size_bytes()) {
      set_preserve_free_disk_size_bytes(from.preserve_free_disk_size_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraRollDownloadDirSpecInternal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraRollDownloadDirSpecInternal::CopyFrom(const CameraRollDownloadDirSpecInternal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraRollDownloadDirSpecInternal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CameraRollDownloadDirSpecInternal::Swap(CameraRollDownloadDirSpecInternal* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(max_size_, other->max_size_);
    std::swap(max_files_, other->max_files_);
    std::swap(preserve_free_disk_percentage_, other->preserve_free_disk_percentage_);
    std::swap(preserve_free_disk_size_bytes_, other->preserve_free_disk_size_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraRollDownloadDirSpecInternal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraRollDownloadDirSpecInternal_descriptor_;
  metadata.reflection = CameraRollDownloadDirSpecInternal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedUserSummary::kUserIdFieldNumber;
const int CachedUserSummary::kUsernameFieldNumber;
const int CachedUserSummary::kAccountIdFieldNumber;
const int CachedUserSummary::kClusterIdFieldNumber;
#endif  // !_MSC_VER

CachedUserSummary::CachedUserSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedUserSummary::InitAsDefaultInstance() {
}

CachedUserSummary::CachedUserSummary(const CachedUserSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedUserSummary::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cluster_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedUserSummary::~CachedUserSummary() {
  SharedDtor();
}

void CachedUserSummary::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (this != default_instance_) {
  }
}

void CachedUserSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedUserSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedUserSummary_descriptor_;
}

const CachedUserSummary& CachedUserSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedUserSummary* CachedUserSummary::default_instance_ = NULL;

CachedUserSummary* CachedUserSummary::New() const {
  return new CachedUserSummary;
}

void CachedUserSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    cluster_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedUserSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_id;
        break;
      }
      
      // optional string account_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cluster_id;
        break;
      }
      
      // optional int64 cluster_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cluster_id_)));
          set_has_cluster_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedUserSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string account_id = 5;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account_id(), output);
  }
  
  // optional int64 cluster_id = 7;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->cluster_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedUserSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string account_id = 5;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_id(), target);
  }
  
  // optional int64 cluster_id = 7;
  if (has_cluster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->cluster_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedUserSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string account_id = 5;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional int64 cluster_id = 7;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cluster_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedUserSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedUserSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedUserSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedUserSummary::MergeFrom(const CachedUserSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedUserSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedUserSummary::CopyFrom(const CachedUserSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedUserSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CachedUserSummary::Swap(CachedUserSummary* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(username_, other->username_);
    std::swap(account_id_, other->account_id_);
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedUserSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedUserSummary_descriptor_;
  metadata.reflection = CachedUserSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedUserSummaryList::kUsersFieldNumber;
#endif  // !_MSC_VER

CachedUserSummaryList::CachedUserSummaryList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedUserSummaryList::InitAsDefaultInstance() {
}

CachedUserSummaryList::CachedUserSummaryList(const CachedUserSummaryList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedUserSummaryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedUserSummaryList::~CachedUserSummaryList() {
  SharedDtor();
}

void CachedUserSummaryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CachedUserSummaryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedUserSummaryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedUserSummaryList_descriptor_;
}

const CachedUserSummaryList& CachedUserSummaryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedUserSummaryList* CachedUserSummaryList::default_instance_ = NULL;

CachedUserSummaryList* CachedUserSummaryList::New() const {
  return new CachedUserSummaryList;
}

void CachedUserSummaryList::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedUserSummaryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.CachedUserSummary users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedUserSummaryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.CachedUserSummary users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedUserSummaryList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.CachedUserSummary users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedUserSummaryList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.CachedUserSummary users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedUserSummaryList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedUserSummaryList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedUserSummaryList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedUserSummaryList::MergeFrom(const CachedUserSummaryList& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedUserSummaryList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedUserSummaryList::CopyFrom(const CachedUserSummaryList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedUserSummaryList::IsInitialized() const {
  
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void CachedUserSummaryList::Swap(CachedUserSummaryList* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedUserSummaryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedUserSummaryList_descriptor_;
  metadata.reflection = CachedUserSummaryList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSession::kSessionHandleFieldNumber;
const int UserSession::kSessionSecretFieldNumber;
const int UserSession::kIasTicketFieldNumber;
const int UserSession::kOpsTicketFieldNumber;
const int UserSession::kCsTicketFieldNumber;
const int UserSession::kVsTicketFieldNumber;
const int UserSession::kEcTicketFieldNumber;
const int UserSession::kAnsSessionKeyFieldNumber;
const int UserSession::kAnsLoginBlobFieldNumber;
const int UserSession::kRfTicketFieldNumber;
const int UserSession::kPxdSessionKeyFieldNumber;
const int UserSession::kPxdLoginBlobFieldNumber;
const int UserSession::kCcdServerKeyFieldNumber;
const int UserSession::kCcdCredsFieldNumber;
const int UserSession::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

UserSession::UserSession()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSession::InitAsDefaultInstance() {
}

UserSession::UserSession(const UserSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSession::SharedCtor() {
  _cached_size_ = 0;
  session_handle_ = GOOGLE_ULONGLONG(0);
  session_secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ias_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ops_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cs_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vs_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ec_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ans_session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ans_login_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rf_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pxd_session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pxd_login_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccd_server_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSession::~UserSession() {
  SharedDtor();
}

void UserSession::SharedDtor() {
  if (session_secret_ != &::google::protobuf::internal::kEmptyString) {
    delete session_secret_;
  }
  if (ias_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ias_ticket_;
  }
  if (ops_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ops_ticket_;
  }
  if (cs_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete cs_ticket_;
  }
  if (vs_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete vs_ticket_;
  }
  if (ec_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ec_ticket_;
  }
  if (ans_session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete ans_session_key_;
  }
  if (ans_login_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete ans_login_blob_;
  }
  if (rf_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete rf_ticket_;
  }
  if (pxd_session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete pxd_session_key_;
  }
  if (pxd_login_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete pxd_login_blob_;
  }
  if (ccd_server_key_ != &::google::protobuf::internal::kEmptyString) {
    delete ccd_server_key_;
  }
  if (this != default_instance_) {
  }
}

void UserSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSession_descriptor_;
}

const UserSession& UserSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

UserSession* UserSession::default_instance_ = NULL;

UserSession* UserSession::New() const {
  return new UserSession;
}

void UserSession::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_handle_ = GOOGLE_ULONGLONG(0);
    if (has_session_secret()) {
      if (session_secret_ != &::google::protobuf::internal::kEmptyString) {
        session_secret_->clear();
      }
    }
    if (has_ias_ticket()) {
      if (ias_ticket_ != &::google::protobuf::internal::kEmptyString) {
        ias_ticket_->clear();
      }
    }
    if (has_ops_ticket()) {
      if (ops_ticket_ != &::google::protobuf::internal::kEmptyString) {
        ops_ticket_->clear();
      }
    }
    if (has_cs_ticket()) {
      if (cs_ticket_ != &::google::protobuf::internal::kEmptyString) {
        cs_ticket_->clear();
      }
    }
    if (has_vs_ticket()) {
      if (vs_ticket_ != &::google::protobuf::internal::kEmptyString) {
        vs_ticket_->clear();
      }
    }
    if (has_ec_ticket()) {
      if (ec_ticket_ != &::google::protobuf::internal::kEmptyString) {
        ec_ticket_->clear();
      }
    }
    if (has_ans_session_key()) {
      if (ans_session_key_ != &::google::protobuf::internal::kEmptyString) {
        ans_session_key_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ans_login_blob()) {
      if (ans_login_blob_ != &::google::protobuf::internal::kEmptyString) {
        ans_login_blob_->clear();
      }
    }
    if (has_rf_ticket()) {
      if (rf_ticket_ != &::google::protobuf::internal::kEmptyString) {
        rf_ticket_->clear();
      }
    }
    if (has_pxd_session_key()) {
      if (pxd_session_key_ != &::google::protobuf::internal::kEmptyString) {
        pxd_session_key_->clear();
      }
    }
    if (has_pxd_login_blob()) {
      if (pxd_login_blob_ != &::google::protobuf::internal::kEmptyString) {
        pxd_login_blob_->clear();
      }
    }
    if (has_ccd_server_key()) {
      if (ccd_server_key_ != &::google::protobuf::internal::kEmptyString) {
        ccd_server_key_->clear();
      }
    }
    instance_id_ = 0u;
  }
  ccd_creds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 session_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &session_handle_)));
          set_has_session_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_secret;
        break;
      }
      
      // optional bytes session_secret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_secret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ias_ticket;
        break;
      }
      
      // optional bytes ias_ticket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ias_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ias_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ops_ticket;
        break;
      }
      
      // optional bytes ops_ticket = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ops_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ops_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cs_ticket;
        break;
      }
      
      // optional bytes cs_ticket = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cs_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cs_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_vs_ticket;
        break;
      }
      
      // optional bytes vs_ticket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vs_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vs_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ec_ticket;
        break;
      }
      
      // optional bytes ec_ticket = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ec_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ec_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ans_session_key;
        break;
      }
      
      // optional bytes ans_session_key = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ans_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ans_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ans_login_blob;
        break;
      }
      
      // optional bytes ans_login_blob = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ans_login_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ans_login_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rf_ticket;
        break;
      }
      
      // optional bytes rf_ticket = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rf_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rf_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pxd_session_key;
        break;
      }
      
      // optional bytes pxd_session_key = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pxd_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pxd_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pxd_login_blob;
        break;
      }
      
      // optional bytes pxd_login_blob = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pxd_login_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pxd_login_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ccd_server_key;
        break;
      }
      
      // optional bytes ccd_server_key = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccd_server_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ccd_server_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ccd_creds;
        break;
      }
      
      // repeated .ccd.CCDToCCDCredential ccd_creds = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccd_creds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ccd_creds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ccd_creds;
        if (input->ExpectTag(128)) goto parse_instance_id;
        break;
      }
      
      // optional uint32 instance_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 session_handle = 1;
  if (has_session_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->session_handle(), output);
  }
  
  // optional bytes session_secret = 2;
  if (has_session_secret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->session_secret(), output);
  }
  
  // optional bytes ias_ticket = 4;
  if (has_ias_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ias_ticket(), output);
  }
  
  // optional bytes ops_ticket = 5;
  if (has_ops_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->ops_ticket(), output);
  }
  
  // optional bytes cs_ticket = 6;
  if (has_cs_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->cs_ticket(), output);
  }
  
  // optional bytes vs_ticket = 7;
  if (has_vs_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->vs_ticket(), output);
  }
  
  // optional bytes ec_ticket = 8;
  if (has_ec_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->ec_ticket(), output);
  }
  
  // optional bytes ans_session_key = 9;
  if (has_ans_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->ans_session_key(), output);
  }
  
  // optional bytes ans_login_blob = 10;
  if (has_ans_login_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->ans_login_blob(), output);
  }
  
  // optional bytes rf_ticket = 11;
  if (has_rf_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->rf_ticket(), output);
  }
  
  // optional bytes pxd_session_key = 12;
  if (has_pxd_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->pxd_session_key(), output);
  }
  
  // optional bytes pxd_login_blob = 13;
  if (has_pxd_login_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->pxd_login_blob(), output);
  }
  
  // optional bytes ccd_server_key = 14;
  if (has_ccd_server_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->ccd_server_key(), output);
  }
  
  // repeated .ccd.CCDToCCDCredential ccd_creds = 15;
  for (int i = 0; i < this->ccd_creds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ccd_creds(i), output);
  }
  
  // optional uint32 instance_id = 16;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 session_handle = 1;
  if (has_session_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->session_handle(), target);
  }
  
  // optional bytes session_secret = 2;
  if (has_session_secret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->session_secret(), target);
  }
  
  // optional bytes ias_ticket = 4;
  if (has_ias_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ias_ticket(), target);
  }
  
  // optional bytes ops_ticket = 5;
  if (has_ops_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ops_ticket(), target);
  }
  
  // optional bytes cs_ticket = 6;
  if (has_cs_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->cs_ticket(), target);
  }
  
  // optional bytes vs_ticket = 7;
  if (has_vs_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->vs_ticket(), target);
  }
  
  // optional bytes ec_ticket = 8;
  if (has_ec_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->ec_ticket(), target);
  }
  
  // optional bytes ans_session_key = 9;
  if (has_ans_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->ans_session_key(), target);
  }
  
  // optional bytes ans_login_blob = 10;
  if (has_ans_login_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->ans_login_blob(), target);
  }
  
  // optional bytes rf_ticket = 11;
  if (has_rf_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->rf_ticket(), target);
  }
  
  // optional bytes pxd_session_key = 12;
  if (has_pxd_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->pxd_session_key(), target);
  }
  
  // optional bytes pxd_login_blob = 13;
  if (has_pxd_login_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->pxd_login_blob(), target);
  }
  
  // optional bytes ccd_server_key = 14;
  if (has_ccd_server_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->ccd_server_key(), target);
  }
  
  // repeated .ccd.CCDToCCDCredential ccd_creds = 15;
  for (int i = 0; i < this->ccd_creds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ccd_creds(i), target);
  }
  
  // optional uint32 instance_id = 16;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSession::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 session_handle = 1;
    if (has_session_handle()) {
      total_size += 1 + 8;
    }
    
    // optional bytes session_secret = 2;
    if (has_session_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_secret());
    }
    
    // optional bytes ias_ticket = 4;
    if (has_ias_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ias_ticket());
    }
    
    // optional bytes ops_ticket = 5;
    if (has_ops_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ops_ticket());
    }
    
    // optional bytes cs_ticket = 6;
    if (has_cs_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cs_ticket());
    }
    
    // optional bytes vs_ticket = 7;
    if (has_vs_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vs_ticket());
    }
    
    // optional bytes ec_ticket = 8;
    if (has_ec_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ec_ticket());
    }
    
    // optional bytes ans_session_key = 9;
    if (has_ans_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ans_session_key());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes ans_login_blob = 10;
    if (has_ans_login_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ans_login_blob());
    }
    
    // optional bytes rf_ticket = 11;
    if (has_rf_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rf_ticket());
    }
    
    // optional bytes pxd_session_key = 12;
    if (has_pxd_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pxd_session_key());
    }
    
    // optional bytes pxd_login_blob = 13;
    if (has_pxd_login_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pxd_login_blob());
    }
    
    // optional bytes ccd_server_key = 14;
    if (has_ccd_server_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ccd_server_key());
    }
    
    // optional uint32 instance_id = 16;
    if (has_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }
    
  }
  // repeated .ccd.CCDToCCDCredential ccd_creds = 15;
  total_size += 1 * this->ccd_creds_size();
  for (int i = 0; i < this->ccd_creds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ccd_creds(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSession::MergeFrom(const UserSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  ccd_creds_.MergeFrom(from.ccd_creds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_handle()) {
      set_session_handle(from.session_handle());
    }
    if (from.has_session_secret()) {
      set_session_secret(from.session_secret());
    }
    if (from.has_ias_ticket()) {
      set_ias_ticket(from.ias_ticket());
    }
    if (from.has_ops_ticket()) {
      set_ops_ticket(from.ops_ticket());
    }
    if (from.has_cs_ticket()) {
      set_cs_ticket(from.cs_ticket());
    }
    if (from.has_vs_ticket()) {
      set_vs_ticket(from.vs_ticket());
    }
    if (from.has_ec_ticket()) {
      set_ec_ticket(from.ec_ticket());
    }
    if (from.has_ans_session_key()) {
      set_ans_session_key(from.ans_session_key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ans_login_blob()) {
      set_ans_login_blob(from.ans_login_blob());
    }
    if (from.has_rf_ticket()) {
      set_rf_ticket(from.rf_ticket());
    }
    if (from.has_pxd_session_key()) {
      set_pxd_session_key(from.pxd_session_key());
    }
    if (from.has_pxd_login_blob()) {
      set_pxd_login_blob(from.pxd_login_blob());
    }
    if (from.has_ccd_server_key()) {
      set_ccd_server_key(from.ccd_server_key());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSession::CopyFrom(const UserSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSession::IsInitialized() const {
  
  for (int i = 0; i < ccd_creds_size(); i++) {
    if (!this->ccd_creds(i).IsInitialized()) return false;
  }
  return true;
}

void UserSession::Swap(UserSession* other) {
  if (other != this) {
    std::swap(session_handle_, other->session_handle_);
    std::swap(session_secret_, other->session_secret_);
    std::swap(ias_ticket_, other->ias_ticket_);
    std::swap(ops_ticket_, other->ops_ticket_);
    std::swap(cs_ticket_, other->cs_ticket_);
    std::swap(vs_ticket_, other->vs_ticket_);
    std::swap(ec_ticket_, other->ec_ticket_);
    std::swap(ans_session_key_, other->ans_session_key_);
    std::swap(ans_login_blob_, other->ans_login_blob_);
    std::swap(rf_ticket_, other->rf_ticket_);
    std::swap(pxd_session_key_, other->pxd_session_key_);
    std::swap(pxd_login_blob_, other->pxd_login_blob_);
    std::swap(ccd_server_key_, other->ccd_server_key_);
    ccd_creds_.Swap(&other->ccd_creds_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSession_descriptor_;
  metadata.reflection = UserSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDToCCDCredential::kCcdSvrUserIdFieldNumber;
const int CCDToCCDCredential::kCcdSvrDeviceIdFieldNumber;
const int CCDToCCDCredential::kCcdSvrInstIdFieldNumber;
const int CCDToCCDCredential::kCcdSessionKeyFieldNumber;
const int CCDToCCDCredential::kCcdLoginBlobFieldNumber;
#endif  // !_MSC_VER

CCDToCCDCredential::CCDToCCDCredential()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDToCCDCredential::InitAsDefaultInstance() {
}

CCDToCCDCredential::CCDToCCDCredential(const CCDToCCDCredential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDToCCDCredential::SharedCtor() {
  _cached_size_ = 0;
  ccd_svr_user_id_ = GOOGLE_ULONGLONG(0);
  ccd_svr_device_id_ = GOOGLE_ULONGLONG(0);
  ccd_svr_inst_id_ = 0u;
  ccd_session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccd_login_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDToCCDCredential::~CCDToCCDCredential() {
  SharedDtor();
}

void CCDToCCDCredential::SharedDtor() {
  if (ccd_session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete ccd_session_key_;
  }
  if (ccd_login_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete ccd_login_blob_;
  }
  if (this != default_instance_) {
  }
}

void CCDToCCDCredential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDToCCDCredential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDToCCDCredential_descriptor_;
}

const CCDToCCDCredential& CCDToCCDCredential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CCDToCCDCredential* CCDToCCDCredential::default_instance_ = NULL;

CCDToCCDCredential* CCDToCCDCredential::New() const {
  return new CCDToCCDCredential;
}

void CCDToCCDCredential::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ccd_svr_user_id_ = GOOGLE_ULONGLONG(0);
    ccd_svr_device_id_ = GOOGLE_ULONGLONG(0);
    ccd_svr_inst_id_ = 0u;
    if (has_ccd_session_key()) {
      if (ccd_session_key_ != &::google::protobuf::internal::kEmptyString) {
        ccd_session_key_->clear();
      }
    }
    if (has_ccd_login_blob()) {
      if (ccd_login_blob_ != &::google::protobuf::internal::kEmptyString) {
        ccd_login_blob_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDToCCDCredential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 ccd_svr_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ccd_svr_user_id_)));
          set_has_ccd_svr_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_ccd_svr_device_id;
        break;
      }
      
      // required fixed64 ccd_svr_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ccd_svr_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ccd_svr_device_id_)));
          set_has_ccd_svr_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ccd_svr_inst_id;
        break;
      }
      
      // required uint32 ccd_svr_inst_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ccd_svr_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ccd_svr_inst_id_)));
          set_has_ccd_svr_inst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ccd_session_key;
        break;
      }
      
      // required bytes ccd_session_key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccd_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ccd_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ccd_login_blob;
        break;
      }
      
      // required bytes ccd_login_blob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccd_login_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ccd_login_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDToCCDCredential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 ccd_svr_user_id = 1;
  if (has_ccd_svr_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ccd_svr_user_id(), output);
  }
  
  // required fixed64 ccd_svr_device_id = 2;
  if (has_ccd_svr_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->ccd_svr_device_id(), output);
  }
  
  // required uint32 ccd_svr_inst_id = 3;
  if (has_ccd_svr_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ccd_svr_inst_id(), output);
  }
  
  // required bytes ccd_session_key = 4;
  if (has_ccd_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ccd_session_key(), output);
  }
  
  // required bytes ccd_login_blob = 5;
  if (has_ccd_login_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->ccd_login_blob(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDToCCDCredential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 ccd_svr_user_id = 1;
  if (has_ccd_svr_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ccd_svr_user_id(), target);
  }
  
  // required fixed64 ccd_svr_device_id = 2;
  if (has_ccd_svr_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->ccd_svr_device_id(), target);
  }
  
  // required uint32 ccd_svr_inst_id = 3;
  if (has_ccd_svr_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ccd_svr_inst_id(), target);
  }
  
  // required bytes ccd_session_key = 4;
  if (has_ccd_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ccd_session_key(), target);
  }
  
  // required bytes ccd_login_blob = 5;
  if (has_ccd_login_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->ccd_login_blob(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDToCCDCredential::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 ccd_svr_user_id = 1;
    if (has_ccd_svr_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 ccd_svr_device_id = 2;
    if (has_ccd_svr_device_id()) {
      total_size += 1 + 8;
    }
    
    // required uint32 ccd_svr_inst_id = 3;
    if (has_ccd_svr_inst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ccd_svr_inst_id());
    }
    
    // required bytes ccd_session_key = 4;
    if (has_ccd_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ccd_session_key());
    }
    
    // required bytes ccd_login_blob = 5;
    if (has_ccd_login_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ccd_login_blob());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDToCCDCredential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDToCCDCredential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDToCCDCredential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDToCCDCredential::MergeFrom(const CCDToCCDCredential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ccd_svr_user_id()) {
      set_ccd_svr_user_id(from.ccd_svr_user_id());
    }
    if (from.has_ccd_svr_device_id()) {
      set_ccd_svr_device_id(from.ccd_svr_device_id());
    }
    if (from.has_ccd_svr_inst_id()) {
      set_ccd_svr_inst_id(from.ccd_svr_inst_id());
    }
    if (from.has_ccd_session_key()) {
      set_ccd_session_key(from.ccd_session_key());
    }
    if (from.has_ccd_login_blob()) {
      set_ccd_login_blob(from.ccd_login_blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDToCCDCredential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDToCCDCredential::CopyFrom(const CCDToCCDCredential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDToCCDCredential::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void CCDToCCDCredential::Swap(CCDToCCDCredential* other) {
  if (other != this) {
    std::swap(ccd_svr_user_id_, other->ccd_svr_user_id_);
    std::swap(ccd_svr_device_id_, other->ccd_svr_device_id_);
    std::swap(ccd_svr_inst_id_, other->ccd_svr_inst_id_);
    std::swap(ccd_session_key_, other->ccd_session_key_);
    std::swap(ccd_login_blob_, other->ccd_login_blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDToCCDCredential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDToCCDCredential_descriptor_;
  metadata.reflection = CCDToCCDCredential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedDataset::kDetailsFieldNumber;
const int CachedDataset::kDetailsHashFieldNumber;
#endif  // !_MSC_VER

CachedDataset::CachedDataset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedDataset::InitAsDefaultInstance() {
  details_ = const_cast< ::vplex::vsDirectory::DatasetDetail*>(&::vplex::vsDirectory::DatasetDetail::default_instance());
}

CachedDataset::CachedDataset(const CachedDataset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedDataset::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
  details_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedDataset::~CachedDataset() {
  SharedDtor();
}

void CachedDataset::SharedDtor() {
  if (details_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete details_hash_;
  }
  if (this != default_instance_) {
    delete details_;
  }
}

void CachedDataset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedDataset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedDataset_descriptor_;
}

const CachedDataset& CachedDataset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedDataset* CachedDataset::default_instance_ = NULL;

CachedDataset* CachedDataset::New() const {
  return new CachedDataset;
}

void CachedDataset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_details()) {
      if (details_ != NULL) details_->::vplex::vsDirectory::DatasetDetail::Clear();
    }
    if (has_details_hash()) {
      if (details_hash_ != &::google::protobuf::internal::kEmptyString) {
        details_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedDataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.DatasetDetail details = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details_hash;
        break;
      }
      
      // optional string details_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_hash().data(), this->details_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedDataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.DatasetDetail details = 1;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->details(), output);
  }
  
  // optional string details_hash = 2;
  if (has_details_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_hash().data(), this->details_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->details_hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedDataset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.DatasetDetail details = 1;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->details(), target);
  }
  
  // optional string details_hash = 2;
  if (has_details_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_hash().data(), this->details_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->details_hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedDataset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.DatasetDetail details = 1;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }
    
    // optional string details_hash = 2;
    if (has_details_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedDataset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedDataset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedDataset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedDataset::MergeFrom(const CachedDataset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::vplex::vsDirectory::DatasetDetail::MergeFrom(from.details());
    }
    if (from.has_details_hash()) {
      set_details_hash(from.details_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedDataset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedDataset::CopyFrom(const CachedDataset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedDataset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void CachedDataset::Swap(CachedDataset* other) {
  if (other != this) {
    std::swap(details_, other->details_);
    std::swap(details_hash_, other->details_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedDataset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedDataset_descriptor_;
  metadata.reflection = CachedDataset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedSubscription::kDetailsFieldNumber;
const int CachedSubscription::kDetailsHashFieldNumber;
const int CachedSubscription::kAbsDeviceRootFieldNumber;
#endif  // !_MSC_VER

CachedSubscription::CachedSubscription()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedSubscription::InitAsDefaultInstance() {
  details_ = const_cast< ::vplex::vsDirectory::Subscription*>(&::vplex::vsDirectory::Subscription::default_instance());
}

CachedSubscription::CachedSubscription(const CachedSubscription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedSubscription::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
  details_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  abs_device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedSubscription::~CachedSubscription() {
  SharedDtor();
}

void CachedSubscription::SharedDtor() {
  if (details_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete details_hash_;
  }
  if (abs_device_root_ != &::google::protobuf::internal::kEmptyString) {
    delete abs_device_root_;
  }
  if (this != default_instance_) {
    delete details_;
  }
}

void CachedSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedSubscription_descriptor_;
}

const CachedSubscription& CachedSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedSubscription* CachedSubscription::default_instance_ = NULL;

CachedSubscription* CachedSubscription::New() const {
  return new CachedSubscription;
}

void CachedSubscription::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_details()) {
      if (details_ != NULL) details_->::vplex::vsDirectory::Subscription::Clear();
    }
    if (has_details_hash()) {
      if (details_hash_ != &::google::protobuf::internal::kEmptyString) {
        details_hash_->clear();
      }
    }
    if (has_abs_device_root()) {
      if (abs_device_root_ != &::google::protobuf::internal::kEmptyString) {
        abs_device_root_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.Subscription details = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details_hash;
        break;
      }
      
      // optional string details_hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->details_hash().data(), this->details_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_abs_device_root;
        break;
      }
      
      // required string abs_device_root = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abs_device_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abs_device_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abs_device_root().data(), this->abs_device_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.Subscription details = 1;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->details(), output);
  }
  
  // optional string details_hash = 2;
  if (has_details_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_hash().data(), this->details_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->details_hash(), output);
  }
  
  // required string abs_device_root = 3;
  if (has_abs_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abs_device_root().data(), this->abs_device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->abs_device_root(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedSubscription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.Subscription details = 1;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->details(), target);
  }
  
  // optional string details_hash = 2;
  if (has_details_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->details_hash().data(), this->details_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->details_hash(), target);
  }
  
  // required string abs_device_root = 3;
  if (has_abs_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abs_device_root().data(), this->abs_device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->abs_device_root(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedSubscription::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.Subscription details = 1;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }
    
    // optional string details_hash = 2;
    if (has_details_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details_hash());
    }
    
    // required string abs_device_root = 3;
    if (has_abs_device_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abs_device_root());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedSubscription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedSubscription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedSubscription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedSubscription::MergeFrom(const CachedSubscription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      mutable_details()->::vplex::vsDirectory::Subscription::MergeFrom(from.details());
    }
    if (from.has_details_hash()) {
      set_details_hash(from.details_hash());
    }
    if (from.has_abs_device_root()) {
      set_abs_device_root(from.abs_device_root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedSubscription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedSubscription::CopyFrom(const CachedSubscription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedSubscription::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void CachedSubscription::Swap(CachedSubscription* other) {
  if (other != this) {
    std::swap(details_, other->details_);
    std::swap(details_hash_, other->details_hash_);
    std::swap(abs_device_root_, other->abs_device_root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedSubscription_descriptor_;
  metadata.reflection = CachedSubscription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicstreamDir::kDirectoryFieldNumber;
const int PicstreamDir::kIndexFieldNumber;
const int PicstreamDir::kNeverInitFieldNumber;
#endif  // !_MSC_VER

PicstreamDir::PicstreamDir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PicstreamDir::InitAsDefaultInstance() {
}

PicstreamDir::PicstreamDir(const PicstreamDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PicstreamDir::SharedCtor() {
  _cached_size_ = 0;
  directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = GOOGLE_ULONGLONG(0);
  never_init_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicstreamDir::~PicstreamDir() {
  SharedDtor();
}

void PicstreamDir::SharedDtor() {
  if (directory_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_;
  }
  if (this != default_instance_) {
  }
}

void PicstreamDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PicstreamDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicstreamDir_descriptor_;
}

const PicstreamDir& PicstreamDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

PicstreamDir* PicstreamDir::default_instance_ = NULL;

PicstreamDir* PicstreamDir::New() const {
  return new PicstreamDir;
}

void PicstreamDir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_directory()) {
      if (directory_ != &::google::protobuf::internal::kEmptyString) {
        directory_->clear();
      }
    }
    index_ = GOOGLE_ULONGLONG(0);
    never_init_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PicstreamDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string directory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory().data(), this->directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_index;
        break;
      }
      
      // required fixed64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_never_init;
        break;
      }
      
      // optional bool never_init = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_never_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &never_init_)));
          set_has_never_init();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PicstreamDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string directory = 1;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->directory(), output);
  }
  
  // required fixed64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->index(), output);
  }
  
  // optional bool never_init = 3;
  if (has_never_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->never_init(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PicstreamDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string directory = 1;
  if (has_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory().data(), this->directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->directory(), target);
  }
  
  // required fixed64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->index(), target);
  }
  
  // optional bool never_init = 3;
  if (has_never_init()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->never_init(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PicstreamDir::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string directory = 1;
    if (has_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory());
    }
    
    // required fixed64 index = 2;
    if (has_index()) {
      total_size += 1 + 8;
    }
    
    // optional bool never_init = 3;
    if (has_never_init()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicstreamDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicstreamDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PicstreamDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PicstreamDir::MergeFrom(const PicstreamDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_directory()) {
      set_directory(from.directory());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_never_init()) {
      set_never_init(from.never_init());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PicstreamDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PicstreamDir::CopyFrom(const PicstreamDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicstreamDir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PicstreamDir::Swap(PicstreamDir* other) {
  if (other != this) {
    std::swap(directory_, other->directory_);
    std::swap(index_, other->index_);
    std::swap(never_init_, other->never_init_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PicstreamDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PicstreamDir_descriptor_;
  metadata.reflection = PicstreamDir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedStatEvent::kAppIdFieldNumber;
const int CachedStatEvent::kEventIdFieldNumber;
const int CachedStatEvent::kStartTimeMsFieldNumber;
const int CachedStatEvent::kEndTimeMsFieldNumber;
const int CachedStatEvent::kEventCountFieldNumber;
const int CachedStatEvent::kEventInfoFieldNumber;
const int CachedStatEvent::kLimitReachedFieldNumber;
#endif  // !_MSC_VER

CachedStatEvent::CachedStatEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedStatEvent::InitAsDefaultInstance() {
}

CachedStatEvent::CachedStatEvent(const CachedStatEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedStatEvent::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ms_ = GOOGLE_ULONGLONG(0);
  end_time_ms_ = GOOGLE_ULONGLONG(0);
  event_count_ = 1u;
  event_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_reached_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedStatEvent::~CachedStatEvent() {
  SharedDtor();
}

void CachedStatEvent::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (event_id_ != &::google::protobuf::internal::kEmptyString) {
    delete event_id_;
  }
  if (event_info_ != &::google::protobuf::internal::kEmptyString) {
    delete event_info_;
  }
  if (this != default_instance_) {
  }
}

void CachedStatEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedStatEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedStatEvent_descriptor_;
}

const CachedStatEvent& CachedStatEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedStatEvent* CachedStatEvent::default_instance_ = NULL;

CachedStatEvent* CachedStatEvent::New() const {
  return new CachedStatEvent;
}

void CachedStatEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    if (has_event_id()) {
      if (event_id_ != &::google::protobuf::internal::kEmptyString) {
        event_id_->clear();
      }
    }
    start_time_ms_ = GOOGLE_ULONGLONG(0);
    end_time_ms_ = GOOGLE_ULONGLONG(0);
    event_count_ = 1u;
    if (has_event_info()) {
      if (event_info_ != &::google::protobuf::internal::kEmptyString) {
        event_info_->clear();
      }
    }
    limit_reached_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedStatEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_id;
        break;
      }
      
      // required string event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_id().data(), this->event_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time_ms;
        break;
      }
      
      // required uint64 start_time_ms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_ms_)));
          set_has_start_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time_ms;
        break;
      }
      
      // optional uint64 end_time_ms = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_ms_)));
          set_has_end_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_count;
        break;
      }
      
      // required uint32 event_count = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_count_)));
          set_has_event_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_event_info;
        break;
      }
      
      // optional string event_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_info().data(), this->event_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_limit_reached;
        break;
      }
      
      // optional bool limit_reached = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_reached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limit_reached_)));
          set_has_limit_reached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedStatEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_id(), output);
  }
  
  // required string event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_id().data(), this->event_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->event_id(), output);
  }
  
  // required uint64 start_time_ms = 3;
  if (has_start_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->start_time_ms(), output);
  }
  
  // optional uint64 end_time_ms = 4;
  if (has_end_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->end_time_ms(), output);
  }
  
  // required uint32 event_count = 5 [default = 1];
  if (has_event_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_count(), output);
  }
  
  // optional string event_info = 6;
  if (has_event_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_info().data(), this->event_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->event_info(), output);
  }
  
  // optional bool limit_reached = 7;
  if (has_limit_reached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->limit_reached(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedStatEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }
  
  // required string event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_id().data(), this->event_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->event_id(), target);
  }
  
  // required uint64 start_time_ms = 3;
  if (has_start_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->start_time_ms(), target);
  }
  
  // optional uint64 end_time_ms = 4;
  if (has_end_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->end_time_ms(), target);
  }
  
  // required uint32 event_count = 5 [default = 1];
  if (has_event_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_count(), target);
  }
  
  // optional string event_info = 6;
  if (has_event_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_info().data(), this->event_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->event_info(), target);
  }
  
  // optional bool limit_reached = 7;
  if (has_limit_reached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->limit_reached(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedStatEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }
    
    // required string event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_id());
    }
    
    // required uint64 start_time_ms = 3;
    if (has_start_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time_ms());
    }
    
    // optional uint64 end_time_ms = 4;
    if (has_end_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time_ms());
    }
    
    // required uint32 event_count = 5 [default = 1];
    if (has_event_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_count());
    }
    
    // optional string event_info = 6;
    if (has_event_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_info());
    }
    
    // optional bool limit_reached = 7;
    if (has_limit_reached()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedStatEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedStatEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedStatEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedStatEvent::MergeFrom(const CachedStatEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_start_time_ms()) {
      set_start_time_ms(from.start_time_ms());
    }
    if (from.has_end_time_ms()) {
      set_end_time_ms(from.end_time_ms());
    }
    if (from.has_event_count()) {
      set_event_count(from.event_count());
    }
    if (from.has_event_info()) {
      set_event_info(from.event_info());
    }
    if (from.has_limit_reached()) {
      set_limit_reached(from.limit_reached());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedStatEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedStatEvent::CopyFrom(const CachedStatEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedStatEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  return true;
}

void CachedStatEvent::Swap(CachedStatEvent* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(start_time_ms_, other->start_time_ms_);
    std::swap(end_time_ms_, other->end_time_ms_);
    std::swap(event_count_, other->event_count_);
    std::swap(event_info_, other->event_info_);
    std::swap(limit_reached_, other->limit_reached_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedStatEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedStatEvent_descriptor_;
  metadata.reflection = CachedStatEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMetadataThumbMigrateInternal::kMmThumbSrcDirFieldNumber;
const int MediaMetadataThumbMigrateInternal::kMmThumbDestDirFieldNumber;
const int MediaMetadataThumbMigrateInternal::kMmDeletePhaseFieldNumber;
#endif  // !_MSC_VER

MediaMetadataThumbMigrateInternal::MediaMetadataThumbMigrateInternal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMetadataThumbMigrateInternal::InitAsDefaultInstance() {
}

MediaMetadataThumbMigrateInternal::MediaMetadataThumbMigrateInternal(const MediaMetadataThumbMigrateInternal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMetadataThumbMigrateInternal::SharedCtor() {
  _cached_size_ = 0;
  mm_thumb_src_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mm_thumb_dest_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mm_delete_phase_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMetadataThumbMigrateInternal::~MediaMetadataThumbMigrateInternal() {
  SharedDtor();
}

void MediaMetadataThumbMigrateInternal::SharedDtor() {
  if (mm_thumb_src_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_thumb_src_dir_;
  }
  if (mm_thumb_dest_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_thumb_dest_dir_;
  }
  if (this != default_instance_) {
  }
}

void MediaMetadataThumbMigrateInternal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMetadataThumbMigrateInternal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMetadataThumbMigrateInternal_descriptor_;
}

const MediaMetadataThumbMigrateInternal& MediaMetadataThumbMigrateInternal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

MediaMetadataThumbMigrateInternal* MediaMetadataThumbMigrateInternal::default_instance_ = NULL;

MediaMetadataThumbMigrateInternal* MediaMetadataThumbMigrateInternal::New() const {
  return new MediaMetadataThumbMigrateInternal;
}

void MediaMetadataThumbMigrateInternal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mm_thumb_src_dir()) {
      if (mm_thumb_src_dir_ != &::google::protobuf::internal::kEmptyString) {
        mm_thumb_src_dir_->clear();
      }
    }
    if (has_mm_thumb_dest_dir()) {
      if (mm_thumb_dest_dir_ != &::google::protobuf::internal::kEmptyString) {
        mm_thumb_dest_dir_->clear();
      }
    }
    mm_delete_phase_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMetadataThumbMigrateInternal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mm_thumb_src_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_thumb_src_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_thumb_src_dir().data(), this->mm_thumb_src_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mm_thumb_dest_dir;
        break;
      }
      
      // optional string mm_thumb_dest_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mm_thumb_dest_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_thumb_dest_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_thumb_dest_dir().data(), this->mm_thumb_dest_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mm_delete_phase;
        break;
      }
      
      // optional bool mm_delete_phase = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_delete_phase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mm_delete_phase_)));
          set_has_mm_delete_phase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMetadataThumbMigrateInternal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mm_thumb_src_dir = 1;
  if (has_mm_thumb_src_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_src_dir().data(), this->mm_thumb_src_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mm_thumb_src_dir(), output);
  }
  
  // optional string mm_thumb_dest_dir = 2;
  if (has_mm_thumb_dest_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_dest_dir().data(), this->mm_thumb_dest_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mm_thumb_dest_dir(), output);
  }
  
  // optional bool mm_delete_phase = 3;
  if (has_mm_delete_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mm_delete_phase(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMetadataThumbMigrateInternal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mm_thumb_src_dir = 1;
  if (has_mm_thumb_src_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_src_dir().data(), this->mm_thumb_src_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mm_thumb_src_dir(), target);
  }
  
  // optional string mm_thumb_dest_dir = 2;
  if (has_mm_thumb_dest_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_dest_dir().data(), this->mm_thumb_dest_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mm_thumb_dest_dir(), target);
  }
  
  // optional bool mm_delete_phase = 3;
  if (has_mm_delete_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mm_delete_phase(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMetadataThumbMigrateInternal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mm_thumb_src_dir = 1;
    if (has_mm_thumb_src_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_thumb_src_dir());
    }
    
    // optional string mm_thumb_dest_dir = 2;
    if (has_mm_thumb_dest_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_thumb_dest_dir());
    }
    
    // optional bool mm_delete_phase = 3;
    if (has_mm_delete_phase()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMetadataThumbMigrateInternal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMetadataThumbMigrateInternal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMetadataThumbMigrateInternal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMetadataThumbMigrateInternal::MergeFrom(const MediaMetadataThumbMigrateInternal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mm_thumb_src_dir()) {
      set_mm_thumb_src_dir(from.mm_thumb_src_dir());
    }
    if (from.has_mm_thumb_dest_dir()) {
      set_mm_thumb_dest_dir(from.mm_thumb_dest_dir());
    }
    if (from.has_mm_delete_phase()) {
      set_mm_delete_phase(from.mm_delete_phase());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMetadataThumbMigrateInternal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMetadataThumbMigrateInternal::CopyFrom(const MediaMetadataThumbMigrateInternal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMetadataThumbMigrateInternal::IsInitialized() const {
  
  return true;
}

void MediaMetadataThumbMigrateInternal::Swap(MediaMetadataThumbMigrateInternal* other) {
  if (other != this) {
    std::swap(mm_thumb_src_dir_, other->mm_thumb_src_dir_);
    std::swap(mm_thumb_dest_dir_, other->mm_thumb_dest_dir_);
    std::swap(mm_delete_phase_, other->mm_delete_phase_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMetadataThumbMigrateInternal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMetadataThumbMigrateInternal_descriptor_;
  metadata.reflection = MediaMetadataThumbMigrateInternal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncBoxSettings::kEnableSyncFieldNumber;
const int SyncBoxSettings::kSyncFeaturePathFieldNumber;
const int SyncBoxSettings::kIsArchiveStorageFieldNumber;
const int SyncBoxSettings::kCoherentFieldNumber;
const int SyncBoxSettings::kSyncboxStagingAreaAbsPathFieldNumber;
const int SyncBoxSettings::kSyncboxDatasetIdFieldNumber;
#endif  // !_MSC_VER

SyncBoxSettings::SyncBoxSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncBoxSettings::InitAsDefaultInstance() {
}

SyncBoxSettings::SyncBoxSettings(const SyncBoxSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncBoxSettings::SharedCtor() {
  _cached_size_ = 0;
  enable_sync_ = false;
  sync_feature_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_archive_storage_ = false;
  coherent_ = false;
  syncbox_staging_area_abs_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  syncbox_dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncBoxSettings::~SyncBoxSettings() {
  SharedDtor();
}

void SyncBoxSettings::SharedDtor() {
  if (sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
    delete sync_feature_path_;
  }
  if (syncbox_staging_area_abs_path_ != &::google::protobuf::internal::kEmptyString) {
    delete syncbox_staging_area_abs_path_;
  }
  if (this != default_instance_) {
  }
}

void SyncBoxSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncBoxSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncBoxSettings_descriptor_;
}

const SyncBoxSettings& SyncBoxSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

SyncBoxSettings* SyncBoxSettings::default_instance_ = NULL;

SyncBoxSettings* SyncBoxSettings::New() const {
  return new SyncBoxSettings;
}

void SyncBoxSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_sync_ = false;
    if (has_sync_feature_path()) {
      if (sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
        sync_feature_path_->clear();
      }
    }
    is_archive_storage_ = false;
    coherent_ = false;
    if (has_syncbox_staging_area_abs_path()) {
      if (syncbox_staging_area_abs_path_ != &::google::protobuf::internal::kEmptyString) {
        syncbox_staging_area_abs_path_->clear();
      }
    }
    syncbox_dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncBoxSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_sync = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_sync_)));
          set_has_enable_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync_feature_path;
        break;
      }
      
      // optional string sync_feature_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_feature_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sync_feature_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sync_feature_path().data(), this->sync_feature_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_archive_storage;
        break;
      }
      
      // optional bool is_archive_storage = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_archive_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_archive_storage_)));
          set_has_is_archive_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coherent;
        break;
      }
      
      // optional bool coherent = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coherent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coherent_)));
          set_has_coherent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_syncbox_staging_area_abs_path;
        break;
      }
      
      // optional string syncbox_staging_area_abs_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syncbox_staging_area_abs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_syncbox_staging_area_abs_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->syncbox_staging_area_abs_path().data(), this->syncbox_staging_area_abs_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_syncbox_dataset_id;
        break;
      }
      
      // optional fixed64 syncbox_dataset_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_syncbox_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &syncbox_dataset_id_)));
          set_has_syncbox_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncBoxSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enable_sync = 1 [default = false];
  if (has_enable_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_sync(), output);
  }
  
  // optional string sync_feature_path = 2;
  if (has_sync_feature_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sync_feature_path().data(), this->sync_feature_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sync_feature_path(), output);
  }
  
  // optional bool is_archive_storage = 3 [default = false];
  if (has_is_archive_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_archive_storage(), output);
  }
  
  // optional bool coherent = 4 [default = false];
  if (has_coherent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->coherent(), output);
  }
  
  // optional string syncbox_staging_area_abs_path = 5;
  if (has_syncbox_staging_area_abs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->syncbox_staging_area_abs_path().data(), this->syncbox_staging_area_abs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->syncbox_staging_area_abs_path(), output);
  }
  
  // optional fixed64 syncbox_dataset_id = 6;
  if (has_syncbox_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->syncbox_dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncBoxSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enable_sync = 1 [default = false];
  if (has_enable_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_sync(), target);
  }
  
  // optional string sync_feature_path = 2;
  if (has_sync_feature_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sync_feature_path().data(), this->sync_feature_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sync_feature_path(), target);
  }
  
  // optional bool is_archive_storage = 3 [default = false];
  if (has_is_archive_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_archive_storage(), target);
  }
  
  // optional bool coherent = 4 [default = false];
  if (has_coherent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->coherent(), target);
  }
  
  // optional string syncbox_staging_area_abs_path = 5;
  if (has_syncbox_staging_area_abs_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->syncbox_staging_area_abs_path().data(), this->syncbox_staging_area_abs_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->syncbox_staging_area_abs_path(), target);
  }
  
  // optional fixed64 syncbox_dataset_id = 6;
  if (has_syncbox_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->syncbox_dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncBoxSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enable_sync = 1 [default = false];
    if (has_enable_sync()) {
      total_size += 1 + 1;
    }
    
    // optional string sync_feature_path = 2;
    if (has_sync_feature_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sync_feature_path());
    }
    
    // optional bool is_archive_storage = 3 [default = false];
    if (has_is_archive_storage()) {
      total_size += 1 + 1;
    }
    
    // optional bool coherent = 4 [default = false];
    if (has_coherent()) {
      total_size += 1 + 1;
    }
    
    // optional string syncbox_staging_area_abs_path = 5;
    if (has_syncbox_staging_area_abs_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->syncbox_staging_area_abs_path());
    }
    
    // optional fixed64 syncbox_dataset_id = 6;
    if (has_syncbox_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncBoxSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncBoxSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncBoxSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncBoxSettings::MergeFrom(const SyncBoxSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_sync()) {
      set_enable_sync(from.enable_sync());
    }
    if (from.has_sync_feature_path()) {
      set_sync_feature_path(from.sync_feature_path());
    }
    if (from.has_is_archive_storage()) {
      set_is_archive_storage(from.is_archive_storage());
    }
    if (from.has_coherent()) {
      set_coherent(from.coherent());
    }
    if (from.has_syncbox_staging_area_abs_path()) {
      set_syncbox_staging_area_abs_path(from.syncbox_staging_area_abs_path());
    }
    if (from.has_syncbox_dataset_id()) {
      set_syncbox_dataset_id(from.syncbox_dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncBoxSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncBoxSettings::CopyFrom(const SyncBoxSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncBoxSettings::IsInitialized() const {
  
  return true;
}

void SyncBoxSettings::Swap(SyncBoxSettings* other) {
  if (other != this) {
    std::swap(enable_sync_, other->enable_sync_);
    std::swap(sync_feature_path_, other->sync_feature_path_);
    std::swap(is_archive_storage_, other->is_archive_storage_);
    std::swap(coherent_, other->coherent_);
    std::swap(syncbox_staging_area_abs_path_, other->syncbox_staging_area_abs_path_);
    std::swap(syncbox_dataset_id_, other->syncbox_dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncBoxSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncBoxSettings_descriptor_;
  metadata.reflection = SyncBoxSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedUserDetails::kDatasetsFieldNumber;
const int CachedUserDetails::kSubscriptionsFieldNumber;
const int CachedUserDetails::kCachedDevicesFieldNumber;
const int CachedUserDetails::kSessionFieldNumber;
const int CachedUserDetails::kCachedUserStorageFieldNumber;
const int CachedUserDetails::kDisableBackgroundDataFieldNumber;
const int CachedUserDetails::kDisableAutoSyncFieldNumber;
const int CachedUserDetails::kDisableMobileNetworkDataFieldNumber;
const int CachedUserDetails::kCameraUploadDirsFieldNumber;
const int CachedUserDetails::kEnableCameraRollTriggerFieldNumber;
const int CachedUserDetails::kPicstreamDownloadDirsFullResFieldNumber;
const int CachedUserDetails::kPicstreamDownloadDirsLowResFieldNumber;
const int CachedUserDetails::kPicstreamDownloadDirsThumbnailFieldNumber;
const int CachedUserDetails::kEnableNotesSyncFieldNumber;
const int CachedUserDetails::kNotesSyncPathFieldNumber;
const int CachedUserDetails::kStatEventListFieldNumber;
const int CachedUserDetails::kStatEventWaitListFieldNumber;
const int CachedUserDetails::kEnableClouddocSyncFieldNumber;
const int CachedUserDetails::kMmThumbDownloadPathFieldNumber;
const int CachedUserDetails::kMigrateMmThumbDownloadPathFieldNumber;
const int CachedUserDetails::kMmThumbSyncDisabledFieldNumber;
const int CachedUserDetails::kPicstreamStorageConservationDroppingModeFieldNumber;
const int CachedUserDetails::kMmThumbSyncDisabledTypesFieldNumber;
const int CachedUserDetails::kMmThumbSyncConvertedFieldNumber;
const int CachedUserDetails::kSyncboxSyncSettingsFieldNumber;
const int CachedUserDetails::kAllowSyncboxArchiveStorageCreateDbFieldNumber;
const int CachedUserDetails::kNeedToRecreateSyncboxDatasetFieldNumber;
const int CachedUserDetails::kLocalSyncboxArchiveStorageDatasetIdFieldNumber;
#endif  // !_MSC_VER

CachedUserDetails::CachedUserDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedUserDetails::InitAsDefaultInstance() {
  session_ = const_cast< ::ccd::UserSession*>(&::ccd::UserSession::default_instance());
  migrate_mm_thumb_download_path_ = const_cast< ::ccd::MediaMetadataThumbMigrateInternal*>(&::ccd::MediaMetadataThumbMigrateInternal::default_instance());
  syncbox_sync_settings_ = const_cast< ::ccd::SyncBoxSettings*>(&::ccd::SyncBoxSettings::default_instance());
}

CachedUserDetails::CachedUserDetails(const CachedUserDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedUserDetails::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  disable_background_data_ = false;
  disable_auto_sync_ = false;
  disable_mobile_network_data_ = true;
  enable_camera_roll_trigger_ = false;
  enable_notes_sync_ = false;
  notes_sync_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enable_clouddoc_sync_ = true;
  mm_thumb_download_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  migrate_mm_thumb_download_path_ = NULL;
  mm_thumb_sync_disabled_ = false;
  picstream_storage_conservation_dropping_mode_ = false;
  mm_thumb_sync_converted_ = false;
  syncbox_sync_settings_ = NULL;
  allow_syncbox_archive_storage_create_db_ = false;
  need_to_recreate_syncbox_dataset_ = GOOGLE_ULONGLONG(0);
  local_syncbox_archive_storage_dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedUserDetails::~CachedUserDetails() {
  SharedDtor();
}

void CachedUserDetails::SharedDtor() {
  if (notes_sync_path_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_sync_path_;
  }
  if (mm_thumb_download_path_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_thumb_download_path_;
  }
  if (this != default_instance_) {
    delete session_;
    delete migrate_mm_thumb_download_path_;
    delete syncbox_sync_settings_;
  }
}

void CachedUserDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedUserDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedUserDetails_descriptor_;
}

const CachedUserDetails& CachedUserDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedUserDetails* CachedUserDetails::default_instance_ = NULL;

CachedUserDetails* CachedUserDetails::New() const {
  return new CachedUserDetails;
}

void CachedUserDetails::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::ccd::UserSession::Clear();
    }
    disable_background_data_ = false;
    disable_auto_sync_ = false;
    disable_mobile_network_data_ = true;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    enable_camera_roll_trigger_ = false;
    enable_notes_sync_ = false;
    if (has_notes_sync_path()) {
      if (notes_sync_path_ != &::google::protobuf::internal::kEmptyString) {
        notes_sync_path_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    enable_clouddoc_sync_ = true;
    if (has_mm_thumb_download_path()) {
      if (mm_thumb_download_path_ != &::google::protobuf::internal::kEmptyString) {
        mm_thumb_download_path_->clear();
      }
    }
    if (has_migrate_mm_thumb_download_path()) {
      if (migrate_mm_thumb_download_path_ != NULL) migrate_mm_thumb_download_path_->::ccd::MediaMetadataThumbMigrateInternal::Clear();
    }
    mm_thumb_sync_disabled_ = false;
    picstream_storage_conservation_dropping_mode_ = false;
    mm_thumb_sync_converted_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_syncbox_sync_settings()) {
      if (syncbox_sync_settings_ != NULL) syncbox_sync_settings_->::ccd::SyncBoxSettings::Clear();
    }
    allow_syncbox_archive_storage_create_db_ = false;
    need_to_recreate_syncbox_dataset_ = GOOGLE_ULONGLONG(0);
    local_syncbox_archive_storage_dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  datasets_.Clear();
  subscriptions_.Clear();
  cached_devices_.Clear();
  cached_user_storage_.Clear();
  camera_upload_dirs_.Clear();
  picstream_download_dirs_full_res_.Clear();
  picstream_download_dirs_low_res_.Clear();
  picstream_download_dirs_thumbnail_.Clear();
  stat_event_list_.Clear();
  stat_event_wait_list_.Clear();
  mm_thumb_sync_disabled_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedUserDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.CachedDataset datasets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datasets;
        if (input->ExpectTag(18)) goto parse_subscriptions;
        break;
      }
      
      // repeated .ccd.CachedSubscription subscriptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subscriptions;
        if (input->ExpectTag(50)) goto parse_session;
        break;
      }
      
      // required .ccd.UserSession session = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cached_devices;
        break;
      }
      
      // repeated .vplex.vsDirectory.DeviceInfo cached_devices = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cached_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cached_devices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cached_devices;
        if (input->ExpectTag(122)) goto parse_cached_user_storage;
        break;
      }
      
      // repeated .vplex.vsDirectory.UserStorage cached_user_storage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cached_user_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cached_user_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cached_user_storage;
        if (input->ExpectTag(128)) goto parse_disable_background_data;
        break;
      }
      
      // optional bool disable_background_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_background_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_background_data_)));
          set_has_disable_background_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_disable_auto_sync;
        break;
      }
      
      // optional bool disable_auto_sync = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_auto_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_auto_sync_)));
          set_has_disable_auto_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_disable_mobile_network_data;
        break;
      }
      
      // optional bool disable_mobile_network_data = 18 [default = true];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_mobile_network_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_mobile_network_data_)));
          set_has_disable_mobile_network_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_camera_upload_dirs;
        break;
      }
      
      // repeated .ccd.PicstreamDir camera_upload_dirs = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_upload_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_upload_dirs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_camera_upload_dirs;
        if (input->ExpectTag(160)) goto parse_enable_camera_roll_trigger;
        break;
      }
      
      // optional bool enable_camera_roll_trigger = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_camera_roll_trigger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_camera_roll_trigger_)));
          set_has_enable_camera_roll_trigger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_enable_notes_sync;
        break;
      }
      
      // optional bool enable_notes_sync = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_notes_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_notes_sync_)));
          set_has_enable_notes_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_stat_event_list;
        break;
      }
      
      // repeated .ccd.CachedStatEvent stat_event_list = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_stat_event_list;
        if (input->ExpectTag(200)) goto parse_enable_clouddoc_sync;
        break;
      }
      
      // optional bool enable_clouddoc_sync = 25 [default = true];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_clouddoc_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_clouddoc_sync_)));
          set_has_enable_clouddoc_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_notes_sync_path;
        break;
      }
      
      // optional string notes_sync_path = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes_sync_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes_sync_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes_sync_path().data(), this->notes_sync_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_picstream_download_dirs_full_res;
        break;
      }
      
      // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_full_res = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picstream_download_dirs_full_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picstream_download_dirs_full_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_picstream_download_dirs_full_res;
        if (input->ExpectTag(266)) goto parse_picstream_download_dirs_low_res;
        break;
      }
      
      // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_low_res = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picstream_download_dirs_low_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picstream_download_dirs_low_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_picstream_download_dirs_low_res;
        if (input->ExpectTag(274)) goto parse_mm_thumb_download_path;
        break;
      }
      
      // optional string mm_thumb_download_path = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mm_thumb_download_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_thumb_download_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_thumb_download_path().data(), this->mm_thumb_download_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_migrate_mm_thumb_download_path;
        break;
      }
      
      // optional .ccd.MediaMetadataThumbMigrateInternal migrate_mm_thumb_download_path = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_migrate_mm_thumb_download_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_migrate_mm_thumb_download_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_mm_thumb_sync_disabled;
        break;
      }
      
      // optional bool mm_thumb_sync_disabled = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_thumb_sync_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mm_thumb_sync_disabled_)));
          set_has_mm_thumb_sync_disabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_picstream_storage_conservation_dropping_mode;
        break;
      }
      
      // optional bool picstream_storage_conservation_dropping_mode = 37 [default = false];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_picstream_storage_conservation_dropping_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &picstream_storage_conservation_dropping_mode_)));
          set_has_picstream_storage_conservation_dropping_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_stat_event_wait_list;
        break;
      }
      
      // repeated .ccd.CachedStatEvent stat_event_wait_list = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat_event_wait_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_event_wait_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_stat_event_wait_list;
        if (input->ExpectTag(312)) goto parse_mm_thumb_sync_disabled_types;
        break;
      }
      
      // repeated .ccd.SyncFeature_t mm_thumb_sync_disabled_types = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_thumb_sync_disabled_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            add_mm_thumb_sync_disabled_types(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(39, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &ccd::SyncFeature_t_IsValid,
                 this->mutable_mm_thumb_sync_disabled_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_mm_thumb_sync_disabled_types;
        if (input->ExpectTag(320)) goto parse_mm_thumb_sync_converted;
        break;
      }
      
      // optional bool mm_thumb_sync_converted = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_thumb_sync_converted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mm_thumb_sync_converted_)));
          set_has_mm_thumb_sync_converted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_picstream_download_dirs_thumbnail;
        break;
      }
      
      // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_thumbnail = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picstream_download_dirs_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picstream_download_dirs_thumbnail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_picstream_download_dirs_thumbnail;
        if (input->ExpectTag(338)) goto parse_syncbox_sync_settings;
        break;
      }
      
      // optional .ccd.SyncBoxSettings syncbox_sync_settings = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syncbox_sync_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncbox_sync_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_allow_syncbox_archive_storage_create_db;
        break;
      }
      
      // optional bool allow_syncbox_archive_storage_create_db = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_syncbox_archive_storage_create_db:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_syncbox_archive_storage_create_db_)));
          set_has_allow_syncbox_archive_storage_create_db();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_need_to_recreate_syncbox_dataset;
        break;
      }
      
      // optional fixed64 need_to_recreate_syncbox_dataset = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_need_to_recreate_syncbox_dataset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &need_to_recreate_syncbox_dataset_)));
          set_has_need_to_recreate_syncbox_dataset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_local_syncbox_archive_storage_dataset_id;
        break;
      }
      
      // optional fixed64 local_syncbox_archive_storage_dataset_id = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_syncbox_archive_storage_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &local_syncbox_archive_storage_dataset_id_)));
          set_has_local_syncbox_archive_storage_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedUserDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.CachedDataset datasets = 1;
  for (int i = 0; i < this->datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datasets(i), output);
  }
  
  // repeated .ccd.CachedSubscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subscriptions(i), output);
  }
  
  // required .ccd.UserSession session = 6;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->session(), output);
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo cached_devices = 14;
  for (int i = 0; i < this->cached_devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cached_devices(i), output);
  }
  
  // repeated .vplex.vsDirectory.UserStorage cached_user_storage = 15;
  for (int i = 0; i < this->cached_user_storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cached_user_storage(i), output);
  }
  
  // optional bool disable_background_data = 16;
  if (has_disable_background_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->disable_background_data(), output);
  }
  
  // optional bool disable_auto_sync = 17;
  if (has_disable_auto_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->disable_auto_sync(), output);
  }
  
  // optional bool disable_mobile_network_data = 18 [default = true];
  if (has_disable_mobile_network_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->disable_mobile_network_data(), output);
  }
  
  // repeated .ccd.PicstreamDir camera_upload_dirs = 19;
  for (int i = 0; i < this->camera_upload_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->camera_upload_dirs(i), output);
  }
  
  // optional bool enable_camera_roll_trigger = 20;
  if (has_enable_camera_roll_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->enable_camera_roll_trigger(), output);
  }
  
  // optional bool enable_notes_sync = 23 [default = false];
  if (has_enable_notes_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enable_notes_sync(), output);
  }
  
  // repeated .ccd.CachedStatEvent stat_event_list = 24;
  for (int i = 0; i < this->stat_event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->stat_event_list(i), output);
  }
  
  // optional bool enable_clouddoc_sync = 25 [default = true];
  if (has_enable_clouddoc_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->enable_clouddoc_sync(), output);
  }
  
  // optional string notes_sync_path = 26;
  if (has_notes_sync_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes_sync_path().data(), this->notes_sync_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->notes_sync_path(), output);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_full_res = 32;
  for (int i = 0; i < this->picstream_download_dirs_full_res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->picstream_download_dirs_full_res(i), output);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_low_res = 33;
  for (int i = 0; i < this->picstream_download_dirs_low_res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->picstream_download_dirs_low_res(i), output);
  }
  
  // optional string mm_thumb_download_path = 34;
  if (has_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_download_path().data(), this->mm_thumb_download_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->mm_thumb_download_path(), output);
  }
  
  // optional .ccd.MediaMetadataThumbMigrateInternal migrate_mm_thumb_download_path = 35;
  if (has_migrate_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->migrate_mm_thumb_download_path(), output);
  }
  
  // optional bool mm_thumb_sync_disabled = 36;
  if (has_mm_thumb_sync_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->mm_thumb_sync_disabled(), output);
  }
  
  // optional bool picstream_storage_conservation_dropping_mode = 37 [default = false];
  if (has_picstream_storage_conservation_dropping_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->picstream_storage_conservation_dropping_mode(), output);
  }
  
  // repeated .ccd.CachedStatEvent stat_event_wait_list = 38;
  for (int i = 0; i < this->stat_event_wait_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->stat_event_wait_list(i), output);
  }
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_disabled_types = 39;
  for (int i = 0; i < this->mm_thumb_sync_disabled_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->mm_thumb_sync_disabled_types(i), output);
  }
  
  // optional bool mm_thumb_sync_converted = 40;
  if (has_mm_thumb_sync_converted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->mm_thumb_sync_converted(), output);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_thumbnail = 41;
  for (int i = 0; i < this->picstream_download_dirs_thumbnail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->picstream_download_dirs_thumbnail(i), output);
  }
  
  // optional .ccd.SyncBoxSettings syncbox_sync_settings = 42;
  if (has_syncbox_sync_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->syncbox_sync_settings(), output);
  }
  
  // optional bool allow_syncbox_archive_storage_create_db = 43;
  if (has_allow_syncbox_archive_storage_create_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->allow_syncbox_archive_storage_create_db(), output);
  }
  
  // optional fixed64 need_to_recreate_syncbox_dataset = 44;
  if (has_need_to_recreate_syncbox_dataset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(44, this->need_to_recreate_syncbox_dataset(), output);
  }
  
  // optional fixed64 local_syncbox_archive_storage_dataset_id = 45;
  if (has_local_syncbox_archive_storage_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(45, this->local_syncbox_archive_storage_dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedUserDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.CachedDataset datasets = 1;
  for (int i = 0; i < this->datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datasets(i), target);
  }
  
  // repeated .ccd.CachedSubscription subscriptions = 2;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subscriptions(i), target);
  }
  
  // required .ccd.UserSession session = 6;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->session(), target);
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo cached_devices = 14;
  for (int i = 0; i < this->cached_devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cached_devices(i), target);
  }
  
  // repeated .vplex.vsDirectory.UserStorage cached_user_storage = 15;
  for (int i = 0; i < this->cached_user_storage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->cached_user_storage(i), target);
  }
  
  // optional bool disable_background_data = 16;
  if (has_disable_background_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->disable_background_data(), target);
  }
  
  // optional bool disable_auto_sync = 17;
  if (has_disable_auto_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->disable_auto_sync(), target);
  }
  
  // optional bool disable_mobile_network_data = 18 [default = true];
  if (has_disable_mobile_network_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->disable_mobile_network_data(), target);
  }
  
  // repeated .ccd.PicstreamDir camera_upload_dirs = 19;
  for (int i = 0; i < this->camera_upload_dirs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->camera_upload_dirs(i), target);
  }
  
  // optional bool enable_camera_roll_trigger = 20;
  if (has_enable_camera_roll_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->enable_camera_roll_trigger(), target);
  }
  
  // optional bool enable_notes_sync = 23 [default = false];
  if (has_enable_notes_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enable_notes_sync(), target);
  }
  
  // repeated .ccd.CachedStatEvent stat_event_list = 24;
  for (int i = 0; i < this->stat_event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->stat_event_list(i), target);
  }
  
  // optional bool enable_clouddoc_sync = 25 [default = true];
  if (has_enable_clouddoc_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->enable_clouddoc_sync(), target);
  }
  
  // optional string notes_sync_path = 26;
  if (has_notes_sync_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes_sync_path().data(), this->notes_sync_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->notes_sync_path(), target);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_full_res = 32;
  for (int i = 0; i < this->picstream_download_dirs_full_res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->picstream_download_dirs_full_res(i), target);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_low_res = 33;
  for (int i = 0; i < this->picstream_download_dirs_low_res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->picstream_download_dirs_low_res(i), target);
  }
  
  // optional string mm_thumb_download_path = 34;
  if (has_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_download_path().data(), this->mm_thumb_download_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->mm_thumb_download_path(), target);
  }
  
  // optional .ccd.MediaMetadataThumbMigrateInternal migrate_mm_thumb_download_path = 35;
  if (has_migrate_mm_thumb_download_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->migrate_mm_thumb_download_path(), target);
  }
  
  // optional bool mm_thumb_sync_disabled = 36;
  if (has_mm_thumb_sync_disabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->mm_thumb_sync_disabled(), target);
  }
  
  // optional bool picstream_storage_conservation_dropping_mode = 37 [default = false];
  if (has_picstream_storage_conservation_dropping_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->picstream_storage_conservation_dropping_mode(), target);
  }
  
  // repeated .ccd.CachedStatEvent stat_event_wait_list = 38;
  for (int i = 0; i < this->stat_event_wait_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->stat_event_wait_list(i), target);
  }
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_disabled_types = 39;
  for (int i = 0; i < this->mm_thumb_sync_disabled_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->mm_thumb_sync_disabled_types(i), target);
  }
  
  // optional bool mm_thumb_sync_converted = 40;
  if (has_mm_thumb_sync_converted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->mm_thumb_sync_converted(), target);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_thumbnail = 41;
  for (int i = 0; i < this->picstream_download_dirs_thumbnail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->picstream_download_dirs_thumbnail(i), target);
  }
  
  // optional .ccd.SyncBoxSettings syncbox_sync_settings = 42;
  if (has_syncbox_sync_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->syncbox_sync_settings(), target);
  }
  
  // optional bool allow_syncbox_archive_storage_create_db = 43;
  if (has_allow_syncbox_archive_storage_create_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->allow_syncbox_archive_storage_create_db(), target);
  }
  
  // optional fixed64 need_to_recreate_syncbox_dataset = 44;
  if (has_need_to_recreate_syncbox_dataset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(44, this->need_to_recreate_syncbox_dataset(), target);
  }
  
  // optional fixed64 local_syncbox_archive_storage_dataset_id = 45;
  if (has_local_syncbox_archive_storage_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(45, this->local_syncbox_archive_storage_dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedUserDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required .ccd.UserSession session = 6;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // optional bool disable_background_data = 16;
    if (has_disable_background_data()) {
      total_size += 2 + 1;
    }
    
    // optional bool disable_auto_sync = 17;
    if (has_disable_auto_sync()) {
      total_size += 2 + 1;
    }
    
    // optional bool disable_mobile_network_data = 18 [default = true];
    if (has_disable_mobile_network_data()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool enable_camera_roll_trigger = 20;
    if (has_enable_camera_roll_trigger()) {
      total_size += 2 + 1;
    }
    
    // optional bool enable_notes_sync = 23 [default = false];
    if (has_enable_notes_sync()) {
      total_size += 2 + 1;
    }
    
    // optional string notes_sync_path = 26;
    if (has_notes_sync_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes_sync_path());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool enable_clouddoc_sync = 25 [default = true];
    if (has_enable_clouddoc_sync()) {
      total_size += 2 + 1;
    }
    
    // optional string mm_thumb_download_path = 34;
    if (has_mm_thumb_download_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_thumb_download_path());
    }
    
    // optional .ccd.MediaMetadataThumbMigrateInternal migrate_mm_thumb_download_path = 35;
    if (has_migrate_mm_thumb_download_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->migrate_mm_thumb_download_path());
    }
    
    // optional bool mm_thumb_sync_disabled = 36;
    if (has_mm_thumb_sync_disabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool picstream_storage_conservation_dropping_mode = 37 [default = false];
    if (has_picstream_storage_conservation_dropping_mode()) {
      total_size += 2 + 1;
    }
    
    // optional bool mm_thumb_sync_converted = 40;
    if (has_mm_thumb_sync_converted()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .ccd.SyncBoxSettings syncbox_sync_settings = 42;
    if (has_syncbox_sync_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncbox_sync_settings());
    }
    
    // optional bool allow_syncbox_archive_storage_create_db = 43;
    if (has_allow_syncbox_archive_storage_create_db()) {
      total_size += 2 + 1;
    }
    
    // optional fixed64 need_to_recreate_syncbox_dataset = 44;
    if (has_need_to_recreate_syncbox_dataset()) {
      total_size += 2 + 8;
    }
    
    // optional fixed64 local_syncbox_archive_storage_dataset_id = 45;
    if (has_local_syncbox_archive_storage_dataset_id()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .ccd.CachedDataset datasets = 1;
  total_size += 1 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }
  
  // repeated .ccd.CachedSubscription subscriptions = 2;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  // repeated .vplex.vsDirectory.DeviceInfo cached_devices = 14;
  total_size += 1 * this->cached_devices_size();
  for (int i = 0; i < this->cached_devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cached_devices(i));
  }
  
  // repeated .vplex.vsDirectory.UserStorage cached_user_storage = 15;
  total_size += 1 * this->cached_user_storage_size();
  for (int i = 0; i < this->cached_user_storage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cached_user_storage(i));
  }
  
  // repeated .ccd.PicstreamDir camera_upload_dirs = 19;
  total_size += 2 * this->camera_upload_dirs_size();
  for (int i = 0; i < this->camera_upload_dirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_upload_dirs(i));
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_full_res = 32;
  total_size += 2 * this->picstream_download_dirs_full_res_size();
  for (int i = 0; i < this->picstream_download_dirs_full_res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picstream_download_dirs_full_res(i));
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_low_res = 33;
  total_size += 2 * this->picstream_download_dirs_low_res_size();
  for (int i = 0; i < this->picstream_download_dirs_low_res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picstream_download_dirs_low_res(i));
  }
  
  // repeated .ccd.CameraRollDownloadDirSpecInternal picstream_download_dirs_thumbnail = 41;
  total_size += 2 * this->picstream_download_dirs_thumbnail_size();
  for (int i = 0; i < this->picstream_download_dirs_thumbnail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->picstream_download_dirs_thumbnail(i));
  }
  
  // repeated .ccd.CachedStatEvent stat_event_list = 24;
  total_size += 2 * this->stat_event_list_size();
  for (int i = 0; i < this->stat_event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat_event_list(i));
  }
  
  // repeated .ccd.CachedStatEvent stat_event_wait_list = 38;
  total_size += 2 * this->stat_event_wait_list_size();
  for (int i = 0; i < this->stat_event_wait_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stat_event_wait_list(i));
  }
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_disabled_types = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->mm_thumb_sync_disabled_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->mm_thumb_sync_disabled_types(i));
    }
    total_size += 2 * this->mm_thumb_sync_disabled_types_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedUserDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedUserDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedUserDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedUserDetails::MergeFrom(const CachedUserDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasets_.MergeFrom(from.datasets_);
  subscriptions_.MergeFrom(from.subscriptions_);
  cached_devices_.MergeFrom(from.cached_devices_);
  cached_user_storage_.MergeFrom(from.cached_user_storage_);
  camera_upload_dirs_.MergeFrom(from.camera_upload_dirs_);
  picstream_download_dirs_full_res_.MergeFrom(from.picstream_download_dirs_full_res_);
  picstream_download_dirs_low_res_.MergeFrom(from.picstream_download_dirs_low_res_);
  picstream_download_dirs_thumbnail_.MergeFrom(from.picstream_download_dirs_thumbnail_);
  stat_event_list_.MergeFrom(from.stat_event_list_);
  stat_event_wait_list_.MergeFrom(from.stat_event_wait_list_);
  mm_thumb_sync_disabled_types_.MergeFrom(from.mm_thumb_sync_disabled_types_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_session()) {
      mutable_session()->::ccd::UserSession::MergeFrom(from.session());
    }
    if (from.has_disable_background_data()) {
      set_disable_background_data(from.disable_background_data());
    }
    if (from.has_disable_auto_sync()) {
      set_disable_auto_sync(from.disable_auto_sync());
    }
    if (from.has_disable_mobile_network_data()) {
      set_disable_mobile_network_data(from.disable_mobile_network_data());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_enable_camera_roll_trigger()) {
      set_enable_camera_roll_trigger(from.enable_camera_roll_trigger());
    }
    if (from.has_enable_notes_sync()) {
      set_enable_notes_sync(from.enable_notes_sync());
    }
    if (from.has_notes_sync_path()) {
      set_notes_sync_path(from.notes_sync_path());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_enable_clouddoc_sync()) {
      set_enable_clouddoc_sync(from.enable_clouddoc_sync());
    }
    if (from.has_mm_thumb_download_path()) {
      set_mm_thumb_download_path(from.mm_thumb_download_path());
    }
    if (from.has_migrate_mm_thumb_download_path()) {
      mutable_migrate_mm_thumb_download_path()->::ccd::MediaMetadataThumbMigrateInternal::MergeFrom(from.migrate_mm_thumb_download_path());
    }
    if (from.has_mm_thumb_sync_disabled()) {
      set_mm_thumb_sync_disabled(from.mm_thumb_sync_disabled());
    }
    if (from.has_picstream_storage_conservation_dropping_mode()) {
      set_picstream_storage_conservation_dropping_mode(from.picstream_storage_conservation_dropping_mode());
    }
    if (from.has_mm_thumb_sync_converted()) {
      set_mm_thumb_sync_converted(from.mm_thumb_sync_converted());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_syncbox_sync_settings()) {
      mutable_syncbox_sync_settings()->::ccd::SyncBoxSettings::MergeFrom(from.syncbox_sync_settings());
    }
    if (from.has_allow_syncbox_archive_storage_create_db()) {
      set_allow_syncbox_archive_storage_create_db(from.allow_syncbox_archive_storage_create_db());
    }
    if (from.has_need_to_recreate_syncbox_dataset()) {
      set_need_to_recreate_syncbox_dataset(from.need_to_recreate_syncbox_dataset());
    }
    if (from.has_local_syncbox_archive_storage_dataset_id()) {
      set_local_syncbox_archive_storage_dataset_id(from.local_syncbox_archive_storage_dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedUserDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedUserDetails::CopyFrom(const CachedUserDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedUserDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  for (int i = 0; i < datasets_size(); i++) {
    if (!this->datasets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < subscriptions_size(); i++) {
    if (!this->subscriptions(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cached_devices_size(); i++) {
    if (!this->cached_devices(i).IsInitialized()) return false;
  }
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  for (int i = 0; i < cached_user_storage_size(); i++) {
    if (!this->cached_user_storage(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camera_upload_dirs_size(); i++) {
    if (!this->camera_upload_dirs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < picstream_download_dirs_full_res_size(); i++) {
    if (!this->picstream_download_dirs_full_res(i).IsInitialized()) return false;
  }
  for (int i = 0; i < picstream_download_dirs_low_res_size(); i++) {
    if (!this->picstream_download_dirs_low_res(i).IsInitialized()) return false;
  }
  for (int i = 0; i < picstream_download_dirs_thumbnail_size(); i++) {
    if (!this->picstream_download_dirs_thumbnail(i).IsInitialized()) return false;
  }
  for (int i = 0; i < stat_event_list_size(); i++) {
    if (!this->stat_event_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < stat_event_wait_list_size(); i++) {
    if (!this->stat_event_wait_list(i).IsInitialized()) return false;
  }
  return true;
}

void CachedUserDetails::Swap(CachedUserDetails* other) {
  if (other != this) {
    datasets_.Swap(&other->datasets_);
    subscriptions_.Swap(&other->subscriptions_);
    cached_devices_.Swap(&other->cached_devices_);
    std::swap(session_, other->session_);
    cached_user_storage_.Swap(&other->cached_user_storage_);
    std::swap(disable_background_data_, other->disable_background_data_);
    std::swap(disable_auto_sync_, other->disable_auto_sync_);
    std::swap(disable_mobile_network_data_, other->disable_mobile_network_data_);
    camera_upload_dirs_.Swap(&other->camera_upload_dirs_);
    std::swap(enable_camera_roll_trigger_, other->enable_camera_roll_trigger_);
    picstream_download_dirs_full_res_.Swap(&other->picstream_download_dirs_full_res_);
    picstream_download_dirs_low_res_.Swap(&other->picstream_download_dirs_low_res_);
    picstream_download_dirs_thumbnail_.Swap(&other->picstream_download_dirs_thumbnail_);
    std::swap(enable_notes_sync_, other->enable_notes_sync_);
    std::swap(notes_sync_path_, other->notes_sync_path_);
    stat_event_list_.Swap(&other->stat_event_list_);
    stat_event_wait_list_.Swap(&other->stat_event_wait_list_);
    std::swap(enable_clouddoc_sync_, other->enable_clouddoc_sync_);
    std::swap(mm_thumb_download_path_, other->mm_thumb_download_path_);
    std::swap(migrate_mm_thumb_download_path_, other->migrate_mm_thumb_download_path_);
    std::swap(mm_thumb_sync_disabled_, other->mm_thumb_sync_disabled_);
    std::swap(picstream_storage_conservation_dropping_mode_, other->picstream_storage_conservation_dropping_mode_);
    mm_thumb_sync_disabled_types_.Swap(&other->mm_thumb_sync_disabled_types_);
    std::swap(mm_thumb_sync_converted_, other->mm_thumb_sync_converted_);
    std::swap(syncbox_sync_settings_, other->syncbox_sync_settings_);
    std::swap(allow_syncbox_archive_storage_create_db_, other->allow_syncbox_archive_storage_create_db_);
    std::swap(need_to_recreate_syncbox_dataset_, other->need_to_recreate_syncbox_dataset_);
    std::swap(local_syncbox_archive_storage_dataset_id_, other->local_syncbox_archive_storage_dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedUserDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedUserDetails_descriptor_;
  metadata.reflection = CachedUserDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachedUserData::kSummaryFieldNumber;
const int CachedUserData::kDetailsFieldNumber;
#endif  // !_MSC_VER

CachedUserData::CachedUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachedUserData::InitAsDefaultInstance() {
  summary_ = const_cast< ::ccd::CachedUserSummary*>(&::ccd::CachedUserSummary::default_instance());
  details_ = const_cast< ::ccd::CachedUserDetails*>(&::ccd::CachedUserDetails::default_instance());
}

CachedUserData::CachedUserData(const CachedUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachedUserData::SharedCtor() {
  _cached_size_ = 0;
  summary_ = NULL;
  details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachedUserData::~CachedUserData() {
  SharedDtor();
}

void CachedUserData::SharedDtor() {
  if (this != default_instance_) {
    delete summary_;
    delete details_;
  }
}

void CachedUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachedUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachedUserData_descriptor_;
}

const CachedUserData& CachedUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CachedUserData* CachedUserData::default_instance_ = NULL;

CachedUserData* CachedUserData::New() const {
  return new CachedUserData;
}

void CachedUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_summary()) {
      if (summary_ != NULL) summary_->::ccd::CachedUserSummary::Clear();
    }
    if (has_details()) {
      if (details_ != NULL) details_->::ccd::CachedUserDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachedUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.CachedUserSummary summary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_details;
        break;
      }
      
      // required .ccd.CachedUserDetails details = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachedUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.CachedUserSummary summary = 1;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->summary(), output);
  }
  
  // required .ccd.CachedUserDetails details = 2;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->details(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachedUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.CachedUserSummary summary = 1;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->summary(), target);
  }
  
  // required .ccd.CachedUserDetails details = 2;
  if (has_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->details(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachedUserData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.CachedUserSummary summary = 1;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summary());
    }
    
    // required .ccd.CachedUserDetails details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachedUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachedUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachedUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachedUserData::MergeFrom(const CachedUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summary()) {
      mutable_summary()->::ccd::CachedUserSummary::MergeFrom(from.summary());
    }
    if (from.has_details()) {
      mutable_details()->::ccd::CachedUserDetails::MergeFrom(from.details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachedUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachedUserData::CopyFrom(const CachedUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachedUserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_summary()) {
    if (!this->summary().IsInitialized()) return false;
  }
  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void CachedUserData::Swap(CachedUserData* other) {
  if (other != this) {
    std::swap(summary_, other->summary_);
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachedUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachedUserData_descriptor_;
  metadata.reflection = CachedUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDMainState::kLoggedInUserFieldNumber;
const int CCDMainState::kBackgroundModeIntervalSecFieldNumber;
const int CCDMainState::kLoggedOutUsersFieldNumber;
#endif  // !_MSC_VER

CCDMainState::CCDMainState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDMainState::InitAsDefaultInstance() {
}

CCDMainState::CCDMainState(const CCDMainState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDMainState::SharedCtor() {
  _cached_size_ = 0;
  logged_in_user_ = GOOGLE_ULONGLONG(0);
  background_mode_interval_sec_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDMainState::~CCDMainState() {
  SharedDtor();
}

void CCDMainState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCDMainState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDMainState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDMainState_descriptor_;
}

const CCDMainState& CCDMainState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccd_5ftypes_2eproto();  return *default_instance_;
}

CCDMainState* CCDMainState::default_instance_ = NULL;

CCDMainState* CCDMainState::New() const {
  return new CCDMainState;
}

void CCDMainState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    logged_in_user_ = GOOGLE_ULONGLONG(0);
    background_mode_interval_sec_ = -1;
  }
  logged_out_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDMainState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 logged_in_user = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &logged_in_user_)));
          set_has_logged_in_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_background_mode_interval_sec;
        break;
      }
      
      // optional int32 background_mode_interval_sec = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_mode_interval_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_mode_interval_sec_)));
          set_has_background_mode_interval_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logged_out_users;
        break;
      }
      
      // repeated .ccd.LoggedOutUser logged_out_users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logged_out_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logged_out_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_logged_out_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDMainState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 logged_in_user = 1 [default = 0];
  if (has_logged_in_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->logged_in_user(), output);
  }
  
  // optional int32 background_mode_interval_sec = 4 [default = -1];
  if (has_background_mode_interval_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->background_mode_interval_sec(), output);
  }
  
  // repeated .ccd.LoggedOutUser logged_out_users = 5;
  for (int i = 0; i < this->logged_out_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->logged_out_users(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDMainState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 logged_in_user = 1 [default = 0];
  if (has_logged_in_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->logged_in_user(), target);
  }
  
  // optional int32 background_mode_interval_sec = 4 [default = -1];
  if (has_background_mode_interval_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->background_mode_interval_sec(), target);
  }
  
  // repeated .ccd.LoggedOutUser logged_out_users = 5;
  for (int i = 0; i < this->logged_out_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->logged_out_users(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDMainState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 logged_in_user = 1 [default = 0];
    if (has_logged_in_user()) {
      total_size += 1 + 8;
    }
    
    // optional int32 background_mode_interval_sec = 4 [default = -1];
    if (has_background_mode_interval_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->background_mode_interval_sec());
    }
    
  }
  // repeated .ccd.LoggedOutUser logged_out_users = 5;
  total_size += 1 * this->logged_out_users_size();
  for (int i = 0; i < this->logged_out_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logged_out_users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDMainState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDMainState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDMainState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDMainState::MergeFrom(const CCDMainState& from) {
  GOOGLE_CHECK_NE(&from, this);
  logged_out_users_.MergeFrom(from.logged_out_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logged_in_user()) {
      set_logged_in_user(from.logged_in_user());
    }
    if (from.has_background_mode_interval_sec()) {
      set_background_mode_interval_sec(from.background_mode_interval_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDMainState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDMainState::CopyFrom(const CCDMainState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDMainState::IsInitialized() const {
  
  for (int i = 0; i < logged_out_users_size(); i++) {
    if (!this->logged_out_users(i).IsInitialized()) return false;
  }
  return true;
}

void CCDMainState::Swap(CCDMainState* other) {
  if (other != this) {
    std::swap(logged_in_user_, other->logged_in_user_);
    std::swap(background_mode_interval_sec_, other->background_mode_interval_sec_);
    logged_out_users_.Swap(&other->logged_out_users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDMainState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDMainState_descriptor_;
  metadata.reflection = CCDMainState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccd

// @@protoc_insertion_point(global_scope)
