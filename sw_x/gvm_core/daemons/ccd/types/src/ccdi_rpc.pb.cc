// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ccdi_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ccd {

namespace {

const ::google::protobuf::Descriptor* NoParamRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoParamRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerIndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerIndexRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoParamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoParamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentPlayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentPlayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetworkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* IoacAdapterWarnings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IoacAdapterWarnings_reflection_ = NULL;
const ::google::protobuf::Descriptor* IoacAdapterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IoacAdapterStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* IoacOverallStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IoacOverallStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoggedOutUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoggedOutUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSystemStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSystemStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfraHttpRequestInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfraHttpRequestInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfraHttpRequestOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfraHttpRequestOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterStorageNodeInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterStorageNodeInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnregisterStorageNodeInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnregisterStorageNodeInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteFileAccessControlDirSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteFileAccessControlDirSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteFileAccessControlDirs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteFileAccessControlDirs_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateStorageNodeInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateStorageNodeInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LanDeviceRouteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LanDeviceRouteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LanDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LanDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportLanDevicesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportLanDevicesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLanDevicesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLanDevicesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLanDevicesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLanDevicesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListStorageNodeDatasetsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListStorageNodeDatasetsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrusteeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrusteeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDWin32StartParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDWin32StartParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddDatasetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddDatasetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddSyncSubscriptionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddSyncSubscriptionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSyncSubscriptionsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSyncSubscriptionsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventsCreateQueueInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventsCreateQueueInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventsCreateQueueOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventsCreateQueueOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventsDestroyQueueInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventsDestroyQueueInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventsDequeueInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventsDequeueInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSyncFeatureStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSyncFeatureStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDeviceInfoChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDeviceInfoChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDeviceConnectionChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDeviceConnectionChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDatasetContentChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDatasetContentChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDatasetChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDatasetChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* PairingRequestAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PairingRequestAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventPairingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventPairingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventStorageNodeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventStorageNodeChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventUserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventUserLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventUserLogout_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDocSaveAndGoCompletion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDocSaveAndGoCompletion_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDocSaveAndGoEngineStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDocSaveAndGoEngineStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSWUpdateProgress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSWUpdateProgress_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventIoacStatusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventIoacStatusChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventLanDevicesChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventLanDevicesChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventLanDevicesProbeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventLanDevicesProbeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventPowerModeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventPowerModeChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventRemoteSwUpdateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventRemoteSwUpdateMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventAsyncUploadCompletion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventAsyncUploadCompletion_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSyncBackCompletion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSyncBackCompletion_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventPicStreamDBUpdateComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventPicStreamDBUpdateComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventPicStreamStorageConservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventPicStreamStorageConservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventDeviceCredentialsChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDeviceCredentialsChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventUserCredentialsChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventUserCredentialsChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* CcdiEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CcdiEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventsDequeueOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventsDequeueOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetDirectoryEntriesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetDirectoryEntriesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetDirectoryEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetDirectoryEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatasetDirectoryEntriesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatasetDirectoryEntriesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInfraHttpInfoInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfraHttpInfoInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInfraHttpInfoOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInfraHttpInfoOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLocalHttpInfoInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLocalHttpInfoInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLocalHttpInfoOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLocalHttpInfoOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPersonalCloudStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPersonalCloudStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceConnectionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceConnectionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageNodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageNodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPersonalCloudStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPersonalCloudStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LookupAbsPathInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LookupAbsPathInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventSyncHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventSyncHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSyncStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSyncStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectSyncState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectSyncState_reflection_ = NULL;
const ::google::protobuf::Descriptor* DatasetSyncStateSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatasetSyncStateSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureSyncStateSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureSyncStateSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMetadataThumbMigrateStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMetadataThumbMigrateStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncFeatureSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncFeatureSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* LookupAbsPathOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LookupAbsPathOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSyncStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSyncStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSyncStateNotificationsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSyncStateNotificationsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncEventSyncComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncEventSyncComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncEventFileAdded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncEventFileAdded_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncEventFileRemoved_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncEventFileRemoved_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncEventError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncEventError_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncEventFileStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncEventFileStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncStateNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncStateNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSyncStateNotificationsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSyncStateNotificationsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLinkedDevicesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLinkedDevicesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkedDeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkedDeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListLinkedDevicesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListLinkedDevicesOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListOwnedDatasetsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListOwnedDatasetsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListOwnedDatasetsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListOwnedDatasetsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListUserStorageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListUserStorageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListUserStorageOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListUserStorageOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSyncSubscriptionsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSyncSubscriptionsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncSubscriptionDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncSubscriptionDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListSyncSubscriptionsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListSyncSubscriptionsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteWakeupInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteWakeupInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteSwUpdateMessageInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteSwUpdateMessageInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameDatasetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameDatasetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateMsaDataCommitInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateMsaDataCommitInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncOnceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncOnceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncOnceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncOnceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkDeviceInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkDeviceInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAppStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAppStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateAppStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateAppStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraRollDownloadDirSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraRollDownloadDirSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaMetadataThumbMigrate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaMetadataThumbMigrate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncFeatureSettingsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncFeatureSettingsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSyncSettingsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSyncSettingsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSyncSettingsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSyncSettingsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSyncSubscriptionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSyncSubscriptionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateCheckInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateCheckInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateCheckOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateCheckOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateBeginDownloadInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateBeginDownloadInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateBeginDownloadOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateBeginDownloadOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateGetDownloadProgressInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateGetDownloadProgressInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateGetDownloadProgressOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateGetDownloadProgressOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateEndDownloadInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateEndDownloadInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateCancelDownloadInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateCancelDownloadInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SWUpdateSetCcdVersionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SWUpdateSetCcdVersionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSystemStateInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSystemStateInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSystemStateOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSystemStateOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginMetadataTransactionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginMetadataTransactionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMetadataInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMetadataInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteMetadataInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteMetadataInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCollectionInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCollectionInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCollectionDetailsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCollectionDetailsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCollectionDetailsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCollectionDetailsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginCatalogInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginCatalogInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitCatalogInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitCatalogInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndCatalogInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndCatalogInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCatalogInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCatalogInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSAGetContentURLInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSAGetContentURLInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSAGetContentURLOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSAGetContentURLOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MCAQueryMetadataObjectsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MCAQueryMetadataObjectsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* MCAQueryMetadataObjectsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MCAQueryMetadataObjectsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondToPairingRequestInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondToPairingRequestInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingPinInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingPinInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestPairingPinOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPairingPinOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPairingStatusInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPairingStatusInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPairingStatusOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPairingStatusOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDIQueryPicStreamObjectsInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDIQueryPicStreamObjectsInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CCDIQueryPicStreamObjectsOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CCDIQueryPicStreamObjectsOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* PicStreamQueryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PicStreamQueryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PicStreamContentDirectoryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PicStreamContentDirectoryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PicStreamItemFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PicStreamItemFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* PicStreamAlbumFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PicStreamAlbumFields_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesStoreFileInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesStoreFileInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesStoreFileOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesStoreFileOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesShareFileInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesShareFileInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesUnshareFileInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesUnshareFileInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesDeleteSharedFileInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesDeleteSharedFileInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesQueryInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesQueryInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesQueryObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesQueryObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* SharedFilesQueryOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SharedFilesQueryOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoteExecutableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoteExecutableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRemoteExecutableInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRemoteExecutableInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnregisterRemoteExecutableInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnregisterRemoteExecutableInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRegisteredRemoteExecutablesInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRegisteredRemoteExecutablesInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListRegisteredRemoteExecutablesOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRegisteredRemoteExecutablesOutput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InfraHttpService_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocalHttpService_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IoacStatusSummary_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InfraHttpRequestMethod_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LanDeviceType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LanInterfaceType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NewDatasetType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncSubscriptionType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncFeature_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DatasetSyncStateType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CcdApp_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceInfoChangeType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StorageNodeChangeType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogoutReason_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PowerMode_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AsyncUploadState_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceCredChangeType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceConnectionState_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncEventType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncStateType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FeatureSyncStateType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncEventErrorType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncFileChangeType_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SWUpdateMaskBits_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SWUpdateDownloadState_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DocSaveAndGoChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PicStream_DBFilterType_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ccdi_5frpc_2eproto() {
  protobuf_AddDesc_ccdi_5frpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ccdi_rpc.proto");
  GOOGLE_CHECK(file != NULL);
  NoParamRequest_descriptor_ = file->message_type(0);
  static const int NoParamRequest_offsets_[1] = {
  };
  NoParamRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoParamRequest_descriptor_,
      NoParamRequest::default_instance_,
      NoParamRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoParamRequest));
  PlayerIndexRequest_descriptor_ = file->message_type(1);
  static const int PlayerIndexRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIndexRequest, player_index_),
  };
  PlayerIndexRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerIndexRequest_descriptor_,
      PlayerIndexRequest::default_instance_,
      PlayerIndexRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIndexRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerIndexRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerIndexRequest));
  UserIdRequest_descriptor_ = file->message_type(2);
  static const int UserIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRequest, user_id_),
  };
  UserIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserIdRequest_descriptor_,
      UserIdRequest::default_instance_,
      UserIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserIdRequest));
  NoParamResponse_descriptor_ = file->message_type(3);
  static const int NoParamResponse_offsets_[1] = {
  };
  NoParamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoParamResponse_descriptor_,
      NoParamResponse::default_instance_,
      NoParamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoParamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoParamResponse));
  CurrentPlayer_descriptor_ = file->message_type(4);
  static const int CurrentPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayer, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayer, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayer, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayer, has_elevated_privileges_),
  };
  CurrentPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentPlayer_descriptor_,
      CurrentPlayer::default_instance_,
      CurrentPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentPlayer));
  CurrentPlayers_descriptor_ = file->message_type(5);
  static const int CurrentPlayers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayers, players_),
  };
  CurrentPlayers_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentPlayers_descriptor_,
      CurrentPlayers::default_instance_,
      CurrentPlayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayers, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentPlayers, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentPlayers));
  DiskInfo_descriptor_ = file->message_type(6);
  static const int DiskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, total_size_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, free_space_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, available_inodes_),
  };
  DiskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskInfo_descriptor_,
      DiskInfo::default_instance_,
      DiskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskInfo));
  NetworkInfo_descriptor_ = file->message_type(7);
  static const int NetworkInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, proxy_agent_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, media_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, virtual_drive_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, tunnel_service_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, ext_tunnel_service_port_),
  };
  NetworkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkInfo_descriptor_,
      NetworkInfo::default_instance_,
      NetworkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkInfo));
  IoacAdapterWarnings_descriptor_ = file->message_type(8);
  static const int IoacAdapterWarnings_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, magic_packet_not_supported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, offload_arp_not_supported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, offload_ns_not_supported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, offload_80211_rsn_rekey_not_supported_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, offload_arp_failed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, enable_keepalive_failed_),
  };
  IoacAdapterWarnings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IoacAdapterWarnings_descriptor_,
      IoacAdapterWarnings::default_instance_,
      IoacAdapterWarnings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterWarnings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IoacAdapterWarnings));
  IoacAdapterStatus_descriptor_ = file->message_type(9);
  static const int IoacAdapterStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterStatus, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterStatus, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterStatus, warnings_),
  };
  IoacAdapterStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IoacAdapterStatus_descriptor_,
      IoacAdapterStatus::default_instance_,
      IoacAdapterStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacAdapterStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IoacAdapterStatus));
  IoacOverallStatus_descriptor_ = file->message_type(10);
  static const int IoacOverallStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacOverallStatus, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacOverallStatus, adapters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacOverallStatus, warn_sleep_not_supported_),
  };
  IoacOverallStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IoacOverallStatus_descriptor_,
      IoacOverallStatus::default_instance_,
      IoacOverallStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacOverallStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoacOverallStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IoacOverallStatus));
  GetSystemStateInput_descriptor_ = file->message_type(11);
  static const int GetSystemStateInput_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_logged_out_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_disk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_device_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_network_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_ioac_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_enable_ioac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_ioac_already_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_background_mode_interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_only_mobile_network_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_stream_power_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_power_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, get_pd_instance_id_),
  };
  GetSystemStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemStateInput_descriptor_,
      GetSystemStateInput::default_instance_,
      GetSystemStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemStateInput));
  PowerStatus_descriptor_ = file->message_type(12);
  static const int PowerStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStatus, power_mode_),
  };
  PowerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PowerStatus_descriptor_,
      PowerStatus::default_instance_,
      PowerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PowerStatus));
  CurrentUser_descriptor_ = file->message_type(13);
  static const int CurrentUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentUser, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentUser, username_),
  };
  CurrentUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentUser_descriptor_,
      CurrentUser::default_instance_,
      CurrentUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentUser));
  LoggedOutUser_descriptor_ = file->message_type(14);
  static const int LoggedOutUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOutUser, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOutUser, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOutUser, reason_),
  };
  LoggedOutUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoggedOutUser_descriptor_,
      LoggedOutUser::default_instance_,
      LoggedOutUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOutUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoggedOutUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoggedOutUser));
  GetSystemStateOutput_descriptor_ = file->message_type(15);
  static const int GetSystemStateOutput_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, logged_out_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, disk_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, device_locale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, network_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, ioac_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, background_mode_interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, only_mobile_network_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, enable_ioac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, ioac_already_in_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, stream_power_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, power_mode_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, pd_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, pd_instance_id_num_),
  };
  GetSystemStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSystemStateOutput_descriptor_,
      GetSystemStateOutput::default_instance_,
      GetSystemStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSystemStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSystemStateOutput));
  LoginInput_descriptor_ = file->message_type(16);
  static const int LoginInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, pairing_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, ac_eula_agreed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, skip_if_already_correct_),
  };
  LoginInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginInput_descriptor_,
      LoginInput::default_instance_,
      LoginInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginInput));
  LoginOutput_descriptor_ = file->message_type(17);
  static const int LoginOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginOutput, user_id_),
  };
  LoginOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginOutput_descriptor_,
      LoginOutput::default_instance_,
      LoginOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginOutput));
  LogoutInput_descriptor_ = file->message_type(18);
  static const int LogoutInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutInput, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutInput, local_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutInput, warn_if_no_user_),
  };
  LogoutInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutInput_descriptor_,
      LogoutInput::default_instance_,
      LogoutInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutInput));
  InfraHttpRequestInput_descriptor_ = file->message_type(19);
  static const int InfraHttpRequestInput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, secure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, url_suffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, post_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, privileged_operation_),
  };
  InfraHttpRequestInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfraHttpRequestInput_descriptor_,
      InfraHttpRequestInput::default_instance_,
      InfraHttpRequestInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfraHttpRequestInput));
  InfraHttpRequestOutput_descriptor_ = file->message_type(20);
  static const int InfraHttpRequestOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestOutput, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestOutput, http_response_),
  };
  InfraHttpRequestOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfraHttpRequestOutput_descriptor_,
      InfraHttpRequestOutput::default_instance_,
      InfraHttpRequestOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfraHttpRequestOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfraHttpRequestOutput));
  RegisterStorageNodeInput_descriptor_ = file->message_type(21);
  static const int RegisterStorageNodeInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStorageNodeInput, user_id_),
  };
  RegisterStorageNodeInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterStorageNodeInput_descriptor_,
      RegisterStorageNodeInput::default_instance_,
      RegisterStorageNodeInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStorageNodeInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterStorageNodeInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterStorageNodeInput));
  UnregisterStorageNodeInput_descriptor_ = file->message_type(22);
  static const int UnregisterStorageNodeInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterStorageNodeInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterStorageNodeInput, device_id_),
  };
  UnregisterStorageNodeInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnregisterStorageNodeInput_descriptor_,
      UnregisterStorageNodeInput::default_instance_,
      UnregisterStorageNodeInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterStorageNodeInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterStorageNodeInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnregisterStorageNodeInput));
  RemoteFileAccessControlDirSpec_descriptor_ = file->message_type(23);
  static const int RemoteFileAccessControlDirSpec_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirSpec, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirSpec, is_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirSpec, is_allowed_),
  };
  RemoteFileAccessControlDirSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteFileAccessControlDirSpec_descriptor_,
      RemoteFileAccessControlDirSpec::default_instance_,
      RemoteFileAccessControlDirSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteFileAccessControlDirSpec));
  RemoteFileAccessControlDirs_descriptor_ = file->message_type(24);
  static const int RemoteFileAccessControlDirs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirs, dirs_),
  };
  RemoteFileAccessControlDirs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteFileAccessControlDirs_descriptor_,
      RemoteFileAccessControlDirs::default_instance_,
      RemoteFileAccessControlDirs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteFileAccessControlDirs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteFileAccessControlDirs));
  UpdateStorageNodeInput_descriptor_ = file->message_type(25);
  static const int UpdateStorageNodeInput_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, feature_media_server_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, feature_virt_drive_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, feature_remote_file_access_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, feature_my_storage_server_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, add_remotefile_access_control_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, remove_remotefile_access_control_dir_),
  };
  UpdateStorageNodeInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateStorageNodeInput_descriptor_,
      UpdateStorageNodeInput::default_instance_,
      UpdateStorageNodeInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateStorageNodeInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateStorageNodeInput));
  LanDeviceRouteInfo_descriptor_ = file->message_type(26);
  static const int LanDeviceRouteInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, ip_v4_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, ip_v6_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, media_server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, virtual_drive_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, web_front_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, tunnel_service_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, ext_tunnel_service_port_),
  };
  LanDeviceRouteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LanDeviceRouteInfo_descriptor_,
      LanDeviceRouteInfo::default_instance_,
      LanDeviceRouteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceRouteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LanDeviceRouteInfo));
  LanDeviceInfo_descriptor_ = file->message_type(27);
  static const int LanDeviceInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, route_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, notifications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, pd_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, pd_instance_id_num_),
  };
  LanDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LanDeviceInfo_descriptor_,
      LanDeviceInfo::default_instance_,
      LanDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LanDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LanDeviceInfo));
  ReportLanDevicesInput_descriptor_ = file->message_type(28);
  static const int ReportLanDevicesInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLanDevicesInput, infos_),
  };
  ReportLanDevicesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportLanDevicesInput_descriptor_,
      ReportLanDevicesInput::default_instance_,
      ReportLanDevicesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLanDevicesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportLanDevicesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportLanDevicesInput));
  ListLanDevicesInput_descriptor_ = file->message_type(29);
  static const int ListLanDevicesInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesInput, include_unregistered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesInput, include_registered_but_not_linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesInput, include_linked_),
  };
  ListLanDevicesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListLanDevicesInput_descriptor_,
      ListLanDevicesInput::default_instance_,
      ListLanDevicesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListLanDevicesInput));
  ListLanDevicesOutput_descriptor_ = file->message_type(30);
  static const int ListLanDevicesOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesOutput, infos_),
  };
  ListLanDevicesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListLanDevicesOutput_descriptor_,
      ListLanDevicesOutput::default_instance_,
      ListLanDevicesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLanDevicesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListLanDevicesOutput));
  DatasetItem_descriptor_ = file->message_type(31);
  static const int DatasetItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetItem, dataset_id_),
  };
  DatasetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetItem_descriptor_,
      DatasetItem::default_instance_,
      DatasetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetItem));
  ListStorageNodeDatasetsOutput_descriptor_ = file->message_type(32);
  static const int ListStorageNodeDatasetsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStorageNodeDatasetsOutput, datasets_),
  };
  ListStorageNodeDatasetsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListStorageNodeDatasetsOutput_descriptor_,
      ListStorageNodeDatasetsOutput::default_instance_,
      ListStorageNodeDatasetsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStorageNodeDatasetsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListStorageNodeDatasetsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListStorageNodeDatasetsOutput));
  TrusteeItem_descriptor_ = file->message_type(33);
  static const int TrusteeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrusteeItem, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrusteeItem, attr_),
  };
  TrusteeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrusteeItem_descriptor_,
      TrusteeItem::default_instance_,
      TrusteeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrusteeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrusteeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrusteeItem));
  CCDWin32StartParams_descriptor_ = file->message_type(34);
  static const int CCDWin32StartParams_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDWin32StartParams, trustees_),
  };
  CCDWin32StartParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDWin32StartParams_descriptor_,
      CCDWin32StartParams::default_instance_,
      CCDWin32StartParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDWin32StartParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDWin32StartParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDWin32StartParams));
  AddDatasetInput_descriptor_ = file->message_type(35);
  static const int AddDatasetInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetInput, dataset_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetInput, dataset_type_),
  };
  AddDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDatasetInput_descriptor_,
      AddDatasetInput::default_instance_,
      AddDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDatasetInput));
  AddDatasetOutput_descriptor_ = file->message_type(36);
  static const int AddDatasetOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetOutput, dataset_id_),
  };
  AddDatasetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddDatasetOutput_descriptor_,
      AddDatasetOutput::default_instance_,
      AddDatasetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddDatasetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddDatasetOutput));
  AddSyncSubscriptionInput_descriptor_ = file->message_type(37);
  static const int AddSyncSubscriptionInput_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, subscription_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, device_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, max_files_),
  };
  AddSyncSubscriptionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddSyncSubscriptionInput_descriptor_,
      AddSyncSubscriptionInput::default_instance_,
      AddSyncSubscriptionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSyncSubscriptionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddSyncSubscriptionInput));
  DeleteDatasetInput_descriptor_ = file->message_type(38);
  static const int DeleteDatasetInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDatasetInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDatasetInput, dataset_id_),
  };
  DeleteDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteDatasetInput_descriptor_,
      DeleteDatasetInput::default_instance_,
      DeleteDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteDatasetInput));
  DeleteSyncSubscriptionsInput_descriptor_ = file->message_type(39);
  static const int DeleteSyncSubscriptionsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSyncSubscriptionsInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSyncSubscriptionsInput, dataset_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSyncSubscriptionsInput, device_id_),
  };
  DeleteSyncSubscriptionsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSyncSubscriptionsInput_descriptor_,
      DeleteSyncSubscriptionsInput::default_instance_,
      DeleteSyncSubscriptionsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSyncSubscriptionsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSyncSubscriptionsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSyncSubscriptionsInput));
  EventsCreateQueueInput_descriptor_ = file->message_type(40);
  static const int EventsCreateQueueInput_offsets_[1] = {
  };
  EventsCreateQueueInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventsCreateQueueInput_descriptor_,
      EventsCreateQueueInput::default_instance_,
      EventsCreateQueueInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsCreateQueueInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsCreateQueueInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventsCreateQueueInput));
  EventsCreateQueueOutput_descriptor_ = file->message_type(41);
  static const int EventsCreateQueueOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsCreateQueueOutput, queue_handle_),
  };
  EventsCreateQueueOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventsCreateQueueOutput_descriptor_,
      EventsCreateQueueOutput::default_instance_,
      EventsCreateQueueOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsCreateQueueOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsCreateQueueOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventsCreateQueueOutput));
  EventsDestroyQueueInput_descriptor_ = file->message_type(42);
  static const int EventsDestroyQueueInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDestroyQueueInput, queue_handle_),
  };
  EventsDestroyQueueInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventsDestroyQueueInput_descriptor_,
      EventsDestroyQueueInput::default_instance_,
      EventsDestroyQueueInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDestroyQueueInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDestroyQueueInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventsDestroyQueueInput));
  EventsDequeueInput_descriptor_ = file->message_type(43);
  static const int EventsDequeueInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueInput, queue_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueInput, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueInput, timeout_),
  };
  EventsDequeueInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventsDequeueInput_descriptor_,
      EventsDequeueInput::default_instance_,
      EventsDequeueInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventsDequeueInput));
  EventSyncFeatureStatusChange_descriptor_ = file->message_type(44);
  static const int EventSyncFeatureStatusChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncFeatureStatusChange, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncFeatureStatusChange, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncFeatureStatusChange, device_id_),
  };
  EventSyncFeatureStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventSyncFeatureStatusChange_descriptor_,
      EventSyncFeatureStatusChange::default_instance_,
      EventSyncFeatureStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncFeatureStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncFeatureStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventSyncFeatureStatusChange));
  EventDeviceInfoChange_descriptor_ = file->message_type(45);
  static const int EventDeviceInfoChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceInfoChange, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceInfoChange, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceInfoChange, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceInfoChange, protocol_version_),
  };
  EventDeviceInfoChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDeviceInfoChange_descriptor_,
      EventDeviceInfoChange::default_instance_,
      EventDeviceInfoChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceInfoChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceInfoChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDeviceInfoChange));
  EventDeviceConnectionChange_descriptor_ = file->message_type(46);
  static const int EventDeviceConnectionChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceConnectionChange, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceConnectionChange, status_),
  };
  EventDeviceConnectionChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDeviceConnectionChange_descriptor_,
      EventDeviceConnectionChange::default_instance_,
      EventDeviceConnectionChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceConnectionChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceConnectionChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDeviceConnectionChange));
  EventDatasetContentChange_descriptor_ = file->message_type(47);
  static const int EventDatasetContentChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDatasetContentChange, dataset_id_),
  };
  EventDatasetContentChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDatasetContentChange_descriptor_,
      EventDatasetContentChange::default_instance_,
      EventDatasetContentChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDatasetContentChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDatasetContentChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDatasetContentChange));
  EventDatasetChange_descriptor_ = file->message_type(48);
  static const int EventDatasetChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDatasetChange, dataset_id_),
  };
  EventDatasetChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDatasetChange_descriptor_,
      EventDatasetChange::default_instance_,
      EventDatasetChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDatasetChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDatasetChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDatasetChange));
  PairingRequestAttribute_descriptor_ = file->message_type(49);
  static const int PairingRequestAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, value_),
  };
  PairingRequestAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PairingRequestAttribute_descriptor_,
      PairingRequestAttribute::default_instance_,
      PairingRequestAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PairingRequestAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PairingRequestAttribute));
  EventPairingRequest_descriptor_ = file->message_type(50);
  static const int EventPairingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPairingRequest, pairing_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPairingRequest, transaction_id_),
  };
  EventPairingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventPairingRequest_descriptor_,
      EventPairingRequest::default_instance_,
      EventPairingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPairingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPairingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventPairingRequest));
  EventStorageNodeChange_descriptor_ = file->message_type(51);
  static const int EventStorageNodeChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStorageNodeChange, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStorageNodeChange, change_type_),
  };
  EventStorageNodeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventStorageNodeChange_descriptor_,
      EventStorageNodeChange::default_instance_,
      EventStorageNodeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStorageNodeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventStorageNodeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventStorageNodeChange));
  EventUserLogin_descriptor_ = file->message_type(52);
  static const int EventUserLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogin, user_id_),
  };
  EventUserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventUserLogin_descriptor_,
      EventUserLogin::default_instance_,
      EventUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventUserLogin));
  EventUserLogout_descriptor_ = file->message_type(53);
  static const int EventUserLogout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogout, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogout, reason_),
  };
  EventUserLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventUserLogout_descriptor_,
      EventUserLogout::default_instance_,
      EventUserLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventUserLogout));
  EventDocSaveAndGoCompletion_descriptor_ = file->message_type(54);
  static const int EventDocSaveAndGoCompletion_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, file_path_and_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, new_file_path_and_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, modify_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, docname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, revision_),
  };
  EventDocSaveAndGoCompletion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDocSaveAndGoCompletion_descriptor_,
      EventDocSaveAndGoCompletion::default_instance_,
      EventDocSaveAndGoCompletion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoCompletion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDocSaveAndGoCompletion));
  EventDocSaveAndGoEngineStateChange_descriptor_ = file->message_type(55);
  static const int EventDocSaveAndGoEngineStateChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoEngineStateChange, engine_started_),
  };
  EventDocSaveAndGoEngineStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDocSaveAndGoEngineStateChange_descriptor_,
      EventDocSaveAndGoEngineStateChange::default_instance_,
      EventDocSaveAndGoEngineStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoEngineStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDocSaveAndGoEngineStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDocSaveAndGoEngineStateChange));
  EventSWUpdateProgress_descriptor_ = file->message_type(56);
  static const int EventSWUpdateProgress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSWUpdateProgress, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSWUpdateProgress, total_transfer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSWUpdateProgress, bytes_transferred_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSWUpdateProgress, state_),
  };
  EventSWUpdateProgress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventSWUpdateProgress_descriptor_,
      EventSWUpdateProgress::default_instance_,
      EventSWUpdateProgress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSWUpdateProgress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSWUpdateProgress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventSWUpdateProgress));
  EventIoacStatusChange_descriptor_ = file->message_type(57);
  static const int EventIoacStatusChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventIoacStatusChange, status_summary_),
  };
  EventIoacStatusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventIoacStatusChange_descriptor_,
      EventIoacStatusChange::default_instance_,
      EventIoacStatusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventIoacStatusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventIoacStatusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventIoacStatusChange));
  EventLanDevicesChange_descriptor_ = file->message_type(58);
  static const int EventLanDevicesChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLanDevicesChange, timestamp_),
  };
  EventLanDevicesChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventLanDevicesChange_descriptor_,
      EventLanDevicesChange::default_instance_,
      EventLanDevicesChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLanDevicesChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLanDevicesChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventLanDevicesChange));
  EventLanDevicesProbeRequest_descriptor_ = file->message_type(59);
  static const int EventLanDevicesProbeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLanDevicesProbeRequest, timestamp_),
  };
  EventLanDevicesProbeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventLanDevicesProbeRequest_descriptor_,
      EventLanDevicesProbeRequest::default_instance_,
      EventLanDevicesProbeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLanDevicesProbeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventLanDevicesProbeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventLanDevicesProbeRequest));
  EventPowerModeChange_descriptor_ = file->message_type(60);
  static const int EventPowerModeChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPowerModeChange, power_mode_),
  };
  EventPowerModeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventPowerModeChange_descriptor_,
      EventPowerModeChange::default_instance_,
      EventPowerModeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPowerModeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPowerModeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventPowerModeChange));
  EventRemoteSwUpdateMessage_descriptor_ = file->message_type(61);
  static const int EventRemoteSwUpdateMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRemoteSwUpdateMessage, source_device_id_),
  };
  EventRemoteSwUpdateMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventRemoteSwUpdateMessage_descriptor_,
      EventRemoteSwUpdateMessage::default_instance_,
      EventRemoteSwUpdateMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRemoteSwUpdateMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventRemoteSwUpdateMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventRemoteSwUpdateMessage));
  EventAsyncUploadCompletion_descriptor_ = file->message_type(62);
  static const int EventAsyncUploadCompletion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, upload_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, error_code_),
  };
  EventAsyncUploadCompletion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventAsyncUploadCompletion_descriptor_,
      EventAsyncUploadCompletion::default_instance_,
      EventAsyncUploadCompletion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAsyncUploadCompletion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventAsyncUploadCompletion));
  EventSyncBackCompletion_descriptor_ = file->message_type(63);
  static const int EventSyncBackCompletion_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, component_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, local_path_),
  };
  EventSyncBackCompletion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventSyncBackCompletion_descriptor_,
      EventSyncBackCompletion::default_instance_,
      EventSyncBackCompletion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncBackCompletion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventSyncBackCompletion));
  EventPicStreamDBUpdateComplete_descriptor_ = file->message_type(64);
  static const int EventPicStreamDBUpdateComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamDBUpdateComplete, dataset_id_),
  };
  EventPicStreamDBUpdateComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventPicStreamDBUpdateComplete_descriptor_,
      EventPicStreamDBUpdateComplete::default_instance_,
      EventPicStreamDBUpdateComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamDBUpdateComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamDBUpdateComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventPicStreamDBUpdateComplete));
  EventPicStreamStorageConservation_descriptor_ = file->message_type(65);
  static const int EventPicStreamStorageConservation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamStorageConservation, is_dropping_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamStorageConservation, free_disk_size_bytes_),
  };
  EventPicStreamStorageConservation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventPicStreamStorageConservation_descriptor_,
      EventPicStreamStorageConservation::default_instance_,
      EventPicStreamStorageConservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamStorageConservation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventPicStreamStorageConservation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventPicStreamStorageConservation));
  EventDeviceCredentialsChange_descriptor_ = file->message_type(66);
  static const int EventDeviceCredentialsChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceCredentialsChange, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceCredentialsChange, local_file_root_path_),
  };
  EventDeviceCredentialsChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventDeviceCredentialsChange_descriptor_,
      EventDeviceCredentialsChange::default_instance_,
      EventDeviceCredentialsChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceCredentialsChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDeviceCredentialsChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventDeviceCredentialsChange));
  EventUserCredentialsChange_descriptor_ = file->message_type(67);
  static const int EventUserCredentialsChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserCredentialsChange, local_file_path_),
  };
  EventUserCredentialsChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventUserCredentialsChange_descriptor_,
      EventUserCredentialsChange::default_instance_,
      EventUserCredentialsChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserCredentialsChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventUserCredentialsChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventUserCredentialsChange));
  CcdiEvent_descriptor_ = file->message_type(68);
  static const int CcdiEvent_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, sync_feature_status_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, device_info_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, device_connection_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, dataset_content_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, storage_node_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, user_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, user_logout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, doc_save_and_go_completion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, doc_save_and_go_engine_state_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, sw_update_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, ioac_status_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, lan_devices_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, lan_devices_probe_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, power_mode_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, su_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, async_upload_completion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, dataset_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, syncback_completion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, picstream_storage_conservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, pairing_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, picstreamdb_updated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, sync_history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, device_cred_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, user_cred_change_),
  };
  CcdiEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CcdiEvent_descriptor_,
      CcdiEvent::default_instance_,
      CcdiEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CcdiEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CcdiEvent));
  EventsDequeueOutput_descriptor_ = file->message_type(69);
  static const int EventsDequeueOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueOutput, events_),
  };
  EventsDequeueOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventsDequeueOutput_descriptor_,
      EventsDequeueOutput::default_instance_,
      EventsDequeueOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventsDequeueOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventsDequeueOutput));
  GetDatasetDirectoryEntriesInput_descriptor_ = file->message_type(70);
  static const int GetDatasetDirectoryEntriesInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesInput, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesInput, directory_name_),
  };
  GetDatasetDirectoryEntriesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetDirectoryEntriesInput_descriptor_,
      GetDatasetDirectoryEntriesInput::default_instance_,
      GetDatasetDirectoryEntriesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetDirectoryEntriesInput));
  DatasetDirectoryEntry_descriptor_ = file->message_type(71);
  static const int DatasetDirectoryEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, is_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, mtime_),
  };
  DatasetDirectoryEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetDirectoryEntry_descriptor_,
      DatasetDirectoryEntry::default_instance_,
      DatasetDirectoryEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetDirectoryEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetDirectoryEntry));
  GetDatasetDirectoryEntriesOutput_descriptor_ = file->message_type(72);
  static const int GetDatasetDirectoryEntriesOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesOutput, entries_),
  };
  GetDatasetDirectoryEntriesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatasetDirectoryEntriesOutput_descriptor_,
      GetDatasetDirectoryEntriesOutput::default_instance_,
      GetDatasetDirectoryEntriesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatasetDirectoryEntriesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatasetDirectoryEntriesOutput));
  GetInfraHttpInfoInput_descriptor_ = file->message_type(73);
  static const int GetInfraHttpInfoInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoInput, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoInput, secure_),
  };
  GetInfraHttpInfoInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInfraHttpInfoInput_descriptor_,
      GetInfraHttpInfoInput::default_instance_,
      GetInfraHttpInfoInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInfraHttpInfoInput));
  GetInfraHttpInfoOutput_descriptor_ = file->message_type(74);
  static const int GetInfraHttpInfoOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoOutput, url_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoOutput, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoOutput, service_ticket_),
  };
  GetInfraHttpInfoOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInfraHttpInfoOutput_descriptor_,
      GetInfraHttpInfoOutput::default_instance_,
      GetInfraHttpInfoOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInfraHttpInfoOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInfraHttpInfoOutput));
  GetLocalHttpInfoInput_descriptor_ = file->message_type(75);
  static const int GetLocalHttpInfoInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoInput, service_),
  };
  GetLocalHttpInfoInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLocalHttpInfoInput_descriptor_,
      GetLocalHttpInfoInput::default_instance_,
      GetLocalHttpInfoInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLocalHttpInfoInput));
  GetLocalHttpInfoOutput_descriptor_ = file->message_type(76);
  static const int GetLocalHttpInfoOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoOutput, url_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoOutput, session_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoOutput, service_ticket_),
  };
  GetLocalHttpInfoOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLocalHttpInfoOutput_descriptor_,
      GetLocalHttpInfoOutput::default_instance_,
      GetLocalHttpInfoOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLocalHttpInfoOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLocalHttpInfoOutput));
  GetPersonalCloudStateInput_descriptor_ = file->message_type(77);
  static const int GetPersonalCloudStateInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, only_use_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, get_infra_storage_quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, list_storage_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, get_device_connection_status_),
  };
  GetPersonalCloudStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPersonalCloudStateInput_descriptor_,
      GetPersonalCloudStateInput::default_instance_,
      GetPersonalCloudStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPersonalCloudStateInput));
  DeviceConnectionStatus_descriptor_ = file->message_type(78);
  static const int DeviceConnectionStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnectionStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnectionStatus, standby_since_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnectionStatus, updating_),
  };
  DeviceConnectionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceConnectionStatus_descriptor_,
      DeviceConnectionStatus::default_instance_,
      DeviceConnectionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnectionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceConnectionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceConnectionStatus));
  StorageNodeInfo_descriptor_ = file->message_type(79);
  static const int StorageNodeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageNodeInfo, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageNodeInfo, storage_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageNodeInfo, status_),
  };
  StorageNodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageNodeInfo_descriptor_,
      StorageNodeInfo::default_instance_,
      StorageNodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageNodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageNodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageNodeInfo));
  GetPersonalCloudStateOutput_descriptor_ = file->message_type(80);
  static const int GetPersonalCloudStateOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateOutput, infra_storage_used_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateOutput, infra_storage_total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateOutput, storage_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateOutput, device_connection_status_),
  };
  GetPersonalCloudStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPersonalCloudStateOutput_descriptor_,
      GetPersonalCloudStateOutput::default_instance_,
      GetPersonalCloudStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPersonalCloudStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPersonalCloudStateOutput));
  LookupAbsPathInput_descriptor_ = file->message_type(81);
  static const int LookupAbsPathInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathInput, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathInput, component_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathInput, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathInput, dataset_rel_path_),
  };
  LookupAbsPathInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LookupAbsPathInput_descriptor_,
      LookupAbsPathInput::default_instance_,
      LookupAbsPathInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LookupAbsPathInput));
  EventSyncHistory_descriptor_ = file->message_type(82);
  static const int EventSyncHistory_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, conflict_file_original_path_),
  };
  EventSyncHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventSyncHistory_descriptor_,
      EventSyncHistory::default_instance_,
      EventSyncHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventSyncHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventSyncHistory));
  GetSyncStateInput_descriptor_ = file->message_type(83);
  static const int GetSyncStateInput_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, only_use_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_is_camera_roll_upload_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_is_camera_roll_global_delete_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_is_network_activity_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_bandwidth_limits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_sync_states_for_paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_sync_states_for_datasets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_sync_states_for_features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_background_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_auto_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_mobile_network_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_camera_roll_upload_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_camera_roll_download_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_media_metadata_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_media_metadata_upload_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_media_playlist_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_notes_sync_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_notes_sync_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_mm_thumb_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_mm_thumb_sync_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_clouddoc_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, lookup_abs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_sync_history_events_by_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_sync_history_events_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, get_syncbox_sync_settings_),
  };
  GetSyncStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSyncStateInput_descriptor_,
      GetSyncStateInput::default_instance_,
      GetSyncStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSyncStateInput));
  ObjectSyncState_descriptor_ = file->message_type(84);
  static const int ObjectSyncState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSyncState, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSyncState, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSyncState, sync_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSyncState, is_sync_folder_root_),
  };
  ObjectSyncState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectSyncState_descriptor_,
      ObjectSyncState::default_instance_,
      ObjectSyncState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSyncState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectSyncState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectSyncState));
  DatasetSyncStateSummary_descriptor_ = file->message_type(85);
  static const int DatasetSyncStateSummary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, pending_files_download_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, pending_files_upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, total_files_downloaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, total_files_uploaded_),
  };
  DatasetSyncStateSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatasetSyncStateSummary_descriptor_,
      DatasetSyncStateSummary::default_instance_,
      DatasetSyncStateSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetSyncStateSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatasetSyncStateSummary));
  FeatureSyncStateSummary_descriptor_ = file->message_type(86);
  static const int FeatureSyncStateSummary_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, pending_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, failed_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, uploads_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, downloads_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, remote_scan_pending_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, scan_in_progress_),
  };
  FeatureSyncStateSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureSyncStateSummary_descriptor_,
      FeatureSyncStateSummary::default_instance_,
      FeatureSyncStateSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureSyncStateSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureSyncStateSummary));
  MediaMetadataThumbMigrateStatus_descriptor_ = file->message_type(87);
  static const int MediaMetadataThumbMigrateStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateStatus, mm_src_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateStatus, mm_dest_path_),
  };
  MediaMetadataThumbMigrateStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMetadataThumbMigrateStatus_descriptor_,
      MediaMetadataThumbMigrateStatus::default_instance_,
      MediaMetadataThumbMigrateStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrateStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMetadataThumbMigrateStatus));
  SyncFeatureSettings_descriptor_ = file->message_type(88);
  static const int SyncFeatureSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettings, sync_feature_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettings, sync_feature_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettings, is_archive_storage_),
  };
  SyncFeatureSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncFeatureSettings_descriptor_,
      SyncFeatureSettings::default_instance_,
      SyncFeatureSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncFeatureSettings));
  LookupAbsPathOutput_descriptor_ = file->message_type(89);
  static const int LookupAbsPathOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathOutput, err_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathOutput, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathOutput, local_modify_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathOutput, hash_),
  };
  LookupAbsPathOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LookupAbsPathOutput_descriptor_,
      LookupAbsPathOutput::default_instance_,
      LookupAbsPathOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LookupAbsPathOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LookupAbsPathOutput));
  GetSyncStateOutput_descriptor_ = file->message_type(90);
  static const int GetSyncStateOutput_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, is_device_linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, is_sync_agent_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, my_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, is_camera_roll_upload_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, is_camera_roll_global_delete_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, is_network_activity_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, max_download_rate_bytes_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, max_upload_rate_bytes_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, sync_states_for_paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, dataset_sync_state_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, feature_sync_state_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, background_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, auto_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, mobile_network_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, camera_roll_upload_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, camera_roll_full_res_download_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, camera_roll_low_res_download_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, camera_roll_thumb_download_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, media_metadata_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, media_metadata_upload_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, media_playlist_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, notes_sync_settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, notes_sync_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, mm_thumb_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, mm_thumb_download_migrate_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, mm_thumb_sync_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, clouddoc_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, mm_thumb_sync_enabled_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, lookup_abs_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, sync_history_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, syncbox_sync_settings_),
  };
  GetSyncStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSyncStateOutput_descriptor_,
      GetSyncStateOutput::default_instance_,
      GetSyncStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSyncStateOutput));
  GetSyncStateNotificationsInput_descriptor_ = file->message_type(91);
  static const int GetSyncStateNotificationsInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateNotificationsInput, max_count_),
  };
  GetSyncStateNotificationsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSyncStateNotificationsInput_descriptor_,
      GetSyncStateNotificationsInput::default_instance_,
      GetSyncStateNotificationsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateNotificationsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateNotificationsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSyncStateNotificationsInput));
  SyncEventSyncComplete_descriptor_ = file->message_type(92);
  static const int SyncEventSyncComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventSyncComplete, num_downloaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventSyncComplete, num_uploaded_),
  };
  SyncEventSyncComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncEventSyncComplete_descriptor_,
      SyncEventSyncComplete::default_instance_,
      SyncEventSyncComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventSyncComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventSyncComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncEventSyncComplete));
  SyncEventFileAdded_descriptor_ = file->message_type(93);
  static const int SyncEventFileAdded_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileAdded, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileAdded, full_path_),
  };
  SyncEventFileAdded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncEventFileAdded_descriptor_,
      SyncEventFileAdded::default_instance_,
      SyncEventFileAdded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileAdded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileAdded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncEventFileAdded));
  SyncEventFileRemoved_descriptor_ = file->message_type(94);
  static const int SyncEventFileRemoved_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileRemoved, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileRemoved, full_path_),
  };
  SyncEventFileRemoved_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncEventFileRemoved_descriptor_,
      SyncEventFileRemoved::default_instance_,
      SyncEventFileRemoved_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileRemoved, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileRemoved, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncEventFileRemoved));
  SyncEventError_descriptor_ = file->message_type(95);
  static const int SyncEventError_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, error_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, name_),
  };
  SyncEventError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncEventError_descriptor_,
      SyncEventError::default_instance_,
      SyncEventError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncEventError));
  SyncEventFileStatus_descriptor_ = file->message_type(96);
  static const int SyncEventFileStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, full_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, change_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, is_starting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, error_),
  };
  SyncEventFileStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncEventFileStatus_descriptor_,
      SyncEventFileStatus::default_instance_,
      SyncEventFileStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncEventFileStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncEventFileStatus));
  SyncStateNotification_descriptor_ = file->message_type(97);
  static const int SyncStateNotification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, sync_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, file_added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, file_removed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, file_status_),
  };
  SyncStateNotification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncStateNotification_descriptor_,
      SyncStateNotification::default_instance_,
      SyncStateNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncStateNotification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncStateNotification));
  GetSyncStateNotificationsOutput_descriptor_ = file->message_type(98);
  static const int GetSyncStateNotificationsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateNotificationsOutput, notifications_),
  };
  GetSyncStateNotificationsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSyncStateNotificationsOutput_descriptor_,
      GetSyncStateNotificationsOutput::default_instance_,
      GetSyncStateNotificationsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateNotificationsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSyncStateNotificationsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSyncStateNotificationsOutput));
  LinkDeviceInput_descriptor_ = file->message_type(99);
  static const int LinkDeviceInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, is_acer_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, device_has_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, device_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, os_version_),
  };
  LinkDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkDeviceInput_descriptor_,
      LinkDeviceInput::default_instance_,
      LinkDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkDeviceInput));
  ListLinkedDevicesInput_descriptor_ = file->message_type(100);
  static const int ListLinkedDevicesInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesInput, only_use_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesInput, storage_nodes_only_),
  };
  ListLinkedDevicesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListLinkedDevicesInput_descriptor_,
      ListLinkedDevicesInput::default_instance_,
      ListLinkedDevicesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListLinkedDevicesInput));
  LinkedDeviceInfo_descriptor_ = file->message_type(101);
  static const int LinkedDeviceInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, is_storage_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, connection_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, device_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, is_acer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, has_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, feature_media_server_capable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, feature_virt_drive_capable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, feature_remote_file_access_capable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, feature_fsdatasettype_capable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, build_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, model_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, feature_my_storage_server_capable_),
  };
  LinkedDeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkedDeviceInfo_descriptor_,
      LinkedDeviceInfo::default_instance_,
      LinkedDeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkedDeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkedDeviceInfo));
  ListLinkedDevicesOutput_descriptor_ = file->message_type(102);
  static const int ListLinkedDevicesOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesOutput, linked_devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesOutput, devices_),
  };
  ListLinkedDevicesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListLinkedDevicesOutput_descriptor_,
      ListLinkedDevicesOutput::default_instance_,
      ListLinkedDevicesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListLinkedDevicesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListLinkedDevicesOutput));
  ListOwnedDatasetsInput_descriptor_ = file->message_type(103);
  static const int ListOwnedDatasetsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsInput, show_all_device_classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsInput, only_use_cache_),
  };
  ListOwnedDatasetsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListOwnedDatasetsInput_descriptor_,
      ListOwnedDatasetsInput::default_instance_,
      ListOwnedDatasetsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListOwnedDatasetsInput));
  ListOwnedDatasetsOutput_descriptor_ = file->message_type(104);
  static const int ListOwnedDatasetsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsOutput, dataset_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsOutput, created_by_this_device_),
  };
  ListOwnedDatasetsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListOwnedDatasetsOutput_descriptor_,
      ListOwnedDatasetsOutput::default_instance_,
      ListOwnedDatasetsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListOwnedDatasetsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListOwnedDatasetsOutput));
  ListUserStorageInput_descriptor_ = file->message_type(105);
  static const int ListUserStorageInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, only_use_cache_),
  };
  ListUserStorageInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListUserStorageInput_descriptor_,
      ListUserStorageInput::default_instance_,
      ListUserStorageInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListUserStorageInput));
  ListUserStorageOutput_descriptor_ = file->message_type(106);
  static const int ListUserStorageOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, user_storage_),
  };
  ListUserStorageOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListUserStorageOutput_descriptor_,
      ListUserStorageOutput::default_instance_,
      ListUserStorageOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListUserStorageOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListUserStorageOutput));
  ListSyncSubscriptionsInput_descriptor_ = file->message_type(107);
  static const int ListSyncSubscriptionsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsInput, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsInput, only_use_cache_),
  };
  ListSyncSubscriptionsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListSyncSubscriptionsInput_descriptor_,
      ListSyncSubscriptionsInput::default_instance_,
      ListSyncSubscriptionsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListSyncSubscriptionsInput));
  SyncSubscriptionDetail_descriptor_ = file->message_type(108);
  static const int SyncSubscriptionDetail_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, dataset_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, absolute_device_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, raw_device_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, upload_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, download_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, upload_delete_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, download_delete_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, dataset_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, dataset_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, max_files_),
  };
  SyncSubscriptionDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncSubscriptionDetail_descriptor_,
      SyncSubscriptionDetail::default_instance_,
      SyncSubscriptionDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSubscriptionDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncSubscriptionDetail));
  ListSyncSubscriptionsOutput_descriptor_ = file->message_type(109);
  static const int ListSyncSubscriptionsOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsOutput, subscriptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsOutput, subs_),
  };
  ListSyncSubscriptionsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListSyncSubscriptionsOutput_descriptor_,
      ListSyncSubscriptionsOutput::default_instance_,
      ListSyncSubscriptionsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSyncSubscriptionsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListSyncSubscriptionsOutput));
  RemoteWakeupInput_descriptor_ = file->message_type(110);
  static const int RemoteWakeupInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteWakeupInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteWakeupInput, device_to_wake_),
  };
  RemoteWakeupInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteWakeupInput_descriptor_,
      RemoteWakeupInput::default_instance_,
      RemoteWakeupInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteWakeupInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteWakeupInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteWakeupInput));
  RemoteSwUpdateMessageInput_descriptor_ = file->message_type(111);
  static const int RemoteSwUpdateMessageInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteSwUpdateMessageInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteSwUpdateMessageInput, target_device_id_),
  };
  RemoteSwUpdateMessageInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteSwUpdateMessageInput_descriptor_,
      RemoteSwUpdateMessageInput::default_instance_,
      RemoteSwUpdateMessageInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteSwUpdateMessageInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteSwUpdateMessageInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteSwUpdateMessageInput));
  RenameDatasetInput_descriptor_ = file->message_type(112);
  static const int RenameDatasetInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDatasetInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDatasetInput, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDatasetInput, dataset_name_),
  };
  RenameDatasetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameDatasetInput_descriptor_,
      RenameDatasetInput::default_instance_,
      RenameDatasetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDatasetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameDatasetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameDatasetInput));
  PrivateMsaDataCommitInput_descriptor_ = file->message_type(113);
  static const int PrivateMsaDataCommitInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateMsaDataCommitInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateMsaDataCommitInput, commit_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateMsaDataCommitInput, commit_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateMsaDataCommitInput, initialize_),
  };
  PrivateMsaDataCommitInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateMsaDataCommitInput_descriptor_,
      PrivateMsaDataCommitInput::default_instance_,
      PrivateMsaDataCommitInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateMsaDataCommitInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateMsaDataCommitInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateMsaDataCommitInput));
  SyncOnceInput_descriptor_ = file->message_type(114);
  static const int SyncOnceInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOnceInput, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOnceInput, user_id_),
  };
  SyncOnceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncOnceInput_descriptor_,
      SyncOnceInput::default_instance_,
      SyncOnceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOnceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOnceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncOnceInput));
  SyncOnceOutput_descriptor_ = file->message_type(115);
  static const int SyncOnceOutput_offsets_[1] = {
  };
  SyncOnceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncOnceOutput_descriptor_,
      SyncOnceOutput::default_instance_,
      SyncOnceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOnceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncOnceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncOnceOutput));
  UnlinkDeviceInput_descriptor_ = file->message_type(116);
  static const int UnlinkDeviceInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, device_id_),
  };
  UnlinkDeviceInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlinkDeviceInput_descriptor_,
      UnlinkDeviceInput::default_instance_,
      UnlinkDeviceInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkDeviceInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlinkDeviceInput));
  UpdateAppStateInput_descriptor_ = file->message_type(117);
  static const int UpdateAppStateInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateInput, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateInput, app_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateInput, foreground_mode_),
  };
  UpdateAppStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAppStateInput_descriptor_,
      UpdateAppStateInput::default_instance_,
      UpdateAppStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAppStateInput));
  UpdateAppStateOutput_descriptor_ = file->message_type(118);
  static const int UpdateAppStateOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateOutput, foreground_mode_err_),
  };
  UpdateAppStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateAppStateOutput_descriptor_,
      UpdateAppStateOutput::default_instance_,
      UpdateAppStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateAppStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateAppStateOutput));
  CameraRollDownloadDirSpec_descriptor_ = file->message_type(119);
  static const int CameraRollDownloadDirSpec_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, max_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, preserve_free_disk_percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, preserve_free_disk_size_bytes_),
  };
  CameraRollDownloadDirSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraRollDownloadDirSpec_descriptor_,
      CameraRollDownloadDirSpec::default_instance_,
      CameraRollDownloadDirSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraRollDownloadDirSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraRollDownloadDirSpec));
  MediaMetadataThumbMigrate_descriptor_ = file->message_type(120);
  static const int MediaMetadataThumbMigrate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrate, mm_dest_dir_),
  };
  MediaMetadataThumbMigrate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaMetadataThumbMigrate_descriptor_,
      MediaMetadataThumbMigrate::default_instance_,
      MediaMetadataThumbMigrate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaMetadataThumbMigrate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaMetadataThumbMigrate));
  SyncFeatureSettingsRequest_descriptor_ = file->message_type(121);
  static const int SyncFeatureSettingsRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettingsRequest, enable_sync_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettingsRequest, set_sync_feature_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettingsRequest, is_archive_storage_),
  };
  SyncFeatureSettingsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncFeatureSettingsRequest_descriptor_,
      SyncFeatureSettingsRequest::default_instance_,
      SyncFeatureSettingsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettingsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncFeatureSettingsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncFeatureSettingsRequest));
  UpdateSyncSettingsInput_descriptor_ = file->message_type(122);
  static const int UpdateSyncSettingsInput_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, set_my_device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_camera_roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_network_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, set_max_download_rate_bytes_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, set_max_upload_rate_bytes_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, background_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, auto_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, mobile_network_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, add_camera_roll_upload_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, remove_camera_roll_upload_dirs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, trigger_camera_roll_upload_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, add_camera_roll_full_res_download_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, remove_camera_roll_full_res_download_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, add_camera_roll_low_res_download_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, remove_camera_roll_low_res_download_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, add_camera_roll_thumb_download_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, remove_camera_roll_thumb_download_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, send_file_to_camera_roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_global_delete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, configure_notes_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_notes_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, migrate_mm_thumb_download_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_mm_thumb_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_clouddoc_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_mm_thumb_sync_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, configure_syncbox_sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_shared_by_me_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, enable_shared_with_me_),
  };
  UpdateSyncSettingsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSyncSettingsInput_descriptor_,
      UpdateSyncSettingsInput::default_instance_,
      UpdateSyncSettingsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSyncSettingsInput));
  UpdateSyncSettingsOutput_descriptor_ = file->message_type(123);
  static const int UpdateSyncSettingsOutput_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, set_my_device_name_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_camera_roll_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_global_delete_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_network_activity_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, set_max_download_rate_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, set_max_upload_rate_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, background_data_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, auto_sync_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, mobile_network_data_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, add_camera_roll_upload_dirs_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, remove_camera_roll_upload_dirs_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, trigger_camera_roll_upload_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, add_camera_roll_full_res_download_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, remove_camera_roll_full_res_download_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, add_camera_roll_low_res_download_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, remove_camera_roll_low_res_download_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, add_camera_roll_thumb_download_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, remove_camera_roll_thumb_download_dir_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, send_file_to_camera_roll_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, configure_notes_sync_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_notes_sync_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, migrate_mm_thumb_download_path_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_mm_thumb_sync_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_clouddoc_sync_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, configure_syncbox_sync_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_shared_by_me_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, enable_shared_with_me_err_),
  };
  UpdateSyncSettingsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSyncSettingsOutput_descriptor_,
      UpdateSyncSettingsOutput::default_instance_,
      UpdateSyncSettingsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSettingsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSyncSettingsOutput));
  UpdateSyncSubscriptionInput_descriptor_ = file->message_type(124);
  static const int UpdateSyncSubscriptionInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, dataset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, new_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, max_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, max_files_),
  };
  UpdateSyncSubscriptionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSyncSubscriptionInput_descriptor_,
      UpdateSyncSubscriptionInput::default_instance_,
      UpdateSyncSubscriptionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSyncSubscriptionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSyncSubscriptionInput));
  SWUpdateCheckInput_descriptor_ = file->message_type(125);
  static const int SWUpdateCheckInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckInput, app_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckInput, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckInput, update_cache_),
  };
  SWUpdateCheckInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateCheckInput_descriptor_,
      SWUpdateCheckInput::default_instance_,
      SWUpdateCheckInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateCheckInput));
  SWUpdateCheckOutput_descriptor_ = file->message_type(126);
  static const int SWUpdateCheckOutput_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, update_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, latest_app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, latest_ccd_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, change_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, app_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, is_qa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, is_auto_update_disabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, is_infra_download_),
  };
  SWUpdateCheckOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateCheckOutput_descriptor_,
      SWUpdateCheckOutput::default_instance_,
      SWUpdateCheckOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCheckOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateCheckOutput));
  SWUpdateBeginDownloadInput_descriptor_ = file->message_type(127);
  static const int SWUpdateBeginDownloadInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadInput, app_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadInput, app_version_),
  };
  SWUpdateBeginDownloadInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateBeginDownloadInput_descriptor_,
      SWUpdateBeginDownloadInput::default_instance_,
      SWUpdateBeginDownloadInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateBeginDownloadInput));
  SWUpdateBeginDownloadOutput_descriptor_ = file->message_type(128);
  static const int SWUpdateBeginDownloadOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadOutput, handle_),
  };
  SWUpdateBeginDownloadOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateBeginDownloadOutput_descriptor_,
      SWUpdateBeginDownloadOutput::default_instance_,
      SWUpdateBeginDownloadOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateBeginDownloadOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateBeginDownloadOutput));
  SWUpdateGetDownloadProgressInput_descriptor_ = file->message_type(129);
  static const int SWUpdateGetDownloadProgressInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressInput, handle_),
  };
  SWUpdateGetDownloadProgressInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateGetDownloadProgressInput_descriptor_,
      SWUpdateGetDownloadProgressInput::default_instance_,
      SWUpdateGetDownloadProgressInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateGetDownloadProgressInput));
  SWUpdateGetDownloadProgressOutput_descriptor_ = file->message_type(130);
  static const int SWUpdateGetDownloadProgressOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressOutput, total_transfer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressOutput, bytes_transferred_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressOutput, state_),
  };
  SWUpdateGetDownloadProgressOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateGetDownloadProgressOutput_descriptor_,
      SWUpdateGetDownloadProgressOutput::default_instance_,
      SWUpdateGetDownloadProgressOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateGetDownloadProgressOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateGetDownloadProgressOutput));
  SWUpdateEndDownloadInput_descriptor_ = file->message_type(131);
  static const int SWUpdateEndDownloadInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateEndDownloadInput, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateEndDownloadInput, file_location_),
  };
  SWUpdateEndDownloadInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateEndDownloadInput_descriptor_,
      SWUpdateEndDownloadInput::default_instance_,
      SWUpdateEndDownloadInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateEndDownloadInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateEndDownloadInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateEndDownloadInput));
  SWUpdateCancelDownloadInput_descriptor_ = file->message_type(132);
  static const int SWUpdateCancelDownloadInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCancelDownloadInput, handle_),
  };
  SWUpdateCancelDownloadInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateCancelDownloadInput_descriptor_,
      SWUpdateCancelDownloadInput::default_instance_,
      SWUpdateCancelDownloadInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCancelDownloadInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateCancelDownloadInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateCancelDownloadInput));
  SWUpdateSetCcdVersionInput_descriptor_ = file->message_type(133);
  static const int SWUpdateSetCcdVersionInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateSetCcdVersionInput, ccd_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateSetCcdVersionInput, ccd_version_),
  };
  SWUpdateSetCcdVersionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SWUpdateSetCcdVersionInput_descriptor_,
      SWUpdateSetCcdVersionInput::default_instance_,
      SWUpdateSetCcdVersionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateSetCcdVersionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SWUpdateSetCcdVersionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SWUpdateSetCcdVersionInput));
  UpdateSystemStateInput_descriptor_ = file->message_type(134);
  static const int UpdateSystemStateInput_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, do_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, report_network_connected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, report_different_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, background_mode_interval_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, perform_background_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, log_caches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, only_mobile_network_available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, stream_power_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, enable_ioac_),
  };
  UpdateSystemStateInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSystemStateInput_descriptor_,
      UpdateSystemStateInput::default_instance_,
      UpdateSystemStateInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSystemStateInput));
  UpdateSystemStateOutput_descriptor_ = file->message_type(135);
  static const int UpdateSystemStateOutput_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, do_shutdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, background_mode_interval_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, perform_background_tasks_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, log_caches_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, only_mobile_network_available_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, stream_power_mode_err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, enable_ioac_err_),
  };
  UpdateSystemStateOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSystemStateOutput_descriptor_,
      UpdateSystemStateOutput::default_instance_,
      UpdateSystemStateOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSystemStateOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSystemStateOutput));
  BeginMetadataTransactionInput_descriptor_ = file->message_type(136);
  static const int BeginMetadataTransactionInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginMetadataTransactionInput, collection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginMetadataTransactionInput, collection_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginMetadataTransactionInput, reset_collection_),
  };
  BeginMetadataTransactionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginMetadataTransactionInput_descriptor_,
      BeginMetadataTransactionInput::default_instance_,
      BeginMetadataTransactionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginMetadataTransactionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginMetadataTransactionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginMetadataTransactionInput));
  UpdateMetadataInput_descriptor_ = file->message_type(137);
  static const int UpdateMetadataInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMetadataInput, metadata_),
  };
  UpdateMetadataInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMetadataInput_descriptor_,
      UpdateMetadataInput::default_instance_,
      UpdateMetadataInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMetadataInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMetadataInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMetadataInput));
  DeleteMetadataInput_descriptor_ = file->message_type(138);
  static const int DeleteMetadataInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMetadataInput, object_id_),
  };
  DeleteMetadataInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteMetadataInput_descriptor_,
      DeleteMetadataInput::default_instance_,
      DeleteMetadataInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMetadataInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMetadataInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteMetadataInput));
  DeleteCollectionInput_descriptor_ = file->message_type(139);
  static const int DeleteCollectionInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCollectionInput, collection_id_),
  };
  DeleteCollectionInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCollectionInput_descriptor_,
      DeleteCollectionInput::default_instance_,
      DeleteCollectionInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCollectionInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCollectionInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCollectionInput));
  GetCollectionDetailsInput_descriptor_ = file->message_type(140);
  static const int GetCollectionDetailsInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCollectionDetailsInput, collection_id_),
  };
  GetCollectionDetailsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCollectionDetailsInput_descriptor_,
      GetCollectionDetailsInput::default_instance_,
      GetCollectionDetailsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCollectionDetailsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCollectionDetailsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCollectionDetailsInput));
  GetCollectionDetailsOutput_descriptor_ = file->message_type(141);
  static const int GetCollectionDetailsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCollectionDetailsOutput, metadata_),
  };
  GetCollectionDetailsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCollectionDetailsOutput_descriptor_,
      GetCollectionDetailsOutput::default_instance_,
      GetCollectionDetailsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCollectionDetailsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCollectionDetailsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCollectionDetailsOutput));
  BeginCatalogInput_descriptor_ = file->message_type(142);
  static const int BeginCatalogInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginCatalogInput, catalog_type_),
  };
  BeginCatalogInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginCatalogInput_descriptor_,
      BeginCatalogInput::default_instance_,
      BeginCatalogInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginCatalogInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginCatalogInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginCatalogInput));
  CommitCatalogInput_descriptor_ = file->message_type(143);
  static const int CommitCatalogInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitCatalogInput, catalog_type_),
  };
  CommitCatalogInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommitCatalogInput_descriptor_,
      CommitCatalogInput::default_instance_,
      CommitCatalogInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitCatalogInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitCatalogInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommitCatalogInput));
  EndCatalogInput_descriptor_ = file->message_type(144);
  static const int EndCatalogInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndCatalogInput, catalog_type_),
  };
  EndCatalogInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndCatalogInput_descriptor_,
      EndCatalogInput::default_instance_,
      EndCatalogInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndCatalogInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndCatalogInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndCatalogInput));
  DeleteCatalogInput_descriptor_ = file->message_type(145);
  static const int DeleteCatalogInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCatalogInput, catalog_type_),
  };
  DeleteCatalogInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCatalogInput_descriptor_,
      DeleteCatalogInput::default_instance_,
      DeleteCatalogInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCatalogInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCatalogInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCatalogInput));
  MSAGetContentURLInput_descriptor_ = file->message_type(146);
  static const int MSAGetContentURLInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, catalog_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, collection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, is_thumb_),
  };
  MSAGetContentURLInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSAGetContentURLInput_descriptor_,
      MSAGetContentURLInput::default_instance_,
      MSAGetContentURLInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSAGetContentURLInput));
  MSAGetContentURLOutput_descriptor_ = file->message_type(147);
  static const int MSAGetContentURLOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLOutput, url_),
  };
  MSAGetContentURLOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSAGetContentURLOutput_descriptor_,
      MSAGetContentURLOutput::default_instance_,
      MSAGetContentURLOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSAGetContentURLOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSAGetContentURLOutput));
  MCAQueryMetadataObjectsInput_descriptor_ = file->message_type(148);
  static const int MCAQueryMetadataObjectsInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsInput, cloud_device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsInput, filter_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsInput, search_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsInput, sort_field_),
  };
  MCAQueryMetadataObjectsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MCAQueryMetadataObjectsInput_descriptor_,
      MCAQueryMetadataObjectsInput::default_instance_,
      MCAQueryMetadataObjectsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MCAQueryMetadataObjectsInput));
  MCAQueryMetadataObjectsOutput_descriptor_ = file->message_type(149);
  static const int MCAQueryMetadataObjectsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsOutput, content_objects_),
  };
  MCAQueryMetadataObjectsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MCAQueryMetadataObjectsOutput_descriptor_,
      MCAQueryMetadataObjectsOutput::default_instance_,
      MCAQueryMetadataObjectsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCAQueryMetadataObjectsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MCAQueryMetadataObjectsOutput));
  RequestPairingInput_descriptor_ = file->message_type(150);
  static const int RequestPairingInput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, host_hwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, host_deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, device_hwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, pairing_attributes_),
  };
  RequestPairingInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingInput_descriptor_,
      RequestPairingInput::default_instance_,
      RequestPairingInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingInput));
  RequestPairingOutput_descriptor_ = file->message_type(151);
  static const int RequestPairingOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingOutput, pairing_token_),
  };
  RequestPairingOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingOutput_descriptor_,
      RequestPairingOutput::default_instance_,
      RequestPairingOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingOutput));
  RespondToPairingRequestInput_descriptor_ = file->message_type(152);
  static const int RespondToPairingRequestInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestInput, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestInput, accepted_pairing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestInput, user_id_),
  };
  RespondToPairingRequestInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondToPairingRequestInput_descriptor_,
      RespondToPairingRequestInput::default_instance_,
      RespondToPairingRequestInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondToPairingRequestInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondToPairingRequestInput));
  RequestPairingPinInput_descriptor_ = file->message_type(153);
  static const int RequestPairingPinInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinInput, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinInput, user_id_),
  };
  RequestPairingPinInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingPinInput_descriptor_,
      RequestPairingPinInput::default_instance_,
      RequestPairingPinInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingPinInput));
  RequestPairingPinOutput_descriptor_ = file->message_type(154);
  static const int RequestPairingPinOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinOutput, pin_),
  };
  RequestPairingPinOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestPairingPinOutput_descriptor_,
      RequestPairingPinOutput::default_instance_,
      RequestPairingPinOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPairingPinOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestPairingPinOutput));
  GetPairingStatusInput_descriptor_ = file->message_type(155);
  static const int GetPairingStatusInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusInput, pairing_token_),
  };
  GetPairingStatusInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPairingStatusInput_descriptor_,
      GetPairingStatusInput::default_instance_,
      GetPairingStatusInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPairingStatusInput));
  GetPairingStatusOutput_descriptor_ = file->message_type(156);
  static const int GetPairingStatusOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusOutput, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusOutput, user_name_),
  };
  GetPairingStatusOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPairingStatusOutput_descriptor_,
      GetPairingStatusOutput::default_instance_,
      GetPairingStatusOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPairingStatusOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPairingStatusOutput));
  CCDIQueryPicStreamObjectsInput_descriptor_ = file->message_type(157);
  static const int CCDIQueryPicStreamObjectsInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsInput, filter_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsInput, search_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsInput, sort_field_),
  };
  CCDIQueryPicStreamObjectsInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDIQueryPicStreamObjectsInput_descriptor_,
      CCDIQueryPicStreamObjectsInput::default_instance_,
      CCDIQueryPicStreamObjectsInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDIQueryPicStreamObjectsInput));
  CCDIQueryPicStreamObjectsOutput_descriptor_ = file->message_type(158);
  static const int CCDIQueryPicStreamObjectsOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsOutput, content_objects_),
  };
  CCDIQueryPicStreamObjectsOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CCDIQueryPicStreamObjectsOutput_descriptor_,
      CCDIQueryPicStreamObjectsOutput::default_instance_,
      CCDIQueryPicStreamObjectsOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDIQueryPicStreamObjectsOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CCDIQueryPicStreamObjectsOutput));
  PicStreamQueryObject_descriptor_ = file->message_type(159);
  static const int PicStreamQueryObject_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, pcdo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, picstream_album_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, full_res_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, low_res_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, thumbnail_url_),
  };
  PicStreamQueryObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PicStreamQueryObject_descriptor_,
      PicStreamQueryObject::default_instance_,
      PicStreamQueryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamQueryObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PicStreamQueryObject));
  PicStreamContentDirectoryObject_descriptor_ = file->message_type(160);
  static const int PicStreamContentDirectoryObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamContentDirectoryObject, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamContentDirectoryObject, optional_fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamContentDirectoryObject, picstream_item_),
  };
  PicStreamContentDirectoryObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PicStreamContentDirectoryObject_descriptor_,
      PicStreamContentDirectoryObject::default_instance_,
      PicStreamContentDirectoryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamContentDirectoryObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamContentDirectoryObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PicStreamContentDirectoryObject));
  PicStreamItemFields_descriptor_ = file->message_type(161);
  static const int PicStreamItemFields_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, ori_deviceid_),
  };
  PicStreamItemFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PicStreamItemFields_descriptor_,
      PicStreamItemFields::default_instance_,
      PicStreamItemFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamItemFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PicStreamItemFields));
  PicStreamAlbumFields_descriptor_ = file->message_type(162);
  static const int PicStreamAlbumFields_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamAlbumFields, album_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamAlbumFields, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamAlbumFields, item_total_size_),
  };
  PicStreamAlbumFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PicStreamAlbumFields_descriptor_,
      PicStreamAlbumFields::default_instance_,
      PicStreamAlbumFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamAlbumFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PicStreamAlbumFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PicStreamAlbumFields));
  SharedFilesStoreFileInput_descriptor_ = file->message_type(163);
  static const int SharedFilesStoreFileInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileInput, abs_file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileInput, opaque_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileInput, abs_preview_path_),
  };
  SharedFilesStoreFileInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesStoreFileInput_descriptor_,
      SharedFilesStoreFileInput::default_instance_,
      SharedFilesStoreFileInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesStoreFileInput));
  SharedFilesStoreFileOutput_descriptor_ = file->message_type(164);
  static const int SharedFilesStoreFileOutput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileOutput, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileOutput, stored_name_),
  };
  SharedFilesStoreFileOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesStoreFileOutput_descriptor_,
      SharedFilesStoreFileOutput::default_instance_,
      SharedFilesStoreFileOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesStoreFileOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesStoreFileOutput));
  SharedFilesShareFileInput_descriptor_ = file->message_type(165);
  static const int SharedFilesShareFileInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesShareFileInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesShareFileInput, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesShareFileInput, stored_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesShareFileInput, recipient_emails_),
  };
  SharedFilesShareFileInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesShareFileInput_descriptor_,
      SharedFilesShareFileInput::default_instance_,
      SharedFilesShareFileInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesShareFileInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesShareFileInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesShareFileInput));
  SharedFilesUnshareFileInput_descriptor_ = file->message_type(166);
  static const int SharedFilesUnshareFileInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesUnshareFileInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesUnshareFileInput, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesUnshareFileInput, stored_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesUnshareFileInput, recipient_emails_),
  };
  SharedFilesUnshareFileInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesUnshareFileInput_descriptor_,
      SharedFilesUnshareFileInput::default_instance_,
      SharedFilesUnshareFileInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesUnshareFileInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesUnshareFileInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesUnshareFileInput));
  SharedFilesDeleteSharedFileInput_descriptor_ = file->message_type(167);
  static const int SharedFilesDeleteSharedFileInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesDeleteSharedFileInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesDeleteSharedFileInput, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesDeleteSharedFileInput, stored_name_),
  };
  SharedFilesDeleteSharedFileInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesDeleteSharedFileInput_descriptor_,
      SharedFilesDeleteSharedFileInput::default_instance_,
      SharedFilesDeleteSharedFileInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesDeleteSharedFileInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesDeleteSharedFileInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesDeleteSharedFileInput));
  SharedFilesQueryInput_descriptor_ = file->message_type(168);
  static const int SharedFilesQueryInput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryInput, sync_feature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryInput, search_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryInput, sort_field_),
  };
  SharedFilesQueryInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesQueryInput_descriptor_,
      SharedFilesQueryInput::default_instance_,
      SharedFilesQueryInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesQueryInput));
  SharedFilesQueryObject_descriptor_ = file->message_type(169);
  static const int SharedFilesQueryObject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, content_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, preview_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, opaque_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, recipient_list_),
  };
  SharedFilesQueryObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesQueryObject_descriptor_,
      SharedFilesQueryObject::default_instance_,
      SharedFilesQueryObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesQueryObject));
  SharedFilesQueryOutput_descriptor_ = file->message_type(170);
  static const int SharedFilesQueryOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryOutput, query_objects_),
  };
  SharedFilesQueryOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SharedFilesQueryOutput_descriptor_,
      SharedFilesQueryOutput::default_instance_,
      SharedFilesQueryOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SharedFilesQueryOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SharedFilesQueryOutput));
  RemoteExecutableInfo_descriptor_ = file->message_type(171);
  static const int RemoteExecutableInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecutableInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecutableInfo, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecutableInfo, version_num_),
  };
  RemoteExecutableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoteExecutableInfo_descriptor_,
      RemoteExecutableInfo::default_instance_,
      RemoteExecutableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecutableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoteExecutableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoteExecutableInfo));
  RegisterRemoteExecutableInput_descriptor_ = file->message_type(172);
  static const int RegisterRemoteExecutableInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRemoteExecutableInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRemoteExecutableInput, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRemoteExecutableInput, remote_executable_info_),
  };
  RegisterRemoteExecutableInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterRemoteExecutableInput_descriptor_,
      RegisterRemoteExecutableInput::default_instance_,
      RegisterRemoteExecutableInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRemoteExecutableInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRemoteExecutableInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterRemoteExecutableInput));
  UnregisterRemoteExecutableInput_descriptor_ = file->message_type(173);
  static const int UnregisterRemoteExecutableInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRemoteExecutableInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRemoteExecutableInput, app_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRemoteExecutableInput, remote_executable_name_),
  };
  UnregisterRemoteExecutableInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnregisterRemoteExecutableInput_descriptor_,
      UnregisterRemoteExecutableInput::default_instance_,
      UnregisterRemoteExecutableInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRemoteExecutableInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnregisterRemoteExecutableInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnregisterRemoteExecutableInput));
  ListRegisteredRemoteExecutablesInput_descriptor_ = file->message_type(174);
  static const int ListRegisteredRemoteExecutablesInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesInput, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesInput, app_key_),
  };
  ListRegisteredRemoteExecutablesInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRegisteredRemoteExecutablesInput_descriptor_,
      ListRegisteredRemoteExecutablesInput::default_instance_,
      ListRegisteredRemoteExecutablesInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRegisteredRemoteExecutablesInput));
  ListRegisteredRemoteExecutablesOutput_descriptor_ = file->message_type(175);
  static const int ListRegisteredRemoteExecutablesOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesOutput, registered_remote_executables_),
  };
  ListRegisteredRemoteExecutablesOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRegisteredRemoteExecutablesOutput_descriptor_,
      ListRegisteredRemoteExecutablesOutput::default_instance_,
      ListRegisteredRemoteExecutablesOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRegisteredRemoteExecutablesOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRegisteredRemoteExecutablesOutput));
  InfraHttpService_t_descriptor_ = file->enum_type(0);
  LocalHttpService_t_descriptor_ = file->enum_type(1);
  IoacStatusSummary_t_descriptor_ = file->enum_type(2);
  InfraHttpRequestMethod_t_descriptor_ = file->enum_type(3);
  LanDeviceType_t_descriptor_ = file->enum_type(4);
  LanInterfaceType_t_descriptor_ = file->enum_type(5);
  NewDatasetType_t_descriptor_ = file->enum_type(6);
  SyncSubscriptionType_t_descriptor_ = file->enum_type(7);
  SyncFeature_t_descriptor_ = file->enum_type(8);
  DatasetSyncStateType_t_descriptor_ = file->enum_type(9);
  CcdApp_t_descriptor_ = file->enum_type(10);
  DeviceInfoChangeType_t_descriptor_ = file->enum_type(11);
  StorageNodeChangeType_t_descriptor_ = file->enum_type(12);
  LogoutReason_t_descriptor_ = file->enum_type(13);
  PowerMode_t_descriptor_ = file->enum_type(14);
  AsyncUploadState_t_descriptor_ = file->enum_type(15);
  DeviceCredChangeType_t_descriptor_ = file->enum_type(16);
  DeviceConnectionState_t_descriptor_ = file->enum_type(17);
  SyncEventType_t_descriptor_ = file->enum_type(18);
  SyncStateType_t_descriptor_ = file->enum_type(19);
  FeatureSyncStateType_t_descriptor_ = file->enum_type(20);
  SyncEventErrorType_t_descriptor_ = file->enum_type(21);
  SyncFileChangeType_t_descriptor_ = file->enum_type(22);
  SWUpdateMaskBits_t_descriptor_ = file->enum_type(23);
  SWUpdateDownloadState_t_descriptor_ = file->enum_type(24);
  DocSaveAndGoChangeType_descriptor_ = file->enum_type(25);
  PicStream_DBFilterType_t_descriptor_ = file->enum_type(26);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ccdi_5frpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoParamRequest_descriptor_, &NoParamRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerIndexRequest_descriptor_, &PlayerIndexRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserIdRequest_descriptor_, &UserIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoParamResponse_descriptor_, &NoParamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentPlayer_descriptor_, &CurrentPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentPlayers_descriptor_, &CurrentPlayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskInfo_descriptor_, &DiskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkInfo_descriptor_, &NetworkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IoacAdapterWarnings_descriptor_, &IoacAdapterWarnings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IoacAdapterStatus_descriptor_, &IoacAdapterStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IoacOverallStatus_descriptor_, &IoacOverallStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemStateInput_descriptor_, &GetSystemStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PowerStatus_descriptor_, &PowerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentUser_descriptor_, &CurrentUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoggedOutUser_descriptor_, &LoggedOutUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSystemStateOutput_descriptor_, &GetSystemStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginInput_descriptor_, &LoginInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginOutput_descriptor_, &LoginOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutInput_descriptor_, &LogoutInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfraHttpRequestInput_descriptor_, &InfraHttpRequestInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfraHttpRequestOutput_descriptor_, &InfraHttpRequestOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterStorageNodeInput_descriptor_, &RegisterStorageNodeInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnregisterStorageNodeInput_descriptor_, &UnregisterStorageNodeInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteFileAccessControlDirSpec_descriptor_, &RemoteFileAccessControlDirSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteFileAccessControlDirs_descriptor_, &RemoteFileAccessControlDirs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateStorageNodeInput_descriptor_, &UpdateStorageNodeInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LanDeviceRouteInfo_descriptor_, &LanDeviceRouteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LanDeviceInfo_descriptor_, &LanDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportLanDevicesInput_descriptor_, &ReportLanDevicesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListLanDevicesInput_descriptor_, &ListLanDevicesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListLanDevicesOutput_descriptor_, &ListLanDevicesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetItem_descriptor_, &DatasetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListStorageNodeDatasetsOutput_descriptor_, &ListStorageNodeDatasetsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrusteeItem_descriptor_, &TrusteeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDWin32StartParams_descriptor_, &CCDWin32StartParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDatasetInput_descriptor_, &AddDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddDatasetOutput_descriptor_, &AddDatasetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddSyncSubscriptionInput_descriptor_, &AddSyncSubscriptionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteDatasetInput_descriptor_, &DeleteDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSyncSubscriptionsInput_descriptor_, &DeleteSyncSubscriptionsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventsCreateQueueInput_descriptor_, &EventsCreateQueueInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventsCreateQueueOutput_descriptor_, &EventsCreateQueueOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventsDestroyQueueInput_descriptor_, &EventsDestroyQueueInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventsDequeueInput_descriptor_, &EventsDequeueInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventSyncFeatureStatusChange_descriptor_, &EventSyncFeatureStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDeviceInfoChange_descriptor_, &EventDeviceInfoChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDeviceConnectionChange_descriptor_, &EventDeviceConnectionChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDatasetContentChange_descriptor_, &EventDatasetContentChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDatasetChange_descriptor_, &EventDatasetChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PairingRequestAttribute_descriptor_, &PairingRequestAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventPairingRequest_descriptor_, &EventPairingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventStorageNodeChange_descriptor_, &EventStorageNodeChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventUserLogin_descriptor_, &EventUserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventUserLogout_descriptor_, &EventUserLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDocSaveAndGoCompletion_descriptor_, &EventDocSaveAndGoCompletion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDocSaveAndGoEngineStateChange_descriptor_, &EventDocSaveAndGoEngineStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventSWUpdateProgress_descriptor_, &EventSWUpdateProgress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventIoacStatusChange_descriptor_, &EventIoacStatusChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventLanDevicesChange_descriptor_, &EventLanDevicesChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventLanDevicesProbeRequest_descriptor_, &EventLanDevicesProbeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventPowerModeChange_descriptor_, &EventPowerModeChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventRemoteSwUpdateMessage_descriptor_, &EventRemoteSwUpdateMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventAsyncUploadCompletion_descriptor_, &EventAsyncUploadCompletion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventSyncBackCompletion_descriptor_, &EventSyncBackCompletion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventPicStreamDBUpdateComplete_descriptor_, &EventPicStreamDBUpdateComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventPicStreamStorageConservation_descriptor_, &EventPicStreamStorageConservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventDeviceCredentialsChange_descriptor_, &EventDeviceCredentialsChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventUserCredentialsChange_descriptor_, &EventUserCredentialsChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CcdiEvent_descriptor_, &CcdiEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventsDequeueOutput_descriptor_, &EventsDequeueOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetDirectoryEntriesInput_descriptor_, &GetDatasetDirectoryEntriesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetDirectoryEntry_descriptor_, &DatasetDirectoryEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatasetDirectoryEntriesOutput_descriptor_, &GetDatasetDirectoryEntriesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInfraHttpInfoInput_descriptor_, &GetInfraHttpInfoInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInfraHttpInfoOutput_descriptor_, &GetInfraHttpInfoOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLocalHttpInfoInput_descriptor_, &GetLocalHttpInfoInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLocalHttpInfoOutput_descriptor_, &GetLocalHttpInfoOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPersonalCloudStateInput_descriptor_, &GetPersonalCloudStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceConnectionStatus_descriptor_, &DeviceConnectionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageNodeInfo_descriptor_, &StorageNodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPersonalCloudStateOutput_descriptor_, &GetPersonalCloudStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LookupAbsPathInput_descriptor_, &LookupAbsPathInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventSyncHistory_descriptor_, &EventSyncHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSyncStateInput_descriptor_, &GetSyncStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectSyncState_descriptor_, &ObjectSyncState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatasetSyncStateSummary_descriptor_, &DatasetSyncStateSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureSyncStateSummary_descriptor_, &FeatureSyncStateSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMetadataThumbMigrateStatus_descriptor_, &MediaMetadataThumbMigrateStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncFeatureSettings_descriptor_, &SyncFeatureSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LookupAbsPathOutput_descriptor_, &LookupAbsPathOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSyncStateOutput_descriptor_, &GetSyncStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSyncStateNotificationsInput_descriptor_, &GetSyncStateNotificationsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncEventSyncComplete_descriptor_, &SyncEventSyncComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncEventFileAdded_descriptor_, &SyncEventFileAdded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncEventFileRemoved_descriptor_, &SyncEventFileRemoved::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncEventError_descriptor_, &SyncEventError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncEventFileStatus_descriptor_, &SyncEventFileStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncStateNotification_descriptor_, &SyncStateNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSyncStateNotificationsOutput_descriptor_, &GetSyncStateNotificationsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkDeviceInput_descriptor_, &LinkDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListLinkedDevicesInput_descriptor_, &ListLinkedDevicesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkedDeviceInfo_descriptor_, &LinkedDeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListLinkedDevicesOutput_descriptor_, &ListLinkedDevicesOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListOwnedDatasetsInput_descriptor_, &ListOwnedDatasetsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListOwnedDatasetsOutput_descriptor_, &ListOwnedDatasetsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListUserStorageInput_descriptor_, &ListUserStorageInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListUserStorageOutput_descriptor_, &ListUserStorageOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListSyncSubscriptionsInput_descriptor_, &ListSyncSubscriptionsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncSubscriptionDetail_descriptor_, &SyncSubscriptionDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListSyncSubscriptionsOutput_descriptor_, &ListSyncSubscriptionsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteWakeupInput_descriptor_, &RemoteWakeupInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteSwUpdateMessageInput_descriptor_, &RemoteSwUpdateMessageInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameDatasetInput_descriptor_, &RenameDatasetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateMsaDataCommitInput_descriptor_, &PrivateMsaDataCommitInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncOnceInput_descriptor_, &SyncOnceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncOnceOutput_descriptor_, &SyncOnceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlinkDeviceInput_descriptor_, &UnlinkDeviceInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAppStateInput_descriptor_, &UpdateAppStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateAppStateOutput_descriptor_, &UpdateAppStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraRollDownloadDirSpec_descriptor_, &CameraRollDownloadDirSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaMetadataThumbMigrate_descriptor_, &MediaMetadataThumbMigrate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncFeatureSettingsRequest_descriptor_, &SyncFeatureSettingsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSyncSettingsInput_descriptor_, &UpdateSyncSettingsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSyncSettingsOutput_descriptor_, &UpdateSyncSettingsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSyncSubscriptionInput_descriptor_, &UpdateSyncSubscriptionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateCheckInput_descriptor_, &SWUpdateCheckInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateCheckOutput_descriptor_, &SWUpdateCheckOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateBeginDownloadInput_descriptor_, &SWUpdateBeginDownloadInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateBeginDownloadOutput_descriptor_, &SWUpdateBeginDownloadOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateGetDownloadProgressInput_descriptor_, &SWUpdateGetDownloadProgressInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateGetDownloadProgressOutput_descriptor_, &SWUpdateGetDownloadProgressOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateEndDownloadInput_descriptor_, &SWUpdateEndDownloadInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateCancelDownloadInput_descriptor_, &SWUpdateCancelDownloadInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SWUpdateSetCcdVersionInput_descriptor_, &SWUpdateSetCcdVersionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSystemStateInput_descriptor_, &UpdateSystemStateInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSystemStateOutput_descriptor_, &UpdateSystemStateOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginMetadataTransactionInput_descriptor_, &BeginMetadataTransactionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMetadataInput_descriptor_, &UpdateMetadataInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteMetadataInput_descriptor_, &DeleteMetadataInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCollectionInput_descriptor_, &DeleteCollectionInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCollectionDetailsInput_descriptor_, &GetCollectionDetailsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCollectionDetailsOutput_descriptor_, &GetCollectionDetailsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginCatalogInput_descriptor_, &BeginCatalogInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommitCatalogInput_descriptor_, &CommitCatalogInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndCatalogInput_descriptor_, &EndCatalogInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCatalogInput_descriptor_, &DeleteCatalogInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSAGetContentURLInput_descriptor_, &MSAGetContentURLInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSAGetContentURLOutput_descriptor_, &MSAGetContentURLOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MCAQueryMetadataObjectsInput_descriptor_, &MCAQueryMetadataObjectsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MCAQueryMetadataObjectsOutput_descriptor_, &MCAQueryMetadataObjectsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingInput_descriptor_, &RequestPairingInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingOutput_descriptor_, &RequestPairingOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondToPairingRequestInput_descriptor_, &RespondToPairingRequestInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingPinInput_descriptor_, &RequestPairingPinInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestPairingPinOutput_descriptor_, &RequestPairingPinOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPairingStatusInput_descriptor_, &GetPairingStatusInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPairingStatusOutput_descriptor_, &GetPairingStatusOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDIQueryPicStreamObjectsInput_descriptor_, &CCDIQueryPicStreamObjectsInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CCDIQueryPicStreamObjectsOutput_descriptor_, &CCDIQueryPicStreamObjectsOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicStreamQueryObject_descriptor_, &PicStreamQueryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicStreamContentDirectoryObject_descriptor_, &PicStreamContentDirectoryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicStreamItemFields_descriptor_, &PicStreamItemFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PicStreamAlbumFields_descriptor_, &PicStreamAlbumFields::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesStoreFileInput_descriptor_, &SharedFilesStoreFileInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesStoreFileOutput_descriptor_, &SharedFilesStoreFileOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesShareFileInput_descriptor_, &SharedFilesShareFileInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesUnshareFileInput_descriptor_, &SharedFilesUnshareFileInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesDeleteSharedFileInput_descriptor_, &SharedFilesDeleteSharedFileInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesQueryInput_descriptor_, &SharedFilesQueryInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesQueryObject_descriptor_, &SharedFilesQueryObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SharedFilesQueryOutput_descriptor_, &SharedFilesQueryOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoteExecutableInfo_descriptor_, &RemoteExecutableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterRemoteExecutableInput_descriptor_, &RegisterRemoteExecutableInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnregisterRemoteExecutableInput_descriptor_, &UnregisterRemoteExecutableInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRegisteredRemoteExecutablesInput_descriptor_, &ListRegisteredRemoteExecutablesInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRegisteredRemoteExecutablesOutput_descriptor_, &ListRegisteredRemoteExecutablesOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ccdi_5frpc_2eproto() {
  delete NoParamRequest::default_instance_;
  delete NoParamRequest_reflection_;
  delete PlayerIndexRequest::default_instance_;
  delete PlayerIndexRequest_reflection_;
  delete UserIdRequest::default_instance_;
  delete UserIdRequest_reflection_;
  delete NoParamResponse::default_instance_;
  delete NoParamResponse_reflection_;
  delete CurrentPlayer::default_instance_;
  delete CurrentPlayer_reflection_;
  delete CurrentPlayers::default_instance_;
  delete CurrentPlayers_reflection_;
  delete DiskInfo::default_instance_;
  delete DiskInfo_reflection_;
  delete NetworkInfo::default_instance_;
  delete NetworkInfo_reflection_;
  delete IoacAdapterWarnings::default_instance_;
  delete IoacAdapterWarnings_reflection_;
  delete IoacAdapterStatus::default_instance_;
  delete IoacAdapterStatus_reflection_;
  delete IoacOverallStatus::default_instance_;
  delete IoacOverallStatus_reflection_;
  delete GetSystemStateInput::default_instance_;
  delete GetSystemStateInput_reflection_;
  delete PowerStatus::default_instance_;
  delete PowerStatus_reflection_;
  delete CurrentUser::default_instance_;
  delete CurrentUser_reflection_;
  delete LoggedOutUser::default_instance_;
  delete LoggedOutUser_reflection_;
  delete GetSystemStateOutput::default_instance_;
  delete GetSystemStateOutput_reflection_;
  delete LoginInput::default_instance_;
  delete LoginInput_reflection_;
  delete LoginOutput::default_instance_;
  delete LoginOutput_reflection_;
  delete LogoutInput::default_instance_;
  delete LogoutInput_reflection_;
  delete InfraHttpRequestInput::default_instance_;
  delete InfraHttpRequestInput_reflection_;
  delete InfraHttpRequestOutput::default_instance_;
  delete InfraHttpRequestOutput_reflection_;
  delete RegisterStorageNodeInput::default_instance_;
  delete RegisterStorageNodeInput_reflection_;
  delete UnregisterStorageNodeInput::default_instance_;
  delete UnregisterStorageNodeInput_reflection_;
  delete RemoteFileAccessControlDirSpec::default_instance_;
  delete RemoteFileAccessControlDirSpec_reflection_;
  delete RemoteFileAccessControlDirs::default_instance_;
  delete RemoteFileAccessControlDirs_reflection_;
  delete UpdateStorageNodeInput::default_instance_;
  delete UpdateStorageNodeInput_reflection_;
  delete LanDeviceRouteInfo::default_instance_;
  delete LanDeviceRouteInfo_reflection_;
  delete LanDeviceInfo::default_instance_;
  delete LanDeviceInfo_reflection_;
  delete ReportLanDevicesInput::default_instance_;
  delete ReportLanDevicesInput_reflection_;
  delete ListLanDevicesInput::default_instance_;
  delete ListLanDevicesInput_reflection_;
  delete ListLanDevicesOutput::default_instance_;
  delete ListLanDevicesOutput_reflection_;
  delete DatasetItem::default_instance_;
  delete DatasetItem_reflection_;
  delete ListStorageNodeDatasetsOutput::default_instance_;
  delete ListStorageNodeDatasetsOutput_reflection_;
  delete TrusteeItem::default_instance_;
  delete TrusteeItem_reflection_;
  delete CCDWin32StartParams::default_instance_;
  delete CCDWin32StartParams_reflection_;
  delete AddDatasetInput::default_instance_;
  delete AddDatasetInput_reflection_;
  delete AddDatasetOutput::default_instance_;
  delete AddDatasetOutput_reflection_;
  delete AddSyncSubscriptionInput::default_instance_;
  delete AddSyncSubscriptionInput_reflection_;
  delete DeleteDatasetInput::default_instance_;
  delete DeleteDatasetInput_reflection_;
  delete DeleteSyncSubscriptionsInput::default_instance_;
  delete DeleteSyncSubscriptionsInput_reflection_;
  delete EventsCreateQueueInput::default_instance_;
  delete EventsCreateQueueInput_reflection_;
  delete EventsCreateQueueOutput::default_instance_;
  delete EventsCreateQueueOutput_reflection_;
  delete EventsDestroyQueueInput::default_instance_;
  delete EventsDestroyQueueInput_reflection_;
  delete EventsDequeueInput::default_instance_;
  delete EventsDequeueInput_reflection_;
  delete EventSyncFeatureStatusChange::default_instance_;
  delete EventSyncFeatureStatusChange_reflection_;
  delete EventDeviceInfoChange::default_instance_;
  delete EventDeviceInfoChange_reflection_;
  delete EventDeviceConnectionChange::default_instance_;
  delete EventDeviceConnectionChange_reflection_;
  delete EventDatasetContentChange::default_instance_;
  delete EventDatasetContentChange_reflection_;
  delete EventDatasetChange::default_instance_;
  delete EventDatasetChange_reflection_;
  delete PairingRequestAttribute::default_instance_;
  delete PairingRequestAttribute_reflection_;
  delete EventPairingRequest::default_instance_;
  delete EventPairingRequest_reflection_;
  delete EventStorageNodeChange::default_instance_;
  delete EventStorageNodeChange_reflection_;
  delete EventUserLogin::default_instance_;
  delete EventUserLogin_reflection_;
  delete EventUserLogout::default_instance_;
  delete EventUserLogout_reflection_;
  delete EventDocSaveAndGoCompletion::default_instance_;
  delete EventDocSaveAndGoCompletion_reflection_;
  delete EventDocSaveAndGoEngineStateChange::default_instance_;
  delete EventDocSaveAndGoEngineStateChange_reflection_;
  delete EventSWUpdateProgress::default_instance_;
  delete EventSWUpdateProgress_reflection_;
  delete EventIoacStatusChange::default_instance_;
  delete EventIoacStatusChange_reflection_;
  delete EventLanDevicesChange::default_instance_;
  delete EventLanDevicesChange_reflection_;
  delete EventLanDevicesProbeRequest::default_instance_;
  delete EventLanDevicesProbeRequest_reflection_;
  delete EventPowerModeChange::default_instance_;
  delete EventPowerModeChange_reflection_;
  delete EventRemoteSwUpdateMessage::default_instance_;
  delete EventRemoteSwUpdateMessage_reflection_;
  delete EventAsyncUploadCompletion::default_instance_;
  delete EventAsyncUploadCompletion_reflection_;
  delete EventSyncBackCompletion::default_instance_;
  delete EventSyncBackCompletion_reflection_;
  delete EventPicStreamDBUpdateComplete::default_instance_;
  delete EventPicStreamDBUpdateComplete_reflection_;
  delete EventPicStreamStorageConservation::default_instance_;
  delete EventPicStreamStorageConservation_reflection_;
  delete EventDeviceCredentialsChange::default_instance_;
  delete EventDeviceCredentialsChange_reflection_;
  delete EventUserCredentialsChange::default_instance_;
  delete EventUserCredentialsChange_reflection_;
  delete CcdiEvent::default_instance_;
  delete CcdiEvent_reflection_;
  delete EventsDequeueOutput::default_instance_;
  delete EventsDequeueOutput_reflection_;
  delete GetDatasetDirectoryEntriesInput::default_instance_;
  delete GetDatasetDirectoryEntriesInput_reflection_;
  delete DatasetDirectoryEntry::default_instance_;
  delete DatasetDirectoryEntry_reflection_;
  delete GetDatasetDirectoryEntriesOutput::default_instance_;
  delete GetDatasetDirectoryEntriesOutput_reflection_;
  delete GetInfraHttpInfoInput::default_instance_;
  delete GetInfraHttpInfoInput_reflection_;
  delete GetInfraHttpInfoOutput::default_instance_;
  delete GetInfraHttpInfoOutput_reflection_;
  delete GetLocalHttpInfoInput::default_instance_;
  delete GetLocalHttpInfoInput_reflection_;
  delete GetLocalHttpInfoOutput::default_instance_;
  delete GetLocalHttpInfoOutput_reflection_;
  delete GetPersonalCloudStateInput::default_instance_;
  delete GetPersonalCloudStateInput_reflection_;
  delete DeviceConnectionStatus::default_instance_;
  delete DeviceConnectionStatus_reflection_;
  delete StorageNodeInfo::default_instance_;
  delete StorageNodeInfo_reflection_;
  delete GetPersonalCloudStateOutput::default_instance_;
  delete GetPersonalCloudStateOutput_reflection_;
  delete LookupAbsPathInput::default_instance_;
  delete LookupAbsPathInput_reflection_;
  delete EventSyncHistory::default_instance_;
  delete EventSyncHistory_reflection_;
  delete GetSyncStateInput::default_instance_;
  delete GetSyncStateInput_reflection_;
  delete ObjectSyncState::default_instance_;
  delete ObjectSyncState_reflection_;
  delete DatasetSyncStateSummary::default_instance_;
  delete DatasetSyncStateSummary_reflection_;
  delete FeatureSyncStateSummary::default_instance_;
  delete FeatureSyncStateSummary_reflection_;
  delete MediaMetadataThumbMigrateStatus::default_instance_;
  delete MediaMetadataThumbMigrateStatus_reflection_;
  delete SyncFeatureSettings::default_instance_;
  delete SyncFeatureSettings_reflection_;
  delete LookupAbsPathOutput::default_instance_;
  delete LookupAbsPathOutput_reflection_;
  delete GetSyncStateOutput::default_instance_;
  delete GetSyncStateOutput_reflection_;
  delete GetSyncStateNotificationsInput::default_instance_;
  delete GetSyncStateNotificationsInput_reflection_;
  delete SyncEventSyncComplete::default_instance_;
  delete SyncEventSyncComplete_reflection_;
  delete SyncEventFileAdded::default_instance_;
  delete SyncEventFileAdded_reflection_;
  delete SyncEventFileRemoved::default_instance_;
  delete SyncEventFileRemoved_reflection_;
  delete SyncEventError::default_instance_;
  delete SyncEventError_reflection_;
  delete SyncEventFileStatus::default_instance_;
  delete SyncEventFileStatus_reflection_;
  delete SyncStateNotification::default_instance_;
  delete SyncStateNotification_reflection_;
  delete GetSyncStateNotificationsOutput::default_instance_;
  delete GetSyncStateNotificationsOutput_reflection_;
  delete LinkDeviceInput::default_instance_;
  delete LinkDeviceInput_reflection_;
  delete ListLinkedDevicesInput::default_instance_;
  delete ListLinkedDevicesInput_reflection_;
  delete LinkedDeviceInfo::default_instance_;
  delete LinkedDeviceInfo_reflection_;
  delete ListLinkedDevicesOutput::default_instance_;
  delete ListLinkedDevicesOutput_reflection_;
  delete ListOwnedDatasetsInput::default_instance_;
  delete ListOwnedDatasetsInput_reflection_;
  delete ListOwnedDatasetsOutput::default_instance_;
  delete ListOwnedDatasetsOutput_reflection_;
  delete ListUserStorageInput::default_instance_;
  delete ListUserStorageInput_reflection_;
  delete ListUserStorageOutput::default_instance_;
  delete ListUserStorageOutput_reflection_;
  delete ListSyncSubscriptionsInput::default_instance_;
  delete ListSyncSubscriptionsInput_reflection_;
  delete SyncSubscriptionDetail::default_instance_;
  delete SyncSubscriptionDetail_reflection_;
  delete ListSyncSubscriptionsOutput::default_instance_;
  delete ListSyncSubscriptionsOutput_reflection_;
  delete RemoteWakeupInput::default_instance_;
  delete RemoteWakeupInput_reflection_;
  delete RemoteSwUpdateMessageInput::default_instance_;
  delete RemoteSwUpdateMessageInput_reflection_;
  delete RenameDatasetInput::default_instance_;
  delete RenameDatasetInput_reflection_;
  delete PrivateMsaDataCommitInput::default_instance_;
  delete PrivateMsaDataCommitInput_reflection_;
  delete SyncOnceInput::default_instance_;
  delete SyncOnceInput_reflection_;
  delete SyncOnceOutput::default_instance_;
  delete SyncOnceOutput_reflection_;
  delete UnlinkDeviceInput::default_instance_;
  delete UnlinkDeviceInput_reflection_;
  delete UpdateAppStateInput::default_instance_;
  delete UpdateAppStateInput_reflection_;
  delete UpdateAppStateOutput::default_instance_;
  delete UpdateAppStateOutput_reflection_;
  delete CameraRollDownloadDirSpec::default_instance_;
  delete CameraRollDownloadDirSpec_reflection_;
  delete MediaMetadataThumbMigrate::default_instance_;
  delete MediaMetadataThumbMigrate_reflection_;
  delete SyncFeatureSettingsRequest::default_instance_;
  delete SyncFeatureSettingsRequest_reflection_;
  delete UpdateSyncSettingsInput::default_instance_;
  delete UpdateSyncSettingsInput_reflection_;
  delete UpdateSyncSettingsOutput::default_instance_;
  delete UpdateSyncSettingsOutput_reflection_;
  delete UpdateSyncSubscriptionInput::default_instance_;
  delete UpdateSyncSubscriptionInput_reflection_;
  delete SWUpdateCheckInput::default_instance_;
  delete SWUpdateCheckInput_reflection_;
  delete SWUpdateCheckOutput::default_instance_;
  delete SWUpdateCheckOutput_reflection_;
  delete SWUpdateBeginDownloadInput::default_instance_;
  delete SWUpdateBeginDownloadInput_reflection_;
  delete SWUpdateBeginDownloadOutput::default_instance_;
  delete SWUpdateBeginDownloadOutput_reflection_;
  delete SWUpdateGetDownloadProgressInput::default_instance_;
  delete SWUpdateGetDownloadProgressInput_reflection_;
  delete SWUpdateGetDownloadProgressOutput::default_instance_;
  delete SWUpdateGetDownloadProgressOutput_reflection_;
  delete SWUpdateEndDownloadInput::default_instance_;
  delete SWUpdateEndDownloadInput_reflection_;
  delete SWUpdateCancelDownloadInput::default_instance_;
  delete SWUpdateCancelDownloadInput_reflection_;
  delete SWUpdateSetCcdVersionInput::default_instance_;
  delete SWUpdateSetCcdVersionInput_reflection_;
  delete UpdateSystemStateInput::default_instance_;
  delete UpdateSystemStateInput_reflection_;
  delete UpdateSystemStateOutput::default_instance_;
  delete UpdateSystemStateOutput_reflection_;
  delete BeginMetadataTransactionInput::default_instance_;
  delete BeginMetadataTransactionInput_reflection_;
  delete UpdateMetadataInput::default_instance_;
  delete UpdateMetadataInput_reflection_;
  delete DeleteMetadataInput::default_instance_;
  delete DeleteMetadataInput_reflection_;
  delete DeleteCollectionInput::default_instance_;
  delete DeleteCollectionInput_reflection_;
  delete GetCollectionDetailsInput::default_instance_;
  delete GetCollectionDetailsInput_reflection_;
  delete GetCollectionDetailsOutput::default_instance_;
  delete GetCollectionDetailsOutput_reflection_;
  delete BeginCatalogInput::default_instance_;
  delete BeginCatalogInput_reflection_;
  delete CommitCatalogInput::default_instance_;
  delete CommitCatalogInput_reflection_;
  delete EndCatalogInput::default_instance_;
  delete EndCatalogInput_reflection_;
  delete DeleteCatalogInput::default_instance_;
  delete DeleteCatalogInput_reflection_;
  delete MSAGetContentURLInput::default_instance_;
  delete MSAGetContentURLInput_reflection_;
  delete MSAGetContentURLOutput::default_instance_;
  delete MSAGetContentURLOutput_reflection_;
  delete MCAQueryMetadataObjectsInput::default_instance_;
  delete MCAQueryMetadataObjectsInput_reflection_;
  delete MCAQueryMetadataObjectsOutput::default_instance_;
  delete MCAQueryMetadataObjectsOutput_reflection_;
  delete RequestPairingInput::default_instance_;
  delete RequestPairingInput_reflection_;
  delete RequestPairingOutput::default_instance_;
  delete RequestPairingOutput_reflection_;
  delete RespondToPairingRequestInput::default_instance_;
  delete RespondToPairingRequestInput_reflection_;
  delete RequestPairingPinInput::default_instance_;
  delete RequestPairingPinInput_reflection_;
  delete RequestPairingPinOutput::default_instance_;
  delete RequestPairingPinOutput_reflection_;
  delete GetPairingStatusInput::default_instance_;
  delete GetPairingStatusInput_reflection_;
  delete GetPairingStatusOutput::default_instance_;
  delete GetPairingStatusOutput_reflection_;
  delete CCDIQueryPicStreamObjectsInput::default_instance_;
  delete CCDIQueryPicStreamObjectsInput_reflection_;
  delete CCDIQueryPicStreamObjectsOutput::default_instance_;
  delete CCDIQueryPicStreamObjectsOutput_reflection_;
  delete PicStreamQueryObject::default_instance_;
  delete PicStreamQueryObject_reflection_;
  delete PicStreamContentDirectoryObject::default_instance_;
  delete PicStreamContentDirectoryObject_reflection_;
  delete PicStreamItemFields::default_instance_;
  delete PicStreamItemFields_reflection_;
  delete PicStreamAlbumFields::default_instance_;
  delete PicStreamAlbumFields_reflection_;
  delete SharedFilesStoreFileInput::default_instance_;
  delete SharedFilesStoreFileInput_reflection_;
  delete SharedFilesStoreFileOutput::default_instance_;
  delete SharedFilesStoreFileOutput_reflection_;
  delete SharedFilesShareFileInput::default_instance_;
  delete SharedFilesShareFileInput_reflection_;
  delete SharedFilesUnshareFileInput::default_instance_;
  delete SharedFilesUnshareFileInput_reflection_;
  delete SharedFilesDeleteSharedFileInput::default_instance_;
  delete SharedFilesDeleteSharedFileInput_reflection_;
  delete SharedFilesQueryInput::default_instance_;
  delete SharedFilesQueryInput_reflection_;
  delete SharedFilesQueryObject::default_instance_;
  delete SharedFilesQueryObject_reflection_;
  delete SharedFilesQueryOutput::default_instance_;
  delete SharedFilesQueryOutput_reflection_;
  delete RemoteExecutableInfo::default_instance_;
  delete RemoteExecutableInfo_reflection_;
  delete RegisterRemoteExecutableInput::default_instance_;
  delete RegisterRemoteExecutableInput_reflection_;
  delete UnregisterRemoteExecutableInput::default_instance_;
  delete UnregisterRemoteExecutableInput_reflection_;
  delete ListRegisteredRemoteExecutablesInput::default_instance_;
  delete ListRegisteredRemoteExecutablesInput_reflection_;
  delete ListRegisteredRemoteExecutablesOutput::default_instance_;
  delete ListRegisteredRemoteExecutablesOutput_reflection_;
}

void protobuf_AddDesc_ccdi_5frpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::media_metadata::protobuf_AddDesc_media_5fmetadata_5ftypes_2eproto();
  ::vplex::vsDirectory::protobuf_AddDesc_vplex_5fvs_5fdirectory_5fservice_5ftypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ccdi_rpc.proto\022\003ccd\032\032media_metadata_ty"
    "pes.proto\032&vplex_vs_directory_service_ty"
    "pes.proto\"\020\n\016NoParamRequest\"*\n\022PlayerInd"
    "exRequest\022\024\n\014player_index\030\001 \002(\005\" \n\rUserI"
    "dRequest\022\017\n\007user_id\030\001 \002(\006\"\021\n\017NoParamResp"
    "onse\"n\n\rCurrentPlayer\022\017\n\007user_id\030\001 \002(\006\022\020"
    "\n\010username\030\002 \001(\t\022\022\n\naccount_id\030\004 \001(\t\022&\n\027"
    "has_elevated_privileges\030\005 \001(\010:\005false\"5\n\016"
    "CurrentPlayers\022#\n\007players\030\001 \003(\0132\022.ccd.Cu"
    "rrentPlayer\"X\n\010DiskInfo\022\030\n\020total_size_by"
    "tes\030\001 \002(\004\022\030\n\020free_space_bytes\030\002 \002(\004\022\030\n\020a"
    "vailable_inodes\030\003 \001(\004\"\234\001\n\013NetworkInfo\022\030\n"
    "\020proxy_agent_port\030\001 \001(\r\022\031\n\021media_server_"
    "port\030\002 \001(\r\022\032\n\022virtual_drive_port\030\003 \001(\r\022\033"
    "\n\023tunnel_service_port\030\004 \001(\r\022\037\n\027ext_tunne"
    "l_service_port\030\005 \001(\r\"\352\001\n\023IoacAdapterWarn"
    "ings\022\"\n\032magic_packet_not_supported\030\020 \001(\010"
    "\022!\n\031offload_arp_not_supported\030\021 \001(\010\022 \n\030o"
    "ffload_ns_not_supported\030\022 \001(\010\022-\n%offload"
    "_80211_rsn_rekey_not_supported\030\023 \001(\010\022\032\n\022"
    "offload_arp_failed\030\024 \001(\010\022\037\n\027enable_keepa"
    "live_failed\030\025 \001(\010\"x\n\021IoacAdapterStatus\022\014"
    "\n\004guid\030\001 \002(\t\022)\n\007summary\030\004 \001(\0162\030.ccd.Ioac"
    "StatusSummary_t\022*\n\010warnings\030\005 \001(\0132\030.ccd."
    "IoacAdapterWarnings\"\212\001\n\021IoacOverallStatu"
    "s\022)\n\007summary\030\001 \002(\0162\030.ccd.IoacStatusSumma"
    "ry_t\022(\n\010adapters\030\002 \003(\0132\026.ccd.IoacAdapter"
    "Status\022 \n\030warn_sleep_not_supported\030\020 \001(\010"
    "\"\377\003\n\023GetSystemStateInput\022\034\n\rget_device_i"
    "d\030\004 \001(\010:\005false\022\032\n\013get_players\030\002 \001(\010:\005fal"
    "se\022\030\n\tget_users\030\n \001(\010:\005false\022#\n\024get_logg"
    "ed_out_users\030\r \001(\010:\005false\022\034\n\rget_disk_in"
    "fo\030\005 \001(\010:\005false\022 \n\021get_device_locale\030\010 \001"
    "(\010:\005false\022\037\n\020get_network_info\030\t \001(\010:\005fal"
    "se\022\036\n\017get_ioac_status\030\013 \001(\010:\005false\022\036\n\017ge"
    "t_enable_ioac\030\016 \001(\010:\005false\022&\n\027get_ioac_a"
    "lready_in_use\030\017 \001(\010:\005false\022(\n get_backgr"
    "ound_mode_interval_sec\030\014 \001(\010\022)\n!get_only"
    "_mobile_network_available\030\025 \001(\010\022\035\n\025get_s"
    "tream_power_mode\030\026 \001(\010\022\026\n\016get_power_mode"
    "\030\027 \001(\010\022\032\n\022get_pd_instance_id\030\030 \001(\010\"3\n\013Po"
    "werStatus\022$\n\npower_mode\030\001 \002(\0162\020.ccd.Powe"
    "rMode_t\"0\n\013CurrentUser\022\017\n\007user_id\030\001 \002(\006\022"
    "\020\n\010username\030\002 \002(\t\"W\n\rLoggedOutUser\022\017\n\007us"
    "er_id\030\001 \002(\006\022\020\n\010username\030\002 \002(\t\022#\n\006reason\030"
    "\003 \002(\0162\023.ccd.LogoutReason_t\"\247\004\n\024GetSystem"
    "StateOutput\022\021\n\tdevice_id\030\004 \001(\006\022$\n\007player"
    "s\030\002 \001(\0132\023.ccd.CurrentPlayers\022\037\n\005users\030\n "
    "\003(\0132\020.ccd.CurrentUser\022,\n\020logged_out_user"
    "s\030\r \003(\0132\022.ccd.LoggedOutUser\022 \n\tdisk_info"
    "\030\005 \001(\0132\r.ccd.DiskInfo\022\025\n\rdevice_locale\030\010"
    " \001(\t\022&\n\014network_info\030\t \001(\0132\020.ccd.Network"
    "Info\022+\n\013ioac_status\030\013 \001(\0132\026.ccd.IoacOver"
    "allStatus\022$\n\034background_mode_interval_se"
    "c\030\014 \001(\021\022%\n\035only_mobile_network_available"
    "\030\025 \001(\010\022\023\n\013enable_ioac\030\016 \001(\010\022\033\n\023ioac_alre"
    "ady_in_use\030\017 \001(\010\022\031\n\021stream_power_mode\030\026 "
    "\001(\010\022+\n\021power_mode_status\030\027 \001(\0132\020.ccd.Pow"
    "erStatus\022\026\n\016pd_instance_id\030\030 \001(\t\022\032\n\022pd_i"
    "nstance_id_num\030\031 \001(\r\"\240\001\n\nLoginInput\022\027\n\014p"
    "layer_index\030\001 \001(\005:\0010\022\021\n\tuser_name\030\002 \002(\t\022"
    "\020\n\010password\030\003 \001(\t\022\025\n\rpairing_token\030\017 \001(\t"
    "\022\026\n\016ac_eula_agreed\030\016 \001(\010\022%\n\027skip_if_alre"
    "ady_correct\030\005 \001(\010:\004true\"\036\n\013LoginOutput\022\017"
    "\n\007user_id\030\001 \002(\006\"Y\n\013LogoutInput\022\024\n\014player"
    "_index\030\001 \001(\005\022\025\n\rlocal_user_id\030\002 \001(\006\022\035\n\017w"
    "arn_if_no_user\030\t \001(\010:\004true\"\372\001\n\025InfraHttp"
    "RequestInput\022\017\n\007user_id\030\001 \001(\006\022(\n\007service"
    "\030\002 \002(\0162\027.ccd.InfraHttpService_t\022\024\n\006secur"
    "e\030\003 \002(\010:\004true\022D\n\006method\030\004 \001(\0162\035.ccd.Infr"
    "aHttpRequestMethod_t:\025INFRA_HTTP_METHOD_"
    "GET\022\022\n\nurl_suffix\030\005 \002(\t\022\021\n\tpost_data\030\006 \001"
    "(\t\022#\n\024privileged_operation\030\007 \001(\010:\005false\""
    "F\n\026InfraHttpRequestOutput\022\025\n\rresponse_co"
    "de\030\001 \002(\005\022\025\n\rhttp_response\030\002 \001(\t\"+\n\030Regis"
    "terStorageNodeInput\022\017\n\007user_id\030\001 \002(\006\"@\n\032"
    "UnregisterStorageNodeInput\022\017\n\007user_id\030\001 "
    "\002(\006\022\021\n\tdevice_id\030\002 \001(\006\"`\n\036RemoteFileAcce"
    "ssControlDirSpec\022\013\n\003dir\030\001 \001(\t\022\014\n\004name\030\002 "
    "\001(\t\022\017\n\007is_user\030\003 \002(\010\022\022\n\nis_allowed\030\004 \002(\010"
    "\"P\n\033RemoteFileAccessControlDirs\0221\n\004dirs\030"
    "\001 \003(\0132#.ccd.RemoteFileAccessControlDirSp"
    "ec\"\200\003\n\026UpdateStorageNodeInput\022\017\n\007user_id"
    "\030\001 \002(\006\022\021\n\tdevice_id\030\002 \001(\006\022$\n\034feature_med"
    "ia_server_enabled\030\003 \001(\010\022\"\n\032feature_virt_"
    "drive_enabled\030\004 \001(\010\022*\n\"feature_remote_fi"
    "le_access_enabled\030\005 \001(\010\022)\n!feature_my_st"
    "orage_server_enabled\030\010 \001(\010\022N\n!add_remote"
    "file_access_control_dir\030\006 \001(\0132#.ccd.Remo"
    "teFileAccessControlDirSpec\022Q\n$remove_rem"
    "otefile_access_control_dir\030\007 \001(\0132#.ccd.R"
    "emoteFileAccessControlDirSpec\"\366\001\n\022LanDev"
    "iceRouteInfo\022%\n\004type\030\001 \002(\0162\027.ccd.LanInte"
    "rfaceType_t\022\025\n\rip_v4_address\030\002 \001(\t\022\025\n\rip"
    "_v6_address\030\003 \001(\t\022\031\n\021media_server_port\030\004"
    " \001(\r\022\032\n\022virtual_drive_port\030\005 \001(\r\022\026\n\016web_"
    "front_port\030\006 \001(\r\022\033\n\023tunnel_service_port\030"
    "\007 \001(\r\022\037\n\027ext_tunnel_service_port\030\010 \001(\r\"\362"
    "\001\n\rLanDeviceInfo\022\"\n\004type\030\001 \002(\0162\024.ccd.Lan"
    "DeviceType_t\022\014\n\004uuid\030\002 \002(\t\022\023\n\013device_nam"
    "e\030\003 \002(\t\022\021\n\tdevice_id\030\004 \001(\006\022+\n\nroute_info"
    "\030\005 \002(\0132\027.ccd.LanDeviceRouteInfo\022\025\n\rnotif"
    "ications\030\006 \001(\r\022\017\n\007user_id\030\007 \001(\006\022\026\n\016pd_in"
    "stance_id\030\010 \001(\t\022\032\n\022pd_instance_id_num\030\t "
    "\001(\r\":\n\025ReportLanDevicesInput\022!\n\005infos\030\001 "
    "\003(\0132\022.ccd.LanDeviceInfo\"\207\001\n\023ListLanDevic"
    "esInput\022\017\n\007user_id\030\001 \001(\006\022\034\n\024include_unre"
    "gistered\030\002 \001(\010\022)\n!include_registered_but"
    "_not_linked\030\003 \001(\010\022\026\n\016include_linked\030\004 \001("
    "\010\"9\n\024ListLanDevicesOutput\022!\n\005infos\030\001 \003(\013"
    "2\022.ccd.LanDeviceInfo\"2\n\013DatasetItem\022\017\n\007u"
    "ser_id\030\001 \002(\006\022\022\n\ndataset_id\030\002 \002(\006\"C\n\035List"
    "StorageNodeDatasetsOutput\022\"\n\010datasets\030\001 "
    "\003(\0132\020.ccd.DatasetItem\"(\n\013TrusteeItem\022\013\n\003"
    "sid\030\001 \002(\t\022\014\n\004attr\030\002 \002(\006\"9\n\023CCDWin32Start"
    "Params\022\"\n\010trustees\030\001 \003(\0132\020.ccd.TrusteeIt"
    "em\"e\n\017AddDatasetInput\022\017\n\007user_id\030\001 \002(\006\022\024"
    "\n\014dataset_name\030\002 \002(\t\022+\n\014dataset_type\030\003 \002"
    "(\0162\025.ccd.NewDatasetType_t\"&\n\020AddDatasetO"
    "utput\022\022\n\ndataset_id\030\001 \002(\006\"\324\001\n\030AddSyncSub"
    "scriptionInput\022\017\n\007user_id\030\001 \002(\006\022\021\n\tdevic"
    "e_id\030\002 \001(\006\022\022\n\ndataset_id\030\003 \002(\006\0226\n\021subscr"
    "iption_type\030\004 \002(\0162\033.ccd.SyncSubscription"
    "Type_t\022\023\n\013device_root\030\005 \001(\t\022\016\n\006filter\030\006 "
    "\001(\t\022\020\n\010max_size\030\007 \001(\006\022\021\n\tmax_files\030\010 \001(\006"
    "\"9\n\022DeleteDatasetInput\022\017\n\007user_id\030\001 \002(\006\022"
    "\022\n\ndataset_id\030\002 \002(\006\"W\n\034DeleteSyncSubscri"
    "ptionsInput\022\017\n\007user_id\030\001 \002(\006\022\023\n\013dataset_"
    "ids\030\002 \003(\006\022\021\n\tdevice_id\030\003 \001(\006\"\030\n\026EventsCr"
    "eateQueueInput\"/\n\027EventsCreateQueueOutpu"
    "t\022\024\n\014queue_handle\030\001 \002(\006\"/\n\027EventsDestroy"
    "QueueInput\022\024\n\014queue_handle\030\001 \002(\006\"Q\n\022Even"
    "tsDequeueInput\022\024\n\014queue_handle\030\001 \002(\006\022\021\n\t"
    "max_count\030\002 \001(\r\022\022\n\007timeout\030\003 \001(\005:\0010\"\204\001\n\034"
    "EventSyncFeatureStatusChange\022#\n\007feature\030"
    "\001 \002(\0162\022.ccd.SyncFeature_t\022,\n\006status\030\002 \002("
    "\0132\034.ccd.FeatureSyncStateSummary\022\021\n\tdevic"
    "e_id\030\010 \001(\006\"\213\001\n\025EventDeviceInfoChange\022\021\n\t"
    "device_id\030\001 \002(\006\0220\n\013change_type\030\002 \002(\0162\033.c"
    "cd.DeviceInfoChangeType_t\022\023\n\013device_name"
    "\030\003 \001(\t\022\030\n\020protocol_version\030\004 \001(\t\"]\n\033Even"
    "tDeviceConnectionChange\022\021\n\tdevice_id\030\001 \002"
    "(\006\022+\n\006status\030\002 \002(\0132\033.ccd.DeviceConnectio"
    "nStatus\"/\n\031EventDatasetContentChange\022\022\n\n"
    "dataset_id\030\001 \002(\006\"(\n\022EventDatasetChange\022\022"
    "\n\ndataset_id\030\001 \003(\006\"5\n\027PairingRequestAttr"
    "ibute\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"g\n\023Eve"
    "ntPairingRequest\0228\n\022pairing_attributes\030\001"
    " \003(\0132\034.ccd.PairingRequestAttribute\022\026\n\016tr"
    "ansaction_id\030\002 \002(\t\"^\n\026EventStorageNodeCh"
    "ange\022\021\n\tdevice_id\030\001 \002(\006\0221\n\013change_type\030\002"
    " \002(\0162\034.ccd.StorageNodeChangeType_t\"!\n\016Ev"
    "entUserLogin\022\017\n\007user_id\030\001 \002(\006\"b\n\017EventUs"
    "erLogout\022\017\n\007user_id\030\001 \002(\006\022>\n\006reason\030\002 \001("
    "\0162\023.ccd.LogoutReason_t:\031LOGOUT_REASON_UN"
    "SPECIFIED\"\344\001\n\033EventDocSaveAndGoCompletio"
    "n\0220\n\013change_type\030\001 \002(\0162\033.ccd.DocSaveAndG"
    "oChangeType\022\032\n\022file_path_and_name\030\003 \002(\t\022"
    "\036\n\026new_file_path_and_name\030\004 \001(\t\022\023\n\013modif"
    "y_time\030\005 \001(\006\022\016\n\006result\030\n \001(\021\022\017\n\007docname\030"
    "\013 \001(\t\022\017\n\007comp_id\030\014 \001(\006\022\020\n\010revision\030\r \001(\006"
    "\"<\n\"EventDocSaveAndGoEngineStateChange\022\026"
    "\n\016engine_started\030\001 \002(\010\"\220\001\n\025EventSWUpdate"
    "Progress\022\016\n\006handle\030\001 \002(\004\022\033\n\023total_transf"
    "er_size\030\002 \002(\004\022\035\n\025bytes_transferred_cnt\030\003"
    " \002(\004\022+\n\005state\030\004 \002(\0162\034.ccd.SWUpdateDownlo"
    "adState_t\"I\n\025EventIoacStatusChange\0220\n\016st"
    "atus_summary\030\001 \002(\0162\030.ccd.IoacStatusSumma"
    "ry_t\"*\n\025EventLanDevicesChange\022\021\n\ttimesta"
    "mp\030\001 \002(\006\"0\n\033EventLanDevicesProbeRequest\022"
    "\021\n\ttimestamp\030\001 \002(\006\"<\n\024EventPowerModeChan"
    "ge\022$\n\npower_mode\030\001 \002(\0162\020.ccd.PowerMode_t"
    "\"6\n\032EventRemoteSwUpdateMessage\022\030\n\020source"
    "_device_id\030\001 \002(\006\"\250\001\n\032EventAsyncUploadCom"
    "pletion\022\026\n\016transaction_id\030\001 \002(\006\022\017\n\007user_"
    "id\030\002 \002(\006\022\016\n\006handle\030\003 \002(\006\022\025\n\rupload_statu"
    "s\030\004 \002(\007\022&\n\005state\030\005 \002(\0162\027.ccd.AsyncUpload"
    "State_t\022\022\n\nerror_code\030\006 \001(\021\"\222\001\n\027EventSyn"
    "cBackCompletion\022\017\n\007user_id\030\001 \002(\006\022\022\n\ndata"
    "set_id\030\002 \002(\006\022\026\n\016component_name\030\003 \002(\t\022\024\n\014"
    "component_id\030\004 \002(\006\022\020\n\010revision\030\005 \002(\006\022\022\n\n"
    "local_path\030\006 \002(\t\"4\n\036EventPicStreamDBUpda"
    "teComplete\022\022\n\ndataset_id\030\001 \002(\006\"[\n!EventP"
    "icStreamStorageConservation\022\030\n\020is_droppi"
    "ng_mode\030\001 \002(\010\022\034\n\024free_disk_size_bytes\030\002 "
    "\001(\004\"n\n\034EventDeviceCredentialsChange\0220\n\013c"
    "hange_type\030\001 \002(\0162\033.ccd.DeviceCredChangeT"
    "ype_t\022\034\n\024local_file_root_path\030\002 \002(\t\"5\n\032E"
    "ventUserCredentialsChange\022\027\n\017local_file_"
    "path\030\001 \002(\t\"\252\013\n\tCcdiEvent\022E\n\032sync_feature"
    "_status_change\030\014 \001(\0132!.ccd.EventSyncFeat"
    "ureStatusChange\0226\n\022device_info_change\030\t "
    "\001(\0132\032.ccd.EventDeviceInfoChange\022B\n\030devic"
    "e_connection_change\030\n \001(\0132 .ccd.EventDev"
    "iceConnectionChange\022>\n\026dataset_content_c"
    "hange\030\022 \001(\0132\036.ccd.EventDatasetContentCha"
    "nge\0228\n\023storage_node_change\030\023 \001(\0132\033.ccd.E"
    "ventStorageNodeChange\022\'\n\nuser_login\030\024 \001("
    "\0132\023.ccd.EventUserLogin\022)\n\013user_logout\030\025 "
    "\001(\0132\024.ccd.EventUserLogout\022D\n\032doc_save_an"
    "d_go_completion\030\036 \001(\0132 .ccd.EventDocSave"
    "AndGoCompletion\022T\n#doc_save_and_go_engin"
    "e_state_change\030\037 \001(\0132\'.ccd.EventDocSaveA"
    "ndGoEngineStateChange\0226\n\022sw_update_progr"
    "ess\030\010 \001(\0132\032.ccd.EventSWUpdateProgress\0226\n"
    "\022ioac_status_change\030\013 \001(\0132\032.ccd.EventIoa"
    "cStatusChange\0226\n\022lan_devices_change\030  \001("
    "\0132\032.ccd.EventLanDevicesChange\022C\n\031lan_dev"
    "ices_probe_request\030! \001(\0132 .ccd.EventLanD"
    "evicesProbeRequest\0224\n\021power_mode_change\030"
    "\" \001(\0132\031.ccd.EventPowerModeChange\0223\n\nsu_m"
    "essage\030$ \001(\0132\037.ccd.EventRemoteSwUpdateMe"
    "ssage\022@\n\027async_upload_completion\030% \001(\0132\037"
    ".ccd.EventAsyncUploadCompletion\022/\n\016datas"
    "et_change\030& \001(\0132\027.ccd.EventDatasetChange"
    "\0229\n\023syncback_completion\030( \001(\0132\034.ccd.Even"
    "tSyncBackCompletion\022N\n\036picstream_storage"
    "_conservation\030) \001(\0132&.ccd.EventPicStream"
    "StorageConservation\0221\n\017pairing_request\030*"
    " \001(\0132\030.ccd.EventPairingRequest\022@\n\023picstr"
    "eamdb_updated\030+ \001(\0132#.ccd.EventPicStream"
    "DBUpdateComplete\022+\n\014sync_history\030, \001(\0132\025"
    ".ccd.EventSyncHistory\022=\n\022device_cred_cha"
    "nge\030- \001(\0132!.ccd.EventDeviceCredentialsCh"
    "ange\0229\n\020user_cred_change\030. \001(\0132\037.ccd.Eve"
    "ntUserCredentialsChange\"5\n\023EventsDequeue"
    "Output\022\036\n\006events\030\001 \003(\0132\016.ccd.CcdiEvent\"^"
    "\n\037GetDatasetDirectoryEntriesInput\022\017\n\007use"
    "r_id\030\001 \002(\006\022\022\n\ndataset_id\030\002 \002(\006\022\026\n\016direct"
    "ory_name\030\003 \002(\t\"_\n\025DatasetDirectoryEntry\022"
    "\014\n\004name\030\001 \002(\t\022\016\n\006is_dir\030\002 \002(\010\022\014\n\004size\030\003 "
    "\001(\006\022\013\n\003url\030\004 \001(\t\022\r\n\005mtime\030\005 \001(\006\"O\n GetDa"
    "tasetDirectoryEntriesOutput\022+\n\007entries\030\001"
    " \003(\0132\032.ccd.DatasetDirectoryEntry\"h\n\025GetI"
    "nfraHttpInfoInput\022\017\n\007user_id\030\001 \001(\006\022(\n\007se"
    "rvice\030\002 \002(\0162\027.ccd.InfraHttpService_t\022\024\n\006"
    "secure\030\003 \002(\010:\004true\"\\\n\026GetInfraHttpInfoOu"
    "tput\022\022\n\nurl_prefix\030\001 \002(\t\022\026\n\016session_hand"
    "le\030\002 \001(\t\022\026\n\016service_ticket\030\003 \001(\t\"R\n\025GetL"
    "ocalHttpInfoInput\022\017\n\007user_id\030\001 \002(\006\022(\n\007se"
    "rvice\030\002 \002(\0162\027.ccd.LocalHttpService_t\"\\\n\026"
    "GetLocalHttpInfoOutput\022\022\n\nurl_prefix\030\001 \002"
    "(\t\022\026\n\016session_handle\030\002 \002(\t\022\026\n\016service_ti"
    "cket\030\003 \002(\t\"\275\001\n\032GetPersonalCloudStateInpu"
    "t\022\017\n\007user_id\030\001 \002(\006\022\035\n\016only_use_cache\030\005 \001"
    "(\010:\005false\022&\n\027get_infra_storage_quota\030\002 \001"
    "(\010:\005false\022!\n\022list_storage_nodes\030\003 \001(\010:\005f"
    "alse\022$\n\034get_device_connection_status\030\004 \003"
    "(\006\"u\n\026DeviceConnectionStatus\022+\n\005state\030\001 "
    "\002(\0162\034.ccd.DeviceConnectionState_t\022\025\n\rsta"
    "ndby_since\030\002 \001(\004\022\027\n\010updating\030\003 \001(\010:\005fals"
    "e\"g\n\017StorageNodeInfo\022\021\n\tdevice_id\030\001 \002(\006\022"
    "\024\n\014storage_name\030\002 \001(\t\022+\n\006status\030\003 \002(\0132\033."
    "ccd.DeviceConnectionStatus\"\316\001\n\033GetPerson"
    "alCloudStateOutput\022 \n\030infra_storage_used"
    "_bytes\030\001 \001(\004\022!\n\031infra_storage_total_byte"
    "s\030\002 \001(\004\022+\n\rstorage_nodes\030\003 \003(\0132\024.ccd.Sto"
    "rageNodeInfo\022=\n\030device_connection_status"
    "\030\004 \003(\0132\033.ccd.DeviceConnectionStatus\"j\n\022L"
    "ookupAbsPathInput\022\022\n\ndataset_id\030\001 \002(\006\022\024\n"
    "\014component_id\030\002 \002(\006\022\020\n\010revision\030\003 \002(\004\022\030\n"
    "\020dataset_rel_path\030\007 \001(\t\"\266\001\n\020EventSyncHis"
    "tory\022\"\n\004type\030\001 \002(\0162\024.ccd.SyncEventType_t"
    "\022\014\n\004path\030\002 \002(\t\022#\n\007feature\030\003 \002(\0162\022.ccd.Sy"
    "ncFeature_t\022\022\n\ndataset_id\030\004 \002(\004\022\022\n\nevent"
    "_time\030\005 \002(\004\022#\n\033conflict_file_original_pa"
    "th\030\017 \001(\t\"\234\010\n\021GetSyncStateInput\022\017\n\007user_i"
    "d\030\001 \001(\006\022\035\n\016only_use_cache\030\006 \001(\010:\005false\022\036"
    "\n\017get_device_name\030\002 \001(\010:\005false\0220\n!get_is"
    "_camera_roll_upload_enabled\030\007 \001(\010:\005false"
    "\0226\n(get_is_camera_roll_global_delete_ena"
    "bled\030  \001(\010:\004true\022.\n\037get_is_network_activ"
    "ity_enabled\030\t \001(\010:\005false\022#\n\024get_bandwidt"
    "h_limits\030\004 \001(\010:\005false\022!\n\031get_sync_states"
    "_for_paths\030\005 \003(\t\022$\n\034get_sync_states_for_"
    "datasets\030\010 \003(\006\0228\n\034get_sync_states_for_fe"
    "atures\030\026 \003(\0162\022.ccd.SyncFeature_t\022\033\n\023get_"
    "background_data\030\014 \001(\010\022\025\n\rget_auto_sync\030\r"
    " \001(\010\022\037\n\027get_mobile_network_data\030\016 \001(\010\022#\n"
    "\033get_camera_roll_upload_dirs\030\017 \001(\010\022%\n\035ge"
    "t_camera_roll_download_dirs\030\023 \001(\010\022(\n get"
    "_media_metadata_download_path\030\020 \001(\010\022&\n\036g"
    "et_media_metadata_upload_path\030\021 \001(\010\022\037\n\027g"
    "et_media_playlist_path\030\022 \001(\010\022\037\n\027get_note"
    "s_sync_settings\030\025 \001(\010\022\033\n\023get_notes_sync_"
    "path\030\027 \001(\010\022\"\n\032get_mm_thumb_download_path"
    "\030\030 \001(\010\022!\n\031get_mm_thumb_sync_enabled\030\032 \001("
    "\010\022\031\n\021get_clouddoc_sync\030\034 \001(\010\0220\n\017lookup_a"
    "bs_path\030\036 \001(\0132\027.ccd.LookupAbsPathInput\022>"
    "\n\"get_sync_history_events_by_feature\030\037 \001"
    "(\0162\022.ccd.SyncFeature_t\022,\n!get_sync_histo"
    "ry_events_max_count\030\" \001(\r:\0010\022!\n\031get_sync"
    "box_sync_settings\030! \001(\010\"\233\001\n\017ObjectSyncSt"
    "ate\022#\n\005state\030\001 \002(\0162\024.ccd.SyncStateType_t"
    "\022\025\n\ndataset_id\030\002 \001(\006:\0010\022(\n\014sync_feature\030"
    "\004 \001(\0162\022.ccd.SyncFeature_t\022\"\n\023is_sync_fol"
    "der_root\030\003 \001(\010:\005false\"\352\001\n\027DatasetSyncSta"
    "teSummary\022G\n\006status\030\001 \001(\0162\033.ccd.DatasetS"
    "yncStateType_t:\032CCD_SYNC_STATE_OUT_OF_SY"
    "NC\022!\n\026pending_files_download\030\002 \001(\r:\0010\022\037\n"
    "\024pending_files_upload\030\003 \001(\r:\0010\022!\n\026total_"
    "files_downloaded\030\004 \001(\r:\0010\022\037\n\024total_files"
    "_uploaded\030\005 \001(\r:\0010\"\234\002\n\027FeatureSyncStateS"
    "ummary\022J\n\006status\030\001 \001(\0162\033.ccd.FeatureSync"
    "StateType_t:\035CCD_FEATURE_STATE_OUT_OF_SY"
    "NC\022\r\n\005error\030\002 \001(\021\022\030\n\rpending_files\030\003 \001(\r"
    ":\0010\022\027\n\014failed_files\030\004 \001(\r:\0010\022\034\n\021uploads_"
    "remaining\030\005 \001(\r:\0010\022\036\n\023downloads_remainin"
    "g\030\006 \001(\r:\0010\022\033\n\023remote_scan_pending\030\007 \001(\010\022"
    "\030\n\020scan_in_progress\030\010 \001(\010\"L\n\037MediaMetada"
    "taThumbMigrateStatus\022\023\n\013mm_src_path\030\001 \002("
    "\t\022\024\n\014mm_dest_path\030\002 \002(\t\"q\n\023SyncFeatureSe"
    "ttings\022\034\n\024sync_feature_enabled\030\001 \002(\010\022\031\n\021"
    "sync_feature_path\030\002 \001(\t\022!\n\022is_archive_st"
    "orage\030\003 \001(\010:\005false\"g\n\023LookupAbsPathOutpu"
    "t\022\020\n\010err_code\030\001 \002(\005\022\025\n\rabsolute_path\030\002 \001"
    "(\t\022\031\n\021local_modify_time\030\003 \001(\006\022\014\n\004hash\030\004 "
    "\001(\t\"\340\n\n\022GetSyncStateOutput\022\030\n\020is_device_"
    "linked\030\001 \002(\010\022\035\n\025is_sync_agent_enabled\030\002 "
    "\002(\010\022\026\n\016my_device_name\030\003 \001(\t\022%\n\035is_camera"
    "_roll_upload_enabled\030\t \001(\010\022,\n$is_camera_"
    "roll_global_delete_enabled\030  \001(\010\022#\n\033is_n"
    "etwork_activity_enabled\030\013 \001(\010\022#\n\033max_dow"
    "nload_rate_bytes_sec\030\004 \001(\004\022!\n\031max_upload"
    "_rate_bytes_sec\030\005 \001(\004\0223\n\025sync_states_for"
    "_paths\030\006 \003(\0132\024.ccd.ObjectSyncState\022@\n\032da"
    "taset_sync_state_summary\030\n \003(\0132\034.ccd.Dat"
    "asetSyncStateSummary\022@\n\032feature_sync_sta"
    "te_summary\030\026 \003(\0132\034.ccd.FeatureSyncStateS"
    "ummary\022\027\n\017background_data\030\014 \001(\010\022\021\n\tauto_"
    "sync\030\r \001(\010\022\033\n\023mobile_network_data\030\016 \001(\010\022"
    "\037\n\027camera_roll_upload_dirs\030\017 \003(\t\022J\n\"came"
    "ra_roll_full_res_download_dirs\030\023 \003(\0132\036.c"
    "cd.CameraRollDownloadDirSpec\022I\n!camera_r"
    "oll_low_res_download_dirs\030\024 \003(\0132\036.ccd.Ca"
    "meraRollDownloadDirSpec\022G\n\037camera_roll_t"
    "humb_download_dirs\030\037 \003(\0132\036.ccd.CameraRol"
    "lDownloadDirSpec\022$\n\034media_metadata_downl"
    "oad_path\030\020 \001(\t\022\"\n\032media_metadata_upload_"
    "path\030\021 \001(\t\022\033\n\023media_playlist_path\030\022 \001(\t\022"
    "5\n\023notes_sync_settings\030\025 \001(\0132\030.ccd.SyncF"
    "eatureSettings\022\027\n\017notes_sync_path\030\027 \001(\t\022"
    "\036\n\026mm_thumb_download_path\030\030 \001(\t\022N\n mm_th"
    "umb_download_migrate_status\030\031 \001(\0132$.ccd."
    "MediaMetadataThumbMigrateStatus\022\035\n\025mm_th"
    "umb_sync_enabled\030\032 \001(\010\022\025\n\rclouddoc_sync\030"
    "\034 \001(\010\0227\n\033mm_thumb_sync_enabled_types\030\035 \003"
    "(\0162\022.ccd.SyncFeature_t\0221\n\017lookup_abs_pat"
    "h\030\036 \001(\0132\030.ccd.LookupAbsPathOutput\0222\n\023syn"
    "c_history_events\030\" \003(\0132\025.ccd.EventSyncHi"
    "story\0227\n\025syncbox_sync_settings\030! \003(\0132\030.c"
    "cd.SyncFeatureSettings\"3\n\036GetSyncStateNo"
    "tificationsInput\022\021\n\tmax_count\030\001 \001(\r\"E\n\025S"
    "yncEventSyncComplete\022\026\n\016num_downloaded\030\001"
    " \002(\r\022\024\n\014num_uploaded\030\002 \002(\r\";\n\022SyncEventF"
    "ileAdded\022\022\n\ndataset_id\030\001 \002(\006\022\021\n\tfull_pat"
    "h\030\002 \002(\t\"=\n\024SyncEventFileRemoved\022\022\n\ndatas"
    "et_id\030\001 \002(\006\022\021\n\tfull_path\030\002 \002(\t\"~\n\016SyncEv"
    "entError\022-\n\nerror_type\030\001 \002(\0162\031.ccd.SyncE"
    "ventErrorType_t\022\022\n\ndataset_id\030\003 \001(\006\022\014\n\004p"
    "ath\030\004 \001(\t\022\r\n\005count\030\005 \001(\r\022\014\n\004name\030\006 \001(\t\"\316"
    "\001\n\023SyncEventFileStatus\022\021\n\tfull_path\030\001 \002("
    "\t\022\022\n\ndataset_id\030\002 \002(\006\022.\n\013change_type\030\003 \002"
    "(\0162\031.ccd.SyncFileChangeType_t\022\032\n\013is_star"
    "ting\030\004 \001(\010:\005false\022\032\n\013is_finished\030\005 \001(\010:\005"
    "false\022(\n\005error\030\006 \001(\0162\031.ccd.SyncEventErro"
    "rType_t\"\373\001\n\025SyncStateNotification\0221\n\rsyn"
    "c_complete\030\002 \001(\0132\032.ccd.SyncEventSyncComp"
    "lete\022+\n\nfile_added\030\003 \001(\0132\027.ccd.SyncEvent"
    "FileAdded\022/\n\014file_removed\030\004 \001(\0132\031.ccd.Sy"
    "ncEventFileRemoved\022\"\n\005error\030\005 \001(\0132\023.ccd."
    "SyncEventError\022-\n\013file_status\030\006 \001(\0132\030.cc"
    "d.SyncEventFileStatus\"T\n\037GetSyncStateNot"
    "ificationsOutput\0221\n\rnotifications\030\001 \003(\0132"
    "\032.ccd.SyncStateNotification\"\242\001\n\017LinkDevi"
    "ceInput\022\017\n\007user_id\030\001 \002(\006\022\023\n\013device_name\030"
    "\002 \001(\t\022\035\n\016is_acer_device\030\003 \001(\010:\005false\022 \n\021"
    "device_has_camera\030\004 \001(\010:\005false\022\024\n\014device"
    "_class\030\005 \001(\t\022\022\n\nos_version\030\006 \001(\t\"k\n\026List"
    "LinkedDevicesInput\022\017\n\007user_id\030\001 \002(\006\022\035\n\016o"
    "nly_use_cache\030\002 \001(\010:\005false\022!\n\022storage_no"
    "des_only\030\003 \001(\010:\005false\"\346\003\n\020LinkedDeviceIn"
    "fo\022\021\n\tdevice_id\030\001 \002(\006\022\023\n\013device_name\030\002 \002"
    "(\t\022\027\n\017is_storage_node\030\003 \002(\010\0226\n\021connectio"
    "n_status\030\004 \002(\0132\033.ccd.DeviceConnectionSta"
    "tus\022\024\n\014device_class\030\005 \002(\t\022\017\n\007is_acer\030\006 \002"
    "(\010\022\022\n\nhas_camera\030\007 \002(\010\022\022\n\nos_version\030\010 \001"
    "(\t\022$\n\034feature_media_server_capable\030\t \001(\010"
    "\022\"\n\032feature_virt_drive_capable\030\n \001(\010\022\030\n\020"
    "protocol_version\030\013 \001(\t\022*\n\"feature_remote"
    "_file_access_capable\030\014 \001(\010\022%\n\035feature_fs"
    "datasettype_capable\030\r \001(\010\022\022\n\nbuild_info\030"
    "\016 \001(\t\022\024\n\014model_number\030\017 \001(\t\022)\n!feature_m"
    "y_storage_server_capable\030\020 \001(\010\"x\n\027ListLi"
    "nkedDevicesOutput\0225\n\016linked_devices\030\001 \003("
    "\0132\035.vplex.vsDirectory.DeviceInfo\022&\n\007devi"
    "ces\030\002 \003(\0132\025.ccd.LinkedDeviceInfo\"p\n\026List"
    "OwnedDatasetsInput\022\017\n\007user_id\030\001 \002(\006\022&\n\027s"
    "how_all_device_classes\030\002 \001(\010:\005false\022\035\n\016o"
    "nly_use_cache\030\003 \001(\010:\005false\"t\n\027ListOwnedD"
    "atasetsOutput\0229\n\017dataset_details\030\001 \003(\0132 "
    ".vplex.vsDirectory.DatasetDetail\022\036\n\026crea"
    "ted_by_this_device\030\002 \003(\010\"F\n\024ListUserStor"
    "ageInput\022\017\n\007user_id\030\001 \002(\006\022\035\n\016only_use_ca"
    "che\030\002 \001(\010:\005false\"M\n\025ListUserStorageOutpu"
    "t\0224\n\014user_storage\030\001 \003(\0132\036.vplex.vsDirect"
    "ory.UserStorage\"_\n\032ListSyncSubscriptions"
    "Input\022\017\n\007user_id\030\001 \001(\006\022\021\n\tdevice_id\030\002 \001("
    "\006\022\035\n\016only_use_cache\030\003 \001(\010:\005false\"\315\002\n\026Syn"
    "cSubscriptionDetail\0229\n\017dataset_details\030\001"
    " \002(\0132 .vplex.vsDirectory.DatasetDetail\022\034"
    "\n\024absolute_device_root\030\002 \001(\t\022\027\n\017raw_devi"
    "ce_root\030\003 \002(\t\022\016\n\006filter\030\004 \001(\t\022\021\n\tupload_"
    "ok\030\005 \002(\010\022\023\n\013download_ok\030\006 \002(\010\022\030\n\020upload_"
    "delete_ok\030\007 \002(\010\022\032\n\022download_delete_ok\030\010 "
    "\002(\010\022\024\n\014dataset_root\030\t \002(\t\022\030\n\020dataset_loc"
    "ation\030\n \002(\t\022\020\n\010max_size\030\013 \001(\006\022\021\n\tmax_fil"
    "es\030\014 \001(\006\"\200\001\n\033ListSyncSubscriptionsOutput"
    "\0226\n\rsubscriptions\030\001 \003(\0132\037.vplex.vsDirect"
    "ory.Subscription\022)\n\004subs\030\002 \003(\0132\033.ccd.Syn"
    "cSubscriptionDetail\"<\n\021RemoteWakeupInput"
    "\022\017\n\007user_id\030\001 \002(\006\022\026\n\016device_to_wake\030\002 \002("
    "\006\"G\n\032RemoteSwUpdateMessageInput\022\017\n\007user_"
    "id\030\001 \002(\006\022\030\n\020target_device_id\030\002 \002(\006\"O\n\022Re"
    "nameDatasetInput\022\017\n\007user_id\030\001 \002(\006\022\022\n\ndat"
    "aset_id\030\002 \002(\006\022\024\n\014dataset_name\030\003 \002(\t\"j\n\031P"
    "rivateMsaDataCommitInput\022\017\n\007user_id\030\001 \002("
    "\006\022\024\n\014commit_start\030\003 \001(\010\022\022\n\ncommit_end\030\004 "
    "\001(\010\022\022\n\ninitialize\030\005 \001(\010\"0\n\rSyncOnceInput"
    "\022\016\n\006app_id\030\001 \002(\t\022\017\n\007user_id\030\002 \001(\006\"\020\n\016Syn"
    "cOnceOutput\"7\n\021UnlinkDeviceInput\022\017\n\007user"
    "_id\030\001 \002(\006\022\021\n\tdevice_id\030\002 \001(\006\"p\n\023UpdateAp"
    "pStateInput\022\016\n\006app_id\030\001 \002(\t\0220\n\010app_type\030"
    "\006 \001(\0162\r.ccd.CcdApp_t:\017CCD_APP_DEFAULT\022\027\n"
    "\017foreground_mode\030\005 \001(\010\"3\n\024UpdateAppState"
    "Output\022\033\n\023foreground_mode_err\030\005 \001(\021\"\247\001\n\031"
    "CameraRollDownloadDirSpec\022\013\n\003dir\030\001 \002(\t\022\023"
    "\n\010max_size\030\007 \001(\r:\0010\022\024\n\tmax_files\030\010 \001(\r:\001"
    "0\022(\n\035preserve_free_disk_percentage\030\t \001(\r"
    ":\0010\022(\n\035preserve_free_disk_size_bytes\030\n \001"
    "(\004:\0010\"0\n\031MediaMetadataThumbMigrate\022\023\n\013mm"
    "_dest_dir\030\001 \001(\t\"{\n\032SyncFeatureSettingsRe"
    "quest\022\033\n\023enable_sync_feature\030\001 \002(\010\022\035\n\025se"
    "t_sync_feature_path\030\002 \001(\t\022!\n\022is_archive_"
    "storage\030\003 \001(\010:\005false\"\337\t\n\027UpdateSyncSetti"
    "ngsInput\022\017\n\007user_id\030\001 \002(\006\022\032\n\022set_my_devi"
    "ce_name\030\002 \001(\t\022\032\n\022enable_camera_roll\030\007 \001("
    "\010\022\037\n\027enable_network_activity\030\010 \001(\010\022\'\n\037se"
    "t_max_download_rate_bytes_sec\030\005 \001(\004\022%\n\035s"
    "et_max_upload_rate_bytes_sec\030\006 \001(\004\022\027\n\017ba"
    "ckground_data\030\n \001(\010\022\021\n\tauto_sync\030\013 \001(\010\022\033"
    "\n\023mobile_network_data\030\014 \001(\010\022#\n\033add_camer"
    "a_roll_upload_dirs\030\r \003(\t\022&\n\036remove_camer"
    "a_roll_upload_dirs\030\016 \003(\t\022&\n\036trigger_came"
    "ra_roll_upload_dir\030\017 \001(\t\022M\n%add_camera_r"
    "oll_full_res_download_dir\030\022 \001(\0132\036.ccd.Ca"
    "meraRollDownloadDirSpec\0220\n(remove_camera"
    "_roll_full_res_download_dir\030\023 \001(\t\022L\n$add"
    "_camera_roll_low_res_download_dir\030\024 \001(\0132"
    "\036.ccd.CameraRollDownloadDirSpec\022/\n\'remov"
    "e_camera_roll_low_res_download_dir\030\025 \001(\t"
    "\022J\n\"add_camera_roll_thumb_download_dir\030 "
    " \001(\0132\036.ccd.CameraRollDownloadDirSpec\022-\n%"
    "remove_camera_roll_thumb_download_dir\030! "
    "\001(\t\022 \n\030send_file_to_camera_roll\030\026 \001(\t\022\034\n"
    "\024enable_global_delete\030\" \001(\010\022=\n\024configure"
    "_notes_sync\030\032 \001(\0132\037.ccd.SyncFeatureSetti"
    "ngsRequest\022\031\n\021enable_notes_sync\030\033 \001(\010\022F\n"
    "\036migrate_mm_thumb_download_path\030\034 \001(\0132\036."
    "ccd.MediaMetadataThumbMigrate\022\034\n\024enable_"
    "mm_thumb_sync\030\035 \001(\010\022\034\n\024enable_clouddoc_s"
    "ync\030\036 \001(\010\0226\n\032enable_mm_thumb_sync_types\030"
    "\037 \003(\0162\022.ccd.SyncFeature_t\022\?\n\026configure_s"
    "yncbox_sync\030# \001(\0132\037.ccd.SyncFeatureSetti"
    "ngsRequest\022\033\n\023enable_shared_by_me\030$ \001(\010\022"
    "\035\n\025enable_shared_with_me\030% \001(\010\"\255\010\n\030Updat"
    "eSyncSettingsOutput\022\036\n\026set_my_device_nam"
    "e_err\030\001 \001(\021\022\036\n\026enable_camera_roll_err\030\006 "
    "\001(\021\022 \n\030enable_global_delete_err\030\" \001(\021\022#\n"
    "\033enable_network_activity_err\030\007 \001(\021\022!\n\031se"
    "t_max_download_rate_err\030\004 \001(\021\022\037\n\027set_max"
    "_upload_rate_err\030\005 \001(\021\022\033\n\023background_dat"
    "a_err\030\n \001(\021\022\025\n\rauto_sync_err\030\013 \001(\021\022\037\n\027mo"
    "bile_network_data_err\030\014 \001(\021\022\'\n\037add_camer"
    "a_roll_upload_dirs_err\030\r \001(\021\022*\n\"remove_c"
    "amera_roll_upload_dirs_err\030\016 \001(\021\022*\n\"trig"
    "ger_camera_roll_upload_dir_err\030\017 \001(\021\0221\n)"
    "add_camera_roll_full_res_download_dir_er"
    "r\030\022 \001(\021\0224\n,remove_camera_roll_full_res_d"
    "ownload_dir_err\030\023 \001(\021\0220\n(add_camera_roll"
    "_low_res_download_dir_err\030\024 \001(\021\0223\n+remov"
    "e_camera_roll_low_res_download_dir_err\030\025"
    " \001(\021\022.\n&add_camera_roll_thumb_download_d"
    "ir_err\030  \001(\021\0221\n)remove_camera_roll_thumb"
    "_download_dir_err\030! \001(\021\022$\n\034send_file_to_"
    "camera_roll_err\030\026 \001(\021\022 \n\030configure_notes"
    "_sync_err\030\032 \001(\021\022\035\n\025enable_notes_sync_err"
    "\030\033 \001(\021\022*\n\"migrate_mm_thumb_download_path"
    "_err\030\034 \001(\021\022 \n\030enable_mm_thumb_sync_err\030\035"
    " \001(\021\022 \n\030enable_clouddoc_sync_err\030\036 \001(\021\022\""
    "\n\032configure_syncbox_sync_err\030\037 \001(\021\022\037\n\027en"
    "able_shared_by_me_err\030# \001(\021\022!\n\031enable_sh"
    "ared_with_me_err\030$ \001(\021\"\216\001\n\033UpdateSyncSub"
    "scriptionInput\022\017\n\007user_id\030\001 \002(\006\022\022\n\ndatas"
    "et_id\030\002 \002(\006\022\021\n\tdevice_id\030\003 \001(\006\022\022\n\nnew_fi"
    "lter\030\004 \001(\t\022\020\n\010max_size\030\005 \001(\006\022\021\n\tmax_file"
    "s\030\006 \001(\006\"Q\n\022SWUpdateCheckInput\022\020\n\010app_gui"
    "d\030\001 \002(\t\022\023\n\013app_version\030\002 \002(\t\022\024\n\014update_c"
    "ache\030\003 \001(\010\"\323\001\n\023SWUpdateCheckOutput\022\023\n\013up"
    "date_mask\030\001 \002(\004\022\032\n\022latest_app_version\030\002 "
    "\002(\t\022\032\n\022latest_ccd_version\030\003 \002(\t\022\022\n\nchang"
    "e_log\030\004 \002(\t\022\020\n\010app_size\030\005 \001(\004\022\r\n\005is_qa\030\006"
    " \001(\010\022\037\n\027is_auto_update_disabled\030\007 \001(\010\022\031\n"
    "\021is_infra_download\030\010 \001(\010\"C\n\032SWUpdateBegi"
    "nDownloadInput\022\020\n\010app_guid\030\001 \002(\t\022\023\n\013app_"
    "version\030\002 \002(\t\"-\n\033SWUpdateBeginDownloadOu"
    "tput\022\016\n\006handle\030\001 \002(\004\"2\n SWUpdateGetDownl"
    "oadProgressInput\022\016\n\006handle\030\001 \002(\004\"\214\001\n!SWU"
    "pdateGetDownloadProgressOutput\022\033\n\023total_"
    "transfer_size\030\001 \002(\004\022\035\n\025bytes_transferred"
    "_cnt\030\002 \002(\004\022+\n\005state\030\003 \002(\0162\034.ccd.SWUpdate"
    "DownloadState_t\"A\n\030SWUpdateEndDownloadIn"
    "put\022\016\n\006handle\030\001 \002(\004\022\025\n\rfile_location\030\002 \002"
    "(\t\"-\n\033SWUpdateCancelDownloadInput\022\016\n\006han"
    "dle\030\001 \002(\004\"C\n\032SWUpdateSetCcdVersionInput\022"
    "\020\n\010ccd_guid\030\001 \002(\t\022\023\n\013ccd_version\030\002 \002(\t\"\307"
    "\002\n\026UpdateSystemStateInput\022\032\n\013do_shutdown"
    "\030\014 \001(\010:\005false\022\'\n\030report_network_connecte"
    "d\030\r \001(\010:\005false\022\'\n\030report_different_netwo"
    "rk\030\027 \001(\010:\005false\022$\n\034background_mode_inter"
    "val_sec\030\010 \001(\021\022\'\n\030perform_background_task"
    "s\030\t \001(\010:\005false\022\031\n\nlog_caches\030\024 \001(\010:\005fals"
    "e\022%\n\035only_mobile_network_available\030\025 \001(\010"
    "\022\031\n\021stream_power_mode\030\026 \001(\010\022\023\n\013enable_io"
    "ac\030\030 \001(\010\"\365\001\n\027UpdateSystemStateOutput\022\023\n\013"
    "do_shutdown\030\014 \001(\021\022$\n\034background_mode_int"
    "erval_err\030\010 \001(\021\022$\n\034perform_background_ta"
    "sks_err\030\t \001(\021\022\026\n\016log_caches_err\030\024 \001(\021\022)\n"
    "!only_mobile_network_available_err\030\025 \001(\021"
    "\022\035\n\025stream_power_mode_err\030\026 \001(\021\022\027\n\017enabl"
    "e_ioac_err\030\030 \001(\021\"x\n\035BeginMetadataTransac"
    "tionInput\022\025\n\rcollection_id\030\001 \002(\t\022\037\n\024coll"
    "ection_timestamp\030\002 \001(\004:\0010\022\037\n\020reset_colle"
    "ction\030\003 \001(\010:\005false\"O\n\023UpdateMetadataInpu"
    "t\0228\n\010metadata\030\001 \002(\0132&.media_metadata.Con"
    "tentDirectoryObject\"(\n\023DeleteMetadataInp"
    "ut\022\021\n\tobject_id\030\001 \002(\t\".\n\025DeleteCollectio"
    "nInput\022\025\n\rcollection_id\030\001 \002(\t\"2\n\031GetColl"
    "ectionDetailsInput\022\025\n\rcollection_id\030\001 \002("
    "\t\"V\n\032GetCollectionDetailsOutput\0228\n\010metad"
    "ata\030\001 \003(\0132&.media_metadata.ContentDirect"
    "oryObject\"H\n\021BeginCatalogInput\0223\n\014catalo"
    "g_type\030\001 \001(\0162\035.media_metadata.CatalogTyp"
    "e_t\"I\n\022CommitCatalogInput\0223\n\014catalog_typ"
    "e\030\001 \001(\0162\035.media_metadata.CatalogType_t\"F"
    "\n\017EndCatalogInput\0223\n\014catalog_type\030\001 \001(\0162"
    "\035.media_metadata.CatalogType_t\"I\n\022Delete"
    "CatalogInput\0223\n\014catalog_type\030\001 \001(\0162\035.med"
    "ia_metadata.CatalogType_t\"\240\001\n\025MSAGetCont"
    "entURLInput\022\017\n\007user_id\030\001 \002(\006\0223\n\014catalog_"
    "type\030\002 \002(\0162\035.media_metadata.CatalogType_"
    "t\022\025\n\rcollection_id\030\003 \002(\t\022\021\n\tobject_id\030\004 "
    "\002(\t\022\027\n\010is_thumb\030\005 \001(\010:\005false\"%\n\026MSAGetCo"
    "ntentURLOutput\022\013\n\003url\030\001 \002(\t\"\227\001\n\034MCAQuery"
    "MetadataObjectsInput\022\027\n\017cloud_device_id\030"
    "\001 \002(\006\0224\n\014filter_field\030\002 \002(\0162\036.media_meta"
    "data.DBFilterType_t\022\024\n\014search_field\030\003 \001("
    "\t\022\022\n\nsort_field\030\004 \001(\t\"`\n\035MCAQueryMetadat"
    "aObjectsOutput\022\?\n\017content_objects\030\001 \003(\0132"
    "&.media_metadata.MCAMetadataQueryObject\""
    "\233\001\n\023RequestPairingInput\022\021\n\thost_hwid\030\001 \001"
    "(\t\022\025\n\rhost_deviceid\030\002 \001(\006\022\013\n\003pin\030\003 \001(\t\022\023"
    "\n\013device_hwid\030\004 \002(\t\0228\n\022pairing_attribute"
    "s\030\005 \003(\0132\034.ccd.PairingRequestAttribute\"-\n"
    "\024RequestPairingOutput\022\025\n\rpairing_token\030\001"
    " \002(\t\"a\n\034RespondToPairingRequestInput\022\026\n\016"
    "transaction_id\030\001 \002(\t\022\030\n\020accepted_pairing"
    "\030\002 \002(\005\022\017\n\007user_id\030\003 \002(\006\"<\n\026RequestPairin"
    "gPinInput\022\021\n\tdevice_id\030\001 \002(\006\022\017\n\007user_id\030"
    "\002 \002(\006\"&\n\027RequestPairingPinOutput\022\013\n\003pin\030"
    "\001 \002(\t\".\n\025GetPairingStatusInput\022\025\n\rpairin"
    "g_token\030\001 \002(\t\";\n\026GetPairingStatusOutput\022"
    "\016\n\006status\030\001 \002(\t\022\021\n\tuser_name\030\002 \001(\t\"\177\n\036CC"
    "DIQueryPicStreamObjectsInput\0223\n\014filter_f"
    "ield\030\001 \002(\0162\035.ccd.PicStream_DBFilterType_"
    "t\022\024\n\014search_field\030\002 \001(\t\022\022\n\nsort_field\030\003 "
    "\001(\t\"U\n\037CCDIQueryPicStreamObjectsOutput\0222"
    "\n\017content_objects\030\001 \003(\0132\031.ccd.PicStreamQ"
    "ueryObject\"\300\001\n\024PicStreamQueryObject\0222\n\004p"
    "cdo\030\001 \001(\0132$.ccd.PicStreamContentDirector"
    "yObject\0222\n\017PicStream_album\030\002 \001(\0132\031.ccd.P"
    "icStreamAlbumFields\022\024\n\014full_res_url\030\003 \001("
    "\t\022\023\n\013low_res_url\030\004 \001(\t\022\025\n\rthumbnail_url\030"
    "\005 \001(\t\"}\n\037PicStreamContentDirectoryObject"
    "\022\017\n\007comp_id\030\001 \002(\t\022\027\n\017optional_fields\030\002 \003"
    "(\t\0220\n\016picstream_item\030\003 \001(\0132\030.ccd.PicStre"
    "amItemFields\"\210\001\n\023PicStreamItemFields\022\022\n\n"
    "identifier\030\001 \002(\t\022\r\n\005title\030\002 \002(\t\022\022\n\nalbum"
    "_name\030\003 \002(\t\022\021\n\tdate_time\030\004 \002(\004\022\021\n\tfile_s"
    "ize\030\005 \001(\004\022\024\n\014ori_deviceid\030\006 \002(\004\"W\n\024PicSt"
    "reamAlbumFields\022\022\n\nalbum_name\030\001 \002(\t\022\022\n\ni"
    "tem_count\030\002 \002(\r\022\027\n\017item_total_size\030\003 \002(\004"
    "\"v\n\031SharedFilesStoreFileInput\022\017\n\007user_id"
    "\030\001 \002(\006\022\025\n\rabs_file_path\030\002 \002(\t\022\027\n\017opaque_"
    "metadata\030\003 \001(\t\022\030\n\020abs_preview_path\030\004 \001(\t"
    "\"B\n\032SharedFilesStoreFileOutput\022\017\n\007comp_i"
    "d\030\001 \001(\006\022\023\n\013stored_name\030\002 \001(\t\"l\n\031SharedFi"
    "lesShareFileInput\022\017\n\007user_id\030\001 \002(\006\022\017\n\007co"
    "mp_id\030\002 \002(\006\022\023\n\013stored_name\030\003 \001(\t\022\030\n\020reci"
    "pient_emails\030\004 \003(\t\"n\n\033SharedFilesUnshare"
    "FileInput\022\017\n\007user_id\030\001 \002(\006\022\017\n\007comp_id\030\002 "
    "\002(\006\022\023\n\013stored_name\030\003 \001(\t\022\030\n\020recipient_em"
    "ails\030\004 \003(\t\"Y\n SharedFilesDeleteSharedFil"
    "eInput\022\017\n\007user_id\030\001 \002(\006\022\017\n\007comp_id\030\002 \002(\006"
    "\022\023\n\013stored_name\030\003 \001(\t\"|\n\025SharedFilesQuer"
    "yInput\022\017\n\007user_id\030\001 \002(\006\022(\n\014sync_feature\030"
    "\002 \002(\0162\022.ccd.SyncFeature_t\022\024\n\014search_fiel"
    "d\030\003 \001(\t\022\022\n\nsort_field\030\004 \001(\t\"\244\001\n\026SharedFi"
    "lesQueryObject\022\017\n\007comp_id\030\001 \002(\006\022\020\n\010revis"
    "ion\030\002 \001(\006\022\014\n\004name\030\003 \002(\t\022\023\n\013content_url\030\004"
    " \001(\t\022\023\n\013preview_url\030\005 \001(\t\022\027\n\017opaque_meta"
    "data\030\006 \001(\t\022\026\n\016recipient_list\030\007 \003(\t\"L\n\026Sh"
    "aredFilesQueryOutput\0222\n\rquery_objects\030\001 "
    "\003(\0132\033.ccd.SharedFilesQueryObject\"P\n\024Remo"
    "teExecutableInfo\022\014\n\004name\030\001 \002(\t\022\025\n\rabsolu"
    "te_path\030\002 \002(\t\022\023\n\013version_num\030\003 \002(\006\"|\n\035Re"
    "gisterRemoteExecutableInput\022\017\n\007user_id\030\001"
    " \002(\006\022\017\n\007app_key\030\002 \002(\t\0229\n\026remote_executab"
    "le_info\030\003 \002(\0132\031.ccd.RemoteExecutableInfo"
    "\"c\n\037UnregisterRemoteExecutableInput\022\017\n\007u"
    "ser_id\030\001 \002(\006\022\017\n\007app_key\030\002 \002(\t\022\036\n\026remote_"
    "executable_name\030\003 \002(\t\"H\n$ListRegisteredR"
    "emoteExecutablesInput\022\017\n\007user_id\030\001 \002(\006\022\017"
    "\n\007app_key\030\002 \002(\t\"i\n%ListRegisteredRemoteE"
    "xecutablesOutput\022@\n\035registered_remote_ex"
    "ecutables\030\001 \003(\0132\031.ccd.RemoteExecutableIn"
    "fo*\225\001\n\022InfraHttpService_t\022\032\n\026INFRA_HTTP_"
    "SERVICE_OPS\020\001\022\"\n\036INFRA_HTTP_SERVICE_OPS_"
    "CENTRAL\020\002\022#\n\037INFRA_HTTP_SERVICE_OPS_REGI"
    "ONAL\020\003\022\032\n\026INFRA_HTTP_SERVICE_VCS\020\004*9\n\022Lo"
    "calHttpService_t\022#\n\037LOCAL_HTTP_SERVICE_R"
    "EMOTE_FILES\020\001*\342\002\n\023IoacStatusSummary_t\022 \n"
    "\034IOAC_STATUS_SUMMARY_INACTIVE\020\001\022 \n\034IOAC_"
    "STATUS_SUMMARY_UPDATING\020\004\022$\n IOAC_STATUS"
    "_SUMMARY_GETTING_INFO\020\005\022\037\n\033IOAC_STATUS_S"
    "UMMARY_TESTING\020\006\022\034\n\030IOAC_STATUS_SUMMARY_"
    "GOOD\020\007\022$\n IOAC_STATUS_SUMMARY_UDP_FILTER"
    "ED\020\010\022(\n$IOAC_STATUS_SUMMARY_FAIL_NO_HARD"
    "WARE\020\t\022+\n\'IOAC_STATUS_SUMMARY_FAIL_RESOL"
    "VE_SERVER\020\n\022%\n!IOAC_STATUS_SUMMARY_FAIL_"
    "INTERNAL\020\013*Q\n\030InfraHttpRequestMethod_t\022\031"
    "\n\025INFRA_HTTP_METHOD_GET\020\001\022\032\n\026INFRA_HTTP_"
    "METHOD_POST\020\002*1\n\017LanDeviceType_t\022\036\n\032LAN_"
    "DEVICE_TYPE_CLOUD_NODE\020\001*j\n\022LanInterface"
    "Type_t\022\033\n\027LAN_INTERFACE_TYPE_USB3\020\001\022\032\n\026L"
    "AN_INTERFACE_TYPE_ETH\020\002\022\033\n\027LAN_INTERFACE"
    "_TYPE_WIFI\020\003*\233\001\n\020NewDatasetType_t\022\033\n\027NEW"
    "_DATASET_TYPE_CAMERA\020\001\022\032\n\026NEW_DATASET_TY"
    "PE_MEDIA\020\002\022\031\n\025NEW_DATASET_TYPE_USER\020\003\022\032\n"
    "\026NEW_DATASET_TYPE_CACHE\020\004\022\027\n\023NEW_DATASET"
    "_TYPE_FS\020\005*\340\001\n\026SyncSubscriptionType_t\022\034\n"
    "\030SUBSCRIPTION_TYPE_NORMAL\020\001\022\034\n\030SUBSCRIPT"
    "ION_TYPE_CAMERA\020\002\022\036\n\032SUBSCRIPTION_TYPE_P"
    "RODUCER\020\003\022\036\n\032SUBSCRIPTION_TYPE_CONSUMER\020"
    "\004\022$\n SUBSCRIPTION_TYPE_CLEARFI_SERVER\020\005\022"
    "$\n SUBSCRIPTION_TYPE_CLEARFI_CLIENT\020\006*\237\007"
    "\n\rSyncFeature_t\022\037\n\033SYNC_FEATURE_PHOTO_ME"
    "TADATA\020\001\022!\n\035SYNC_FEATURE_PHOTO_THUMBNAIL"
    "S\020\002\022\037\n\033SYNC_FEATURE_MUSIC_METADATA\020\003\022!\n\035"
    "SYNC_FEATURE_MUSIC_THUMBNAILS\020\004\022\037\n\033SYNC_"
    "FEATURE_VIDEO_METADATA\020\005\022!\n\035SYNC_FEATURE"
    "_VIDEO_THUMBNAILS\020\006\022\032\n\026SYNC_FEATURE_PLAY"
    "LISTS\020\007\022\026\n\022SYNC_FEATURE_NOTES\020\024\022\030\n\024SYNC_"
    "FEATURE_SYNCBOX\020\036\022!\n\035SYNC_FEATURE_PICSTR"
    "EAM_UPLOAD\020(\022,\n(SYNC_FEATURE_PICSTREAM_D"
    "OWNLOAD_FULL_RES\0202\022+\n\'SYNC_FEATURE_PICST"
    "REAM_DOWNLOAD_LOW_RES\020<\022-\n)SYNC_FEATURE_"
    "PICSTREAM_DOWNLOAD_THUMBNAIL\020F\022#\n\037SYNC_F"
    "EATURE_PICSTREAM_DELETION\020P\0221\n-SYNC_FEAT"
    "URE_SHARED_FILES_PHOTOS_SHARED_BY_ME\020Q\0223"
    "\n/SYNC_FEATURE_SHARED_FILES_PHOTOS_SHARE"
    "D_WITH_ME\020R\022&\n\"SYNC_FEATURE_MEDIA_METADA"
    "TA_UPLOAD\020d\022,\n(SYNC_FEATURE_METADATA_PHO"
    "TO_INDEX_UPLOAD\020e\022,\n(SYNC_FEATURE_METADA"
    "TA_PHOTO_THUMB_UPLOAD\020f\022,\n(SYNC_FEATURE_"
    "METADATA_MUSIC_INDEX_UPLOAD\020g\022,\n(SYNC_FE"
    "ATURE_METADATA_MUSIC_THUMB_UPLOAD\020h\022,\n(S"
    "YNC_FEATURE_METADATA_VIDEO_INDEX_UPLOAD\020"
    "i\022,\n(SYNC_FEATURE_METADATA_VIDEO_THUMB_U"
    "PLOAD\020j*p\n\026DatasetSyncStateType_t\022\032\n\026CCD"
    "_SYNC_STATE_IN_SYNC\020\001\022\032\n\026CCD_SYNC_STATE_"
    "SYNCING\020\002\022\036\n\032CCD_SYNC_STATE_OUT_OF_SYNC\020"
    "\003*\214\001\n\010CcdApp_t\022\023\n\017CCD_APP_DEFAULT\020\000\022\021\n\rC"
    "CD_APP_PHOTO\020\001\022\021\n\rCCD_APP_MUSIC\020\002\022\021\n\rCCD"
    "_APP_VIDEO\020\003\022\033\n\027CCD_APP_MUSIC_AND_VIDEO\020"
    "\004\022\025\n\021CCD_APP_ALL_MEDIA\020\005*\202\001\n\026DeviceInfoC"
    "hangeType_t\022 \n\034DEVICE_INFO_CHANGE_TYPE_L"
    "INK\020\001\022\"\n\036DEVICE_INFO_CHANGE_TYPE_UNLINK\020"
    "\002\022\"\n\036DEVICE_INFO_CHANGE_TYPE_UPDATE\020\003*\213\001"
    "\n\027StorageNodeChangeType_t\022$\n STORAGE_NOD"
    "E_CHANGE_TYPE_CREATED\020\001\022$\n STORAGE_NODE_"
    "CHANGE_TYPE_DELETED\020\002\022$\n STORAGE_NODE_CH"
    "ANGE_TYPE_UPDATED\020\003*\377\001\n\016LogoutReason_t\022\035"
    "\n\031LOGOUT_REASON_UNSPECIFIED\020\001\022\035\n\031LOGOUT_"
    "REASON_CCDI_LOGOUT\020\002\022!\n\035LOGOUT_REASON_DE"
    "VICE_UNLINKED\020\003\022!\n\035LOGOUT_REASON_SESSION"
    "_INVALID\020\004\022\035\n\031LOGOUT_REASON_CLEAR_CACHE\020"
    "\005\022\034\n\030LOGOUT_REASON_CCDI_LOGIN\020\006\022,\n(LOGOU"
    "T_REASON_SHARED_CREDENTIALS_REMOVED\020\007*L\n"
    "\013PowerMode_t\022\021\n\rPOWER_NO_SYNC\020\001\022\024\n\020POWER"
    "_FOREGROUND\020\002\022\024\n\020POWER_BACKGROUND\020\003*\213\001\n\022"
    "AsyncUploadState_t\022\033\n\027ASYNC_UPLOAD_STATE"
    "_WAIT\020\001\022\035\n\031ASYNC_UPLOAD_STATE_ACTIVE\020\002\022\033"
    "\n\027ASYNC_UPLOAD_STATE_DONE\020\003\022\034\n\030ASYNC_UPL"
    "OAD_STATE_ERROR\020\004*_\n\026DeviceCredChangeTyp"
    "e_t\022!\n\035DEVICE_CRED_CHANGE_TYPE_WRITE\020\001\022\""
    "\n\036DEVICE_CRED_CHANGE_TYPE_DELETE\020\002*u\n\027De"
    "viceConnectionState_t\022\035\n\031DEVICE_CONNECTI"
    "ON_OFFLINE\020\001\022\034\n\030DEVICE_CONNECTION_ONLINE"
    "\020\002\022\035\n\031DEVICE_CONNECTION_STANDBY\020\003*\345\003\n\017Sy"
    "ncEventType_t\022&\n\"CCD_SYNC_EVENT_NEW_FILE"
    "_DOWNLOADED\020\001\022+\n\'CCD_SYNC_EVENT_MODIFIED"
    "_FILE_DOWNLOADED\020\002\022)\n%CCD_SYNC_EVENT_FIL"
    "E_DELETE_DOWNLOADED\020\003\022+\n\'CCD_SYNC_EVENT_"
    "FOLDER_CREATE_DOWNLOADED\020\004\022+\n\'CCD_SYNC_E"
    "VENT_FOLDER_DELETE_DOWNLOADED\020\005\022$\n CCD_S"
    "YNC_EVENT_NEW_FILE_UPLOADED\020\010\022)\n%CCD_SYN"
    "C_EVENT_MODIFIED_FILE_UPLOADED\020\t\022\'\n#CCD_"
    "SYNC_EVENT_FILE_DELETE_UPLOADED\020\n\022)\n%CCD"
    "_SYNC_EVENT_FOLDER_CREATE_UPLOADED\020\013\022)\n%"
    "CCD_SYNC_EVENT_FOLDER_DELETE_UPLOADED\020\014\022"
    "(\n$CCD_SYNC_EVENT_CONFLICT_FILE_CREATED\020"
    "\017*\354\001\n\017SyncStateType_t\022!\n\035SYNC_STATE_NOT_"
    "IN_SYNC_FOLDER\020\001\022\031\n\025SYNC_STATE_UP_TO_DAT"
    "E\020\002\022\037\n\033SYNC_STATE_NEED_TO_DOWNLOAD\020\004\022\035\n\031"
    "SYNC_STATE_NEED_TO_UPLOAD\020\006\022*\n&SYNC_STAT"
    "E_NEED_TO_UPLOAD_AND_DOWNLOAD\020\007\022\027\n\023SYNC_"
    "STATE_FILTERED\020\010\022\026\n\022SYNC_STATE_UNKNOWN\020\t"
    "*y\n\026FeatureSyncStateType_t\022\035\n\031CCD_FEATUR"
    "E_STATE_IN_SYNC\020\001\022\035\n\031CCD_FEATURE_STATE_S"
    "YNCING\020\002\022!\n\035CCD_FEATURE_STATE_OUT_OF_SYN"
    "C\020\003*\343\001\n\024SyncEventErrorType_t\022*\n&SYNC_EVE"
    "NT_ERROR_INFRA_CONNECTION_LOST\020\001\022,\n(SYNC"
    "_EVENT_ERROR_STORAGE_CONNECTION_LOST\020\002\022)"
    "\n%SYNC_EVENT_ERROR_CANNOT_ACCESS_FOLDER\020"
    "\003\022!\n\035SYNC_EVENT_ERROR_OUT_OF_SPACE\020\004\022#\n\037"
    "SYNC_EVENT_ERROR_QUOTA_EXCEEDED\020\005*\345\001\n\024Sy"
    "ncFileChangeType_t\022\036\n\032SYNC_FILE_CHANGE_L"
    "OCAL_ADD\020\001\022!\n\035SYNC_FILE_CHANGE_LOCAL_REM"
    "OVE\020\002\022!\n\035SYNC_FILE_CHANGE_LOCAL_MODIFY\020\003"
    "\022\037\n\033SYNC_FILE_CHANGE_REMOTE_ADD\020\006\022\"\n\036SYN"
    "C_FILE_CHANGE_REMOTE_REMOVE\020\007\022\"\n\036SYNC_FI"
    "LE_CHANGE_REMOTE_MODIFY\020\010*\222\001\n\022SWUpdateMa"
    "skBits_t\022\036\n\032SW_UPDATE_BIT_APP_OPTIONAL\020\001"
    "\022\036\n\032SW_UPDATE_BIT_APP_CRITICAL\020\002\022\034\n\030SW_U"
    "PDATE_BIT_CCD_NEEDED\020\004\022\036\n\032SW_UPDATE_BIT_"
    "CCD_CRITICAL\020\010*\227\001\n\027SWUpdateDownloadState"
    "_t\022\033\n\027SWU_DLSTATE_IN_PROGRESS\020\001\022\026\n\022SWU_D"
    "LSTATE_FAILED\020\002\022\027\n\023SWU_DLSTATE_STOPPED\020\003"
    "\022\024\n\020SWU_DLSTATE_DONE\020\004\022\030\n\024SWU_DLSTATE_CA"
    "NCELED\020\005*j\n\026DocSaveAndGoChangeType\022\032\n\026DO"
    "C_SAVE_AND_GO_UPDATE\020\001\022\030\n\024DOC_SAVE_AND_G"
    "O_MOVE\020\002\022\032\n\026DOC_SAVE_AND_GO_DELETE\020\003*O\n\030"
    "PicStream_DBFilterType_t\022\030\n\024PICSTREAM_QU"
    "ERY_ITEM\020\001\022\031\n\025PICSTREAM_QUERY_ALBUM\020\0022\355-"
    "\n\013CCDIService\022N\n\021EventsCreateQueue\022\033.ccd"
    ".EventsCreateQueueInput\032\034.ccd.EventsCrea"
    "teQueueOutput\022H\n\022EventsDestroyQueue\022\034.cc"
    "d.EventsDestroyQueueInput\032\024.ccd.NoParamR"
    "esponse\022B\n\rEventsDequeue\022\027.ccd.EventsDeq"
    "ueueInput\032\030.ccd.EventsDequeueOutput\022E\n\016G"
    "etSystemState\022\030.ccd.GetSystemStateInput\032"
    "\031.ccd.GetSystemStateOutput\022*\n\005Login\022\017.cc"
    "d.LoginInput\032\020.ccd.LoginOutput\0220\n\006Logout"
    "\022\020.ccd.LogoutInput\032\024.ccd.NoParamResponse"
    "\022K\n\020InfraHttpRequest\022\032.ccd.InfraHttpRequ"
    "estInput\032\033.ccd.InfraHttpRequestOutput\022E\n"
    "\016UpdateAppState\022\030.ccd.UpdateAppStateInpu"
    "t\032\031.ccd.UpdateAppStateOutput\022N\n\021UpdateSy"
    "stemState\022\033.ccd.UpdateSystemStateInput\032\034"
    ".ccd.UpdateSystemStateOutput\022J\n\023Register"
    "StorageNode\022\035.ccd.RegisterStorageNodeInp"
    "ut\032\024.ccd.NoParamResponse\022N\n\025UnregisterSt"
    "orageNode\022\037.ccd.UnregisterStorageNodeInp"
    "ut\032\024.ccd.NoParamResponse\022F\n\021UpdateStorag"
    "eNode\022\033.ccd.UpdateStorageNodeInput\032\024.ccd"
    ".NoParamResponse\022D\n\020ReportLanDevices\022\032.c"
    "cd.ReportLanDevicesInput\032\024.ccd.NoParamRe"
    "sponse\022E\n\016ListLanDevices\022\030.ccd.ListLanDe"
    "vicesInput\032\031.ccd.ListLanDevicesOutput\022<\n"
    "\017ProbeLanDevices\022\023.ccd.NoParamRequest\032\024."
    "ccd.NoParamResponse\022R\n\027ListStorageNodeDa"
    "tasets\022\023.ccd.NoParamRequest\032\".ccd.ListSt"
    "orageNodeDatasetsOutput\0229\n\nAddDataset\022\024."
    "ccd.AddDatasetInput\032\025.ccd.AddDatasetOutp"
    "ut\022J\n\023AddSyncSubscription\022\035.ccd.AddSyncS"
    "ubscriptionInput\032\024.ccd.NoParamResponse\022>"
    "\n\rDeleteDataset\022\027.ccd.DeleteDatasetInput"
    "\032\024.ccd.NoParamResponse\022R\n\027DeleteSyncSubs"
    "criptions\022!.ccd.DeleteSyncSubscriptionsI"
    "nput\032\024.ccd.NoParamResponse\022i\n\032GetDataset"
    "DirectoryEntries\022$.ccd.GetDatasetDirecto"
    "ryEntriesInput\032%.ccd.GetDatasetDirectory"
    "EntriesOutput\022K\n\020GetInfraHttpInfo\022\032.ccd."
    "GetInfraHttpInfoInput\032\033.ccd.GetInfraHttp"
    "InfoOutput\022K\n\020GetLocalHttpInfo\022\032.ccd.Get"
    "LocalHttpInfoInput\032\033.ccd.GetLocalHttpInf"
    "oOutput\022Z\n\025GetPersonalCloudState\022\037.ccd.G"
    "etPersonalCloudStateInput\032 .ccd.GetPerso"
    "nalCloudStateOutput\022\?\n\014GetSyncState\022\026.cc"
    "d.GetSyncStateInput\032\027.ccd.GetSyncStateOu"
    "tput\022f\n\031GetSyncStateNotifications\022#.ccd."
    "GetSyncStateNotificationsInput\032$.ccd.Get"
    "SyncStateNotificationsOutput\0228\n\nLinkDevi"
    "ce\022\024.ccd.LinkDeviceInput\032\024.ccd.NoParamRe"
    "sponse\022N\n\021ListLinkedDevices\022\033.ccd.ListLi"
    "nkedDevicesInput\032\034.ccd.ListLinkedDevices"
    "Output\022N\n\021ListOwnedDatasets\022\033.ccd.ListOw"
    "nedDatasetsInput\032\034.ccd.ListOwnedDatasets"
    "Output\022Z\n\025ListSyncSubscriptions\022\037.ccd.Li"
    "stSyncSubscriptionsInput\032 .ccd.ListSyncS"
    "ubscriptionsOutput\022:\n\rOwnershipSync\022\023.cc"
    "d.NoParamRequest\032\024.ccd.NoParamResponse\022L"
    "\n\024PrivateMsaDataCommit\022\036.ccd.PrivateMsaD"
    "ataCommitInput\032\024.ccd.NoParamResponse\022<\n\014"
    "RemoteWakeup\022\026.ccd.RemoteWakeupInput\032\024.c"
    "cd.NoParamResponse\022>\n\rRenameDataset\022\027.cc"
    "d.RenameDatasetInput\032\024.ccd.NoParamRespon"
    "se\0223\n\010SyncOnce\022\022.ccd.SyncOnceInput\032\023.ccd"
    ".SyncOnceOutput\022<\n\014UnlinkDevice\022\026.ccd.Un"
    "linkDeviceInput\032\024.ccd.NoParamResponse\022Q\n"
    "\022UpdateSyncSettings\022\034.ccd.UpdateSyncSett"
    "ingsInput\032\035.ccd.UpdateSyncSettingsOutput"
    "\022P\n\026UpdateSyncSubscription\022 .ccd.UpdateS"
    "yncSubscriptionInput\032\024.ccd.NoParamRespon"
    "se\022H\n\017ListUserStorage\022\031.ccd.ListUserStor"
    "ageInput\032\032.ccd.ListUserStorageOutput\022N\n\025"
    "RemoteSwUpdateMessage\022\037.ccd.RemoteSwUpda"
    "teMessageInput\032\024.ccd.NoParamResponse\022B\n\r"
    "SWUpdateCheck\022\027.ccd.SWUpdateCheckInput\032\030"
    ".ccd.SWUpdateCheckOutput\022Z\n\025SWUpdateBegi"
    "nDownload\022\037.ccd.SWUpdateBeginDownloadInp"
    "ut\032 .ccd.SWUpdateBeginDownloadOutput\022l\n\033"
    "SWUpdateGetDownloadProgress\022%.ccd.SWUpda"
    "teGetDownloadProgressInput\032&.ccd.SWUpdat"
    "eGetDownloadProgressOutput\022J\n\023SWUpdateEn"
    "dDownload\022\035.ccd.SWUpdateEndDownloadInput"
    "\032\024.ccd.NoParamResponse\022P\n\026SWUpdateCancel"
    "Download\022 .ccd.SWUpdateCancelDownloadInp"
    "ut\032\024.ccd.NoParamResponse\022N\n\025SWUpdateSetC"
    "cdVersion\022\037.ccd.SWUpdateSetCcdVersionInp"
    "ut\032\024.ccd.NoParamResponse\022\?\n\017MSABeginCata"
    "log\022\026.ccd.BeginCatalogInput\032\024.ccd.NoPara"
    "mResponse\022A\n\020MSACommitCatalog\022\027.ccd.Comm"
    "itCatalogInput\032\024.ccd.NoParamResponse\022;\n\r"
    "MSAEndCatalog\022\024.ccd.EndCatalogInput\032\024.cc"
    "d.NoParamResponse\022W\n\033MSABeginMetadataTra"
    "nsaction\022\".ccd.BeginMetadataTransactionI"
    "nput\032\024.ccd.NoParamResponse\022C\n\021MSAUpdateM"
    "etadata\022\030.ccd.UpdateMetadataInput\032\024.ccd."
    "NoParamResponse\022C\n\021MSADeleteMetadata\022\030.c"
    "cd.DeleteMetadataInput\032\024.ccd.NoParamResp"
    "onse\022I\n\034MSACommitMetadataTransaction\022\023.c"
    "cd.NoParamRequest\032\024.ccd.NoParamResponse\022"
    "Z\n\027MSAGetMetadataSyncState\022\023.ccd.NoParam"
    "Request\032*.media_metadata.GetMetadataSync"
    "StateOutput\022G\n\023MSADeleteCollection\022\032.ccd"
    ".DeleteCollectionInput\032\024.ccd.NoParamResp"
    "onse\022A\n\020MSADeleteCatalog\022\027.ccd.DeleteCat"
    "alogInput\032\024.ccd.NoParamResponse\022P\n\022MSALi"
    "stCollections\022\023.ccd.NoParamRequest\032%.med"
    "ia_metadata.ListCollectionsOutput\022Z\n\027MSA"
    "GetCollectionDetails\022\036.ccd.GetCollection"
    "DetailsInput\032\037.ccd.GetCollectionDetailsO"
    "utput\022K\n\020MSAGetContentURL\022\032.ccd.MSAGetCo"
    "ntentURLInput\032\033.ccd.MSAGetContentURLOutp"
    "ut\022`\n\027MCAQueryMetadataObjects\022!.ccd.MCAQ"
    "ueryMetadataObjectsInput\032\".ccd.MCAQueryM"
    "etadataObjectsOutput\022B\n\025EnableInMemoryLo"
    "gging\022\023.ccd.NoParamRequest\032\024.ccd.NoParam"
    "Response\022C\n\026DisableInMemoryLogging\022\023.ccd"
    ".NoParamRequest\032\024.ccd.NoParamResponse\022>\n"
    "\021FlushInMemoryLogs\022\023.ccd.NoParamRequest\032"
    "\024.ccd.NoParamResponse\022R\n\027RespondToPairin"
    "gRequest\022!.ccd.RespondToPairingRequestIn"
    "put\032\024.ccd.NoParamResponse\022E\n\016RequestPair"
    "ing\022\030.ccd.RequestPairingInput\032\031.ccd.Requ"
    "estPairingOutput\022N\n\021RequestPairingPin\022\033."
    "ccd.RequestPairingPinInput\032\034.ccd.Request"
    "PairingPinOutput\022K\n\020GetPairingStatus\022\032.c"
    "cd.GetPairingStatusInput\032\033.ccd.GetPairin"
    "gStatusOutput\022b\n\025QueryPicStreamObjects\022#"
    ".ccd.CCDIQueryPicStreamObjectsInput\032$.cc"
    "d.CCDIQueryPicStreamObjectsOutput\022W\n\024Sha"
    "redFilesStoreFile\022\036.ccd.SharedFilesStore"
    "FileInput\032\037.ccd.SharedFilesStoreFileOutp"
    "ut\022L\n\024SharedFilesShareFile\022\036.ccd.SharedF"
    "ilesShareFileInput\032\024.ccd.NoParamResponse"
    "\022P\n\026SharedFilesUnshareFile\022 .ccd.SharedF"
    "ilesUnshareFileInput\032\024.ccd.NoParamRespon"
    "se\022Z\n\033SharedFilesDeleteSharedFile\022%.ccd."
    "SharedFilesDeleteSharedFileInput\032\024.ccd.N"
    "oParamResponse\022K\n\020SharedFilesQuery\022\032.ccd"
    ".SharedFilesQueryInput\032\033.ccd.SharedFiles"
    "QueryOutput\022T\n\030RegisterRemoteExecutable\022"
    "\".ccd.RegisterRemoteExecutableInput\032\024.cc"
    "d.NoParamResponse\022X\n\032UnregisterRemoteExe"
    "cutable\022$.ccd.UnregisterRemoteExecutable"
    "Input\032\024.ccd.NoParamResponse\022x\n\037ListRegis"
    "teredRemoteExecutables\022).ccd.ListRegiste"
    "redRemoteExecutablesInput\032*.ccd.ListRegi"
    "steredRemoteExecutablesOutputB!\n\rigware."
    "gvm.pbB\007CcdiRpc\200\001\000\210\001\000\220\001\000", 36504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ccdi_rpc.proto", &protobuf_RegisterTypes);
  NoParamRequest::default_instance_ = new NoParamRequest();
  PlayerIndexRequest::default_instance_ = new PlayerIndexRequest();
  UserIdRequest::default_instance_ = new UserIdRequest();
  NoParamResponse::default_instance_ = new NoParamResponse();
  CurrentPlayer::default_instance_ = new CurrentPlayer();
  CurrentPlayers::default_instance_ = new CurrentPlayers();
  DiskInfo::default_instance_ = new DiskInfo();
  NetworkInfo::default_instance_ = new NetworkInfo();
  IoacAdapterWarnings::default_instance_ = new IoacAdapterWarnings();
  IoacAdapterStatus::default_instance_ = new IoacAdapterStatus();
  IoacOverallStatus::default_instance_ = new IoacOverallStatus();
  GetSystemStateInput::default_instance_ = new GetSystemStateInput();
  PowerStatus::default_instance_ = new PowerStatus();
  CurrentUser::default_instance_ = new CurrentUser();
  LoggedOutUser::default_instance_ = new LoggedOutUser();
  GetSystemStateOutput::default_instance_ = new GetSystemStateOutput();
  LoginInput::default_instance_ = new LoginInput();
  LoginOutput::default_instance_ = new LoginOutput();
  LogoutInput::default_instance_ = new LogoutInput();
  InfraHttpRequestInput::default_instance_ = new InfraHttpRequestInput();
  InfraHttpRequestOutput::default_instance_ = new InfraHttpRequestOutput();
  RegisterStorageNodeInput::default_instance_ = new RegisterStorageNodeInput();
  UnregisterStorageNodeInput::default_instance_ = new UnregisterStorageNodeInput();
  RemoteFileAccessControlDirSpec::default_instance_ = new RemoteFileAccessControlDirSpec();
  RemoteFileAccessControlDirs::default_instance_ = new RemoteFileAccessControlDirs();
  UpdateStorageNodeInput::default_instance_ = new UpdateStorageNodeInput();
  LanDeviceRouteInfo::default_instance_ = new LanDeviceRouteInfo();
  LanDeviceInfo::default_instance_ = new LanDeviceInfo();
  ReportLanDevicesInput::default_instance_ = new ReportLanDevicesInput();
  ListLanDevicesInput::default_instance_ = new ListLanDevicesInput();
  ListLanDevicesOutput::default_instance_ = new ListLanDevicesOutput();
  DatasetItem::default_instance_ = new DatasetItem();
  ListStorageNodeDatasetsOutput::default_instance_ = new ListStorageNodeDatasetsOutput();
  TrusteeItem::default_instance_ = new TrusteeItem();
  CCDWin32StartParams::default_instance_ = new CCDWin32StartParams();
  AddDatasetInput::default_instance_ = new AddDatasetInput();
  AddDatasetOutput::default_instance_ = new AddDatasetOutput();
  AddSyncSubscriptionInput::default_instance_ = new AddSyncSubscriptionInput();
  DeleteDatasetInput::default_instance_ = new DeleteDatasetInput();
  DeleteSyncSubscriptionsInput::default_instance_ = new DeleteSyncSubscriptionsInput();
  EventsCreateQueueInput::default_instance_ = new EventsCreateQueueInput();
  EventsCreateQueueOutput::default_instance_ = new EventsCreateQueueOutput();
  EventsDestroyQueueInput::default_instance_ = new EventsDestroyQueueInput();
  EventsDequeueInput::default_instance_ = new EventsDequeueInput();
  EventSyncFeatureStatusChange::default_instance_ = new EventSyncFeatureStatusChange();
  EventDeviceInfoChange::default_instance_ = new EventDeviceInfoChange();
  EventDeviceConnectionChange::default_instance_ = new EventDeviceConnectionChange();
  EventDatasetContentChange::default_instance_ = new EventDatasetContentChange();
  EventDatasetChange::default_instance_ = new EventDatasetChange();
  PairingRequestAttribute::default_instance_ = new PairingRequestAttribute();
  EventPairingRequest::default_instance_ = new EventPairingRequest();
  EventStorageNodeChange::default_instance_ = new EventStorageNodeChange();
  EventUserLogin::default_instance_ = new EventUserLogin();
  EventUserLogout::default_instance_ = new EventUserLogout();
  EventDocSaveAndGoCompletion::default_instance_ = new EventDocSaveAndGoCompletion();
  EventDocSaveAndGoEngineStateChange::default_instance_ = new EventDocSaveAndGoEngineStateChange();
  EventSWUpdateProgress::default_instance_ = new EventSWUpdateProgress();
  EventIoacStatusChange::default_instance_ = new EventIoacStatusChange();
  EventLanDevicesChange::default_instance_ = new EventLanDevicesChange();
  EventLanDevicesProbeRequest::default_instance_ = new EventLanDevicesProbeRequest();
  EventPowerModeChange::default_instance_ = new EventPowerModeChange();
  EventRemoteSwUpdateMessage::default_instance_ = new EventRemoteSwUpdateMessage();
  EventAsyncUploadCompletion::default_instance_ = new EventAsyncUploadCompletion();
  EventSyncBackCompletion::default_instance_ = new EventSyncBackCompletion();
  EventPicStreamDBUpdateComplete::default_instance_ = new EventPicStreamDBUpdateComplete();
  EventPicStreamStorageConservation::default_instance_ = new EventPicStreamStorageConservation();
  EventDeviceCredentialsChange::default_instance_ = new EventDeviceCredentialsChange();
  EventUserCredentialsChange::default_instance_ = new EventUserCredentialsChange();
  CcdiEvent::default_instance_ = new CcdiEvent();
  EventsDequeueOutput::default_instance_ = new EventsDequeueOutput();
  GetDatasetDirectoryEntriesInput::default_instance_ = new GetDatasetDirectoryEntriesInput();
  DatasetDirectoryEntry::default_instance_ = new DatasetDirectoryEntry();
  GetDatasetDirectoryEntriesOutput::default_instance_ = new GetDatasetDirectoryEntriesOutput();
  GetInfraHttpInfoInput::default_instance_ = new GetInfraHttpInfoInput();
  GetInfraHttpInfoOutput::default_instance_ = new GetInfraHttpInfoOutput();
  GetLocalHttpInfoInput::default_instance_ = new GetLocalHttpInfoInput();
  GetLocalHttpInfoOutput::default_instance_ = new GetLocalHttpInfoOutput();
  GetPersonalCloudStateInput::default_instance_ = new GetPersonalCloudStateInput();
  DeviceConnectionStatus::default_instance_ = new DeviceConnectionStatus();
  StorageNodeInfo::default_instance_ = new StorageNodeInfo();
  GetPersonalCloudStateOutput::default_instance_ = new GetPersonalCloudStateOutput();
  LookupAbsPathInput::default_instance_ = new LookupAbsPathInput();
  EventSyncHistory::default_instance_ = new EventSyncHistory();
  GetSyncStateInput::default_instance_ = new GetSyncStateInput();
  ObjectSyncState::default_instance_ = new ObjectSyncState();
  DatasetSyncStateSummary::default_instance_ = new DatasetSyncStateSummary();
  FeatureSyncStateSummary::default_instance_ = new FeatureSyncStateSummary();
  MediaMetadataThumbMigrateStatus::default_instance_ = new MediaMetadataThumbMigrateStatus();
  SyncFeatureSettings::default_instance_ = new SyncFeatureSettings();
  LookupAbsPathOutput::default_instance_ = new LookupAbsPathOutput();
  GetSyncStateOutput::default_instance_ = new GetSyncStateOutput();
  GetSyncStateNotificationsInput::default_instance_ = new GetSyncStateNotificationsInput();
  SyncEventSyncComplete::default_instance_ = new SyncEventSyncComplete();
  SyncEventFileAdded::default_instance_ = new SyncEventFileAdded();
  SyncEventFileRemoved::default_instance_ = new SyncEventFileRemoved();
  SyncEventError::default_instance_ = new SyncEventError();
  SyncEventFileStatus::default_instance_ = new SyncEventFileStatus();
  SyncStateNotification::default_instance_ = new SyncStateNotification();
  GetSyncStateNotificationsOutput::default_instance_ = new GetSyncStateNotificationsOutput();
  LinkDeviceInput::default_instance_ = new LinkDeviceInput();
  ListLinkedDevicesInput::default_instance_ = new ListLinkedDevicesInput();
  LinkedDeviceInfo::default_instance_ = new LinkedDeviceInfo();
  ListLinkedDevicesOutput::default_instance_ = new ListLinkedDevicesOutput();
  ListOwnedDatasetsInput::default_instance_ = new ListOwnedDatasetsInput();
  ListOwnedDatasetsOutput::default_instance_ = new ListOwnedDatasetsOutput();
  ListUserStorageInput::default_instance_ = new ListUserStorageInput();
  ListUserStorageOutput::default_instance_ = new ListUserStorageOutput();
  ListSyncSubscriptionsInput::default_instance_ = new ListSyncSubscriptionsInput();
  SyncSubscriptionDetail::default_instance_ = new SyncSubscriptionDetail();
  ListSyncSubscriptionsOutput::default_instance_ = new ListSyncSubscriptionsOutput();
  RemoteWakeupInput::default_instance_ = new RemoteWakeupInput();
  RemoteSwUpdateMessageInput::default_instance_ = new RemoteSwUpdateMessageInput();
  RenameDatasetInput::default_instance_ = new RenameDatasetInput();
  PrivateMsaDataCommitInput::default_instance_ = new PrivateMsaDataCommitInput();
  SyncOnceInput::default_instance_ = new SyncOnceInput();
  SyncOnceOutput::default_instance_ = new SyncOnceOutput();
  UnlinkDeviceInput::default_instance_ = new UnlinkDeviceInput();
  UpdateAppStateInput::default_instance_ = new UpdateAppStateInput();
  UpdateAppStateOutput::default_instance_ = new UpdateAppStateOutput();
  CameraRollDownloadDirSpec::default_instance_ = new CameraRollDownloadDirSpec();
  MediaMetadataThumbMigrate::default_instance_ = new MediaMetadataThumbMigrate();
  SyncFeatureSettingsRequest::default_instance_ = new SyncFeatureSettingsRequest();
  UpdateSyncSettingsInput::default_instance_ = new UpdateSyncSettingsInput();
  UpdateSyncSettingsOutput::default_instance_ = new UpdateSyncSettingsOutput();
  UpdateSyncSubscriptionInput::default_instance_ = new UpdateSyncSubscriptionInput();
  SWUpdateCheckInput::default_instance_ = new SWUpdateCheckInput();
  SWUpdateCheckOutput::default_instance_ = new SWUpdateCheckOutput();
  SWUpdateBeginDownloadInput::default_instance_ = new SWUpdateBeginDownloadInput();
  SWUpdateBeginDownloadOutput::default_instance_ = new SWUpdateBeginDownloadOutput();
  SWUpdateGetDownloadProgressInput::default_instance_ = new SWUpdateGetDownloadProgressInput();
  SWUpdateGetDownloadProgressOutput::default_instance_ = new SWUpdateGetDownloadProgressOutput();
  SWUpdateEndDownloadInput::default_instance_ = new SWUpdateEndDownloadInput();
  SWUpdateCancelDownloadInput::default_instance_ = new SWUpdateCancelDownloadInput();
  SWUpdateSetCcdVersionInput::default_instance_ = new SWUpdateSetCcdVersionInput();
  UpdateSystemStateInput::default_instance_ = new UpdateSystemStateInput();
  UpdateSystemStateOutput::default_instance_ = new UpdateSystemStateOutput();
  BeginMetadataTransactionInput::default_instance_ = new BeginMetadataTransactionInput();
  UpdateMetadataInput::default_instance_ = new UpdateMetadataInput();
  DeleteMetadataInput::default_instance_ = new DeleteMetadataInput();
  DeleteCollectionInput::default_instance_ = new DeleteCollectionInput();
  GetCollectionDetailsInput::default_instance_ = new GetCollectionDetailsInput();
  GetCollectionDetailsOutput::default_instance_ = new GetCollectionDetailsOutput();
  BeginCatalogInput::default_instance_ = new BeginCatalogInput();
  CommitCatalogInput::default_instance_ = new CommitCatalogInput();
  EndCatalogInput::default_instance_ = new EndCatalogInput();
  DeleteCatalogInput::default_instance_ = new DeleteCatalogInput();
  MSAGetContentURLInput::default_instance_ = new MSAGetContentURLInput();
  MSAGetContentURLOutput::default_instance_ = new MSAGetContentURLOutput();
  MCAQueryMetadataObjectsInput::default_instance_ = new MCAQueryMetadataObjectsInput();
  MCAQueryMetadataObjectsOutput::default_instance_ = new MCAQueryMetadataObjectsOutput();
  RequestPairingInput::default_instance_ = new RequestPairingInput();
  RequestPairingOutput::default_instance_ = new RequestPairingOutput();
  RespondToPairingRequestInput::default_instance_ = new RespondToPairingRequestInput();
  RequestPairingPinInput::default_instance_ = new RequestPairingPinInput();
  RequestPairingPinOutput::default_instance_ = new RequestPairingPinOutput();
  GetPairingStatusInput::default_instance_ = new GetPairingStatusInput();
  GetPairingStatusOutput::default_instance_ = new GetPairingStatusOutput();
  CCDIQueryPicStreamObjectsInput::default_instance_ = new CCDIQueryPicStreamObjectsInput();
  CCDIQueryPicStreamObjectsOutput::default_instance_ = new CCDIQueryPicStreamObjectsOutput();
  PicStreamQueryObject::default_instance_ = new PicStreamQueryObject();
  PicStreamContentDirectoryObject::default_instance_ = new PicStreamContentDirectoryObject();
  PicStreamItemFields::default_instance_ = new PicStreamItemFields();
  PicStreamAlbumFields::default_instance_ = new PicStreamAlbumFields();
  SharedFilesStoreFileInput::default_instance_ = new SharedFilesStoreFileInput();
  SharedFilesStoreFileOutput::default_instance_ = new SharedFilesStoreFileOutput();
  SharedFilesShareFileInput::default_instance_ = new SharedFilesShareFileInput();
  SharedFilesUnshareFileInput::default_instance_ = new SharedFilesUnshareFileInput();
  SharedFilesDeleteSharedFileInput::default_instance_ = new SharedFilesDeleteSharedFileInput();
  SharedFilesQueryInput::default_instance_ = new SharedFilesQueryInput();
  SharedFilesQueryObject::default_instance_ = new SharedFilesQueryObject();
  SharedFilesQueryOutput::default_instance_ = new SharedFilesQueryOutput();
  RemoteExecutableInfo::default_instance_ = new RemoteExecutableInfo();
  RegisterRemoteExecutableInput::default_instance_ = new RegisterRemoteExecutableInput();
  UnregisterRemoteExecutableInput::default_instance_ = new UnregisterRemoteExecutableInput();
  ListRegisteredRemoteExecutablesInput::default_instance_ = new ListRegisteredRemoteExecutablesInput();
  ListRegisteredRemoteExecutablesOutput::default_instance_ = new ListRegisteredRemoteExecutablesOutput();
  NoParamRequest::default_instance_->InitAsDefaultInstance();
  PlayerIndexRequest::default_instance_->InitAsDefaultInstance();
  UserIdRequest::default_instance_->InitAsDefaultInstance();
  NoParamResponse::default_instance_->InitAsDefaultInstance();
  CurrentPlayer::default_instance_->InitAsDefaultInstance();
  CurrentPlayers::default_instance_->InitAsDefaultInstance();
  DiskInfo::default_instance_->InitAsDefaultInstance();
  NetworkInfo::default_instance_->InitAsDefaultInstance();
  IoacAdapterWarnings::default_instance_->InitAsDefaultInstance();
  IoacAdapterStatus::default_instance_->InitAsDefaultInstance();
  IoacOverallStatus::default_instance_->InitAsDefaultInstance();
  GetSystemStateInput::default_instance_->InitAsDefaultInstance();
  PowerStatus::default_instance_->InitAsDefaultInstance();
  CurrentUser::default_instance_->InitAsDefaultInstance();
  LoggedOutUser::default_instance_->InitAsDefaultInstance();
  GetSystemStateOutput::default_instance_->InitAsDefaultInstance();
  LoginInput::default_instance_->InitAsDefaultInstance();
  LoginOutput::default_instance_->InitAsDefaultInstance();
  LogoutInput::default_instance_->InitAsDefaultInstance();
  InfraHttpRequestInput::default_instance_->InitAsDefaultInstance();
  InfraHttpRequestOutput::default_instance_->InitAsDefaultInstance();
  RegisterStorageNodeInput::default_instance_->InitAsDefaultInstance();
  UnregisterStorageNodeInput::default_instance_->InitAsDefaultInstance();
  RemoteFileAccessControlDirSpec::default_instance_->InitAsDefaultInstance();
  RemoteFileAccessControlDirs::default_instance_->InitAsDefaultInstance();
  UpdateStorageNodeInput::default_instance_->InitAsDefaultInstance();
  LanDeviceRouteInfo::default_instance_->InitAsDefaultInstance();
  LanDeviceInfo::default_instance_->InitAsDefaultInstance();
  ReportLanDevicesInput::default_instance_->InitAsDefaultInstance();
  ListLanDevicesInput::default_instance_->InitAsDefaultInstance();
  ListLanDevicesOutput::default_instance_->InitAsDefaultInstance();
  DatasetItem::default_instance_->InitAsDefaultInstance();
  ListStorageNodeDatasetsOutput::default_instance_->InitAsDefaultInstance();
  TrusteeItem::default_instance_->InitAsDefaultInstance();
  CCDWin32StartParams::default_instance_->InitAsDefaultInstance();
  AddDatasetInput::default_instance_->InitAsDefaultInstance();
  AddDatasetOutput::default_instance_->InitAsDefaultInstance();
  AddSyncSubscriptionInput::default_instance_->InitAsDefaultInstance();
  DeleteDatasetInput::default_instance_->InitAsDefaultInstance();
  DeleteSyncSubscriptionsInput::default_instance_->InitAsDefaultInstance();
  EventsCreateQueueInput::default_instance_->InitAsDefaultInstance();
  EventsCreateQueueOutput::default_instance_->InitAsDefaultInstance();
  EventsDestroyQueueInput::default_instance_->InitAsDefaultInstance();
  EventsDequeueInput::default_instance_->InitAsDefaultInstance();
  EventSyncFeatureStatusChange::default_instance_->InitAsDefaultInstance();
  EventDeviceInfoChange::default_instance_->InitAsDefaultInstance();
  EventDeviceConnectionChange::default_instance_->InitAsDefaultInstance();
  EventDatasetContentChange::default_instance_->InitAsDefaultInstance();
  EventDatasetChange::default_instance_->InitAsDefaultInstance();
  PairingRequestAttribute::default_instance_->InitAsDefaultInstance();
  EventPairingRequest::default_instance_->InitAsDefaultInstance();
  EventStorageNodeChange::default_instance_->InitAsDefaultInstance();
  EventUserLogin::default_instance_->InitAsDefaultInstance();
  EventUserLogout::default_instance_->InitAsDefaultInstance();
  EventDocSaveAndGoCompletion::default_instance_->InitAsDefaultInstance();
  EventDocSaveAndGoEngineStateChange::default_instance_->InitAsDefaultInstance();
  EventSWUpdateProgress::default_instance_->InitAsDefaultInstance();
  EventIoacStatusChange::default_instance_->InitAsDefaultInstance();
  EventLanDevicesChange::default_instance_->InitAsDefaultInstance();
  EventLanDevicesProbeRequest::default_instance_->InitAsDefaultInstance();
  EventPowerModeChange::default_instance_->InitAsDefaultInstance();
  EventRemoteSwUpdateMessage::default_instance_->InitAsDefaultInstance();
  EventAsyncUploadCompletion::default_instance_->InitAsDefaultInstance();
  EventSyncBackCompletion::default_instance_->InitAsDefaultInstance();
  EventPicStreamDBUpdateComplete::default_instance_->InitAsDefaultInstance();
  EventPicStreamStorageConservation::default_instance_->InitAsDefaultInstance();
  EventDeviceCredentialsChange::default_instance_->InitAsDefaultInstance();
  EventUserCredentialsChange::default_instance_->InitAsDefaultInstance();
  CcdiEvent::default_instance_->InitAsDefaultInstance();
  EventsDequeueOutput::default_instance_->InitAsDefaultInstance();
  GetDatasetDirectoryEntriesInput::default_instance_->InitAsDefaultInstance();
  DatasetDirectoryEntry::default_instance_->InitAsDefaultInstance();
  GetDatasetDirectoryEntriesOutput::default_instance_->InitAsDefaultInstance();
  GetInfraHttpInfoInput::default_instance_->InitAsDefaultInstance();
  GetInfraHttpInfoOutput::default_instance_->InitAsDefaultInstance();
  GetLocalHttpInfoInput::default_instance_->InitAsDefaultInstance();
  GetLocalHttpInfoOutput::default_instance_->InitAsDefaultInstance();
  GetPersonalCloudStateInput::default_instance_->InitAsDefaultInstance();
  DeviceConnectionStatus::default_instance_->InitAsDefaultInstance();
  StorageNodeInfo::default_instance_->InitAsDefaultInstance();
  GetPersonalCloudStateOutput::default_instance_->InitAsDefaultInstance();
  LookupAbsPathInput::default_instance_->InitAsDefaultInstance();
  EventSyncHistory::default_instance_->InitAsDefaultInstance();
  GetSyncStateInput::default_instance_->InitAsDefaultInstance();
  ObjectSyncState::default_instance_->InitAsDefaultInstance();
  DatasetSyncStateSummary::default_instance_->InitAsDefaultInstance();
  FeatureSyncStateSummary::default_instance_->InitAsDefaultInstance();
  MediaMetadataThumbMigrateStatus::default_instance_->InitAsDefaultInstance();
  SyncFeatureSettings::default_instance_->InitAsDefaultInstance();
  LookupAbsPathOutput::default_instance_->InitAsDefaultInstance();
  GetSyncStateOutput::default_instance_->InitAsDefaultInstance();
  GetSyncStateNotificationsInput::default_instance_->InitAsDefaultInstance();
  SyncEventSyncComplete::default_instance_->InitAsDefaultInstance();
  SyncEventFileAdded::default_instance_->InitAsDefaultInstance();
  SyncEventFileRemoved::default_instance_->InitAsDefaultInstance();
  SyncEventError::default_instance_->InitAsDefaultInstance();
  SyncEventFileStatus::default_instance_->InitAsDefaultInstance();
  SyncStateNotification::default_instance_->InitAsDefaultInstance();
  GetSyncStateNotificationsOutput::default_instance_->InitAsDefaultInstance();
  LinkDeviceInput::default_instance_->InitAsDefaultInstance();
  ListLinkedDevicesInput::default_instance_->InitAsDefaultInstance();
  LinkedDeviceInfo::default_instance_->InitAsDefaultInstance();
  ListLinkedDevicesOutput::default_instance_->InitAsDefaultInstance();
  ListOwnedDatasetsInput::default_instance_->InitAsDefaultInstance();
  ListOwnedDatasetsOutput::default_instance_->InitAsDefaultInstance();
  ListUserStorageInput::default_instance_->InitAsDefaultInstance();
  ListUserStorageOutput::default_instance_->InitAsDefaultInstance();
  ListSyncSubscriptionsInput::default_instance_->InitAsDefaultInstance();
  SyncSubscriptionDetail::default_instance_->InitAsDefaultInstance();
  ListSyncSubscriptionsOutput::default_instance_->InitAsDefaultInstance();
  RemoteWakeupInput::default_instance_->InitAsDefaultInstance();
  RemoteSwUpdateMessageInput::default_instance_->InitAsDefaultInstance();
  RenameDatasetInput::default_instance_->InitAsDefaultInstance();
  PrivateMsaDataCommitInput::default_instance_->InitAsDefaultInstance();
  SyncOnceInput::default_instance_->InitAsDefaultInstance();
  SyncOnceOutput::default_instance_->InitAsDefaultInstance();
  UnlinkDeviceInput::default_instance_->InitAsDefaultInstance();
  UpdateAppStateInput::default_instance_->InitAsDefaultInstance();
  UpdateAppStateOutput::default_instance_->InitAsDefaultInstance();
  CameraRollDownloadDirSpec::default_instance_->InitAsDefaultInstance();
  MediaMetadataThumbMigrate::default_instance_->InitAsDefaultInstance();
  SyncFeatureSettingsRequest::default_instance_->InitAsDefaultInstance();
  UpdateSyncSettingsInput::default_instance_->InitAsDefaultInstance();
  UpdateSyncSettingsOutput::default_instance_->InitAsDefaultInstance();
  UpdateSyncSubscriptionInput::default_instance_->InitAsDefaultInstance();
  SWUpdateCheckInput::default_instance_->InitAsDefaultInstance();
  SWUpdateCheckOutput::default_instance_->InitAsDefaultInstance();
  SWUpdateBeginDownloadInput::default_instance_->InitAsDefaultInstance();
  SWUpdateBeginDownloadOutput::default_instance_->InitAsDefaultInstance();
  SWUpdateGetDownloadProgressInput::default_instance_->InitAsDefaultInstance();
  SWUpdateGetDownloadProgressOutput::default_instance_->InitAsDefaultInstance();
  SWUpdateEndDownloadInput::default_instance_->InitAsDefaultInstance();
  SWUpdateCancelDownloadInput::default_instance_->InitAsDefaultInstance();
  SWUpdateSetCcdVersionInput::default_instance_->InitAsDefaultInstance();
  UpdateSystemStateInput::default_instance_->InitAsDefaultInstance();
  UpdateSystemStateOutput::default_instance_->InitAsDefaultInstance();
  BeginMetadataTransactionInput::default_instance_->InitAsDefaultInstance();
  UpdateMetadataInput::default_instance_->InitAsDefaultInstance();
  DeleteMetadataInput::default_instance_->InitAsDefaultInstance();
  DeleteCollectionInput::default_instance_->InitAsDefaultInstance();
  GetCollectionDetailsInput::default_instance_->InitAsDefaultInstance();
  GetCollectionDetailsOutput::default_instance_->InitAsDefaultInstance();
  BeginCatalogInput::default_instance_->InitAsDefaultInstance();
  CommitCatalogInput::default_instance_->InitAsDefaultInstance();
  EndCatalogInput::default_instance_->InitAsDefaultInstance();
  DeleteCatalogInput::default_instance_->InitAsDefaultInstance();
  MSAGetContentURLInput::default_instance_->InitAsDefaultInstance();
  MSAGetContentURLOutput::default_instance_->InitAsDefaultInstance();
  MCAQueryMetadataObjectsInput::default_instance_->InitAsDefaultInstance();
  MCAQueryMetadataObjectsOutput::default_instance_->InitAsDefaultInstance();
  RequestPairingInput::default_instance_->InitAsDefaultInstance();
  RequestPairingOutput::default_instance_->InitAsDefaultInstance();
  RespondToPairingRequestInput::default_instance_->InitAsDefaultInstance();
  RequestPairingPinInput::default_instance_->InitAsDefaultInstance();
  RequestPairingPinOutput::default_instance_->InitAsDefaultInstance();
  GetPairingStatusInput::default_instance_->InitAsDefaultInstance();
  GetPairingStatusOutput::default_instance_->InitAsDefaultInstance();
  CCDIQueryPicStreamObjectsInput::default_instance_->InitAsDefaultInstance();
  CCDIQueryPicStreamObjectsOutput::default_instance_->InitAsDefaultInstance();
  PicStreamQueryObject::default_instance_->InitAsDefaultInstance();
  PicStreamContentDirectoryObject::default_instance_->InitAsDefaultInstance();
  PicStreamItemFields::default_instance_->InitAsDefaultInstance();
  PicStreamAlbumFields::default_instance_->InitAsDefaultInstance();
  SharedFilesStoreFileInput::default_instance_->InitAsDefaultInstance();
  SharedFilesStoreFileOutput::default_instance_->InitAsDefaultInstance();
  SharedFilesShareFileInput::default_instance_->InitAsDefaultInstance();
  SharedFilesUnshareFileInput::default_instance_->InitAsDefaultInstance();
  SharedFilesDeleteSharedFileInput::default_instance_->InitAsDefaultInstance();
  SharedFilesQueryInput::default_instance_->InitAsDefaultInstance();
  SharedFilesQueryObject::default_instance_->InitAsDefaultInstance();
  SharedFilesQueryOutput::default_instance_->InitAsDefaultInstance();
  RemoteExecutableInfo::default_instance_->InitAsDefaultInstance();
  RegisterRemoteExecutableInput::default_instance_->InitAsDefaultInstance();
  UnregisterRemoteExecutableInput::default_instance_->InitAsDefaultInstance();
  ListRegisteredRemoteExecutablesInput::default_instance_->InitAsDefaultInstance();
  ListRegisteredRemoteExecutablesOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ccdi_5frpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ccdi_5frpc_2eproto {
  StaticDescriptorInitializer_ccdi_5frpc_2eproto() {
    protobuf_AddDesc_ccdi_5frpc_2eproto();
  }
} static_descriptor_initializer_ccdi_5frpc_2eproto_;

const ::google::protobuf::EnumDescriptor* InfraHttpService_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfraHttpService_t_descriptor_;
}
bool InfraHttpService_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocalHttpService_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalHttpService_t_descriptor_;
}
bool LocalHttpService_t_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IoacStatusSummary_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoacStatusSummary_t_descriptor_;
}
bool IoacStatusSummary_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InfraHttpRequestMethod_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfraHttpRequestMethod_t_descriptor_;
}
bool InfraHttpRequestMethod_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LanDeviceType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanDeviceType_t_descriptor_;
}
bool LanDeviceType_t_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LanInterfaceType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanInterfaceType_t_descriptor_;
}
bool LanInterfaceType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NewDatasetType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDatasetType_t_descriptor_;
}
bool NewDatasetType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SyncSubscriptionType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncSubscriptionType_t_descriptor_;
}
bool SyncSubscriptionType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SyncFeature_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncFeature_t_descriptor_;
}
bool SyncFeature_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 70:
    case 80:
    case 81:
    case 82:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DatasetSyncStateType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetSyncStateType_t_descriptor_;
}
bool DatasetSyncStateType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CcdApp_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CcdApp_t_descriptor_;
}
bool CcdApp_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceInfoChangeType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoChangeType_t_descriptor_;
}
bool DeviceInfoChangeType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StorageNodeChangeType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageNodeChangeType_t_descriptor_;
}
bool StorageNodeChangeType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogoutReason_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReason_t_descriptor_;
}
bool LogoutReason_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PowerMode_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerMode_t_descriptor_;
}
bool PowerMode_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsyncUploadState_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AsyncUploadState_t_descriptor_;
}
bool AsyncUploadState_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceCredChangeType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceCredChangeType_t_descriptor_;
}
bool DeviceCredChangeType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceConnectionState_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceConnectionState_t_descriptor_;
}
bool DeviceConnectionState_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SyncEventType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventType_t_descriptor_;
}
bool SyncEventType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SyncStateType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncStateType_t_descriptor_;
}
bool SyncStateType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FeatureSyncStateType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureSyncStateType_t_descriptor_;
}
bool FeatureSyncStateType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SyncEventErrorType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventErrorType_t_descriptor_;
}
bool SyncEventErrorType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SyncFileChangeType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncFileChangeType_t_descriptor_;
}
bool SyncFileChangeType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SWUpdateMaskBits_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateMaskBits_t_descriptor_;
}
bool SWUpdateMaskBits_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SWUpdateDownloadState_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateDownloadState_t_descriptor_;
}
bool SWUpdateDownloadState_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DocSaveAndGoChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocSaveAndGoChangeType_descriptor_;
}
bool DocSaveAndGoChangeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PicStream_DBFilterType_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicStream_DBFilterType_t_descriptor_;
}
bool PicStream_DBFilterType_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NoParamRequest::NoParamRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoParamRequest::InitAsDefaultInstance() {
}

NoParamRequest::NoParamRequest(const NoParamRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoParamRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoParamRequest::~NoParamRequest() {
  SharedDtor();
}

void NoParamRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoParamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoParamRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoParamRequest_descriptor_;
}

const NoParamRequest& NoParamRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

NoParamRequest* NoParamRequest::default_instance_ = NULL;

NoParamRequest* NoParamRequest::New() const {
  return new NoParamRequest;
}

void NoParamRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoParamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NoParamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoParamRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoParamRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoParamRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoParamRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoParamRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoParamRequest::MergeFrom(const NoParamRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoParamRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoParamRequest::CopyFrom(const NoParamRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoParamRequest::IsInitialized() const {
  
  return true;
}

void NoParamRequest::Swap(NoParamRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoParamRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoParamRequest_descriptor_;
  metadata.reflection = NoParamRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerIndexRequest::kPlayerIndexFieldNumber;
#endif  // !_MSC_VER

PlayerIndexRequest::PlayerIndexRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerIndexRequest::InitAsDefaultInstance() {
}

PlayerIndexRequest::PlayerIndexRequest(const PlayerIndexRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerIndexRequest::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerIndexRequest::~PlayerIndexRequest() {
  SharedDtor();
}

void PlayerIndexRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerIndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerIndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerIndexRequest_descriptor_;
}

const PlayerIndexRequest& PlayerIndexRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PlayerIndexRequest* PlayerIndexRequest::default_instance_ = NULL;

PlayerIndexRequest* PlayerIndexRequest::New() const {
  return new PlayerIndexRequest;
}

void PlayerIndexRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerIndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerIndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 player_index = 1;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerIndexRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 player_index = 1;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerIndexRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player_index = 1;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerIndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerIndexRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerIndexRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerIndexRequest::MergeFrom(const PlayerIndexRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerIndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerIndexRequest::CopyFrom(const PlayerIndexRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerIndexRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PlayerIndexRequest::Swap(PlayerIndexRequest* other) {
  if (other != this) {
    std::swap(player_index_, other->player_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerIndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerIndexRequest_descriptor_;
  metadata.reflection = PlayerIndexRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserIdRequest::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserIdRequest::UserIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserIdRequest::InitAsDefaultInstance() {
}

UserIdRequest::UserIdRequest(const UserIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserIdRequest::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIdRequest::~UserIdRequest() {
  SharedDtor();
}

void UserIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserIdRequest_descriptor_;
}

const UserIdRequest& UserIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UserIdRequest* UserIdRequest::default_instance_ = NULL;

UserIdRequest* UserIdRequest::New() const {
  return new UserIdRequest;
}

void UserIdRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserIdRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserIdRequest::MergeFrom(const UserIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserIdRequest::CopyFrom(const UserIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserIdRequest::Swap(UserIdRequest* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserIdRequest_descriptor_;
  metadata.reflection = UserIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NoParamResponse::NoParamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoParamResponse::InitAsDefaultInstance() {
}

NoParamResponse::NoParamResponse(const NoParamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoParamResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoParamResponse::~NoParamResponse() {
  SharedDtor();
}

void NoParamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoParamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoParamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoParamResponse_descriptor_;
}

const NoParamResponse& NoParamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

NoParamResponse* NoParamResponse::default_instance_ = NULL;

NoParamResponse* NoParamResponse::New() const {
  return new NoParamResponse;
}

void NoParamResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoParamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NoParamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoParamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoParamResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoParamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoParamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoParamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoParamResponse::MergeFrom(const NoParamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoParamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoParamResponse::CopyFrom(const NoParamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoParamResponse::IsInitialized() const {
  
  return true;
}

void NoParamResponse::Swap(NoParamResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoParamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoParamResponse_descriptor_;
  metadata.reflection = NoParamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentPlayer::kUserIdFieldNumber;
const int CurrentPlayer::kUsernameFieldNumber;
const int CurrentPlayer::kAccountIdFieldNumber;
const int CurrentPlayer::kHasElevatedPrivilegesFieldNumber;
#endif  // !_MSC_VER

CurrentPlayer::CurrentPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrentPlayer::InitAsDefaultInstance() {
}

CurrentPlayer::CurrentPlayer(const CurrentPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentPlayer::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  has_elevated_privileges_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentPlayer::~CurrentPlayer() {
  SharedDtor();
}

void CurrentPlayer::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (this != default_instance_) {
  }
}

void CurrentPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentPlayer_descriptor_;
}

const CurrentPlayer& CurrentPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CurrentPlayer* CurrentPlayer::default_instance_ = NULL;

CurrentPlayer* CurrentPlayer::New() const {
  return new CurrentPlayer;
}

void CurrentPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_account_id()) {
      if (account_id_ != &::google::protobuf::internal::kEmptyString) {
        account_id_->clear();
      }
    }
    has_elevated_privileges_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account_id;
        break;
      }
      
      // optional string account_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_id().data(), this->account_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_has_elevated_privileges;
        break;
      }
      
      // optional bool has_elevated_privileges = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_elevated_privileges:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_elevated_privileges_)));
          set_has_has_elevated_privileges();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string account_id = 4;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account_id(), output);
  }
  
  // optional bool has_elevated_privileges = 5 [default = false];
  if (has_has_elevated_privileges()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->has_elevated_privileges(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrentPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string account_id = 4;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_id().data(), this->account_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account_id(), target);
  }
  
  // optional bool has_elevated_privileges = 5 [default = false];
  if (has_has_elevated_privileges()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->has_elevated_privileges(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrentPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string account_id = 4;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_id());
    }
    
    // optional bool has_elevated_privileges = 5 [default = false];
    if (has_has_elevated_privileges()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentPlayer::MergeFrom(const CurrentPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_has_elevated_privileges()) {
      set_has_elevated_privileges(from.has_elevated_privileges());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPlayer::CopyFrom(const CurrentPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CurrentPlayer::Swap(CurrentPlayer* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(username_, other->username_);
    std::swap(account_id_, other->account_id_);
    std::swap(has_elevated_privileges_, other->has_elevated_privileges_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentPlayer_descriptor_;
  metadata.reflection = CurrentPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentPlayers::kPlayersFieldNumber;
#endif  // !_MSC_VER

CurrentPlayers::CurrentPlayers()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrentPlayers::InitAsDefaultInstance() {
}

CurrentPlayers::CurrentPlayers(const CurrentPlayers& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentPlayers::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentPlayers::~CurrentPlayers() {
  SharedDtor();
}

void CurrentPlayers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentPlayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentPlayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentPlayers_descriptor_;
}

const CurrentPlayers& CurrentPlayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CurrentPlayers* CurrentPlayers::default_instance_ = NULL;

CurrentPlayers* CurrentPlayers::New() const {
  return new CurrentPlayers;
}

void CurrentPlayers::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentPlayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.CurrentPlayer players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentPlayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.CurrentPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrentPlayers::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.CurrentPlayer players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrentPlayers::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.CurrentPlayer players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentPlayers::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentPlayers* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentPlayers*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentPlayers::MergeFrom(const CurrentPlayers& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentPlayers::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentPlayers::CopyFrom(const CurrentPlayers& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentPlayers::IsInitialized() const {
  
  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void CurrentPlayers::Swap(CurrentPlayers* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentPlayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentPlayers_descriptor_;
  metadata.reflection = CurrentPlayers_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskInfo::kTotalSizeBytesFieldNumber;
const int DiskInfo::kFreeSpaceBytesFieldNumber;
const int DiskInfo::kAvailableInodesFieldNumber;
#endif  // !_MSC_VER

DiskInfo::DiskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskInfo::InitAsDefaultInstance() {
}

DiskInfo::DiskInfo(const DiskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskInfo::SharedCtor() {
  _cached_size_ = 0;
  total_size_bytes_ = GOOGLE_ULONGLONG(0);
  free_space_bytes_ = GOOGLE_ULONGLONG(0);
  available_inodes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskInfo::~DiskInfo() {
  SharedDtor();
}

void DiskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskInfo_descriptor_;
}

const DiskInfo& DiskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DiskInfo* DiskInfo::default_instance_ = NULL;

DiskInfo* DiskInfo::New() const {
  return new DiskInfo;
}

void DiskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_size_bytes_ = GOOGLE_ULONGLONG(0);
    free_space_bytes_ = GOOGLE_ULONGLONG(0);
    available_inodes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 total_size_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_size_bytes_)));
          set_has_total_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_free_space_bytes;
        break;
      }
      
      // required uint64 free_space_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_space_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_space_bytes_)));
          set_has_free_space_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_available_inodes;
        break;
      }
      
      // optional uint64 available_inodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_available_inodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_inodes_)));
          set_has_available_inodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 total_size_bytes = 1;
  if (has_total_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total_size_bytes(), output);
  }
  
  // required uint64 free_space_bytes = 2;
  if (has_free_space_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->free_space_bytes(), output);
  }
  
  // optional uint64 available_inodes = 3;
  if (has_available_inodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->available_inodes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 total_size_bytes = 1;
  if (has_total_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->total_size_bytes(), target);
  }
  
  // required uint64 free_space_bytes = 2;
  if (has_free_space_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->free_space_bytes(), target);
  }
  
  // optional uint64 available_inodes = 3;
  if (has_available_inodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->available_inodes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 total_size_bytes = 1;
    if (has_total_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_size_bytes());
    }
    
    // required uint64 free_space_bytes = 2;
    if (has_free_space_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_space_bytes());
    }
    
    // optional uint64 available_inodes = 3;
    if (has_available_inodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available_inodes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskInfo::MergeFrom(const DiskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_size_bytes()) {
      set_total_size_bytes(from.total_size_bytes());
    }
    if (from.has_free_space_bytes()) {
      set_free_space_bytes(from.free_space_bytes());
    }
    if (from.has_available_inodes()) {
      set_available_inodes(from.available_inodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskInfo::CopyFrom(const DiskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DiskInfo::Swap(DiskInfo* other) {
  if (other != this) {
    std::swap(total_size_bytes_, other->total_size_bytes_);
    std::swap(free_space_bytes_, other->free_space_bytes_);
    std::swap(available_inodes_, other->available_inodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskInfo_descriptor_;
  metadata.reflection = DiskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkInfo::kProxyAgentPortFieldNumber;
const int NetworkInfo::kMediaServerPortFieldNumber;
const int NetworkInfo::kVirtualDrivePortFieldNumber;
const int NetworkInfo::kTunnelServicePortFieldNumber;
const int NetworkInfo::kExtTunnelServicePortFieldNumber;
#endif  // !_MSC_VER

NetworkInfo::NetworkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkInfo::InitAsDefaultInstance() {
}

NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkInfo::SharedCtor() {
  _cached_size_ = 0;
  proxy_agent_port_ = 0u;
  media_server_port_ = 0u;
  virtual_drive_port_ = 0u;
  tunnel_service_port_ = 0u;
  ext_tunnel_service_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkInfo::~NetworkInfo() {
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetworkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkInfo_descriptor_;
}

const NetworkInfo& NetworkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

NetworkInfo* NetworkInfo::default_instance_ = NULL;

NetworkInfo* NetworkInfo::New() const {
  return new NetworkInfo;
}

void NetworkInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proxy_agent_port_ = 0u;
    media_server_port_ = 0u;
    virtual_drive_port_ = 0u;
    tunnel_service_port_ = 0u;
    ext_tunnel_service_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 proxy_agent_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proxy_agent_port_)));
          set_has_proxy_agent_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_media_server_port;
        break;
      }
      
      // optional uint32 media_server_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_media_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &media_server_port_)));
          set_has_media_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_virtual_drive_port;
        break;
      }
      
      // optional uint32 virtual_drive_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_drive_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_drive_port_)));
          set_has_virtual_drive_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tunnel_service_port;
        break;
      }
      
      // optional uint32 tunnel_service_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tunnel_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tunnel_service_port_)));
          set_has_tunnel_service_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ext_tunnel_service_port;
        break;
      }
      
      // optional uint32 ext_tunnel_service_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_tunnel_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_tunnel_service_port_)));
          set_has_ext_tunnel_service_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 proxy_agent_port = 1;
  if (has_proxy_agent_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->proxy_agent_port(), output);
  }
  
  // optional uint32 media_server_port = 2;
  if (has_media_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->media_server_port(), output);
  }
  
  // optional uint32 virtual_drive_port = 3;
  if (has_virtual_drive_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->virtual_drive_port(), output);
  }
  
  // optional uint32 tunnel_service_port = 4;
  if (has_tunnel_service_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tunnel_service_port(), output);
  }
  
  // optional uint32 ext_tunnel_service_port = 5;
  if (has_ext_tunnel_service_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ext_tunnel_service_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 proxy_agent_port = 1;
  if (has_proxy_agent_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->proxy_agent_port(), target);
  }
  
  // optional uint32 media_server_port = 2;
  if (has_media_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->media_server_port(), target);
  }
  
  // optional uint32 virtual_drive_port = 3;
  if (has_virtual_drive_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->virtual_drive_port(), target);
  }
  
  // optional uint32 tunnel_service_port = 4;
  if (has_tunnel_service_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tunnel_service_port(), target);
  }
  
  // optional uint32 ext_tunnel_service_port = 5;
  if (has_ext_tunnel_service_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ext_tunnel_service_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 proxy_agent_port = 1;
    if (has_proxy_agent_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proxy_agent_port());
    }
    
    // optional uint32 media_server_port = 2;
    if (has_media_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->media_server_port());
    }
    
    // optional uint32 virtual_drive_port = 3;
    if (has_virtual_drive_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_drive_port());
    }
    
    // optional uint32 tunnel_service_port = 4;
    if (has_tunnel_service_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tunnel_service_port());
    }
    
    // optional uint32 ext_tunnel_service_port = 5;
    if (has_ext_tunnel_service_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext_tunnel_service_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proxy_agent_port()) {
      set_proxy_agent_port(from.proxy_agent_port());
    }
    if (from.has_media_server_port()) {
      set_media_server_port(from.media_server_port());
    }
    if (from.has_virtual_drive_port()) {
      set_virtual_drive_port(from.virtual_drive_port());
    }
    if (from.has_tunnel_service_port()) {
      set_tunnel_service_port(from.tunnel_service_port());
    }
    if (from.has_ext_tunnel_service_port()) {
      set_ext_tunnel_service_port(from.ext_tunnel_service_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  
  return true;
}

void NetworkInfo::Swap(NetworkInfo* other) {
  if (other != this) {
    std::swap(proxy_agent_port_, other->proxy_agent_port_);
    std::swap(media_server_port_, other->media_server_port_);
    std::swap(virtual_drive_port_, other->virtual_drive_port_);
    std::swap(tunnel_service_port_, other->tunnel_service_port_);
    std::swap(ext_tunnel_service_port_, other->ext_tunnel_service_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkInfo_descriptor_;
  metadata.reflection = NetworkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IoacAdapterWarnings::kMagicPacketNotSupportedFieldNumber;
const int IoacAdapterWarnings::kOffloadArpNotSupportedFieldNumber;
const int IoacAdapterWarnings::kOffloadNsNotSupportedFieldNumber;
const int IoacAdapterWarnings::kOffload80211RsnRekeyNotSupportedFieldNumber;
const int IoacAdapterWarnings::kOffloadArpFailedFieldNumber;
const int IoacAdapterWarnings::kEnableKeepaliveFailedFieldNumber;
#endif  // !_MSC_VER

IoacAdapterWarnings::IoacAdapterWarnings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IoacAdapterWarnings::InitAsDefaultInstance() {
}

IoacAdapterWarnings::IoacAdapterWarnings(const IoacAdapterWarnings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IoacAdapterWarnings::SharedCtor() {
  _cached_size_ = 0;
  magic_packet_not_supported_ = false;
  offload_arp_not_supported_ = false;
  offload_ns_not_supported_ = false;
  offload_80211_rsn_rekey_not_supported_ = false;
  offload_arp_failed_ = false;
  enable_keepalive_failed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IoacAdapterWarnings::~IoacAdapterWarnings() {
  SharedDtor();
}

void IoacAdapterWarnings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IoacAdapterWarnings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IoacAdapterWarnings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoacAdapterWarnings_descriptor_;
}

const IoacAdapterWarnings& IoacAdapterWarnings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

IoacAdapterWarnings* IoacAdapterWarnings::default_instance_ = NULL;

IoacAdapterWarnings* IoacAdapterWarnings::New() const {
  return new IoacAdapterWarnings;
}

void IoacAdapterWarnings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    magic_packet_not_supported_ = false;
    offload_arp_not_supported_ = false;
    offload_ns_not_supported_ = false;
    offload_80211_rsn_rekey_not_supported_ = false;
    offload_arp_failed_ = false;
    enable_keepalive_failed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IoacAdapterWarnings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool magic_packet_not_supported = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &magic_packet_not_supported_)));
          set_has_magic_packet_not_supported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_offload_arp_not_supported;
        break;
      }
      
      // optional bool offload_arp_not_supported = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offload_arp_not_supported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_arp_not_supported_)));
          set_has_offload_arp_not_supported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_offload_ns_not_supported;
        break;
      }
      
      // optional bool offload_ns_not_supported = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offload_ns_not_supported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_ns_not_supported_)));
          set_has_offload_ns_not_supported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_offload_80211_rsn_rekey_not_supported;
        break;
      }
      
      // optional bool offload_80211_rsn_rekey_not_supported = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offload_80211_rsn_rekey_not_supported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_80211_rsn_rekey_not_supported_)));
          set_has_offload_80211_rsn_rekey_not_supported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_offload_arp_failed;
        break;
      }
      
      // optional bool offload_arp_failed = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offload_arp_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_arp_failed_)));
          set_has_offload_arp_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_enable_keepalive_failed;
        break;
      }
      
      // optional bool enable_keepalive_failed = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_keepalive_failed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_keepalive_failed_)));
          set_has_enable_keepalive_failed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IoacAdapterWarnings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool magic_packet_not_supported = 16;
  if (has_magic_packet_not_supported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->magic_packet_not_supported(), output);
  }
  
  // optional bool offload_arp_not_supported = 17;
  if (has_offload_arp_not_supported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->offload_arp_not_supported(), output);
  }
  
  // optional bool offload_ns_not_supported = 18;
  if (has_offload_ns_not_supported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->offload_ns_not_supported(), output);
  }
  
  // optional bool offload_80211_rsn_rekey_not_supported = 19;
  if (has_offload_80211_rsn_rekey_not_supported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->offload_80211_rsn_rekey_not_supported(), output);
  }
  
  // optional bool offload_arp_failed = 20;
  if (has_offload_arp_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->offload_arp_failed(), output);
  }
  
  // optional bool enable_keepalive_failed = 21;
  if (has_enable_keepalive_failed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->enable_keepalive_failed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IoacAdapterWarnings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool magic_packet_not_supported = 16;
  if (has_magic_packet_not_supported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->magic_packet_not_supported(), target);
  }
  
  // optional bool offload_arp_not_supported = 17;
  if (has_offload_arp_not_supported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->offload_arp_not_supported(), target);
  }
  
  // optional bool offload_ns_not_supported = 18;
  if (has_offload_ns_not_supported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->offload_ns_not_supported(), target);
  }
  
  // optional bool offload_80211_rsn_rekey_not_supported = 19;
  if (has_offload_80211_rsn_rekey_not_supported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->offload_80211_rsn_rekey_not_supported(), target);
  }
  
  // optional bool offload_arp_failed = 20;
  if (has_offload_arp_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->offload_arp_failed(), target);
  }
  
  // optional bool enable_keepalive_failed = 21;
  if (has_enable_keepalive_failed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->enable_keepalive_failed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IoacAdapterWarnings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool magic_packet_not_supported = 16;
    if (has_magic_packet_not_supported()) {
      total_size += 2 + 1;
    }
    
    // optional bool offload_arp_not_supported = 17;
    if (has_offload_arp_not_supported()) {
      total_size += 2 + 1;
    }
    
    // optional bool offload_ns_not_supported = 18;
    if (has_offload_ns_not_supported()) {
      total_size += 2 + 1;
    }
    
    // optional bool offload_80211_rsn_rekey_not_supported = 19;
    if (has_offload_80211_rsn_rekey_not_supported()) {
      total_size += 2 + 1;
    }
    
    // optional bool offload_arp_failed = 20;
    if (has_offload_arp_failed()) {
      total_size += 2 + 1;
    }
    
    // optional bool enable_keepalive_failed = 21;
    if (has_enable_keepalive_failed()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IoacAdapterWarnings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IoacAdapterWarnings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IoacAdapterWarnings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IoacAdapterWarnings::MergeFrom(const IoacAdapterWarnings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magic_packet_not_supported()) {
      set_magic_packet_not_supported(from.magic_packet_not_supported());
    }
    if (from.has_offload_arp_not_supported()) {
      set_offload_arp_not_supported(from.offload_arp_not_supported());
    }
    if (from.has_offload_ns_not_supported()) {
      set_offload_ns_not_supported(from.offload_ns_not_supported());
    }
    if (from.has_offload_80211_rsn_rekey_not_supported()) {
      set_offload_80211_rsn_rekey_not_supported(from.offload_80211_rsn_rekey_not_supported());
    }
    if (from.has_offload_arp_failed()) {
      set_offload_arp_failed(from.offload_arp_failed());
    }
    if (from.has_enable_keepalive_failed()) {
      set_enable_keepalive_failed(from.enable_keepalive_failed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IoacAdapterWarnings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoacAdapterWarnings::CopyFrom(const IoacAdapterWarnings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoacAdapterWarnings::IsInitialized() const {
  
  return true;
}

void IoacAdapterWarnings::Swap(IoacAdapterWarnings* other) {
  if (other != this) {
    std::swap(magic_packet_not_supported_, other->magic_packet_not_supported_);
    std::swap(offload_arp_not_supported_, other->offload_arp_not_supported_);
    std::swap(offload_ns_not_supported_, other->offload_ns_not_supported_);
    std::swap(offload_80211_rsn_rekey_not_supported_, other->offload_80211_rsn_rekey_not_supported_);
    std::swap(offload_arp_failed_, other->offload_arp_failed_);
    std::swap(enable_keepalive_failed_, other->enable_keepalive_failed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IoacAdapterWarnings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IoacAdapterWarnings_descriptor_;
  metadata.reflection = IoacAdapterWarnings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IoacAdapterStatus::kGuidFieldNumber;
const int IoacAdapterStatus::kSummaryFieldNumber;
const int IoacAdapterStatus::kWarningsFieldNumber;
#endif  // !_MSC_VER

IoacAdapterStatus::IoacAdapterStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IoacAdapterStatus::InitAsDefaultInstance() {
  warnings_ = const_cast< ::ccd::IoacAdapterWarnings*>(&::ccd::IoacAdapterWarnings::default_instance());
}

IoacAdapterStatus::IoacAdapterStatus(const IoacAdapterStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IoacAdapterStatus::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  summary_ = 1;
  warnings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IoacAdapterStatus::~IoacAdapterStatus() {
  SharedDtor();
}

void IoacAdapterStatus::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete warnings_;
  }
}

void IoacAdapterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IoacAdapterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoacAdapterStatus_descriptor_;
}

const IoacAdapterStatus& IoacAdapterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

IoacAdapterStatus* IoacAdapterStatus::default_instance_ = NULL;

IoacAdapterStatus* IoacAdapterStatus::New() const {
  return new IoacAdapterStatus;
}

void IoacAdapterStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    summary_ = 1;
    if (has_warnings()) {
      if (warnings_ != NULL) warnings_->::ccd::IoacAdapterWarnings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IoacAdapterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_summary;
        break;
      }
      
      // optional .ccd.IoacStatusSummary_t summary = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summary:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::IoacStatusSummary_t_IsValid(value)) {
            set_summary(static_cast< ccd::IoacStatusSummary_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_warnings;
        break;
      }
      
      // optional .ccd.IoacAdapterWarnings warnings = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warnings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warnings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IoacAdapterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }
  
  // optional .ccd.IoacStatusSummary_t summary = 4;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->summary(), output);
  }
  
  // optional .ccd.IoacAdapterWarnings warnings = 5;
  if (has_warnings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->warnings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IoacAdapterStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }
  
  // optional .ccd.IoacStatusSummary_t summary = 4;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->summary(), target);
  }
  
  // optional .ccd.IoacAdapterWarnings warnings = 5;
  if (has_warnings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->warnings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IoacAdapterStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional .ccd.IoacStatusSummary_t summary = 4;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->summary());
    }
    
    // optional .ccd.IoacAdapterWarnings warnings = 5;
    if (has_warnings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warnings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IoacAdapterStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IoacAdapterStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IoacAdapterStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IoacAdapterStatus::MergeFrom(const IoacAdapterStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_warnings()) {
      mutable_warnings()->::ccd::IoacAdapterWarnings::MergeFrom(from.warnings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IoacAdapterStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoacAdapterStatus::CopyFrom(const IoacAdapterStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoacAdapterStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IoacAdapterStatus::Swap(IoacAdapterStatus* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(summary_, other->summary_);
    std::swap(warnings_, other->warnings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IoacAdapterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IoacAdapterStatus_descriptor_;
  metadata.reflection = IoacAdapterStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IoacOverallStatus::kSummaryFieldNumber;
const int IoacOverallStatus::kAdaptersFieldNumber;
const int IoacOverallStatus::kWarnSleepNotSupportedFieldNumber;
#endif  // !_MSC_VER

IoacOverallStatus::IoacOverallStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IoacOverallStatus::InitAsDefaultInstance() {
}

IoacOverallStatus::IoacOverallStatus(const IoacOverallStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IoacOverallStatus::SharedCtor() {
  _cached_size_ = 0;
  summary_ = 1;
  warn_sleep_not_supported_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IoacOverallStatus::~IoacOverallStatus() {
  SharedDtor();
}

void IoacOverallStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IoacOverallStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IoacOverallStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoacOverallStatus_descriptor_;
}

const IoacOverallStatus& IoacOverallStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

IoacOverallStatus* IoacOverallStatus::default_instance_ = NULL;

IoacOverallStatus* IoacOverallStatus::New() const {
  return new IoacOverallStatus;
}

void IoacOverallStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summary_ = 1;
    warn_sleep_not_supported_ = false;
  }
  adapters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IoacOverallStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.IoacStatusSummary_t summary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::IoacStatusSummary_t_IsValid(value)) {
            set_summary(static_cast< ccd::IoacStatusSummary_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adapters;
        break;
      }
      
      // repeated .ccd.IoacAdapterStatus adapters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adapters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adapters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adapters;
        if (input->ExpectTag(128)) goto parse_warn_sleep_not_supported;
        break;
      }
      
      // optional bool warn_sleep_not_supported = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn_sleep_not_supported:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warn_sleep_not_supported_)));
          set_has_warn_sleep_not_supported();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IoacOverallStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.IoacStatusSummary_t summary = 1;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->summary(), output);
  }
  
  // repeated .ccd.IoacAdapterStatus adapters = 2;
  for (int i = 0; i < this->adapters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->adapters(i), output);
  }
  
  // optional bool warn_sleep_not_supported = 16;
  if (has_warn_sleep_not_supported()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->warn_sleep_not_supported(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IoacOverallStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.IoacStatusSummary_t summary = 1;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->summary(), target);
  }
  
  // repeated .ccd.IoacAdapterStatus adapters = 2;
  for (int i = 0; i < this->adapters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->adapters(i), target);
  }
  
  // optional bool warn_sleep_not_supported = 16;
  if (has_warn_sleep_not_supported()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->warn_sleep_not_supported(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IoacOverallStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.IoacStatusSummary_t summary = 1;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->summary());
    }
    
    // optional bool warn_sleep_not_supported = 16;
    if (has_warn_sleep_not_supported()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .ccd.IoacAdapterStatus adapters = 2;
  total_size += 1 * this->adapters_size();
  for (int i = 0; i < this->adapters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adapters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IoacOverallStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IoacOverallStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IoacOverallStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IoacOverallStatus::MergeFrom(const IoacOverallStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  adapters_.MergeFrom(from.adapters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_warn_sleep_not_supported()) {
      set_warn_sleep_not_supported(from.warn_sleep_not_supported());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IoacOverallStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoacOverallStatus::CopyFrom(const IoacOverallStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoacOverallStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < adapters_size(); i++) {
    if (!this->adapters(i).IsInitialized()) return false;
  }
  return true;
}

void IoacOverallStatus::Swap(IoacOverallStatus* other) {
  if (other != this) {
    std::swap(summary_, other->summary_);
    adapters_.Swap(&other->adapters_);
    std::swap(warn_sleep_not_supported_, other->warn_sleep_not_supported_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IoacOverallStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IoacOverallStatus_descriptor_;
  metadata.reflection = IoacOverallStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemStateInput::kGetDeviceIdFieldNumber;
const int GetSystemStateInput::kGetPlayersFieldNumber;
const int GetSystemStateInput::kGetUsersFieldNumber;
const int GetSystemStateInput::kGetLoggedOutUsersFieldNumber;
const int GetSystemStateInput::kGetDiskInfoFieldNumber;
const int GetSystemStateInput::kGetDeviceLocaleFieldNumber;
const int GetSystemStateInput::kGetNetworkInfoFieldNumber;
const int GetSystemStateInput::kGetIoacStatusFieldNumber;
const int GetSystemStateInput::kGetEnableIoacFieldNumber;
const int GetSystemStateInput::kGetIoacAlreadyInUseFieldNumber;
const int GetSystemStateInput::kGetBackgroundModeIntervalSecFieldNumber;
const int GetSystemStateInput::kGetOnlyMobileNetworkAvailableFieldNumber;
const int GetSystemStateInput::kGetStreamPowerModeFieldNumber;
const int GetSystemStateInput::kGetPowerModeFieldNumber;
const int GetSystemStateInput::kGetPdInstanceIdFieldNumber;
#endif  // !_MSC_VER

GetSystemStateInput::GetSystemStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemStateInput::InitAsDefaultInstance() {
}

GetSystemStateInput::GetSystemStateInput(const GetSystemStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemStateInput::SharedCtor() {
  _cached_size_ = 0;
  get_device_id_ = false;
  get_players_ = false;
  get_users_ = false;
  get_logged_out_users_ = false;
  get_disk_info_ = false;
  get_device_locale_ = false;
  get_network_info_ = false;
  get_ioac_status_ = false;
  get_enable_ioac_ = false;
  get_ioac_already_in_use_ = false;
  get_background_mode_interval_sec_ = false;
  get_only_mobile_network_available_ = false;
  get_stream_power_mode_ = false;
  get_power_mode_ = false;
  get_pd_instance_id_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemStateInput::~GetSystemStateInput() {
  SharedDtor();
}

void GetSystemStateInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSystemStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemStateInput_descriptor_;
}

const GetSystemStateInput& GetSystemStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetSystemStateInput* GetSystemStateInput::default_instance_ = NULL;

GetSystemStateInput* GetSystemStateInput::New() const {
  return new GetSystemStateInput;
}

void GetSystemStateInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    get_device_id_ = false;
    get_players_ = false;
    get_users_ = false;
    get_logged_out_users_ = false;
    get_disk_info_ = false;
    get_device_locale_ = false;
    get_network_info_ = false;
    get_ioac_status_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    get_enable_ioac_ = false;
    get_ioac_already_in_use_ = false;
    get_background_mode_interval_sec_ = false;
    get_only_mobile_network_available_ = false;
    get_stream_power_mode_ = false;
    get_power_mode_ = false;
    get_pd_instance_id_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool get_players = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_players_)));
          set_has_get_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_get_device_id;
        break;
      }
      
      // optional bool get_device_id = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_device_id_)));
          set_has_get_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_get_disk_info;
        break;
      }
      
      // optional bool get_disk_info = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_disk_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_disk_info_)));
          set_has_get_disk_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_get_device_locale;
        break;
      }
      
      // optional bool get_device_locale = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_device_locale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_device_locale_)));
          set_has_get_device_locale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_get_network_info;
        break;
      }
      
      // optional bool get_network_info = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_network_info:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_network_info_)));
          set_has_get_network_info();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_get_users;
        break;
      }
      
      // optional bool get_users = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_users_)));
          set_has_get_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_get_ioac_status;
        break;
      }
      
      // optional bool get_ioac_status = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_ioac_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_ioac_status_)));
          set_has_get_ioac_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_get_background_mode_interval_sec;
        break;
      }
      
      // optional bool get_background_mode_interval_sec = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_background_mode_interval_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_background_mode_interval_sec_)));
          set_has_get_background_mode_interval_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_get_logged_out_users;
        break;
      }
      
      // optional bool get_logged_out_users = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_logged_out_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_logged_out_users_)));
          set_has_get_logged_out_users();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_get_enable_ioac;
        break;
      }
      
      // optional bool get_enable_ioac = 14 [default = false];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_enable_ioac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_enable_ioac_)));
          set_has_get_enable_ioac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_get_ioac_already_in_use;
        break;
      }
      
      // optional bool get_ioac_already_in_use = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_ioac_already_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_ioac_already_in_use_)));
          set_has_get_ioac_already_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_get_only_mobile_network_available;
        break;
      }
      
      // optional bool get_only_mobile_network_available = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_only_mobile_network_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_only_mobile_network_available_)));
          set_has_get_only_mobile_network_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_get_stream_power_mode;
        break;
      }
      
      // optional bool get_stream_power_mode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_stream_power_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_stream_power_mode_)));
          set_has_get_stream_power_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_get_power_mode;
        break;
      }
      
      // optional bool get_power_mode = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_power_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_power_mode_)));
          set_has_get_power_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_get_pd_instance_id;
        break;
      }
      
      // optional bool get_pd_instance_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_pd_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_pd_instance_id_)));
          set_has_get_pd_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool get_players = 2 [default = false];
  if (has_get_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_players(), output);
  }
  
  // optional bool get_device_id = 4 [default = false];
  if (has_get_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->get_device_id(), output);
  }
  
  // optional bool get_disk_info = 5 [default = false];
  if (has_get_disk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->get_disk_info(), output);
  }
  
  // optional bool get_device_locale = 8 [default = false];
  if (has_get_device_locale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->get_device_locale(), output);
  }
  
  // optional bool get_network_info = 9 [default = false];
  if (has_get_network_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->get_network_info(), output);
  }
  
  // optional bool get_users = 10 [default = false];
  if (has_get_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->get_users(), output);
  }
  
  // optional bool get_ioac_status = 11 [default = false];
  if (has_get_ioac_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->get_ioac_status(), output);
  }
  
  // optional bool get_background_mode_interval_sec = 12;
  if (has_get_background_mode_interval_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->get_background_mode_interval_sec(), output);
  }
  
  // optional bool get_logged_out_users = 13 [default = false];
  if (has_get_logged_out_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->get_logged_out_users(), output);
  }
  
  // optional bool get_enable_ioac = 14 [default = false];
  if (has_get_enable_ioac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->get_enable_ioac(), output);
  }
  
  // optional bool get_ioac_already_in_use = 15 [default = false];
  if (has_get_ioac_already_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->get_ioac_already_in_use(), output);
  }
  
  // optional bool get_only_mobile_network_available = 21;
  if (has_get_only_mobile_network_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->get_only_mobile_network_available(), output);
  }
  
  // optional bool get_stream_power_mode = 22;
  if (has_get_stream_power_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->get_stream_power_mode(), output);
  }
  
  // optional bool get_power_mode = 23;
  if (has_get_power_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->get_power_mode(), output);
  }
  
  // optional bool get_pd_instance_id = 24;
  if (has_get_pd_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->get_pd_instance_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool get_players = 2 [default = false];
  if (has_get_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_players(), target);
  }
  
  // optional bool get_device_id = 4 [default = false];
  if (has_get_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->get_device_id(), target);
  }
  
  // optional bool get_disk_info = 5 [default = false];
  if (has_get_disk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->get_disk_info(), target);
  }
  
  // optional bool get_device_locale = 8 [default = false];
  if (has_get_device_locale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->get_device_locale(), target);
  }
  
  // optional bool get_network_info = 9 [default = false];
  if (has_get_network_info()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->get_network_info(), target);
  }
  
  // optional bool get_users = 10 [default = false];
  if (has_get_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->get_users(), target);
  }
  
  // optional bool get_ioac_status = 11 [default = false];
  if (has_get_ioac_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->get_ioac_status(), target);
  }
  
  // optional bool get_background_mode_interval_sec = 12;
  if (has_get_background_mode_interval_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->get_background_mode_interval_sec(), target);
  }
  
  // optional bool get_logged_out_users = 13 [default = false];
  if (has_get_logged_out_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->get_logged_out_users(), target);
  }
  
  // optional bool get_enable_ioac = 14 [default = false];
  if (has_get_enable_ioac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->get_enable_ioac(), target);
  }
  
  // optional bool get_ioac_already_in_use = 15 [default = false];
  if (has_get_ioac_already_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->get_ioac_already_in_use(), target);
  }
  
  // optional bool get_only_mobile_network_available = 21;
  if (has_get_only_mobile_network_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->get_only_mobile_network_available(), target);
  }
  
  // optional bool get_stream_power_mode = 22;
  if (has_get_stream_power_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->get_stream_power_mode(), target);
  }
  
  // optional bool get_power_mode = 23;
  if (has_get_power_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->get_power_mode(), target);
  }
  
  // optional bool get_pd_instance_id = 24;
  if (has_get_pd_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->get_pd_instance_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemStateInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool get_device_id = 4 [default = false];
    if (has_get_device_id()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_players = 2 [default = false];
    if (has_get_players()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_users = 10 [default = false];
    if (has_get_users()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_logged_out_users = 13 [default = false];
    if (has_get_logged_out_users()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_disk_info = 5 [default = false];
    if (has_get_disk_info()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_device_locale = 8 [default = false];
    if (has_get_device_locale()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_network_info = 9 [default = false];
    if (has_get_network_info()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_ioac_status = 11 [default = false];
    if (has_get_ioac_status()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool get_enable_ioac = 14 [default = false];
    if (has_get_enable_ioac()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_ioac_already_in_use = 15 [default = false];
    if (has_get_ioac_already_in_use()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_background_mode_interval_sec = 12;
    if (has_get_background_mode_interval_sec()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_only_mobile_network_available = 21;
    if (has_get_only_mobile_network_available()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_stream_power_mode = 22;
    if (has_get_stream_power_mode()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_power_mode = 23;
    if (has_get_power_mode()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_pd_instance_id = 24;
    if (has_get_pd_instance_id()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemStateInput::MergeFrom(const GetSystemStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_get_device_id()) {
      set_get_device_id(from.get_device_id());
    }
    if (from.has_get_players()) {
      set_get_players(from.get_players());
    }
    if (from.has_get_users()) {
      set_get_users(from.get_users());
    }
    if (from.has_get_logged_out_users()) {
      set_get_logged_out_users(from.get_logged_out_users());
    }
    if (from.has_get_disk_info()) {
      set_get_disk_info(from.get_disk_info());
    }
    if (from.has_get_device_locale()) {
      set_get_device_locale(from.get_device_locale());
    }
    if (from.has_get_network_info()) {
      set_get_network_info(from.get_network_info());
    }
    if (from.has_get_ioac_status()) {
      set_get_ioac_status(from.get_ioac_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_get_enable_ioac()) {
      set_get_enable_ioac(from.get_enable_ioac());
    }
    if (from.has_get_ioac_already_in_use()) {
      set_get_ioac_already_in_use(from.get_ioac_already_in_use());
    }
    if (from.has_get_background_mode_interval_sec()) {
      set_get_background_mode_interval_sec(from.get_background_mode_interval_sec());
    }
    if (from.has_get_only_mobile_network_available()) {
      set_get_only_mobile_network_available(from.get_only_mobile_network_available());
    }
    if (from.has_get_stream_power_mode()) {
      set_get_stream_power_mode(from.get_stream_power_mode());
    }
    if (from.has_get_power_mode()) {
      set_get_power_mode(from.get_power_mode());
    }
    if (from.has_get_pd_instance_id()) {
      set_get_pd_instance_id(from.get_pd_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemStateInput::CopyFrom(const GetSystemStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemStateInput::IsInitialized() const {
  
  return true;
}

void GetSystemStateInput::Swap(GetSystemStateInput* other) {
  if (other != this) {
    std::swap(get_device_id_, other->get_device_id_);
    std::swap(get_players_, other->get_players_);
    std::swap(get_users_, other->get_users_);
    std::swap(get_logged_out_users_, other->get_logged_out_users_);
    std::swap(get_disk_info_, other->get_disk_info_);
    std::swap(get_device_locale_, other->get_device_locale_);
    std::swap(get_network_info_, other->get_network_info_);
    std::swap(get_ioac_status_, other->get_ioac_status_);
    std::swap(get_enable_ioac_, other->get_enable_ioac_);
    std::swap(get_ioac_already_in_use_, other->get_ioac_already_in_use_);
    std::swap(get_background_mode_interval_sec_, other->get_background_mode_interval_sec_);
    std::swap(get_only_mobile_network_available_, other->get_only_mobile_network_available_);
    std::swap(get_stream_power_mode_, other->get_stream_power_mode_);
    std::swap(get_power_mode_, other->get_power_mode_);
    std::swap(get_pd_instance_id_, other->get_pd_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemStateInput_descriptor_;
  metadata.reflection = GetSystemStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PowerStatus::kPowerModeFieldNumber;
#endif  // !_MSC_VER

PowerStatus::PowerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PowerStatus::InitAsDefaultInstance() {
}

PowerStatus::PowerStatus(const PowerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PowerStatus::SharedCtor() {
  _cached_size_ = 0;
  power_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerStatus::~PowerStatus() {
  SharedDtor();
}

void PowerStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PowerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerStatus_descriptor_;
}

const PowerStatus& PowerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PowerStatus* PowerStatus::default_instance_ = NULL;

PowerStatus* PowerStatus::New() const {
  return new PowerStatus;
}

void PowerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    power_mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PowerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.PowerMode_t power_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::PowerMode_t_IsValid(value)) {
            set_power_mode(static_cast< ccd::PowerMode_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PowerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.PowerMode_t power_mode = 1;
  if (has_power_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->power_mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PowerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.PowerMode_t power_mode = 1;
  if (has_power_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->power_mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PowerStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.PowerMode_t power_mode = 1;
    if (has_power_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PowerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PowerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PowerStatus::MergeFrom(const PowerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power_mode()) {
      set_power_mode(from.power_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PowerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerStatus::CopyFrom(const PowerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PowerStatus::Swap(PowerStatus* other) {
  if (other != this) {
    std::swap(power_mode_, other->power_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PowerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerStatus_descriptor_;
  metadata.reflection = PowerStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentUser::kUserIdFieldNumber;
const int CurrentUser::kUsernameFieldNumber;
#endif  // !_MSC_VER

CurrentUser::CurrentUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrentUser::InitAsDefaultInstance() {
}

CurrentUser::CurrentUser(const CurrentUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentUser::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentUser::~CurrentUser() {
  SharedDtor();
}

void CurrentUser::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void CurrentUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentUser_descriptor_;
}

const CurrentUser& CurrentUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CurrentUser* CurrentUser::default_instance_ = NULL;

CurrentUser* CurrentUser::New() const {
  return new CurrentUser;
}

void CurrentUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrentUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrentUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentUser::MergeFrom(const CurrentUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentUser::CopyFrom(const CurrentUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CurrentUser::Swap(CurrentUser* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentUser_descriptor_;
  metadata.reflection = CurrentUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoggedOutUser::kUserIdFieldNumber;
const int LoggedOutUser::kUsernameFieldNumber;
const int LoggedOutUser::kReasonFieldNumber;
#endif  // !_MSC_VER

LoggedOutUser::LoggedOutUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoggedOutUser::InitAsDefaultInstance() {
}

LoggedOutUser::LoggedOutUser(const LoggedOutUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoggedOutUser::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoggedOutUser::~LoggedOutUser() {
  SharedDtor();
}

void LoggedOutUser::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void LoggedOutUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoggedOutUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoggedOutUser_descriptor_;
}

const LoggedOutUser& LoggedOutUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LoggedOutUser* LoggedOutUser::default_instance_ = NULL;

LoggedOutUser* LoggedOutUser::New() const {
  return new LoggedOutUser;
}

void LoggedOutUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoggedOutUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // required string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }
      
      // required .ccd.LogoutReason_t reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::LogoutReason_t_IsValid(value)) {
            set_reason(static_cast< ccd::LogoutReason_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoggedOutUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // required .ccd.LogoutReason_t reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoggedOutUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // required .ccd.LogoutReason_t reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoggedOutUser::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required .ccd.LogoutReason_t reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoggedOutUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoggedOutUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoggedOutUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoggedOutUser::MergeFrom(const LoggedOutUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoggedOutUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggedOutUser::CopyFrom(const LoggedOutUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggedOutUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LoggedOutUser::Swap(LoggedOutUser* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(username_, other->username_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoggedOutUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoggedOutUser_descriptor_;
  metadata.reflection = LoggedOutUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemStateOutput::kDeviceIdFieldNumber;
const int GetSystemStateOutput::kPlayersFieldNumber;
const int GetSystemStateOutput::kUsersFieldNumber;
const int GetSystemStateOutput::kLoggedOutUsersFieldNumber;
const int GetSystemStateOutput::kDiskInfoFieldNumber;
const int GetSystemStateOutput::kDeviceLocaleFieldNumber;
const int GetSystemStateOutput::kNetworkInfoFieldNumber;
const int GetSystemStateOutput::kIoacStatusFieldNumber;
const int GetSystemStateOutput::kBackgroundModeIntervalSecFieldNumber;
const int GetSystemStateOutput::kOnlyMobileNetworkAvailableFieldNumber;
const int GetSystemStateOutput::kEnableIoacFieldNumber;
const int GetSystemStateOutput::kIoacAlreadyInUseFieldNumber;
const int GetSystemStateOutput::kStreamPowerModeFieldNumber;
const int GetSystemStateOutput::kPowerModeStatusFieldNumber;
const int GetSystemStateOutput::kPdInstanceIdFieldNumber;
const int GetSystemStateOutput::kPdInstanceIdNumFieldNumber;
#endif  // !_MSC_VER

GetSystemStateOutput::GetSystemStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSystemStateOutput::InitAsDefaultInstance() {
  players_ = const_cast< ::ccd::CurrentPlayers*>(&::ccd::CurrentPlayers::default_instance());
  disk_info_ = const_cast< ::ccd::DiskInfo*>(&::ccd::DiskInfo::default_instance());
  network_info_ = const_cast< ::ccd::NetworkInfo*>(&::ccd::NetworkInfo::default_instance());
  ioac_status_ = const_cast< ::ccd::IoacOverallStatus*>(&::ccd::IoacOverallStatus::default_instance());
  power_mode_status_ = const_cast< ::ccd::PowerStatus*>(&::ccd::PowerStatus::default_instance());
}

GetSystemStateOutput::GetSystemStateOutput(const GetSystemStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemStateOutput::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  players_ = NULL;
  disk_info_ = NULL;
  device_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_info_ = NULL;
  ioac_status_ = NULL;
  background_mode_interval_sec_ = 0;
  only_mobile_network_available_ = false;
  enable_ioac_ = false;
  ioac_already_in_use_ = false;
  stream_power_mode_ = false;
  power_mode_status_ = NULL;
  pd_instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pd_instance_id_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemStateOutput::~GetSystemStateOutput() {
  SharedDtor();
}

void GetSystemStateOutput::SharedDtor() {
  if (device_locale_ != &::google::protobuf::internal::kEmptyString) {
    delete device_locale_;
  }
  if (pd_instance_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pd_instance_id_;
  }
  if (this != default_instance_) {
    delete players_;
    delete disk_info_;
    delete network_info_;
    delete ioac_status_;
    delete power_mode_status_;
  }
}

void GetSystemStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSystemStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSystemStateOutput_descriptor_;
}

const GetSystemStateOutput& GetSystemStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetSystemStateOutput* GetSystemStateOutput::default_instance_ = NULL;

GetSystemStateOutput* GetSystemStateOutput::New() const {
  return new GetSystemStateOutput;
}

void GetSystemStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_players()) {
      if (players_ != NULL) players_->::ccd::CurrentPlayers::Clear();
    }
    if (has_disk_info()) {
      if (disk_info_ != NULL) disk_info_->::ccd::DiskInfo::Clear();
    }
    if (has_device_locale()) {
      if (device_locale_ != &::google::protobuf::internal::kEmptyString) {
        device_locale_->clear();
      }
    }
    if (has_network_info()) {
      if (network_info_ != NULL) network_info_->::ccd::NetworkInfo::Clear();
    }
    if (has_ioac_status()) {
      if (ioac_status_ != NULL) ioac_status_->::ccd::IoacOverallStatus::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    background_mode_interval_sec_ = 0;
    only_mobile_network_available_ = false;
    enable_ioac_ = false;
    ioac_already_in_use_ = false;
    stream_power_mode_ = false;
    if (has_power_mode_status()) {
      if (power_mode_status_ != NULL) power_mode_status_->::ccd::PowerStatus::Clear();
    }
    if (has_pd_instance_id()) {
      if (pd_instance_id_ != &::google::protobuf::internal::kEmptyString) {
        pd_instance_id_->clear();
      }
    }
    pd_instance_id_num_ = 0u;
  }
  users_.Clear();
  logged_out_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSystemStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ccd.CurrentPlayers players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_disk_info;
        break;
      }
      
      // optional .ccd.DiskInfo disk_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disk_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_locale;
        break;
      }
      
      // optional string device_locale = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_locale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_locale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_locale().data(), this->device_locale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_network_info;
        break;
      }
      
      // optional .ccd.NetworkInfo network_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_users;
        break;
      }
      
      // repeated .ccd.CurrentUser users = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_users;
        if (input->ExpectTag(90)) goto parse_ioac_status;
        break;
      }
      
      // optional .ccd.IoacOverallStatus ioac_status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioac_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ioac_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_background_mode_interval_sec;
        break;
      }
      
      // optional sint32 background_mode_interval_sec = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_mode_interval_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &background_mode_interval_sec_)));
          set_has_background_mode_interval_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_logged_out_users;
        break;
      }
      
      // repeated .ccd.LoggedOutUser logged_out_users = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logged_out_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logged_out_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_logged_out_users;
        if (input->ExpectTag(112)) goto parse_enable_ioac;
        break;
      }
      
      // optional bool enable_ioac = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_ioac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ioac_)));
          set_has_enable_ioac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ioac_already_in_use;
        break;
      }
      
      // optional bool ioac_already_in_use = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioac_already_in_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ioac_already_in_use_)));
          set_has_ioac_already_in_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_only_mobile_network_available;
        break;
      }
      
      // optional bool only_mobile_network_available = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_mobile_network_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_mobile_network_available_)));
          set_has_only_mobile_network_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_stream_power_mode;
        break;
      }
      
      // optional bool stream_power_mode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_power_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_power_mode_)));
          set_has_stream_power_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_power_mode_status;
        break;
      }
      
      // optional .ccd.PowerStatus power_mode_status = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power_mode_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_mode_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_pd_instance_id;
        break;
      }
      
      // optional string pd_instance_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pd_instance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pd_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pd_instance_id().data(), this->pd_instance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_pd_instance_id_num;
        break;
      }
      
      // optional uint32 pd_instance_id_num = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pd_instance_id_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pd_instance_id_num_)));
          set_has_pd_instance_id_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ccd.CurrentPlayers players = 2;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(), output);
  }
  
  // optional fixed64 device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->device_id(), output);
  }
  
  // optional .ccd.DiskInfo disk_info = 5;
  if (has_disk_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->disk_info(), output);
  }
  
  // optional string device_locale = 8;
  if (has_device_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_locale().data(), this->device_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->device_locale(), output);
  }
  
  // optional .ccd.NetworkInfo network_info = 9;
  if (has_network_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->network_info(), output);
  }
  
  // repeated .ccd.CurrentUser users = 10;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->users(i), output);
  }
  
  // optional .ccd.IoacOverallStatus ioac_status = 11;
  if (has_ioac_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ioac_status(), output);
  }
  
  // optional sint32 background_mode_interval_sec = 12;
  if (has_background_mode_interval_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->background_mode_interval_sec(), output);
  }
  
  // repeated .ccd.LoggedOutUser logged_out_users = 13;
  for (int i = 0; i < this->logged_out_users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->logged_out_users(i), output);
  }
  
  // optional bool enable_ioac = 14;
  if (has_enable_ioac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_ioac(), output);
  }
  
  // optional bool ioac_already_in_use = 15;
  if (has_ioac_already_in_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ioac_already_in_use(), output);
  }
  
  // optional bool only_mobile_network_available = 21;
  if (has_only_mobile_network_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->only_mobile_network_available(), output);
  }
  
  // optional bool stream_power_mode = 22;
  if (has_stream_power_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->stream_power_mode(), output);
  }
  
  // optional .ccd.PowerStatus power_mode_status = 23;
  if (has_power_mode_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->power_mode_status(), output);
  }
  
  // optional string pd_instance_id = 24;
  if (has_pd_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pd_instance_id().data(), this->pd_instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->pd_instance_id(), output);
  }
  
  // optional uint32 pd_instance_id_num = 25;
  if (has_pd_instance_id_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->pd_instance_id_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSystemStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ccd.CurrentPlayers players = 2;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->players(), target);
  }
  
  // optional fixed64 device_id = 4;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->device_id(), target);
  }
  
  // optional .ccd.DiskInfo disk_info = 5;
  if (has_disk_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->disk_info(), target);
  }
  
  // optional string device_locale = 8;
  if (has_device_locale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_locale().data(), this->device_locale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_locale(), target);
  }
  
  // optional .ccd.NetworkInfo network_info = 9;
  if (has_network_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->network_info(), target);
  }
  
  // repeated .ccd.CurrentUser users = 10;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->users(i), target);
  }
  
  // optional .ccd.IoacOverallStatus ioac_status = 11;
  if (has_ioac_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ioac_status(), target);
  }
  
  // optional sint32 background_mode_interval_sec = 12;
  if (has_background_mode_interval_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->background_mode_interval_sec(), target);
  }
  
  // repeated .ccd.LoggedOutUser logged_out_users = 13;
  for (int i = 0; i < this->logged_out_users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->logged_out_users(i), target);
  }
  
  // optional bool enable_ioac = 14;
  if (has_enable_ioac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_ioac(), target);
  }
  
  // optional bool ioac_already_in_use = 15;
  if (has_ioac_already_in_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->ioac_already_in_use(), target);
  }
  
  // optional bool only_mobile_network_available = 21;
  if (has_only_mobile_network_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->only_mobile_network_available(), target);
  }
  
  // optional bool stream_power_mode = 22;
  if (has_stream_power_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->stream_power_mode(), target);
  }
  
  // optional .ccd.PowerStatus power_mode_status = 23;
  if (has_power_mode_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->power_mode_status(), target);
  }
  
  // optional string pd_instance_id = 24;
  if (has_pd_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pd_instance_id().data(), this->pd_instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->pd_instance_id(), target);
  }
  
  // optional uint32 pd_instance_id_num = 25;
  if (has_pd_instance_id_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->pd_instance_id_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSystemStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 device_id = 4;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // optional .ccd.CurrentPlayers players = 2;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players());
    }
    
    // optional .ccd.DiskInfo disk_info = 5;
    if (has_disk_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disk_info());
    }
    
    // optional string device_locale = 8;
    if (has_device_locale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_locale());
    }
    
    // optional .ccd.NetworkInfo network_info = 9;
    if (has_network_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network_info());
    }
    
    // optional .ccd.IoacOverallStatus ioac_status = 11;
    if (has_ioac_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ioac_status());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 background_mode_interval_sec = 12;
    if (has_background_mode_interval_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->background_mode_interval_sec());
    }
    
    // optional bool only_mobile_network_available = 21;
    if (has_only_mobile_network_available()) {
      total_size += 2 + 1;
    }
    
    // optional bool enable_ioac = 14;
    if (has_enable_ioac()) {
      total_size += 1 + 1;
    }
    
    // optional bool ioac_already_in_use = 15;
    if (has_ioac_already_in_use()) {
      total_size += 1 + 1;
    }
    
    // optional bool stream_power_mode = 22;
    if (has_stream_power_mode()) {
      total_size += 2 + 1;
    }
    
    // optional .ccd.PowerStatus power_mode_status = 23;
    if (has_power_mode_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_mode_status());
    }
    
    // optional string pd_instance_id = 24;
    if (has_pd_instance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pd_instance_id());
    }
    
    // optional uint32 pd_instance_id_num = 25;
    if (has_pd_instance_id_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pd_instance_id_num());
    }
    
  }
  // repeated .ccd.CurrentUser users = 10;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }
  
  // repeated .ccd.LoggedOutUser logged_out_users = 13;
  total_size += 1 * this->logged_out_users_size();
  for (int i = 0; i < this->logged_out_users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logged_out_users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSystemStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSystemStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSystemStateOutput::MergeFrom(const GetSystemStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  logged_out_users_.MergeFrom(from.logged_out_users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_players()) {
      mutable_players()->::ccd::CurrentPlayers::MergeFrom(from.players());
    }
    if (from.has_disk_info()) {
      mutable_disk_info()->::ccd::DiskInfo::MergeFrom(from.disk_info());
    }
    if (from.has_device_locale()) {
      set_device_locale(from.device_locale());
    }
    if (from.has_network_info()) {
      mutable_network_info()->::ccd::NetworkInfo::MergeFrom(from.network_info());
    }
    if (from.has_ioac_status()) {
      mutable_ioac_status()->::ccd::IoacOverallStatus::MergeFrom(from.ioac_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_background_mode_interval_sec()) {
      set_background_mode_interval_sec(from.background_mode_interval_sec());
    }
    if (from.has_only_mobile_network_available()) {
      set_only_mobile_network_available(from.only_mobile_network_available());
    }
    if (from.has_enable_ioac()) {
      set_enable_ioac(from.enable_ioac());
    }
    if (from.has_ioac_already_in_use()) {
      set_ioac_already_in_use(from.ioac_already_in_use());
    }
    if (from.has_stream_power_mode()) {
      set_stream_power_mode(from.stream_power_mode());
    }
    if (from.has_power_mode_status()) {
      mutable_power_mode_status()->::ccd::PowerStatus::MergeFrom(from.power_mode_status());
    }
    if (from.has_pd_instance_id()) {
      set_pd_instance_id(from.pd_instance_id());
    }
    if (from.has_pd_instance_id_num()) {
      set_pd_instance_id_num(from.pd_instance_id_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSystemStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSystemStateOutput::CopyFrom(const GetSystemStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemStateOutput::IsInitialized() const {
  
  if (has_players()) {
    if (!this->players().IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  for (int i = 0; i < logged_out_users_size(); i++) {
    if (!this->logged_out_users(i).IsInitialized()) return false;
  }
  if (has_disk_info()) {
    if (!this->disk_info().IsInitialized()) return false;
  }
  if (has_ioac_status()) {
    if (!this->ioac_status().IsInitialized()) return false;
  }
  if (has_power_mode_status()) {
    if (!this->power_mode_status().IsInitialized()) return false;
  }
  return true;
}

void GetSystemStateOutput::Swap(GetSystemStateOutput* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(players_, other->players_);
    users_.Swap(&other->users_);
    logged_out_users_.Swap(&other->logged_out_users_);
    std::swap(disk_info_, other->disk_info_);
    std::swap(device_locale_, other->device_locale_);
    std::swap(network_info_, other->network_info_);
    std::swap(ioac_status_, other->ioac_status_);
    std::swap(background_mode_interval_sec_, other->background_mode_interval_sec_);
    std::swap(only_mobile_network_available_, other->only_mobile_network_available_);
    std::swap(enable_ioac_, other->enable_ioac_);
    std::swap(ioac_already_in_use_, other->ioac_already_in_use_);
    std::swap(stream_power_mode_, other->stream_power_mode_);
    std::swap(power_mode_status_, other->power_mode_status_);
    std::swap(pd_instance_id_, other->pd_instance_id_);
    std::swap(pd_instance_id_num_, other->pd_instance_id_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSystemStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSystemStateOutput_descriptor_;
  metadata.reflection = GetSystemStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginInput::kPlayerIndexFieldNumber;
const int LoginInput::kUserNameFieldNumber;
const int LoginInput::kPasswordFieldNumber;
const int LoginInput::kPairingTokenFieldNumber;
const int LoginInput::kAcEulaAgreedFieldNumber;
const int LoginInput::kSkipIfAlreadyCorrectFieldNumber;
#endif  // !_MSC_VER

LoginInput::LoginInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginInput::InitAsDefaultInstance() {
}

LoginInput::LoginInput(const LoginInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginInput::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pairing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ac_eula_agreed_ = false;
  skip_if_already_correct_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginInput::~LoginInput() {
  SharedDtor();
}

void LoginInput::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pairing_token_;
  }
  if (this != default_instance_) {
  }
}

void LoginInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginInput_descriptor_;
}

const LoginInput& LoginInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LoginInput* LoginInput::default_instance_ = NULL;

LoginInput* LoginInput::New() const {
  return new LoginInput;
}

void LoginInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_index_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_pairing_token()) {
      if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
        pairing_token_->clear();
      }
    }
    ac_eula_agreed_ = false;
    skip_if_already_correct_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_index = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skip_if_already_correct;
        break;
      }
      
      // optional bool skip_if_already_correct = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip_if_already_correct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_if_already_correct_)));
          set_has_skip_if_already_correct();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ac_eula_agreed;
        break;
      }
      
      // optional bool ac_eula_agreed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ac_eula_agreed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ac_eula_agreed_)));
          set_has_ac_eula_agreed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pairing_token;
        break;
      }
      
      // optional string pairing_token = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairing_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairing_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairing_token().data(), this->pairing_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_index = 1 [default = 0];
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_index(), output);
  }
  
  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional bool skip_if_already_correct = 5 [default = true];
  if (has_skip_if_already_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->skip_if_already_correct(), output);
  }
  
  // optional bool ac_eula_agreed = 14;
  if (has_ac_eula_agreed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ac_eula_agreed(), output);
  }
  
  // optional string pairing_token = 15;
  if (has_pairing_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairing_token().data(), this->pairing_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->pairing_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_index = 1 [default = 0];
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_index(), target);
  }
  
  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional bool skip_if_already_correct = 5 [default = true];
  if (has_skip_if_already_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->skip_if_already_correct(), target);
  }
  
  // optional bool ac_eula_agreed = 14;
  if (has_ac_eula_agreed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ac_eula_agreed(), target);
  }
  
  // optional string pairing_token = 15;
  if (has_pairing_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairing_token().data(), this->pairing_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pairing_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_index = 1 [default = 0];
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }
    
    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string pairing_token = 15;
    if (has_pairing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairing_token());
    }
    
    // optional bool ac_eula_agreed = 14;
    if (has_ac_eula_agreed()) {
      total_size += 1 + 1;
    }
    
    // optional bool skip_if_already_correct = 5 [default = true];
    if (has_skip_if_already_correct()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginInput::MergeFrom(const LoginInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_pairing_token()) {
      set_pairing_token(from.pairing_token());
    }
    if (from.has_ac_eula_agreed()) {
      set_ac_eula_agreed(from.ac_eula_agreed());
    }
    if (from.has_skip_if_already_correct()) {
      set_skip_if_already_correct(from.skip_if_already_correct());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginInput::CopyFrom(const LoginInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void LoginInput::Swap(LoginInput* other) {
  if (other != this) {
    std::swap(player_index_, other->player_index_);
    std::swap(user_name_, other->user_name_);
    std::swap(password_, other->password_);
    std::swap(pairing_token_, other->pairing_token_);
    std::swap(ac_eula_agreed_, other->ac_eula_agreed_);
    std::swap(skip_if_already_correct_, other->skip_if_already_correct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginInput_descriptor_;
  metadata.reflection = LoginInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginOutput::kUserIdFieldNumber;
#endif  // !_MSC_VER

LoginOutput::LoginOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginOutput::InitAsDefaultInstance() {
}

LoginOutput::LoginOutput(const LoginOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginOutput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginOutput::~LoginOutput() {
  SharedDtor();
}

void LoginOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginOutput_descriptor_;
}

const LoginOutput& LoginOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LoginOutput* LoginOutput::default_instance_ = NULL;

LoginOutput* LoginOutput::New() const {
  return new LoginOutput;
}

void LoginOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginOutput::MergeFrom(const LoginOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginOutput::CopyFrom(const LoginOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoginOutput::Swap(LoginOutput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginOutput_descriptor_;
  metadata.reflection = LoginOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutInput::kPlayerIndexFieldNumber;
const int LogoutInput::kLocalUserIdFieldNumber;
const int LogoutInput::kWarnIfNoUserFieldNumber;
#endif  // !_MSC_VER

LogoutInput::LogoutInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutInput::InitAsDefaultInstance() {
}

LogoutInput::LogoutInput(const LogoutInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutInput::SharedCtor() {
  _cached_size_ = 0;
  player_index_ = 0;
  local_user_id_ = GOOGLE_ULONGLONG(0);
  warn_if_no_user_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutInput::~LogoutInput() {
  SharedDtor();
}

void LogoutInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutInput_descriptor_;
}

const LogoutInput& LogoutInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LogoutInput* LogoutInput::default_instance_ = NULL;

LogoutInput* LogoutInput::New() const {
  return new LogoutInput;
}

void LogoutInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_index_ = 0;
    local_user_id_ = GOOGLE_ULONGLONG(0);
    warn_if_no_user_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
          set_has_player_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_local_user_id;
        break;
      }
      
      // optional fixed64 local_user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &local_user_id_)));
          set_has_local_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_warn_if_no_user;
        break;
      }
      
      // optional bool warn_if_no_user = 9 [default = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warn_if_no_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warn_if_no_user_)));
          set_has_warn_if_no_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_index = 1;
  if (has_player_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_index(), output);
  }
  
  // optional fixed64 local_user_id = 2;
  if (has_local_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->local_user_id(), output);
  }
  
  // optional bool warn_if_no_user = 9 [default = true];
  if (has_warn_if_no_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->warn_if_no_user(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_index = 1;
  if (has_player_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_index(), target);
  }
  
  // optional fixed64 local_user_id = 2;
  if (has_local_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->local_user_id(), target);
  }
  
  // optional bool warn_if_no_user = 9 [default = true];
  if (has_warn_if_no_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->warn_if_no_user(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_index = 1;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }
    
    // optional fixed64 local_user_id = 2;
    if (has_local_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool warn_if_no_user = 9 [default = true];
    if (has_warn_if_no_user()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutInput::MergeFrom(const LogoutInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_index()) {
      set_player_index(from.player_index());
    }
    if (from.has_local_user_id()) {
      set_local_user_id(from.local_user_id());
    }
    if (from.has_warn_if_no_user()) {
      set_warn_if_no_user(from.warn_if_no_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutInput::CopyFrom(const LogoutInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutInput::IsInitialized() const {
  
  return true;
}

void LogoutInput::Swap(LogoutInput* other) {
  if (other != this) {
    std::swap(player_index_, other->player_index_);
    std::swap(local_user_id_, other->local_user_id_);
    std::swap(warn_if_no_user_, other->warn_if_no_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutInput_descriptor_;
  metadata.reflection = LogoutInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfraHttpRequestInput::kUserIdFieldNumber;
const int InfraHttpRequestInput::kServiceFieldNumber;
const int InfraHttpRequestInput::kSecureFieldNumber;
const int InfraHttpRequestInput::kMethodFieldNumber;
const int InfraHttpRequestInput::kUrlSuffixFieldNumber;
const int InfraHttpRequestInput::kPostDataFieldNumber;
const int InfraHttpRequestInput::kPrivilegedOperationFieldNumber;
#endif  // !_MSC_VER

InfraHttpRequestInput::InfraHttpRequestInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfraHttpRequestInput::InitAsDefaultInstance() {
}

InfraHttpRequestInput::InfraHttpRequestInput(const InfraHttpRequestInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfraHttpRequestInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  service_ = 1;
  secure_ = true;
  method_ = 1;
  url_suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  post_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  privileged_operation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfraHttpRequestInput::~InfraHttpRequestInput() {
  SharedDtor();
}

void InfraHttpRequestInput::SharedDtor() {
  if (url_suffix_ != &::google::protobuf::internal::kEmptyString) {
    delete url_suffix_;
  }
  if (post_data_ != &::google::protobuf::internal::kEmptyString) {
    delete post_data_;
  }
  if (this != default_instance_) {
  }
}

void InfraHttpRequestInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfraHttpRequestInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfraHttpRequestInput_descriptor_;
}

const InfraHttpRequestInput& InfraHttpRequestInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

InfraHttpRequestInput* InfraHttpRequestInput::default_instance_ = NULL;

InfraHttpRequestInput* InfraHttpRequestInput::New() const {
  return new InfraHttpRequestInput;
}

void InfraHttpRequestInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    service_ = 1;
    secure_ = true;
    method_ = 1;
    if (has_url_suffix()) {
      if (url_suffix_ != &::google::protobuf::internal::kEmptyString) {
        url_suffix_->clear();
      }
    }
    if (has_post_data()) {
      if (post_data_ != &::google::protobuf::internal::kEmptyString) {
        post_data_->clear();
      }
    }
    privileged_operation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfraHttpRequestInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service;
        break;
      }
      
      // required .ccd.InfraHttpService_t service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::InfraHttpService_t_IsValid(value)) {
            set_service(static_cast< ccd::InfraHttpService_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_secure;
        break;
      }
      
      // required bool secure = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_method;
        break;
      }
      
      // optional .ccd.InfraHttpRequestMethod_t method = 4 [default = INFRA_HTTP_METHOD_GET];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::InfraHttpRequestMethod_t_IsValid(value)) {
            set_method(static_cast< ccd::InfraHttpRequestMethod_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_url_suffix;
        break;
      }
      
      // required string url_suffix = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_suffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_suffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_suffix().data(), this->url_suffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_post_data;
        break;
      }
      
      // optional string post_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post_data().data(), this->post_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_privileged_operation;
        break;
      }
      
      // optional bool privileged_operation = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privileged_operation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &privileged_operation_)));
          set_has_privileged_operation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfraHttpRequestInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required .ccd.InfraHttpService_t service = 2;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service(), output);
  }
  
  // required bool secure = 3 [default = true];
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->secure(), output);
  }
  
  // optional .ccd.InfraHttpRequestMethod_t method = 4 [default = INFRA_HTTP_METHOD_GET];
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->method(), output);
  }
  
  // required string url_suffix = 5;
  if (has_url_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_suffix().data(), this->url_suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->url_suffix(), output);
  }
  
  // optional string post_data = 6;
  if (has_post_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post_data().data(), this->post_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->post_data(), output);
  }
  
  // optional bool privileged_operation = 7 [default = false];
  if (has_privileged_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->privileged_operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfraHttpRequestInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required .ccd.InfraHttpService_t service = 2;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service(), target);
  }
  
  // required bool secure = 3 [default = true];
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->secure(), target);
  }
  
  // optional .ccd.InfraHttpRequestMethod_t method = 4 [default = INFRA_HTTP_METHOD_GET];
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->method(), target);
  }
  
  // required string url_suffix = 5;
  if (has_url_suffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_suffix().data(), this->url_suffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url_suffix(), target);
  }
  
  // optional string post_data = 6;
  if (has_post_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post_data().data(), this->post_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->post_data(), target);
  }
  
  // optional bool privileged_operation = 7 [default = false];
  if (has_privileged_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->privileged_operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfraHttpRequestInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.InfraHttpService_t service = 2;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());
    }
    
    // required bool secure = 3 [default = true];
    if (has_secure()) {
      total_size += 1 + 1;
    }
    
    // optional .ccd.InfraHttpRequestMethod_t method = 4 [default = INFRA_HTTP_METHOD_GET];
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
    }
    
    // required string url_suffix = 5;
    if (has_url_suffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_suffix());
    }
    
    // optional string post_data = 6;
    if (has_post_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post_data());
    }
    
    // optional bool privileged_operation = 7 [default = false];
    if (has_privileged_operation()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfraHttpRequestInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfraHttpRequestInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfraHttpRequestInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfraHttpRequestInput::MergeFrom(const InfraHttpRequestInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_url_suffix()) {
      set_url_suffix(from.url_suffix());
    }
    if (from.has_post_data()) {
      set_post_data(from.post_data());
    }
    if (from.has_privileged_operation()) {
      set_privileged_operation(from.privileged_operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfraHttpRequestInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfraHttpRequestInput::CopyFrom(const InfraHttpRequestInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfraHttpRequestInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000016) != 0x00000016) return false;
  
  return true;
}

void InfraHttpRequestInput::Swap(InfraHttpRequestInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(service_, other->service_);
    std::swap(secure_, other->secure_);
    std::swap(method_, other->method_);
    std::swap(url_suffix_, other->url_suffix_);
    std::swap(post_data_, other->post_data_);
    std::swap(privileged_operation_, other->privileged_operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfraHttpRequestInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfraHttpRequestInput_descriptor_;
  metadata.reflection = InfraHttpRequestInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfraHttpRequestOutput::kResponseCodeFieldNumber;
const int InfraHttpRequestOutput::kHttpResponseFieldNumber;
#endif  // !_MSC_VER

InfraHttpRequestOutput::InfraHttpRequestOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InfraHttpRequestOutput::InitAsDefaultInstance() {
}

InfraHttpRequestOutput::InfraHttpRequestOutput(const InfraHttpRequestOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InfraHttpRequestOutput::SharedCtor() {
  _cached_size_ = 0;
  response_code_ = 0;
  http_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfraHttpRequestOutput::~InfraHttpRequestOutput() {
  SharedDtor();
}

void InfraHttpRequestOutput::SharedDtor() {
  if (http_response_ != &::google::protobuf::internal::kEmptyString) {
    delete http_response_;
  }
  if (this != default_instance_) {
  }
}

void InfraHttpRequestOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfraHttpRequestOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfraHttpRequestOutput_descriptor_;
}

const InfraHttpRequestOutput& InfraHttpRequestOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

InfraHttpRequestOutput* InfraHttpRequestOutput::default_instance_ = NULL;

InfraHttpRequestOutput* InfraHttpRequestOutput::New() const {
  return new InfraHttpRequestOutput;
}

void InfraHttpRequestOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    response_code_ = 0;
    if (has_http_response()) {
      if (http_response_ != &::google::protobuf::internal::kEmptyString) {
        http_response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfraHttpRequestOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 response_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_code_)));
          set_has_response_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_http_response;
        break;
      }
      
      // optional string http_response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_http_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->http_response().data(), this->http_response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InfraHttpRequestOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 response_code = 1;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->response_code(), output);
  }
  
  // optional string http_response = 2;
  if (has_http_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->http_response().data(), this->http_response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->http_response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InfraHttpRequestOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 response_code = 1;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->response_code(), target);
  }
  
  // optional string http_response = 2;
  if (has_http_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->http_response().data(), this->http_response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->http_response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InfraHttpRequestOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 response_code = 1;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_code());
    }
    
    // optional string http_response = 2;
    if (has_http_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfraHttpRequestOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfraHttpRequestOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfraHttpRequestOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfraHttpRequestOutput::MergeFrom(const InfraHttpRequestOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_http_response()) {
      set_http_response(from.http_response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfraHttpRequestOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfraHttpRequestOutput::CopyFrom(const InfraHttpRequestOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfraHttpRequestOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InfraHttpRequestOutput::Swap(InfraHttpRequestOutput* other) {
  if (other != this) {
    std::swap(response_code_, other->response_code_);
    std::swap(http_response_, other->http_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfraHttpRequestOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfraHttpRequestOutput_descriptor_;
  metadata.reflection = InfraHttpRequestOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterStorageNodeInput::kUserIdFieldNumber;
#endif  // !_MSC_VER

RegisterStorageNodeInput::RegisterStorageNodeInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterStorageNodeInput::InitAsDefaultInstance() {
}

RegisterStorageNodeInput::RegisterStorageNodeInput(const RegisterStorageNodeInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterStorageNodeInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterStorageNodeInput::~RegisterStorageNodeInput() {
  SharedDtor();
}

void RegisterStorageNodeInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterStorageNodeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterStorageNodeInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterStorageNodeInput_descriptor_;
}

const RegisterStorageNodeInput& RegisterStorageNodeInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RegisterStorageNodeInput* RegisterStorageNodeInput::default_instance_ = NULL;

RegisterStorageNodeInput* RegisterStorageNodeInput::New() const {
  return new RegisterStorageNodeInput;
}

void RegisterStorageNodeInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterStorageNodeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterStorageNodeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterStorageNodeInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterStorageNodeInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterStorageNodeInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterStorageNodeInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterStorageNodeInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterStorageNodeInput::MergeFrom(const RegisterStorageNodeInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterStorageNodeInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterStorageNodeInput::CopyFrom(const RegisterStorageNodeInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterStorageNodeInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RegisterStorageNodeInput::Swap(RegisterStorageNodeInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterStorageNodeInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterStorageNodeInput_descriptor_;
  metadata.reflection = RegisterStorageNodeInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnregisterStorageNodeInput::kUserIdFieldNumber;
const int UnregisterStorageNodeInput::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

UnregisterStorageNodeInput::UnregisterStorageNodeInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnregisterStorageNodeInput::InitAsDefaultInstance() {
}

UnregisterStorageNodeInput::UnregisterStorageNodeInput(const UnregisterStorageNodeInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnregisterStorageNodeInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnregisterStorageNodeInput::~UnregisterStorageNodeInput() {
  SharedDtor();
}

void UnregisterStorageNodeInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnregisterStorageNodeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterStorageNodeInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnregisterStorageNodeInput_descriptor_;
}

const UnregisterStorageNodeInput& UnregisterStorageNodeInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UnregisterStorageNodeInput* UnregisterStorageNodeInput::default_instance_ = NULL;

UnregisterStorageNodeInput* UnregisterStorageNodeInput::New() const {
  return new UnregisterStorageNodeInput;
}

void UnregisterStorageNodeInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnregisterStorageNodeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnregisterStorageNodeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnregisterStorageNodeInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnregisterStorageNodeInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterStorageNodeInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnregisterStorageNodeInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnregisterStorageNodeInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnregisterStorageNodeInput::MergeFrom(const UnregisterStorageNodeInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnregisterStorageNodeInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterStorageNodeInput::CopyFrom(const UnregisterStorageNodeInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterStorageNodeInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnregisterStorageNodeInput::Swap(UnregisterStorageNodeInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnregisterStorageNodeInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnregisterStorageNodeInput_descriptor_;
  metadata.reflection = UnregisterStorageNodeInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteFileAccessControlDirSpec::kDirFieldNumber;
const int RemoteFileAccessControlDirSpec::kNameFieldNumber;
const int RemoteFileAccessControlDirSpec::kIsUserFieldNumber;
const int RemoteFileAccessControlDirSpec::kIsAllowedFieldNumber;
#endif  // !_MSC_VER

RemoteFileAccessControlDirSpec::RemoteFileAccessControlDirSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteFileAccessControlDirSpec::InitAsDefaultInstance() {
}

RemoteFileAccessControlDirSpec::RemoteFileAccessControlDirSpec(const RemoteFileAccessControlDirSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteFileAccessControlDirSpec::SharedCtor() {
  _cached_size_ = 0;
  dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_user_ = false;
  is_allowed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteFileAccessControlDirSpec::~RemoteFileAccessControlDirSpec() {
  SharedDtor();
}

void RemoteFileAccessControlDirSpec::SharedDtor() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RemoteFileAccessControlDirSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteFileAccessControlDirSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteFileAccessControlDirSpec_descriptor_;
}

const RemoteFileAccessControlDirSpec& RemoteFileAccessControlDirSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RemoteFileAccessControlDirSpec* RemoteFileAccessControlDirSpec::default_instance_ = NULL;

RemoteFileAccessControlDirSpec* RemoteFileAccessControlDirSpec::New() const {
  return new RemoteFileAccessControlDirSpec;
}

void RemoteFileAccessControlDirSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dir()) {
      if (dir_ != &::google::protobuf::internal::kEmptyString) {
        dir_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_user_ = false;
    is_allowed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteFileAccessControlDirSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_user;
        break;
      }
      
      // required bool is_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_user_)));
          set_has_is_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_allowed;
        break;
      }
      
      // required bool is_allowed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_allowed_)));
          set_has_is_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteFileAccessControlDirSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dir(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required bool is_user = 3;
  if (has_is_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_user(), output);
  }
  
  // required bool is_allowed = 4;
  if (has_is_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_allowed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteFileAccessControlDirSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dir(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required bool is_user = 3;
  if (has_is_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_user(), target);
  }
  
  // required bool is_allowed = 4;
  if (has_is_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_allowed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteFileAccessControlDirSpec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dir = 1;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool is_user = 3;
    if (has_is_user()) {
      total_size += 1 + 1;
    }
    
    // required bool is_allowed = 4;
    if (has_is_allowed()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteFileAccessControlDirSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteFileAccessControlDirSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteFileAccessControlDirSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteFileAccessControlDirSpec::MergeFrom(const RemoteFileAccessControlDirSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_user()) {
      set_is_user(from.is_user());
    }
    if (from.has_is_allowed()) {
      set_is_allowed(from.is_allowed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteFileAccessControlDirSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFileAccessControlDirSpec::CopyFrom(const RemoteFileAccessControlDirSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFileAccessControlDirSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  
  return true;
}

void RemoteFileAccessControlDirSpec::Swap(RemoteFileAccessControlDirSpec* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(name_, other->name_);
    std::swap(is_user_, other->is_user_);
    std::swap(is_allowed_, other->is_allowed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteFileAccessControlDirSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteFileAccessControlDirSpec_descriptor_;
  metadata.reflection = RemoteFileAccessControlDirSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteFileAccessControlDirs::kDirsFieldNumber;
#endif  // !_MSC_VER

RemoteFileAccessControlDirs::RemoteFileAccessControlDirs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteFileAccessControlDirs::InitAsDefaultInstance() {
}

RemoteFileAccessControlDirs::RemoteFileAccessControlDirs(const RemoteFileAccessControlDirs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteFileAccessControlDirs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteFileAccessControlDirs::~RemoteFileAccessControlDirs() {
  SharedDtor();
}

void RemoteFileAccessControlDirs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoteFileAccessControlDirs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteFileAccessControlDirs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteFileAccessControlDirs_descriptor_;
}

const RemoteFileAccessControlDirs& RemoteFileAccessControlDirs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RemoteFileAccessControlDirs* RemoteFileAccessControlDirs::default_instance_ = NULL;

RemoteFileAccessControlDirs* RemoteFileAccessControlDirs::New() const {
  return new RemoteFileAccessControlDirs;
}

void RemoteFileAccessControlDirs::Clear() {
  dirs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteFileAccessControlDirs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.RemoteFileAccessControlDirSpec dirs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dirs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteFileAccessControlDirs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.RemoteFileAccessControlDirSpec dirs = 1;
  for (int i = 0; i < this->dirs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dirs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteFileAccessControlDirs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.RemoteFileAccessControlDirSpec dirs = 1;
  for (int i = 0; i < this->dirs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dirs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteFileAccessControlDirs::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.RemoteFileAccessControlDirSpec dirs = 1;
  total_size += 1 * this->dirs_size();
  for (int i = 0; i < this->dirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteFileAccessControlDirs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteFileAccessControlDirs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteFileAccessControlDirs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteFileAccessControlDirs::MergeFrom(const RemoteFileAccessControlDirs& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirs_.MergeFrom(from.dirs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteFileAccessControlDirs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteFileAccessControlDirs::CopyFrom(const RemoteFileAccessControlDirs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteFileAccessControlDirs::IsInitialized() const {
  
  for (int i = 0; i < dirs_size(); i++) {
    if (!this->dirs(i).IsInitialized()) return false;
  }
  return true;
}

void RemoteFileAccessControlDirs::Swap(RemoteFileAccessControlDirs* other) {
  if (other != this) {
    dirs_.Swap(&other->dirs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteFileAccessControlDirs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteFileAccessControlDirs_descriptor_;
  metadata.reflection = RemoteFileAccessControlDirs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateStorageNodeInput::kUserIdFieldNumber;
const int UpdateStorageNodeInput::kDeviceIdFieldNumber;
const int UpdateStorageNodeInput::kFeatureMediaServerEnabledFieldNumber;
const int UpdateStorageNodeInput::kFeatureVirtDriveEnabledFieldNumber;
const int UpdateStorageNodeInput::kFeatureRemoteFileAccessEnabledFieldNumber;
const int UpdateStorageNodeInput::kFeatureMyStorageServerEnabledFieldNumber;
const int UpdateStorageNodeInput::kAddRemotefileAccessControlDirFieldNumber;
const int UpdateStorageNodeInput::kRemoveRemotefileAccessControlDirFieldNumber;
#endif  // !_MSC_VER

UpdateStorageNodeInput::UpdateStorageNodeInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateStorageNodeInput::InitAsDefaultInstance() {
  add_remotefile_access_control_dir_ = const_cast< ::ccd::RemoteFileAccessControlDirSpec*>(&::ccd::RemoteFileAccessControlDirSpec::default_instance());
  remove_remotefile_access_control_dir_ = const_cast< ::ccd::RemoteFileAccessControlDirSpec*>(&::ccd::RemoteFileAccessControlDirSpec::default_instance());
}

UpdateStorageNodeInput::UpdateStorageNodeInput(const UpdateStorageNodeInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateStorageNodeInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  feature_media_server_enabled_ = false;
  feature_virt_drive_enabled_ = false;
  feature_remote_file_access_enabled_ = false;
  feature_my_storage_server_enabled_ = false;
  add_remotefile_access_control_dir_ = NULL;
  remove_remotefile_access_control_dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateStorageNodeInput::~UpdateStorageNodeInput() {
  SharedDtor();
}

void UpdateStorageNodeInput::SharedDtor() {
  if (this != default_instance_) {
    delete add_remotefile_access_control_dir_;
    delete remove_remotefile_access_control_dir_;
  }
}

void UpdateStorageNodeInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateStorageNodeInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateStorageNodeInput_descriptor_;
}

const UpdateStorageNodeInput& UpdateStorageNodeInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateStorageNodeInput* UpdateStorageNodeInput::default_instance_ = NULL;

UpdateStorageNodeInput* UpdateStorageNodeInput::New() const {
  return new UpdateStorageNodeInput;
}

void UpdateStorageNodeInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
    feature_media_server_enabled_ = false;
    feature_virt_drive_enabled_ = false;
    feature_remote_file_access_enabled_ = false;
    feature_my_storage_server_enabled_ = false;
    if (has_add_remotefile_access_control_dir()) {
      if (add_remotefile_access_control_dir_ != NULL) add_remotefile_access_control_dir_->::ccd::RemoteFileAccessControlDirSpec::Clear();
    }
    if (has_remove_remotefile_access_control_dir()) {
      if (remove_remotefile_access_control_dir_ != NULL) remove_remotefile_access_control_dir_->::ccd::RemoteFileAccessControlDirSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateStorageNodeInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feature_media_server_enabled;
        break;
      }
      
      // optional bool feature_media_server_enabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_media_server_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_media_server_enabled_)));
          set_has_feature_media_server_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_feature_virt_drive_enabled;
        break;
      }
      
      // optional bool feature_virt_drive_enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_virt_drive_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_virt_drive_enabled_)));
          set_has_feature_virt_drive_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_feature_remote_file_access_enabled;
        break;
      }
      
      // optional bool feature_remote_file_access_enabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_remote_file_access_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_remote_file_access_enabled_)));
          set_has_feature_remote_file_access_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_add_remotefile_access_control_dir;
        break;
      }
      
      // optional .ccd.RemoteFileAccessControlDirSpec add_remotefile_access_control_dir = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_remotefile_access_control_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_remotefile_access_control_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_remove_remotefile_access_control_dir;
        break;
      }
      
      // optional .ccd.RemoteFileAccessControlDirSpec remove_remotefile_access_control_dir = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_remotefile_access_control_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_remotefile_access_control_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_feature_my_storage_server_enabled;
        break;
      }
      
      // optional bool feature_my_storage_server_enabled = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_my_storage_server_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_my_storage_server_enabled_)));
          set_has_feature_my_storage_server_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateStorageNodeInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  // optional bool feature_media_server_enabled = 3;
  if (has_feature_media_server_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->feature_media_server_enabled(), output);
  }
  
  // optional bool feature_virt_drive_enabled = 4;
  if (has_feature_virt_drive_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->feature_virt_drive_enabled(), output);
  }
  
  // optional bool feature_remote_file_access_enabled = 5;
  if (has_feature_remote_file_access_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->feature_remote_file_access_enabled(), output);
  }
  
  // optional .ccd.RemoteFileAccessControlDirSpec add_remotefile_access_control_dir = 6;
  if (has_add_remotefile_access_control_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->add_remotefile_access_control_dir(), output);
  }
  
  // optional .ccd.RemoteFileAccessControlDirSpec remove_remotefile_access_control_dir = 7;
  if (has_remove_remotefile_access_control_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->remove_remotefile_access_control_dir(), output);
  }
  
  // optional bool feature_my_storage_server_enabled = 8;
  if (has_feature_my_storage_server_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->feature_my_storage_server_enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateStorageNodeInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  // optional bool feature_media_server_enabled = 3;
  if (has_feature_media_server_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->feature_media_server_enabled(), target);
  }
  
  // optional bool feature_virt_drive_enabled = 4;
  if (has_feature_virt_drive_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->feature_virt_drive_enabled(), target);
  }
  
  // optional bool feature_remote_file_access_enabled = 5;
  if (has_feature_remote_file_access_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->feature_remote_file_access_enabled(), target);
  }
  
  // optional .ccd.RemoteFileAccessControlDirSpec add_remotefile_access_control_dir = 6;
  if (has_add_remotefile_access_control_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->add_remotefile_access_control_dir(), target);
  }
  
  // optional .ccd.RemoteFileAccessControlDirSpec remove_remotefile_access_control_dir = 7;
  if (has_remove_remotefile_access_control_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->remove_remotefile_access_control_dir(), target);
  }
  
  // optional bool feature_my_storage_server_enabled = 8;
  if (has_feature_my_storage_server_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->feature_my_storage_server_enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateStorageNodeInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool feature_media_server_enabled = 3;
    if (has_feature_media_server_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool feature_virt_drive_enabled = 4;
    if (has_feature_virt_drive_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool feature_remote_file_access_enabled = 5;
    if (has_feature_remote_file_access_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool feature_my_storage_server_enabled = 8;
    if (has_feature_my_storage_server_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional .ccd.RemoteFileAccessControlDirSpec add_remotefile_access_control_dir = 6;
    if (has_add_remotefile_access_control_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_remotefile_access_control_dir());
    }
    
    // optional .ccd.RemoteFileAccessControlDirSpec remove_remotefile_access_control_dir = 7;
    if (has_remove_remotefile_access_control_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_remotefile_access_control_dir());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateStorageNodeInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateStorageNodeInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateStorageNodeInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateStorageNodeInput::MergeFrom(const UpdateStorageNodeInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_feature_media_server_enabled()) {
      set_feature_media_server_enabled(from.feature_media_server_enabled());
    }
    if (from.has_feature_virt_drive_enabled()) {
      set_feature_virt_drive_enabled(from.feature_virt_drive_enabled());
    }
    if (from.has_feature_remote_file_access_enabled()) {
      set_feature_remote_file_access_enabled(from.feature_remote_file_access_enabled());
    }
    if (from.has_feature_my_storage_server_enabled()) {
      set_feature_my_storage_server_enabled(from.feature_my_storage_server_enabled());
    }
    if (from.has_add_remotefile_access_control_dir()) {
      mutable_add_remotefile_access_control_dir()->::ccd::RemoteFileAccessControlDirSpec::MergeFrom(from.add_remotefile_access_control_dir());
    }
    if (from.has_remove_remotefile_access_control_dir()) {
      mutable_remove_remotefile_access_control_dir()->::ccd::RemoteFileAccessControlDirSpec::MergeFrom(from.remove_remotefile_access_control_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateStorageNodeInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateStorageNodeInput::CopyFrom(const UpdateStorageNodeInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateStorageNodeInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_add_remotefile_access_control_dir()) {
    if (!this->add_remotefile_access_control_dir().IsInitialized()) return false;
  }
  if (has_remove_remotefile_access_control_dir()) {
    if (!this->remove_remotefile_access_control_dir().IsInitialized()) return false;
  }
  return true;
}

void UpdateStorageNodeInput::Swap(UpdateStorageNodeInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(feature_media_server_enabled_, other->feature_media_server_enabled_);
    std::swap(feature_virt_drive_enabled_, other->feature_virt_drive_enabled_);
    std::swap(feature_remote_file_access_enabled_, other->feature_remote_file_access_enabled_);
    std::swap(feature_my_storage_server_enabled_, other->feature_my_storage_server_enabled_);
    std::swap(add_remotefile_access_control_dir_, other->add_remotefile_access_control_dir_);
    std::swap(remove_remotefile_access_control_dir_, other->remove_remotefile_access_control_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateStorageNodeInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateStorageNodeInput_descriptor_;
  metadata.reflection = UpdateStorageNodeInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LanDeviceRouteInfo::kTypeFieldNumber;
const int LanDeviceRouteInfo::kIpV4AddressFieldNumber;
const int LanDeviceRouteInfo::kIpV6AddressFieldNumber;
const int LanDeviceRouteInfo::kMediaServerPortFieldNumber;
const int LanDeviceRouteInfo::kVirtualDrivePortFieldNumber;
const int LanDeviceRouteInfo::kWebFrontPortFieldNumber;
const int LanDeviceRouteInfo::kTunnelServicePortFieldNumber;
const int LanDeviceRouteInfo::kExtTunnelServicePortFieldNumber;
#endif  // !_MSC_VER

LanDeviceRouteInfo::LanDeviceRouteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LanDeviceRouteInfo::InitAsDefaultInstance() {
}

LanDeviceRouteInfo::LanDeviceRouteInfo(const LanDeviceRouteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LanDeviceRouteInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ip_v4_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_v6_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  media_server_port_ = 0u;
  virtual_drive_port_ = 0u;
  web_front_port_ = 0u;
  tunnel_service_port_ = 0u;
  ext_tunnel_service_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanDeviceRouteInfo::~LanDeviceRouteInfo() {
  SharedDtor();
}

void LanDeviceRouteInfo::SharedDtor() {
  if (ip_v4_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_v4_address_;
  }
  if (ip_v6_address_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_v6_address_;
  }
  if (this != default_instance_) {
  }
}

void LanDeviceRouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanDeviceRouteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanDeviceRouteInfo_descriptor_;
}

const LanDeviceRouteInfo& LanDeviceRouteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LanDeviceRouteInfo* LanDeviceRouteInfo::default_instance_ = NULL;

LanDeviceRouteInfo* LanDeviceRouteInfo::New() const {
  return new LanDeviceRouteInfo;
}

void LanDeviceRouteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_ip_v4_address()) {
      if (ip_v4_address_ != &::google::protobuf::internal::kEmptyString) {
        ip_v4_address_->clear();
      }
    }
    if (has_ip_v6_address()) {
      if (ip_v6_address_ != &::google::protobuf::internal::kEmptyString) {
        ip_v6_address_->clear();
      }
    }
    media_server_port_ = 0u;
    virtual_drive_port_ = 0u;
    web_front_port_ = 0u;
    tunnel_service_port_ = 0u;
    ext_tunnel_service_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LanDeviceRouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.LanInterfaceType_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::LanInterfaceType_t_IsValid(value)) {
            set_type(static_cast< ccd::LanInterfaceType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip_v4_address;
        break;
      }
      
      // optional string ip_v4_address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_v4_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_v4_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_v4_address().data(), this->ip_v4_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip_v6_address;
        break;
      }
      
      // optional string ip_v6_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_v6_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_v6_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_v6_address().data(), this->ip_v6_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_media_server_port;
        break;
      }
      
      // optional uint32 media_server_port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_media_server_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &media_server_port_)));
          set_has_media_server_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_virtual_drive_port;
        break;
      }
      
      // optional uint32 virtual_drive_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_drive_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &virtual_drive_port_)));
          set_has_virtual_drive_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_web_front_port;
        break;
      }
      
      // optional uint32 web_front_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_web_front_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &web_front_port_)));
          set_has_web_front_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tunnel_service_port;
        break;
      }
      
      // optional uint32 tunnel_service_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tunnel_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tunnel_service_port_)));
          set_has_tunnel_service_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ext_tunnel_service_port;
        break;
      }
      
      // optional uint32 ext_tunnel_service_port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ext_tunnel_service_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ext_tunnel_service_port_)));
          set_has_ext_tunnel_service_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanDeviceRouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.LanInterfaceType_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string ip_v4_address = 2;
  if (has_ip_v4_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_v4_address().data(), this->ip_v4_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip_v4_address(), output);
  }
  
  // optional string ip_v6_address = 3;
  if (has_ip_v6_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_v6_address().data(), this->ip_v6_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip_v6_address(), output);
  }
  
  // optional uint32 media_server_port = 4;
  if (has_media_server_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->media_server_port(), output);
  }
  
  // optional uint32 virtual_drive_port = 5;
  if (has_virtual_drive_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->virtual_drive_port(), output);
  }
  
  // optional uint32 web_front_port = 6;
  if (has_web_front_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->web_front_port(), output);
  }
  
  // optional uint32 tunnel_service_port = 7;
  if (has_tunnel_service_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tunnel_service_port(), output);
  }
  
  // optional uint32 ext_tunnel_service_port = 8;
  if (has_ext_tunnel_service_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ext_tunnel_service_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LanDeviceRouteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.LanInterfaceType_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string ip_v4_address = 2;
  if (has_ip_v4_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_v4_address().data(), this->ip_v4_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip_v4_address(), target);
  }
  
  // optional string ip_v6_address = 3;
  if (has_ip_v6_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_v6_address().data(), this->ip_v6_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_v6_address(), target);
  }
  
  // optional uint32 media_server_port = 4;
  if (has_media_server_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->media_server_port(), target);
  }
  
  // optional uint32 virtual_drive_port = 5;
  if (has_virtual_drive_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->virtual_drive_port(), target);
  }
  
  // optional uint32 web_front_port = 6;
  if (has_web_front_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->web_front_port(), target);
  }
  
  // optional uint32 tunnel_service_port = 7;
  if (has_tunnel_service_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tunnel_service_port(), target);
  }
  
  // optional uint32 ext_tunnel_service_port = 8;
  if (has_ext_tunnel_service_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ext_tunnel_service_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LanDeviceRouteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.LanInterfaceType_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string ip_v4_address = 2;
    if (has_ip_v4_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_v4_address());
    }
    
    // optional string ip_v6_address = 3;
    if (has_ip_v6_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip_v6_address());
    }
    
    // optional uint32 media_server_port = 4;
    if (has_media_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->media_server_port());
    }
    
    // optional uint32 virtual_drive_port = 5;
    if (has_virtual_drive_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->virtual_drive_port());
    }
    
    // optional uint32 web_front_port = 6;
    if (has_web_front_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->web_front_port());
    }
    
    // optional uint32 tunnel_service_port = 7;
    if (has_tunnel_service_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tunnel_service_port());
    }
    
    // optional uint32 ext_tunnel_service_port = 8;
    if (has_ext_tunnel_service_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ext_tunnel_service_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanDeviceRouteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LanDeviceRouteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LanDeviceRouteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LanDeviceRouteInfo::MergeFrom(const LanDeviceRouteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ip_v4_address()) {
      set_ip_v4_address(from.ip_v4_address());
    }
    if (from.has_ip_v6_address()) {
      set_ip_v6_address(from.ip_v6_address());
    }
    if (from.has_media_server_port()) {
      set_media_server_port(from.media_server_port());
    }
    if (from.has_virtual_drive_port()) {
      set_virtual_drive_port(from.virtual_drive_port());
    }
    if (from.has_web_front_port()) {
      set_web_front_port(from.web_front_port());
    }
    if (from.has_tunnel_service_port()) {
      set_tunnel_service_port(from.tunnel_service_port());
    }
    if (from.has_ext_tunnel_service_port()) {
      set_ext_tunnel_service_port(from.ext_tunnel_service_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LanDeviceRouteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanDeviceRouteInfo::CopyFrom(const LanDeviceRouteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanDeviceRouteInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LanDeviceRouteInfo::Swap(LanDeviceRouteInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ip_v4_address_, other->ip_v4_address_);
    std::swap(ip_v6_address_, other->ip_v6_address_);
    std::swap(media_server_port_, other->media_server_port_);
    std::swap(virtual_drive_port_, other->virtual_drive_port_);
    std::swap(web_front_port_, other->web_front_port_);
    std::swap(tunnel_service_port_, other->tunnel_service_port_);
    std::swap(ext_tunnel_service_port_, other->ext_tunnel_service_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LanDeviceRouteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LanDeviceRouteInfo_descriptor_;
  metadata.reflection = LanDeviceRouteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LanDeviceInfo::kTypeFieldNumber;
const int LanDeviceInfo::kUuidFieldNumber;
const int LanDeviceInfo::kDeviceNameFieldNumber;
const int LanDeviceInfo::kDeviceIdFieldNumber;
const int LanDeviceInfo::kRouteInfoFieldNumber;
const int LanDeviceInfo::kNotificationsFieldNumber;
const int LanDeviceInfo::kUserIdFieldNumber;
const int LanDeviceInfo::kPdInstanceIdFieldNumber;
const int LanDeviceInfo::kPdInstanceIdNumFieldNumber;
#endif  // !_MSC_VER

LanDeviceInfo::LanDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LanDeviceInfo::InitAsDefaultInstance() {
  route_info_ = const_cast< ::ccd::LanDeviceRouteInfo*>(&::ccd::LanDeviceRouteInfo::default_instance());
}

LanDeviceInfo::LanDeviceInfo(const LanDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LanDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_id_ = GOOGLE_ULONGLONG(0);
  route_info_ = NULL;
  notifications_ = 0u;
  user_id_ = GOOGLE_ULONGLONG(0);
  pd_instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pd_instance_id_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LanDeviceInfo::~LanDeviceInfo() {
  SharedDtor();
}

void LanDeviceInfo::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (pd_instance_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pd_instance_id_;
  }
  if (this != default_instance_) {
    delete route_info_;
  }
}

void LanDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LanDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LanDeviceInfo_descriptor_;
}

const LanDeviceInfo& LanDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LanDeviceInfo* LanDeviceInfo::default_instance_ = NULL;

LanDeviceInfo* LanDeviceInfo::New() const {
  return new LanDeviceInfo;
}

void LanDeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_route_info()) {
      if (route_info_ != NULL) route_info_->::ccd::LanDeviceRouteInfo::Clear();
    }
    notifications_ = 0u;
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_pd_instance_id()) {
      if (pd_instance_id_ != &::google::protobuf::internal::kEmptyString) {
        pd_instance_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pd_instance_id_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LanDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.LanDeviceType_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::LanDeviceType_t_IsValid(value)) {
            set_type(static_cast< ccd::LanDeviceType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }
      
      // required string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_name;
        break;
      }
      
      // required string device_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_route_info;
        break;
      }
      
      // required .ccd.LanDeviceRouteInfo route_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_route_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notifications;
        break;
      }
      
      // optional uint32 notifications = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notifications:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notifications_)));
          set_has_notifications();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_user_id;
        break;
      }
      
      // optional fixed64 user_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pd_instance_id;
        break;
      }
      
      // optional string pd_instance_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pd_instance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pd_instance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pd_instance_id().data(), this->pd_instance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pd_instance_id_num;
        break;
      }
      
      // optional uint32 pd_instance_id_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pd_instance_id_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pd_instance_id_num_)));
          set_has_pd_instance_id_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LanDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.LanDeviceType_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }
  
  // required string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_name(), output);
  }
  
  // optional fixed64 device_id = 4;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->device_id(), output);
  }
  
  // required .ccd.LanDeviceRouteInfo route_info = 5;
  if (has_route_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->route_info(), output);
  }
  
  // optional uint32 notifications = 6;
  if (has_notifications()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->notifications(), output);
  }
  
  // optional fixed64 user_id = 7;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->user_id(), output);
  }
  
  // optional string pd_instance_id = 8;
  if (has_pd_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pd_instance_id().data(), this->pd_instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->pd_instance_id(), output);
  }
  
  // optional uint32 pd_instance_id_num = 9;
  if (has_pd_instance_id_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pd_instance_id_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LanDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.LanDeviceType_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }
  
  // required string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }
  
  // optional fixed64 device_id = 4;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->device_id(), target);
  }
  
  // required .ccd.LanDeviceRouteInfo route_info = 5;
  if (has_route_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->route_info(), target);
  }
  
  // optional uint32 notifications = 6;
  if (has_notifications()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->notifications(), target);
  }
  
  // optional fixed64 user_id = 7;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->user_id(), target);
  }
  
  // optional string pd_instance_id = 8;
  if (has_pd_instance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pd_instance_id().data(), this->pd_instance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->pd_instance_id(), target);
  }
  
  // optional uint32 pd_instance_id_num = 9;
  if (has_pd_instance_id_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pd_instance_id_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LanDeviceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.LanDeviceType_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // required string device_name = 3;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // optional fixed64 device_id = 4;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.LanDeviceRouteInfo route_info = 5;
    if (has_route_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route_info());
    }
    
    // optional uint32 notifications = 6;
    if (has_notifications()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notifications());
    }
    
    // optional fixed64 user_id = 7;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional string pd_instance_id = 8;
    if (has_pd_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pd_instance_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pd_instance_id_num = 9;
    if (has_pd_instance_id_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pd_instance_id_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LanDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LanDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LanDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LanDeviceInfo::MergeFrom(const LanDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_route_info()) {
      mutable_route_info()->::ccd::LanDeviceRouteInfo::MergeFrom(from.route_info());
    }
    if (from.has_notifications()) {
      set_notifications(from.notifications());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_pd_instance_id()) {
      set_pd_instance_id(from.pd_instance_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pd_instance_id_num()) {
      set_pd_instance_id_num(from.pd_instance_id_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LanDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanDeviceInfo::CopyFrom(const LanDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanDeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  if (has_route_info()) {
    if (!this->route_info().IsInitialized()) return false;
  }
  return true;
}

void LanDeviceInfo::Swap(LanDeviceInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(device_name_, other->device_name_);
    std::swap(device_id_, other->device_id_);
    std::swap(route_info_, other->route_info_);
    std::swap(notifications_, other->notifications_);
    std::swap(user_id_, other->user_id_);
    std::swap(pd_instance_id_, other->pd_instance_id_);
    std::swap(pd_instance_id_num_, other->pd_instance_id_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LanDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LanDeviceInfo_descriptor_;
  metadata.reflection = LanDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportLanDevicesInput::kInfosFieldNumber;
#endif  // !_MSC_VER

ReportLanDevicesInput::ReportLanDevicesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportLanDevicesInput::InitAsDefaultInstance() {
}

ReportLanDevicesInput::ReportLanDevicesInput(const ReportLanDevicesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportLanDevicesInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportLanDevicesInput::~ReportLanDevicesInput() {
  SharedDtor();
}

void ReportLanDevicesInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportLanDevicesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportLanDevicesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportLanDevicesInput_descriptor_;
}

const ReportLanDevicesInput& ReportLanDevicesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ReportLanDevicesInput* ReportLanDevicesInput::default_instance_ = NULL;

ReportLanDevicesInput* ReportLanDevicesInput::New() const {
  return new ReportLanDevicesInput;
}

void ReportLanDevicesInput::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportLanDevicesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.LanDeviceInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportLanDevicesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.LanDeviceInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportLanDevicesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.LanDeviceInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportLanDevicesInput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.LanDeviceInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportLanDevicesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportLanDevicesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportLanDevicesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportLanDevicesInput::MergeFrom(const ReportLanDevicesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportLanDevicesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportLanDevicesInput::CopyFrom(const ReportLanDevicesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportLanDevicesInput::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void ReportLanDevicesInput::Swap(ReportLanDevicesInput* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportLanDevicesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportLanDevicesInput_descriptor_;
  metadata.reflection = ReportLanDevicesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListLanDevicesInput::kUserIdFieldNumber;
const int ListLanDevicesInput::kIncludeUnregisteredFieldNumber;
const int ListLanDevicesInput::kIncludeRegisteredButNotLinkedFieldNumber;
const int ListLanDevicesInput::kIncludeLinkedFieldNumber;
#endif  // !_MSC_VER

ListLanDevicesInput::ListLanDevicesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListLanDevicesInput::InitAsDefaultInstance() {
}

ListLanDevicesInput::ListLanDevicesInput(const ListLanDevicesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListLanDevicesInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  include_unregistered_ = false;
  include_registered_but_not_linked_ = false;
  include_linked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListLanDevicesInput::~ListLanDevicesInput() {
  SharedDtor();
}

void ListLanDevicesInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLanDevicesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLanDevicesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLanDevicesInput_descriptor_;
}

const ListLanDevicesInput& ListLanDevicesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListLanDevicesInput* ListLanDevicesInput::default_instance_ = NULL;

ListLanDevicesInput* ListLanDevicesInput::New() const {
  return new ListLanDevicesInput;
}

void ListLanDevicesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    include_unregistered_ = false;
    include_registered_but_not_linked_ = false;
    include_linked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListLanDevicesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_include_unregistered;
        break;
      }
      
      // optional bool include_unregistered = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_unregistered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_unregistered_)));
          set_has_include_unregistered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_include_registered_but_not_linked;
        break;
      }
      
      // optional bool include_registered_but_not_linked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_registered_but_not_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_registered_but_not_linked_)));
          set_has_include_registered_but_not_linked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_include_linked;
        break;
      }
      
      // optional bool include_linked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_include_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_linked_)));
          set_has_include_linked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListLanDevicesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool include_unregistered = 2;
  if (has_include_unregistered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_unregistered(), output);
  }
  
  // optional bool include_registered_but_not_linked = 3;
  if (has_include_registered_but_not_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_registered_but_not_linked(), output);
  }
  
  // optional bool include_linked = 4;
  if (has_include_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->include_linked(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListLanDevicesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool include_unregistered = 2;
  if (has_include_unregistered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_unregistered(), target);
  }
  
  // optional bool include_registered_but_not_linked = 3;
  if (has_include_registered_but_not_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_registered_but_not_linked(), target);
  }
  
  // optional bool include_linked = 4;
  if (has_include_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->include_linked(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListLanDevicesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool include_unregistered = 2;
    if (has_include_unregistered()) {
      total_size += 1 + 1;
    }
    
    // optional bool include_registered_but_not_linked = 3;
    if (has_include_registered_but_not_linked()) {
      total_size += 1 + 1;
    }
    
    // optional bool include_linked = 4;
    if (has_include_linked()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLanDevicesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListLanDevicesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListLanDevicesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListLanDevicesInput::MergeFrom(const ListLanDevicesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_include_unregistered()) {
      set_include_unregistered(from.include_unregistered());
    }
    if (from.has_include_registered_but_not_linked()) {
      set_include_registered_but_not_linked(from.include_registered_but_not_linked());
    }
    if (from.has_include_linked()) {
      set_include_linked(from.include_linked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListLanDevicesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLanDevicesInput::CopyFrom(const ListLanDevicesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLanDevicesInput::IsInitialized() const {
  
  return true;
}

void ListLanDevicesInput::Swap(ListLanDevicesInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(include_unregistered_, other->include_unregistered_);
    std::swap(include_registered_but_not_linked_, other->include_registered_but_not_linked_);
    std::swap(include_linked_, other->include_linked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListLanDevicesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLanDevicesInput_descriptor_;
  metadata.reflection = ListLanDevicesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListLanDevicesOutput::kInfosFieldNumber;
#endif  // !_MSC_VER

ListLanDevicesOutput::ListLanDevicesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListLanDevicesOutput::InitAsDefaultInstance() {
}

ListLanDevicesOutput::ListLanDevicesOutput(const ListLanDevicesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListLanDevicesOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListLanDevicesOutput::~ListLanDevicesOutput() {
  SharedDtor();
}

void ListLanDevicesOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLanDevicesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLanDevicesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLanDevicesOutput_descriptor_;
}

const ListLanDevicesOutput& ListLanDevicesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListLanDevicesOutput* ListLanDevicesOutput::default_instance_ = NULL;

ListLanDevicesOutput* ListLanDevicesOutput::New() const {
  return new ListLanDevicesOutput;
}

void ListLanDevicesOutput::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListLanDevicesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.LanDeviceInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListLanDevicesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.LanDeviceInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListLanDevicesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.LanDeviceInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListLanDevicesOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.LanDeviceInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLanDevicesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListLanDevicesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListLanDevicesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListLanDevicesOutput::MergeFrom(const ListLanDevicesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListLanDevicesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLanDevicesOutput::CopyFrom(const ListLanDevicesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLanDevicesOutput::IsInitialized() const {
  
  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void ListLanDevicesOutput::Swap(ListLanDevicesOutput* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListLanDevicesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLanDevicesOutput_descriptor_;
  metadata.reflection = ListLanDevicesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetItem::kUserIdFieldNumber;
const int DatasetItem::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

DatasetItem::DatasetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetItem::InitAsDefaultInstance() {
}

DatasetItem::DatasetItem(const DatasetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetItem::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetItem::~DatasetItem() {
  SharedDtor();
}

void DatasetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatasetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetItem_descriptor_;
}

const DatasetItem& DatasetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DatasetItem* DatasetItem::default_instance_ = NULL;

DatasetItem* DatasetItem::New() const {
  return new DatasetItem;
}

void DatasetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetItem::MergeFrom(const DatasetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetItem::CopyFrom(const DatasetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DatasetItem::Swap(DatasetItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetItem_descriptor_;
  metadata.reflection = DatasetItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListStorageNodeDatasetsOutput::kDatasetsFieldNumber;
#endif  // !_MSC_VER

ListStorageNodeDatasetsOutput::ListStorageNodeDatasetsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListStorageNodeDatasetsOutput::InitAsDefaultInstance() {
}

ListStorageNodeDatasetsOutput::ListStorageNodeDatasetsOutput(const ListStorageNodeDatasetsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListStorageNodeDatasetsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListStorageNodeDatasetsOutput::~ListStorageNodeDatasetsOutput() {
  SharedDtor();
}

void ListStorageNodeDatasetsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListStorageNodeDatasetsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListStorageNodeDatasetsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListStorageNodeDatasetsOutput_descriptor_;
}

const ListStorageNodeDatasetsOutput& ListStorageNodeDatasetsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListStorageNodeDatasetsOutput* ListStorageNodeDatasetsOutput::default_instance_ = NULL;

ListStorageNodeDatasetsOutput* ListStorageNodeDatasetsOutput::New() const {
  return new ListStorageNodeDatasetsOutput;
}

void ListStorageNodeDatasetsOutput::Clear() {
  datasets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListStorageNodeDatasetsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.DatasetItem datasets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datasets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datasets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datasets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListStorageNodeDatasetsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.DatasetItem datasets = 1;
  for (int i = 0; i < this->datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datasets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListStorageNodeDatasetsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.DatasetItem datasets = 1;
  for (int i = 0; i < this->datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datasets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListStorageNodeDatasetsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.DatasetItem datasets = 1;
  total_size += 1 * this->datasets_size();
  for (int i = 0; i < this->datasets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datasets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListStorageNodeDatasetsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListStorageNodeDatasetsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListStorageNodeDatasetsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListStorageNodeDatasetsOutput::MergeFrom(const ListStorageNodeDatasetsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  datasets_.MergeFrom(from.datasets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListStorageNodeDatasetsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListStorageNodeDatasetsOutput::CopyFrom(const ListStorageNodeDatasetsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListStorageNodeDatasetsOutput::IsInitialized() const {
  
  for (int i = 0; i < datasets_size(); i++) {
    if (!this->datasets(i).IsInitialized()) return false;
  }
  return true;
}

void ListStorageNodeDatasetsOutput::Swap(ListStorageNodeDatasetsOutput* other) {
  if (other != this) {
    datasets_.Swap(&other->datasets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListStorageNodeDatasetsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListStorageNodeDatasetsOutput_descriptor_;
  metadata.reflection = ListStorageNodeDatasetsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrusteeItem::kSidFieldNumber;
const int TrusteeItem::kAttrFieldNumber;
#endif  // !_MSC_VER

TrusteeItem::TrusteeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrusteeItem::InitAsDefaultInstance() {
}

TrusteeItem::TrusteeItem(const TrusteeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrusteeItem::SharedCtor() {
  _cached_size_ = 0;
  sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attr_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrusteeItem::~TrusteeItem() {
  SharedDtor();
}

void TrusteeItem::SharedDtor() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    delete sid_;
  }
  if (this != default_instance_) {
  }
}

void TrusteeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrusteeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrusteeItem_descriptor_;
}

const TrusteeItem& TrusteeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

TrusteeItem* TrusteeItem::default_instance_ = NULL;

TrusteeItem* TrusteeItem::New() const {
  return new TrusteeItem;
}

void TrusteeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sid()) {
      if (sid_ != &::google::protobuf::internal::kEmptyString) {
        sid_->clear();
      }
    }
    attr_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrusteeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sid().data(), this->sid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_attr;
        break;
      }
      
      // required fixed64 attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_attr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &attr_)));
          set_has_attr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrusteeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sid(), output);
  }
  
  // required fixed64 attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->attr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrusteeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sid = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sid().data(), this->sid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sid(), target);
  }
  
  // required fixed64 attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->attr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrusteeItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sid = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sid());
    }
    
    // required fixed64 attr = 2;
    if (has_attr()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrusteeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrusteeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrusteeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrusteeItem::MergeFrom(const TrusteeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_attr()) {
      set_attr(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrusteeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrusteeItem::CopyFrom(const TrusteeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrusteeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void TrusteeItem::Swap(TrusteeItem* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrusteeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrusteeItem_descriptor_;
  metadata.reflection = TrusteeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDWin32StartParams::kTrusteesFieldNumber;
#endif  // !_MSC_VER

CCDWin32StartParams::CCDWin32StartParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDWin32StartParams::InitAsDefaultInstance() {
}

CCDWin32StartParams::CCDWin32StartParams(const CCDWin32StartParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDWin32StartParams::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDWin32StartParams::~CCDWin32StartParams() {
  SharedDtor();
}

void CCDWin32StartParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCDWin32StartParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDWin32StartParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDWin32StartParams_descriptor_;
}

const CCDWin32StartParams& CCDWin32StartParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CCDWin32StartParams* CCDWin32StartParams::default_instance_ = NULL;

CCDWin32StartParams* CCDWin32StartParams::New() const {
  return new CCDWin32StartParams;
}

void CCDWin32StartParams::Clear() {
  trustees_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDWin32StartParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.TrusteeItem trustees = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trustees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trustees()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trustees;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDWin32StartParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.TrusteeItem trustees = 1;
  for (int i = 0; i < this->trustees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trustees(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDWin32StartParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.TrusteeItem trustees = 1;
  for (int i = 0; i < this->trustees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trustees(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDWin32StartParams::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.TrusteeItem trustees = 1;
  total_size += 1 * this->trustees_size();
  for (int i = 0; i < this->trustees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trustees(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDWin32StartParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDWin32StartParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDWin32StartParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDWin32StartParams::MergeFrom(const CCDWin32StartParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  trustees_.MergeFrom(from.trustees_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDWin32StartParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDWin32StartParams::CopyFrom(const CCDWin32StartParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDWin32StartParams::IsInitialized() const {
  
  for (int i = 0; i < trustees_size(); i++) {
    if (!this->trustees(i).IsInitialized()) return false;
  }
  return true;
}

void CCDWin32StartParams::Swap(CCDWin32StartParams* other) {
  if (other != this) {
    trustees_.Swap(&other->trustees_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDWin32StartParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDWin32StartParams_descriptor_;
  metadata.reflection = CCDWin32StartParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDatasetInput::kUserIdFieldNumber;
const int AddDatasetInput::kDatasetNameFieldNumber;
const int AddDatasetInput::kDatasetTypeFieldNumber;
#endif  // !_MSC_VER

AddDatasetInput::AddDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDatasetInput::InitAsDefaultInstance() {
}

AddDatasetInput::AddDatasetInput(const AddDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataset_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDatasetInput::~AddDatasetInput() {
  SharedDtor();
}

void AddDatasetInput::SharedDtor() {
  if (dataset_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_name_;
  }
  if (this != default_instance_) {
  }
}

void AddDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDatasetInput_descriptor_;
}

const AddDatasetInput& AddDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

AddDatasetInput* AddDatasetInput::default_instance_ = NULL;

AddDatasetInput* AddDatasetInput::New() const {
  return new AddDatasetInput;
}

void AddDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_dataset_name()) {
      if (dataset_name_ != &::google::protobuf::internal::kEmptyString) {
        dataset_name_->clear();
      }
    }
    dataset_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataset_name;
        break;
      }
      
      // required string dataset_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset_name().data(), this->dataset_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataset_type;
        break;
      }
      
      // required .ccd.NewDatasetType_t dataset_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataset_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::NewDatasetType_t_IsValid(value)) {
            set_dataset_type(static_cast< ccd::NewDatasetType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string dataset_name = 2;
  if (has_dataset_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_name().data(), this->dataset_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dataset_name(), output);
  }
  
  // required .ccd.NewDatasetType_t dataset_type = 3;
  if (has_dataset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dataset_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string dataset_name = 2;
  if (has_dataset_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_name().data(), this->dataset_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataset_name(), target);
  }
  
  // required .ccd.NewDatasetType_t dataset_type = 3;
  if (has_dataset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dataset_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string dataset_name = 2;
    if (has_dataset_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_name());
    }
    
    // required .ccd.NewDatasetType_t dataset_type = 3;
    if (has_dataset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dataset_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDatasetInput::MergeFrom(const AddDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_name()) {
      set_dataset_name(from.dataset_name());
    }
    if (from.has_dataset_type()) {
      set_dataset_type(from.dataset_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatasetInput::CopyFrom(const AddDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AddDatasetInput::Swap(AddDatasetInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_name_, other->dataset_name_);
    std::swap(dataset_type_, other->dataset_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDatasetInput_descriptor_;
  metadata.reflection = AddDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddDatasetOutput::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

AddDatasetOutput::AddDatasetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddDatasetOutput::InitAsDefaultInstance() {
}

AddDatasetOutput::AddDatasetOutput(const AddDatasetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddDatasetOutput::SharedCtor() {
  _cached_size_ = 0;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddDatasetOutput::~AddDatasetOutput() {
  SharedDtor();
}

void AddDatasetOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddDatasetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddDatasetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddDatasetOutput_descriptor_;
}

const AddDatasetOutput& AddDatasetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

AddDatasetOutput* AddDatasetOutput::default_instance_ = NULL;

AddDatasetOutput* AddDatasetOutput::New() const {
  return new AddDatasetOutput;
}

void AddDatasetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddDatasetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddDatasetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddDatasetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddDatasetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dataset_id = 1;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddDatasetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddDatasetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddDatasetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddDatasetOutput::MergeFrom(const AddDatasetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddDatasetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatasetOutput::CopyFrom(const AddDatasetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatasetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddDatasetOutput::Swap(AddDatasetOutput* other) {
  if (other != this) {
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddDatasetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddDatasetOutput_descriptor_;
  metadata.reflection = AddDatasetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddSyncSubscriptionInput::kUserIdFieldNumber;
const int AddSyncSubscriptionInput::kDeviceIdFieldNumber;
const int AddSyncSubscriptionInput::kDatasetIdFieldNumber;
const int AddSyncSubscriptionInput::kSubscriptionTypeFieldNumber;
const int AddSyncSubscriptionInput::kDeviceRootFieldNumber;
const int AddSyncSubscriptionInput::kFilterFieldNumber;
const int AddSyncSubscriptionInput::kMaxSizeFieldNumber;
const int AddSyncSubscriptionInput::kMaxFilesFieldNumber;
#endif  // !_MSC_VER

AddSyncSubscriptionInput::AddSyncSubscriptionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddSyncSubscriptionInput::InitAsDefaultInstance() {
}

AddSyncSubscriptionInput::AddSyncSubscriptionInput(const AddSyncSubscriptionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddSyncSubscriptionInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  subscription_type_ = 1;
  device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = GOOGLE_ULONGLONG(0);
  max_files_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddSyncSubscriptionInput::~AddSyncSubscriptionInput() {
  SharedDtor();
}

void AddSyncSubscriptionInput::SharedDtor() {
  if (device_root_ != &::google::protobuf::internal::kEmptyString) {
    delete device_root_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (this != default_instance_) {
  }
}

void AddSyncSubscriptionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddSyncSubscriptionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddSyncSubscriptionInput_descriptor_;
}

const AddSyncSubscriptionInput& AddSyncSubscriptionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

AddSyncSubscriptionInput* AddSyncSubscriptionInput::default_instance_ = NULL;

AddSyncSubscriptionInput* AddSyncSubscriptionInput::New() const {
  return new AddSyncSubscriptionInput;
}

void AddSyncSubscriptionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
    subscription_type_ = 1;
    if (has_device_root()) {
      if (device_root_ != &::google::protobuf::internal::kEmptyString) {
        device_root_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    max_size_ = GOOGLE_ULONGLONG(0);
    max_files_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddSyncSubscriptionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_subscription_type;
        break;
      }
      
      // required .ccd.SyncSubscriptionType_t subscription_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscription_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncSubscriptionType_t_IsValid(value)) {
            set_subscription_type(static_cast< ccd::SyncSubscriptionType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_root;
        break;
      }
      
      // optional string device_root = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_root().data(), this->device_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }
      
      // optional string filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_max_size;
        break;
      }
      
      // optional fixed64 max_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_max_files;
        break;
      }
      
      // optional fixed64 max_files = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_files_)));
          set_has_max_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddSyncSubscriptionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  // required fixed64 dataset_id = 3;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->dataset_id(), output);
  }
  
  // required .ccd.SyncSubscriptionType_t subscription_type = 4;
  if (has_subscription_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->subscription_type(), output);
  }
  
  // optional string device_root = 5;
  if (has_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_root().data(), this->device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_root(), output);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filter(), output);
  }
  
  // optional fixed64 max_size = 7;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->max_size(), output);
  }
  
  // optional fixed64 max_files = 8;
  if (has_max_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->max_files(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddSyncSubscriptionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  // required fixed64 dataset_id = 3;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->dataset_id(), target);
  }
  
  // required .ccd.SyncSubscriptionType_t subscription_type = 4;
  if (has_subscription_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->subscription_type(), target);
  }
  
  // optional string device_root = 5;
  if (has_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_root().data(), this->device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_root(), target);
  }
  
  // optional string filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filter(), target);
  }
  
  // optional fixed64 max_size = 7;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->max_size(), target);
  }
  
  // optional fixed64 max_files = 8;
  if (has_max_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->max_files(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddSyncSubscriptionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 3;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.SyncSubscriptionType_t subscription_type = 4;
    if (has_subscription_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscription_type());
    }
    
    // optional string device_root = 5;
    if (has_device_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_root());
    }
    
    // optional string filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // optional fixed64 max_size = 7;
    if (has_max_size()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 max_files = 8;
    if (has_max_files()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddSyncSubscriptionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddSyncSubscriptionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddSyncSubscriptionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddSyncSubscriptionInput::MergeFrom(const AddSyncSubscriptionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_subscription_type()) {
      set_subscription_type(from.subscription_type());
    }
    if (from.has_device_root()) {
      set_device_root(from.device_root());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_max_files()) {
      set_max_files(from.max_files());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddSyncSubscriptionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSyncSubscriptionInput::CopyFrom(const AddSyncSubscriptionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSyncSubscriptionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void AddSyncSubscriptionInput::Swap(AddSyncSubscriptionInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(subscription_type_, other->subscription_type_);
    std::swap(device_root_, other->device_root_);
    std::swap(filter_, other->filter_);
    std::swap(max_size_, other->max_size_);
    std::swap(max_files_, other->max_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddSyncSubscriptionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddSyncSubscriptionInput_descriptor_;
  metadata.reflection = AddSyncSubscriptionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteDatasetInput::kUserIdFieldNumber;
const int DeleteDatasetInput::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

DeleteDatasetInput::DeleteDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteDatasetInput::InitAsDefaultInstance() {
}

DeleteDatasetInput::DeleteDatasetInput(const DeleteDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteDatasetInput::~DeleteDatasetInput() {
  SharedDtor();
}

void DeleteDatasetInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDatasetInput_descriptor_;
}

const DeleteDatasetInput& DeleteDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DeleteDatasetInput* DeleteDatasetInput::default_instance_ = NULL;

DeleteDatasetInput* DeleteDatasetInput::New() const {
  return new DeleteDatasetInput;
}

void DeleteDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteDatasetInput::MergeFrom(const DeleteDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDatasetInput::CopyFrom(const DeleteDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DeleteDatasetInput::Swap(DeleteDatasetInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDatasetInput_descriptor_;
  metadata.reflection = DeleteDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSyncSubscriptionsInput::kUserIdFieldNumber;
const int DeleteSyncSubscriptionsInput::kDatasetIdsFieldNumber;
const int DeleteSyncSubscriptionsInput::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

DeleteSyncSubscriptionsInput::DeleteSyncSubscriptionsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSyncSubscriptionsInput::InitAsDefaultInstance() {
}

DeleteSyncSubscriptionsInput::DeleteSyncSubscriptionsInput(const DeleteSyncSubscriptionsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSyncSubscriptionsInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSyncSubscriptionsInput::~DeleteSyncSubscriptionsInput() {
  SharedDtor();
}

void DeleteSyncSubscriptionsInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteSyncSubscriptionsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSyncSubscriptionsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSyncSubscriptionsInput_descriptor_;
}

const DeleteSyncSubscriptionsInput& DeleteSyncSubscriptionsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DeleteSyncSubscriptionsInput* DeleteSyncSubscriptionsInput::default_instance_ = NULL;

DeleteSyncSubscriptionsInput* DeleteSyncSubscriptionsInput::New() const {
  return new DeleteSyncSubscriptionsInput;
}

void DeleteSyncSubscriptionsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  dataset_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSyncSubscriptionsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_ids;
        break;
      }
      
      // repeated fixed64 dataset_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17, input, this->mutable_dataset_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_dataset_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_ids;
        if (input->ExpectTag(25)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSyncSubscriptionsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // repeated fixed64 dataset_ids = 2;
  for (int i = 0; i < this->dataset_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->dataset_ids(i), output);
  }
  
  // optional fixed64 device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSyncSubscriptionsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // repeated fixed64 dataset_ids = 2;
  for (int i = 0; i < this->dataset_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(2, this->dataset_ids(i), target);
  }
  
  // optional fixed64 device_id = 3;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSyncSubscriptionsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 3;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated fixed64 dataset_ids = 2;
  {
    int data_size = 0;
    data_size = 8 * this->dataset_ids_size();
    total_size += 1 * this->dataset_ids_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSyncSubscriptionsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSyncSubscriptionsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSyncSubscriptionsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSyncSubscriptionsInput::MergeFrom(const DeleteSyncSubscriptionsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataset_ids_.MergeFrom(from.dataset_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSyncSubscriptionsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSyncSubscriptionsInput::CopyFrom(const DeleteSyncSubscriptionsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSyncSubscriptionsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteSyncSubscriptionsInput::Swap(DeleteSyncSubscriptionsInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    dataset_ids_.Swap(&other->dataset_ids_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSyncSubscriptionsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSyncSubscriptionsInput_descriptor_;
  metadata.reflection = DeleteSyncSubscriptionsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EventsCreateQueueInput::EventsCreateQueueInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventsCreateQueueInput::InitAsDefaultInstance() {
}

EventsCreateQueueInput::EventsCreateQueueInput(const EventsCreateQueueInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventsCreateQueueInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventsCreateQueueInput::~EventsCreateQueueInput() {
  SharedDtor();
}

void EventsCreateQueueInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventsCreateQueueInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventsCreateQueueInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventsCreateQueueInput_descriptor_;
}

const EventsCreateQueueInput& EventsCreateQueueInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventsCreateQueueInput* EventsCreateQueueInput::default_instance_ = NULL;

EventsCreateQueueInput* EventsCreateQueueInput::New() const {
  return new EventsCreateQueueInput;
}

void EventsCreateQueueInput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventsCreateQueueInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EventsCreateQueueInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventsCreateQueueInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventsCreateQueueInput::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventsCreateQueueInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventsCreateQueueInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventsCreateQueueInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventsCreateQueueInput::MergeFrom(const EventsCreateQueueInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventsCreateQueueInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsCreateQueueInput::CopyFrom(const EventsCreateQueueInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsCreateQueueInput::IsInitialized() const {
  
  return true;
}

void EventsCreateQueueInput::Swap(EventsCreateQueueInput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventsCreateQueueInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventsCreateQueueInput_descriptor_;
  metadata.reflection = EventsCreateQueueInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventsCreateQueueOutput::kQueueHandleFieldNumber;
#endif  // !_MSC_VER

EventsCreateQueueOutput::EventsCreateQueueOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventsCreateQueueOutput::InitAsDefaultInstance() {
}

EventsCreateQueueOutput::EventsCreateQueueOutput(const EventsCreateQueueOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventsCreateQueueOutput::SharedCtor() {
  _cached_size_ = 0;
  queue_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventsCreateQueueOutput::~EventsCreateQueueOutput() {
  SharedDtor();
}

void EventsCreateQueueOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventsCreateQueueOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventsCreateQueueOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventsCreateQueueOutput_descriptor_;
}

const EventsCreateQueueOutput& EventsCreateQueueOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventsCreateQueueOutput* EventsCreateQueueOutput::default_instance_ = NULL;

EventsCreateQueueOutput* EventsCreateQueueOutput::New() const {
  return new EventsCreateQueueOutput;
}

void EventsCreateQueueOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_handle_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventsCreateQueueOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 queue_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &queue_handle_)));
          set_has_queue_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventsCreateQueueOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 queue_handle = 1;
  if (has_queue_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->queue_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventsCreateQueueOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 queue_handle = 1;
  if (has_queue_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->queue_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventsCreateQueueOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 queue_handle = 1;
    if (has_queue_handle()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventsCreateQueueOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventsCreateQueueOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventsCreateQueueOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventsCreateQueueOutput::MergeFrom(const EventsCreateQueueOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_handle()) {
      set_queue_handle(from.queue_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventsCreateQueueOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsCreateQueueOutput::CopyFrom(const EventsCreateQueueOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsCreateQueueOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventsCreateQueueOutput::Swap(EventsCreateQueueOutput* other) {
  if (other != this) {
    std::swap(queue_handle_, other->queue_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventsCreateQueueOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventsCreateQueueOutput_descriptor_;
  metadata.reflection = EventsCreateQueueOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventsDestroyQueueInput::kQueueHandleFieldNumber;
#endif  // !_MSC_VER

EventsDestroyQueueInput::EventsDestroyQueueInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventsDestroyQueueInput::InitAsDefaultInstance() {
}

EventsDestroyQueueInput::EventsDestroyQueueInput(const EventsDestroyQueueInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventsDestroyQueueInput::SharedCtor() {
  _cached_size_ = 0;
  queue_handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventsDestroyQueueInput::~EventsDestroyQueueInput() {
  SharedDtor();
}

void EventsDestroyQueueInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventsDestroyQueueInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventsDestroyQueueInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventsDestroyQueueInput_descriptor_;
}

const EventsDestroyQueueInput& EventsDestroyQueueInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventsDestroyQueueInput* EventsDestroyQueueInput::default_instance_ = NULL;

EventsDestroyQueueInput* EventsDestroyQueueInput::New() const {
  return new EventsDestroyQueueInput;
}

void EventsDestroyQueueInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_handle_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventsDestroyQueueInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 queue_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &queue_handle_)));
          set_has_queue_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventsDestroyQueueInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 queue_handle = 1;
  if (has_queue_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->queue_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventsDestroyQueueInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 queue_handle = 1;
  if (has_queue_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->queue_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventsDestroyQueueInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 queue_handle = 1;
    if (has_queue_handle()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventsDestroyQueueInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventsDestroyQueueInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventsDestroyQueueInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventsDestroyQueueInput::MergeFrom(const EventsDestroyQueueInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_handle()) {
      set_queue_handle(from.queue_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventsDestroyQueueInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsDestroyQueueInput::CopyFrom(const EventsDestroyQueueInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsDestroyQueueInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventsDestroyQueueInput::Swap(EventsDestroyQueueInput* other) {
  if (other != this) {
    std::swap(queue_handle_, other->queue_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventsDestroyQueueInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventsDestroyQueueInput_descriptor_;
  metadata.reflection = EventsDestroyQueueInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventsDequeueInput::kQueueHandleFieldNumber;
const int EventsDequeueInput::kMaxCountFieldNumber;
const int EventsDequeueInput::kTimeoutFieldNumber;
#endif  // !_MSC_VER

EventsDequeueInput::EventsDequeueInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventsDequeueInput::InitAsDefaultInstance() {
}

EventsDequeueInput::EventsDequeueInput(const EventsDequeueInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventsDequeueInput::SharedCtor() {
  _cached_size_ = 0;
  queue_handle_ = GOOGLE_ULONGLONG(0);
  max_count_ = 0u;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventsDequeueInput::~EventsDequeueInput() {
  SharedDtor();
}

void EventsDequeueInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventsDequeueInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventsDequeueInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventsDequeueInput_descriptor_;
}

const EventsDequeueInput& EventsDequeueInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventsDequeueInput* EventsDequeueInput::default_instance_ = NULL;

EventsDequeueInput* EventsDequeueInput::New() const {
  return new EventsDequeueInput;
}

void EventsDequeueInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_handle_ = GOOGLE_ULONGLONG(0);
    max_count_ = 0u;
    timeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventsDequeueInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 queue_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &queue_handle_)));
          set_has_queue_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_count;
        break;
      }
      
      // optional uint32 max_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventsDequeueInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 queue_handle = 1;
  if (has_queue_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->queue_handle(), output);
  }
  
  // optional uint32 max_count = 2;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_count(), output);
  }
  
  // optional int32 timeout = 3 [default = 0];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventsDequeueInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 queue_handle = 1;
  if (has_queue_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->queue_handle(), target);
  }
  
  // optional uint32 max_count = 2;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_count(), target);
  }
  
  // optional int32 timeout = 3 [default = 0];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventsDequeueInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 queue_handle = 1;
    if (has_queue_handle()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 max_count = 2;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }
    
    // optional int32 timeout = 3 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventsDequeueInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventsDequeueInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventsDequeueInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventsDequeueInput::MergeFrom(const EventsDequeueInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue_handle()) {
      set_queue_handle(from.queue_handle());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventsDequeueInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsDequeueInput::CopyFrom(const EventsDequeueInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsDequeueInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventsDequeueInput::Swap(EventsDequeueInput* other) {
  if (other != this) {
    std::swap(queue_handle_, other->queue_handle_);
    std::swap(max_count_, other->max_count_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventsDequeueInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventsDequeueInput_descriptor_;
  metadata.reflection = EventsDequeueInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventSyncFeatureStatusChange::kFeatureFieldNumber;
const int EventSyncFeatureStatusChange::kStatusFieldNumber;
const int EventSyncFeatureStatusChange::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

EventSyncFeatureStatusChange::EventSyncFeatureStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventSyncFeatureStatusChange::InitAsDefaultInstance() {
  status_ = const_cast< ::ccd::FeatureSyncStateSummary*>(&::ccd::FeatureSyncStateSummary::default_instance());
}

EventSyncFeatureStatusChange::EventSyncFeatureStatusChange(const EventSyncFeatureStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventSyncFeatureStatusChange::SharedCtor() {
  _cached_size_ = 0;
  feature_ = 1;
  status_ = NULL;
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventSyncFeatureStatusChange::~EventSyncFeatureStatusChange() {
  SharedDtor();
}

void EventSyncFeatureStatusChange::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void EventSyncFeatureStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSyncFeatureStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSyncFeatureStatusChange_descriptor_;
}

const EventSyncFeatureStatusChange& EventSyncFeatureStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventSyncFeatureStatusChange* EventSyncFeatureStatusChange::default_instance_ = NULL;

EventSyncFeatureStatusChange* EventSyncFeatureStatusChange::New() const {
  return new EventSyncFeatureStatusChange;
}

void EventSyncFeatureStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    feature_ = 1;
    if (has_status()) {
      if (status_ != NULL) status_->::ccd::FeatureSyncStateSummary::Clear();
    }
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventSyncFeatureStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.SyncFeature_t feature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            set_feature(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .ccd.FeatureSyncStateSummary status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventSyncFeatureStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.SyncFeature_t feature = 1;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->feature(), output);
  }
  
  // required .ccd.FeatureSyncStateSummary status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  // optional fixed64 device_id = 8;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventSyncFeatureStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.SyncFeature_t feature = 1;
  if (has_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->feature(), target);
  }
  
  // required .ccd.FeatureSyncStateSummary status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  // optional fixed64 device_id = 8;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventSyncFeatureStatusChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.SyncFeature_t feature = 1;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature());
    }
    
    // required .ccd.FeatureSyncStateSummary status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // optional fixed64 device_id = 8;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSyncFeatureStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventSyncFeatureStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventSyncFeatureStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventSyncFeatureStatusChange::MergeFrom(const EventSyncFeatureStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature()) {
      set_feature(from.feature());
    }
    if (from.has_status()) {
      mutable_status()->::ccd::FeatureSyncStateSummary::MergeFrom(from.status());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventSyncFeatureStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSyncFeatureStatusChange::CopyFrom(const EventSyncFeatureStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSyncFeatureStatusChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EventSyncFeatureStatusChange::Swap(EventSyncFeatureStatusChange* other) {
  if (other != this) {
    std::swap(feature_, other->feature_);
    std::swap(status_, other->status_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventSyncFeatureStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSyncFeatureStatusChange_descriptor_;
  metadata.reflection = EventSyncFeatureStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDeviceInfoChange::kDeviceIdFieldNumber;
const int EventDeviceInfoChange::kChangeTypeFieldNumber;
const int EventDeviceInfoChange::kDeviceNameFieldNumber;
const int EventDeviceInfoChange::kProtocolVersionFieldNumber;
#endif  // !_MSC_VER

EventDeviceInfoChange::EventDeviceInfoChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDeviceInfoChange::InitAsDefaultInstance() {
}

EventDeviceInfoChange::EventDeviceInfoChange(const EventDeviceInfoChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDeviceInfoChange::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  change_type_ = 1;
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDeviceInfoChange::~EventDeviceInfoChange() {
  SharedDtor();
}

void EventDeviceInfoChange::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_version_;
  }
  if (this != default_instance_) {
  }
}

void EventDeviceInfoChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDeviceInfoChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDeviceInfoChange_descriptor_;
}

const EventDeviceInfoChange& EventDeviceInfoChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDeviceInfoChange* EventDeviceInfoChange::default_instance_ = NULL;

EventDeviceInfoChange* EventDeviceInfoChange::New() const {
  return new EventDeviceInfoChange;
}

void EventDeviceInfoChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    change_type_ = 1;
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    if (has_protocol_version()) {
      if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
        protocol_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDeviceInfoChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }
      
      // required .ccd.DeviceInfoChangeType_t change_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::DeviceInfoChangeType_t_IsValid(value)) {
            set_change_type(static_cast< ccd::DeviceInfoChangeType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_name;
        break;
      }
      
      // optional string device_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_protocol_version;
        break;
      }
      
      // optional string protocol_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDeviceInfoChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->device_id(), output);
  }
  
  // required .ccd.DeviceInfoChangeType_t change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }
  
  // optional string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_name(), output);
  }
  
  // optional string protocol_version = 4;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->protocol_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDeviceInfoChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->device_id(), target);
  }
  
  // required .ccd.DeviceInfoChangeType_t change_type = 2;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }
  
  // optional string device_name = 3;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_name(), target);
  }
  
  // optional string protocol_version = 4;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->protocol_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDeviceInfoChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 device_id = 1;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.DeviceInfoChangeType_t change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }
    
    // optional string device_name = 3;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // optional string protocol_version = 4;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDeviceInfoChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDeviceInfoChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDeviceInfoChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDeviceInfoChange::MergeFrom(const EventDeviceInfoChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDeviceInfoChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDeviceInfoChange::CopyFrom(const EventDeviceInfoChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDeviceInfoChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EventDeviceInfoChange::Swap(EventDeviceInfoChange* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(device_name_, other->device_name_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDeviceInfoChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDeviceInfoChange_descriptor_;
  metadata.reflection = EventDeviceInfoChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDeviceConnectionChange::kDeviceIdFieldNumber;
const int EventDeviceConnectionChange::kStatusFieldNumber;
#endif  // !_MSC_VER

EventDeviceConnectionChange::EventDeviceConnectionChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDeviceConnectionChange::InitAsDefaultInstance() {
  status_ = const_cast< ::ccd::DeviceConnectionStatus*>(&::ccd::DeviceConnectionStatus::default_instance());
}

EventDeviceConnectionChange::EventDeviceConnectionChange(const EventDeviceConnectionChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDeviceConnectionChange::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDeviceConnectionChange::~EventDeviceConnectionChange() {
  SharedDtor();
}

void EventDeviceConnectionChange::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void EventDeviceConnectionChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDeviceConnectionChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDeviceConnectionChange_descriptor_;
}

const EventDeviceConnectionChange& EventDeviceConnectionChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDeviceConnectionChange* EventDeviceConnectionChange::default_instance_ = NULL;

EventDeviceConnectionChange* EventDeviceConnectionChange::New() const {
  return new EventDeviceConnectionChange;
}

void EventDeviceConnectionChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_status()) {
      if (status_ != NULL) status_->::ccd::DeviceConnectionStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDeviceConnectionChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }
      
      // required .ccd.DeviceConnectionStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDeviceConnectionChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->device_id(), output);
  }
  
  // required .ccd.DeviceConnectionStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDeviceConnectionChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->device_id(), target);
  }
  
  // required .ccd.DeviceConnectionStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDeviceConnectionChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 device_id = 1;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.DeviceConnectionStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDeviceConnectionChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDeviceConnectionChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDeviceConnectionChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDeviceConnectionChange::MergeFrom(const EventDeviceConnectionChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_status()) {
      mutable_status()->::ccd::DeviceConnectionStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDeviceConnectionChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDeviceConnectionChange::CopyFrom(const EventDeviceConnectionChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDeviceConnectionChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void EventDeviceConnectionChange::Swap(EventDeviceConnectionChange* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDeviceConnectionChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDeviceConnectionChange_descriptor_;
  metadata.reflection = EventDeviceConnectionChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDatasetContentChange::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

EventDatasetContentChange::EventDatasetContentChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDatasetContentChange::InitAsDefaultInstance() {
}

EventDatasetContentChange::EventDatasetContentChange(const EventDatasetContentChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDatasetContentChange::SharedCtor() {
  _cached_size_ = 0;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDatasetContentChange::~EventDatasetContentChange() {
  SharedDtor();
}

void EventDatasetContentChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventDatasetContentChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDatasetContentChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDatasetContentChange_descriptor_;
}

const EventDatasetContentChange& EventDatasetContentChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDatasetContentChange* EventDatasetContentChange::default_instance_ = NULL;

EventDatasetContentChange* EventDatasetContentChange::New() const {
  return new EventDatasetContentChange;
}

void EventDatasetContentChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDatasetContentChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDatasetContentChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDatasetContentChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDatasetContentChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dataset_id = 1;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDatasetContentChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDatasetContentChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDatasetContentChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDatasetContentChange::MergeFrom(const EventDatasetContentChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDatasetContentChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDatasetContentChange::CopyFrom(const EventDatasetContentChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDatasetContentChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventDatasetContentChange::Swap(EventDatasetContentChange* other) {
  if (other != this) {
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDatasetContentChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDatasetContentChange_descriptor_;
  metadata.reflection = EventDatasetContentChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDatasetChange::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

EventDatasetChange::EventDatasetChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDatasetChange::InitAsDefaultInstance() {
}

EventDatasetChange::EventDatasetChange(const EventDatasetChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDatasetChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDatasetChange::~EventDatasetChange() {
  SharedDtor();
}

void EventDatasetChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventDatasetChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDatasetChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDatasetChange_descriptor_;
}

const EventDatasetChange& EventDatasetChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDatasetChange* EventDatasetChange::default_instance_ = NULL;

EventDatasetChange* EventDatasetChange::New() const {
  return new EventDatasetChange;
}

void EventDatasetChange::Clear() {
  dataset_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDatasetChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9, input, this->mutable_dataset_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_dataset_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_dataset_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDatasetChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated fixed64 dataset_id = 1;
  for (int i = 0; i < this->dataset_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->dataset_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDatasetChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated fixed64 dataset_id = 1;
  for (int i = 0; i < this->dataset_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(1, this->dataset_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDatasetChange::ByteSize() const {
  int total_size = 0;
  
  // repeated fixed64 dataset_id = 1;
  {
    int data_size = 0;
    data_size = 8 * this->dataset_id_size();
    total_size += 1 * this->dataset_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDatasetChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDatasetChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDatasetChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDatasetChange::MergeFrom(const EventDatasetChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataset_id_.MergeFrom(from.dataset_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDatasetChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDatasetChange::CopyFrom(const EventDatasetChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDatasetChange::IsInitialized() const {
  
  return true;
}

void EventDatasetChange::Swap(EventDatasetChange* other) {
  if (other != this) {
    dataset_id_.Swap(&other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDatasetChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDatasetChange_descriptor_;
  metadata.reflection = EventDatasetChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PairingRequestAttribute::kKeyFieldNumber;
const int PairingRequestAttribute::kValueFieldNumber;
#endif  // !_MSC_VER

PairingRequestAttribute::PairingRequestAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PairingRequestAttribute::InitAsDefaultInstance() {
}

PairingRequestAttribute::PairingRequestAttribute(const PairingRequestAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PairingRequestAttribute::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PairingRequestAttribute::~PairingRequestAttribute() {
  SharedDtor();
}

void PairingRequestAttribute::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PairingRequestAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PairingRequestAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PairingRequestAttribute_descriptor_;
}

const PairingRequestAttribute& PairingRequestAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PairingRequestAttribute* PairingRequestAttribute::default_instance_ = NULL;

PairingRequestAttribute* PairingRequestAttribute::New() const {
  return new PairingRequestAttribute;
}

void PairingRequestAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PairingRequestAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PairingRequestAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PairingRequestAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PairingRequestAttribute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PairingRequestAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PairingRequestAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PairingRequestAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PairingRequestAttribute::MergeFrom(const PairingRequestAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PairingRequestAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairingRequestAttribute::CopyFrom(const PairingRequestAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairingRequestAttribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PairingRequestAttribute::Swap(PairingRequestAttribute* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PairingRequestAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PairingRequestAttribute_descriptor_;
  metadata.reflection = PairingRequestAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventPairingRequest::kPairingAttributesFieldNumber;
const int EventPairingRequest::kTransactionIdFieldNumber;
#endif  // !_MSC_VER

EventPairingRequest::EventPairingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventPairingRequest::InitAsDefaultInstance() {
}

EventPairingRequest::EventPairingRequest(const EventPairingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventPairingRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventPairingRequest::~EventPairingRequest() {
  SharedDtor();
}

void EventPairingRequest::SharedDtor() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (this != default_instance_) {
  }
}

void EventPairingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventPairingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventPairingRequest_descriptor_;
}

const EventPairingRequest& EventPairingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventPairingRequest* EventPairingRequest::default_instance_ = NULL;

EventPairingRequest* EventPairingRequest::New() const {
  return new EventPairingRequest;
}

void EventPairingRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
  }
  pairing_attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventPairingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.PairingRequestAttribute pairing_attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairing_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairing_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pairing_attributes;
        if (input->ExpectTag(18)) goto parse_transaction_id;
        break;
      }
      
      // required string transaction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transaction_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventPairingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 1;
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pairing_attributes(i), output);
  }
  
  // required string transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->transaction_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventPairingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 1;
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pairing_attributes(i), target);
  }
  
  // required string transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->transaction_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventPairingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string transaction_id = 2;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }
    
  }
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 1;
  total_size += 1 * this->pairing_attributes_size();
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairing_attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventPairingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventPairingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventPairingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventPairingRequest::MergeFrom(const EventPairingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairing_attributes_.MergeFrom(from.pairing_attributes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventPairingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPairingRequest::CopyFrom(const EventPairingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPairingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < pairing_attributes_size(); i++) {
    if (!this->pairing_attributes(i).IsInitialized()) return false;
  }
  return true;
}

void EventPairingRequest::Swap(EventPairingRequest* other) {
  if (other != this) {
    pairing_attributes_.Swap(&other->pairing_attributes_);
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventPairingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventPairingRequest_descriptor_;
  metadata.reflection = EventPairingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventStorageNodeChange::kDeviceIdFieldNumber;
const int EventStorageNodeChange::kChangeTypeFieldNumber;
#endif  // !_MSC_VER

EventStorageNodeChange::EventStorageNodeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventStorageNodeChange::InitAsDefaultInstance() {
}

EventStorageNodeChange::EventStorageNodeChange(const EventStorageNodeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventStorageNodeChange::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  change_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventStorageNodeChange::~EventStorageNodeChange() {
  SharedDtor();
}

void EventStorageNodeChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventStorageNodeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventStorageNodeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventStorageNodeChange_descriptor_;
}

const EventStorageNodeChange& EventStorageNodeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventStorageNodeChange* EventStorageNodeChange::default_instance_ = NULL;

EventStorageNodeChange* EventStorageNodeChange::New() const {
  return new EventStorageNodeChange;
}

void EventStorageNodeChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    change_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventStorageNodeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_change_type;
        break;
      }
      
      // required .ccd.StorageNodeChangeType_t change_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::StorageNodeChangeType_t_IsValid(value)) {
            set_change_type(static_cast< ccd::StorageNodeChangeType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventStorageNodeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->device_id(), output);
  }
  
  // required .ccd.StorageNodeChangeType_t change_type = 2;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->change_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventStorageNodeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->device_id(), target);
  }
  
  // required .ccd.StorageNodeChangeType_t change_type = 2;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->change_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventStorageNodeChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 device_id = 1;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.StorageNodeChangeType_t change_type = 2;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventStorageNodeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventStorageNodeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventStorageNodeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventStorageNodeChange::MergeFrom(const EventStorageNodeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventStorageNodeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventStorageNodeChange::CopyFrom(const EventStorageNodeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventStorageNodeChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EventStorageNodeChange::Swap(EventStorageNodeChange* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventStorageNodeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventStorageNodeChange_descriptor_;
  metadata.reflection = EventStorageNodeChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventUserLogin::kUserIdFieldNumber;
#endif  // !_MSC_VER

EventUserLogin::EventUserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventUserLogin::InitAsDefaultInstance() {
}

EventUserLogin::EventUserLogin(const EventUserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventUserLogin::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventUserLogin::~EventUserLogin() {
  SharedDtor();
}

void EventUserLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventUserLogin_descriptor_;
}

const EventUserLogin& EventUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventUserLogin* EventUserLogin::default_instance_ = NULL;

EventUserLogin* EventUserLogin::New() const {
  return new EventUserLogin;
}

void EventUserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventUserLogin::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventUserLogin::MergeFrom(const EventUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventUserLogin::CopyFrom(const EventUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventUserLogin::Swap(EventUserLogin* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventUserLogin_descriptor_;
  metadata.reflection = EventUserLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventUserLogout::kUserIdFieldNumber;
const int EventUserLogout::kReasonFieldNumber;
#endif  // !_MSC_VER

EventUserLogout::EventUserLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventUserLogout::InitAsDefaultInstance() {
}

EventUserLogout::EventUserLogout(const EventUserLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventUserLogout::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventUserLogout::~EventUserLogout() {
  SharedDtor();
}

void EventUserLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventUserLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventUserLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventUserLogout_descriptor_;
}

const EventUserLogout& EventUserLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventUserLogout* EventUserLogout::default_instance_ = NULL;

EventUserLogout* EventUserLogout::New() const {
  return new EventUserLogout;
}

void EventUserLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventUserLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }
      
      // optional .ccd.LogoutReason_t reason = 2 [default = LOGOUT_REASON_UNSPECIFIED];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::LogoutReason_t_IsValid(value)) {
            set_reason(static_cast< ccd::LogoutReason_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventUserLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional .ccd.LogoutReason_t reason = 2 [default = LOGOUT_REASON_UNSPECIFIED];
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventUserLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional .ccd.LogoutReason_t reason = 2 [default = LOGOUT_REASON_UNSPECIFIED];
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventUserLogout::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional .ccd.LogoutReason_t reason = 2 [default = LOGOUT_REASON_UNSPECIFIED];
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventUserLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventUserLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventUserLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventUserLogout::MergeFrom(const EventUserLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventUserLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventUserLogout::CopyFrom(const EventUserLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUserLogout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventUserLogout::Swap(EventUserLogout* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventUserLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventUserLogout_descriptor_;
  metadata.reflection = EventUserLogout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDocSaveAndGoCompletion::kChangeTypeFieldNumber;
const int EventDocSaveAndGoCompletion::kFilePathAndNameFieldNumber;
const int EventDocSaveAndGoCompletion::kNewFilePathAndNameFieldNumber;
const int EventDocSaveAndGoCompletion::kModifyTimeFieldNumber;
const int EventDocSaveAndGoCompletion::kResultFieldNumber;
const int EventDocSaveAndGoCompletion::kDocnameFieldNumber;
const int EventDocSaveAndGoCompletion::kCompIdFieldNumber;
const int EventDocSaveAndGoCompletion::kRevisionFieldNumber;
#endif  // !_MSC_VER

EventDocSaveAndGoCompletion::EventDocSaveAndGoCompletion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDocSaveAndGoCompletion::InitAsDefaultInstance() {
}

EventDocSaveAndGoCompletion::EventDocSaveAndGoCompletion(const EventDocSaveAndGoCompletion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDocSaveAndGoCompletion::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 1;
  file_path_and_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_file_path_and_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modify_time_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  docname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comp_id_ = GOOGLE_ULONGLONG(0);
  revision_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDocSaveAndGoCompletion::~EventDocSaveAndGoCompletion() {
  SharedDtor();
}

void EventDocSaveAndGoCompletion::SharedDtor() {
  if (file_path_and_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_and_name_;
  }
  if (new_file_path_and_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_file_path_and_name_;
  }
  if (docname_ != &::google::protobuf::internal::kEmptyString) {
    delete docname_;
  }
  if (this != default_instance_) {
  }
}

void EventDocSaveAndGoCompletion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDocSaveAndGoCompletion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDocSaveAndGoCompletion_descriptor_;
}

const EventDocSaveAndGoCompletion& EventDocSaveAndGoCompletion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDocSaveAndGoCompletion* EventDocSaveAndGoCompletion::default_instance_ = NULL;

EventDocSaveAndGoCompletion* EventDocSaveAndGoCompletion::New() const {
  return new EventDocSaveAndGoCompletion;
}

void EventDocSaveAndGoCompletion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    change_type_ = 1;
    if (has_file_path_and_name()) {
      if (file_path_and_name_ != &::google::protobuf::internal::kEmptyString) {
        file_path_and_name_->clear();
      }
    }
    if (has_new_file_path_and_name()) {
      if (new_file_path_and_name_ != &::google::protobuf::internal::kEmptyString) {
        new_file_path_and_name_->clear();
      }
    }
    modify_time_ = GOOGLE_ULONGLONG(0);
    result_ = 0;
    if (has_docname()) {
      if (docname_ != &::google::protobuf::internal::kEmptyString) {
        docname_->clear();
      }
    }
    comp_id_ = GOOGLE_ULONGLONG(0);
    revision_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDocSaveAndGoCompletion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.DocSaveAndGoChangeType change_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::DocSaveAndGoChangeType_IsValid(value)) {
            set_change_type(static_cast< ccd::DocSaveAndGoChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_path_and_name;
        break;
      }
      
      // required string file_path_and_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path_and_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path_and_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path_and_name().data(), this->file_path_and_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_file_path_and_name;
        break;
      }
      
      // optional string new_file_path_and_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_file_path_and_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_file_path_and_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_file_path_and_name().data(), this->new_file_path_and_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_modify_time;
        break;
      }
      
      // optional fixed64 modify_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_modify_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &modify_time_)));
          set_has_modify_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_result;
        break;
      }
      
      // optional sint32 result = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_docname;
        break;
      }
      
      // optional string docname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_docname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->docname().data(), this->docname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_comp_id;
        break;
      }
      
      // optional fixed64 comp_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_revision;
        break;
      }
      
      // optional fixed64 revision = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDocSaveAndGoCompletion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.DocSaveAndGoChangeType change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }
  
  // required string file_path_and_name = 3;
  if (has_file_path_and_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path_and_name().data(), this->file_path_and_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->file_path_and_name(), output);
  }
  
  // optional string new_file_path_and_name = 4;
  if (has_new_file_path_and_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_file_path_and_name().data(), this->new_file_path_and_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_file_path_and_name(), output);
  }
  
  // optional fixed64 modify_time = 5;
  if (has_modify_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->modify_time(), output);
  }
  
  // optional sint32 result = 10;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->result(), output);
  }
  
  // optional string docname = 11;
  if (has_docname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docname().data(), this->docname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->docname(), output);
  }
  
  // optional fixed64 comp_id = 12;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->comp_id(), output);
  }
  
  // optional fixed64 revision = 13;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->revision(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDocSaveAndGoCompletion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.DocSaveAndGoChangeType change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }
  
  // required string file_path_and_name = 3;
  if (has_file_path_and_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path_and_name().data(), this->file_path_and_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_path_and_name(), target);
  }
  
  // optional string new_file_path_and_name = 4;
  if (has_new_file_path_and_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_file_path_and_name().data(), this->new_file_path_and_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_file_path_and_name(), target);
  }
  
  // optional fixed64 modify_time = 5;
  if (has_modify_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->modify_time(), target);
  }
  
  // optional sint32 result = 10;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->result(), target);
  }
  
  // optional string docname = 11;
  if (has_docname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->docname().data(), this->docname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->docname(), target);
  }
  
  // optional fixed64 comp_id = 12;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->comp_id(), target);
  }
  
  // optional fixed64 revision = 13;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->revision(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDocSaveAndGoCompletion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.DocSaveAndGoChangeType change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }
    
    // required string file_path_and_name = 3;
    if (has_file_path_and_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path_and_name());
    }
    
    // optional string new_file_path_and_name = 4;
    if (has_new_file_path_and_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_file_path_and_name());
    }
    
    // optional fixed64 modify_time = 5;
    if (has_modify_time()) {
      total_size += 1 + 8;
    }
    
    // optional sint32 result = 10;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->result());
    }
    
    // optional string docname = 11;
    if (has_docname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->docname());
    }
    
    // optional fixed64 comp_id = 12;
    if (has_comp_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 revision = 13;
    if (has_revision()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDocSaveAndGoCompletion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDocSaveAndGoCompletion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDocSaveAndGoCompletion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDocSaveAndGoCompletion::MergeFrom(const EventDocSaveAndGoCompletion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_file_path_and_name()) {
      set_file_path_and_name(from.file_path_and_name());
    }
    if (from.has_new_file_path_and_name()) {
      set_new_file_path_and_name(from.new_file_path_and_name());
    }
    if (from.has_modify_time()) {
      set_modify_time(from.modify_time());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_docname()) {
      set_docname(from.docname());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDocSaveAndGoCompletion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDocSaveAndGoCompletion::CopyFrom(const EventDocSaveAndGoCompletion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDocSaveAndGoCompletion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EventDocSaveAndGoCompletion::Swap(EventDocSaveAndGoCompletion* other) {
  if (other != this) {
    std::swap(change_type_, other->change_type_);
    std::swap(file_path_and_name_, other->file_path_and_name_);
    std::swap(new_file_path_and_name_, other->new_file_path_and_name_);
    std::swap(modify_time_, other->modify_time_);
    std::swap(result_, other->result_);
    std::swap(docname_, other->docname_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(revision_, other->revision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDocSaveAndGoCompletion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDocSaveAndGoCompletion_descriptor_;
  metadata.reflection = EventDocSaveAndGoCompletion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDocSaveAndGoEngineStateChange::kEngineStartedFieldNumber;
#endif  // !_MSC_VER

EventDocSaveAndGoEngineStateChange::EventDocSaveAndGoEngineStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDocSaveAndGoEngineStateChange::InitAsDefaultInstance() {
}

EventDocSaveAndGoEngineStateChange::EventDocSaveAndGoEngineStateChange(const EventDocSaveAndGoEngineStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDocSaveAndGoEngineStateChange::SharedCtor() {
  _cached_size_ = 0;
  engine_started_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDocSaveAndGoEngineStateChange::~EventDocSaveAndGoEngineStateChange() {
  SharedDtor();
}

void EventDocSaveAndGoEngineStateChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventDocSaveAndGoEngineStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDocSaveAndGoEngineStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDocSaveAndGoEngineStateChange_descriptor_;
}

const EventDocSaveAndGoEngineStateChange& EventDocSaveAndGoEngineStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDocSaveAndGoEngineStateChange* EventDocSaveAndGoEngineStateChange::default_instance_ = NULL;

EventDocSaveAndGoEngineStateChange* EventDocSaveAndGoEngineStateChange::New() const {
  return new EventDocSaveAndGoEngineStateChange;
}

void EventDocSaveAndGoEngineStateChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    engine_started_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDocSaveAndGoEngineStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool engine_started = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
          set_has_engine_started();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDocSaveAndGoEngineStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool engine_started = 1;
  if (has_engine_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->engine_started(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDocSaveAndGoEngineStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool engine_started = 1;
  if (has_engine_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->engine_started(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDocSaveAndGoEngineStateChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool engine_started = 1;
    if (has_engine_started()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDocSaveAndGoEngineStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDocSaveAndGoEngineStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDocSaveAndGoEngineStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDocSaveAndGoEngineStateChange::MergeFrom(const EventDocSaveAndGoEngineStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_engine_started()) {
      set_engine_started(from.engine_started());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDocSaveAndGoEngineStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDocSaveAndGoEngineStateChange::CopyFrom(const EventDocSaveAndGoEngineStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDocSaveAndGoEngineStateChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventDocSaveAndGoEngineStateChange::Swap(EventDocSaveAndGoEngineStateChange* other) {
  if (other != this) {
    std::swap(engine_started_, other->engine_started_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDocSaveAndGoEngineStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDocSaveAndGoEngineStateChange_descriptor_;
  metadata.reflection = EventDocSaveAndGoEngineStateChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventSWUpdateProgress::kHandleFieldNumber;
const int EventSWUpdateProgress::kTotalTransferSizeFieldNumber;
const int EventSWUpdateProgress::kBytesTransferredCntFieldNumber;
const int EventSWUpdateProgress::kStateFieldNumber;
#endif  // !_MSC_VER

EventSWUpdateProgress::EventSWUpdateProgress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventSWUpdateProgress::InitAsDefaultInstance() {
}

EventSWUpdateProgress::EventSWUpdateProgress(const EventSWUpdateProgress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventSWUpdateProgress::SharedCtor() {
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  total_transfer_size_ = GOOGLE_ULONGLONG(0);
  bytes_transferred_cnt_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventSWUpdateProgress::~EventSWUpdateProgress() {
  SharedDtor();
}

void EventSWUpdateProgress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventSWUpdateProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSWUpdateProgress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSWUpdateProgress_descriptor_;
}

const EventSWUpdateProgress& EventSWUpdateProgress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventSWUpdateProgress* EventSWUpdateProgress::default_instance_ = NULL;

EventSWUpdateProgress* EventSWUpdateProgress::New() const {
  return new EventSWUpdateProgress;
}

void EventSWUpdateProgress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = GOOGLE_ULONGLONG(0);
    total_transfer_size_ = GOOGLE_ULONGLONG(0);
    bytes_transferred_cnt_ = GOOGLE_ULONGLONG(0);
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventSWUpdateProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_transfer_size;
        break;
      }
      
      // required uint64 total_transfer_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_transfer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_transfer_size_)));
          set_has_total_transfer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bytes_transferred_cnt;
        break;
      }
      
      // required uint64 bytes_transferred_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_transferred_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_transferred_cnt_)));
          set_has_bytes_transferred_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // required .ccd.SWUpdateDownloadState_t state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SWUpdateDownloadState_t_IsValid(value)) {
            set_state(static_cast< ccd::SWUpdateDownloadState_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventSWUpdateProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }
  
  // required uint64 total_transfer_size = 2;
  if (has_total_transfer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->total_transfer_size(), output);
  }
  
  // required uint64 bytes_transferred_cnt = 3;
  if (has_bytes_transferred_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_transferred_cnt(), output);
  }
  
  // required .ccd.SWUpdateDownloadState_t state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventSWUpdateProgress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }
  
  // required uint64 total_transfer_size = 2;
  if (has_total_transfer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->total_transfer_size(), target);
  }
  
  // required uint64 bytes_transferred_cnt = 3;
  if (has_bytes_transferred_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_transferred_cnt(), target);
  }
  
  // required .ccd.SWUpdateDownloadState_t state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventSWUpdateProgress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }
    
    // required uint64 total_transfer_size = 2;
    if (has_total_transfer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_transfer_size());
    }
    
    // required uint64 bytes_transferred_cnt = 3;
    if (has_bytes_transferred_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_transferred_cnt());
    }
    
    // required .ccd.SWUpdateDownloadState_t state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSWUpdateProgress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventSWUpdateProgress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventSWUpdateProgress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventSWUpdateProgress::MergeFrom(const EventSWUpdateProgress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_total_transfer_size()) {
      set_total_transfer_size(from.total_transfer_size());
    }
    if (from.has_bytes_transferred_cnt()) {
      set_bytes_transferred_cnt(from.bytes_transferred_cnt());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventSWUpdateProgress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSWUpdateProgress::CopyFrom(const EventSWUpdateProgress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSWUpdateProgress::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void EventSWUpdateProgress::Swap(EventSWUpdateProgress* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(total_transfer_size_, other->total_transfer_size_);
    std::swap(bytes_transferred_cnt_, other->bytes_transferred_cnt_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventSWUpdateProgress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSWUpdateProgress_descriptor_;
  metadata.reflection = EventSWUpdateProgress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventIoacStatusChange::kStatusSummaryFieldNumber;
#endif  // !_MSC_VER

EventIoacStatusChange::EventIoacStatusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventIoacStatusChange::InitAsDefaultInstance() {
}

EventIoacStatusChange::EventIoacStatusChange(const EventIoacStatusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventIoacStatusChange::SharedCtor() {
  _cached_size_ = 0;
  status_summary_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventIoacStatusChange::~EventIoacStatusChange() {
  SharedDtor();
}

void EventIoacStatusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventIoacStatusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventIoacStatusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventIoacStatusChange_descriptor_;
}

const EventIoacStatusChange& EventIoacStatusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventIoacStatusChange* EventIoacStatusChange::default_instance_ = NULL;

EventIoacStatusChange* EventIoacStatusChange::New() const {
  return new EventIoacStatusChange;
}

void EventIoacStatusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_summary_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventIoacStatusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.IoacStatusSummary_t status_summary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::IoacStatusSummary_t_IsValid(value)) {
            set_status_summary(static_cast< ccd::IoacStatusSummary_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventIoacStatusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.IoacStatusSummary_t status_summary = 1;
  if (has_status_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status_summary(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventIoacStatusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.IoacStatusSummary_t status_summary = 1;
  if (has_status_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status_summary(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventIoacStatusChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.IoacStatusSummary_t status_summary = 1;
    if (has_status_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status_summary());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventIoacStatusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventIoacStatusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventIoacStatusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventIoacStatusChange::MergeFrom(const EventIoacStatusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_summary()) {
      set_status_summary(from.status_summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventIoacStatusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventIoacStatusChange::CopyFrom(const EventIoacStatusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventIoacStatusChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventIoacStatusChange::Swap(EventIoacStatusChange* other) {
  if (other != this) {
    std::swap(status_summary_, other->status_summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventIoacStatusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventIoacStatusChange_descriptor_;
  metadata.reflection = EventIoacStatusChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventLanDevicesChange::kTimestampFieldNumber;
#endif  // !_MSC_VER

EventLanDevicesChange::EventLanDevicesChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventLanDevicesChange::InitAsDefaultInstance() {
}

EventLanDevicesChange::EventLanDevicesChange(const EventLanDevicesChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventLanDevicesChange::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventLanDevicesChange::~EventLanDevicesChange() {
  SharedDtor();
}

void EventLanDevicesChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventLanDevicesChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventLanDevicesChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventLanDevicesChange_descriptor_;
}

const EventLanDevicesChange& EventLanDevicesChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventLanDevicesChange* EventLanDevicesChange::default_instance_ = NULL;

EventLanDevicesChange* EventLanDevicesChange::New() const {
  return new EventLanDevicesChange;
}

void EventLanDevicesChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventLanDevicesChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventLanDevicesChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventLanDevicesChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventLanDevicesChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLanDevicesChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventLanDevicesChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventLanDevicesChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventLanDevicesChange::MergeFrom(const EventLanDevicesChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventLanDevicesChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventLanDevicesChange::CopyFrom(const EventLanDevicesChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLanDevicesChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventLanDevicesChange::Swap(EventLanDevicesChange* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventLanDevicesChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventLanDevicesChange_descriptor_;
  metadata.reflection = EventLanDevicesChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventLanDevicesProbeRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

EventLanDevicesProbeRequest::EventLanDevicesProbeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventLanDevicesProbeRequest::InitAsDefaultInstance() {
}

EventLanDevicesProbeRequest::EventLanDevicesProbeRequest(const EventLanDevicesProbeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventLanDevicesProbeRequest::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventLanDevicesProbeRequest::~EventLanDevicesProbeRequest() {
  SharedDtor();
}

void EventLanDevicesProbeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventLanDevicesProbeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventLanDevicesProbeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventLanDevicesProbeRequest_descriptor_;
}

const EventLanDevicesProbeRequest& EventLanDevicesProbeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventLanDevicesProbeRequest* EventLanDevicesProbeRequest::default_instance_ = NULL;

EventLanDevicesProbeRequest* EventLanDevicesProbeRequest::New() const {
  return new EventLanDevicesProbeRequest;
}

void EventLanDevicesProbeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventLanDevicesProbeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventLanDevicesProbeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventLanDevicesProbeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventLanDevicesProbeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventLanDevicesProbeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventLanDevicesProbeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventLanDevicesProbeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventLanDevicesProbeRequest::MergeFrom(const EventLanDevicesProbeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventLanDevicesProbeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventLanDevicesProbeRequest::CopyFrom(const EventLanDevicesProbeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLanDevicesProbeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventLanDevicesProbeRequest::Swap(EventLanDevicesProbeRequest* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventLanDevicesProbeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventLanDevicesProbeRequest_descriptor_;
  metadata.reflection = EventLanDevicesProbeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventPowerModeChange::kPowerModeFieldNumber;
#endif  // !_MSC_VER

EventPowerModeChange::EventPowerModeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventPowerModeChange::InitAsDefaultInstance() {
}

EventPowerModeChange::EventPowerModeChange(const EventPowerModeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventPowerModeChange::SharedCtor() {
  _cached_size_ = 0;
  power_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventPowerModeChange::~EventPowerModeChange() {
  SharedDtor();
}

void EventPowerModeChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventPowerModeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventPowerModeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventPowerModeChange_descriptor_;
}

const EventPowerModeChange& EventPowerModeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventPowerModeChange* EventPowerModeChange::default_instance_ = NULL;

EventPowerModeChange* EventPowerModeChange::New() const {
  return new EventPowerModeChange;
}

void EventPowerModeChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    power_mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventPowerModeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.PowerMode_t power_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::PowerMode_t_IsValid(value)) {
            set_power_mode(static_cast< ccd::PowerMode_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventPowerModeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.PowerMode_t power_mode = 1;
  if (has_power_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->power_mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventPowerModeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.PowerMode_t power_mode = 1;
  if (has_power_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->power_mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventPowerModeChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.PowerMode_t power_mode = 1;
    if (has_power_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventPowerModeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventPowerModeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventPowerModeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventPowerModeChange::MergeFrom(const EventPowerModeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_power_mode()) {
      set_power_mode(from.power_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventPowerModeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPowerModeChange::CopyFrom(const EventPowerModeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPowerModeChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventPowerModeChange::Swap(EventPowerModeChange* other) {
  if (other != this) {
    std::swap(power_mode_, other->power_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventPowerModeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventPowerModeChange_descriptor_;
  metadata.reflection = EventPowerModeChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventRemoteSwUpdateMessage::kSourceDeviceIdFieldNumber;
#endif  // !_MSC_VER

EventRemoteSwUpdateMessage::EventRemoteSwUpdateMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventRemoteSwUpdateMessage::InitAsDefaultInstance() {
}

EventRemoteSwUpdateMessage::EventRemoteSwUpdateMessage(const EventRemoteSwUpdateMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventRemoteSwUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  source_device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventRemoteSwUpdateMessage::~EventRemoteSwUpdateMessage() {
  SharedDtor();
}

void EventRemoteSwUpdateMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventRemoteSwUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventRemoteSwUpdateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventRemoteSwUpdateMessage_descriptor_;
}

const EventRemoteSwUpdateMessage& EventRemoteSwUpdateMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventRemoteSwUpdateMessage* EventRemoteSwUpdateMessage::default_instance_ = NULL;

EventRemoteSwUpdateMessage* EventRemoteSwUpdateMessage::New() const {
  return new EventRemoteSwUpdateMessage;
}

void EventRemoteSwUpdateMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventRemoteSwUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 source_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_device_id_)));
          set_has_source_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventRemoteSwUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 source_device_id = 1;
  if (has_source_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventRemoteSwUpdateMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 source_device_id = 1;
  if (has_source_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventRemoteSwUpdateMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 source_device_id = 1;
    if (has_source_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventRemoteSwUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventRemoteSwUpdateMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventRemoteSwUpdateMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventRemoteSwUpdateMessage::MergeFrom(const EventRemoteSwUpdateMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_device_id()) {
      set_source_device_id(from.source_device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventRemoteSwUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventRemoteSwUpdateMessage::CopyFrom(const EventRemoteSwUpdateMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRemoteSwUpdateMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventRemoteSwUpdateMessage::Swap(EventRemoteSwUpdateMessage* other) {
  if (other != this) {
    std::swap(source_device_id_, other->source_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventRemoteSwUpdateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventRemoteSwUpdateMessage_descriptor_;
  metadata.reflection = EventRemoteSwUpdateMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventAsyncUploadCompletion::kTransactionIdFieldNumber;
const int EventAsyncUploadCompletion::kUserIdFieldNumber;
const int EventAsyncUploadCompletion::kHandleFieldNumber;
const int EventAsyncUploadCompletion::kUploadStatusFieldNumber;
const int EventAsyncUploadCompletion::kStateFieldNumber;
const int EventAsyncUploadCompletion::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

EventAsyncUploadCompletion::EventAsyncUploadCompletion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventAsyncUploadCompletion::InitAsDefaultInstance() {
}

EventAsyncUploadCompletion::EventAsyncUploadCompletion(const EventAsyncUploadCompletion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventAsyncUploadCompletion::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  handle_ = GOOGLE_ULONGLONG(0);
  upload_status_ = 0u;
  state_ = 1;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventAsyncUploadCompletion::~EventAsyncUploadCompletion() {
  SharedDtor();
}

void EventAsyncUploadCompletion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventAsyncUploadCompletion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventAsyncUploadCompletion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventAsyncUploadCompletion_descriptor_;
}

const EventAsyncUploadCompletion& EventAsyncUploadCompletion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventAsyncUploadCompletion* EventAsyncUploadCompletion::default_instance_ = NULL;

EventAsyncUploadCompletion* EventAsyncUploadCompletion::New() const {
  return new EventAsyncUploadCompletion;
}

void EventAsyncUploadCompletion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transaction_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
    handle_ = GOOGLE_ULONGLONG(0);
    upload_status_ = 0u;
    state_ = 1;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventAsyncUploadCompletion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_user_id;
        break;
      }
      
      // required fixed64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_handle;
        break;
      }
      
      // required fixed64 handle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_upload_status;
        break;
      }
      
      // required fixed32 upload_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_upload_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &upload_status_)));
          set_has_upload_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }
      
      // required .ccd.AsyncUploadState_t state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::AsyncUploadState_t_IsValid(value)) {
            set_state(static_cast< ccd::AsyncUploadState_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_error_code;
        break;
      }
      
      // optional sint32 error_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventAsyncUploadCompletion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->transaction_id(), output);
  }
  
  // required fixed64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_id(), output);
  }
  
  // required fixed64 handle = 3;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->handle(), output);
  }
  
  // required fixed32 upload_status = 4;
  if (has_upload_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->upload_status(), output);
  }
  
  // required .ccd.AsyncUploadState_t state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }
  
  // optional sint32 error_code = 6;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventAsyncUploadCompletion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->transaction_id(), target);
  }
  
  // required fixed64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_id(), target);
  }
  
  // required fixed64 handle = 3;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->handle(), target);
  }
  
  // required fixed32 upload_status = 4;
  if (has_upload_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->upload_status(), target);
  }
  
  // required .ccd.AsyncUploadState_t state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }
  
  // optional sint32 error_code = 6;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventAsyncUploadCompletion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 handle = 3;
    if (has_handle()) {
      total_size += 1 + 8;
    }
    
    // required fixed32 upload_status = 4;
    if (has_upload_status()) {
      total_size += 1 + 4;
    }
    
    // required .ccd.AsyncUploadState_t state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional sint32 error_code = 6;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventAsyncUploadCompletion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventAsyncUploadCompletion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventAsyncUploadCompletion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventAsyncUploadCompletion::MergeFrom(const EventAsyncUploadCompletion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_upload_status()) {
      set_upload_status(from.upload_status());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventAsyncUploadCompletion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAsyncUploadCompletion::CopyFrom(const EventAsyncUploadCompletion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAsyncUploadCompletion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void EventAsyncUploadCompletion::Swap(EventAsyncUploadCompletion* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(handle_, other->handle_);
    std::swap(upload_status_, other->upload_status_);
    std::swap(state_, other->state_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventAsyncUploadCompletion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventAsyncUploadCompletion_descriptor_;
  metadata.reflection = EventAsyncUploadCompletion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventSyncBackCompletion::kUserIdFieldNumber;
const int EventSyncBackCompletion::kDatasetIdFieldNumber;
const int EventSyncBackCompletion::kComponentNameFieldNumber;
const int EventSyncBackCompletion::kComponentIdFieldNumber;
const int EventSyncBackCompletion::kRevisionFieldNumber;
const int EventSyncBackCompletion::kLocalPathFieldNumber;
#endif  // !_MSC_VER

EventSyncBackCompletion::EventSyncBackCompletion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventSyncBackCompletion::InitAsDefaultInstance() {
}

EventSyncBackCompletion::EventSyncBackCompletion(const EventSyncBackCompletion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventSyncBackCompletion::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  component_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  component_id_ = GOOGLE_ULONGLONG(0);
  revision_ = GOOGLE_ULONGLONG(0);
  local_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventSyncBackCompletion::~EventSyncBackCompletion() {
  SharedDtor();
}

void EventSyncBackCompletion::SharedDtor() {
  if (component_name_ != &::google::protobuf::internal::kEmptyString) {
    delete component_name_;
  }
  if (local_path_ != &::google::protobuf::internal::kEmptyString) {
    delete local_path_;
  }
  if (this != default_instance_) {
  }
}

void EventSyncBackCompletion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSyncBackCompletion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSyncBackCompletion_descriptor_;
}

const EventSyncBackCompletion& EventSyncBackCompletion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventSyncBackCompletion* EventSyncBackCompletion::default_instance_ = NULL;

EventSyncBackCompletion* EventSyncBackCompletion::New() const {
  return new EventSyncBackCompletion;
}

void EventSyncBackCompletion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
    if (has_component_name()) {
      if (component_name_ != &::google::protobuf::internal::kEmptyString) {
        component_name_->clear();
      }
    }
    component_id_ = GOOGLE_ULONGLONG(0);
    revision_ = GOOGLE_ULONGLONG(0);
    if (has_local_path()) {
      if (local_path_ != &::google::protobuf::internal::kEmptyString) {
        local_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventSyncBackCompletion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_component_name;
        break;
      }
      
      // required string component_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_component_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_component_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->component_name().data(), this->component_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_component_id;
        break;
      }
      
      // required fixed64 component_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &component_id_)));
          set_has_component_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_revision;
        break;
      }
      
      // required fixed64 revision = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_local_path;
        break;
      }
      
      // required string local_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_path().data(), this->local_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventSyncBackCompletion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  // required string component_name = 3;
  if (has_component_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->component_name().data(), this->component_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->component_name(), output);
  }
  
  // required fixed64 component_id = 4;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->component_id(), output);
  }
  
  // required fixed64 revision = 5;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->revision(), output);
  }
  
  // required string local_path = 6;
  if (has_local_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_path().data(), this->local_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->local_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventSyncBackCompletion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  // required string component_name = 3;
  if (has_component_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->component_name().data(), this->component_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->component_name(), target);
  }
  
  // required fixed64 component_id = 4;
  if (has_component_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->component_id(), target);
  }
  
  // required fixed64 revision = 5;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->revision(), target);
  }
  
  // required string local_path = 6;
  if (has_local_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_path().data(), this->local_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->local_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventSyncBackCompletion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required string component_name = 3;
    if (has_component_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->component_name());
    }
    
    // required fixed64 component_id = 4;
    if (has_component_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 revision = 5;
    if (has_revision()) {
      total_size += 1 + 8;
    }
    
    // required string local_path = 6;
    if (has_local_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSyncBackCompletion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventSyncBackCompletion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventSyncBackCompletion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventSyncBackCompletion::MergeFrom(const EventSyncBackCompletion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_component_name()) {
      set_component_name(from.component_name());
    }
    if (from.has_component_id()) {
      set_component_id(from.component_id());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_local_path()) {
      set_local_path(from.local_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventSyncBackCompletion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSyncBackCompletion::CopyFrom(const EventSyncBackCompletion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSyncBackCompletion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void EventSyncBackCompletion::Swap(EventSyncBackCompletion* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(component_name_, other->component_name_);
    std::swap(component_id_, other->component_id_);
    std::swap(revision_, other->revision_);
    std::swap(local_path_, other->local_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventSyncBackCompletion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSyncBackCompletion_descriptor_;
  metadata.reflection = EventSyncBackCompletion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventPicStreamDBUpdateComplete::kDatasetIdFieldNumber;
#endif  // !_MSC_VER

EventPicStreamDBUpdateComplete::EventPicStreamDBUpdateComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventPicStreamDBUpdateComplete::InitAsDefaultInstance() {
}

EventPicStreamDBUpdateComplete::EventPicStreamDBUpdateComplete(const EventPicStreamDBUpdateComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventPicStreamDBUpdateComplete::SharedCtor() {
  _cached_size_ = 0;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventPicStreamDBUpdateComplete::~EventPicStreamDBUpdateComplete() {
  SharedDtor();
}

void EventPicStreamDBUpdateComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventPicStreamDBUpdateComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventPicStreamDBUpdateComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventPicStreamDBUpdateComplete_descriptor_;
}

const EventPicStreamDBUpdateComplete& EventPicStreamDBUpdateComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventPicStreamDBUpdateComplete* EventPicStreamDBUpdateComplete::default_instance_ = NULL;

EventPicStreamDBUpdateComplete* EventPicStreamDBUpdateComplete::New() const {
  return new EventPicStreamDBUpdateComplete;
}

void EventPicStreamDBUpdateComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataset_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventPicStreamDBUpdateComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventPicStreamDBUpdateComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dataset_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventPicStreamDBUpdateComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dataset_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventPicStreamDBUpdateComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dataset_id = 1;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventPicStreamDBUpdateComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventPicStreamDBUpdateComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventPicStreamDBUpdateComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventPicStreamDBUpdateComplete::MergeFrom(const EventPicStreamDBUpdateComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventPicStreamDBUpdateComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPicStreamDBUpdateComplete::CopyFrom(const EventPicStreamDBUpdateComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPicStreamDBUpdateComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventPicStreamDBUpdateComplete::Swap(EventPicStreamDBUpdateComplete* other) {
  if (other != this) {
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventPicStreamDBUpdateComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventPicStreamDBUpdateComplete_descriptor_;
  metadata.reflection = EventPicStreamDBUpdateComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventPicStreamStorageConservation::kIsDroppingModeFieldNumber;
const int EventPicStreamStorageConservation::kFreeDiskSizeBytesFieldNumber;
#endif  // !_MSC_VER

EventPicStreamStorageConservation::EventPicStreamStorageConservation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventPicStreamStorageConservation::InitAsDefaultInstance() {
}

EventPicStreamStorageConservation::EventPicStreamStorageConservation(const EventPicStreamStorageConservation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventPicStreamStorageConservation::SharedCtor() {
  _cached_size_ = 0;
  is_dropping_mode_ = false;
  free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventPicStreamStorageConservation::~EventPicStreamStorageConservation() {
  SharedDtor();
}

void EventPicStreamStorageConservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventPicStreamStorageConservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventPicStreamStorageConservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventPicStreamStorageConservation_descriptor_;
}

const EventPicStreamStorageConservation& EventPicStreamStorageConservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventPicStreamStorageConservation* EventPicStreamStorageConservation::default_instance_ = NULL;

EventPicStreamStorageConservation* EventPicStreamStorageConservation::New() const {
  return new EventPicStreamStorageConservation;
}

void EventPicStreamStorageConservation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_dropping_mode_ = false;
    free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventPicStreamStorageConservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_dropping_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dropping_mode_)));
          set_has_is_dropping_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_free_disk_size_bytes;
        break;
      }
      
      // optional uint64 free_disk_size_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_disk_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_disk_size_bytes_)));
          set_has_free_disk_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventPicStreamStorageConservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_dropping_mode = 1;
  if (has_is_dropping_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_dropping_mode(), output);
  }
  
  // optional uint64 free_disk_size_bytes = 2;
  if (has_free_disk_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->free_disk_size_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventPicStreamStorageConservation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_dropping_mode = 1;
  if (has_is_dropping_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_dropping_mode(), target);
  }
  
  // optional uint64 free_disk_size_bytes = 2;
  if (has_free_disk_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->free_disk_size_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventPicStreamStorageConservation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_dropping_mode = 1;
    if (has_is_dropping_mode()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 free_disk_size_bytes = 2;
    if (has_free_disk_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->free_disk_size_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventPicStreamStorageConservation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventPicStreamStorageConservation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventPicStreamStorageConservation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventPicStreamStorageConservation::MergeFrom(const EventPicStreamStorageConservation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_dropping_mode()) {
      set_is_dropping_mode(from.is_dropping_mode());
    }
    if (from.has_free_disk_size_bytes()) {
      set_free_disk_size_bytes(from.free_disk_size_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventPicStreamStorageConservation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPicStreamStorageConservation::CopyFrom(const EventPicStreamStorageConservation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPicStreamStorageConservation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventPicStreamStorageConservation::Swap(EventPicStreamStorageConservation* other) {
  if (other != this) {
    std::swap(is_dropping_mode_, other->is_dropping_mode_);
    std::swap(free_disk_size_bytes_, other->free_disk_size_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventPicStreamStorageConservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventPicStreamStorageConservation_descriptor_;
  metadata.reflection = EventPicStreamStorageConservation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventDeviceCredentialsChange::kChangeTypeFieldNumber;
const int EventDeviceCredentialsChange::kLocalFileRootPathFieldNumber;
#endif  // !_MSC_VER

EventDeviceCredentialsChange::EventDeviceCredentialsChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventDeviceCredentialsChange::InitAsDefaultInstance() {
}

EventDeviceCredentialsChange::EventDeviceCredentialsChange(const EventDeviceCredentialsChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventDeviceCredentialsChange::SharedCtor() {
  _cached_size_ = 0;
  change_type_ = 1;
  local_file_root_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventDeviceCredentialsChange::~EventDeviceCredentialsChange() {
  SharedDtor();
}

void EventDeviceCredentialsChange::SharedDtor() {
  if (local_file_root_path_ != &::google::protobuf::internal::kEmptyString) {
    delete local_file_root_path_;
  }
  if (this != default_instance_) {
  }
}

void EventDeviceCredentialsChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDeviceCredentialsChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDeviceCredentialsChange_descriptor_;
}

const EventDeviceCredentialsChange& EventDeviceCredentialsChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventDeviceCredentialsChange* EventDeviceCredentialsChange::default_instance_ = NULL;

EventDeviceCredentialsChange* EventDeviceCredentialsChange::New() const {
  return new EventDeviceCredentialsChange;
}

void EventDeviceCredentialsChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    change_type_ = 1;
    if (has_local_file_root_path()) {
      if (local_file_root_path_ != &::google::protobuf::internal::kEmptyString) {
        local_file_root_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventDeviceCredentialsChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.DeviceCredChangeType_t change_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::DeviceCredChangeType_t_IsValid(value)) {
            set_change_type(static_cast< ccd::DeviceCredChangeType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_local_file_root_path;
        break;
      }
      
      // required string local_file_root_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_file_root_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_file_root_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_file_root_path().data(), this->local_file_root_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventDeviceCredentialsChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.DeviceCredChangeType_t change_type = 1;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }
  
  // required string local_file_root_path = 2;
  if (has_local_file_root_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_file_root_path().data(), this->local_file_root_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->local_file_root_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventDeviceCredentialsChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.DeviceCredChangeType_t change_type = 1;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }
  
  // required string local_file_root_path = 2;
  if (has_local_file_root_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_file_root_path().data(), this->local_file_root_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_file_root_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventDeviceCredentialsChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.DeviceCredChangeType_t change_type = 1;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }
    
    // required string local_file_root_path = 2;
    if (has_local_file_root_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_file_root_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDeviceCredentialsChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventDeviceCredentialsChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventDeviceCredentialsChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventDeviceCredentialsChange::MergeFrom(const EventDeviceCredentialsChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_local_file_root_path()) {
      set_local_file_root_path(from.local_file_root_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventDeviceCredentialsChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDeviceCredentialsChange::CopyFrom(const EventDeviceCredentialsChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDeviceCredentialsChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EventDeviceCredentialsChange::Swap(EventDeviceCredentialsChange* other) {
  if (other != this) {
    std::swap(change_type_, other->change_type_);
    std::swap(local_file_root_path_, other->local_file_root_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventDeviceCredentialsChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDeviceCredentialsChange_descriptor_;
  metadata.reflection = EventDeviceCredentialsChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventUserCredentialsChange::kLocalFilePathFieldNumber;
#endif  // !_MSC_VER

EventUserCredentialsChange::EventUserCredentialsChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventUserCredentialsChange::InitAsDefaultInstance() {
}

EventUserCredentialsChange::EventUserCredentialsChange(const EventUserCredentialsChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventUserCredentialsChange::SharedCtor() {
  _cached_size_ = 0;
  local_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventUserCredentialsChange::~EventUserCredentialsChange() {
  SharedDtor();
}

void EventUserCredentialsChange::SharedDtor() {
  if (local_file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete local_file_path_;
  }
  if (this != default_instance_) {
  }
}

void EventUserCredentialsChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventUserCredentialsChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventUserCredentialsChange_descriptor_;
}

const EventUserCredentialsChange& EventUserCredentialsChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventUserCredentialsChange* EventUserCredentialsChange::default_instance_ = NULL;

EventUserCredentialsChange* EventUserCredentialsChange::New() const {
  return new EventUserCredentialsChange;
}

void EventUserCredentialsChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_local_file_path()) {
      if (local_file_path_ != &::google::protobuf::internal::kEmptyString) {
        local_file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventUserCredentialsChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string local_file_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_file_path().data(), this->local_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventUserCredentialsChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string local_file_path = 1;
  if (has_local_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_file_path().data(), this->local_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_file_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventUserCredentialsChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string local_file_path = 1;
  if (has_local_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_file_path().data(), this->local_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->local_file_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventUserCredentialsChange::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string local_file_path = 1;
    if (has_local_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_file_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventUserCredentialsChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventUserCredentialsChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventUserCredentialsChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventUserCredentialsChange::MergeFrom(const EventUserCredentialsChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_file_path()) {
      set_local_file_path(from.local_file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventUserCredentialsChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventUserCredentialsChange::CopyFrom(const EventUserCredentialsChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUserCredentialsChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EventUserCredentialsChange::Swap(EventUserCredentialsChange* other) {
  if (other != this) {
    std::swap(local_file_path_, other->local_file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventUserCredentialsChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventUserCredentialsChange_descriptor_;
  metadata.reflection = EventUserCredentialsChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CcdiEvent::kSyncFeatureStatusChangeFieldNumber;
const int CcdiEvent::kDeviceInfoChangeFieldNumber;
const int CcdiEvent::kDeviceConnectionChangeFieldNumber;
const int CcdiEvent::kDatasetContentChangeFieldNumber;
const int CcdiEvent::kStorageNodeChangeFieldNumber;
const int CcdiEvent::kUserLoginFieldNumber;
const int CcdiEvent::kUserLogoutFieldNumber;
const int CcdiEvent::kDocSaveAndGoCompletionFieldNumber;
const int CcdiEvent::kDocSaveAndGoEngineStateChangeFieldNumber;
const int CcdiEvent::kSwUpdateProgressFieldNumber;
const int CcdiEvent::kIoacStatusChangeFieldNumber;
const int CcdiEvent::kLanDevicesChangeFieldNumber;
const int CcdiEvent::kLanDevicesProbeRequestFieldNumber;
const int CcdiEvent::kPowerModeChangeFieldNumber;
const int CcdiEvent::kSuMessageFieldNumber;
const int CcdiEvent::kAsyncUploadCompletionFieldNumber;
const int CcdiEvent::kDatasetChangeFieldNumber;
const int CcdiEvent::kSyncbackCompletionFieldNumber;
const int CcdiEvent::kPicstreamStorageConservationFieldNumber;
const int CcdiEvent::kPairingRequestFieldNumber;
const int CcdiEvent::kPicstreamdbUpdatedFieldNumber;
const int CcdiEvent::kSyncHistoryFieldNumber;
const int CcdiEvent::kDeviceCredChangeFieldNumber;
const int CcdiEvent::kUserCredChangeFieldNumber;
#endif  // !_MSC_VER

CcdiEvent::CcdiEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CcdiEvent::InitAsDefaultInstance() {
  sync_feature_status_change_ = const_cast< ::ccd::EventSyncFeatureStatusChange*>(&::ccd::EventSyncFeatureStatusChange::default_instance());
  device_info_change_ = const_cast< ::ccd::EventDeviceInfoChange*>(&::ccd::EventDeviceInfoChange::default_instance());
  device_connection_change_ = const_cast< ::ccd::EventDeviceConnectionChange*>(&::ccd::EventDeviceConnectionChange::default_instance());
  dataset_content_change_ = const_cast< ::ccd::EventDatasetContentChange*>(&::ccd::EventDatasetContentChange::default_instance());
  storage_node_change_ = const_cast< ::ccd::EventStorageNodeChange*>(&::ccd::EventStorageNodeChange::default_instance());
  user_login_ = const_cast< ::ccd::EventUserLogin*>(&::ccd::EventUserLogin::default_instance());
  user_logout_ = const_cast< ::ccd::EventUserLogout*>(&::ccd::EventUserLogout::default_instance());
  doc_save_and_go_completion_ = const_cast< ::ccd::EventDocSaveAndGoCompletion*>(&::ccd::EventDocSaveAndGoCompletion::default_instance());
  doc_save_and_go_engine_state_change_ = const_cast< ::ccd::EventDocSaveAndGoEngineStateChange*>(&::ccd::EventDocSaveAndGoEngineStateChange::default_instance());
  sw_update_progress_ = const_cast< ::ccd::EventSWUpdateProgress*>(&::ccd::EventSWUpdateProgress::default_instance());
  ioac_status_change_ = const_cast< ::ccd::EventIoacStatusChange*>(&::ccd::EventIoacStatusChange::default_instance());
  lan_devices_change_ = const_cast< ::ccd::EventLanDevicesChange*>(&::ccd::EventLanDevicesChange::default_instance());
  lan_devices_probe_request_ = const_cast< ::ccd::EventLanDevicesProbeRequest*>(&::ccd::EventLanDevicesProbeRequest::default_instance());
  power_mode_change_ = const_cast< ::ccd::EventPowerModeChange*>(&::ccd::EventPowerModeChange::default_instance());
  su_message_ = const_cast< ::ccd::EventRemoteSwUpdateMessage*>(&::ccd::EventRemoteSwUpdateMessage::default_instance());
  async_upload_completion_ = const_cast< ::ccd::EventAsyncUploadCompletion*>(&::ccd::EventAsyncUploadCompletion::default_instance());
  dataset_change_ = const_cast< ::ccd::EventDatasetChange*>(&::ccd::EventDatasetChange::default_instance());
  syncback_completion_ = const_cast< ::ccd::EventSyncBackCompletion*>(&::ccd::EventSyncBackCompletion::default_instance());
  picstream_storage_conservation_ = const_cast< ::ccd::EventPicStreamStorageConservation*>(&::ccd::EventPicStreamStorageConservation::default_instance());
  pairing_request_ = const_cast< ::ccd::EventPairingRequest*>(&::ccd::EventPairingRequest::default_instance());
  picstreamdb_updated_ = const_cast< ::ccd::EventPicStreamDBUpdateComplete*>(&::ccd::EventPicStreamDBUpdateComplete::default_instance());
  sync_history_ = const_cast< ::ccd::EventSyncHistory*>(&::ccd::EventSyncHistory::default_instance());
  device_cred_change_ = const_cast< ::ccd::EventDeviceCredentialsChange*>(&::ccd::EventDeviceCredentialsChange::default_instance());
  user_cred_change_ = const_cast< ::ccd::EventUserCredentialsChange*>(&::ccd::EventUserCredentialsChange::default_instance());
}

CcdiEvent::CcdiEvent(const CcdiEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CcdiEvent::SharedCtor() {
  _cached_size_ = 0;
  sync_feature_status_change_ = NULL;
  device_info_change_ = NULL;
  device_connection_change_ = NULL;
  dataset_content_change_ = NULL;
  storage_node_change_ = NULL;
  user_login_ = NULL;
  user_logout_ = NULL;
  doc_save_and_go_completion_ = NULL;
  doc_save_and_go_engine_state_change_ = NULL;
  sw_update_progress_ = NULL;
  ioac_status_change_ = NULL;
  lan_devices_change_ = NULL;
  lan_devices_probe_request_ = NULL;
  power_mode_change_ = NULL;
  su_message_ = NULL;
  async_upload_completion_ = NULL;
  dataset_change_ = NULL;
  syncback_completion_ = NULL;
  picstream_storage_conservation_ = NULL;
  pairing_request_ = NULL;
  picstreamdb_updated_ = NULL;
  sync_history_ = NULL;
  device_cred_change_ = NULL;
  user_cred_change_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CcdiEvent::~CcdiEvent() {
  SharedDtor();
}

void CcdiEvent::SharedDtor() {
  if (this != default_instance_) {
    delete sync_feature_status_change_;
    delete device_info_change_;
    delete device_connection_change_;
    delete dataset_content_change_;
    delete storage_node_change_;
    delete user_login_;
    delete user_logout_;
    delete doc_save_and_go_completion_;
    delete doc_save_and_go_engine_state_change_;
    delete sw_update_progress_;
    delete ioac_status_change_;
    delete lan_devices_change_;
    delete lan_devices_probe_request_;
    delete power_mode_change_;
    delete su_message_;
    delete async_upload_completion_;
    delete dataset_change_;
    delete syncback_completion_;
    delete picstream_storage_conservation_;
    delete pairing_request_;
    delete picstreamdb_updated_;
    delete sync_history_;
    delete device_cred_change_;
    delete user_cred_change_;
  }
}

void CcdiEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CcdiEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CcdiEvent_descriptor_;
}

const CcdiEvent& CcdiEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CcdiEvent* CcdiEvent::default_instance_ = NULL;

CcdiEvent* CcdiEvent::New() const {
  return new CcdiEvent;
}

void CcdiEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sync_feature_status_change()) {
      if (sync_feature_status_change_ != NULL) sync_feature_status_change_->::ccd::EventSyncFeatureStatusChange::Clear();
    }
    if (has_device_info_change()) {
      if (device_info_change_ != NULL) device_info_change_->::ccd::EventDeviceInfoChange::Clear();
    }
    if (has_device_connection_change()) {
      if (device_connection_change_ != NULL) device_connection_change_->::ccd::EventDeviceConnectionChange::Clear();
    }
    if (has_dataset_content_change()) {
      if (dataset_content_change_ != NULL) dataset_content_change_->::ccd::EventDatasetContentChange::Clear();
    }
    if (has_storage_node_change()) {
      if (storage_node_change_ != NULL) storage_node_change_->::ccd::EventStorageNodeChange::Clear();
    }
    if (has_user_login()) {
      if (user_login_ != NULL) user_login_->::ccd::EventUserLogin::Clear();
    }
    if (has_user_logout()) {
      if (user_logout_ != NULL) user_logout_->::ccd::EventUserLogout::Clear();
    }
    if (has_doc_save_and_go_completion()) {
      if (doc_save_and_go_completion_ != NULL) doc_save_and_go_completion_->::ccd::EventDocSaveAndGoCompletion::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_doc_save_and_go_engine_state_change()) {
      if (doc_save_and_go_engine_state_change_ != NULL) doc_save_and_go_engine_state_change_->::ccd::EventDocSaveAndGoEngineStateChange::Clear();
    }
    if (has_sw_update_progress()) {
      if (sw_update_progress_ != NULL) sw_update_progress_->::ccd::EventSWUpdateProgress::Clear();
    }
    if (has_ioac_status_change()) {
      if (ioac_status_change_ != NULL) ioac_status_change_->::ccd::EventIoacStatusChange::Clear();
    }
    if (has_lan_devices_change()) {
      if (lan_devices_change_ != NULL) lan_devices_change_->::ccd::EventLanDevicesChange::Clear();
    }
    if (has_lan_devices_probe_request()) {
      if (lan_devices_probe_request_ != NULL) lan_devices_probe_request_->::ccd::EventLanDevicesProbeRequest::Clear();
    }
    if (has_power_mode_change()) {
      if (power_mode_change_ != NULL) power_mode_change_->::ccd::EventPowerModeChange::Clear();
    }
    if (has_su_message()) {
      if (su_message_ != NULL) su_message_->::ccd::EventRemoteSwUpdateMessage::Clear();
    }
    if (has_async_upload_completion()) {
      if (async_upload_completion_ != NULL) async_upload_completion_->::ccd::EventAsyncUploadCompletion::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_dataset_change()) {
      if (dataset_change_ != NULL) dataset_change_->::ccd::EventDatasetChange::Clear();
    }
    if (has_syncback_completion()) {
      if (syncback_completion_ != NULL) syncback_completion_->::ccd::EventSyncBackCompletion::Clear();
    }
    if (has_picstream_storage_conservation()) {
      if (picstream_storage_conservation_ != NULL) picstream_storage_conservation_->::ccd::EventPicStreamStorageConservation::Clear();
    }
    if (has_pairing_request()) {
      if (pairing_request_ != NULL) pairing_request_->::ccd::EventPairingRequest::Clear();
    }
    if (has_picstreamdb_updated()) {
      if (picstreamdb_updated_ != NULL) picstreamdb_updated_->::ccd::EventPicStreamDBUpdateComplete::Clear();
    }
    if (has_sync_history()) {
      if (sync_history_ != NULL) sync_history_->::ccd::EventSyncHistory::Clear();
    }
    if (has_device_cred_change()) {
      if (device_cred_change_ != NULL) device_cred_change_->::ccd::EventDeviceCredentialsChange::Clear();
    }
    if (has_user_cred_change()) {
      if (user_cred_change_ != NULL) user_cred_change_->::ccd::EventUserCredentialsChange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CcdiEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ccd.EventSWUpdateProgress sw_update_progress = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sw_update_progress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_device_info_change;
        break;
      }
      
      // optional .ccd.EventDeviceInfoChange device_info_change = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_info_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_info_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_connection_change;
        break;
      }
      
      // optional .ccd.EventDeviceConnectionChange device_connection_change = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_connection_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_connection_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ioac_status_change;
        break;
      }
      
      // optional .ccd.EventIoacStatusChange ioac_status_change = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioac_status_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ioac_status_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sync_feature_status_change;
        break;
      }
      
      // optional .ccd.EventSyncFeatureStatusChange sync_feature_status_change = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_feature_status_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_feature_status_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_dataset_content_change;
        break;
      }
      
      // optional .ccd.EventDatasetContentChange dataset_content_change = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_content_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_content_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_storage_node_change;
        break;
      }
      
      // optional .ccd.EventStorageNodeChange storage_node_change = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_node_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storage_node_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_user_login;
        break;
      }
      
      // optional .ccd.EventUserLogin user_login = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_user_logout;
        break;
      }
      
      // optional .ccd.EventUserLogout user_logout = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_logout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_logout()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_doc_save_and_go_completion;
        break;
      }
      
      // optional .ccd.EventDocSaveAndGoCompletion doc_save_and_go_completion = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_save_and_go_completion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc_save_and_go_completion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_doc_save_and_go_engine_state_change;
        break;
      }
      
      // optional .ccd.EventDocSaveAndGoEngineStateChange doc_save_and_go_engine_state_change = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_save_and_go_engine_state_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc_save_and_go_engine_state_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_lan_devices_change;
        break;
      }
      
      // optional .ccd.EventLanDevicesChange lan_devices_change = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lan_devices_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lan_devices_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_lan_devices_probe_request;
        break;
      }
      
      // optional .ccd.EventLanDevicesProbeRequest lan_devices_probe_request = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lan_devices_probe_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lan_devices_probe_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_power_mode_change;
        break;
      }
      
      // optional .ccd.EventPowerModeChange power_mode_change = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_power_mode_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_mode_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_su_message;
        break;
      }
      
      // optional .ccd.EventRemoteSwUpdateMessage su_message = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_su_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_su_message()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_async_upload_completion;
        break;
      }
      
      // optional .ccd.EventAsyncUploadCompletion async_upload_completion = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_async_upload_completion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_async_upload_completion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_dataset_change;
        break;
      }
      
      // optional .ccd.EventDatasetChange dataset_change = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_syncback_completion;
        break;
      }
      
      // optional .ccd.EventSyncBackCompletion syncback_completion = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syncback_completion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncback_completion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_picstream_storage_conservation;
        break;
      }
      
      // optional .ccd.EventPicStreamStorageConservation picstream_storage_conservation = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picstream_storage_conservation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picstream_storage_conservation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_pairing_request;
        break;
      }
      
      // optional .ccd.EventPairingRequest pairing_request = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairing_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pairing_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_picstreamdb_updated;
        break;
      }
      
      // optional .ccd.EventPicStreamDBUpdateComplete picstreamdb_updated = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picstreamdb_updated:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picstreamdb_updated()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_sync_history;
        break;
      }
      
      // optional .ccd.EventSyncHistory sync_history = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_history()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_device_cred_change;
        break;
      }
      
      // optional .ccd.EventDeviceCredentialsChange device_cred_change = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_cred_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_cred_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_user_cred_change;
        break;
      }
      
      // optional .ccd.EventUserCredentialsChange user_cred_change = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_cred_change:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_cred_change()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CcdiEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ccd.EventSWUpdateProgress sw_update_progress = 8;
  if (has_sw_update_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sw_update_progress(), output);
  }
  
  // optional .ccd.EventDeviceInfoChange device_info_change = 9;
  if (has_device_info_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->device_info_change(), output);
  }
  
  // optional .ccd.EventDeviceConnectionChange device_connection_change = 10;
  if (has_device_connection_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->device_connection_change(), output);
  }
  
  // optional .ccd.EventIoacStatusChange ioac_status_change = 11;
  if (has_ioac_status_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->ioac_status_change(), output);
  }
  
  // optional .ccd.EventSyncFeatureStatusChange sync_feature_status_change = 12;
  if (has_sync_feature_status_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sync_feature_status_change(), output);
  }
  
  // optional .ccd.EventDatasetContentChange dataset_content_change = 18;
  if (has_dataset_content_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->dataset_content_change(), output);
  }
  
  // optional .ccd.EventStorageNodeChange storage_node_change = 19;
  if (has_storage_node_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->storage_node_change(), output);
  }
  
  // optional .ccd.EventUserLogin user_login = 20;
  if (has_user_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->user_login(), output);
  }
  
  // optional .ccd.EventUserLogout user_logout = 21;
  if (has_user_logout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->user_logout(), output);
  }
  
  // optional .ccd.EventDocSaveAndGoCompletion doc_save_and_go_completion = 30;
  if (has_doc_save_and_go_completion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->doc_save_and_go_completion(), output);
  }
  
  // optional .ccd.EventDocSaveAndGoEngineStateChange doc_save_and_go_engine_state_change = 31;
  if (has_doc_save_and_go_engine_state_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->doc_save_and_go_engine_state_change(), output);
  }
  
  // optional .ccd.EventLanDevicesChange lan_devices_change = 32;
  if (has_lan_devices_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->lan_devices_change(), output);
  }
  
  // optional .ccd.EventLanDevicesProbeRequest lan_devices_probe_request = 33;
  if (has_lan_devices_probe_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->lan_devices_probe_request(), output);
  }
  
  // optional .ccd.EventPowerModeChange power_mode_change = 34;
  if (has_power_mode_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->power_mode_change(), output);
  }
  
  // optional .ccd.EventRemoteSwUpdateMessage su_message = 36;
  if (has_su_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->su_message(), output);
  }
  
  // optional .ccd.EventAsyncUploadCompletion async_upload_completion = 37;
  if (has_async_upload_completion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->async_upload_completion(), output);
  }
  
  // optional .ccd.EventDatasetChange dataset_change = 38;
  if (has_dataset_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->dataset_change(), output);
  }
  
  // optional .ccd.EventSyncBackCompletion syncback_completion = 40;
  if (has_syncback_completion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->syncback_completion(), output);
  }
  
  // optional .ccd.EventPicStreamStorageConservation picstream_storage_conservation = 41;
  if (has_picstream_storage_conservation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->picstream_storage_conservation(), output);
  }
  
  // optional .ccd.EventPairingRequest pairing_request = 42;
  if (has_pairing_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->pairing_request(), output);
  }
  
  // optional .ccd.EventPicStreamDBUpdateComplete picstreamdb_updated = 43;
  if (has_picstreamdb_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->picstreamdb_updated(), output);
  }
  
  // optional .ccd.EventSyncHistory sync_history = 44;
  if (has_sync_history()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->sync_history(), output);
  }
  
  // optional .ccd.EventDeviceCredentialsChange device_cred_change = 45;
  if (has_device_cred_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->device_cred_change(), output);
  }
  
  // optional .ccd.EventUserCredentialsChange user_cred_change = 46;
  if (has_user_cred_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->user_cred_change(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CcdiEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ccd.EventSWUpdateProgress sw_update_progress = 8;
  if (has_sw_update_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sw_update_progress(), target);
  }
  
  // optional .ccd.EventDeviceInfoChange device_info_change = 9;
  if (has_device_info_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->device_info_change(), target);
  }
  
  // optional .ccd.EventDeviceConnectionChange device_connection_change = 10;
  if (has_device_connection_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->device_connection_change(), target);
  }
  
  // optional .ccd.EventIoacStatusChange ioac_status_change = 11;
  if (has_ioac_status_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->ioac_status_change(), target);
  }
  
  // optional .ccd.EventSyncFeatureStatusChange sync_feature_status_change = 12;
  if (has_sync_feature_status_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sync_feature_status_change(), target);
  }
  
  // optional .ccd.EventDatasetContentChange dataset_content_change = 18;
  if (has_dataset_content_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->dataset_content_change(), target);
  }
  
  // optional .ccd.EventStorageNodeChange storage_node_change = 19;
  if (has_storage_node_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->storage_node_change(), target);
  }
  
  // optional .ccd.EventUserLogin user_login = 20;
  if (has_user_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->user_login(), target);
  }
  
  // optional .ccd.EventUserLogout user_logout = 21;
  if (has_user_logout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->user_logout(), target);
  }
  
  // optional .ccd.EventDocSaveAndGoCompletion doc_save_and_go_completion = 30;
  if (has_doc_save_and_go_completion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->doc_save_and_go_completion(), target);
  }
  
  // optional .ccd.EventDocSaveAndGoEngineStateChange doc_save_and_go_engine_state_change = 31;
  if (has_doc_save_and_go_engine_state_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->doc_save_and_go_engine_state_change(), target);
  }
  
  // optional .ccd.EventLanDevicesChange lan_devices_change = 32;
  if (has_lan_devices_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->lan_devices_change(), target);
  }
  
  // optional .ccd.EventLanDevicesProbeRequest lan_devices_probe_request = 33;
  if (has_lan_devices_probe_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->lan_devices_probe_request(), target);
  }
  
  // optional .ccd.EventPowerModeChange power_mode_change = 34;
  if (has_power_mode_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->power_mode_change(), target);
  }
  
  // optional .ccd.EventRemoteSwUpdateMessage su_message = 36;
  if (has_su_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->su_message(), target);
  }
  
  // optional .ccd.EventAsyncUploadCompletion async_upload_completion = 37;
  if (has_async_upload_completion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->async_upload_completion(), target);
  }
  
  // optional .ccd.EventDatasetChange dataset_change = 38;
  if (has_dataset_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->dataset_change(), target);
  }
  
  // optional .ccd.EventSyncBackCompletion syncback_completion = 40;
  if (has_syncback_completion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->syncback_completion(), target);
  }
  
  // optional .ccd.EventPicStreamStorageConservation picstream_storage_conservation = 41;
  if (has_picstream_storage_conservation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->picstream_storage_conservation(), target);
  }
  
  // optional .ccd.EventPairingRequest pairing_request = 42;
  if (has_pairing_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->pairing_request(), target);
  }
  
  // optional .ccd.EventPicStreamDBUpdateComplete picstreamdb_updated = 43;
  if (has_picstreamdb_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->picstreamdb_updated(), target);
  }
  
  // optional .ccd.EventSyncHistory sync_history = 44;
  if (has_sync_history()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->sync_history(), target);
  }
  
  // optional .ccd.EventDeviceCredentialsChange device_cred_change = 45;
  if (has_device_cred_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->device_cred_change(), target);
  }
  
  // optional .ccd.EventUserCredentialsChange user_cred_change = 46;
  if (has_user_cred_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->user_cred_change(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CcdiEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ccd.EventSyncFeatureStatusChange sync_feature_status_change = 12;
    if (has_sync_feature_status_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_feature_status_change());
    }
    
    // optional .ccd.EventDeviceInfoChange device_info_change = 9;
    if (has_device_info_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_info_change());
    }
    
    // optional .ccd.EventDeviceConnectionChange device_connection_change = 10;
    if (has_device_connection_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_connection_change());
    }
    
    // optional .ccd.EventDatasetContentChange dataset_content_change = 18;
    if (has_dataset_content_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataset_content_change());
    }
    
    // optional .ccd.EventStorageNodeChange storage_node_change = 19;
    if (has_storage_node_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storage_node_change());
    }
    
    // optional .ccd.EventUserLogin user_login = 20;
    if (has_user_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_login());
    }
    
    // optional .ccd.EventUserLogout user_logout = 21;
    if (has_user_logout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_logout());
    }
    
    // optional .ccd.EventDocSaveAndGoCompletion doc_save_and_go_completion = 30;
    if (has_doc_save_and_go_completion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_save_and_go_completion());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ccd.EventDocSaveAndGoEngineStateChange doc_save_and_go_engine_state_change = 31;
    if (has_doc_save_and_go_engine_state_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc_save_and_go_engine_state_change());
    }
    
    // optional .ccd.EventSWUpdateProgress sw_update_progress = 8;
    if (has_sw_update_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sw_update_progress());
    }
    
    // optional .ccd.EventIoacStatusChange ioac_status_change = 11;
    if (has_ioac_status_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ioac_status_change());
    }
    
    // optional .ccd.EventLanDevicesChange lan_devices_change = 32;
    if (has_lan_devices_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lan_devices_change());
    }
    
    // optional .ccd.EventLanDevicesProbeRequest lan_devices_probe_request = 33;
    if (has_lan_devices_probe_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lan_devices_probe_request());
    }
    
    // optional .ccd.EventPowerModeChange power_mode_change = 34;
    if (has_power_mode_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->power_mode_change());
    }
    
    // optional .ccd.EventRemoteSwUpdateMessage su_message = 36;
    if (has_su_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->su_message());
    }
    
    // optional .ccd.EventAsyncUploadCompletion async_upload_completion = 37;
    if (has_async_upload_completion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->async_upload_completion());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .ccd.EventDatasetChange dataset_change = 38;
    if (has_dataset_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataset_change());
    }
    
    // optional .ccd.EventSyncBackCompletion syncback_completion = 40;
    if (has_syncback_completion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncback_completion());
    }
    
    // optional .ccd.EventPicStreamStorageConservation picstream_storage_conservation = 41;
    if (has_picstream_storage_conservation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picstream_storage_conservation());
    }
    
    // optional .ccd.EventPairingRequest pairing_request = 42;
    if (has_pairing_request()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairing_request());
    }
    
    // optional .ccd.EventPicStreamDBUpdateComplete picstreamdb_updated = 43;
    if (has_picstreamdb_updated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picstreamdb_updated());
    }
    
    // optional .ccd.EventSyncHistory sync_history = 44;
    if (has_sync_history()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_history());
    }
    
    // optional .ccd.EventDeviceCredentialsChange device_cred_change = 45;
    if (has_device_cred_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_cred_change());
    }
    
    // optional .ccd.EventUserCredentialsChange user_cred_change = 46;
    if (has_user_cred_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_cred_change());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CcdiEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CcdiEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CcdiEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CcdiEvent::MergeFrom(const CcdiEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sync_feature_status_change()) {
      mutable_sync_feature_status_change()->::ccd::EventSyncFeatureStatusChange::MergeFrom(from.sync_feature_status_change());
    }
    if (from.has_device_info_change()) {
      mutable_device_info_change()->::ccd::EventDeviceInfoChange::MergeFrom(from.device_info_change());
    }
    if (from.has_device_connection_change()) {
      mutable_device_connection_change()->::ccd::EventDeviceConnectionChange::MergeFrom(from.device_connection_change());
    }
    if (from.has_dataset_content_change()) {
      mutable_dataset_content_change()->::ccd::EventDatasetContentChange::MergeFrom(from.dataset_content_change());
    }
    if (from.has_storage_node_change()) {
      mutable_storage_node_change()->::ccd::EventStorageNodeChange::MergeFrom(from.storage_node_change());
    }
    if (from.has_user_login()) {
      mutable_user_login()->::ccd::EventUserLogin::MergeFrom(from.user_login());
    }
    if (from.has_user_logout()) {
      mutable_user_logout()->::ccd::EventUserLogout::MergeFrom(from.user_logout());
    }
    if (from.has_doc_save_and_go_completion()) {
      mutable_doc_save_and_go_completion()->::ccd::EventDocSaveAndGoCompletion::MergeFrom(from.doc_save_and_go_completion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_doc_save_and_go_engine_state_change()) {
      mutable_doc_save_and_go_engine_state_change()->::ccd::EventDocSaveAndGoEngineStateChange::MergeFrom(from.doc_save_and_go_engine_state_change());
    }
    if (from.has_sw_update_progress()) {
      mutable_sw_update_progress()->::ccd::EventSWUpdateProgress::MergeFrom(from.sw_update_progress());
    }
    if (from.has_ioac_status_change()) {
      mutable_ioac_status_change()->::ccd::EventIoacStatusChange::MergeFrom(from.ioac_status_change());
    }
    if (from.has_lan_devices_change()) {
      mutable_lan_devices_change()->::ccd::EventLanDevicesChange::MergeFrom(from.lan_devices_change());
    }
    if (from.has_lan_devices_probe_request()) {
      mutable_lan_devices_probe_request()->::ccd::EventLanDevicesProbeRequest::MergeFrom(from.lan_devices_probe_request());
    }
    if (from.has_power_mode_change()) {
      mutable_power_mode_change()->::ccd::EventPowerModeChange::MergeFrom(from.power_mode_change());
    }
    if (from.has_su_message()) {
      mutable_su_message()->::ccd::EventRemoteSwUpdateMessage::MergeFrom(from.su_message());
    }
    if (from.has_async_upload_completion()) {
      mutable_async_upload_completion()->::ccd::EventAsyncUploadCompletion::MergeFrom(from.async_upload_completion());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dataset_change()) {
      mutable_dataset_change()->::ccd::EventDatasetChange::MergeFrom(from.dataset_change());
    }
    if (from.has_syncback_completion()) {
      mutable_syncback_completion()->::ccd::EventSyncBackCompletion::MergeFrom(from.syncback_completion());
    }
    if (from.has_picstream_storage_conservation()) {
      mutable_picstream_storage_conservation()->::ccd::EventPicStreamStorageConservation::MergeFrom(from.picstream_storage_conservation());
    }
    if (from.has_pairing_request()) {
      mutable_pairing_request()->::ccd::EventPairingRequest::MergeFrom(from.pairing_request());
    }
    if (from.has_picstreamdb_updated()) {
      mutable_picstreamdb_updated()->::ccd::EventPicStreamDBUpdateComplete::MergeFrom(from.picstreamdb_updated());
    }
    if (from.has_sync_history()) {
      mutable_sync_history()->::ccd::EventSyncHistory::MergeFrom(from.sync_history());
    }
    if (from.has_device_cred_change()) {
      mutable_device_cred_change()->::ccd::EventDeviceCredentialsChange::MergeFrom(from.device_cred_change());
    }
    if (from.has_user_cred_change()) {
      mutable_user_cred_change()->::ccd::EventUserCredentialsChange::MergeFrom(from.user_cred_change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CcdiEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CcdiEvent::CopyFrom(const CcdiEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CcdiEvent::IsInitialized() const {
  
  if (has_sync_feature_status_change()) {
    if (!this->sync_feature_status_change().IsInitialized()) return false;
  }
  if (has_device_info_change()) {
    if (!this->device_info_change().IsInitialized()) return false;
  }
  if (has_device_connection_change()) {
    if (!this->device_connection_change().IsInitialized()) return false;
  }
  if (has_dataset_content_change()) {
    if (!this->dataset_content_change().IsInitialized()) return false;
  }
  if (has_storage_node_change()) {
    if (!this->storage_node_change().IsInitialized()) return false;
  }
  if (has_user_login()) {
    if (!this->user_login().IsInitialized()) return false;
  }
  if (has_user_logout()) {
    if (!this->user_logout().IsInitialized()) return false;
  }
  if (has_doc_save_and_go_completion()) {
    if (!this->doc_save_and_go_completion().IsInitialized()) return false;
  }
  if (has_doc_save_and_go_engine_state_change()) {
    if (!this->doc_save_and_go_engine_state_change().IsInitialized()) return false;
  }
  if (has_sw_update_progress()) {
    if (!this->sw_update_progress().IsInitialized()) return false;
  }
  if (has_ioac_status_change()) {
    if (!this->ioac_status_change().IsInitialized()) return false;
  }
  if (has_lan_devices_change()) {
    if (!this->lan_devices_change().IsInitialized()) return false;
  }
  if (has_lan_devices_probe_request()) {
    if (!this->lan_devices_probe_request().IsInitialized()) return false;
  }
  if (has_power_mode_change()) {
    if (!this->power_mode_change().IsInitialized()) return false;
  }
  if (has_su_message()) {
    if (!this->su_message().IsInitialized()) return false;
  }
  if (has_async_upload_completion()) {
    if (!this->async_upload_completion().IsInitialized()) return false;
  }
  if (has_syncback_completion()) {
    if (!this->syncback_completion().IsInitialized()) return false;
  }
  if (has_picstream_storage_conservation()) {
    if (!this->picstream_storage_conservation().IsInitialized()) return false;
  }
  if (has_pairing_request()) {
    if (!this->pairing_request().IsInitialized()) return false;
  }
  if (has_picstreamdb_updated()) {
    if (!this->picstreamdb_updated().IsInitialized()) return false;
  }
  if (has_sync_history()) {
    if (!this->sync_history().IsInitialized()) return false;
  }
  if (has_device_cred_change()) {
    if (!this->device_cred_change().IsInitialized()) return false;
  }
  if (has_user_cred_change()) {
    if (!this->user_cred_change().IsInitialized()) return false;
  }
  return true;
}

void CcdiEvent::Swap(CcdiEvent* other) {
  if (other != this) {
    std::swap(sync_feature_status_change_, other->sync_feature_status_change_);
    std::swap(device_info_change_, other->device_info_change_);
    std::swap(device_connection_change_, other->device_connection_change_);
    std::swap(dataset_content_change_, other->dataset_content_change_);
    std::swap(storage_node_change_, other->storage_node_change_);
    std::swap(user_login_, other->user_login_);
    std::swap(user_logout_, other->user_logout_);
    std::swap(doc_save_and_go_completion_, other->doc_save_and_go_completion_);
    std::swap(doc_save_and_go_engine_state_change_, other->doc_save_and_go_engine_state_change_);
    std::swap(sw_update_progress_, other->sw_update_progress_);
    std::swap(ioac_status_change_, other->ioac_status_change_);
    std::swap(lan_devices_change_, other->lan_devices_change_);
    std::swap(lan_devices_probe_request_, other->lan_devices_probe_request_);
    std::swap(power_mode_change_, other->power_mode_change_);
    std::swap(su_message_, other->su_message_);
    std::swap(async_upload_completion_, other->async_upload_completion_);
    std::swap(dataset_change_, other->dataset_change_);
    std::swap(syncback_completion_, other->syncback_completion_);
    std::swap(picstream_storage_conservation_, other->picstream_storage_conservation_);
    std::swap(pairing_request_, other->pairing_request_);
    std::swap(picstreamdb_updated_, other->picstreamdb_updated_);
    std::swap(sync_history_, other->sync_history_);
    std::swap(device_cred_change_, other->device_cred_change_);
    std::swap(user_cred_change_, other->user_cred_change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CcdiEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CcdiEvent_descriptor_;
  metadata.reflection = CcdiEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventsDequeueOutput::kEventsFieldNumber;
#endif  // !_MSC_VER

EventsDequeueOutput::EventsDequeueOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventsDequeueOutput::InitAsDefaultInstance() {
}

EventsDequeueOutput::EventsDequeueOutput(const EventsDequeueOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventsDequeueOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventsDequeueOutput::~EventsDequeueOutput() {
  SharedDtor();
}

void EventsDequeueOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventsDequeueOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventsDequeueOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventsDequeueOutput_descriptor_;
}

const EventsDequeueOutput& EventsDequeueOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventsDequeueOutput* EventsDequeueOutput::default_instance_ = NULL;

EventsDequeueOutput* EventsDequeueOutput::New() const {
  return new EventsDequeueOutput;
}

void EventsDequeueOutput::Clear() {
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventsDequeueOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.CcdiEvent events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventsDequeueOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.CcdiEvent events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventsDequeueOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.CcdiEvent events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventsDequeueOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.CcdiEvent events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventsDequeueOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventsDequeueOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventsDequeueOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventsDequeueOutput::MergeFrom(const EventsDequeueOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventsDequeueOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventsDequeueOutput::CopyFrom(const EventsDequeueOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventsDequeueOutput::IsInitialized() const {
  
  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void EventsDequeueOutput::Swap(EventsDequeueOutput* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventsDequeueOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventsDequeueOutput_descriptor_;
  metadata.reflection = EventsDequeueOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetDirectoryEntriesInput::kUserIdFieldNumber;
const int GetDatasetDirectoryEntriesInput::kDatasetIdFieldNumber;
const int GetDatasetDirectoryEntriesInput::kDirectoryNameFieldNumber;
#endif  // !_MSC_VER

GetDatasetDirectoryEntriesInput::GetDatasetDirectoryEntriesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetDirectoryEntriesInput::InitAsDefaultInstance() {
}

GetDatasetDirectoryEntriesInput::GetDatasetDirectoryEntriesInput(const GetDatasetDirectoryEntriesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetDirectoryEntriesInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  directory_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetDirectoryEntriesInput::~GetDatasetDirectoryEntriesInput() {
  SharedDtor();
}

void GetDatasetDirectoryEntriesInput::SharedDtor() {
  if (directory_name_ != &::google::protobuf::internal::kEmptyString) {
    delete directory_name_;
  }
  if (this != default_instance_) {
  }
}

void GetDatasetDirectoryEntriesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetDirectoryEntriesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetDirectoryEntriesInput_descriptor_;
}

const GetDatasetDirectoryEntriesInput& GetDatasetDirectoryEntriesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetDatasetDirectoryEntriesInput* GetDatasetDirectoryEntriesInput::default_instance_ = NULL;

GetDatasetDirectoryEntriesInput* GetDatasetDirectoryEntriesInput::New() const {
  return new GetDatasetDirectoryEntriesInput;
}

void GetDatasetDirectoryEntriesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
    if (has_directory_name()) {
      if (directory_name_ != &::google::protobuf::internal::kEmptyString) {
        directory_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetDirectoryEntriesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_directory_name;
        break;
      }
      
      // required string directory_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_directory_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_directory_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->directory_name().data(), this->directory_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetDirectoryEntriesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  // required string directory_name = 3;
  if (has_directory_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory_name().data(), this->directory_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->directory_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetDirectoryEntriesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  // required string directory_name = 3;
  if (has_directory_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->directory_name().data(), this->directory_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->directory_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetDirectoryEntriesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required string directory_name = 3;
    if (has_directory_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->directory_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetDirectoryEntriesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetDirectoryEntriesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetDirectoryEntriesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetDirectoryEntriesInput::MergeFrom(const GetDatasetDirectoryEntriesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_directory_name()) {
      set_directory_name(from.directory_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetDirectoryEntriesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetDirectoryEntriesInput::CopyFrom(const GetDatasetDirectoryEntriesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetDirectoryEntriesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GetDatasetDirectoryEntriesInput::Swap(GetDatasetDirectoryEntriesInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(directory_name_, other->directory_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetDirectoryEntriesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetDirectoryEntriesInput_descriptor_;
  metadata.reflection = GetDatasetDirectoryEntriesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetDirectoryEntry::kNameFieldNumber;
const int DatasetDirectoryEntry::kIsDirFieldNumber;
const int DatasetDirectoryEntry::kSizeFieldNumber;
const int DatasetDirectoryEntry::kUrlFieldNumber;
const int DatasetDirectoryEntry::kMtimeFieldNumber;
#endif  // !_MSC_VER

DatasetDirectoryEntry::DatasetDirectoryEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetDirectoryEntry::InitAsDefaultInstance() {
}

DatasetDirectoryEntry::DatasetDirectoryEntry(const DatasetDirectoryEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetDirectoryEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_dir_ = false;
  size_ = GOOGLE_ULONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetDirectoryEntry::~DatasetDirectoryEntry() {
  SharedDtor();
}

void DatasetDirectoryEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void DatasetDirectoryEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetDirectoryEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetDirectoryEntry_descriptor_;
}

const DatasetDirectoryEntry& DatasetDirectoryEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DatasetDirectoryEntry* DatasetDirectoryEntry::default_instance_ = NULL;

DatasetDirectoryEntry* DatasetDirectoryEntry::New() const {
  return new DatasetDirectoryEntry;
}

void DatasetDirectoryEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    is_dir_ = false;
    size_ = GOOGLE_ULONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    mtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetDirectoryEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_dir;
        break;
      }
      
      // required bool is_dir = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dir_)));
          set_has_is_dir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_size;
        break;
      }
      
      // optional fixed64 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }
      
      // optional string url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_mtime;
        break;
      }
      
      // optional fixed64 mtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetDirectoryEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required bool is_dir = 2;
  if (has_is_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_dir(), output);
  }
  
  // optional fixed64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->size(), output);
  }
  
  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url(), output);
  }
  
  // optional fixed64 mtime = 5;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->mtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetDirectoryEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required bool is_dir = 2;
  if (has_is_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_dir(), target);
  }
  
  // optional fixed64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->size(), target);
  }
  
  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }
  
  // optional fixed64 mtime = 5;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->mtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetDirectoryEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required bool is_dir = 2;
    if (has_is_dir()) {
      total_size += 1 + 1;
    }
    
    // optional fixed64 size = 3;
    if (has_size()) {
      total_size += 1 + 8;
    }
    
    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional fixed64 mtime = 5;
    if (has_mtime()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetDirectoryEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetDirectoryEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetDirectoryEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetDirectoryEntry::MergeFrom(const DatasetDirectoryEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_is_dir()) {
      set_is_dir(from.is_dir());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetDirectoryEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetDirectoryEntry::CopyFrom(const DatasetDirectoryEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetDirectoryEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DatasetDirectoryEntry::Swap(DatasetDirectoryEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(is_dir_, other->is_dir_);
    std::swap(size_, other->size_);
    std::swap(url_, other->url_);
    std::swap(mtime_, other->mtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetDirectoryEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetDirectoryEntry_descriptor_;
  metadata.reflection = DatasetDirectoryEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatasetDirectoryEntriesOutput::kEntriesFieldNumber;
#endif  // !_MSC_VER

GetDatasetDirectoryEntriesOutput::GetDatasetDirectoryEntriesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatasetDirectoryEntriesOutput::InitAsDefaultInstance() {
}

GetDatasetDirectoryEntriesOutput::GetDatasetDirectoryEntriesOutput(const GetDatasetDirectoryEntriesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatasetDirectoryEntriesOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatasetDirectoryEntriesOutput::~GetDatasetDirectoryEntriesOutput() {
  SharedDtor();
}

void GetDatasetDirectoryEntriesOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDatasetDirectoryEntriesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatasetDirectoryEntriesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatasetDirectoryEntriesOutput_descriptor_;
}

const GetDatasetDirectoryEntriesOutput& GetDatasetDirectoryEntriesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetDatasetDirectoryEntriesOutput* GetDatasetDirectoryEntriesOutput::default_instance_ = NULL;

GetDatasetDirectoryEntriesOutput* GetDatasetDirectoryEntriesOutput::New() const {
  return new GetDatasetDirectoryEntriesOutput;
}

void GetDatasetDirectoryEntriesOutput::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatasetDirectoryEntriesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.DatasetDirectoryEntry entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatasetDirectoryEntriesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.DatasetDirectoryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatasetDirectoryEntriesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.DatasetDirectoryEntry entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatasetDirectoryEntriesOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.DatasetDirectoryEntry entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatasetDirectoryEntriesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatasetDirectoryEntriesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatasetDirectoryEntriesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatasetDirectoryEntriesOutput::MergeFrom(const GetDatasetDirectoryEntriesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatasetDirectoryEntriesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatasetDirectoryEntriesOutput::CopyFrom(const GetDatasetDirectoryEntriesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatasetDirectoryEntriesOutput::IsInitialized() const {
  
  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void GetDatasetDirectoryEntriesOutput::Swap(GetDatasetDirectoryEntriesOutput* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatasetDirectoryEntriesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatasetDirectoryEntriesOutput_descriptor_;
  metadata.reflection = GetDatasetDirectoryEntriesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInfraHttpInfoInput::kUserIdFieldNumber;
const int GetInfraHttpInfoInput::kServiceFieldNumber;
const int GetInfraHttpInfoInput::kSecureFieldNumber;
#endif  // !_MSC_VER

GetInfraHttpInfoInput::GetInfraHttpInfoInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInfraHttpInfoInput::InitAsDefaultInstance() {
}

GetInfraHttpInfoInput::GetInfraHttpInfoInput(const GetInfraHttpInfoInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInfraHttpInfoInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  service_ = 1;
  secure_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInfraHttpInfoInput::~GetInfraHttpInfoInput() {
  SharedDtor();
}

void GetInfraHttpInfoInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInfraHttpInfoInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfraHttpInfoInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfraHttpInfoInput_descriptor_;
}

const GetInfraHttpInfoInput& GetInfraHttpInfoInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetInfraHttpInfoInput* GetInfraHttpInfoInput::default_instance_ = NULL;

GetInfraHttpInfoInput* GetInfraHttpInfoInput::New() const {
  return new GetInfraHttpInfoInput;
}

void GetInfraHttpInfoInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    service_ = 1;
    secure_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInfraHttpInfoInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service;
        break;
      }
      
      // required .ccd.InfraHttpService_t service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::InfraHttpService_t_IsValid(value)) {
            set_service(static_cast< ccd::InfraHttpService_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_secure;
        break;
      }
      
      // required bool secure = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
          set_has_secure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInfraHttpInfoInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required .ccd.InfraHttpService_t service = 2;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service(), output);
  }
  
  // required bool secure = 3 [default = true];
  if (has_secure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->secure(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInfraHttpInfoInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required .ccd.InfraHttpService_t service = 2;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service(), target);
  }
  
  // required bool secure = 3 [default = true];
  if (has_secure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->secure(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInfraHttpInfoInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.InfraHttpService_t service = 2;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());
    }
    
    // required bool secure = 3 [default = true];
    if (has_secure()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfraHttpInfoInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInfraHttpInfoInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInfraHttpInfoInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInfraHttpInfoInput::MergeFrom(const GetInfraHttpInfoInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_secure()) {
      set_secure(from.secure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInfraHttpInfoInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfraHttpInfoInput::CopyFrom(const GetInfraHttpInfoInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfraHttpInfoInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void GetInfraHttpInfoInput::Swap(GetInfraHttpInfoInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(service_, other->service_);
    std::swap(secure_, other->secure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInfraHttpInfoInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfraHttpInfoInput_descriptor_;
  metadata.reflection = GetInfraHttpInfoInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInfraHttpInfoOutput::kUrlPrefixFieldNumber;
const int GetInfraHttpInfoOutput::kSessionHandleFieldNumber;
const int GetInfraHttpInfoOutput::kServiceTicketFieldNumber;
#endif  // !_MSC_VER

GetInfraHttpInfoOutput::GetInfraHttpInfoOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInfraHttpInfoOutput::InitAsDefaultInstance() {
}

GetInfraHttpInfoOutput::GetInfraHttpInfoOutput(const GetInfraHttpInfoOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInfraHttpInfoOutput::SharedCtor() {
  _cached_size_ = 0;
  url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInfraHttpInfoOutput::~GetInfraHttpInfoOutput() {
  SharedDtor();
}

void GetInfraHttpInfoOutput::SharedDtor() {
  if (url_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete url_prefix_;
  }
  if (session_handle_ != &::google::protobuf::internal::kEmptyString) {
    delete session_handle_;
  }
  if (service_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete service_ticket_;
  }
  if (this != default_instance_) {
  }
}

void GetInfraHttpInfoOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInfraHttpInfoOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInfraHttpInfoOutput_descriptor_;
}

const GetInfraHttpInfoOutput& GetInfraHttpInfoOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetInfraHttpInfoOutput* GetInfraHttpInfoOutput::default_instance_ = NULL;

GetInfraHttpInfoOutput* GetInfraHttpInfoOutput::New() const {
  return new GetInfraHttpInfoOutput;
}

void GetInfraHttpInfoOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url_prefix()) {
      if (url_prefix_ != &::google::protobuf::internal::kEmptyString) {
        url_prefix_->clear();
      }
    }
    if (has_session_handle()) {
      if (session_handle_ != &::google::protobuf::internal::kEmptyString) {
        session_handle_->clear();
      }
    }
    if (has_service_ticket()) {
      if (service_ticket_ != &::google::protobuf::internal::kEmptyString) {
        service_ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInfraHttpInfoOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url_prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_prefix().data(), this->url_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_handle;
        break;
      }
      
      // optional string session_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_ticket;
        break;
      }
      
      // optional string service_ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_ticket().data(), this->service_ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInfraHttpInfoOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url_prefix = 1;
  if (has_url_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url_prefix(), output);
  }
  
  // optional string session_handle = 2;
  if (has_session_handle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_handle(), output);
  }
  
  // optional string service_ticket = 3;
  if (has_service_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_ticket().data(), this->service_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->service_ticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInfraHttpInfoOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url_prefix = 1;
  if (has_url_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url_prefix(), target);
  }
  
  // optional string session_handle = 2;
  if (has_session_handle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }
  
  // optional string service_ticket = 3;
  if (has_service_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_ticket().data(), this->service_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service_ticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInfraHttpInfoOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url_prefix = 1;
    if (has_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_prefix());
    }
    
    // optional string session_handle = 2;
    if (has_session_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_handle());
    }
    
    // optional string service_ticket = 3;
    if (has_service_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_ticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInfraHttpInfoOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInfraHttpInfoOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInfraHttpInfoOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInfraHttpInfoOutput::MergeFrom(const GetInfraHttpInfoOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url_prefix()) {
      set_url_prefix(from.url_prefix());
    }
    if (from.has_session_handle()) {
      set_session_handle(from.session_handle());
    }
    if (from.has_service_ticket()) {
      set_service_ticket(from.service_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInfraHttpInfoOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfraHttpInfoOutput::CopyFrom(const GetInfraHttpInfoOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfraHttpInfoOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetInfraHttpInfoOutput::Swap(GetInfraHttpInfoOutput* other) {
  if (other != this) {
    std::swap(url_prefix_, other->url_prefix_);
    std::swap(session_handle_, other->session_handle_);
    std::swap(service_ticket_, other->service_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInfraHttpInfoOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInfraHttpInfoOutput_descriptor_;
  metadata.reflection = GetInfraHttpInfoOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLocalHttpInfoInput::kUserIdFieldNumber;
const int GetLocalHttpInfoInput::kServiceFieldNumber;
#endif  // !_MSC_VER

GetLocalHttpInfoInput::GetLocalHttpInfoInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLocalHttpInfoInput::InitAsDefaultInstance() {
}

GetLocalHttpInfoInput::GetLocalHttpInfoInput(const GetLocalHttpInfoInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLocalHttpInfoInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  service_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLocalHttpInfoInput::~GetLocalHttpInfoInput() {
  SharedDtor();
}

void GetLocalHttpInfoInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLocalHttpInfoInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocalHttpInfoInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLocalHttpInfoInput_descriptor_;
}

const GetLocalHttpInfoInput& GetLocalHttpInfoInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetLocalHttpInfoInput* GetLocalHttpInfoInput::default_instance_ = NULL;

GetLocalHttpInfoInput* GetLocalHttpInfoInput::New() const {
  return new GetLocalHttpInfoInput;
}

void GetLocalHttpInfoInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    service_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLocalHttpInfoInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service;
        break;
      }
      
      // required .ccd.LocalHttpService_t service = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::LocalHttpService_t_IsValid(value)) {
            set_service(static_cast< ccd::LocalHttpService_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLocalHttpInfoInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required .ccd.LocalHttpService_t service = 2;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLocalHttpInfoInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required .ccd.LocalHttpService_t service = 2;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLocalHttpInfoInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.LocalHttpService_t service = 2;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocalHttpInfoInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLocalHttpInfoInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLocalHttpInfoInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLocalHttpInfoInput::MergeFrom(const GetLocalHttpInfoInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_service()) {
      set_service(from.service());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLocalHttpInfoInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalHttpInfoInput::CopyFrom(const GetLocalHttpInfoInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalHttpInfoInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetLocalHttpInfoInput::Swap(GetLocalHttpInfoInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(service_, other->service_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLocalHttpInfoInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLocalHttpInfoInput_descriptor_;
  metadata.reflection = GetLocalHttpInfoInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLocalHttpInfoOutput::kUrlPrefixFieldNumber;
const int GetLocalHttpInfoOutput::kSessionHandleFieldNumber;
const int GetLocalHttpInfoOutput::kServiceTicketFieldNumber;
#endif  // !_MSC_VER

GetLocalHttpInfoOutput::GetLocalHttpInfoOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLocalHttpInfoOutput::InitAsDefaultInstance() {
}

GetLocalHttpInfoOutput::GetLocalHttpInfoOutput(const GetLocalHttpInfoOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLocalHttpInfoOutput::SharedCtor() {
  _cached_size_ = 0;
  url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLocalHttpInfoOutput::~GetLocalHttpInfoOutput() {
  SharedDtor();
}

void GetLocalHttpInfoOutput::SharedDtor() {
  if (url_prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete url_prefix_;
  }
  if (session_handle_ != &::google::protobuf::internal::kEmptyString) {
    delete session_handle_;
  }
  if (service_ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete service_ticket_;
  }
  if (this != default_instance_) {
  }
}

void GetLocalHttpInfoOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLocalHttpInfoOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLocalHttpInfoOutput_descriptor_;
}

const GetLocalHttpInfoOutput& GetLocalHttpInfoOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetLocalHttpInfoOutput* GetLocalHttpInfoOutput::default_instance_ = NULL;

GetLocalHttpInfoOutput* GetLocalHttpInfoOutput::New() const {
  return new GetLocalHttpInfoOutput;
}

void GetLocalHttpInfoOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url_prefix()) {
      if (url_prefix_ != &::google::protobuf::internal::kEmptyString) {
        url_prefix_->clear();
      }
    }
    if (has_session_handle()) {
      if (session_handle_ != &::google::protobuf::internal::kEmptyString) {
        session_handle_->clear();
      }
    }
    if (has_service_ticket()) {
      if (service_ticket_ != &::google::protobuf::internal::kEmptyString) {
        service_ticket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLocalHttpInfoOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url_prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_prefix().data(), this->url_prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_handle;
        break;
      }
      
      // required string session_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_handle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_handle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_handle().data(), this->session_handle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_ticket;
        break;
      }
      
      // required string service_ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_ticket().data(), this->service_ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLocalHttpInfoOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url_prefix = 1;
  if (has_url_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url_prefix(), output);
  }
  
  // required string session_handle = 2;
  if (has_session_handle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_handle(), output);
  }
  
  // required string service_ticket = 3;
  if (has_service_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_ticket().data(), this->service_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->service_ticket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLocalHttpInfoOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url_prefix = 1;
  if (has_url_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_prefix().data(), this->url_prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url_prefix(), target);
  }
  
  // required string session_handle = 2;
  if (has_session_handle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_handle().data(), this->session_handle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_handle(), target);
  }
  
  // required string service_ticket = 3;
  if (has_service_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_ticket().data(), this->service_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service_ticket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLocalHttpInfoOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url_prefix = 1;
    if (has_url_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_prefix());
    }
    
    // required string session_handle = 2;
    if (has_session_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_handle());
    }
    
    // required string service_ticket = 3;
    if (has_service_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_ticket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLocalHttpInfoOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLocalHttpInfoOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLocalHttpInfoOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLocalHttpInfoOutput::MergeFrom(const GetLocalHttpInfoOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url_prefix()) {
      set_url_prefix(from.url_prefix());
    }
    if (from.has_session_handle()) {
      set_session_handle(from.session_handle());
    }
    if (from.has_service_ticket()) {
      set_service_ticket(from.service_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLocalHttpInfoOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalHttpInfoOutput::CopyFrom(const GetLocalHttpInfoOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalHttpInfoOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GetLocalHttpInfoOutput::Swap(GetLocalHttpInfoOutput* other) {
  if (other != this) {
    std::swap(url_prefix_, other->url_prefix_);
    std::swap(session_handle_, other->session_handle_);
    std::swap(service_ticket_, other->service_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLocalHttpInfoOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLocalHttpInfoOutput_descriptor_;
  metadata.reflection = GetLocalHttpInfoOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPersonalCloudStateInput::kUserIdFieldNumber;
const int GetPersonalCloudStateInput::kOnlyUseCacheFieldNumber;
const int GetPersonalCloudStateInput::kGetInfraStorageQuotaFieldNumber;
const int GetPersonalCloudStateInput::kListStorageNodesFieldNumber;
const int GetPersonalCloudStateInput::kGetDeviceConnectionStatusFieldNumber;
#endif  // !_MSC_VER

GetPersonalCloudStateInput::GetPersonalCloudStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPersonalCloudStateInput::InitAsDefaultInstance() {
}

GetPersonalCloudStateInput::GetPersonalCloudStateInput(const GetPersonalCloudStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPersonalCloudStateInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  only_use_cache_ = false;
  get_infra_storage_quota_ = false;
  list_storage_nodes_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPersonalCloudStateInput::~GetPersonalCloudStateInput() {
  SharedDtor();
}

void GetPersonalCloudStateInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPersonalCloudStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonalCloudStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPersonalCloudStateInput_descriptor_;
}

const GetPersonalCloudStateInput& GetPersonalCloudStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetPersonalCloudStateInput* GetPersonalCloudStateInput::default_instance_ = NULL;

GetPersonalCloudStateInput* GetPersonalCloudStateInput::New() const {
  return new GetPersonalCloudStateInput;
}

void GetPersonalCloudStateInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    only_use_cache_ = false;
    get_infra_storage_quota_ = false;
    list_storage_nodes_ = false;
  }
  get_device_connection_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPersonalCloudStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_infra_storage_quota;
        break;
      }
      
      // optional bool get_infra_storage_quota = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_infra_storage_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_infra_storage_quota_)));
          set_has_get_infra_storage_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list_storage_nodes;
        break;
      }
      
      // optional bool list_storage_nodes = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_storage_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &list_storage_nodes_)));
          set_has_list_storage_nodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_get_device_connection_status;
        break;
      }
      
      // repeated fixed64 get_device_connection_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_get_device_connection_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 33, input, this->mutable_get_device_connection_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_get_device_connection_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_get_device_connection_status;
        if (input->ExpectTag(40)) goto parse_only_use_cache;
        break;
      }
      
      // optional bool only_use_cache = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_use_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_cache_)));
          set_has_only_use_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPersonalCloudStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool get_infra_storage_quota = 2 [default = false];
  if (has_get_infra_storage_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_infra_storage_quota(), output);
  }
  
  // optional bool list_storage_nodes = 3 [default = false];
  if (has_list_storage_nodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->list_storage_nodes(), output);
  }
  
  // repeated fixed64 get_device_connection_status = 4;
  for (int i = 0; i < this->get_device_connection_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      4, this->get_device_connection_status(i), output);
  }
  
  // optional bool only_use_cache = 5 [default = false];
  if (has_only_use_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->only_use_cache(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPersonalCloudStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool get_infra_storage_quota = 2 [default = false];
  if (has_get_infra_storage_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_infra_storage_quota(), target);
  }
  
  // optional bool list_storage_nodes = 3 [default = false];
  if (has_list_storage_nodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->list_storage_nodes(), target);
  }
  
  // repeated fixed64 get_device_connection_status = 4;
  for (int i = 0; i < this->get_device_connection_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(4, this->get_device_connection_status(i), target);
  }
  
  // optional bool only_use_cache = 5 [default = false];
  if (has_only_use_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->only_use_cache(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPersonalCloudStateInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool only_use_cache = 5 [default = false];
    if (has_only_use_cache()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_infra_storage_quota = 2 [default = false];
    if (has_get_infra_storage_quota()) {
      total_size += 1 + 1;
    }
    
    // optional bool list_storage_nodes = 3 [default = false];
    if (has_list_storage_nodes()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated fixed64 get_device_connection_status = 4;
  {
    int data_size = 0;
    data_size = 8 * this->get_device_connection_status_size();
    total_size += 1 * this->get_device_connection_status_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonalCloudStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPersonalCloudStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPersonalCloudStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPersonalCloudStateInput::MergeFrom(const GetPersonalCloudStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_device_connection_status_.MergeFrom(from.get_device_connection_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_only_use_cache()) {
      set_only_use_cache(from.only_use_cache());
    }
    if (from.has_get_infra_storage_quota()) {
      set_get_infra_storage_quota(from.get_infra_storage_quota());
    }
    if (from.has_list_storage_nodes()) {
      set_list_storage_nodes(from.list_storage_nodes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPersonalCloudStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonalCloudStateInput::CopyFrom(const GetPersonalCloudStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonalCloudStateInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetPersonalCloudStateInput::Swap(GetPersonalCloudStateInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(only_use_cache_, other->only_use_cache_);
    std::swap(get_infra_storage_quota_, other->get_infra_storage_quota_);
    std::swap(list_storage_nodes_, other->list_storage_nodes_);
    get_device_connection_status_.Swap(&other->get_device_connection_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPersonalCloudStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPersonalCloudStateInput_descriptor_;
  metadata.reflection = GetPersonalCloudStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceConnectionStatus::kStateFieldNumber;
const int DeviceConnectionStatus::kStandbySinceFieldNumber;
const int DeviceConnectionStatus::kUpdatingFieldNumber;
#endif  // !_MSC_VER

DeviceConnectionStatus::DeviceConnectionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceConnectionStatus::InitAsDefaultInstance() {
}

DeviceConnectionStatus::DeviceConnectionStatus(const DeviceConnectionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceConnectionStatus::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  standby_since_ = GOOGLE_ULONGLONG(0);
  updating_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceConnectionStatus::~DeviceConnectionStatus() {
  SharedDtor();
}

void DeviceConnectionStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceConnectionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceConnectionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceConnectionStatus_descriptor_;
}

const DeviceConnectionStatus& DeviceConnectionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DeviceConnectionStatus* DeviceConnectionStatus::default_instance_ = NULL;

DeviceConnectionStatus* DeviceConnectionStatus::New() const {
  return new DeviceConnectionStatus;
}

void DeviceConnectionStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    standby_since_ = GOOGLE_ULONGLONG(0);
    updating_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceConnectionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.DeviceConnectionState_t state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::DeviceConnectionState_t_IsValid(value)) {
            set_state(static_cast< ccd::DeviceConnectionState_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_standby_since;
        break;
      }
      
      // optional uint64 standby_since = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_standby_since:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &standby_since_)));
          set_has_standby_since();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_updating;
        break;
      }
      
      // optional bool updating = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &updating_)));
          set_has_updating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceConnectionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.DeviceConnectionState_t state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // optional uint64 standby_since = 2;
  if (has_standby_since()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->standby_since(), output);
  }
  
  // optional bool updating = 3 [default = false];
  if (has_updating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->updating(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceConnectionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.DeviceConnectionState_t state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // optional uint64 standby_since = 2;
  if (has_standby_since()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->standby_since(), target);
  }
  
  // optional bool updating = 3 [default = false];
  if (has_updating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->updating(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceConnectionStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.DeviceConnectionState_t state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional uint64 standby_since = 2;
    if (has_standby_since()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->standby_since());
    }
    
    // optional bool updating = 3 [default = false];
    if (has_updating()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceConnectionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceConnectionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceConnectionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceConnectionStatus::MergeFrom(const DeviceConnectionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_standby_since()) {
      set_standby_since(from.standby_since());
    }
    if (from.has_updating()) {
      set_updating(from.updating());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceConnectionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceConnectionStatus::CopyFrom(const DeviceConnectionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConnectionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeviceConnectionStatus::Swap(DeviceConnectionStatus* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(standby_since_, other->standby_since_);
    std::swap(updating_, other->updating_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceConnectionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceConnectionStatus_descriptor_;
  metadata.reflection = DeviceConnectionStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageNodeInfo::kDeviceIdFieldNumber;
const int StorageNodeInfo::kStorageNameFieldNumber;
const int StorageNodeInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

StorageNodeInfo::StorageNodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageNodeInfo::InitAsDefaultInstance() {
  status_ = const_cast< ::ccd::DeviceConnectionStatus*>(&::ccd::DeviceConnectionStatus::default_instance());
}

StorageNodeInfo::StorageNodeInfo(const StorageNodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageNodeInfo::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  storage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageNodeInfo::~StorageNodeInfo() {
  SharedDtor();
}

void StorageNodeInfo::SharedDtor() {
  if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
    delete storage_name_;
  }
  if (this != default_instance_) {
    delete status_;
  }
}

void StorageNodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageNodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageNodeInfo_descriptor_;
}

const StorageNodeInfo& StorageNodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

StorageNodeInfo* StorageNodeInfo::default_instance_ = NULL;

StorageNodeInfo* StorageNodeInfo::New() const {
  return new StorageNodeInfo;
}

void StorageNodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_storage_name()) {
      if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
        storage_name_->clear();
      }
    }
    if (has_status()) {
      if (status_ != NULL) status_->::ccd::DeviceConnectionStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageNodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storage_name;
        break;
      }
      
      // optional string storage_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storage_name().data(), this->storage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_status;
        break;
      }
      
      // required .ccd.DeviceConnectionStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageNodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->device_id(), output);
  }
  
  // optional string storage_name = 2;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storage_name().data(), this->storage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->storage_name(), output);
  }
  
  // required .ccd.DeviceConnectionStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageNodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->device_id(), target);
  }
  
  // optional string storage_name = 2;
  if (has_storage_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storage_name().data(), this->storage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->storage_name(), target);
  }
  
  // required .ccd.DeviceConnectionStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageNodeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 device_id = 1;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // optional string storage_name = 2;
    if (has_storage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->storage_name());
    }
    
    // required .ccd.DeviceConnectionStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageNodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageNodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageNodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageNodeInfo::MergeFrom(const StorageNodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_storage_name()) {
      set_storage_name(from.storage_name());
    }
    if (from.has_status()) {
      mutable_status()->::ccd::DeviceConnectionStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageNodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageNodeInfo::CopyFrom(const StorageNodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageNodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void StorageNodeInfo::Swap(StorageNodeInfo* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(storage_name_, other->storage_name_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageNodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageNodeInfo_descriptor_;
  metadata.reflection = StorageNodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPersonalCloudStateOutput::kInfraStorageUsedBytesFieldNumber;
const int GetPersonalCloudStateOutput::kInfraStorageTotalBytesFieldNumber;
const int GetPersonalCloudStateOutput::kStorageNodesFieldNumber;
const int GetPersonalCloudStateOutput::kDeviceConnectionStatusFieldNumber;
#endif  // !_MSC_VER

GetPersonalCloudStateOutput::GetPersonalCloudStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPersonalCloudStateOutput::InitAsDefaultInstance() {
}

GetPersonalCloudStateOutput::GetPersonalCloudStateOutput(const GetPersonalCloudStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPersonalCloudStateOutput::SharedCtor() {
  _cached_size_ = 0;
  infra_storage_used_bytes_ = GOOGLE_ULONGLONG(0);
  infra_storage_total_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPersonalCloudStateOutput::~GetPersonalCloudStateOutput() {
  SharedDtor();
}

void GetPersonalCloudStateOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPersonalCloudStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPersonalCloudStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPersonalCloudStateOutput_descriptor_;
}

const GetPersonalCloudStateOutput& GetPersonalCloudStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetPersonalCloudStateOutput* GetPersonalCloudStateOutput::default_instance_ = NULL;

GetPersonalCloudStateOutput* GetPersonalCloudStateOutput::New() const {
  return new GetPersonalCloudStateOutput;
}

void GetPersonalCloudStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    infra_storage_used_bytes_ = GOOGLE_ULONGLONG(0);
    infra_storage_total_bytes_ = GOOGLE_ULONGLONG(0);
  }
  storage_nodes_.Clear();
  device_connection_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPersonalCloudStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 infra_storage_used_bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &infra_storage_used_bytes_)));
          set_has_infra_storage_used_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_infra_storage_total_bytes;
        break;
      }
      
      // optional uint64 infra_storage_total_bytes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_infra_storage_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &infra_storage_total_bytes_)));
          set_has_infra_storage_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_storage_nodes;
        break;
      }
      
      // repeated .ccd.StorageNodeInfo storage_nodes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storage_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storage_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_storage_nodes;
        if (input->ExpectTag(34)) goto parse_device_connection_status;
        break;
      }
      
      // repeated .ccd.DeviceConnectionStatus device_connection_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_connection_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_connection_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_connection_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPersonalCloudStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 infra_storage_used_bytes = 1;
  if (has_infra_storage_used_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->infra_storage_used_bytes(), output);
  }
  
  // optional uint64 infra_storage_total_bytes = 2;
  if (has_infra_storage_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->infra_storage_total_bytes(), output);
  }
  
  // repeated .ccd.StorageNodeInfo storage_nodes = 3;
  for (int i = 0; i < this->storage_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->storage_nodes(i), output);
  }
  
  // repeated .ccd.DeviceConnectionStatus device_connection_status = 4;
  for (int i = 0; i < this->device_connection_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->device_connection_status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPersonalCloudStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 infra_storage_used_bytes = 1;
  if (has_infra_storage_used_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->infra_storage_used_bytes(), target);
  }
  
  // optional uint64 infra_storage_total_bytes = 2;
  if (has_infra_storage_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->infra_storage_total_bytes(), target);
  }
  
  // repeated .ccd.StorageNodeInfo storage_nodes = 3;
  for (int i = 0; i < this->storage_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->storage_nodes(i), target);
  }
  
  // repeated .ccd.DeviceConnectionStatus device_connection_status = 4;
  for (int i = 0; i < this->device_connection_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->device_connection_status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPersonalCloudStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 infra_storage_used_bytes = 1;
    if (has_infra_storage_used_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->infra_storage_used_bytes());
    }
    
    // optional uint64 infra_storage_total_bytes = 2;
    if (has_infra_storage_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->infra_storage_total_bytes());
    }
    
  }
  // repeated .ccd.StorageNodeInfo storage_nodes = 3;
  total_size += 1 * this->storage_nodes_size();
  for (int i = 0; i < this->storage_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storage_nodes(i));
  }
  
  // repeated .ccd.DeviceConnectionStatus device_connection_status = 4;
  total_size += 1 * this->device_connection_status_size();
  for (int i = 0; i < this->device_connection_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->device_connection_status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPersonalCloudStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPersonalCloudStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPersonalCloudStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPersonalCloudStateOutput::MergeFrom(const GetPersonalCloudStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  storage_nodes_.MergeFrom(from.storage_nodes_);
  device_connection_status_.MergeFrom(from.device_connection_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infra_storage_used_bytes()) {
      set_infra_storage_used_bytes(from.infra_storage_used_bytes());
    }
    if (from.has_infra_storage_total_bytes()) {
      set_infra_storage_total_bytes(from.infra_storage_total_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPersonalCloudStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPersonalCloudStateOutput::CopyFrom(const GetPersonalCloudStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPersonalCloudStateOutput::IsInitialized() const {
  
  for (int i = 0; i < storage_nodes_size(); i++) {
    if (!this->storage_nodes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < device_connection_status_size(); i++) {
    if (!this->device_connection_status(i).IsInitialized()) return false;
  }
  return true;
}

void GetPersonalCloudStateOutput::Swap(GetPersonalCloudStateOutput* other) {
  if (other != this) {
    std::swap(infra_storage_used_bytes_, other->infra_storage_used_bytes_);
    std::swap(infra_storage_total_bytes_, other->infra_storage_total_bytes_);
    storage_nodes_.Swap(&other->storage_nodes_);
    device_connection_status_.Swap(&other->device_connection_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPersonalCloudStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPersonalCloudStateOutput_descriptor_;
  metadata.reflection = GetPersonalCloudStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LookupAbsPathInput::kDatasetIdFieldNumber;
const int LookupAbsPathInput::kComponentIdFieldNumber;
const int LookupAbsPathInput::kRevisionFieldNumber;
const int LookupAbsPathInput::kDatasetRelPathFieldNumber;
#endif  // !_MSC_VER

LookupAbsPathInput::LookupAbsPathInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LookupAbsPathInput::InitAsDefaultInstance() {
}

LookupAbsPathInput::LookupAbsPathInput(const LookupAbsPathInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LookupAbsPathInput::SharedCtor() {
  _cached_size_ = 0;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  component_id_ = GOOGLE_ULONGLONG(0);
  revision_ = GOOGLE_ULONGLONG(0);
  dataset_rel_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LookupAbsPathInput::~LookupAbsPathInput() {
  SharedDtor();
}

void LookupAbsPathInput::SharedDtor() {
  if (dataset_rel_path_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_rel_path_;
  }
  if (this != default_instance_) {
  }
}

void LookupAbsPathInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupAbsPathInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LookupAbsPathInput_descriptor_;
}

const LookupAbsPathInput& LookupAbsPathInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LookupAbsPathInput* LookupAbsPathInput::default_instance_ = NULL;

LookupAbsPathInput* LookupAbsPathInput::New() const {
  return new LookupAbsPathInput;
}

void LookupAbsPathInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataset_id_ = GOOGLE_ULONGLONG(0);
    component_id_ = GOOGLE_ULONGLONG(0);
    revision_ = GOOGLE_ULONGLONG(0);
    if (has_dataset_rel_path()) {
      if (dataset_rel_path_ != &::google::protobuf::internal::kEmptyString) {
        dataset_rel_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LookupAbsPathInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_component_id;
        break;
      }
      
      // required fixed64 component_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_component_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &component_id_)));
          set_has_component_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_revision;
        break;
      }
      
      // required uint64 revision = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dataset_rel_path;
        break;
      }
      
      // optional string dataset_rel_path = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_rel_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_rel_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset_rel_path().data(), this->dataset_rel_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LookupAbsPathInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dataset_id(), output);
  }
  
  // required fixed64 component_id = 2;
  if (has_component_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->component_id(), output);
  }
  
  // required uint64 revision = 3;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->revision(), output);
  }
  
  // optional string dataset_rel_path = 7;
  if (has_dataset_rel_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_rel_path().data(), this->dataset_rel_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dataset_rel_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LookupAbsPathInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dataset_id(), target);
  }
  
  // required fixed64 component_id = 2;
  if (has_component_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->component_id(), target);
  }
  
  // required uint64 revision = 3;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->revision(), target);
  }
  
  // optional string dataset_rel_path = 7;
  if (has_dataset_rel_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_rel_path().data(), this->dataset_rel_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dataset_rel_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LookupAbsPathInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dataset_id = 1;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 component_id = 2;
    if (has_component_id()) {
      total_size += 1 + 8;
    }
    
    // required uint64 revision = 3;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->revision());
    }
    
    // optional string dataset_rel_path = 7;
    if (has_dataset_rel_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_rel_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupAbsPathInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LookupAbsPathInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LookupAbsPathInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LookupAbsPathInput::MergeFrom(const LookupAbsPathInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_component_id()) {
      set_component_id(from.component_id());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_dataset_rel_path()) {
      set_dataset_rel_path(from.dataset_rel_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LookupAbsPathInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupAbsPathInput::CopyFrom(const LookupAbsPathInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAbsPathInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LookupAbsPathInput::Swap(LookupAbsPathInput* other) {
  if (other != this) {
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(component_id_, other->component_id_);
    std::swap(revision_, other->revision_);
    std::swap(dataset_rel_path_, other->dataset_rel_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LookupAbsPathInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LookupAbsPathInput_descriptor_;
  metadata.reflection = LookupAbsPathInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventSyncHistory::kTypeFieldNumber;
const int EventSyncHistory::kPathFieldNumber;
const int EventSyncHistory::kFeatureFieldNumber;
const int EventSyncHistory::kDatasetIdFieldNumber;
const int EventSyncHistory::kEventTimeFieldNumber;
const int EventSyncHistory::kConflictFileOriginalPathFieldNumber;
#endif  // !_MSC_VER

EventSyncHistory::EventSyncHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventSyncHistory::InitAsDefaultInstance() {
}

EventSyncHistory::EventSyncHistory(const EventSyncHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventSyncHistory::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feature_ = 1;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  event_time_ = GOOGLE_ULONGLONG(0);
  conflict_file_original_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventSyncHistory::~EventSyncHistory() {
  SharedDtor();
}

void EventSyncHistory::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (conflict_file_original_path_ != &::google::protobuf::internal::kEmptyString) {
    delete conflict_file_original_path_;
  }
  if (this != default_instance_) {
  }
}

void EventSyncHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventSyncHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventSyncHistory_descriptor_;
}

const EventSyncHistory& EventSyncHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EventSyncHistory* EventSyncHistory::default_instance_ = NULL;

EventSyncHistory* EventSyncHistory::New() const {
  return new EventSyncHistory;
}

void EventSyncHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    feature_ = 1;
    dataset_id_ = GOOGLE_ULONGLONG(0);
    event_time_ = GOOGLE_ULONGLONG(0);
    if (has_conflict_file_original_path()) {
      if (conflict_file_original_path_ != &::google::protobuf::internal::kEmptyString) {
        conflict_file_original_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventSyncHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.SyncEventType_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncEventType_t_IsValid(value)) {
            set_type(static_cast< ccd::SyncEventType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_feature;
        break;
      }
      
      // required .ccd.SyncFeature_t feature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            set_feature(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataset_id;
        break;
      }
      
      // required uint64 dataset_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_time;
        break;
      }
      
      // required uint64 event_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_conflict_file_original_path;
        break;
      }
      
      // optional string conflict_file_original_path = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conflict_file_original_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conflict_file_original_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conflict_file_original_path().data(), this->conflict_file_original_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventSyncHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.SyncEventType_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  // required .ccd.SyncFeature_t feature = 3;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->feature(), output);
  }
  
  // required uint64 dataset_id = 4;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dataset_id(), output);
  }
  
  // required uint64 event_time = 5;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->event_time(), output);
  }
  
  // optional string conflict_file_original_path = 15;
  if (has_conflict_file_original_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conflict_file_original_path().data(), this->conflict_file_original_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->conflict_file_original_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventSyncHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.SyncEventType_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  // required .ccd.SyncFeature_t feature = 3;
  if (has_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->feature(), target);
  }
  
  // required uint64 dataset_id = 4;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dataset_id(), target);
  }
  
  // required uint64 event_time = 5;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->event_time(), target);
  }
  
  // optional string conflict_file_original_path = 15;
  if (has_conflict_file_original_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conflict_file_original_path().data(), this->conflict_file_original_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->conflict_file_original_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventSyncHistory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.SyncEventType_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required .ccd.SyncFeature_t feature = 3;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->feature());
    }
    
    // required uint64 dataset_id = 4;
    if (has_dataset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dataset_id());
    }
    
    // required uint64 event_time = 5;
    if (has_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_time());
    }
    
    // optional string conflict_file_original_path = 15;
    if (has_conflict_file_original_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conflict_file_original_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventSyncHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventSyncHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventSyncHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventSyncHistory::MergeFrom(const EventSyncHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_feature()) {
      set_feature(from.feature());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
    if (from.has_conflict_file_original_path()) {
      set_conflict_file_original_path(from.conflict_file_original_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventSyncHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventSyncHistory::CopyFrom(const EventSyncHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSyncHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void EventSyncHistory::Swap(EventSyncHistory* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(path_, other->path_);
    std::swap(feature_, other->feature_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(event_time_, other->event_time_);
    std::swap(conflict_file_original_path_, other->conflict_file_original_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventSyncHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventSyncHistory_descriptor_;
  metadata.reflection = EventSyncHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSyncStateInput::kUserIdFieldNumber;
const int GetSyncStateInput::kOnlyUseCacheFieldNumber;
const int GetSyncStateInput::kGetDeviceNameFieldNumber;
const int GetSyncStateInput::kGetIsCameraRollUploadEnabledFieldNumber;
const int GetSyncStateInput::kGetIsCameraRollGlobalDeleteEnabledFieldNumber;
const int GetSyncStateInput::kGetIsNetworkActivityEnabledFieldNumber;
const int GetSyncStateInput::kGetBandwidthLimitsFieldNumber;
const int GetSyncStateInput::kGetSyncStatesForPathsFieldNumber;
const int GetSyncStateInput::kGetSyncStatesForDatasetsFieldNumber;
const int GetSyncStateInput::kGetSyncStatesForFeaturesFieldNumber;
const int GetSyncStateInput::kGetBackgroundDataFieldNumber;
const int GetSyncStateInput::kGetAutoSyncFieldNumber;
const int GetSyncStateInput::kGetMobileNetworkDataFieldNumber;
const int GetSyncStateInput::kGetCameraRollUploadDirsFieldNumber;
const int GetSyncStateInput::kGetCameraRollDownloadDirsFieldNumber;
const int GetSyncStateInput::kGetMediaMetadataDownloadPathFieldNumber;
const int GetSyncStateInput::kGetMediaMetadataUploadPathFieldNumber;
const int GetSyncStateInput::kGetMediaPlaylistPathFieldNumber;
const int GetSyncStateInput::kGetNotesSyncSettingsFieldNumber;
const int GetSyncStateInput::kGetNotesSyncPathFieldNumber;
const int GetSyncStateInput::kGetMmThumbDownloadPathFieldNumber;
const int GetSyncStateInput::kGetMmThumbSyncEnabledFieldNumber;
const int GetSyncStateInput::kGetClouddocSyncFieldNumber;
const int GetSyncStateInput::kLookupAbsPathFieldNumber;
const int GetSyncStateInput::kGetSyncHistoryEventsByFeatureFieldNumber;
const int GetSyncStateInput::kGetSyncHistoryEventsMaxCountFieldNumber;
const int GetSyncStateInput::kGetSyncboxSyncSettingsFieldNumber;
#endif  // !_MSC_VER

GetSyncStateInput::GetSyncStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSyncStateInput::InitAsDefaultInstance() {
  lookup_abs_path_ = const_cast< ::ccd::LookupAbsPathInput*>(&::ccd::LookupAbsPathInput::default_instance());
}

GetSyncStateInput::GetSyncStateInput(const GetSyncStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSyncStateInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  only_use_cache_ = false;
  get_device_name_ = false;
  get_is_camera_roll_upload_enabled_ = false;
  get_is_camera_roll_global_delete_enabled_ = true;
  get_is_network_activity_enabled_ = false;
  get_bandwidth_limits_ = false;
  get_background_data_ = false;
  get_auto_sync_ = false;
  get_mobile_network_data_ = false;
  get_camera_roll_upload_dirs_ = false;
  get_camera_roll_download_dirs_ = false;
  get_media_metadata_download_path_ = false;
  get_media_metadata_upload_path_ = false;
  get_media_playlist_path_ = false;
  get_notes_sync_settings_ = false;
  get_notes_sync_path_ = false;
  get_mm_thumb_download_path_ = false;
  get_mm_thumb_sync_enabled_ = false;
  get_clouddoc_sync_ = false;
  lookup_abs_path_ = NULL;
  get_sync_history_events_by_feature_ = 1;
  get_sync_history_events_max_count_ = 0u;
  get_syncbox_sync_settings_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSyncStateInput::~GetSyncStateInput() {
  SharedDtor();
}

void GetSyncStateInput::SharedDtor() {
  if (this != default_instance_) {
    delete lookup_abs_path_;
  }
}

void GetSyncStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSyncStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSyncStateInput_descriptor_;
}

const GetSyncStateInput& GetSyncStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetSyncStateInput* GetSyncStateInput::default_instance_ = NULL;

GetSyncStateInput* GetSyncStateInput::New() const {
  return new GetSyncStateInput;
}

void GetSyncStateInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    only_use_cache_ = false;
    get_device_name_ = false;
    get_is_camera_roll_upload_enabled_ = false;
    get_is_camera_roll_global_delete_enabled_ = true;
    get_is_network_activity_enabled_ = false;
    get_bandwidth_limits_ = false;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    get_background_data_ = false;
    get_auto_sync_ = false;
    get_mobile_network_data_ = false;
    get_camera_roll_upload_dirs_ = false;
    get_camera_roll_download_dirs_ = false;
    get_media_metadata_download_path_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    get_media_metadata_upload_path_ = false;
    get_media_playlist_path_ = false;
    get_notes_sync_settings_ = false;
    get_notes_sync_path_ = false;
    get_mm_thumb_download_path_ = false;
    get_mm_thumb_sync_enabled_ = false;
    get_clouddoc_sync_ = false;
    if (has_lookup_abs_path()) {
      if (lookup_abs_path_ != NULL) lookup_abs_path_->::ccd::LookupAbsPathInput::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    get_sync_history_events_by_feature_ = 1;
    get_sync_history_events_max_count_ = 0u;
    get_syncbox_sync_settings_ = false;
  }
  get_sync_states_for_paths_.Clear();
  get_sync_states_for_datasets_.Clear();
  get_sync_states_for_features_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSyncStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_device_name;
        break;
      }
      
      // optional bool get_device_name = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_device_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_device_name_)));
          set_has_get_device_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_get_bandwidth_limits;
        break;
      }
      
      // optional bool get_bandwidth_limits = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_bandwidth_limits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_bandwidth_limits_)));
          set_has_get_bandwidth_limits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_get_sync_states_for_paths;
        break;
      }
      
      // repeated string get_sync_states_for_paths = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_sync_states_for_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_get_sync_states_for_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->get_sync_states_for_paths(0).data(), this->get_sync_states_for_paths(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_get_sync_states_for_paths;
        if (input->ExpectTag(48)) goto parse_only_use_cache;
        break;
      }
      
      // optional bool only_use_cache = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_use_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_cache_)));
          set_has_only_use_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_get_is_camera_roll_upload_enabled;
        break;
      }
      
      // optional bool get_is_camera_roll_upload_enabled = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_is_camera_roll_upload_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_is_camera_roll_upload_enabled_)));
          set_has_get_is_camera_roll_upload_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_get_sync_states_for_datasets;
        break;
      }
      
      // repeated fixed64 get_sync_states_for_datasets = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_get_sync_states_for_datasets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 65, input, this->mutable_get_sync_states_for_datasets())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_get_sync_states_for_datasets())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_get_sync_states_for_datasets;
        if (input->ExpectTag(72)) goto parse_get_is_network_activity_enabled;
        break;
      }
      
      // optional bool get_is_network_activity_enabled = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_is_network_activity_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_is_network_activity_enabled_)));
          set_has_get_is_network_activity_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_get_background_data;
        break;
      }
      
      // optional bool get_background_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_background_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_background_data_)));
          set_has_get_background_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_get_auto_sync;
        break;
      }
      
      // optional bool get_auto_sync = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_auto_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_auto_sync_)));
          set_has_get_auto_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_get_mobile_network_data;
        break;
      }
      
      // optional bool get_mobile_network_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_mobile_network_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_mobile_network_data_)));
          set_has_get_mobile_network_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_get_camera_roll_upload_dirs;
        break;
      }
      
      // optional bool get_camera_roll_upload_dirs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_camera_roll_upload_dirs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_camera_roll_upload_dirs_)));
          set_has_get_camera_roll_upload_dirs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_get_media_metadata_download_path;
        break;
      }
      
      // optional bool get_media_metadata_download_path = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_media_metadata_download_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_media_metadata_download_path_)));
          set_has_get_media_metadata_download_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_get_media_metadata_upload_path;
        break;
      }
      
      // optional bool get_media_metadata_upload_path = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_media_metadata_upload_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_media_metadata_upload_path_)));
          set_has_get_media_metadata_upload_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_get_media_playlist_path;
        break;
      }
      
      // optional bool get_media_playlist_path = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_media_playlist_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_media_playlist_path_)));
          set_has_get_media_playlist_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_get_camera_roll_download_dirs;
        break;
      }
      
      // optional bool get_camera_roll_download_dirs = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_camera_roll_download_dirs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_camera_roll_download_dirs_)));
          set_has_get_camera_roll_download_dirs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_get_notes_sync_settings;
        break;
      }
      
      // optional bool get_notes_sync_settings = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_notes_sync_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_notes_sync_settings_)));
          set_has_get_notes_sync_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_get_sync_states_for_features;
        break;
      }
      
      // repeated .ccd.SyncFeature_t get_sync_states_for_features = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_sync_states_for_features:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            add_get_sync_states_for_features(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &ccd::SyncFeature_t_IsValid,
                 this->mutable_get_sync_states_for_features())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_get_sync_states_for_features;
        if (input->ExpectTag(184)) goto parse_get_notes_sync_path;
        break;
      }
      
      // optional bool get_notes_sync_path = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_notes_sync_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_notes_sync_path_)));
          set_has_get_notes_sync_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_get_mm_thumb_download_path;
        break;
      }
      
      // optional bool get_mm_thumb_download_path = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_mm_thumb_download_path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_mm_thumb_download_path_)));
          set_has_get_mm_thumb_download_path();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_get_mm_thumb_sync_enabled;
        break;
      }
      
      // optional bool get_mm_thumb_sync_enabled = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_mm_thumb_sync_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_mm_thumb_sync_enabled_)));
          set_has_get_mm_thumb_sync_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_get_clouddoc_sync;
        break;
      }
      
      // optional bool get_clouddoc_sync = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_clouddoc_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_clouddoc_sync_)));
          set_has_get_clouddoc_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_lookup_abs_path;
        break;
      }
      
      // optional .ccd.LookupAbsPathInput lookup_abs_path = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lookup_abs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lookup_abs_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_get_sync_history_events_by_feature;
        break;
      }
      
      // optional .ccd.SyncFeature_t get_sync_history_events_by_feature = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_sync_history_events_by_feature:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            set_get_sync_history_events_by_feature(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_get_is_camera_roll_global_delete_enabled;
        break;
      }
      
      // optional bool get_is_camera_roll_global_delete_enabled = 32 [default = true];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_is_camera_roll_global_delete_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_is_camera_roll_global_delete_enabled_)));
          set_has_get_is_camera_roll_global_delete_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_get_syncbox_sync_settings;
        break;
      }
      
      // optional bool get_syncbox_sync_settings = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_syncbox_sync_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_syncbox_sync_settings_)));
          set_has_get_syncbox_sync_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_get_sync_history_events_max_count;
        break;
      }
      
      // optional uint32 get_sync_history_events_max_count = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_sync_history_events_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_sync_history_events_max_count_)));
          set_has_get_sync_history_events_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSyncStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool get_device_name = 2 [default = false];
  if (has_get_device_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_device_name(), output);
  }
  
  // optional bool get_bandwidth_limits = 4 [default = false];
  if (has_get_bandwidth_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->get_bandwidth_limits(), output);
  }
  
  // repeated string get_sync_states_for_paths = 5;
  for (int i = 0; i < this->get_sync_states_for_paths_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->get_sync_states_for_paths(i).data(), this->get_sync_states_for_paths(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->get_sync_states_for_paths(i), output);
  }
  
  // optional bool only_use_cache = 6 [default = false];
  if (has_only_use_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->only_use_cache(), output);
  }
  
  // optional bool get_is_camera_roll_upload_enabled = 7 [default = false];
  if (has_get_is_camera_roll_upload_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->get_is_camera_roll_upload_enabled(), output);
  }
  
  // repeated fixed64 get_sync_states_for_datasets = 8;
  for (int i = 0; i < this->get_sync_states_for_datasets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      8, this->get_sync_states_for_datasets(i), output);
  }
  
  // optional bool get_is_network_activity_enabled = 9 [default = false];
  if (has_get_is_network_activity_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->get_is_network_activity_enabled(), output);
  }
  
  // optional bool get_background_data = 12;
  if (has_get_background_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->get_background_data(), output);
  }
  
  // optional bool get_auto_sync = 13;
  if (has_get_auto_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->get_auto_sync(), output);
  }
  
  // optional bool get_mobile_network_data = 14;
  if (has_get_mobile_network_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->get_mobile_network_data(), output);
  }
  
  // optional bool get_camera_roll_upload_dirs = 15;
  if (has_get_camera_roll_upload_dirs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->get_camera_roll_upload_dirs(), output);
  }
  
  // optional bool get_media_metadata_download_path = 16;
  if (has_get_media_metadata_download_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->get_media_metadata_download_path(), output);
  }
  
  // optional bool get_media_metadata_upload_path = 17;
  if (has_get_media_metadata_upload_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->get_media_metadata_upload_path(), output);
  }
  
  // optional bool get_media_playlist_path = 18;
  if (has_get_media_playlist_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->get_media_playlist_path(), output);
  }
  
  // optional bool get_camera_roll_download_dirs = 19;
  if (has_get_camera_roll_download_dirs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->get_camera_roll_download_dirs(), output);
  }
  
  // optional bool get_notes_sync_settings = 21;
  if (has_get_notes_sync_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->get_notes_sync_settings(), output);
  }
  
  // repeated .ccd.SyncFeature_t get_sync_states_for_features = 22;
  for (int i = 0; i < this->get_sync_states_for_features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->get_sync_states_for_features(i), output);
  }
  
  // optional bool get_notes_sync_path = 23;
  if (has_get_notes_sync_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->get_notes_sync_path(), output);
  }
  
  // optional bool get_mm_thumb_download_path = 24;
  if (has_get_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->get_mm_thumb_download_path(), output);
  }
  
  // optional bool get_mm_thumb_sync_enabled = 26;
  if (has_get_mm_thumb_sync_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->get_mm_thumb_sync_enabled(), output);
  }
  
  // optional bool get_clouddoc_sync = 28;
  if (has_get_clouddoc_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->get_clouddoc_sync(), output);
  }
  
  // optional .ccd.LookupAbsPathInput lookup_abs_path = 30;
  if (has_lookup_abs_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->lookup_abs_path(), output);
  }
  
  // optional .ccd.SyncFeature_t get_sync_history_events_by_feature = 31;
  if (has_get_sync_history_events_by_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->get_sync_history_events_by_feature(), output);
  }
  
  // optional bool get_is_camera_roll_global_delete_enabled = 32 [default = true];
  if (has_get_is_camera_roll_global_delete_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->get_is_camera_roll_global_delete_enabled(), output);
  }
  
  // optional bool get_syncbox_sync_settings = 33;
  if (has_get_syncbox_sync_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->get_syncbox_sync_settings(), output);
  }
  
  // optional uint32 get_sync_history_events_max_count = 34 [default = 0];
  if (has_get_sync_history_events_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->get_sync_history_events_max_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSyncStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool get_device_name = 2 [default = false];
  if (has_get_device_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_device_name(), target);
  }
  
  // optional bool get_bandwidth_limits = 4 [default = false];
  if (has_get_bandwidth_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->get_bandwidth_limits(), target);
  }
  
  // repeated string get_sync_states_for_paths = 5;
  for (int i = 0; i < this->get_sync_states_for_paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->get_sync_states_for_paths(i).data(), this->get_sync_states_for_paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->get_sync_states_for_paths(i), target);
  }
  
  // optional bool only_use_cache = 6 [default = false];
  if (has_only_use_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->only_use_cache(), target);
  }
  
  // optional bool get_is_camera_roll_upload_enabled = 7 [default = false];
  if (has_get_is_camera_roll_upload_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->get_is_camera_roll_upload_enabled(), target);
  }
  
  // repeated fixed64 get_sync_states_for_datasets = 8;
  for (int i = 0; i < this->get_sync_states_for_datasets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64ToArray(8, this->get_sync_states_for_datasets(i), target);
  }
  
  // optional bool get_is_network_activity_enabled = 9 [default = false];
  if (has_get_is_network_activity_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->get_is_network_activity_enabled(), target);
  }
  
  // optional bool get_background_data = 12;
  if (has_get_background_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->get_background_data(), target);
  }
  
  // optional bool get_auto_sync = 13;
  if (has_get_auto_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->get_auto_sync(), target);
  }
  
  // optional bool get_mobile_network_data = 14;
  if (has_get_mobile_network_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->get_mobile_network_data(), target);
  }
  
  // optional bool get_camera_roll_upload_dirs = 15;
  if (has_get_camera_roll_upload_dirs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->get_camera_roll_upload_dirs(), target);
  }
  
  // optional bool get_media_metadata_download_path = 16;
  if (has_get_media_metadata_download_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->get_media_metadata_download_path(), target);
  }
  
  // optional bool get_media_metadata_upload_path = 17;
  if (has_get_media_metadata_upload_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->get_media_metadata_upload_path(), target);
  }
  
  // optional bool get_media_playlist_path = 18;
  if (has_get_media_playlist_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->get_media_playlist_path(), target);
  }
  
  // optional bool get_camera_roll_download_dirs = 19;
  if (has_get_camera_roll_download_dirs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->get_camera_roll_download_dirs(), target);
  }
  
  // optional bool get_notes_sync_settings = 21;
  if (has_get_notes_sync_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->get_notes_sync_settings(), target);
  }
  
  // repeated .ccd.SyncFeature_t get_sync_states_for_features = 22;
  for (int i = 0; i < this->get_sync_states_for_features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->get_sync_states_for_features(i), target);
  }
  
  // optional bool get_notes_sync_path = 23;
  if (has_get_notes_sync_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->get_notes_sync_path(), target);
  }
  
  // optional bool get_mm_thumb_download_path = 24;
  if (has_get_mm_thumb_download_path()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->get_mm_thumb_download_path(), target);
  }
  
  // optional bool get_mm_thumb_sync_enabled = 26;
  if (has_get_mm_thumb_sync_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->get_mm_thumb_sync_enabled(), target);
  }
  
  // optional bool get_clouddoc_sync = 28;
  if (has_get_clouddoc_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->get_clouddoc_sync(), target);
  }
  
  // optional .ccd.LookupAbsPathInput lookup_abs_path = 30;
  if (has_lookup_abs_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->lookup_abs_path(), target);
  }
  
  // optional .ccd.SyncFeature_t get_sync_history_events_by_feature = 31;
  if (has_get_sync_history_events_by_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->get_sync_history_events_by_feature(), target);
  }
  
  // optional bool get_is_camera_roll_global_delete_enabled = 32 [default = true];
  if (has_get_is_camera_roll_global_delete_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->get_is_camera_roll_global_delete_enabled(), target);
  }
  
  // optional bool get_syncbox_sync_settings = 33;
  if (has_get_syncbox_sync_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->get_syncbox_sync_settings(), target);
  }
  
  // optional uint32 get_sync_history_events_max_count = 34 [default = 0];
  if (has_get_sync_history_events_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->get_sync_history_events_max_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSyncStateInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool only_use_cache = 6 [default = false];
    if (has_only_use_cache()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_device_name = 2 [default = false];
    if (has_get_device_name()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_is_camera_roll_upload_enabled = 7 [default = false];
    if (has_get_is_camera_roll_upload_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_is_camera_roll_global_delete_enabled = 32 [default = true];
    if (has_get_is_camera_roll_global_delete_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_is_network_activity_enabled = 9 [default = false];
    if (has_get_is_network_activity_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_bandwidth_limits = 4 [default = false];
    if (has_get_bandwidth_limits()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool get_background_data = 12;
    if (has_get_background_data()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_auto_sync = 13;
    if (has_get_auto_sync()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_mobile_network_data = 14;
    if (has_get_mobile_network_data()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_camera_roll_upload_dirs = 15;
    if (has_get_camera_roll_upload_dirs()) {
      total_size += 1 + 1;
    }
    
    // optional bool get_camera_roll_download_dirs = 19;
    if (has_get_camera_roll_download_dirs()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_media_metadata_download_path = 16;
    if (has_get_media_metadata_download_path()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool get_media_metadata_upload_path = 17;
    if (has_get_media_metadata_upload_path()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_media_playlist_path = 18;
    if (has_get_media_playlist_path()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_notes_sync_settings = 21;
    if (has_get_notes_sync_settings()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_notes_sync_path = 23;
    if (has_get_notes_sync_path()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_mm_thumb_download_path = 24;
    if (has_get_mm_thumb_download_path()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_mm_thumb_sync_enabled = 26;
    if (has_get_mm_thumb_sync_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool get_clouddoc_sync = 28;
    if (has_get_clouddoc_sync()) {
      total_size += 2 + 1;
    }
    
    // optional .ccd.LookupAbsPathInput lookup_abs_path = 30;
    if (has_lookup_abs_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lookup_abs_path());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .ccd.SyncFeature_t get_sync_history_events_by_feature = 31;
    if (has_get_sync_history_events_by_feature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_sync_history_events_by_feature());
    }
    
    // optional uint32 get_sync_history_events_max_count = 34 [default = 0];
    if (has_get_sync_history_events_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_sync_history_events_max_count());
    }
    
    // optional bool get_syncbox_sync_settings = 33;
    if (has_get_syncbox_sync_settings()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string get_sync_states_for_paths = 5;
  total_size += 1 * this->get_sync_states_for_paths_size();
  for (int i = 0; i < this->get_sync_states_for_paths_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->get_sync_states_for_paths(i));
  }
  
  // repeated fixed64 get_sync_states_for_datasets = 8;
  {
    int data_size = 0;
    data_size = 8 * this->get_sync_states_for_datasets_size();
    total_size += 1 * this->get_sync_states_for_datasets_size() + data_size;
  }
  
  // repeated .ccd.SyncFeature_t get_sync_states_for_features = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_sync_states_for_features_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->get_sync_states_for_features(i));
    }
    total_size += 2 * this->get_sync_states_for_features_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSyncStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSyncStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSyncStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSyncStateInput::MergeFrom(const GetSyncStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_sync_states_for_paths_.MergeFrom(from.get_sync_states_for_paths_);
  get_sync_states_for_datasets_.MergeFrom(from.get_sync_states_for_datasets_);
  get_sync_states_for_features_.MergeFrom(from.get_sync_states_for_features_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_only_use_cache()) {
      set_only_use_cache(from.only_use_cache());
    }
    if (from.has_get_device_name()) {
      set_get_device_name(from.get_device_name());
    }
    if (from.has_get_is_camera_roll_upload_enabled()) {
      set_get_is_camera_roll_upload_enabled(from.get_is_camera_roll_upload_enabled());
    }
    if (from.has_get_is_camera_roll_global_delete_enabled()) {
      set_get_is_camera_roll_global_delete_enabled(from.get_is_camera_roll_global_delete_enabled());
    }
    if (from.has_get_is_network_activity_enabled()) {
      set_get_is_network_activity_enabled(from.get_is_network_activity_enabled());
    }
    if (from.has_get_bandwidth_limits()) {
      set_get_bandwidth_limits(from.get_bandwidth_limits());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_get_background_data()) {
      set_get_background_data(from.get_background_data());
    }
    if (from.has_get_auto_sync()) {
      set_get_auto_sync(from.get_auto_sync());
    }
    if (from.has_get_mobile_network_data()) {
      set_get_mobile_network_data(from.get_mobile_network_data());
    }
    if (from.has_get_camera_roll_upload_dirs()) {
      set_get_camera_roll_upload_dirs(from.get_camera_roll_upload_dirs());
    }
    if (from.has_get_camera_roll_download_dirs()) {
      set_get_camera_roll_download_dirs(from.get_camera_roll_download_dirs());
    }
    if (from.has_get_media_metadata_download_path()) {
      set_get_media_metadata_download_path(from.get_media_metadata_download_path());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_get_media_metadata_upload_path()) {
      set_get_media_metadata_upload_path(from.get_media_metadata_upload_path());
    }
    if (from.has_get_media_playlist_path()) {
      set_get_media_playlist_path(from.get_media_playlist_path());
    }
    if (from.has_get_notes_sync_settings()) {
      set_get_notes_sync_settings(from.get_notes_sync_settings());
    }
    if (from.has_get_notes_sync_path()) {
      set_get_notes_sync_path(from.get_notes_sync_path());
    }
    if (from.has_get_mm_thumb_download_path()) {
      set_get_mm_thumb_download_path(from.get_mm_thumb_download_path());
    }
    if (from.has_get_mm_thumb_sync_enabled()) {
      set_get_mm_thumb_sync_enabled(from.get_mm_thumb_sync_enabled());
    }
    if (from.has_get_clouddoc_sync()) {
      set_get_clouddoc_sync(from.get_clouddoc_sync());
    }
    if (from.has_lookup_abs_path()) {
      mutable_lookup_abs_path()->::ccd::LookupAbsPathInput::MergeFrom(from.lookup_abs_path());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_get_sync_history_events_by_feature()) {
      set_get_sync_history_events_by_feature(from.get_sync_history_events_by_feature());
    }
    if (from.has_get_sync_history_events_max_count()) {
      set_get_sync_history_events_max_count(from.get_sync_history_events_max_count());
    }
    if (from.has_get_syncbox_sync_settings()) {
      set_get_syncbox_sync_settings(from.get_syncbox_sync_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSyncStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSyncStateInput::CopyFrom(const GetSyncStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSyncStateInput::IsInitialized() const {
  
  if (has_lookup_abs_path()) {
    if (!this->lookup_abs_path().IsInitialized()) return false;
  }
  return true;
}

void GetSyncStateInput::Swap(GetSyncStateInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(only_use_cache_, other->only_use_cache_);
    std::swap(get_device_name_, other->get_device_name_);
    std::swap(get_is_camera_roll_upload_enabled_, other->get_is_camera_roll_upload_enabled_);
    std::swap(get_is_camera_roll_global_delete_enabled_, other->get_is_camera_roll_global_delete_enabled_);
    std::swap(get_is_network_activity_enabled_, other->get_is_network_activity_enabled_);
    std::swap(get_bandwidth_limits_, other->get_bandwidth_limits_);
    get_sync_states_for_paths_.Swap(&other->get_sync_states_for_paths_);
    get_sync_states_for_datasets_.Swap(&other->get_sync_states_for_datasets_);
    get_sync_states_for_features_.Swap(&other->get_sync_states_for_features_);
    std::swap(get_background_data_, other->get_background_data_);
    std::swap(get_auto_sync_, other->get_auto_sync_);
    std::swap(get_mobile_network_data_, other->get_mobile_network_data_);
    std::swap(get_camera_roll_upload_dirs_, other->get_camera_roll_upload_dirs_);
    std::swap(get_camera_roll_download_dirs_, other->get_camera_roll_download_dirs_);
    std::swap(get_media_metadata_download_path_, other->get_media_metadata_download_path_);
    std::swap(get_media_metadata_upload_path_, other->get_media_metadata_upload_path_);
    std::swap(get_media_playlist_path_, other->get_media_playlist_path_);
    std::swap(get_notes_sync_settings_, other->get_notes_sync_settings_);
    std::swap(get_notes_sync_path_, other->get_notes_sync_path_);
    std::swap(get_mm_thumb_download_path_, other->get_mm_thumb_download_path_);
    std::swap(get_mm_thumb_sync_enabled_, other->get_mm_thumb_sync_enabled_);
    std::swap(get_clouddoc_sync_, other->get_clouddoc_sync_);
    std::swap(lookup_abs_path_, other->lookup_abs_path_);
    std::swap(get_sync_history_events_by_feature_, other->get_sync_history_events_by_feature_);
    std::swap(get_sync_history_events_max_count_, other->get_sync_history_events_max_count_);
    std::swap(get_syncbox_sync_settings_, other->get_syncbox_sync_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSyncStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSyncStateInput_descriptor_;
  metadata.reflection = GetSyncStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectSyncState::kStateFieldNumber;
const int ObjectSyncState::kDatasetIdFieldNumber;
const int ObjectSyncState::kSyncFeatureFieldNumber;
const int ObjectSyncState::kIsSyncFolderRootFieldNumber;
#endif  // !_MSC_VER

ObjectSyncState::ObjectSyncState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjectSyncState::InitAsDefaultInstance() {
}

ObjectSyncState::ObjectSyncState(const ObjectSyncState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjectSyncState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 1;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  sync_feature_ = 1;
  is_sync_folder_root_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectSyncState::~ObjectSyncState() {
  SharedDtor();
}

void ObjectSyncState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectSyncState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectSyncState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectSyncState_descriptor_;
}

const ObjectSyncState& ObjectSyncState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ObjectSyncState* ObjectSyncState::default_instance_ = NULL;

ObjectSyncState* ObjectSyncState::New() const {
  return new ObjectSyncState;
}

void ObjectSyncState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 1;
    dataset_id_ = GOOGLE_ULONGLONG(0);
    sync_feature_ = 1;
    is_sync_folder_root_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectSyncState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.SyncStateType_t state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncStateType_t_IsValid(value)) {
            set_state(static_cast< ccd::SyncStateType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // optional fixed64 dataset_id = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_sync_folder_root;
        break;
      }
      
      // optional bool is_sync_folder_root = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sync_folder_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sync_folder_root_)));
          set_has_is_sync_folder_root();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sync_feature;
        break;
      }
      
      // optional .ccd.SyncFeature_t sync_feature = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_feature:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            set_sync_feature(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectSyncState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.SyncStateType_t state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // optional fixed64 dataset_id = 2 [default = 0];
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  // optional bool is_sync_folder_root = 3 [default = false];
  if (has_is_sync_folder_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_sync_folder_root(), output);
  }
  
  // optional .ccd.SyncFeature_t sync_feature = 4;
  if (has_sync_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sync_feature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectSyncState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.SyncStateType_t state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // optional fixed64 dataset_id = 2 [default = 0];
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  // optional bool is_sync_folder_root = 3 [default = false];
  if (has_is_sync_folder_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_sync_folder_root(), target);
  }
  
  // optional .ccd.SyncFeature_t sync_feature = 4;
  if (has_sync_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sync_feature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectSyncState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.SyncStateType_t state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional fixed64 dataset_id = 2 [default = 0];
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // optional .ccd.SyncFeature_t sync_feature = 4;
    if (has_sync_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_feature());
    }
    
    // optional bool is_sync_folder_root = 3 [default = false];
    if (has_is_sync_folder_root()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectSyncState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectSyncState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectSyncState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectSyncState::MergeFrom(const ObjectSyncState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_sync_feature()) {
      set_sync_feature(from.sync_feature());
    }
    if (from.has_is_sync_folder_root()) {
      set_is_sync_folder_root(from.is_sync_folder_root());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectSyncState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSyncState::CopyFrom(const ObjectSyncState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSyncState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectSyncState::Swap(ObjectSyncState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(sync_feature_, other->sync_feature_);
    std::swap(is_sync_folder_root_, other->is_sync_folder_root_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectSyncState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectSyncState_descriptor_;
  metadata.reflection = ObjectSyncState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DatasetSyncStateSummary::kStatusFieldNumber;
const int DatasetSyncStateSummary::kPendingFilesDownloadFieldNumber;
const int DatasetSyncStateSummary::kPendingFilesUploadFieldNumber;
const int DatasetSyncStateSummary::kTotalFilesDownloadedFieldNumber;
const int DatasetSyncStateSummary::kTotalFilesUploadedFieldNumber;
#endif  // !_MSC_VER

DatasetSyncStateSummary::DatasetSyncStateSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatasetSyncStateSummary::InitAsDefaultInstance() {
}

DatasetSyncStateSummary::DatasetSyncStateSummary(const DatasetSyncStateSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatasetSyncStateSummary::SharedCtor() {
  _cached_size_ = 0;
  status_ = 3;
  pending_files_download_ = 0u;
  pending_files_upload_ = 0u;
  total_files_downloaded_ = 0u;
  total_files_uploaded_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatasetSyncStateSummary::~DatasetSyncStateSummary() {
  SharedDtor();
}

void DatasetSyncStateSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatasetSyncStateSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetSyncStateSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatasetSyncStateSummary_descriptor_;
}

const DatasetSyncStateSummary& DatasetSyncStateSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DatasetSyncStateSummary* DatasetSyncStateSummary::default_instance_ = NULL;

DatasetSyncStateSummary* DatasetSyncStateSummary::New() const {
  return new DatasetSyncStateSummary;
}

void DatasetSyncStateSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 3;
    pending_files_download_ = 0u;
    pending_files_upload_ = 0u;
    total_files_downloaded_ = 0u;
    total_files_uploaded_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatasetSyncStateSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ccd.DatasetSyncStateType_t status = 1 [default = CCD_SYNC_STATE_OUT_OF_SYNC];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::DatasetSyncStateType_t_IsValid(value)) {
            set_status(static_cast< ccd::DatasetSyncStateType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pending_files_download;
        break;
      }
      
      // optional uint32 pending_files_download = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_files_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_files_download_)));
          set_has_pending_files_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pending_files_upload;
        break;
      }
      
      // optional uint32 pending_files_upload = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_files_upload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_files_upload_)));
          set_has_pending_files_upload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_files_downloaded;
        break;
      }
      
      // optional uint32 total_files_downloaded = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_files_downloaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_downloaded_)));
          set_has_total_files_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_files_uploaded;
        break;
      }
      
      // optional uint32 total_files_uploaded = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_files_uploaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_uploaded_)));
          set_has_total_files_uploaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatasetSyncStateSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ccd.DatasetSyncStateType_t status = 1 [default = CCD_SYNC_STATE_OUT_OF_SYNC];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional uint32 pending_files_download = 2 [default = 0];
  if (has_pending_files_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pending_files_download(), output);
  }
  
  // optional uint32 pending_files_upload = 3 [default = 0];
  if (has_pending_files_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pending_files_upload(), output);
  }
  
  // optional uint32 total_files_downloaded = 4 [default = 0];
  if (has_total_files_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_files_downloaded(), output);
  }
  
  // optional uint32 total_files_uploaded = 5 [default = 0];
  if (has_total_files_uploaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_files_uploaded(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatasetSyncStateSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ccd.DatasetSyncStateType_t status = 1 [default = CCD_SYNC_STATE_OUT_OF_SYNC];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional uint32 pending_files_download = 2 [default = 0];
  if (has_pending_files_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pending_files_download(), target);
  }
  
  // optional uint32 pending_files_upload = 3 [default = 0];
  if (has_pending_files_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pending_files_upload(), target);
  }
  
  // optional uint32 total_files_downloaded = 4 [default = 0];
  if (has_total_files_downloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_files_downloaded(), target);
  }
  
  // optional uint32 total_files_uploaded = 5 [default = 0];
  if (has_total_files_uploaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_files_uploaded(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatasetSyncStateSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ccd.DatasetSyncStateType_t status = 1 [default = CCD_SYNC_STATE_OUT_OF_SYNC];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional uint32 pending_files_download = 2 [default = 0];
    if (has_pending_files_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending_files_download());
    }
    
    // optional uint32 pending_files_upload = 3 [default = 0];
    if (has_pending_files_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending_files_upload());
    }
    
    // optional uint32 total_files_downloaded = 4 [default = 0];
    if (has_total_files_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_files_downloaded());
    }
    
    // optional uint32 total_files_uploaded = 5 [default = 0];
    if (has_total_files_uploaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_files_uploaded());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetSyncStateSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatasetSyncStateSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatasetSyncStateSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatasetSyncStateSummary::MergeFrom(const DatasetSyncStateSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_pending_files_download()) {
      set_pending_files_download(from.pending_files_download());
    }
    if (from.has_pending_files_upload()) {
      set_pending_files_upload(from.pending_files_upload());
    }
    if (from.has_total_files_downloaded()) {
      set_total_files_downloaded(from.total_files_downloaded());
    }
    if (from.has_total_files_uploaded()) {
      set_total_files_uploaded(from.total_files_uploaded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatasetSyncStateSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetSyncStateSummary::CopyFrom(const DatasetSyncStateSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetSyncStateSummary::IsInitialized() const {
  
  return true;
}

void DatasetSyncStateSummary::Swap(DatasetSyncStateSummary* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(pending_files_download_, other->pending_files_download_);
    std::swap(pending_files_upload_, other->pending_files_upload_);
    std::swap(total_files_downloaded_, other->total_files_downloaded_);
    std::swap(total_files_uploaded_, other->total_files_uploaded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatasetSyncStateSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatasetSyncStateSummary_descriptor_;
  metadata.reflection = DatasetSyncStateSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureSyncStateSummary::kStatusFieldNumber;
const int FeatureSyncStateSummary::kErrorFieldNumber;
const int FeatureSyncStateSummary::kPendingFilesFieldNumber;
const int FeatureSyncStateSummary::kFailedFilesFieldNumber;
const int FeatureSyncStateSummary::kUploadsRemainingFieldNumber;
const int FeatureSyncStateSummary::kDownloadsRemainingFieldNumber;
const int FeatureSyncStateSummary::kRemoteScanPendingFieldNumber;
const int FeatureSyncStateSummary::kScanInProgressFieldNumber;
#endif  // !_MSC_VER

FeatureSyncStateSummary::FeatureSyncStateSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureSyncStateSummary::InitAsDefaultInstance() {
}

FeatureSyncStateSummary::FeatureSyncStateSummary(const FeatureSyncStateSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureSyncStateSummary::SharedCtor() {
  _cached_size_ = 0;
  status_ = 3;
  error_ = 0;
  pending_files_ = 0u;
  failed_files_ = 0u;
  uploads_remaining_ = 0u;
  downloads_remaining_ = 0u;
  remote_scan_pending_ = false;
  scan_in_progress_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureSyncStateSummary::~FeatureSyncStateSummary() {
  SharedDtor();
}

void FeatureSyncStateSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureSyncStateSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureSyncStateSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureSyncStateSummary_descriptor_;
}

const FeatureSyncStateSummary& FeatureSyncStateSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

FeatureSyncStateSummary* FeatureSyncStateSummary::default_instance_ = NULL;

FeatureSyncStateSummary* FeatureSyncStateSummary::New() const {
  return new FeatureSyncStateSummary;
}

void FeatureSyncStateSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 3;
    error_ = 0;
    pending_files_ = 0u;
    failed_files_ = 0u;
    uploads_remaining_ = 0u;
    downloads_remaining_ = 0u;
    remote_scan_pending_ = false;
    scan_in_progress_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureSyncStateSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ccd.FeatureSyncStateType_t status = 1 [default = CCD_FEATURE_STATE_OUT_OF_SYNC];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::FeatureSyncStateType_t_IsValid(value)) {
            set_status(static_cast< ccd::FeatureSyncStateType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }
      
      // optional sint32 error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pending_files;
        break;
      }
      
      // optional uint32 pending_files = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pending_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pending_files_)));
          set_has_pending_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_failed_files;
        break;
      }
      
      // optional uint32 failed_files = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &failed_files_)));
          set_has_failed_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uploads_remaining;
        break;
      }
      
      // optional uint32 uploads_remaining = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploads_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uploads_remaining_)));
          set_has_uploads_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_downloads_remaining;
        break;
      }
      
      // optional uint32 downloads_remaining = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downloads_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downloads_remaining_)));
          set_has_downloads_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_remote_scan_pending;
        break;
      }
      
      // optional bool remote_scan_pending = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_scan_pending:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remote_scan_pending_)));
          set_has_remote_scan_pending();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_scan_in_progress;
        break;
      }
      
      // optional bool scan_in_progress = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_in_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scan_in_progress_)));
          set_has_scan_in_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureSyncStateSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ccd.FeatureSyncStateType_t status = 1 [default = CCD_FEATURE_STATE_OUT_OF_SYNC];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional sint32 error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->error(), output);
  }
  
  // optional uint32 pending_files = 3 [default = 0];
  if (has_pending_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pending_files(), output);
  }
  
  // optional uint32 failed_files = 4 [default = 0];
  if (has_failed_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->failed_files(), output);
  }
  
  // optional uint32 uploads_remaining = 5 [default = 0];
  if (has_uploads_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uploads_remaining(), output);
  }
  
  // optional uint32 downloads_remaining = 6 [default = 0];
  if (has_downloads_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->downloads_remaining(), output);
  }
  
  // optional bool remote_scan_pending = 7;
  if (has_remote_scan_pending()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->remote_scan_pending(), output);
  }
  
  // optional bool scan_in_progress = 8;
  if (has_scan_in_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->scan_in_progress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureSyncStateSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ccd.FeatureSyncStateType_t status = 1 [default = CCD_FEATURE_STATE_OUT_OF_SYNC];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional sint32 error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->error(), target);
  }
  
  // optional uint32 pending_files = 3 [default = 0];
  if (has_pending_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pending_files(), target);
  }
  
  // optional uint32 failed_files = 4 [default = 0];
  if (has_failed_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->failed_files(), target);
  }
  
  // optional uint32 uploads_remaining = 5 [default = 0];
  if (has_uploads_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uploads_remaining(), target);
  }
  
  // optional uint32 downloads_remaining = 6 [default = 0];
  if (has_downloads_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->downloads_remaining(), target);
  }
  
  // optional bool remote_scan_pending = 7;
  if (has_remote_scan_pending()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->remote_scan_pending(), target);
  }
  
  // optional bool scan_in_progress = 8;
  if (has_scan_in_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->scan_in_progress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureSyncStateSummary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ccd.FeatureSyncStateType_t status = 1 [default = CCD_FEATURE_STATE_OUT_OF_SYNC];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional sint32 error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->error());
    }
    
    // optional uint32 pending_files = 3 [default = 0];
    if (has_pending_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pending_files());
    }
    
    // optional uint32 failed_files = 4 [default = 0];
    if (has_failed_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->failed_files());
    }
    
    // optional uint32 uploads_remaining = 5 [default = 0];
    if (has_uploads_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uploads_remaining());
    }
    
    // optional uint32 downloads_remaining = 6 [default = 0];
    if (has_downloads_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downloads_remaining());
    }
    
    // optional bool remote_scan_pending = 7;
    if (has_remote_scan_pending()) {
      total_size += 1 + 1;
    }
    
    // optional bool scan_in_progress = 8;
    if (has_scan_in_progress()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureSyncStateSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureSyncStateSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureSyncStateSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureSyncStateSummary::MergeFrom(const FeatureSyncStateSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_pending_files()) {
      set_pending_files(from.pending_files());
    }
    if (from.has_failed_files()) {
      set_failed_files(from.failed_files());
    }
    if (from.has_uploads_remaining()) {
      set_uploads_remaining(from.uploads_remaining());
    }
    if (from.has_downloads_remaining()) {
      set_downloads_remaining(from.downloads_remaining());
    }
    if (from.has_remote_scan_pending()) {
      set_remote_scan_pending(from.remote_scan_pending());
    }
    if (from.has_scan_in_progress()) {
      set_scan_in_progress(from.scan_in_progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureSyncStateSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureSyncStateSummary::CopyFrom(const FeatureSyncStateSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureSyncStateSummary::IsInitialized() const {
  
  return true;
}

void FeatureSyncStateSummary::Swap(FeatureSyncStateSummary* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(error_, other->error_);
    std::swap(pending_files_, other->pending_files_);
    std::swap(failed_files_, other->failed_files_);
    std::swap(uploads_remaining_, other->uploads_remaining_);
    std::swap(downloads_remaining_, other->downloads_remaining_);
    std::swap(remote_scan_pending_, other->remote_scan_pending_);
    std::swap(scan_in_progress_, other->scan_in_progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureSyncStateSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureSyncStateSummary_descriptor_;
  metadata.reflection = FeatureSyncStateSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMetadataThumbMigrateStatus::kMmSrcPathFieldNumber;
const int MediaMetadataThumbMigrateStatus::kMmDestPathFieldNumber;
#endif  // !_MSC_VER

MediaMetadataThumbMigrateStatus::MediaMetadataThumbMigrateStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMetadataThumbMigrateStatus::InitAsDefaultInstance() {
}

MediaMetadataThumbMigrateStatus::MediaMetadataThumbMigrateStatus(const MediaMetadataThumbMigrateStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMetadataThumbMigrateStatus::SharedCtor() {
  _cached_size_ = 0;
  mm_src_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mm_dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMetadataThumbMigrateStatus::~MediaMetadataThumbMigrateStatus() {
  SharedDtor();
}

void MediaMetadataThumbMigrateStatus::SharedDtor() {
  if (mm_src_path_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_src_path_;
  }
  if (mm_dest_path_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_dest_path_;
  }
  if (this != default_instance_) {
  }
}

void MediaMetadataThumbMigrateStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMetadataThumbMigrateStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMetadataThumbMigrateStatus_descriptor_;
}

const MediaMetadataThumbMigrateStatus& MediaMetadataThumbMigrateStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

MediaMetadataThumbMigrateStatus* MediaMetadataThumbMigrateStatus::default_instance_ = NULL;

MediaMetadataThumbMigrateStatus* MediaMetadataThumbMigrateStatus::New() const {
  return new MediaMetadataThumbMigrateStatus;
}

void MediaMetadataThumbMigrateStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mm_src_path()) {
      if (mm_src_path_ != &::google::protobuf::internal::kEmptyString) {
        mm_src_path_->clear();
      }
    }
    if (has_mm_dest_path()) {
      if (mm_dest_path_ != &::google::protobuf::internal::kEmptyString) {
        mm_dest_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMetadataThumbMigrateStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mm_src_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_src_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_src_path().data(), this->mm_src_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mm_dest_path;
        break;
      }
      
      // required string mm_dest_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mm_dest_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_dest_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_dest_path().data(), this->mm_dest_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMetadataThumbMigrateStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mm_src_path = 1;
  if (has_mm_src_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_src_path().data(), this->mm_src_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mm_src_path(), output);
  }
  
  // required string mm_dest_path = 2;
  if (has_mm_dest_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_dest_path().data(), this->mm_dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mm_dest_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMetadataThumbMigrateStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mm_src_path = 1;
  if (has_mm_src_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_src_path().data(), this->mm_src_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mm_src_path(), target);
  }
  
  // required string mm_dest_path = 2;
  if (has_mm_dest_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_dest_path().data(), this->mm_dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mm_dest_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMetadataThumbMigrateStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mm_src_path = 1;
    if (has_mm_src_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_src_path());
    }
    
    // required string mm_dest_path = 2;
    if (has_mm_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_dest_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMetadataThumbMigrateStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMetadataThumbMigrateStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMetadataThumbMigrateStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMetadataThumbMigrateStatus::MergeFrom(const MediaMetadataThumbMigrateStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mm_src_path()) {
      set_mm_src_path(from.mm_src_path());
    }
    if (from.has_mm_dest_path()) {
      set_mm_dest_path(from.mm_dest_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMetadataThumbMigrateStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMetadataThumbMigrateStatus::CopyFrom(const MediaMetadataThumbMigrateStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMetadataThumbMigrateStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MediaMetadataThumbMigrateStatus::Swap(MediaMetadataThumbMigrateStatus* other) {
  if (other != this) {
    std::swap(mm_src_path_, other->mm_src_path_);
    std::swap(mm_dest_path_, other->mm_dest_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMetadataThumbMigrateStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMetadataThumbMigrateStatus_descriptor_;
  metadata.reflection = MediaMetadataThumbMigrateStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncFeatureSettings::kSyncFeatureEnabledFieldNumber;
const int SyncFeatureSettings::kSyncFeaturePathFieldNumber;
const int SyncFeatureSettings::kIsArchiveStorageFieldNumber;
#endif  // !_MSC_VER

SyncFeatureSettings::SyncFeatureSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncFeatureSettings::InitAsDefaultInstance() {
}

SyncFeatureSettings::SyncFeatureSettings(const SyncFeatureSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncFeatureSettings::SharedCtor() {
  _cached_size_ = 0;
  sync_feature_enabled_ = false;
  sync_feature_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_archive_storage_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncFeatureSettings::~SyncFeatureSettings() {
  SharedDtor();
}

void SyncFeatureSettings::SharedDtor() {
  if (sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
    delete sync_feature_path_;
  }
  if (this != default_instance_) {
  }
}

void SyncFeatureSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFeatureSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncFeatureSettings_descriptor_;
}

const SyncFeatureSettings& SyncFeatureSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncFeatureSettings* SyncFeatureSettings::default_instance_ = NULL;

SyncFeatureSettings* SyncFeatureSettings::New() const {
  return new SyncFeatureSettings;
}

void SyncFeatureSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sync_feature_enabled_ = false;
    if (has_sync_feature_path()) {
      if (sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
        sync_feature_path_->clear();
      }
    }
    is_archive_storage_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncFeatureSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool sync_feature_enabled = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_feature_enabled_)));
          set_has_sync_feature_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sync_feature_path;
        break;
      }
      
      // optional string sync_feature_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_feature_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sync_feature_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sync_feature_path().data(), this->sync_feature_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_archive_storage;
        break;
      }
      
      // optional bool is_archive_storage = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_archive_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_archive_storage_)));
          set_has_is_archive_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncFeatureSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool sync_feature_enabled = 1;
  if (has_sync_feature_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->sync_feature_enabled(), output);
  }
  
  // optional string sync_feature_path = 2;
  if (has_sync_feature_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sync_feature_path().data(), this->sync_feature_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sync_feature_path(), output);
  }
  
  // optional bool is_archive_storage = 3 [default = false];
  if (has_is_archive_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_archive_storage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncFeatureSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool sync_feature_enabled = 1;
  if (has_sync_feature_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->sync_feature_enabled(), target);
  }
  
  // optional string sync_feature_path = 2;
  if (has_sync_feature_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sync_feature_path().data(), this->sync_feature_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sync_feature_path(), target);
  }
  
  // optional bool is_archive_storage = 3 [default = false];
  if (has_is_archive_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_archive_storage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncFeatureSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool sync_feature_enabled = 1;
    if (has_sync_feature_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional string sync_feature_path = 2;
    if (has_sync_feature_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sync_feature_path());
    }
    
    // optional bool is_archive_storage = 3 [default = false];
    if (has_is_archive_storage()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFeatureSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncFeatureSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncFeatureSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncFeatureSettings::MergeFrom(const SyncFeatureSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sync_feature_enabled()) {
      set_sync_feature_enabled(from.sync_feature_enabled());
    }
    if (from.has_sync_feature_path()) {
      set_sync_feature_path(from.sync_feature_path());
    }
    if (from.has_is_archive_storage()) {
      set_is_archive_storage(from.is_archive_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncFeatureSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFeatureSettings::CopyFrom(const SyncFeatureSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFeatureSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SyncFeatureSettings::Swap(SyncFeatureSettings* other) {
  if (other != this) {
    std::swap(sync_feature_enabled_, other->sync_feature_enabled_);
    std::swap(sync_feature_path_, other->sync_feature_path_);
    std::swap(is_archive_storage_, other->is_archive_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncFeatureSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncFeatureSettings_descriptor_;
  metadata.reflection = SyncFeatureSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LookupAbsPathOutput::kErrCodeFieldNumber;
const int LookupAbsPathOutput::kAbsolutePathFieldNumber;
const int LookupAbsPathOutput::kLocalModifyTimeFieldNumber;
const int LookupAbsPathOutput::kHashFieldNumber;
#endif  // !_MSC_VER

LookupAbsPathOutput::LookupAbsPathOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LookupAbsPathOutput::InitAsDefaultInstance() {
}

LookupAbsPathOutput::LookupAbsPathOutput(const LookupAbsPathOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LookupAbsPathOutput::SharedCtor() {
  _cached_size_ = 0;
  err_code_ = 0;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_modify_time_ = GOOGLE_ULONGLONG(0);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LookupAbsPathOutput::~LookupAbsPathOutput() {
  SharedDtor();
}

void LookupAbsPathOutput::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void LookupAbsPathOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LookupAbsPathOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LookupAbsPathOutput_descriptor_;
}

const LookupAbsPathOutput& LookupAbsPathOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LookupAbsPathOutput* LookupAbsPathOutput::default_instance_ = NULL;

LookupAbsPathOutput* LookupAbsPathOutput::New() const {
  return new LookupAbsPathOutput;
}

void LookupAbsPathOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_code_ = 0;
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
    local_modify_time_ = GOOGLE_ULONGLONG(0);
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LookupAbsPathOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_code_)));
          set_has_err_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_absolute_path;
        break;
      }
      
      // optional string absolute_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absolute_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_local_modify_time;
        break;
      }
      
      // optional fixed64 local_modify_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_local_modify_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &local_modify_time_)));
          set_has_local_modify_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hash;
        break;
      }
      
      // optional string hash = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LookupAbsPathOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err_code = 1;
  if (has_err_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_code(), output);
  }
  
  // optional string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->absolute_path(), output);
  }
  
  // optional fixed64 local_modify_time = 3;
  if (has_local_modify_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->local_modify_time(), output);
  }
  
  // optional string hash = 4;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LookupAbsPathOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err_code = 1;
  if (has_err_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_code(), target);
  }
  
  // optional string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->absolute_path(), target);
  }
  
  // optional fixed64 local_modify_time = 3;
  if (has_local_modify_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->local_modify_time(), target);
  }
  
  // optional string hash = 4;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LookupAbsPathOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err_code = 1;
    if (has_err_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err_code());
    }
    
    // optional string absolute_path = 2;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
    // optional fixed64 local_modify_time = 3;
    if (has_local_modify_time()) {
      total_size += 1 + 8;
    }
    
    // optional string hash = 4;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LookupAbsPathOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LookupAbsPathOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LookupAbsPathOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LookupAbsPathOutput::MergeFrom(const LookupAbsPathOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err_code()) {
      set_err_code(from.err_code());
    }
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
    if (from.has_local_modify_time()) {
      set_local_modify_time(from.local_modify_time());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LookupAbsPathOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LookupAbsPathOutput::CopyFrom(const LookupAbsPathOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LookupAbsPathOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LookupAbsPathOutput::Swap(LookupAbsPathOutput* other) {
  if (other != this) {
    std::swap(err_code_, other->err_code_);
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(local_modify_time_, other->local_modify_time_);
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LookupAbsPathOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LookupAbsPathOutput_descriptor_;
  metadata.reflection = LookupAbsPathOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSyncStateOutput::kIsDeviceLinkedFieldNumber;
const int GetSyncStateOutput::kIsSyncAgentEnabledFieldNumber;
const int GetSyncStateOutput::kMyDeviceNameFieldNumber;
const int GetSyncStateOutput::kIsCameraRollUploadEnabledFieldNumber;
const int GetSyncStateOutput::kIsCameraRollGlobalDeleteEnabledFieldNumber;
const int GetSyncStateOutput::kIsNetworkActivityEnabledFieldNumber;
const int GetSyncStateOutput::kMaxDownloadRateBytesSecFieldNumber;
const int GetSyncStateOutput::kMaxUploadRateBytesSecFieldNumber;
const int GetSyncStateOutput::kSyncStatesForPathsFieldNumber;
const int GetSyncStateOutput::kDatasetSyncStateSummaryFieldNumber;
const int GetSyncStateOutput::kFeatureSyncStateSummaryFieldNumber;
const int GetSyncStateOutput::kBackgroundDataFieldNumber;
const int GetSyncStateOutput::kAutoSyncFieldNumber;
const int GetSyncStateOutput::kMobileNetworkDataFieldNumber;
const int GetSyncStateOutput::kCameraRollUploadDirsFieldNumber;
const int GetSyncStateOutput::kCameraRollFullResDownloadDirsFieldNumber;
const int GetSyncStateOutput::kCameraRollLowResDownloadDirsFieldNumber;
const int GetSyncStateOutput::kCameraRollThumbDownloadDirsFieldNumber;
const int GetSyncStateOutput::kMediaMetadataDownloadPathFieldNumber;
const int GetSyncStateOutput::kMediaMetadataUploadPathFieldNumber;
const int GetSyncStateOutput::kMediaPlaylistPathFieldNumber;
const int GetSyncStateOutput::kNotesSyncSettingsFieldNumber;
const int GetSyncStateOutput::kNotesSyncPathFieldNumber;
const int GetSyncStateOutput::kMmThumbDownloadPathFieldNumber;
const int GetSyncStateOutput::kMmThumbDownloadMigrateStatusFieldNumber;
const int GetSyncStateOutput::kMmThumbSyncEnabledFieldNumber;
const int GetSyncStateOutput::kClouddocSyncFieldNumber;
const int GetSyncStateOutput::kMmThumbSyncEnabledTypesFieldNumber;
const int GetSyncStateOutput::kLookupAbsPathFieldNumber;
const int GetSyncStateOutput::kSyncHistoryEventsFieldNumber;
const int GetSyncStateOutput::kSyncboxSyncSettingsFieldNumber;
#endif  // !_MSC_VER

GetSyncStateOutput::GetSyncStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSyncStateOutput::InitAsDefaultInstance() {
  notes_sync_settings_ = const_cast< ::ccd::SyncFeatureSettings*>(&::ccd::SyncFeatureSettings::default_instance());
  mm_thumb_download_migrate_status_ = const_cast< ::ccd::MediaMetadataThumbMigrateStatus*>(&::ccd::MediaMetadataThumbMigrateStatus::default_instance());
  lookup_abs_path_ = const_cast< ::ccd::LookupAbsPathOutput*>(&::ccd::LookupAbsPathOutput::default_instance());
}

GetSyncStateOutput::GetSyncStateOutput(const GetSyncStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSyncStateOutput::SharedCtor() {
  _cached_size_ = 0;
  is_device_linked_ = false;
  is_sync_agent_enabled_ = false;
  my_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_camera_roll_upload_enabled_ = false;
  is_camera_roll_global_delete_enabled_ = false;
  is_network_activity_enabled_ = false;
  max_download_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  max_upload_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  background_data_ = false;
  auto_sync_ = false;
  mobile_network_data_ = false;
  media_metadata_download_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  media_metadata_upload_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  media_playlist_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notes_sync_settings_ = NULL;
  notes_sync_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mm_thumb_download_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mm_thumb_download_migrate_status_ = NULL;
  mm_thumb_sync_enabled_ = false;
  clouddoc_sync_ = false;
  lookup_abs_path_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSyncStateOutput::~GetSyncStateOutput() {
  SharedDtor();
}

void GetSyncStateOutput::SharedDtor() {
  if (my_device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete my_device_name_;
  }
  if (media_metadata_download_path_ != &::google::protobuf::internal::kEmptyString) {
    delete media_metadata_download_path_;
  }
  if (media_metadata_upload_path_ != &::google::protobuf::internal::kEmptyString) {
    delete media_metadata_upload_path_;
  }
  if (media_playlist_path_ != &::google::protobuf::internal::kEmptyString) {
    delete media_playlist_path_;
  }
  if (notes_sync_path_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_sync_path_;
  }
  if (mm_thumb_download_path_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_thumb_download_path_;
  }
  if (this != default_instance_) {
    delete notes_sync_settings_;
    delete mm_thumb_download_migrate_status_;
    delete lookup_abs_path_;
  }
}

void GetSyncStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSyncStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSyncStateOutput_descriptor_;
}

const GetSyncStateOutput& GetSyncStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetSyncStateOutput* GetSyncStateOutput::default_instance_ = NULL;

GetSyncStateOutput* GetSyncStateOutput::New() const {
  return new GetSyncStateOutput;
}

void GetSyncStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_device_linked_ = false;
    is_sync_agent_enabled_ = false;
    if (has_my_device_name()) {
      if (my_device_name_ != &::google::protobuf::internal::kEmptyString) {
        my_device_name_->clear();
      }
    }
    is_camera_roll_upload_enabled_ = false;
    is_camera_roll_global_delete_enabled_ = false;
    is_network_activity_enabled_ = false;
    max_download_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
    max_upload_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    background_data_ = false;
    auto_sync_ = false;
    mobile_network_data_ = false;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (has_media_metadata_download_path()) {
      if (media_metadata_download_path_ != &::google::protobuf::internal::kEmptyString) {
        media_metadata_download_path_->clear();
      }
    }
    if (has_media_metadata_upload_path()) {
      if (media_metadata_upload_path_ != &::google::protobuf::internal::kEmptyString) {
        media_metadata_upload_path_->clear();
      }
    }
    if (has_media_playlist_path()) {
      if (media_playlist_path_ != &::google::protobuf::internal::kEmptyString) {
        media_playlist_path_->clear();
      }
    }
    if (has_notes_sync_settings()) {
      if (notes_sync_settings_ != NULL) notes_sync_settings_->::ccd::SyncFeatureSettings::Clear();
    }
    if (has_notes_sync_path()) {
      if (notes_sync_path_ != &::google::protobuf::internal::kEmptyString) {
        notes_sync_path_->clear();
      }
    }
    if (has_mm_thumb_download_path()) {
      if (mm_thumb_download_path_ != &::google::protobuf::internal::kEmptyString) {
        mm_thumb_download_path_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_mm_thumb_download_migrate_status()) {
      if (mm_thumb_download_migrate_status_ != NULL) mm_thumb_download_migrate_status_->::ccd::MediaMetadataThumbMigrateStatus::Clear();
    }
    mm_thumb_sync_enabled_ = false;
    clouddoc_sync_ = false;
    if (has_lookup_abs_path()) {
      if (lookup_abs_path_ != NULL) lookup_abs_path_->::ccd::LookupAbsPathOutput::Clear();
    }
  }
  sync_states_for_paths_.Clear();
  dataset_sync_state_summary_.Clear();
  feature_sync_state_summary_.Clear();
  camera_roll_upload_dirs_.Clear();
  camera_roll_full_res_download_dirs_.Clear();
  camera_roll_low_res_download_dirs_.Clear();
  camera_roll_thumb_download_dirs_.Clear();
  mm_thumb_sync_enabled_types_.Clear();
  sync_history_events_.Clear();
  syncbox_sync_settings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSyncStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_device_linked = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_device_linked_)));
          set_has_is_device_linked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_sync_agent_enabled;
        break;
      }
      
      // required bool is_sync_agent_enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sync_agent_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sync_agent_enabled_)));
          set_has_is_sync_agent_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_my_device_name;
        break;
      }
      
      // optional string my_device_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_my_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->my_device_name().data(), this->my_device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_download_rate_bytes_sec;
        break;
      }
      
      // optional uint64 max_download_rate_bytes_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_download_rate_bytes_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_download_rate_bytes_sec_)));
          set_has_max_download_rate_bytes_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_upload_rate_bytes_sec;
        break;
      }
      
      // optional uint64 max_upload_rate_bytes_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_upload_rate_bytes_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_upload_rate_bytes_sec_)));
          set_has_max_upload_rate_bytes_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sync_states_for_paths;
        break;
      }
      
      // repeated .ccd.ObjectSyncState sync_states_for_paths = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_states_for_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sync_states_for_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sync_states_for_paths;
        if (input->ExpectTag(72)) goto parse_is_camera_roll_upload_enabled;
        break;
      }
      
      // optional bool is_camera_roll_upload_enabled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_camera_roll_upload_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camera_roll_upload_enabled_)));
          set_has_is_camera_roll_upload_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dataset_sync_state_summary;
        break;
      }
      
      // repeated .ccd.DatasetSyncStateSummary dataset_sync_state_summary = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_sync_state_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataset_sync_state_summary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dataset_sync_state_summary;
        if (input->ExpectTag(88)) goto parse_is_network_activity_enabled;
        break;
      }
      
      // optional bool is_network_activity_enabled = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_network_activity_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_network_activity_enabled_)));
          set_has_is_network_activity_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_background_data;
        break;
      }
      
      // optional bool background_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_data_)));
          set_has_background_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_auto_sync;
        break;
      }
      
      // optional bool auto_sync = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_sync_)));
          set_has_auto_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mobile_network_data;
        break;
      }
      
      // optional bool mobile_network_data = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobile_network_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_network_data_)));
          set_has_mobile_network_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_camera_roll_upload_dirs;
        break;
      }
      
      // repeated string camera_roll_upload_dirs = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_roll_upload_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_camera_roll_upload_dirs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->camera_roll_upload_dirs(0).data(), this->camera_roll_upload_dirs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_camera_roll_upload_dirs;
        if (input->ExpectTag(130)) goto parse_media_metadata_download_path;
        break;
      }
      
      // optional string media_metadata_download_path = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_metadata_download_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_metadata_download_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->media_metadata_download_path().data(), this->media_metadata_download_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_media_metadata_upload_path;
        break;
      }
      
      // optional string media_metadata_upload_path = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_metadata_upload_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_metadata_upload_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->media_metadata_upload_path().data(), this->media_metadata_upload_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_media_playlist_path;
        break;
      }
      
      // optional string media_playlist_path = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_media_playlist_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_playlist_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->media_playlist_path().data(), this->media_playlist_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_camera_roll_full_res_download_dirs;
        break;
      }
      
      // repeated .ccd.CameraRollDownloadDirSpec camera_roll_full_res_download_dirs = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_roll_full_res_download_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_roll_full_res_download_dirs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_camera_roll_full_res_download_dirs;
        if (input->ExpectTag(162)) goto parse_camera_roll_low_res_download_dirs;
        break;
      }
      
      // repeated .ccd.CameraRollDownloadDirSpec camera_roll_low_res_download_dirs = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_roll_low_res_download_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_roll_low_res_download_dirs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_camera_roll_low_res_download_dirs;
        if (input->ExpectTag(170)) goto parse_notes_sync_settings;
        break;
      }
      
      // optional .ccd.SyncFeatureSettings notes_sync_settings = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes_sync_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notes_sync_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_feature_sync_state_summary;
        break;
      }
      
      // repeated .ccd.FeatureSyncStateSummary feature_sync_state_summary = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature_sync_state_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_feature_sync_state_summary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_feature_sync_state_summary;
        if (input->ExpectTag(186)) goto parse_notes_sync_path;
        break;
      }
      
      // optional string notes_sync_path = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes_sync_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes_sync_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes_sync_path().data(), this->notes_sync_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_mm_thumb_download_path;
        break;
      }
      
      // optional string mm_thumb_download_path = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mm_thumb_download_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_thumb_download_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_thumb_download_path().data(), this->mm_thumb_download_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_mm_thumb_download_migrate_status;
        break;
      }
      
      // optional .ccd.MediaMetadataThumbMigrateStatus mm_thumb_download_migrate_status = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mm_thumb_download_migrate_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mm_thumb_download_migrate_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_mm_thumb_sync_enabled;
        break;
      }
      
      // optional bool mm_thumb_sync_enabled = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_thumb_sync_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mm_thumb_sync_enabled_)));
          set_has_mm_thumb_sync_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_clouddoc_sync;
        break;
      }
      
      // optional bool clouddoc_sync = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clouddoc_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clouddoc_sync_)));
          set_has_clouddoc_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_mm_thumb_sync_enabled_types;
        break;
      }
      
      // repeated .ccd.SyncFeature_t mm_thumb_sync_enabled_types = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mm_thumb_sync_enabled_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            add_mm_thumb_sync_enabled_types(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &ccd::SyncFeature_t_IsValid,
                 this->mutable_mm_thumb_sync_enabled_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_mm_thumb_sync_enabled_types;
        if (input->ExpectTag(242)) goto parse_lookup_abs_path;
        break;
      }
      
      // optional .ccd.LookupAbsPathOutput lookup_abs_path = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lookup_abs_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lookup_abs_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_camera_roll_thumb_download_dirs;
        break;
      }
      
      // repeated .ccd.CameraRollDownloadDirSpec camera_roll_thumb_download_dirs = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camera_roll_thumb_download_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camera_roll_thumb_download_dirs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_camera_roll_thumb_download_dirs;
        if (input->ExpectTag(256)) goto parse_is_camera_roll_global_delete_enabled;
        break;
      }
      
      // optional bool is_camera_roll_global_delete_enabled = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_camera_roll_global_delete_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_camera_roll_global_delete_enabled_)));
          set_has_is_camera_roll_global_delete_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_syncbox_sync_settings;
        break;
      }
      
      // repeated .ccd.SyncFeatureSettings syncbox_sync_settings = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_syncbox_sync_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_syncbox_sync_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_syncbox_sync_settings;
        if (input->ExpectTag(274)) goto parse_sync_history_events;
        break;
      }
      
      // repeated .ccd.EventSyncHistory sync_history_events = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync_history_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sync_history_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_sync_history_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSyncStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_device_linked = 1;
  if (has_is_device_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_device_linked(), output);
  }
  
  // required bool is_sync_agent_enabled = 2;
  if (has_is_sync_agent_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_sync_agent_enabled(), output);
  }
  
  // optional string my_device_name = 3;
  if (has_my_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->my_device_name().data(), this->my_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->my_device_name(), output);
  }
  
  // optional uint64 max_download_rate_bytes_sec = 4;
  if (has_max_download_rate_bytes_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_download_rate_bytes_sec(), output);
  }
  
  // optional uint64 max_upload_rate_bytes_sec = 5;
  if (has_max_upload_rate_bytes_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_upload_rate_bytes_sec(), output);
  }
  
  // repeated .ccd.ObjectSyncState sync_states_for_paths = 6;
  for (int i = 0; i < this->sync_states_for_paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sync_states_for_paths(i), output);
  }
  
  // optional bool is_camera_roll_upload_enabled = 9;
  if (has_is_camera_roll_upload_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_camera_roll_upload_enabled(), output);
  }
  
  // repeated .ccd.DatasetSyncStateSummary dataset_sync_state_summary = 10;
  for (int i = 0; i < this->dataset_sync_state_summary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->dataset_sync_state_summary(i), output);
  }
  
  // optional bool is_network_activity_enabled = 11;
  if (has_is_network_activity_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_network_activity_enabled(), output);
  }
  
  // optional bool background_data = 12;
  if (has_background_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->background_data(), output);
  }
  
  // optional bool auto_sync = 13;
  if (has_auto_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->auto_sync(), output);
  }
  
  // optional bool mobile_network_data = 14;
  if (has_mobile_network_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->mobile_network_data(), output);
  }
  
  // repeated string camera_roll_upload_dirs = 15;
  for (int i = 0; i < this->camera_roll_upload_dirs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->camera_roll_upload_dirs(i).data(), this->camera_roll_upload_dirs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->camera_roll_upload_dirs(i), output);
  }
  
  // optional string media_metadata_download_path = 16;
  if (has_media_metadata_download_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->media_metadata_download_path().data(), this->media_metadata_download_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->media_metadata_download_path(), output);
  }
  
  // optional string media_metadata_upload_path = 17;
  if (has_media_metadata_upload_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->media_metadata_upload_path().data(), this->media_metadata_upload_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->media_metadata_upload_path(), output);
  }
  
  // optional string media_playlist_path = 18;
  if (has_media_playlist_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->media_playlist_path().data(), this->media_playlist_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->media_playlist_path(), output);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_full_res_download_dirs = 19;
  for (int i = 0; i < this->camera_roll_full_res_download_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->camera_roll_full_res_download_dirs(i), output);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_low_res_download_dirs = 20;
  for (int i = 0; i < this->camera_roll_low_res_download_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->camera_roll_low_res_download_dirs(i), output);
  }
  
  // optional .ccd.SyncFeatureSettings notes_sync_settings = 21;
  if (has_notes_sync_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->notes_sync_settings(), output);
  }
  
  // repeated .ccd.FeatureSyncStateSummary feature_sync_state_summary = 22;
  for (int i = 0; i < this->feature_sync_state_summary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->feature_sync_state_summary(i), output);
  }
  
  // optional string notes_sync_path = 23;
  if (has_notes_sync_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes_sync_path().data(), this->notes_sync_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->notes_sync_path(), output);
  }
  
  // optional string mm_thumb_download_path = 24;
  if (has_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_download_path().data(), this->mm_thumb_download_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->mm_thumb_download_path(), output);
  }
  
  // optional .ccd.MediaMetadataThumbMigrateStatus mm_thumb_download_migrate_status = 25;
  if (has_mm_thumb_download_migrate_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mm_thumb_download_migrate_status(), output);
  }
  
  // optional bool mm_thumb_sync_enabled = 26;
  if (has_mm_thumb_sync_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->mm_thumb_sync_enabled(), output);
  }
  
  // optional bool clouddoc_sync = 28;
  if (has_clouddoc_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->clouddoc_sync(), output);
  }
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_enabled_types = 29;
  for (int i = 0; i < this->mm_thumb_sync_enabled_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->mm_thumb_sync_enabled_types(i), output);
  }
  
  // optional .ccd.LookupAbsPathOutput lookup_abs_path = 30;
  if (has_lookup_abs_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->lookup_abs_path(), output);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_thumb_download_dirs = 31;
  for (int i = 0; i < this->camera_roll_thumb_download_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->camera_roll_thumb_download_dirs(i), output);
  }
  
  // optional bool is_camera_roll_global_delete_enabled = 32;
  if (has_is_camera_roll_global_delete_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_camera_roll_global_delete_enabled(), output);
  }
  
  // repeated .ccd.SyncFeatureSettings syncbox_sync_settings = 33;
  for (int i = 0; i < this->syncbox_sync_settings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->syncbox_sync_settings(i), output);
  }
  
  // repeated .ccd.EventSyncHistory sync_history_events = 34;
  for (int i = 0; i < this->sync_history_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->sync_history_events(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSyncStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_device_linked = 1;
  if (has_is_device_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_device_linked(), target);
  }
  
  // required bool is_sync_agent_enabled = 2;
  if (has_is_sync_agent_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_sync_agent_enabled(), target);
  }
  
  // optional string my_device_name = 3;
  if (has_my_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->my_device_name().data(), this->my_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->my_device_name(), target);
  }
  
  // optional uint64 max_download_rate_bytes_sec = 4;
  if (has_max_download_rate_bytes_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_download_rate_bytes_sec(), target);
  }
  
  // optional uint64 max_upload_rate_bytes_sec = 5;
  if (has_max_upload_rate_bytes_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_upload_rate_bytes_sec(), target);
  }
  
  // repeated .ccd.ObjectSyncState sync_states_for_paths = 6;
  for (int i = 0; i < this->sync_states_for_paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sync_states_for_paths(i), target);
  }
  
  // optional bool is_camera_roll_upload_enabled = 9;
  if (has_is_camera_roll_upload_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_camera_roll_upload_enabled(), target);
  }
  
  // repeated .ccd.DatasetSyncStateSummary dataset_sync_state_summary = 10;
  for (int i = 0; i < this->dataset_sync_state_summary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->dataset_sync_state_summary(i), target);
  }
  
  // optional bool is_network_activity_enabled = 11;
  if (has_is_network_activity_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_network_activity_enabled(), target);
  }
  
  // optional bool background_data = 12;
  if (has_background_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->background_data(), target);
  }
  
  // optional bool auto_sync = 13;
  if (has_auto_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->auto_sync(), target);
  }
  
  // optional bool mobile_network_data = 14;
  if (has_mobile_network_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->mobile_network_data(), target);
  }
  
  // repeated string camera_roll_upload_dirs = 15;
  for (int i = 0; i < this->camera_roll_upload_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camera_roll_upload_dirs(i).data(), this->camera_roll_upload_dirs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->camera_roll_upload_dirs(i), target);
  }
  
  // optional string media_metadata_download_path = 16;
  if (has_media_metadata_download_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->media_metadata_download_path().data(), this->media_metadata_download_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->media_metadata_download_path(), target);
  }
  
  // optional string media_metadata_upload_path = 17;
  if (has_media_metadata_upload_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->media_metadata_upload_path().data(), this->media_metadata_upload_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->media_metadata_upload_path(), target);
  }
  
  // optional string media_playlist_path = 18;
  if (has_media_playlist_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->media_playlist_path().data(), this->media_playlist_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->media_playlist_path(), target);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_full_res_download_dirs = 19;
  for (int i = 0; i < this->camera_roll_full_res_download_dirs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->camera_roll_full_res_download_dirs(i), target);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_low_res_download_dirs = 20;
  for (int i = 0; i < this->camera_roll_low_res_download_dirs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->camera_roll_low_res_download_dirs(i), target);
  }
  
  // optional .ccd.SyncFeatureSettings notes_sync_settings = 21;
  if (has_notes_sync_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->notes_sync_settings(), target);
  }
  
  // repeated .ccd.FeatureSyncStateSummary feature_sync_state_summary = 22;
  for (int i = 0; i < this->feature_sync_state_summary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->feature_sync_state_summary(i), target);
  }
  
  // optional string notes_sync_path = 23;
  if (has_notes_sync_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes_sync_path().data(), this->notes_sync_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->notes_sync_path(), target);
  }
  
  // optional string mm_thumb_download_path = 24;
  if (has_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_thumb_download_path().data(), this->mm_thumb_download_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->mm_thumb_download_path(), target);
  }
  
  // optional .ccd.MediaMetadataThumbMigrateStatus mm_thumb_download_migrate_status = 25;
  if (has_mm_thumb_download_migrate_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mm_thumb_download_migrate_status(), target);
  }
  
  // optional bool mm_thumb_sync_enabled = 26;
  if (has_mm_thumb_sync_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->mm_thumb_sync_enabled(), target);
  }
  
  // optional bool clouddoc_sync = 28;
  if (has_clouddoc_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->clouddoc_sync(), target);
  }
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_enabled_types = 29;
  for (int i = 0; i < this->mm_thumb_sync_enabled_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->mm_thumb_sync_enabled_types(i), target);
  }
  
  // optional .ccd.LookupAbsPathOutput lookup_abs_path = 30;
  if (has_lookup_abs_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->lookup_abs_path(), target);
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_thumb_download_dirs = 31;
  for (int i = 0; i < this->camera_roll_thumb_download_dirs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->camera_roll_thumb_download_dirs(i), target);
  }
  
  // optional bool is_camera_roll_global_delete_enabled = 32;
  if (has_is_camera_roll_global_delete_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_camera_roll_global_delete_enabled(), target);
  }
  
  // repeated .ccd.SyncFeatureSettings syncbox_sync_settings = 33;
  for (int i = 0; i < this->syncbox_sync_settings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->syncbox_sync_settings(i), target);
  }
  
  // repeated .ccd.EventSyncHistory sync_history_events = 34;
  for (int i = 0; i < this->sync_history_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->sync_history_events(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSyncStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_device_linked = 1;
    if (has_is_device_linked()) {
      total_size += 1 + 1;
    }
    
    // required bool is_sync_agent_enabled = 2;
    if (has_is_sync_agent_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional string my_device_name = 3;
    if (has_my_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->my_device_name());
    }
    
    // optional bool is_camera_roll_upload_enabled = 9;
    if (has_is_camera_roll_upload_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_camera_roll_global_delete_enabled = 32;
    if (has_is_camera_roll_global_delete_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_network_activity_enabled = 11;
    if (has_is_network_activity_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 max_download_rate_bytes_sec = 4;
    if (has_max_download_rate_bytes_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_download_rate_bytes_sec());
    }
    
    // optional uint64 max_upload_rate_bytes_sec = 5;
    if (has_max_upload_rate_bytes_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_upload_rate_bytes_sec());
    }
    
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional bool background_data = 12;
    if (has_background_data()) {
      total_size += 1 + 1;
    }
    
    // optional bool auto_sync = 13;
    if (has_auto_sync()) {
      total_size += 1 + 1;
    }
    
    // optional bool mobile_network_data = 14;
    if (has_mobile_network_data()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional string media_metadata_download_path = 16;
    if (has_media_metadata_download_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_metadata_download_path());
    }
    
    // optional string media_metadata_upload_path = 17;
    if (has_media_metadata_upload_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_metadata_upload_path());
    }
    
    // optional string media_playlist_path = 18;
    if (has_media_playlist_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_playlist_path());
    }
    
    // optional .ccd.SyncFeatureSettings notes_sync_settings = 21;
    if (has_notes_sync_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notes_sync_settings());
    }
    
    // optional string notes_sync_path = 23;
    if (has_notes_sync_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes_sync_path());
    }
    
    // optional string mm_thumb_download_path = 24;
    if (has_mm_thumb_download_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_thumb_download_path());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .ccd.MediaMetadataThumbMigrateStatus mm_thumb_download_migrate_status = 25;
    if (has_mm_thumb_download_migrate_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mm_thumb_download_migrate_status());
    }
    
    // optional bool mm_thumb_sync_enabled = 26;
    if (has_mm_thumb_sync_enabled()) {
      total_size += 2 + 1;
    }
    
    // optional bool clouddoc_sync = 28;
    if (has_clouddoc_sync()) {
      total_size += 2 + 1;
    }
    
    // optional .ccd.LookupAbsPathOutput lookup_abs_path = 30;
    if (has_lookup_abs_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lookup_abs_path());
    }
    
  }
  // repeated .ccd.ObjectSyncState sync_states_for_paths = 6;
  total_size += 1 * this->sync_states_for_paths_size();
  for (int i = 0; i < this->sync_states_for_paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sync_states_for_paths(i));
  }
  
  // repeated .ccd.DatasetSyncStateSummary dataset_sync_state_summary = 10;
  total_size += 1 * this->dataset_sync_state_summary_size();
  for (int i = 0; i < this->dataset_sync_state_summary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataset_sync_state_summary(i));
  }
  
  // repeated .ccd.FeatureSyncStateSummary feature_sync_state_summary = 22;
  total_size += 2 * this->feature_sync_state_summary_size();
  for (int i = 0; i < this->feature_sync_state_summary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature_sync_state_summary(i));
  }
  
  // repeated string camera_roll_upload_dirs = 15;
  total_size += 1 * this->camera_roll_upload_dirs_size();
  for (int i = 0; i < this->camera_roll_upload_dirs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->camera_roll_upload_dirs(i));
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_full_res_download_dirs = 19;
  total_size += 2 * this->camera_roll_full_res_download_dirs_size();
  for (int i = 0; i < this->camera_roll_full_res_download_dirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_roll_full_res_download_dirs(i));
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_low_res_download_dirs = 20;
  total_size += 2 * this->camera_roll_low_res_download_dirs_size();
  for (int i = 0; i < this->camera_roll_low_res_download_dirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_roll_low_res_download_dirs(i));
  }
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_thumb_download_dirs = 31;
  total_size += 2 * this->camera_roll_thumb_download_dirs_size();
  for (int i = 0; i < this->camera_roll_thumb_download_dirs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camera_roll_thumb_download_dirs(i));
  }
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_enabled_types = 29;
  {
    int data_size = 0;
    for (int i = 0; i < this->mm_thumb_sync_enabled_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->mm_thumb_sync_enabled_types(i));
    }
    total_size += 2 * this->mm_thumb_sync_enabled_types_size() + data_size;
  }
  
  // repeated .ccd.EventSyncHistory sync_history_events = 34;
  total_size += 2 * this->sync_history_events_size();
  for (int i = 0; i < this->sync_history_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sync_history_events(i));
  }
  
  // repeated .ccd.SyncFeatureSettings syncbox_sync_settings = 33;
  total_size += 2 * this->syncbox_sync_settings_size();
  for (int i = 0; i < this->syncbox_sync_settings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->syncbox_sync_settings(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSyncStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSyncStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSyncStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSyncStateOutput::MergeFrom(const GetSyncStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  sync_states_for_paths_.MergeFrom(from.sync_states_for_paths_);
  dataset_sync_state_summary_.MergeFrom(from.dataset_sync_state_summary_);
  feature_sync_state_summary_.MergeFrom(from.feature_sync_state_summary_);
  camera_roll_upload_dirs_.MergeFrom(from.camera_roll_upload_dirs_);
  camera_roll_full_res_download_dirs_.MergeFrom(from.camera_roll_full_res_download_dirs_);
  camera_roll_low_res_download_dirs_.MergeFrom(from.camera_roll_low_res_download_dirs_);
  camera_roll_thumb_download_dirs_.MergeFrom(from.camera_roll_thumb_download_dirs_);
  mm_thumb_sync_enabled_types_.MergeFrom(from.mm_thumb_sync_enabled_types_);
  sync_history_events_.MergeFrom(from.sync_history_events_);
  syncbox_sync_settings_.MergeFrom(from.syncbox_sync_settings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_device_linked()) {
      set_is_device_linked(from.is_device_linked());
    }
    if (from.has_is_sync_agent_enabled()) {
      set_is_sync_agent_enabled(from.is_sync_agent_enabled());
    }
    if (from.has_my_device_name()) {
      set_my_device_name(from.my_device_name());
    }
    if (from.has_is_camera_roll_upload_enabled()) {
      set_is_camera_roll_upload_enabled(from.is_camera_roll_upload_enabled());
    }
    if (from.has_is_camera_roll_global_delete_enabled()) {
      set_is_camera_roll_global_delete_enabled(from.is_camera_roll_global_delete_enabled());
    }
    if (from.has_is_network_activity_enabled()) {
      set_is_network_activity_enabled(from.is_network_activity_enabled());
    }
    if (from.has_max_download_rate_bytes_sec()) {
      set_max_download_rate_bytes_sec(from.max_download_rate_bytes_sec());
    }
    if (from.has_max_upload_rate_bytes_sec()) {
      set_max_upload_rate_bytes_sec(from.max_upload_rate_bytes_sec());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_background_data()) {
      set_background_data(from.background_data());
    }
    if (from.has_auto_sync()) {
      set_auto_sync(from.auto_sync());
    }
    if (from.has_mobile_network_data()) {
      set_mobile_network_data(from.mobile_network_data());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_media_metadata_download_path()) {
      set_media_metadata_download_path(from.media_metadata_download_path());
    }
    if (from.has_media_metadata_upload_path()) {
      set_media_metadata_upload_path(from.media_metadata_upload_path());
    }
    if (from.has_media_playlist_path()) {
      set_media_playlist_path(from.media_playlist_path());
    }
    if (from.has_notes_sync_settings()) {
      mutable_notes_sync_settings()->::ccd::SyncFeatureSettings::MergeFrom(from.notes_sync_settings());
    }
    if (from.has_notes_sync_path()) {
      set_notes_sync_path(from.notes_sync_path());
    }
    if (from.has_mm_thumb_download_path()) {
      set_mm_thumb_download_path(from.mm_thumb_download_path());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mm_thumb_download_migrate_status()) {
      mutable_mm_thumb_download_migrate_status()->::ccd::MediaMetadataThumbMigrateStatus::MergeFrom(from.mm_thumb_download_migrate_status());
    }
    if (from.has_mm_thumb_sync_enabled()) {
      set_mm_thumb_sync_enabled(from.mm_thumb_sync_enabled());
    }
    if (from.has_clouddoc_sync()) {
      set_clouddoc_sync(from.clouddoc_sync());
    }
    if (from.has_lookup_abs_path()) {
      mutable_lookup_abs_path()->::ccd::LookupAbsPathOutput::MergeFrom(from.lookup_abs_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSyncStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSyncStateOutput::CopyFrom(const GetSyncStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSyncStateOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < sync_states_for_paths_size(); i++) {
    if (!this->sync_states_for_paths(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camera_roll_full_res_download_dirs_size(); i++) {
    if (!this->camera_roll_full_res_download_dirs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camera_roll_low_res_download_dirs_size(); i++) {
    if (!this->camera_roll_low_res_download_dirs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camera_roll_thumb_download_dirs_size(); i++) {
    if (!this->camera_roll_thumb_download_dirs(i).IsInitialized()) return false;
  }
  if (has_notes_sync_settings()) {
    if (!this->notes_sync_settings().IsInitialized()) return false;
  }
  if (has_mm_thumb_download_migrate_status()) {
    if (!this->mm_thumb_download_migrate_status().IsInitialized()) return false;
  }
  if (has_lookup_abs_path()) {
    if (!this->lookup_abs_path().IsInitialized()) return false;
  }
  for (int i = 0; i < sync_history_events_size(); i++) {
    if (!this->sync_history_events(i).IsInitialized()) return false;
  }
  for (int i = 0; i < syncbox_sync_settings_size(); i++) {
    if (!this->syncbox_sync_settings(i).IsInitialized()) return false;
  }
  return true;
}

void GetSyncStateOutput::Swap(GetSyncStateOutput* other) {
  if (other != this) {
    std::swap(is_device_linked_, other->is_device_linked_);
    std::swap(is_sync_agent_enabled_, other->is_sync_agent_enabled_);
    std::swap(my_device_name_, other->my_device_name_);
    std::swap(is_camera_roll_upload_enabled_, other->is_camera_roll_upload_enabled_);
    std::swap(is_camera_roll_global_delete_enabled_, other->is_camera_roll_global_delete_enabled_);
    std::swap(is_network_activity_enabled_, other->is_network_activity_enabled_);
    std::swap(max_download_rate_bytes_sec_, other->max_download_rate_bytes_sec_);
    std::swap(max_upload_rate_bytes_sec_, other->max_upload_rate_bytes_sec_);
    sync_states_for_paths_.Swap(&other->sync_states_for_paths_);
    dataset_sync_state_summary_.Swap(&other->dataset_sync_state_summary_);
    feature_sync_state_summary_.Swap(&other->feature_sync_state_summary_);
    std::swap(background_data_, other->background_data_);
    std::swap(auto_sync_, other->auto_sync_);
    std::swap(mobile_network_data_, other->mobile_network_data_);
    camera_roll_upload_dirs_.Swap(&other->camera_roll_upload_dirs_);
    camera_roll_full_res_download_dirs_.Swap(&other->camera_roll_full_res_download_dirs_);
    camera_roll_low_res_download_dirs_.Swap(&other->camera_roll_low_res_download_dirs_);
    camera_roll_thumb_download_dirs_.Swap(&other->camera_roll_thumb_download_dirs_);
    std::swap(media_metadata_download_path_, other->media_metadata_download_path_);
    std::swap(media_metadata_upload_path_, other->media_metadata_upload_path_);
    std::swap(media_playlist_path_, other->media_playlist_path_);
    std::swap(notes_sync_settings_, other->notes_sync_settings_);
    std::swap(notes_sync_path_, other->notes_sync_path_);
    std::swap(mm_thumb_download_path_, other->mm_thumb_download_path_);
    std::swap(mm_thumb_download_migrate_status_, other->mm_thumb_download_migrate_status_);
    std::swap(mm_thumb_sync_enabled_, other->mm_thumb_sync_enabled_);
    std::swap(clouddoc_sync_, other->clouddoc_sync_);
    mm_thumb_sync_enabled_types_.Swap(&other->mm_thumb_sync_enabled_types_);
    std::swap(lookup_abs_path_, other->lookup_abs_path_);
    sync_history_events_.Swap(&other->sync_history_events_);
    syncbox_sync_settings_.Swap(&other->syncbox_sync_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSyncStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSyncStateOutput_descriptor_;
  metadata.reflection = GetSyncStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSyncStateNotificationsInput::kMaxCountFieldNumber;
#endif  // !_MSC_VER

GetSyncStateNotificationsInput::GetSyncStateNotificationsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSyncStateNotificationsInput::InitAsDefaultInstance() {
}

GetSyncStateNotificationsInput::GetSyncStateNotificationsInput(const GetSyncStateNotificationsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSyncStateNotificationsInput::SharedCtor() {
  _cached_size_ = 0;
  max_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSyncStateNotificationsInput::~GetSyncStateNotificationsInput() {
  SharedDtor();
}

void GetSyncStateNotificationsInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSyncStateNotificationsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSyncStateNotificationsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSyncStateNotificationsInput_descriptor_;
}

const GetSyncStateNotificationsInput& GetSyncStateNotificationsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetSyncStateNotificationsInput* GetSyncStateNotificationsInput::default_instance_ = NULL;

GetSyncStateNotificationsInput* GetSyncStateNotificationsInput::New() const {
  return new GetSyncStateNotificationsInput;
}

void GetSyncStateNotificationsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSyncStateNotificationsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSyncStateNotificationsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_count = 1;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSyncStateNotificationsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_count = 1;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSyncStateNotificationsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_count = 1;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSyncStateNotificationsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSyncStateNotificationsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSyncStateNotificationsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSyncStateNotificationsInput::MergeFrom(const GetSyncStateNotificationsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSyncStateNotificationsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSyncStateNotificationsInput::CopyFrom(const GetSyncStateNotificationsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSyncStateNotificationsInput::IsInitialized() const {
  
  return true;
}

void GetSyncStateNotificationsInput::Swap(GetSyncStateNotificationsInput* other) {
  if (other != this) {
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSyncStateNotificationsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSyncStateNotificationsInput_descriptor_;
  metadata.reflection = GetSyncStateNotificationsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncEventSyncComplete::kNumDownloadedFieldNumber;
const int SyncEventSyncComplete::kNumUploadedFieldNumber;
#endif  // !_MSC_VER

SyncEventSyncComplete::SyncEventSyncComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncEventSyncComplete::InitAsDefaultInstance() {
}

SyncEventSyncComplete::SyncEventSyncComplete(const SyncEventSyncComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEventSyncComplete::SharedCtor() {
  _cached_size_ = 0;
  num_downloaded_ = 0u;
  num_uploaded_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEventSyncComplete::~SyncEventSyncComplete() {
  SharedDtor();
}

void SyncEventSyncComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncEventSyncComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncEventSyncComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventSyncComplete_descriptor_;
}

const SyncEventSyncComplete& SyncEventSyncComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncEventSyncComplete* SyncEventSyncComplete::default_instance_ = NULL;

SyncEventSyncComplete* SyncEventSyncComplete::New() const {
  return new SyncEventSyncComplete;
}

void SyncEventSyncComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_downloaded_ = 0u;
    num_uploaded_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEventSyncComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num_downloaded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_downloaded_)));
          set_has_num_downloaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_uploaded;
        break;
      }
      
      // required uint32 num_uploaded = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_uploaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_uploaded_)));
          set_has_num_uploaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEventSyncComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num_downloaded = 1;
  if (has_num_downloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_downloaded(), output);
  }
  
  // required uint32 num_uploaded = 2;
  if (has_num_uploaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_uploaded(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncEventSyncComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num_downloaded = 1;
  if (has_num_downloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_downloaded(), target);
  }
  
  // required uint32 num_uploaded = 2;
  if (has_num_uploaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_uploaded(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncEventSyncComplete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num_downloaded = 1;
    if (has_num_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_downloaded());
    }
    
    // required uint32 num_uploaded = 2;
    if (has_num_uploaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_uploaded());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEventSyncComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncEventSyncComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncEventSyncComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncEventSyncComplete::MergeFrom(const SyncEventSyncComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_downloaded()) {
      set_num_downloaded(from.num_downloaded());
    }
    if (from.has_num_uploaded()) {
      set_num_uploaded(from.num_uploaded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEventSyncComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncEventSyncComplete::CopyFrom(const SyncEventSyncComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEventSyncComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SyncEventSyncComplete::Swap(SyncEventSyncComplete* other) {
  if (other != this) {
    std::swap(num_downloaded_, other->num_downloaded_);
    std::swap(num_uploaded_, other->num_uploaded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncEventSyncComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncEventSyncComplete_descriptor_;
  metadata.reflection = SyncEventSyncComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncEventFileAdded::kDatasetIdFieldNumber;
const int SyncEventFileAdded::kFullPathFieldNumber;
#endif  // !_MSC_VER

SyncEventFileAdded::SyncEventFileAdded()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncEventFileAdded::InitAsDefaultInstance() {
}

SyncEventFileAdded::SyncEventFileAdded(const SyncEventFileAdded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEventFileAdded::SharedCtor() {
  _cached_size_ = 0;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEventFileAdded::~SyncEventFileAdded() {
  SharedDtor();
}

void SyncEventFileAdded::SharedDtor() {
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    delete full_path_;
  }
  if (this != default_instance_) {
  }
}

void SyncEventFileAdded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncEventFileAdded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventFileAdded_descriptor_;
}

const SyncEventFileAdded& SyncEventFileAdded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncEventFileAdded* SyncEventFileAdded::default_instance_ = NULL;

SyncEventFileAdded* SyncEventFileAdded::New() const {
  return new SyncEventFileAdded;
}

void SyncEventFileAdded::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataset_id_ = GOOGLE_ULONGLONG(0);
    if (has_full_path()) {
      if (full_path_ != &::google::protobuf::internal::kEmptyString) {
        full_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEventFileAdded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_full_path;
        break;
      }
      
      // required string full_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEventFileAdded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dataset_id(), output);
  }
  
  // required string full_path = 2;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncEventFileAdded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dataset_id(), target);
  }
  
  // required string full_path = 2;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncEventFileAdded::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dataset_id = 1;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required string full_path = 2;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEventFileAdded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncEventFileAdded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncEventFileAdded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncEventFileAdded::MergeFrom(const SyncEventFileAdded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_full_path()) {
      set_full_path(from.full_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEventFileAdded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncEventFileAdded::CopyFrom(const SyncEventFileAdded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEventFileAdded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SyncEventFileAdded::Swap(SyncEventFileAdded* other) {
  if (other != this) {
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(full_path_, other->full_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncEventFileAdded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncEventFileAdded_descriptor_;
  metadata.reflection = SyncEventFileAdded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncEventFileRemoved::kDatasetIdFieldNumber;
const int SyncEventFileRemoved::kFullPathFieldNumber;
#endif  // !_MSC_VER

SyncEventFileRemoved::SyncEventFileRemoved()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncEventFileRemoved::InitAsDefaultInstance() {
}

SyncEventFileRemoved::SyncEventFileRemoved(const SyncEventFileRemoved& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEventFileRemoved::SharedCtor() {
  _cached_size_ = 0;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEventFileRemoved::~SyncEventFileRemoved() {
  SharedDtor();
}

void SyncEventFileRemoved::SharedDtor() {
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    delete full_path_;
  }
  if (this != default_instance_) {
  }
}

void SyncEventFileRemoved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncEventFileRemoved::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventFileRemoved_descriptor_;
}

const SyncEventFileRemoved& SyncEventFileRemoved::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncEventFileRemoved* SyncEventFileRemoved::default_instance_ = NULL;

SyncEventFileRemoved* SyncEventFileRemoved::New() const {
  return new SyncEventFileRemoved;
}

void SyncEventFileRemoved::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dataset_id_ = GOOGLE_ULONGLONG(0);
    if (has_full_path()) {
      if (full_path_ != &::google::protobuf::internal::kEmptyString) {
        full_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEventFileRemoved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 dataset_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_full_path;
        break;
      }
      
      // required string full_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEventFileRemoved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->dataset_id(), output);
  }
  
  // required string full_path = 2;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->full_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncEventFileRemoved::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 dataset_id = 1;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->dataset_id(), target);
  }
  
  // required string full_path = 2;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->full_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncEventFileRemoved::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 dataset_id = 1;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required string full_path = 2;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEventFileRemoved::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncEventFileRemoved* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncEventFileRemoved*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncEventFileRemoved::MergeFrom(const SyncEventFileRemoved& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_full_path()) {
      set_full_path(from.full_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEventFileRemoved::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncEventFileRemoved::CopyFrom(const SyncEventFileRemoved& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEventFileRemoved::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SyncEventFileRemoved::Swap(SyncEventFileRemoved* other) {
  if (other != this) {
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(full_path_, other->full_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncEventFileRemoved::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncEventFileRemoved_descriptor_;
  metadata.reflection = SyncEventFileRemoved_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncEventError::kErrorTypeFieldNumber;
const int SyncEventError::kDatasetIdFieldNumber;
const int SyncEventError::kPathFieldNumber;
const int SyncEventError::kCountFieldNumber;
const int SyncEventError::kNameFieldNumber;
#endif  // !_MSC_VER

SyncEventError::SyncEventError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncEventError::InitAsDefaultInstance() {
}

SyncEventError::SyncEventError(const SyncEventError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEventError::SharedCtor() {
  _cached_size_ = 0;
  error_type_ = 1;
  dataset_id_ = GOOGLE_ULONGLONG(0);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEventError::~SyncEventError() {
  SharedDtor();
}

void SyncEventError::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SyncEventError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncEventError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventError_descriptor_;
}

const SyncEventError& SyncEventError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncEventError* SyncEventError::default_instance_ = NULL;

SyncEventError* SyncEventError::New() const {
  return new SyncEventError;
}

void SyncEventError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_type_ = 1;
    dataset_id_ = GOOGLE_ULONGLONG(0);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    count_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEventError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.SyncEventErrorType_t error_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncEventErrorType_t_IsValid(value)) {
            set_error_type(static_cast< ccd::SyncEventErrorType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dataset_id;
        break;
      }
      
      // optional fixed64 dataset_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }
      
      // optional string path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }
      
      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEventError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.SyncEventErrorType_t error_type = 1;
  if (has_error_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }
  
  // optional fixed64 dataset_id = 3;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->dataset_id(), output);
  }
  
  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path(), output);
  }
  
  // optional uint32 count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncEventError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.SyncEventErrorType_t error_type = 1;
  if (has_error_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_type(), target);
  }
  
  // optional fixed64 dataset_id = 3;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->dataset_id(), target);
  }
  
  // optional string path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path(), target);
  }
  
  // optional uint32 count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }
  
  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncEventError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.SyncEventErrorType_t error_type = 1;
    if (has_error_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
    }
    
    // optional fixed64 dataset_id = 3;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // optional string path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional uint32 count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEventError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncEventError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncEventError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncEventError::MergeFrom(const SyncEventError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_type()) {
      set_error_type(from.error_type());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEventError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncEventError::CopyFrom(const SyncEventError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEventError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SyncEventError::Swap(SyncEventError* other) {
  if (other != this) {
    std::swap(error_type_, other->error_type_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(path_, other->path_);
    std::swap(count_, other->count_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncEventError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncEventError_descriptor_;
  metadata.reflection = SyncEventError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncEventFileStatus::kFullPathFieldNumber;
const int SyncEventFileStatus::kDatasetIdFieldNumber;
const int SyncEventFileStatus::kChangeTypeFieldNumber;
const int SyncEventFileStatus::kIsStartingFieldNumber;
const int SyncEventFileStatus::kIsFinishedFieldNumber;
const int SyncEventFileStatus::kErrorFieldNumber;
#endif  // !_MSC_VER

SyncEventFileStatus::SyncEventFileStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncEventFileStatus::InitAsDefaultInstance() {
}

SyncEventFileStatus::SyncEventFileStatus(const SyncEventFileStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncEventFileStatus::SharedCtor() {
  _cached_size_ = 0;
  full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  change_type_ = 1;
  is_starting_ = false;
  is_finished_ = false;
  error_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncEventFileStatus::~SyncEventFileStatus() {
  SharedDtor();
}

void SyncEventFileStatus::SharedDtor() {
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    delete full_path_;
  }
  if (this != default_instance_) {
  }
}

void SyncEventFileStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncEventFileStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncEventFileStatus_descriptor_;
}

const SyncEventFileStatus& SyncEventFileStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncEventFileStatus* SyncEventFileStatus::default_instance_ = NULL;

SyncEventFileStatus* SyncEventFileStatus::New() const {
  return new SyncEventFileStatus;
}

void SyncEventFileStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_full_path()) {
      if (full_path_ != &::google::protobuf::internal::kEmptyString) {
        full_path_->clear();
      }
    }
    dataset_id_ = GOOGLE_ULONGLONG(0);
    change_type_ = 1;
    is_starting_ = false;
    is_finished_ = false;
    error_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncEventFileStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string full_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_path().data(), this->full_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change_type;
        break;
      }
      
      // required .ccd.SyncFileChangeType_t change_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFileChangeType_t_IsValid(value)) {
            set_change_type(static_cast< ccd::SyncFileChangeType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_starting;
        break;
      }
      
      // optional bool is_starting = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_starting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_starting_)));
          set_has_is_starting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_finished;
        break;
      }
      
      // optional bool is_finished = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_error;
        break;
      }
      
      // optional .ccd.SyncEventErrorType_t error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncEventErrorType_t_IsValid(value)) {
            set_error(static_cast< ccd::SyncEventErrorType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncEventFileStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string full_path = 1;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->full_path(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  // required .ccd.SyncFileChangeType_t change_type = 3;
  if (has_change_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_type(), output);
  }
  
  // optional bool is_starting = 4 [default = false];
  if (has_is_starting()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_starting(), output);
  }
  
  // optional bool is_finished = 5 [default = false];
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_finished(), output);
  }
  
  // optional .ccd.SyncEventErrorType_t error = 6;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncEventFileStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string full_path = 1;
  if (has_full_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_path().data(), this->full_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_path(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  // required .ccd.SyncFileChangeType_t change_type = 3;
  if (has_change_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change_type(), target);
  }
  
  // optional bool is_starting = 4 [default = false];
  if (has_is_starting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_starting(), target);
  }
  
  // optional bool is_finished = 5 [default = false];
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_finished(), target);
  }
  
  // optional .ccd.SyncEventErrorType_t error = 6;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncEventFileStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string full_path = 1;
    if (has_full_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_path());
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.SyncFileChangeType_t change_type = 3;
    if (has_change_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
    }
    
    // optional bool is_starting = 4 [default = false];
    if (has_is_starting()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_finished = 5 [default = false];
    if (has_is_finished()) {
      total_size += 1 + 1;
    }
    
    // optional .ccd.SyncEventErrorType_t error = 6;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncEventFileStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncEventFileStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncEventFileStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncEventFileStatus::MergeFrom(const SyncEventFileStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_full_path()) {
      set_full_path(from.full_path());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_change_type()) {
      set_change_type(from.change_type());
    }
    if (from.has_is_starting()) {
      set_is_starting(from.is_starting());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncEventFileStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncEventFileStatus::CopyFrom(const SyncEventFileStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncEventFileStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SyncEventFileStatus::Swap(SyncEventFileStatus* other) {
  if (other != this) {
    std::swap(full_path_, other->full_path_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(change_type_, other->change_type_);
    std::swap(is_starting_, other->is_starting_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncEventFileStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncEventFileStatus_descriptor_;
  metadata.reflection = SyncEventFileStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncStateNotification::kSyncCompleteFieldNumber;
const int SyncStateNotification::kFileAddedFieldNumber;
const int SyncStateNotification::kFileRemovedFieldNumber;
const int SyncStateNotification::kErrorFieldNumber;
const int SyncStateNotification::kFileStatusFieldNumber;
#endif  // !_MSC_VER

SyncStateNotification::SyncStateNotification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncStateNotification::InitAsDefaultInstance() {
  sync_complete_ = const_cast< ::ccd::SyncEventSyncComplete*>(&::ccd::SyncEventSyncComplete::default_instance());
  file_added_ = const_cast< ::ccd::SyncEventFileAdded*>(&::ccd::SyncEventFileAdded::default_instance());
  file_removed_ = const_cast< ::ccd::SyncEventFileRemoved*>(&::ccd::SyncEventFileRemoved::default_instance());
  error_ = const_cast< ::ccd::SyncEventError*>(&::ccd::SyncEventError::default_instance());
  file_status_ = const_cast< ::ccd::SyncEventFileStatus*>(&::ccd::SyncEventFileStatus::default_instance());
}

SyncStateNotification::SyncStateNotification(const SyncStateNotification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncStateNotification::SharedCtor() {
  _cached_size_ = 0;
  sync_complete_ = NULL;
  file_added_ = NULL;
  file_removed_ = NULL;
  error_ = NULL;
  file_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncStateNotification::~SyncStateNotification() {
  SharedDtor();
}

void SyncStateNotification::SharedDtor() {
  if (this != default_instance_) {
    delete sync_complete_;
    delete file_added_;
    delete file_removed_;
    delete error_;
    delete file_status_;
  }
}

void SyncStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncStateNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncStateNotification_descriptor_;
}

const SyncStateNotification& SyncStateNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncStateNotification* SyncStateNotification::default_instance_ = NULL;

SyncStateNotification* SyncStateNotification::New() const {
  return new SyncStateNotification;
}

void SyncStateNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sync_complete()) {
      if (sync_complete_ != NULL) sync_complete_->::ccd::SyncEventSyncComplete::Clear();
    }
    if (has_file_added()) {
      if (file_added_ != NULL) file_added_->::ccd::SyncEventFileAdded::Clear();
    }
    if (has_file_removed()) {
      if (file_removed_ != NULL) file_removed_->::ccd::SyncEventFileRemoved::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::ccd::SyncEventError::Clear();
    }
    if (has_file_status()) {
      if (file_status_ != NULL) file_status_->::ccd::SyncEventFileStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ccd.SyncEventSyncComplete sync_complete = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync_complete()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_file_added;
        break;
      }
      
      // optional .ccd.SyncEventFileAdded file_added = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_added:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_added()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_removed;
        break;
      }
      
      // optional .ccd.SyncEventFileRemoved file_removed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_removed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_removed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }
      
      // optional .ccd.SyncEventError error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_status;
        break;
      }
      
      // optional .ccd.SyncEventFileStatus file_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ccd.SyncEventSyncComplete sync_complete = 2;
  if (has_sync_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sync_complete(), output);
  }
  
  // optional .ccd.SyncEventFileAdded file_added = 3;
  if (has_file_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->file_added(), output);
  }
  
  // optional .ccd.SyncEventFileRemoved file_removed = 4;
  if (has_file_removed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->file_removed(), output);
  }
  
  // optional .ccd.SyncEventError error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }
  
  // optional .ccd.SyncEventFileStatus file_status = 6;
  if (has_file_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->file_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncStateNotification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ccd.SyncEventSyncComplete sync_complete = 2;
  if (has_sync_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sync_complete(), target);
  }
  
  // optional .ccd.SyncEventFileAdded file_added = 3;
  if (has_file_added()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->file_added(), target);
  }
  
  // optional .ccd.SyncEventFileRemoved file_removed = 4;
  if (has_file_removed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->file_removed(), target);
  }
  
  // optional .ccd.SyncEventError error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }
  
  // optional .ccd.SyncEventFileStatus file_status = 6;
  if (has_file_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->file_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncStateNotification::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ccd.SyncEventSyncComplete sync_complete = 2;
    if (has_sync_complete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync_complete());
    }
    
    // optional .ccd.SyncEventFileAdded file_added = 3;
    if (has_file_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_added());
    }
    
    // optional .ccd.SyncEventFileRemoved file_removed = 4;
    if (has_file_removed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_removed());
    }
    
    // optional .ccd.SyncEventError error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }
    
    // optional .ccd.SyncEventFileStatus file_status = 6;
    if (has_file_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncStateNotification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncStateNotification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncStateNotification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncStateNotification::MergeFrom(const SyncStateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sync_complete()) {
      mutable_sync_complete()->::ccd::SyncEventSyncComplete::MergeFrom(from.sync_complete());
    }
    if (from.has_file_added()) {
      mutable_file_added()->::ccd::SyncEventFileAdded::MergeFrom(from.file_added());
    }
    if (from.has_file_removed()) {
      mutable_file_removed()->::ccd::SyncEventFileRemoved::MergeFrom(from.file_removed());
    }
    if (from.has_error()) {
      mutable_error()->::ccd::SyncEventError::MergeFrom(from.error());
    }
    if (from.has_file_status()) {
      mutable_file_status()->::ccd::SyncEventFileStatus::MergeFrom(from.file_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncStateNotification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncStateNotification::CopyFrom(const SyncStateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncStateNotification::IsInitialized() const {
  
  if (has_sync_complete()) {
    if (!this->sync_complete().IsInitialized()) return false;
  }
  if (has_file_added()) {
    if (!this->file_added().IsInitialized()) return false;
  }
  if (has_file_removed()) {
    if (!this->file_removed().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_file_status()) {
    if (!this->file_status().IsInitialized()) return false;
  }
  return true;
}

void SyncStateNotification::Swap(SyncStateNotification* other) {
  if (other != this) {
    std::swap(sync_complete_, other->sync_complete_);
    std::swap(file_added_, other->file_added_);
    std::swap(file_removed_, other->file_removed_);
    std::swap(error_, other->error_);
    std::swap(file_status_, other->file_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncStateNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncStateNotification_descriptor_;
  metadata.reflection = SyncStateNotification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSyncStateNotificationsOutput::kNotificationsFieldNumber;
#endif  // !_MSC_VER

GetSyncStateNotificationsOutput::GetSyncStateNotificationsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSyncStateNotificationsOutput::InitAsDefaultInstance() {
}

GetSyncStateNotificationsOutput::GetSyncStateNotificationsOutput(const GetSyncStateNotificationsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSyncStateNotificationsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSyncStateNotificationsOutput::~GetSyncStateNotificationsOutput() {
  SharedDtor();
}

void GetSyncStateNotificationsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSyncStateNotificationsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSyncStateNotificationsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSyncStateNotificationsOutput_descriptor_;
}

const GetSyncStateNotificationsOutput& GetSyncStateNotificationsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetSyncStateNotificationsOutput* GetSyncStateNotificationsOutput::default_instance_ = NULL;

GetSyncStateNotificationsOutput* GetSyncStateNotificationsOutput::New() const {
  return new GetSyncStateNotificationsOutput;
}

void GetSyncStateNotificationsOutput::Clear() {
  notifications_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSyncStateNotificationsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.SyncStateNotification notifications = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifications:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notifications()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notifications;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSyncStateNotificationsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.SyncStateNotification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->notifications(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSyncStateNotificationsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.SyncStateNotification notifications = 1;
  for (int i = 0; i < this->notifications_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->notifications(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSyncStateNotificationsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.SyncStateNotification notifications = 1;
  total_size += 1 * this->notifications_size();
  for (int i = 0; i < this->notifications_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notifications(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSyncStateNotificationsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSyncStateNotificationsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSyncStateNotificationsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSyncStateNotificationsOutput::MergeFrom(const GetSyncStateNotificationsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifications_.MergeFrom(from.notifications_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSyncStateNotificationsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSyncStateNotificationsOutput::CopyFrom(const GetSyncStateNotificationsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSyncStateNotificationsOutput::IsInitialized() const {
  
  for (int i = 0; i < notifications_size(); i++) {
    if (!this->notifications(i).IsInitialized()) return false;
  }
  return true;
}

void GetSyncStateNotificationsOutput::Swap(GetSyncStateNotificationsOutput* other) {
  if (other != this) {
    notifications_.Swap(&other->notifications_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSyncStateNotificationsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSyncStateNotificationsOutput_descriptor_;
  metadata.reflection = GetSyncStateNotificationsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkDeviceInput::kUserIdFieldNumber;
const int LinkDeviceInput::kDeviceNameFieldNumber;
const int LinkDeviceInput::kIsAcerDeviceFieldNumber;
const int LinkDeviceInput::kDeviceHasCameraFieldNumber;
const int LinkDeviceInput::kDeviceClassFieldNumber;
const int LinkDeviceInput::kOsVersionFieldNumber;
#endif  // !_MSC_VER

LinkDeviceInput::LinkDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkDeviceInput::InitAsDefaultInstance() {
}

LinkDeviceInput::LinkDeviceInput(const LinkDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_acer_device_ = false;
  device_has_camera_ = false;
  device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkDeviceInput::~LinkDeviceInput() {
  SharedDtor();
}

void LinkDeviceInput::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    delete device_class_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (this != default_instance_) {
  }
}

void LinkDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkDeviceInput_descriptor_;
}

const LinkDeviceInput& LinkDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LinkDeviceInput* LinkDeviceInput::default_instance_ = NULL;

LinkDeviceInput* LinkDeviceInput::New() const {
  return new LinkDeviceInput;
}

void LinkDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    is_acer_device_ = false;
    device_has_camera_ = false;
    if (has_device_class()) {
      if (device_class_ != &::google::protobuf::internal::kEmptyString) {
        device_class_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_name;
        break;
      }
      
      // optional string device_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_acer_device;
        break;
      }
      
      // optional bool is_acer_device = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_acer_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_acer_device_)));
          set_has_is_acer_device();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_device_has_camera;
        break;
      }
      
      // optional bool device_has_camera = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_has_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &device_has_camera_)));
          set_has_device_has_camera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_class;
        break;
      }
      
      // optional string device_class = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_class().data(), this->device_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_os_version;
        break;
      }
      
      // optional string os_version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_name(), output);
  }
  
  // optional bool is_acer_device = 3 [default = false];
  if (has_is_acer_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_acer_device(), output);
  }
  
  // optional bool device_has_camera = 4 [default = false];
  if (has_device_has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->device_has_camera(), output);
  }
  
  // optional string device_class = 5;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_class(), output);
  }
  
  // optional string os_version = 6;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->os_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }
  
  // optional bool is_acer_device = 3 [default = false];
  if (has_is_acer_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_acer_device(), target);
  }
  
  // optional bool device_has_camera = 4 [default = false];
  if (has_device_has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->device_has_camera(), target);
  }
  
  // optional string device_class = 5;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_class(), target);
  }
  
  // optional string os_version = 6;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->os_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // optional bool is_acer_device = 3 [default = false];
    if (has_is_acer_device()) {
      total_size += 1 + 1;
    }
    
    // optional bool device_has_camera = 4 [default = false];
    if (has_device_has_camera()) {
      total_size += 1 + 1;
    }
    
    // optional string device_class = 5;
    if (has_device_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_class());
    }
    
    // optional string os_version = 6;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkDeviceInput::MergeFrom(const LinkDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_is_acer_device()) {
      set_is_acer_device(from.is_acer_device());
    }
    if (from.has_device_has_camera()) {
      set_device_has_camera(from.device_has_camera());
    }
    if (from.has_device_class()) {
      set_device_class(from.device_class());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkDeviceInput::CopyFrom(const LinkDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LinkDeviceInput::Swap(LinkDeviceInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_name_, other->device_name_);
    std::swap(is_acer_device_, other->is_acer_device_);
    std::swap(device_has_camera_, other->device_has_camera_);
    std::swap(device_class_, other->device_class_);
    std::swap(os_version_, other->os_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkDeviceInput_descriptor_;
  metadata.reflection = LinkDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListLinkedDevicesInput::kUserIdFieldNumber;
const int ListLinkedDevicesInput::kOnlyUseCacheFieldNumber;
const int ListLinkedDevicesInput::kStorageNodesOnlyFieldNumber;
#endif  // !_MSC_VER

ListLinkedDevicesInput::ListLinkedDevicesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListLinkedDevicesInput::InitAsDefaultInstance() {
}

ListLinkedDevicesInput::ListLinkedDevicesInput(const ListLinkedDevicesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListLinkedDevicesInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  only_use_cache_ = false;
  storage_nodes_only_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListLinkedDevicesInput::~ListLinkedDevicesInput() {
  SharedDtor();
}

void ListLinkedDevicesInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLinkedDevicesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLinkedDevicesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLinkedDevicesInput_descriptor_;
}

const ListLinkedDevicesInput& ListLinkedDevicesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListLinkedDevicesInput* ListLinkedDevicesInput::default_instance_ = NULL;

ListLinkedDevicesInput* ListLinkedDevicesInput::New() const {
  return new ListLinkedDevicesInput;
}

void ListLinkedDevicesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    only_use_cache_ = false;
    storage_nodes_only_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListLinkedDevicesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_only_use_cache;
        break;
      }
      
      // optional bool only_use_cache = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_use_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_cache_)));
          set_has_only_use_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_storage_nodes_only;
        break;
      }
      
      // optional bool storage_nodes_only = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storage_nodes_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &storage_nodes_only_)));
          set_has_storage_nodes_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListLinkedDevicesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool only_use_cache = 2 [default = false];
  if (has_only_use_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->only_use_cache(), output);
  }
  
  // optional bool storage_nodes_only = 3 [default = false];
  if (has_storage_nodes_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->storage_nodes_only(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListLinkedDevicesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool only_use_cache = 2 [default = false];
  if (has_only_use_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->only_use_cache(), target);
  }
  
  // optional bool storage_nodes_only = 3 [default = false];
  if (has_storage_nodes_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->storage_nodes_only(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListLinkedDevicesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool only_use_cache = 2 [default = false];
    if (has_only_use_cache()) {
      total_size += 1 + 1;
    }
    
    // optional bool storage_nodes_only = 3 [default = false];
    if (has_storage_nodes_only()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLinkedDevicesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListLinkedDevicesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListLinkedDevicesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListLinkedDevicesInput::MergeFrom(const ListLinkedDevicesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_only_use_cache()) {
      set_only_use_cache(from.only_use_cache());
    }
    if (from.has_storage_nodes_only()) {
      set_storage_nodes_only(from.storage_nodes_only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListLinkedDevicesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLinkedDevicesInput::CopyFrom(const ListLinkedDevicesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLinkedDevicesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ListLinkedDevicesInput::Swap(ListLinkedDevicesInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(only_use_cache_, other->only_use_cache_);
    std::swap(storage_nodes_only_, other->storage_nodes_only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListLinkedDevicesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLinkedDevicesInput_descriptor_;
  metadata.reflection = ListLinkedDevicesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkedDeviceInfo::kDeviceIdFieldNumber;
const int LinkedDeviceInfo::kDeviceNameFieldNumber;
const int LinkedDeviceInfo::kIsStorageNodeFieldNumber;
const int LinkedDeviceInfo::kConnectionStatusFieldNumber;
const int LinkedDeviceInfo::kDeviceClassFieldNumber;
const int LinkedDeviceInfo::kIsAcerFieldNumber;
const int LinkedDeviceInfo::kHasCameraFieldNumber;
const int LinkedDeviceInfo::kOsVersionFieldNumber;
const int LinkedDeviceInfo::kFeatureMediaServerCapableFieldNumber;
const int LinkedDeviceInfo::kFeatureVirtDriveCapableFieldNumber;
const int LinkedDeviceInfo::kProtocolVersionFieldNumber;
const int LinkedDeviceInfo::kFeatureRemoteFileAccessCapableFieldNumber;
const int LinkedDeviceInfo::kFeatureFsdatasettypeCapableFieldNumber;
const int LinkedDeviceInfo::kBuildInfoFieldNumber;
const int LinkedDeviceInfo::kModelNumberFieldNumber;
const int LinkedDeviceInfo::kFeatureMyStorageServerCapableFieldNumber;
#endif  // !_MSC_VER

LinkedDeviceInfo::LinkedDeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinkedDeviceInfo::InitAsDefaultInstance() {
  connection_status_ = const_cast< ::ccd::DeviceConnectionStatus*>(&::ccd::DeviceConnectionStatus::default_instance());
}

LinkedDeviceInfo::LinkedDeviceInfo(const LinkedDeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinkedDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_storage_node_ = false;
  connection_status_ = NULL;
  device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_acer_ = false;
  has_camera_ = false;
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feature_media_server_capable_ = false;
  feature_virt_drive_capable_ = false;
  protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feature_remote_file_access_capable_ = false;
  feature_fsdatasettype_capable_ = false;
  build_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  feature_my_storage_server_capable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkedDeviceInfo::~LinkedDeviceInfo() {
  SharedDtor();
}

void LinkedDeviceInfo::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    delete device_class_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
    delete protocol_version_;
  }
  if (build_info_ != &::google::protobuf::internal::kEmptyString) {
    delete build_info_;
  }
  if (model_number_ != &::google::protobuf::internal::kEmptyString) {
    delete model_number_;
  }
  if (this != default_instance_) {
    delete connection_status_;
  }
}

void LinkedDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkedDeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkedDeviceInfo_descriptor_;
}

const LinkedDeviceInfo& LinkedDeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

LinkedDeviceInfo* LinkedDeviceInfo::default_instance_ = NULL;

LinkedDeviceInfo* LinkedDeviceInfo::New() const {
  return new LinkedDeviceInfo;
}

void LinkedDeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    is_storage_node_ = false;
    if (has_connection_status()) {
      if (connection_status_ != NULL) connection_status_->::ccd::DeviceConnectionStatus::Clear();
    }
    if (has_device_class()) {
      if (device_class_ != &::google::protobuf::internal::kEmptyString) {
        device_class_->clear();
      }
    }
    is_acer_ = false;
    has_camera_ = false;
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    feature_media_server_capable_ = false;
    feature_virt_drive_capable_ = false;
    if (has_protocol_version()) {
      if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
        protocol_version_->clear();
      }
    }
    feature_remote_file_access_capable_ = false;
    feature_fsdatasettype_capable_ = false;
    if (has_build_info()) {
      if (build_info_ != &::google::protobuf::internal::kEmptyString) {
        build_info_->clear();
      }
    }
    if (has_model_number()) {
      if (model_number_ != &::google::protobuf::internal::kEmptyString) {
        model_number_->clear();
      }
    }
    feature_my_storage_server_capable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkedDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_name;
        break;
      }
      
      // required string device_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_storage_node;
        break;
      }
      
      // required bool is_storage_node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_storage_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_storage_node_)));
          set_has_is_storage_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connection_status;
        break;
      }
      
      // required .ccd.DeviceConnectionStatus connection_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_class;
        break;
      }
      
      // required string device_class = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_class().data(), this->device_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_acer;
        break;
      }
      
      // required bool is_acer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_acer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_acer_)));
          set_has_is_acer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_has_camera;
        break;
      }
      
      // required bool has_camera = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_camera_)));
          set_has_has_camera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_os_version;
        break;
      }
      
      // optional string os_version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_feature_media_server_capable;
        break;
      }
      
      // optional bool feature_media_server_capable = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_media_server_capable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_media_server_capable_)));
          set_has_feature_media_server_capable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_feature_virt_drive_capable;
        break;
      }
      
      // optional bool feature_virt_drive_capable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_virt_drive_capable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_virt_drive_capable_)));
          set_has_feature_virt_drive_capable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_protocol_version;
        break;
      }
      
      // optional string protocol_version = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_feature_remote_file_access_capable;
        break;
      }
      
      // optional bool feature_remote_file_access_capable = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_remote_file_access_capable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_remote_file_access_capable_)));
          set_has_feature_remote_file_access_capable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_feature_fsdatasettype_capable;
        break;
      }
      
      // optional bool feature_fsdatasettype_capable = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_fsdatasettype_capable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_fsdatasettype_capable_)));
          set_has_feature_fsdatasettype_capable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_build_info;
        break;
      }
      
      // optional string build_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->build_info().data(), this->build_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_model_number;
        break;
      }
      
      // optional string model_number = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_number().data(), this->model_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_feature_my_storage_server_capable;
        break;
      }
      
      // optional bool feature_my_storage_server_capable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_feature_my_storage_server_capable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feature_my_storage_server_capable_)));
          set_has_feature_my_storage_server_capable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinkedDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->device_id(), output);
  }
  
  // required string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_name(), output);
  }
  
  // required bool is_storage_node = 3;
  if (has_is_storage_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_storage_node(), output);
  }
  
  // required .ccd.DeviceConnectionStatus connection_status = 4;
  if (has_connection_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->connection_status(), output);
  }
  
  // required string device_class = 5;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_class(), output);
  }
  
  // required bool is_acer = 6;
  if (has_is_acer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_acer(), output);
  }
  
  // required bool has_camera = 7;
  if (has_has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_camera(), output);
  }
  
  // optional string os_version = 8;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->os_version(), output);
  }
  
  // optional bool feature_media_server_capable = 9;
  if (has_feature_media_server_capable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->feature_media_server_capable(), output);
  }
  
  // optional bool feature_virt_drive_capable = 10;
  if (has_feature_virt_drive_capable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->feature_virt_drive_capable(), output);
  }
  
  // optional string protocol_version = 11;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->protocol_version(), output);
  }
  
  // optional bool feature_remote_file_access_capable = 12;
  if (has_feature_remote_file_access_capable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->feature_remote_file_access_capable(), output);
  }
  
  // optional bool feature_fsdatasettype_capable = 13;
  if (has_feature_fsdatasettype_capable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->feature_fsdatasettype_capable(), output);
  }
  
  // optional string build_info = 14;
  if (has_build_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->build_info().data(), this->build_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->build_info(), output);
  }
  
  // optional string model_number = 15;
  if (has_model_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_number().data(), this->model_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->model_number(), output);
  }
  
  // optional bool feature_my_storage_server_capable = 16;
  if (has_feature_my_storage_server_capable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->feature_my_storage_server_capable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinkedDeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->device_id(), target);
  }
  
  // required string device_name = 2;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }
  
  // required bool is_storage_node = 3;
  if (has_is_storage_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_storage_node(), target);
  }
  
  // required .ccd.DeviceConnectionStatus connection_status = 4;
  if (has_connection_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->connection_status(), target);
  }
  
  // required string device_class = 5;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_class(), target);
  }
  
  // required bool is_acer = 6;
  if (has_is_acer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_acer(), target);
  }
  
  // required bool has_camera = 7;
  if (has_has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_camera(), target);
  }
  
  // optional string os_version = 8;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->os_version(), target);
  }
  
  // optional bool feature_media_server_capable = 9;
  if (has_feature_media_server_capable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->feature_media_server_capable(), target);
  }
  
  // optional bool feature_virt_drive_capable = 10;
  if (has_feature_virt_drive_capable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->feature_virt_drive_capable(), target);
  }
  
  // optional string protocol_version = 11;
  if (has_protocol_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->protocol_version(), target);
  }
  
  // optional bool feature_remote_file_access_capable = 12;
  if (has_feature_remote_file_access_capable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->feature_remote_file_access_capable(), target);
  }
  
  // optional bool feature_fsdatasettype_capable = 13;
  if (has_feature_fsdatasettype_capable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->feature_fsdatasettype_capable(), target);
  }
  
  // optional string build_info = 14;
  if (has_build_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->build_info().data(), this->build_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->build_info(), target);
  }
  
  // optional string model_number = 15;
  if (has_model_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_number().data(), this->model_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->model_number(), target);
  }
  
  // optional bool feature_my_storage_server_capable = 16;
  if (has_feature_my_storage_server_capable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->feature_my_storage_server_capable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinkedDeviceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 device_id = 1;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // required bool is_storage_node = 3;
    if (has_is_storage_node()) {
      total_size += 1 + 1;
    }
    
    // required .ccd.DeviceConnectionStatus connection_status = 4;
    if (has_connection_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->connection_status());
    }
    
    // required string device_class = 5;
    if (has_device_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_class());
    }
    
    // required bool is_acer = 6;
    if (has_is_acer()) {
      total_size += 1 + 1;
    }
    
    // required bool has_camera = 7;
    if (has_has_camera()) {
      total_size += 1 + 1;
    }
    
    // optional string os_version = 8;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool feature_media_server_capable = 9;
    if (has_feature_media_server_capable()) {
      total_size += 1 + 1;
    }
    
    // optional bool feature_virt_drive_capable = 10;
    if (has_feature_virt_drive_capable()) {
      total_size += 1 + 1;
    }
    
    // optional string protocol_version = 11;
    if (has_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol_version());
    }
    
    // optional bool feature_remote_file_access_capable = 12;
    if (has_feature_remote_file_access_capable()) {
      total_size += 1 + 1;
    }
    
    // optional bool feature_fsdatasettype_capable = 13;
    if (has_feature_fsdatasettype_capable()) {
      total_size += 1 + 1;
    }
    
    // optional string build_info = 14;
    if (has_build_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_info());
    }
    
    // optional string model_number = 15;
    if (has_model_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_number());
    }
    
    // optional bool feature_my_storage_server_capable = 16;
    if (has_feature_my_storage_server_capable()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkedDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkedDeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkedDeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkedDeviceInfo::MergeFrom(const LinkedDeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_is_storage_node()) {
      set_is_storage_node(from.is_storage_node());
    }
    if (from.has_connection_status()) {
      mutable_connection_status()->::ccd::DeviceConnectionStatus::MergeFrom(from.connection_status());
    }
    if (from.has_device_class()) {
      set_device_class(from.device_class());
    }
    if (from.has_is_acer()) {
      set_is_acer(from.is_acer());
    }
    if (from.has_has_camera()) {
      set_has_camera(from.has_camera());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feature_media_server_capable()) {
      set_feature_media_server_capable(from.feature_media_server_capable());
    }
    if (from.has_feature_virt_drive_capable()) {
      set_feature_virt_drive_capable(from.feature_virt_drive_capable());
    }
    if (from.has_protocol_version()) {
      set_protocol_version(from.protocol_version());
    }
    if (from.has_feature_remote_file_access_capable()) {
      set_feature_remote_file_access_capable(from.feature_remote_file_access_capable());
    }
    if (from.has_feature_fsdatasettype_capable()) {
      set_feature_fsdatasettype_capable(from.feature_fsdatasettype_capable());
    }
    if (from.has_build_info()) {
      set_build_info(from.build_info());
    }
    if (from.has_model_number()) {
      set_model_number(from.model_number());
    }
    if (from.has_feature_my_storage_server_capable()) {
      set_feature_my_storage_server_capable(from.feature_my_storage_server_capable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkedDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkedDeviceInfo::CopyFrom(const LinkedDeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkedDeviceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_connection_status()) {
    if (!this->connection_status().IsInitialized()) return false;
  }
  return true;
}

void LinkedDeviceInfo::Swap(LinkedDeviceInfo* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(device_name_, other->device_name_);
    std::swap(is_storage_node_, other->is_storage_node_);
    std::swap(connection_status_, other->connection_status_);
    std::swap(device_class_, other->device_class_);
    std::swap(is_acer_, other->is_acer_);
    std::swap(has_camera_, other->has_camera_);
    std::swap(os_version_, other->os_version_);
    std::swap(feature_media_server_capable_, other->feature_media_server_capable_);
    std::swap(feature_virt_drive_capable_, other->feature_virt_drive_capable_);
    std::swap(protocol_version_, other->protocol_version_);
    std::swap(feature_remote_file_access_capable_, other->feature_remote_file_access_capable_);
    std::swap(feature_fsdatasettype_capable_, other->feature_fsdatasettype_capable_);
    std::swap(build_info_, other->build_info_);
    std::swap(model_number_, other->model_number_);
    std::swap(feature_my_storage_server_capable_, other->feature_my_storage_server_capable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkedDeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkedDeviceInfo_descriptor_;
  metadata.reflection = LinkedDeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListLinkedDevicesOutput::kLinkedDevicesFieldNumber;
const int ListLinkedDevicesOutput::kDevicesFieldNumber;
#endif  // !_MSC_VER

ListLinkedDevicesOutput::ListLinkedDevicesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListLinkedDevicesOutput::InitAsDefaultInstance() {
}

ListLinkedDevicesOutput::ListLinkedDevicesOutput(const ListLinkedDevicesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListLinkedDevicesOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListLinkedDevicesOutput::~ListLinkedDevicesOutput() {
  SharedDtor();
}

void ListLinkedDevicesOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListLinkedDevicesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListLinkedDevicesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListLinkedDevicesOutput_descriptor_;
}

const ListLinkedDevicesOutput& ListLinkedDevicesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListLinkedDevicesOutput* ListLinkedDevicesOutput::default_instance_ = NULL;

ListLinkedDevicesOutput* ListLinkedDevicesOutput::New() const {
  return new ListLinkedDevicesOutput;
}

void ListLinkedDevicesOutput::Clear() {
  linked_devices_.Clear();
  devices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListLinkedDevicesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vplex.vsDirectory.DeviceInfo linked_devices = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linked_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linked_devices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_linked_devices;
        if (input->ExpectTag(18)) goto parse_devices;
        break;
      }
      
      // repeated .ccd.LinkedDeviceInfo devices = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_devices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListLinkedDevicesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vplex.vsDirectory.DeviceInfo linked_devices = 1;
  for (int i = 0; i < this->linked_devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->linked_devices(i), output);
  }
  
  // repeated .ccd.LinkedDeviceInfo devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->devices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListLinkedDevicesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .vplex.vsDirectory.DeviceInfo linked_devices = 1;
  for (int i = 0; i < this->linked_devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->linked_devices(i), target);
  }
  
  // repeated .ccd.LinkedDeviceInfo devices = 2;
  for (int i = 0; i < this->devices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->devices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListLinkedDevicesOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .vplex.vsDirectory.DeviceInfo linked_devices = 1;
  total_size += 1 * this->linked_devices_size();
  for (int i = 0; i < this->linked_devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linked_devices(i));
  }
  
  // repeated .ccd.LinkedDeviceInfo devices = 2;
  total_size += 1 * this->devices_size();
  for (int i = 0; i < this->devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListLinkedDevicesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListLinkedDevicesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListLinkedDevicesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListLinkedDevicesOutput::MergeFrom(const ListLinkedDevicesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  linked_devices_.MergeFrom(from.linked_devices_);
  devices_.MergeFrom(from.devices_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListLinkedDevicesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLinkedDevicesOutput::CopyFrom(const ListLinkedDevicesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLinkedDevicesOutput::IsInitialized() const {
  
  for (int i = 0; i < linked_devices_size(); i++) {
    if (!this->linked_devices(i).IsInitialized()) return false;
  }
  for (int i = 0; i < devices_size(); i++) {
    if (!this->devices(i).IsInitialized()) return false;
  }
  return true;
}

void ListLinkedDevicesOutput::Swap(ListLinkedDevicesOutput* other) {
  if (other != this) {
    linked_devices_.Swap(&other->linked_devices_);
    devices_.Swap(&other->devices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListLinkedDevicesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListLinkedDevicesOutput_descriptor_;
  metadata.reflection = ListLinkedDevicesOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListOwnedDatasetsInput::kUserIdFieldNumber;
const int ListOwnedDatasetsInput::kShowAllDeviceClassesFieldNumber;
const int ListOwnedDatasetsInput::kOnlyUseCacheFieldNumber;
#endif  // !_MSC_VER

ListOwnedDatasetsInput::ListOwnedDatasetsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListOwnedDatasetsInput::InitAsDefaultInstance() {
}

ListOwnedDatasetsInput::ListOwnedDatasetsInput(const ListOwnedDatasetsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListOwnedDatasetsInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  show_all_device_classes_ = false;
  only_use_cache_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListOwnedDatasetsInput::~ListOwnedDatasetsInput() {
  SharedDtor();
}

void ListOwnedDatasetsInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListOwnedDatasetsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOwnedDatasetsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListOwnedDatasetsInput_descriptor_;
}

const ListOwnedDatasetsInput& ListOwnedDatasetsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListOwnedDatasetsInput* ListOwnedDatasetsInput::default_instance_ = NULL;

ListOwnedDatasetsInput* ListOwnedDatasetsInput::New() const {
  return new ListOwnedDatasetsInput;
}

void ListOwnedDatasetsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    show_all_device_classes_ = false;
    only_use_cache_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListOwnedDatasetsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_all_device_classes;
        break;
      }
      
      // optional bool show_all_device_classes = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_all_device_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_all_device_classes_)));
          set_has_show_all_device_classes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_only_use_cache;
        break;
      }
      
      // optional bool only_use_cache = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_use_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_cache_)));
          set_has_only_use_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListOwnedDatasetsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool show_all_device_classes = 2 [default = false];
  if (has_show_all_device_classes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show_all_device_classes(), output);
  }
  
  // optional bool only_use_cache = 3 [default = false];
  if (has_only_use_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->only_use_cache(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListOwnedDatasetsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool show_all_device_classes = 2 [default = false];
  if (has_show_all_device_classes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show_all_device_classes(), target);
  }
  
  // optional bool only_use_cache = 3 [default = false];
  if (has_only_use_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->only_use_cache(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListOwnedDatasetsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool show_all_device_classes = 2 [default = false];
    if (has_show_all_device_classes()) {
      total_size += 1 + 1;
    }
    
    // optional bool only_use_cache = 3 [default = false];
    if (has_only_use_cache()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOwnedDatasetsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListOwnedDatasetsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListOwnedDatasetsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListOwnedDatasetsInput::MergeFrom(const ListOwnedDatasetsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_show_all_device_classes()) {
      set_show_all_device_classes(from.show_all_device_classes());
    }
    if (from.has_only_use_cache()) {
      set_only_use_cache(from.only_use_cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListOwnedDatasetsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOwnedDatasetsInput::CopyFrom(const ListOwnedDatasetsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOwnedDatasetsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ListOwnedDatasetsInput::Swap(ListOwnedDatasetsInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(show_all_device_classes_, other->show_all_device_classes_);
    std::swap(only_use_cache_, other->only_use_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListOwnedDatasetsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListOwnedDatasetsInput_descriptor_;
  metadata.reflection = ListOwnedDatasetsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListOwnedDatasetsOutput::kDatasetDetailsFieldNumber;
const int ListOwnedDatasetsOutput::kCreatedByThisDeviceFieldNumber;
#endif  // !_MSC_VER

ListOwnedDatasetsOutput::ListOwnedDatasetsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListOwnedDatasetsOutput::InitAsDefaultInstance() {
}

ListOwnedDatasetsOutput::ListOwnedDatasetsOutput(const ListOwnedDatasetsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListOwnedDatasetsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListOwnedDatasetsOutput::~ListOwnedDatasetsOutput() {
  SharedDtor();
}

void ListOwnedDatasetsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListOwnedDatasetsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListOwnedDatasetsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListOwnedDatasetsOutput_descriptor_;
}

const ListOwnedDatasetsOutput& ListOwnedDatasetsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListOwnedDatasetsOutput* ListOwnedDatasetsOutput::default_instance_ = NULL;

ListOwnedDatasetsOutput* ListOwnedDatasetsOutput::New() const {
  return new ListOwnedDatasetsOutput;
}

void ListOwnedDatasetsOutput::Clear() {
  dataset_details_.Clear();
  created_by_this_device_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListOwnedDatasetsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vplex.vsDirectory.DatasetDetail dataset_details = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataset_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dataset_details;
        if (input->ExpectTag(16)) goto parse_created_by_this_device;
        break;
      }
      
      // repeated bool created_by_this_device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_created_by_this_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_created_by_this_device())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_created_by_this_device())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_created_by_this_device;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListOwnedDatasetsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  for (int i = 0; i < this->dataset_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataset_details(i), output);
  }
  
  // repeated bool created_by_this_device = 2;
  for (int i = 0; i < this->created_by_this_device_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->created_by_this_device(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListOwnedDatasetsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  for (int i = 0; i < this->dataset_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataset_details(i), target);
  }
  
  // repeated bool created_by_this_device = 2;
  for (int i = 0; i < this->created_by_this_device_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->created_by_this_device(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListOwnedDatasetsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  total_size += 1 * this->dataset_details_size();
  for (int i = 0; i < this->dataset_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataset_details(i));
  }
  
  // repeated bool created_by_this_device = 2;
  {
    int data_size = 0;
    data_size = 1 * this->created_by_this_device_size();
    total_size += 1 * this->created_by_this_device_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListOwnedDatasetsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListOwnedDatasetsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListOwnedDatasetsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListOwnedDatasetsOutput::MergeFrom(const ListOwnedDatasetsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataset_details_.MergeFrom(from.dataset_details_);
  created_by_this_device_.MergeFrom(from.created_by_this_device_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListOwnedDatasetsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOwnedDatasetsOutput::CopyFrom(const ListOwnedDatasetsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOwnedDatasetsOutput::IsInitialized() const {
  
  for (int i = 0; i < dataset_details_size(); i++) {
    if (!this->dataset_details(i).IsInitialized()) return false;
  }
  return true;
}

void ListOwnedDatasetsOutput::Swap(ListOwnedDatasetsOutput* other) {
  if (other != this) {
    dataset_details_.Swap(&other->dataset_details_);
    created_by_this_device_.Swap(&other->created_by_this_device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListOwnedDatasetsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListOwnedDatasetsOutput_descriptor_;
  metadata.reflection = ListOwnedDatasetsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListUserStorageInput::kUserIdFieldNumber;
const int ListUserStorageInput::kOnlyUseCacheFieldNumber;
#endif  // !_MSC_VER

ListUserStorageInput::ListUserStorageInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListUserStorageInput::InitAsDefaultInstance() {
}

ListUserStorageInput::ListUserStorageInput(const ListUserStorageInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListUserStorageInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  only_use_cache_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListUserStorageInput::~ListUserStorageInput() {
  SharedDtor();
}

void ListUserStorageInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListUserStorageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListUserStorageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListUserStorageInput_descriptor_;
}

const ListUserStorageInput& ListUserStorageInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListUserStorageInput* ListUserStorageInput::default_instance_ = NULL;

ListUserStorageInput* ListUserStorageInput::New() const {
  return new ListUserStorageInput;
}

void ListUserStorageInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    only_use_cache_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListUserStorageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_only_use_cache;
        break;
      }
      
      // optional bool only_use_cache = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_use_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_cache_)));
          set_has_only_use_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListUserStorageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool only_use_cache = 2 [default = false];
  if (has_only_use_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->only_use_cache(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListUserStorageInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool only_use_cache = 2 [default = false];
  if (has_only_use_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->only_use_cache(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListUserStorageInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool only_use_cache = 2 [default = false];
    if (has_only_use_cache()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListUserStorageInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListUserStorageInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListUserStorageInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListUserStorageInput::MergeFrom(const ListUserStorageInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_only_use_cache()) {
      set_only_use_cache(from.only_use_cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListUserStorageInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserStorageInput::CopyFrom(const ListUserStorageInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserStorageInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ListUserStorageInput::Swap(ListUserStorageInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(only_use_cache_, other->only_use_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListUserStorageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListUserStorageInput_descriptor_;
  metadata.reflection = ListUserStorageInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListUserStorageOutput::kUserStorageFieldNumber;
#endif  // !_MSC_VER

ListUserStorageOutput::ListUserStorageOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListUserStorageOutput::InitAsDefaultInstance() {
}

ListUserStorageOutput::ListUserStorageOutput(const ListUserStorageOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListUserStorageOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListUserStorageOutput::~ListUserStorageOutput() {
  SharedDtor();
}

void ListUserStorageOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListUserStorageOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListUserStorageOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListUserStorageOutput_descriptor_;
}

const ListUserStorageOutput& ListUserStorageOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListUserStorageOutput* ListUserStorageOutput::default_instance_ = NULL;

ListUserStorageOutput* ListUserStorageOutput::New() const {
  return new ListUserStorageOutput;
}

void ListUserStorageOutput::Clear() {
  user_storage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListUserStorageOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vplex.vsDirectory.UserStorage user_storage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_storage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_storage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_storage;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListUserStorageOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vplex.vsDirectory.UserStorage user_storage = 1;
  for (int i = 0; i < this->user_storage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_storage(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListUserStorageOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .vplex.vsDirectory.UserStorage user_storage = 1;
  for (int i = 0; i < this->user_storage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_storage(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListUserStorageOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .vplex.vsDirectory.UserStorage user_storage = 1;
  total_size += 1 * this->user_storage_size();
  for (int i = 0; i < this->user_storage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_storage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListUserStorageOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListUserStorageOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListUserStorageOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListUserStorageOutput::MergeFrom(const ListUserStorageOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_storage_.MergeFrom(from.user_storage_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListUserStorageOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserStorageOutput::CopyFrom(const ListUserStorageOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserStorageOutput::IsInitialized() const {
  
  for (int i = 0; i < user_storage_size(); i++) {
    if (!this->user_storage(i).IsInitialized()) return false;
  }
  return true;
}

void ListUserStorageOutput::Swap(ListUserStorageOutput* other) {
  if (other != this) {
    user_storage_.Swap(&other->user_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListUserStorageOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListUserStorageOutput_descriptor_;
  metadata.reflection = ListUserStorageOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListSyncSubscriptionsInput::kUserIdFieldNumber;
const int ListSyncSubscriptionsInput::kDeviceIdFieldNumber;
const int ListSyncSubscriptionsInput::kOnlyUseCacheFieldNumber;
#endif  // !_MSC_VER

ListSyncSubscriptionsInput::ListSyncSubscriptionsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListSyncSubscriptionsInput::InitAsDefaultInstance() {
}

ListSyncSubscriptionsInput::ListSyncSubscriptionsInput(const ListSyncSubscriptionsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListSyncSubscriptionsInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  only_use_cache_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListSyncSubscriptionsInput::~ListSyncSubscriptionsInput() {
  SharedDtor();
}

void ListSyncSubscriptionsInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListSyncSubscriptionsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSyncSubscriptionsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSyncSubscriptionsInput_descriptor_;
}

const ListSyncSubscriptionsInput& ListSyncSubscriptionsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListSyncSubscriptionsInput* ListSyncSubscriptionsInput::default_instance_ = NULL;

ListSyncSubscriptionsInput* ListSyncSubscriptionsInput::New() const {
  return new ListSyncSubscriptionsInput;
}

void ListSyncSubscriptionsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
    only_use_cache_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListSyncSubscriptionsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_only_use_cache;
        break;
      }
      
      // optional bool only_use_cache = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_use_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_use_cache_)));
          set_has_only_use_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListSyncSubscriptionsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  // optional bool only_use_cache = 3 [default = false];
  if (has_only_use_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->only_use_cache(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListSyncSubscriptionsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  // optional bool only_use_cache = 3 [default = false];
  if (has_only_use_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->only_use_cache(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListSyncSubscriptionsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool only_use_cache = 3 [default = false];
    if (has_only_use_cache()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSyncSubscriptionsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListSyncSubscriptionsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListSyncSubscriptionsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListSyncSubscriptionsInput::MergeFrom(const ListSyncSubscriptionsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_only_use_cache()) {
      set_only_use_cache(from.only_use_cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListSyncSubscriptionsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSyncSubscriptionsInput::CopyFrom(const ListSyncSubscriptionsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSyncSubscriptionsInput::IsInitialized() const {
  
  return true;
}

void ListSyncSubscriptionsInput::Swap(ListSyncSubscriptionsInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(only_use_cache_, other->only_use_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListSyncSubscriptionsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSyncSubscriptionsInput_descriptor_;
  metadata.reflection = ListSyncSubscriptionsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncSubscriptionDetail::kDatasetDetailsFieldNumber;
const int SyncSubscriptionDetail::kAbsoluteDeviceRootFieldNumber;
const int SyncSubscriptionDetail::kRawDeviceRootFieldNumber;
const int SyncSubscriptionDetail::kFilterFieldNumber;
const int SyncSubscriptionDetail::kUploadOkFieldNumber;
const int SyncSubscriptionDetail::kDownloadOkFieldNumber;
const int SyncSubscriptionDetail::kUploadDeleteOkFieldNumber;
const int SyncSubscriptionDetail::kDownloadDeleteOkFieldNumber;
const int SyncSubscriptionDetail::kDatasetRootFieldNumber;
const int SyncSubscriptionDetail::kDatasetLocationFieldNumber;
const int SyncSubscriptionDetail::kMaxSizeFieldNumber;
const int SyncSubscriptionDetail::kMaxFilesFieldNumber;
#endif  // !_MSC_VER

SyncSubscriptionDetail::SyncSubscriptionDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncSubscriptionDetail::InitAsDefaultInstance() {
  dataset_details_ = const_cast< ::vplex::vsDirectory::DatasetDetail*>(&::vplex::vsDirectory::DatasetDetail::default_instance());
}

SyncSubscriptionDetail::SyncSubscriptionDetail(const SyncSubscriptionDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncSubscriptionDetail::SharedCtor() {
  _cached_size_ = 0;
  dataset_details_ = NULL;
  absolute_device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raw_device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upload_ok_ = false;
  download_ok_ = false;
  upload_delete_ok_ = false;
  download_delete_ok_ = false;
  dataset_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataset_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = GOOGLE_ULONGLONG(0);
  max_files_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncSubscriptionDetail::~SyncSubscriptionDetail() {
  SharedDtor();
}

void SyncSubscriptionDetail::SharedDtor() {
  if (absolute_device_root_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_device_root_;
  }
  if (raw_device_root_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_device_root_;
  }
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_;
  }
  if (dataset_root_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_root_;
  }
  if (dataset_location_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_location_;
  }
  if (this != default_instance_) {
    delete dataset_details_;
  }
}

void SyncSubscriptionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncSubscriptionDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncSubscriptionDetail_descriptor_;
}

const SyncSubscriptionDetail& SyncSubscriptionDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncSubscriptionDetail* SyncSubscriptionDetail::default_instance_ = NULL;

SyncSubscriptionDetail* SyncSubscriptionDetail::New() const {
  return new SyncSubscriptionDetail;
}

void SyncSubscriptionDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataset_details()) {
      if (dataset_details_ != NULL) dataset_details_->::vplex::vsDirectory::DatasetDetail::Clear();
    }
    if (has_absolute_device_root()) {
      if (absolute_device_root_ != &::google::protobuf::internal::kEmptyString) {
        absolute_device_root_->clear();
      }
    }
    if (has_raw_device_root()) {
      if (raw_device_root_ != &::google::protobuf::internal::kEmptyString) {
        raw_device_root_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != &::google::protobuf::internal::kEmptyString) {
        filter_->clear();
      }
    }
    upload_ok_ = false;
    download_ok_ = false;
    upload_delete_ok_ = false;
    download_delete_ok_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dataset_root()) {
      if (dataset_root_ != &::google::protobuf::internal::kEmptyString) {
        dataset_root_->clear();
      }
    }
    if (has_dataset_location()) {
      if (dataset_location_ != &::google::protobuf::internal::kEmptyString) {
        dataset_location_->clear();
      }
    }
    max_size_ = GOOGLE_ULONGLONG(0);
    max_files_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncSubscriptionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vplex.vsDirectory.DatasetDetail dataset_details = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataset_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_absolute_device_root;
        break;
      }
      
      // optional string absolute_device_root = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absolute_device_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_device_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_device_root().data(), this->absolute_device_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_raw_device_root;
        break;
      }
      
      // required string raw_device_root = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_device_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_device_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_device_root().data(), this->raw_device_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_filter;
        break;
      }
      
      // optional string filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upload_ok;
        break;
      }
      
      // required bool upload_ok = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_ok_)));
          set_has_upload_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_download_ok;
        break;
      }
      
      // required bool download_ok = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_ok_)));
          set_has_download_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_upload_delete_ok;
        break;
      }
      
      // required bool upload_delete_ok = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_delete_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_delete_ok_)));
          set_has_upload_delete_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_download_delete_ok;
        break;
      }
      
      // required bool download_delete_ok = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_delete_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_delete_ok_)));
          set_has_download_delete_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dataset_root;
        break;
      }
      
      // required string dataset_root = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_root:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_root()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset_root().data(), this->dataset_root().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dataset_location;
        break;
      }
      
      // required string dataset_location = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset_location().data(), this->dataset_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_max_size;
        break;
      }
      
      // optional fixed64 max_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_max_files;
        break;
      }
      
      // optional fixed64 max_files = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_files_)));
          set_has_max_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncSubscriptionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  if (has_dataset_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataset_details(), output);
  }
  
  // optional string absolute_device_root = 2;
  if (has_absolute_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_device_root().data(), this->absolute_device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->absolute_device_root(), output);
  }
  
  // required string raw_device_root = 3;
  if (has_raw_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_device_root().data(), this->raw_device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->raw_device_root(), output);
  }
  
  // optional string filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filter(), output);
  }
  
  // required bool upload_ok = 5;
  if (has_upload_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upload_ok(), output);
  }
  
  // required bool download_ok = 6;
  if (has_download_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->download_ok(), output);
  }
  
  // required bool upload_delete_ok = 7;
  if (has_upload_delete_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->upload_delete_ok(), output);
  }
  
  // required bool download_delete_ok = 8;
  if (has_download_delete_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->download_delete_ok(), output);
  }
  
  // required string dataset_root = 9;
  if (has_dataset_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_root().data(), this->dataset_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dataset_root(), output);
  }
  
  // required string dataset_location = 10;
  if (has_dataset_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_location().data(), this->dataset_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dataset_location(), output);
  }
  
  // optional fixed64 max_size = 11;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->max_size(), output);
  }
  
  // optional fixed64 max_files = 12;
  if (has_max_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->max_files(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncSubscriptionDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  if (has_dataset_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataset_details(), target);
  }
  
  // optional string absolute_device_root = 2;
  if (has_absolute_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_device_root().data(), this->absolute_device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->absolute_device_root(), target);
  }
  
  // required string raw_device_root = 3;
  if (has_raw_device_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_device_root().data(), this->raw_device_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->raw_device_root(), target);
  }
  
  // optional string filter = 4;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filter(), target);
  }
  
  // required bool upload_ok = 5;
  if (has_upload_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upload_ok(), target);
  }
  
  // required bool download_ok = 6;
  if (has_download_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->download_ok(), target);
  }
  
  // required bool upload_delete_ok = 7;
  if (has_upload_delete_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->upload_delete_ok(), target);
  }
  
  // required bool download_delete_ok = 8;
  if (has_download_delete_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->download_delete_ok(), target);
  }
  
  // required string dataset_root = 9;
  if (has_dataset_root()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_root().data(), this->dataset_root().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dataset_root(), target);
  }
  
  // required string dataset_location = 10;
  if (has_dataset_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_location().data(), this->dataset_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dataset_location(), target);
  }
  
  // optional fixed64 max_size = 11;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->max_size(), target);
  }
  
  // optional fixed64 max_files = 12;
  if (has_max_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->max_files(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncSubscriptionDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vplex.vsDirectory.DatasetDetail dataset_details = 1;
    if (has_dataset_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataset_details());
    }
    
    // optional string absolute_device_root = 2;
    if (has_absolute_device_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_device_root());
    }
    
    // required string raw_device_root = 3;
    if (has_raw_device_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_device_root());
    }
    
    // optional string filter = 4;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }
    
    // required bool upload_ok = 5;
    if (has_upload_ok()) {
      total_size += 1 + 1;
    }
    
    // required bool download_ok = 6;
    if (has_download_ok()) {
      total_size += 1 + 1;
    }
    
    // required bool upload_delete_ok = 7;
    if (has_upload_delete_ok()) {
      total_size += 1 + 1;
    }
    
    // required bool download_delete_ok = 8;
    if (has_download_delete_ok()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string dataset_root = 9;
    if (has_dataset_root()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_root());
    }
    
    // required string dataset_location = 10;
    if (has_dataset_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_location());
    }
    
    // optional fixed64 max_size = 11;
    if (has_max_size()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 max_files = 12;
    if (has_max_files()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncSubscriptionDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncSubscriptionDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncSubscriptionDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncSubscriptionDetail::MergeFrom(const SyncSubscriptionDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataset_details()) {
      mutable_dataset_details()->::vplex::vsDirectory::DatasetDetail::MergeFrom(from.dataset_details());
    }
    if (from.has_absolute_device_root()) {
      set_absolute_device_root(from.absolute_device_root());
    }
    if (from.has_raw_device_root()) {
      set_raw_device_root(from.raw_device_root());
    }
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_upload_ok()) {
      set_upload_ok(from.upload_ok());
    }
    if (from.has_download_ok()) {
      set_download_ok(from.download_ok());
    }
    if (from.has_upload_delete_ok()) {
      set_upload_delete_ok(from.upload_delete_ok());
    }
    if (from.has_download_delete_ok()) {
      set_download_delete_ok(from.download_delete_ok());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dataset_root()) {
      set_dataset_root(from.dataset_root());
    }
    if (from.has_dataset_location()) {
      set_dataset_location(from.dataset_location());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_max_files()) {
      set_max_files(from.max_files());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncSubscriptionDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncSubscriptionDetail::CopyFrom(const SyncSubscriptionDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncSubscriptionDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003f5) != 0x000003f5) return false;
  
  if (has_dataset_details()) {
    if (!this->dataset_details().IsInitialized()) return false;
  }
  return true;
}

void SyncSubscriptionDetail::Swap(SyncSubscriptionDetail* other) {
  if (other != this) {
    std::swap(dataset_details_, other->dataset_details_);
    std::swap(absolute_device_root_, other->absolute_device_root_);
    std::swap(raw_device_root_, other->raw_device_root_);
    std::swap(filter_, other->filter_);
    std::swap(upload_ok_, other->upload_ok_);
    std::swap(download_ok_, other->download_ok_);
    std::swap(upload_delete_ok_, other->upload_delete_ok_);
    std::swap(download_delete_ok_, other->download_delete_ok_);
    std::swap(dataset_root_, other->dataset_root_);
    std::swap(dataset_location_, other->dataset_location_);
    std::swap(max_size_, other->max_size_);
    std::swap(max_files_, other->max_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncSubscriptionDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncSubscriptionDetail_descriptor_;
  metadata.reflection = SyncSubscriptionDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListSyncSubscriptionsOutput::kSubscriptionsFieldNumber;
const int ListSyncSubscriptionsOutput::kSubsFieldNumber;
#endif  // !_MSC_VER

ListSyncSubscriptionsOutput::ListSyncSubscriptionsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListSyncSubscriptionsOutput::InitAsDefaultInstance() {
}

ListSyncSubscriptionsOutput::ListSyncSubscriptionsOutput(const ListSyncSubscriptionsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListSyncSubscriptionsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListSyncSubscriptionsOutput::~ListSyncSubscriptionsOutput() {
  SharedDtor();
}

void ListSyncSubscriptionsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListSyncSubscriptionsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSyncSubscriptionsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListSyncSubscriptionsOutput_descriptor_;
}

const ListSyncSubscriptionsOutput& ListSyncSubscriptionsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListSyncSubscriptionsOutput* ListSyncSubscriptionsOutput::default_instance_ = NULL;

ListSyncSubscriptionsOutput* ListSyncSubscriptionsOutput::New() const {
  return new ListSyncSubscriptionsOutput;
}

void ListSyncSubscriptionsOutput::Clear() {
  subscriptions_.Clear();
  subs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListSyncSubscriptionsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vplex.vsDirectory.Subscription subscriptions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subscriptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subscriptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_subscriptions;
        if (input->ExpectTag(18)) goto parse_subs;
        break;
      }
      
      // repeated .ccd.SyncSubscriptionDetail subs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListSyncSubscriptionsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vplex.vsDirectory.Subscription subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriptions(i), output);
  }
  
  // repeated .ccd.SyncSubscriptionDetail subs = 2;
  for (int i = 0; i < this->subs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListSyncSubscriptionsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .vplex.vsDirectory.Subscription subscriptions = 1;
  for (int i = 0; i < this->subscriptions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->subscriptions(i), target);
  }
  
  // repeated .ccd.SyncSubscriptionDetail subs = 2;
  for (int i = 0; i < this->subs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListSyncSubscriptionsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 1;
  total_size += 1 * this->subscriptions_size();
  for (int i = 0; i < this->subscriptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscriptions(i));
  }
  
  // repeated .ccd.SyncSubscriptionDetail subs = 2;
  total_size += 1 * this->subs_size();
  for (int i = 0; i < this->subs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSyncSubscriptionsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListSyncSubscriptionsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListSyncSubscriptionsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListSyncSubscriptionsOutput::MergeFrom(const ListSyncSubscriptionsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  subscriptions_.MergeFrom(from.subscriptions_);
  subs_.MergeFrom(from.subs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListSyncSubscriptionsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSyncSubscriptionsOutput::CopyFrom(const ListSyncSubscriptionsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSyncSubscriptionsOutput::IsInitialized() const {
  
  for (int i = 0; i < subs_size(); i++) {
    if (!this->subs(i).IsInitialized()) return false;
  }
  return true;
}

void ListSyncSubscriptionsOutput::Swap(ListSyncSubscriptionsOutput* other) {
  if (other != this) {
    subscriptions_.Swap(&other->subscriptions_);
    subs_.Swap(&other->subs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListSyncSubscriptionsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListSyncSubscriptionsOutput_descriptor_;
  metadata.reflection = ListSyncSubscriptionsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteWakeupInput::kUserIdFieldNumber;
const int RemoteWakeupInput::kDeviceToWakeFieldNumber;
#endif  // !_MSC_VER

RemoteWakeupInput::RemoteWakeupInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteWakeupInput::InitAsDefaultInstance() {
}

RemoteWakeupInput::RemoteWakeupInput(const RemoteWakeupInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteWakeupInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_to_wake_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteWakeupInput::~RemoteWakeupInput() {
  SharedDtor();
}

void RemoteWakeupInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoteWakeupInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteWakeupInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteWakeupInput_descriptor_;
}

const RemoteWakeupInput& RemoteWakeupInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RemoteWakeupInput* RemoteWakeupInput::default_instance_ = NULL;

RemoteWakeupInput* RemoteWakeupInput::New() const {
  return new RemoteWakeupInput;
}

void RemoteWakeupInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_to_wake_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteWakeupInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_to_wake;
        break;
      }
      
      // required fixed64 device_to_wake = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_to_wake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_to_wake_)));
          set_has_device_to_wake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteWakeupInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 device_to_wake = 2;
  if (has_device_to_wake()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_to_wake(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteWakeupInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 device_to_wake = 2;
  if (has_device_to_wake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_to_wake(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteWakeupInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 device_to_wake = 2;
    if (has_device_to_wake()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteWakeupInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteWakeupInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteWakeupInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteWakeupInput::MergeFrom(const RemoteWakeupInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_to_wake()) {
      set_device_to_wake(from.device_to_wake());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteWakeupInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteWakeupInput::CopyFrom(const RemoteWakeupInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteWakeupInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RemoteWakeupInput::Swap(RemoteWakeupInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_to_wake_, other->device_to_wake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteWakeupInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteWakeupInput_descriptor_;
  metadata.reflection = RemoteWakeupInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteSwUpdateMessageInput::kUserIdFieldNumber;
const int RemoteSwUpdateMessageInput::kTargetDeviceIdFieldNumber;
#endif  // !_MSC_VER

RemoteSwUpdateMessageInput::RemoteSwUpdateMessageInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteSwUpdateMessageInput::InitAsDefaultInstance() {
}

RemoteSwUpdateMessageInput::RemoteSwUpdateMessageInput(const RemoteSwUpdateMessageInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteSwUpdateMessageInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  target_device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteSwUpdateMessageInput::~RemoteSwUpdateMessageInput() {
  SharedDtor();
}

void RemoteSwUpdateMessageInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoteSwUpdateMessageInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteSwUpdateMessageInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteSwUpdateMessageInput_descriptor_;
}

const RemoteSwUpdateMessageInput& RemoteSwUpdateMessageInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RemoteSwUpdateMessageInput* RemoteSwUpdateMessageInput::default_instance_ = NULL;

RemoteSwUpdateMessageInput* RemoteSwUpdateMessageInput::New() const {
  return new RemoteSwUpdateMessageInput;
}

void RemoteSwUpdateMessageInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    target_device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteSwUpdateMessageInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_target_device_id;
        break;
      }
      
      // required fixed64 target_device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &target_device_id_)));
          set_has_target_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteSwUpdateMessageInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 target_device_id = 2;
  if (has_target_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->target_device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteSwUpdateMessageInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 target_device_id = 2;
  if (has_target_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->target_device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteSwUpdateMessageInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 target_device_id = 2;
    if (has_target_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteSwUpdateMessageInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteSwUpdateMessageInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteSwUpdateMessageInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteSwUpdateMessageInput::MergeFrom(const RemoteSwUpdateMessageInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_target_device_id()) {
      set_target_device_id(from.target_device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteSwUpdateMessageInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteSwUpdateMessageInput::CopyFrom(const RemoteSwUpdateMessageInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteSwUpdateMessageInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RemoteSwUpdateMessageInput::Swap(RemoteSwUpdateMessageInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(target_device_id_, other->target_device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteSwUpdateMessageInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteSwUpdateMessageInput_descriptor_;
  metadata.reflection = RemoteSwUpdateMessageInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameDatasetInput::kUserIdFieldNumber;
const int RenameDatasetInput::kDatasetIdFieldNumber;
const int RenameDatasetInput::kDatasetNameFieldNumber;
#endif  // !_MSC_VER

RenameDatasetInput::RenameDatasetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameDatasetInput::InitAsDefaultInstance() {
}

RenameDatasetInput::RenameDatasetInput(const RenameDatasetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameDatasetInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  dataset_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameDatasetInput::~RenameDatasetInput() {
  SharedDtor();
}

void RenameDatasetInput::SharedDtor() {
  if (dataset_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dataset_name_;
  }
  if (this != default_instance_) {
  }
}

void RenameDatasetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameDatasetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameDatasetInput_descriptor_;
}

const RenameDatasetInput& RenameDatasetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RenameDatasetInput* RenameDatasetInput::default_instance_ = NULL;

RenameDatasetInput* RenameDatasetInput::New() const {
  return new RenameDatasetInput;
}

void RenameDatasetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
    if (has_dataset_name()) {
      if (dataset_name_ != &::google::protobuf::internal::kEmptyString) {
        dataset_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameDatasetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dataset_name;
        break;
      }
      
      // required string dataset_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataset_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataset_name().data(), this->dataset_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameDatasetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  // required string dataset_name = 3;
  if (has_dataset_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_name().data(), this->dataset_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dataset_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameDatasetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  // required string dataset_name = 3;
  if (has_dataset_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataset_name().data(), this->dataset_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataset_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameDatasetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // required string dataset_name = 3;
    if (has_dataset_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameDatasetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameDatasetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameDatasetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameDatasetInput::MergeFrom(const RenameDatasetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_dataset_name()) {
      set_dataset_name(from.dataset_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameDatasetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameDatasetInput::CopyFrom(const RenameDatasetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameDatasetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RenameDatasetInput::Swap(RenameDatasetInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(dataset_name_, other->dataset_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameDatasetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameDatasetInput_descriptor_;
  metadata.reflection = RenameDatasetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateMsaDataCommitInput::kUserIdFieldNumber;
const int PrivateMsaDataCommitInput::kCommitStartFieldNumber;
const int PrivateMsaDataCommitInput::kCommitEndFieldNumber;
const int PrivateMsaDataCommitInput::kInitializeFieldNumber;
#endif  // !_MSC_VER

PrivateMsaDataCommitInput::PrivateMsaDataCommitInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrivateMsaDataCommitInput::InitAsDefaultInstance() {
}

PrivateMsaDataCommitInput::PrivateMsaDataCommitInput(const PrivateMsaDataCommitInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrivateMsaDataCommitInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  commit_start_ = false;
  commit_end_ = false;
  initialize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateMsaDataCommitInput::~PrivateMsaDataCommitInput() {
  SharedDtor();
}

void PrivateMsaDataCommitInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrivateMsaDataCommitInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateMsaDataCommitInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateMsaDataCommitInput_descriptor_;
}

const PrivateMsaDataCommitInput& PrivateMsaDataCommitInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PrivateMsaDataCommitInput* PrivateMsaDataCommitInput::default_instance_ = NULL;

PrivateMsaDataCommitInput* PrivateMsaDataCommitInput::New() const {
  return new PrivateMsaDataCommitInput;
}

void PrivateMsaDataCommitInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    commit_start_ = false;
    commit_end_ = false;
    initialize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivateMsaDataCommitInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commit_start;
        break;
      }
      
      // optional bool commit_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commit_start_)));
          set_has_commit_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_commit_end;
        break;
      }
      
      // optional bool commit_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commit_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commit_end_)));
          set_has_commit_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_initialize;
        break;
      }
      
      // optional bool initialize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialize_)));
          set_has_initialize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrivateMsaDataCommitInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional bool commit_start = 3;
  if (has_commit_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->commit_start(), output);
  }
  
  // optional bool commit_end = 4;
  if (has_commit_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->commit_end(), output);
  }
  
  // optional bool initialize = 5;
  if (has_initialize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->initialize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrivateMsaDataCommitInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional bool commit_start = 3;
  if (has_commit_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->commit_start(), target);
  }
  
  // optional bool commit_end = 4;
  if (has_commit_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->commit_end(), target);
  }
  
  // optional bool initialize = 5;
  if (has_initialize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->initialize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrivateMsaDataCommitInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional bool commit_start = 3;
    if (has_commit_start()) {
      total_size += 1 + 1;
    }
    
    // optional bool commit_end = 4;
    if (has_commit_end()) {
      total_size += 1 + 1;
    }
    
    // optional bool initialize = 5;
    if (has_initialize()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateMsaDataCommitInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateMsaDataCommitInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateMsaDataCommitInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateMsaDataCommitInput::MergeFrom(const PrivateMsaDataCommitInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_commit_start()) {
      set_commit_start(from.commit_start());
    }
    if (from.has_commit_end()) {
      set_commit_end(from.commit_end());
    }
    if (from.has_initialize()) {
      set_initialize(from.initialize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivateMsaDataCommitInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateMsaDataCommitInput::CopyFrom(const PrivateMsaDataCommitInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMsaDataCommitInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PrivateMsaDataCommitInput::Swap(PrivateMsaDataCommitInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(commit_start_, other->commit_start_);
    std::swap(commit_end_, other->commit_end_);
    std::swap(initialize_, other->initialize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivateMsaDataCommitInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateMsaDataCommitInput_descriptor_;
  metadata.reflection = PrivateMsaDataCommitInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncOnceInput::kAppIdFieldNumber;
const int SyncOnceInput::kUserIdFieldNumber;
#endif  // !_MSC_VER

SyncOnceInput::SyncOnceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncOnceInput::InitAsDefaultInstance() {
}

SyncOnceInput::SyncOnceInput(const SyncOnceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncOnceInput::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncOnceInput::~SyncOnceInput() {
  SharedDtor();
}

void SyncOnceInput::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (this != default_instance_) {
  }
}

void SyncOnceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncOnceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncOnceInput_descriptor_;
}

const SyncOnceInput& SyncOnceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncOnceInput* SyncOnceInput::default_instance_ = NULL;

SyncOnceInput* SyncOnceInput::New() const {
  return new SyncOnceInput;
}

void SyncOnceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncOnceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_user_id;
        break;
      }
      
      // optional fixed64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncOnceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_id(), output);
  }
  
  // optional fixed64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncOnceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }
  
  // optional fixed64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncOnceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }
    
    // optional fixed64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncOnceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncOnceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncOnceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncOnceInput::MergeFrom(const SyncOnceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncOnceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncOnceInput::CopyFrom(const SyncOnceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncOnceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SyncOnceInput::Swap(SyncOnceInput* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncOnceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncOnceInput_descriptor_;
  metadata.reflection = SyncOnceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SyncOnceOutput::SyncOnceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncOnceOutput::InitAsDefaultInstance() {
}

SyncOnceOutput::SyncOnceOutput(const SyncOnceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncOnceOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncOnceOutput::~SyncOnceOutput() {
  SharedDtor();
}

void SyncOnceOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncOnceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncOnceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncOnceOutput_descriptor_;
}

const SyncOnceOutput& SyncOnceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncOnceOutput* SyncOnceOutput::default_instance_ = NULL;

SyncOnceOutput* SyncOnceOutput::New() const {
  return new SyncOnceOutput;
}

void SyncOnceOutput::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncOnceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SyncOnceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncOnceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncOnceOutput::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncOnceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncOnceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncOnceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncOnceOutput::MergeFrom(const SyncOnceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncOnceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncOnceOutput::CopyFrom(const SyncOnceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncOnceOutput::IsInitialized() const {
  
  return true;
}

void SyncOnceOutput::Swap(SyncOnceOutput* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncOnceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncOnceOutput_descriptor_;
  metadata.reflection = SyncOnceOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlinkDeviceInput::kUserIdFieldNumber;
const int UnlinkDeviceInput::kDeviceIdFieldNumber;
#endif  // !_MSC_VER

UnlinkDeviceInput::UnlinkDeviceInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlinkDeviceInput::InitAsDefaultInstance() {
}

UnlinkDeviceInput::UnlinkDeviceInput(const UnlinkDeviceInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlinkDeviceInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlinkDeviceInput::~UnlinkDeviceInput() {
  SharedDtor();
}

void UnlinkDeviceInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlinkDeviceInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkDeviceInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkDeviceInput_descriptor_;
}

const UnlinkDeviceInput& UnlinkDeviceInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UnlinkDeviceInput* UnlinkDeviceInput::default_instance_ = NULL;

UnlinkDeviceInput* UnlinkDeviceInput::New() const {
  return new UnlinkDeviceInput;
}

void UnlinkDeviceInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlinkDeviceInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlinkDeviceInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->device_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlinkDeviceInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional fixed64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->device_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlinkDeviceInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkDeviceInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlinkDeviceInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlinkDeviceInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlinkDeviceInput::MergeFrom(const UnlinkDeviceInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlinkDeviceInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkDeviceInput::CopyFrom(const UnlinkDeviceInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkDeviceInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnlinkDeviceInput::Swap(UnlinkDeviceInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlinkDeviceInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkDeviceInput_descriptor_;
  metadata.reflection = UnlinkDeviceInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAppStateInput::kAppIdFieldNumber;
const int UpdateAppStateInput::kAppTypeFieldNumber;
const int UpdateAppStateInput::kForegroundModeFieldNumber;
#endif  // !_MSC_VER

UpdateAppStateInput::UpdateAppStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAppStateInput::InitAsDefaultInstance() {
}

UpdateAppStateInput::UpdateAppStateInput(const UpdateAppStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAppStateInput::SharedCtor() {
  _cached_size_ = 0;
  app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_type_ = 0;
  foreground_mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAppStateInput::~UpdateAppStateInput() {
  SharedDtor();
}

void UpdateAppStateInput::SharedDtor() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_id_;
  }
  if (this != default_instance_) {
  }
}

void UpdateAppStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAppStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAppStateInput_descriptor_;
}

const UpdateAppStateInput& UpdateAppStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateAppStateInput* UpdateAppStateInput::default_instance_ = NULL;

UpdateAppStateInput* UpdateAppStateInput::New() const {
  return new UpdateAppStateInput;
}

void UpdateAppStateInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_id()) {
      if (app_id_ != &::google::protobuf::internal::kEmptyString) {
        app_id_->clear();
      }
    }
    app_type_ = 0;
    foreground_mode_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAppStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_foreground_mode;
        break;
      }
      
      // optional bool foreground_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_foreground_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &foreground_mode_)));
          set_has_foreground_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_app_type;
        break;
      }
      
      // optional .ccd.CcdApp_t app_type = 6 [default = CCD_APP_DEFAULT];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::CcdApp_t_IsValid(value)) {
            set_app_type(static_cast< ccd::CcdApp_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAppStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_id(), output);
  }
  
  // optional bool foreground_mode = 5;
  if (has_foreground_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->foreground_mode(), output);
  }
  
  // optional .ccd.CcdApp_t app_type = 6 [default = CCD_APP_DEFAULT];
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->app_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAppStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_id = 1;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }
  
  // optional bool foreground_mode = 5;
  if (has_foreground_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->foreground_mode(), target);
  }
  
  // optional .ccd.CcdApp_t app_type = 6 [default = CCD_APP_DEFAULT];
  if (has_app_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->app_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAppStateInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_id());
    }
    
    // optional .ccd.CcdApp_t app_type = 6 [default = CCD_APP_DEFAULT];
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->app_type());
    }
    
    // optional bool foreground_mode = 5;
    if (has_foreground_mode()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAppStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAppStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAppStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAppStateInput::MergeFrom(const UpdateAppStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_app_type()) {
      set_app_type(from.app_type());
    }
    if (from.has_foreground_mode()) {
      set_foreground_mode(from.foreground_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAppStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAppStateInput::CopyFrom(const UpdateAppStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppStateInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateAppStateInput::Swap(UpdateAppStateInput* other) {
  if (other != this) {
    std::swap(app_id_, other->app_id_);
    std::swap(app_type_, other->app_type_);
    std::swap(foreground_mode_, other->foreground_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAppStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAppStateInput_descriptor_;
  metadata.reflection = UpdateAppStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateAppStateOutput::kForegroundModeErrFieldNumber;
#endif  // !_MSC_VER

UpdateAppStateOutput::UpdateAppStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateAppStateOutput::InitAsDefaultInstance() {
}

UpdateAppStateOutput::UpdateAppStateOutput(const UpdateAppStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateAppStateOutput::SharedCtor() {
  _cached_size_ = 0;
  foreground_mode_err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateAppStateOutput::~UpdateAppStateOutput() {
  SharedDtor();
}

void UpdateAppStateOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateAppStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateAppStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateAppStateOutput_descriptor_;
}

const UpdateAppStateOutput& UpdateAppStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateAppStateOutput* UpdateAppStateOutput::default_instance_ = NULL;

UpdateAppStateOutput* UpdateAppStateOutput::New() const {
  return new UpdateAppStateOutput;
}

void UpdateAppStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    foreground_mode_err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateAppStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 foreground_mode_err = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &foreground_mode_err_)));
          set_has_foreground_mode_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateAppStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 foreground_mode_err = 5;
  if (has_foreground_mode_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->foreground_mode_err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateAppStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 foreground_mode_err = 5;
  if (has_foreground_mode_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->foreground_mode_err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateAppStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 foreground_mode_err = 5;
    if (has_foreground_mode_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->foreground_mode_err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateAppStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateAppStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateAppStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateAppStateOutput::MergeFrom(const UpdateAppStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_foreground_mode_err()) {
      set_foreground_mode_err(from.foreground_mode_err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateAppStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAppStateOutput::CopyFrom(const UpdateAppStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAppStateOutput::IsInitialized() const {
  
  return true;
}

void UpdateAppStateOutput::Swap(UpdateAppStateOutput* other) {
  if (other != this) {
    std::swap(foreground_mode_err_, other->foreground_mode_err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateAppStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateAppStateOutput_descriptor_;
  metadata.reflection = UpdateAppStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraRollDownloadDirSpec::kDirFieldNumber;
const int CameraRollDownloadDirSpec::kMaxSizeFieldNumber;
const int CameraRollDownloadDirSpec::kMaxFilesFieldNumber;
const int CameraRollDownloadDirSpec::kPreserveFreeDiskPercentageFieldNumber;
const int CameraRollDownloadDirSpec::kPreserveFreeDiskSizeBytesFieldNumber;
#endif  // !_MSC_VER

CameraRollDownloadDirSpec::CameraRollDownloadDirSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraRollDownloadDirSpec::InitAsDefaultInstance() {
}

CameraRollDownloadDirSpec::CameraRollDownloadDirSpec(const CameraRollDownloadDirSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraRollDownloadDirSpec::SharedCtor() {
  _cached_size_ = 0;
  dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = 0u;
  max_files_ = 0u;
  preserve_free_disk_percentage_ = 0u;
  preserve_free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraRollDownloadDirSpec::~CameraRollDownloadDirSpec() {
  SharedDtor();
}

void CameraRollDownloadDirSpec::SharedDtor() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_;
  }
  if (this != default_instance_) {
  }
}

void CameraRollDownloadDirSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraRollDownloadDirSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraRollDownloadDirSpec_descriptor_;
}

const CameraRollDownloadDirSpec& CameraRollDownloadDirSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CameraRollDownloadDirSpec* CameraRollDownloadDirSpec::default_instance_ = NULL;

CameraRollDownloadDirSpec* CameraRollDownloadDirSpec::New() const {
  return new CameraRollDownloadDirSpec;
}

void CameraRollDownloadDirSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dir()) {
      if (dir_ != &::google::protobuf::internal::kEmptyString) {
        dir_->clear();
      }
    }
    max_size_ = 0u;
    max_files_ = 0u;
    preserve_free_disk_percentage_ = 0u;
    preserve_free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraRollDownloadDirSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_size;
        break;
      }
      
      // optional uint32 max_size = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_max_files;
        break;
      }
      
      // optional uint32 max_files = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_files_)));
          set_has_max_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_preserve_free_disk_percentage;
        break;
      }
      
      // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_free_disk_percentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preserve_free_disk_percentage_)));
          set_has_preserve_free_disk_percentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_preserve_free_disk_size_bytes;
        break;
      }
      
      // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preserve_free_disk_size_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preserve_free_disk_size_bytes_)));
          set_has_preserve_free_disk_size_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraRollDownloadDirSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dir(), output);
  }
  
  // optional uint32 max_size = 7 [default = 0];
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_size(), output);
  }
  
  // optional uint32 max_files = 8 [default = 0];
  if (has_max_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_files(), output);
  }
  
  // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
  if (has_preserve_free_disk_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->preserve_free_disk_percentage(), output);
  }
  
  // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
  if (has_preserve_free_disk_size_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->preserve_free_disk_size_bytes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraRollDownloadDirSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dir = 1;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dir(), target);
  }
  
  // optional uint32 max_size = 7 [default = 0];
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_size(), target);
  }
  
  // optional uint32 max_files = 8 [default = 0];
  if (has_max_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_files(), target);
  }
  
  // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
  if (has_preserve_free_disk_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->preserve_free_disk_percentage(), target);
  }
  
  // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
  if (has_preserve_free_disk_size_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->preserve_free_disk_size_bytes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraRollDownloadDirSpec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dir = 1;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir());
    }
    
    // optional uint32 max_size = 7 [default = 0];
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_size());
    }
    
    // optional uint32 max_files = 8 [default = 0];
    if (has_max_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_files());
    }
    
    // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
    if (has_preserve_free_disk_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preserve_free_disk_percentage());
    }
    
    // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
    if (has_preserve_free_disk_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->preserve_free_disk_size_bytes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraRollDownloadDirSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraRollDownloadDirSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraRollDownloadDirSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraRollDownloadDirSpec::MergeFrom(const CameraRollDownloadDirSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_max_files()) {
      set_max_files(from.max_files());
    }
    if (from.has_preserve_free_disk_percentage()) {
      set_preserve_free_disk_percentage(from.preserve_free_disk_percentage());
    }
    if (from.has_preserve_free_disk_size_bytes()) {
      set_preserve_free_disk_size_bytes(from.preserve_free_disk_size_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraRollDownloadDirSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraRollDownloadDirSpec::CopyFrom(const CameraRollDownloadDirSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraRollDownloadDirSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CameraRollDownloadDirSpec::Swap(CameraRollDownloadDirSpec* other) {
  if (other != this) {
    std::swap(dir_, other->dir_);
    std::swap(max_size_, other->max_size_);
    std::swap(max_files_, other->max_files_);
    std::swap(preserve_free_disk_percentage_, other->preserve_free_disk_percentage_);
    std::swap(preserve_free_disk_size_bytes_, other->preserve_free_disk_size_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraRollDownloadDirSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraRollDownloadDirSpec_descriptor_;
  metadata.reflection = CameraRollDownloadDirSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaMetadataThumbMigrate::kMmDestDirFieldNumber;
#endif  // !_MSC_VER

MediaMetadataThumbMigrate::MediaMetadataThumbMigrate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MediaMetadataThumbMigrate::InitAsDefaultInstance() {
}

MediaMetadataThumbMigrate::MediaMetadataThumbMigrate(const MediaMetadataThumbMigrate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MediaMetadataThumbMigrate::SharedCtor() {
  _cached_size_ = 0;
  mm_dest_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaMetadataThumbMigrate::~MediaMetadataThumbMigrate() {
  SharedDtor();
}

void MediaMetadataThumbMigrate::SharedDtor() {
  if (mm_dest_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete mm_dest_dir_;
  }
  if (this != default_instance_) {
  }
}

void MediaMetadataThumbMigrate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaMetadataThumbMigrate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaMetadataThumbMigrate_descriptor_;
}

const MediaMetadataThumbMigrate& MediaMetadataThumbMigrate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

MediaMetadataThumbMigrate* MediaMetadataThumbMigrate::default_instance_ = NULL;

MediaMetadataThumbMigrate* MediaMetadataThumbMigrate::New() const {
  return new MediaMetadataThumbMigrate;
}

void MediaMetadataThumbMigrate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mm_dest_dir()) {
      if (mm_dest_dir_ != &::google::protobuf::internal::kEmptyString) {
        mm_dest_dir_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaMetadataThumbMigrate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mm_dest_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mm_dest_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mm_dest_dir().data(), this->mm_dest_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MediaMetadataThumbMigrate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string mm_dest_dir = 1;
  if (has_mm_dest_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_dest_dir().data(), this->mm_dest_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mm_dest_dir(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MediaMetadataThumbMigrate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string mm_dest_dir = 1;
  if (has_mm_dest_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mm_dest_dir().data(), this->mm_dest_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mm_dest_dir(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MediaMetadataThumbMigrate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string mm_dest_dir = 1;
    if (has_mm_dest_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mm_dest_dir());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaMetadataThumbMigrate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaMetadataThumbMigrate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaMetadataThumbMigrate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaMetadataThumbMigrate::MergeFrom(const MediaMetadataThumbMigrate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mm_dest_dir()) {
      set_mm_dest_dir(from.mm_dest_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaMetadataThumbMigrate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaMetadataThumbMigrate::CopyFrom(const MediaMetadataThumbMigrate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaMetadataThumbMigrate::IsInitialized() const {
  
  return true;
}

void MediaMetadataThumbMigrate::Swap(MediaMetadataThumbMigrate* other) {
  if (other != this) {
    std::swap(mm_dest_dir_, other->mm_dest_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaMetadataThumbMigrate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaMetadataThumbMigrate_descriptor_;
  metadata.reflection = MediaMetadataThumbMigrate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncFeatureSettingsRequest::kEnableSyncFeatureFieldNumber;
const int SyncFeatureSettingsRequest::kSetSyncFeaturePathFieldNumber;
const int SyncFeatureSettingsRequest::kIsArchiveStorageFieldNumber;
#endif  // !_MSC_VER

SyncFeatureSettingsRequest::SyncFeatureSettingsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncFeatureSettingsRequest::InitAsDefaultInstance() {
}

SyncFeatureSettingsRequest::SyncFeatureSettingsRequest(const SyncFeatureSettingsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncFeatureSettingsRequest::SharedCtor() {
  _cached_size_ = 0;
  enable_sync_feature_ = false;
  set_sync_feature_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_archive_storage_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncFeatureSettingsRequest::~SyncFeatureSettingsRequest() {
  SharedDtor();
}

void SyncFeatureSettingsRequest::SharedDtor() {
  if (set_sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
    delete set_sync_feature_path_;
  }
  if (this != default_instance_) {
  }
}

void SyncFeatureSettingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncFeatureSettingsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncFeatureSettingsRequest_descriptor_;
}

const SyncFeatureSettingsRequest& SyncFeatureSettingsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SyncFeatureSettingsRequest* SyncFeatureSettingsRequest::default_instance_ = NULL;

SyncFeatureSettingsRequest* SyncFeatureSettingsRequest::New() const {
  return new SyncFeatureSettingsRequest;
}

void SyncFeatureSettingsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enable_sync_feature_ = false;
    if (has_set_sync_feature_path()) {
      if (set_sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
        set_sync_feature_path_->clear();
      }
    }
    is_archive_storage_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncFeatureSettingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enable_sync_feature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_sync_feature_)));
          set_has_enable_sync_feature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_set_sync_feature_path;
        break;
      }
      
      // optional string set_sync_feature_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_sync_feature_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_sync_feature_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->set_sync_feature_path().data(), this->set_sync_feature_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_archive_storage;
        break;
      }
      
      // optional bool is_archive_storage = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_archive_storage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_archive_storage_)));
          set_has_is_archive_storage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncFeatureSettingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool enable_sync_feature = 1;
  if (has_enable_sync_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_sync_feature(), output);
  }
  
  // optional string set_sync_feature_path = 2;
  if (has_set_sync_feature_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->set_sync_feature_path().data(), this->set_sync_feature_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->set_sync_feature_path(), output);
  }
  
  // optional bool is_archive_storage = 3 [default = false];
  if (has_is_archive_storage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_archive_storage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncFeatureSettingsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool enable_sync_feature = 1;
  if (has_enable_sync_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_sync_feature(), target);
  }
  
  // optional string set_sync_feature_path = 2;
  if (has_set_sync_feature_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->set_sync_feature_path().data(), this->set_sync_feature_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->set_sync_feature_path(), target);
  }
  
  // optional bool is_archive_storage = 3 [default = false];
  if (has_is_archive_storage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_archive_storage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncFeatureSettingsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool enable_sync_feature = 1;
    if (has_enable_sync_feature()) {
      total_size += 1 + 1;
    }
    
    // optional string set_sync_feature_path = 2;
    if (has_set_sync_feature_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->set_sync_feature_path());
    }
    
    // optional bool is_archive_storage = 3 [default = false];
    if (has_is_archive_storage()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncFeatureSettingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncFeatureSettingsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncFeatureSettingsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncFeatureSettingsRequest::MergeFrom(const SyncFeatureSettingsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable_sync_feature()) {
      set_enable_sync_feature(from.enable_sync_feature());
    }
    if (from.has_set_sync_feature_path()) {
      set_set_sync_feature_path(from.set_sync_feature_path());
    }
    if (from.has_is_archive_storage()) {
      set_is_archive_storage(from.is_archive_storage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncFeatureSettingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncFeatureSettingsRequest::CopyFrom(const SyncFeatureSettingsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncFeatureSettingsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SyncFeatureSettingsRequest::Swap(SyncFeatureSettingsRequest* other) {
  if (other != this) {
    std::swap(enable_sync_feature_, other->enable_sync_feature_);
    std::swap(set_sync_feature_path_, other->set_sync_feature_path_);
    std::swap(is_archive_storage_, other->is_archive_storage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncFeatureSettingsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncFeatureSettingsRequest_descriptor_;
  metadata.reflection = SyncFeatureSettingsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSyncSettingsInput::kUserIdFieldNumber;
const int UpdateSyncSettingsInput::kSetMyDeviceNameFieldNumber;
const int UpdateSyncSettingsInput::kEnableCameraRollFieldNumber;
const int UpdateSyncSettingsInput::kEnableNetworkActivityFieldNumber;
const int UpdateSyncSettingsInput::kSetMaxDownloadRateBytesSecFieldNumber;
const int UpdateSyncSettingsInput::kSetMaxUploadRateBytesSecFieldNumber;
const int UpdateSyncSettingsInput::kBackgroundDataFieldNumber;
const int UpdateSyncSettingsInput::kAutoSyncFieldNumber;
const int UpdateSyncSettingsInput::kMobileNetworkDataFieldNumber;
const int UpdateSyncSettingsInput::kAddCameraRollUploadDirsFieldNumber;
const int UpdateSyncSettingsInput::kRemoveCameraRollUploadDirsFieldNumber;
const int UpdateSyncSettingsInput::kTriggerCameraRollUploadDirFieldNumber;
const int UpdateSyncSettingsInput::kAddCameraRollFullResDownloadDirFieldNumber;
const int UpdateSyncSettingsInput::kRemoveCameraRollFullResDownloadDirFieldNumber;
const int UpdateSyncSettingsInput::kAddCameraRollLowResDownloadDirFieldNumber;
const int UpdateSyncSettingsInput::kRemoveCameraRollLowResDownloadDirFieldNumber;
const int UpdateSyncSettingsInput::kAddCameraRollThumbDownloadDirFieldNumber;
const int UpdateSyncSettingsInput::kRemoveCameraRollThumbDownloadDirFieldNumber;
const int UpdateSyncSettingsInput::kSendFileToCameraRollFieldNumber;
const int UpdateSyncSettingsInput::kEnableGlobalDeleteFieldNumber;
const int UpdateSyncSettingsInput::kConfigureNotesSyncFieldNumber;
const int UpdateSyncSettingsInput::kEnableNotesSyncFieldNumber;
const int UpdateSyncSettingsInput::kMigrateMmThumbDownloadPathFieldNumber;
const int UpdateSyncSettingsInput::kEnableMmThumbSyncFieldNumber;
const int UpdateSyncSettingsInput::kEnableClouddocSyncFieldNumber;
const int UpdateSyncSettingsInput::kEnableMmThumbSyncTypesFieldNumber;
const int UpdateSyncSettingsInput::kConfigureSyncboxSyncFieldNumber;
const int UpdateSyncSettingsInput::kEnableSharedByMeFieldNumber;
const int UpdateSyncSettingsInput::kEnableSharedWithMeFieldNumber;
#endif  // !_MSC_VER

UpdateSyncSettingsInput::UpdateSyncSettingsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSyncSettingsInput::InitAsDefaultInstance() {
  add_camera_roll_full_res_download_dir_ = const_cast< ::ccd::CameraRollDownloadDirSpec*>(&::ccd::CameraRollDownloadDirSpec::default_instance());
  add_camera_roll_low_res_download_dir_ = const_cast< ::ccd::CameraRollDownloadDirSpec*>(&::ccd::CameraRollDownloadDirSpec::default_instance());
  add_camera_roll_thumb_download_dir_ = const_cast< ::ccd::CameraRollDownloadDirSpec*>(&::ccd::CameraRollDownloadDirSpec::default_instance());
  configure_notes_sync_ = const_cast< ::ccd::SyncFeatureSettingsRequest*>(&::ccd::SyncFeatureSettingsRequest::default_instance());
  migrate_mm_thumb_download_path_ = const_cast< ::ccd::MediaMetadataThumbMigrate*>(&::ccd::MediaMetadataThumbMigrate::default_instance());
  configure_syncbox_sync_ = const_cast< ::ccd::SyncFeatureSettingsRequest*>(&::ccd::SyncFeatureSettingsRequest::default_instance());
}

UpdateSyncSettingsInput::UpdateSyncSettingsInput(const UpdateSyncSettingsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSyncSettingsInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  set_my_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enable_camera_roll_ = false;
  enable_network_activity_ = false;
  set_max_download_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  set_max_upload_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  background_data_ = false;
  auto_sync_ = false;
  mobile_network_data_ = false;
  trigger_camera_roll_upload_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_camera_roll_full_res_download_dir_ = NULL;
  remove_camera_roll_full_res_download_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_camera_roll_low_res_download_dir_ = NULL;
  remove_camera_roll_low_res_download_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  add_camera_roll_thumb_download_dir_ = NULL;
  remove_camera_roll_thumb_download_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_file_to_camera_roll_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enable_global_delete_ = false;
  configure_notes_sync_ = NULL;
  enable_notes_sync_ = false;
  migrate_mm_thumb_download_path_ = NULL;
  enable_mm_thumb_sync_ = false;
  enable_clouddoc_sync_ = false;
  configure_syncbox_sync_ = NULL;
  enable_shared_by_me_ = false;
  enable_shared_with_me_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSyncSettingsInput::~UpdateSyncSettingsInput() {
  SharedDtor();
}

void UpdateSyncSettingsInput::SharedDtor() {
  if (set_my_device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete set_my_device_name_;
  }
  if (trigger_camera_roll_upload_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_camera_roll_upload_dir_;
  }
  if (remove_camera_roll_full_res_download_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete remove_camera_roll_full_res_download_dir_;
  }
  if (remove_camera_roll_low_res_download_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete remove_camera_roll_low_res_download_dir_;
  }
  if (remove_camera_roll_thumb_download_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete remove_camera_roll_thumb_download_dir_;
  }
  if (send_file_to_camera_roll_ != &::google::protobuf::internal::kEmptyString) {
    delete send_file_to_camera_roll_;
  }
  if (this != default_instance_) {
    delete add_camera_roll_full_res_download_dir_;
    delete add_camera_roll_low_res_download_dir_;
    delete add_camera_roll_thumb_download_dir_;
    delete configure_notes_sync_;
    delete migrate_mm_thumb_download_path_;
    delete configure_syncbox_sync_;
  }
}

void UpdateSyncSettingsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSyncSettingsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSyncSettingsInput_descriptor_;
}

const UpdateSyncSettingsInput& UpdateSyncSettingsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateSyncSettingsInput* UpdateSyncSettingsInput::default_instance_ = NULL;

UpdateSyncSettingsInput* UpdateSyncSettingsInput::New() const {
  return new UpdateSyncSettingsInput;
}

void UpdateSyncSettingsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_set_my_device_name()) {
      if (set_my_device_name_ != &::google::protobuf::internal::kEmptyString) {
        set_my_device_name_->clear();
      }
    }
    enable_camera_roll_ = false;
    enable_network_activity_ = false;
    set_max_download_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
    set_max_upload_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
    background_data_ = false;
    auto_sync_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mobile_network_data_ = false;
    if (has_trigger_camera_roll_upload_dir()) {
      if (trigger_camera_roll_upload_dir_ != &::google::protobuf::internal::kEmptyString) {
        trigger_camera_roll_upload_dir_->clear();
      }
    }
    if (has_add_camera_roll_full_res_download_dir()) {
      if (add_camera_roll_full_res_download_dir_ != NULL) add_camera_roll_full_res_download_dir_->::ccd::CameraRollDownloadDirSpec::Clear();
    }
    if (has_remove_camera_roll_full_res_download_dir()) {
      if (remove_camera_roll_full_res_download_dir_ != &::google::protobuf::internal::kEmptyString) {
        remove_camera_roll_full_res_download_dir_->clear();
      }
    }
    if (has_add_camera_roll_low_res_download_dir()) {
      if (add_camera_roll_low_res_download_dir_ != NULL) add_camera_roll_low_res_download_dir_->::ccd::CameraRollDownloadDirSpec::Clear();
    }
    if (has_remove_camera_roll_low_res_download_dir()) {
      if (remove_camera_roll_low_res_download_dir_ != &::google::protobuf::internal::kEmptyString) {
        remove_camera_roll_low_res_download_dir_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_add_camera_roll_thumb_download_dir()) {
      if (add_camera_roll_thumb_download_dir_ != NULL) add_camera_roll_thumb_download_dir_->::ccd::CameraRollDownloadDirSpec::Clear();
    }
    if (has_remove_camera_roll_thumb_download_dir()) {
      if (remove_camera_roll_thumb_download_dir_ != &::google::protobuf::internal::kEmptyString) {
        remove_camera_roll_thumb_download_dir_->clear();
      }
    }
    if (has_send_file_to_camera_roll()) {
      if (send_file_to_camera_roll_ != &::google::protobuf::internal::kEmptyString) {
        send_file_to_camera_roll_->clear();
      }
    }
    enable_global_delete_ = false;
    if (has_configure_notes_sync()) {
      if (configure_notes_sync_ != NULL) configure_notes_sync_->::ccd::SyncFeatureSettingsRequest::Clear();
    }
    enable_notes_sync_ = false;
    if (has_migrate_mm_thumb_download_path()) {
      if (migrate_mm_thumb_download_path_ != NULL) migrate_mm_thumb_download_path_->::ccd::MediaMetadataThumbMigrate::Clear();
    }
    enable_mm_thumb_sync_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    enable_clouddoc_sync_ = false;
    if (has_configure_syncbox_sync()) {
      if (configure_syncbox_sync_ != NULL) configure_syncbox_sync_->::ccd::SyncFeatureSettingsRequest::Clear();
    }
    enable_shared_by_me_ = false;
    enable_shared_with_me_ = false;
  }
  add_camera_roll_upload_dirs_.Clear();
  remove_camera_roll_upload_dirs_.Clear();
  enable_mm_thumb_sync_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSyncSettingsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_set_my_device_name;
        break;
      }
      
      // optional string set_my_device_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_set_my_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_my_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->set_my_device_name().data(), this->set_my_device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_set_max_download_rate_bytes_sec;
        break;
      }
      
      // optional uint64 set_max_download_rate_bytes_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_max_download_rate_bytes_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &set_max_download_rate_bytes_sec_)));
          set_has_set_max_download_rate_bytes_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_set_max_upload_rate_bytes_sec;
        break;
      }
      
      // optional uint64 set_max_upload_rate_bytes_sec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_max_upload_rate_bytes_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &set_max_upload_rate_bytes_sec_)));
          set_has_set_max_upload_rate_bytes_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enable_camera_roll;
        break;
      }
      
      // optional bool enable_camera_roll = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_camera_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_camera_roll_)));
          set_has_enable_camera_roll();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_enable_network_activity;
        break;
      }
      
      // optional bool enable_network_activity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_network_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_network_activity_)));
          set_has_enable_network_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_background_data;
        break;
      }
      
      // optional bool background_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &background_data_)));
          set_has_background_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_auto_sync;
        break;
      }
      
      // optional bool auto_sync = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_sync_)));
          set_has_auto_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mobile_network_data;
        break;
      }
      
      // optional bool mobile_network_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobile_network_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mobile_network_data_)));
          set_has_mobile_network_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_add_camera_roll_upload_dirs;
        break;
      }
      
      // repeated string add_camera_roll_upload_dirs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_camera_roll_upload_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_add_camera_roll_upload_dirs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->add_camera_roll_upload_dirs(0).data(), this->add_camera_roll_upload_dirs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_add_camera_roll_upload_dirs;
        if (input->ExpectTag(114)) goto parse_remove_camera_roll_upload_dirs;
        break;
      }
      
      // repeated string remove_camera_roll_upload_dirs = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_camera_roll_upload_dirs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_camera_roll_upload_dirs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remove_camera_roll_upload_dirs(0).data(), this->remove_camera_roll_upload_dirs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_remove_camera_roll_upload_dirs;
        if (input->ExpectTag(122)) goto parse_trigger_camera_roll_upload_dir;
        break;
      }
      
      // optional string trigger_camera_roll_upload_dir = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_camera_roll_upload_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_camera_roll_upload_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_camera_roll_upload_dir().data(), this->trigger_camera_roll_upload_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_add_camera_roll_full_res_download_dir;
        break;
      }
      
      // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_full_res_download_dir = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_camera_roll_full_res_download_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_camera_roll_full_res_download_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_remove_camera_roll_full_res_download_dir;
        break;
      }
      
      // optional string remove_camera_roll_full_res_download_dir = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_camera_roll_full_res_download_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remove_camera_roll_full_res_download_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remove_camera_roll_full_res_download_dir().data(), this->remove_camera_roll_full_res_download_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_add_camera_roll_low_res_download_dir;
        break;
      }
      
      // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_low_res_download_dir = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_camera_roll_low_res_download_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_camera_roll_low_res_download_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_remove_camera_roll_low_res_download_dir;
        break;
      }
      
      // optional string remove_camera_roll_low_res_download_dir = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_camera_roll_low_res_download_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remove_camera_roll_low_res_download_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remove_camera_roll_low_res_download_dir().data(), this->remove_camera_roll_low_res_download_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_send_file_to_camera_roll;
        break;
      }
      
      // optional string send_file_to_camera_roll = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_file_to_camera_roll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_send_file_to_camera_roll()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_file_to_camera_roll().data(), this->send_file_to_camera_roll().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_configure_notes_sync;
        break;
      }
      
      // optional .ccd.SyncFeatureSettingsRequest configure_notes_sync = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configure_notes_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configure_notes_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_enable_notes_sync;
        break;
      }
      
      // optional bool enable_notes_sync = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_notes_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_notes_sync_)));
          set_has_enable_notes_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_migrate_mm_thumb_download_path;
        break;
      }
      
      // optional .ccd.MediaMetadataThumbMigrate migrate_mm_thumb_download_path = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_migrate_mm_thumb_download_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_migrate_mm_thumb_download_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_enable_mm_thumb_sync;
        break;
      }
      
      // optional bool enable_mm_thumb_sync = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_mm_thumb_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_mm_thumb_sync_)));
          set_has_enable_mm_thumb_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_enable_clouddoc_sync;
        break;
      }
      
      // optional bool enable_clouddoc_sync = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_clouddoc_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_clouddoc_sync_)));
          set_has_enable_clouddoc_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_enable_mm_thumb_sync_types;
        break;
      }
      
      // repeated .ccd.SyncFeature_t enable_mm_thumb_sync_types = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_mm_thumb_sync_types:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            add_enable_mm_thumb_sync_types(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &ccd::SyncFeature_t_IsValid,
                 this->mutable_enable_mm_thumb_sync_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_enable_mm_thumb_sync_types;
        if (input->ExpectTag(258)) goto parse_add_camera_roll_thumb_download_dir;
        break;
      }
      
      // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_thumb_download_dir = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_camera_roll_thumb_download_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_camera_roll_thumb_download_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_remove_camera_roll_thumb_download_dir;
        break;
      }
      
      // optional string remove_camera_roll_thumb_download_dir = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_camera_roll_thumb_download_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remove_camera_roll_thumb_download_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remove_camera_roll_thumb_download_dir().data(), this->remove_camera_roll_thumb_download_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_enable_global_delete;
        break;
      }
      
      // optional bool enable_global_delete = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_global_delete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_global_delete_)));
          set_has_enable_global_delete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_configure_syncbox_sync;
        break;
      }
      
      // optional .ccd.SyncFeatureSettingsRequest configure_syncbox_sync = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configure_syncbox_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configure_syncbox_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_enable_shared_by_me;
        break;
      }
      
      // optional bool enable_shared_by_me = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_shared_by_me:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_shared_by_me_)));
          set_has_enable_shared_by_me();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_enable_shared_with_me;
        break;
      }
      
      // optional bool enable_shared_with_me = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_shared_with_me:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_shared_with_me_)));
          set_has_enable_shared_with_me();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSyncSettingsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // optional string set_my_device_name = 2;
  if (has_set_my_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->set_my_device_name().data(), this->set_my_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->set_my_device_name(), output);
  }
  
  // optional uint64 set_max_download_rate_bytes_sec = 5;
  if (has_set_max_download_rate_bytes_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->set_max_download_rate_bytes_sec(), output);
  }
  
  // optional uint64 set_max_upload_rate_bytes_sec = 6;
  if (has_set_max_upload_rate_bytes_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->set_max_upload_rate_bytes_sec(), output);
  }
  
  // optional bool enable_camera_roll = 7;
  if (has_enable_camera_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_camera_roll(), output);
  }
  
  // optional bool enable_network_activity = 8;
  if (has_enable_network_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->enable_network_activity(), output);
  }
  
  // optional bool background_data = 10;
  if (has_background_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->background_data(), output);
  }
  
  // optional bool auto_sync = 11;
  if (has_auto_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_sync(), output);
  }
  
  // optional bool mobile_network_data = 12;
  if (has_mobile_network_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->mobile_network_data(), output);
  }
  
  // repeated string add_camera_roll_upload_dirs = 13;
  for (int i = 0; i < this->add_camera_roll_upload_dirs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->add_camera_roll_upload_dirs(i).data(), this->add_camera_roll_upload_dirs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->add_camera_roll_upload_dirs(i), output);
  }
  
  // repeated string remove_camera_roll_upload_dirs = 14;
  for (int i = 0; i < this->remove_camera_roll_upload_dirs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->remove_camera_roll_upload_dirs(i).data(), this->remove_camera_roll_upload_dirs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->remove_camera_roll_upload_dirs(i), output);
  }
  
  // optional string trigger_camera_roll_upload_dir = 15;
  if (has_trigger_camera_roll_upload_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_camera_roll_upload_dir().data(), this->trigger_camera_roll_upload_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->trigger_camera_roll_upload_dir(), output);
  }
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_full_res_download_dir = 18;
  if (has_add_camera_roll_full_res_download_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->add_camera_roll_full_res_download_dir(), output);
  }
  
  // optional string remove_camera_roll_full_res_download_dir = 19;
  if (has_remove_camera_roll_full_res_download_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_full_res_download_dir().data(), this->remove_camera_roll_full_res_download_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->remove_camera_roll_full_res_download_dir(), output);
  }
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_low_res_download_dir = 20;
  if (has_add_camera_roll_low_res_download_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->add_camera_roll_low_res_download_dir(), output);
  }
  
  // optional string remove_camera_roll_low_res_download_dir = 21;
  if (has_remove_camera_roll_low_res_download_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_low_res_download_dir().data(), this->remove_camera_roll_low_res_download_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->remove_camera_roll_low_res_download_dir(), output);
  }
  
  // optional string send_file_to_camera_roll = 22;
  if (has_send_file_to_camera_roll()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_file_to_camera_roll().data(), this->send_file_to_camera_roll().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->send_file_to_camera_roll(), output);
  }
  
  // optional .ccd.SyncFeatureSettingsRequest configure_notes_sync = 26;
  if (has_configure_notes_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->configure_notes_sync(), output);
  }
  
  // optional bool enable_notes_sync = 27;
  if (has_enable_notes_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->enable_notes_sync(), output);
  }
  
  // optional .ccd.MediaMetadataThumbMigrate migrate_mm_thumb_download_path = 28;
  if (has_migrate_mm_thumb_download_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->migrate_mm_thumb_download_path(), output);
  }
  
  // optional bool enable_mm_thumb_sync = 29;
  if (has_enable_mm_thumb_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->enable_mm_thumb_sync(), output);
  }
  
  // optional bool enable_clouddoc_sync = 30;
  if (has_enable_clouddoc_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->enable_clouddoc_sync(), output);
  }
  
  // repeated .ccd.SyncFeature_t enable_mm_thumb_sync_types = 31;
  for (int i = 0; i < this->enable_mm_thumb_sync_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->enable_mm_thumb_sync_types(i), output);
  }
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_thumb_download_dir = 32;
  if (has_add_camera_roll_thumb_download_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->add_camera_roll_thumb_download_dir(), output);
  }
  
  // optional string remove_camera_roll_thumb_download_dir = 33;
  if (has_remove_camera_roll_thumb_download_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_thumb_download_dir().data(), this->remove_camera_roll_thumb_download_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->remove_camera_roll_thumb_download_dir(), output);
  }
  
  // optional bool enable_global_delete = 34;
  if (has_enable_global_delete()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->enable_global_delete(), output);
  }
  
  // optional .ccd.SyncFeatureSettingsRequest configure_syncbox_sync = 35;
  if (has_configure_syncbox_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->configure_syncbox_sync(), output);
  }
  
  // optional bool enable_shared_by_me = 36;
  if (has_enable_shared_by_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->enable_shared_by_me(), output);
  }
  
  // optional bool enable_shared_with_me = 37;
  if (has_enable_shared_with_me()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->enable_shared_with_me(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSyncSettingsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // optional string set_my_device_name = 2;
  if (has_set_my_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->set_my_device_name().data(), this->set_my_device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->set_my_device_name(), target);
  }
  
  // optional uint64 set_max_download_rate_bytes_sec = 5;
  if (has_set_max_download_rate_bytes_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->set_max_download_rate_bytes_sec(), target);
  }
  
  // optional uint64 set_max_upload_rate_bytes_sec = 6;
  if (has_set_max_upload_rate_bytes_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->set_max_upload_rate_bytes_sec(), target);
  }
  
  // optional bool enable_camera_roll = 7;
  if (has_enable_camera_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_camera_roll(), target);
  }
  
  // optional bool enable_network_activity = 8;
  if (has_enable_network_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->enable_network_activity(), target);
  }
  
  // optional bool background_data = 10;
  if (has_background_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->background_data(), target);
  }
  
  // optional bool auto_sync = 11;
  if (has_auto_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_sync(), target);
  }
  
  // optional bool mobile_network_data = 12;
  if (has_mobile_network_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->mobile_network_data(), target);
  }
  
  // repeated string add_camera_roll_upload_dirs = 13;
  for (int i = 0; i < this->add_camera_roll_upload_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->add_camera_roll_upload_dirs(i).data(), this->add_camera_roll_upload_dirs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->add_camera_roll_upload_dirs(i), target);
  }
  
  // repeated string remove_camera_roll_upload_dirs = 14;
  for (int i = 0; i < this->remove_camera_roll_upload_dirs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_upload_dirs(i).data(), this->remove_camera_roll_upload_dirs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->remove_camera_roll_upload_dirs(i), target);
  }
  
  // optional string trigger_camera_roll_upload_dir = 15;
  if (has_trigger_camera_roll_upload_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_camera_roll_upload_dir().data(), this->trigger_camera_roll_upload_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->trigger_camera_roll_upload_dir(), target);
  }
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_full_res_download_dir = 18;
  if (has_add_camera_roll_full_res_download_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->add_camera_roll_full_res_download_dir(), target);
  }
  
  // optional string remove_camera_roll_full_res_download_dir = 19;
  if (has_remove_camera_roll_full_res_download_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_full_res_download_dir().data(), this->remove_camera_roll_full_res_download_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->remove_camera_roll_full_res_download_dir(), target);
  }
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_low_res_download_dir = 20;
  if (has_add_camera_roll_low_res_download_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->add_camera_roll_low_res_download_dir(), target);
  }
  
  // optional string remove_camera_roll_low_res_download_dir = 21;
  if (has_remove_camera_roll_low_res_download_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_low_res_download_dir().data(), this->remove_camera_roll_low_res_download_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->remove_camera_roll_low_res_download_dir(), target);
  }
  
  // optional string send_file_to_camera_roll = 22;
  if (has_send_file_to_camera_roll()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_file_to_camera_roll().data(), this->send_file_to_camera_roll().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->send_file_to_camera_roll(), target);
  }
  
  // optional .ccd.SyncFeatureSettingsRequest configure_notes_sync = 26;
  if (has_configure_notes_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->configure_notes_sync(), target);
  }
  
  // optional bool enable_notes_sync = 27;
  if (has_enable_notes_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->enable_notes_sync(), target);
  }
  
  // optional .ccd.MediaMetadataThumbMigrate migrate_mm_thumb_download_path = 28;
  if (has_migrate_mm_thumb_download_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->migrate_mm_thumb_download_path(), target);
  }
  
  // optional bool enable_mm_thumb_sync = 29;
  if (has_enable_mm_thumb_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->enable_mm_thumb_sync(), target);
  }
  
  // optional bool enable_clouddoc_sync = 30;
  if (has_enable_clouddoc_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->enable_clouddoc_sync(), target);
  }
  
  // repeated .ccd.SyncFeature_t enable_mm_thumb_sync_types = 31;
  for (int i = 0; i < this->enable_mm_thumb_sync_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->enable_mm_thumb_sync_types(i), target);
  }
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_thumb_download_dir = 32;
  if (has_add_camera_roll_thumb_download_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->add_camera_roll_thumb_download_dir(), target);
  }
  
  // optional string remove_camera_roll_thumb_download_dir = 33;
  if (has_remove_camera_roll_thumb_download_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remove_camera_roll_thumb_download_dir().data(), this->remove_camera_roll_thumb_download_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->remove_camera_roll_thumb_download_dir(), target);
  }
  
  // optional bool enable_global_delete = 34;
  if (has_enable_global_delete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->enable_global_delete(), target);
  }
  
  // optional .ccd.SyncFeatureSettingsRequest configure_syncbox_sync = 35;
  if (has_configure_syncbox_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->configure_syncbox_sync(), target);
  }
  
  // optional bool enable_shared_by_me = 36;
  if (has_enable_shared_by_me()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->enable_shared_by_me(), target);
  }
  
  // optional bool enable_shared_with_me = 37;
  if (has_enable_shared_with_me()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->enable_shared_with_me(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSyncSettingsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // optional string set_my_device_name = 2;
    if (has_set_my_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->set_my_device_name());
    }
    
    // optional bool enable_camera_roll = 7;
    if (has_enable_camera_roll()) {
      total_size += 1 + 1;
    }
    
    // optional bool enable_network_activity = 8;
    if (has_enable_network_activity()) {
      total_size += 1 + 1;
    }
    
    // optional uint64 set_max_download_rate_bytes_sec = 5;
    if (has_set_max_download_rate_bytes_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->set_max_download_rate_bytes_sec());
    }
    
    // optional uint64 set_max_upload_rate_bytes_sec = 6;
    if (has_set_max_upload_rate_bytes_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->set_max_upload_rate_bytes_sec());
    }
    
    // optional bool background_data = 10;
    if (has_background_data()) {
      total_size += 1 + 1;
    }
    
    // optional bool auto_sync = 11;
    if (has_auto_sync()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool mobile_network_data = 12;
    if (has_mobile_network_data()) {
      total_size += 1 + 1;
    }
    
    // optional string trigger_camera_roll_upload_dir = 15;
    if (has_trigger_camera_roll_upload_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_camera_roll_upload_dir());
    }
    
    // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_full_res_download_dir = 18;
    if (has_add_camera_roll_full_res_download_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_camera_roll_full_res_download_dir());
    }
    
    // optional string remove_camera_roll_full_res_download_dir = 19;
    if (has_remove_camera_roll_full_res_download_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remove_camera_roll_full_res_download_dir());
    }
    
    // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_low_res_download_dir = 20;
    if (has_add_camera_roll_low_res_download_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_camera_roll_low_res_download_dir());
    }
    
    // optional string remove_camera_roll_low_res_download_dir = 21;
    if (has_remove_camera_roll_low_res_download_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remove_camera_roll_low_res_download_dir());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_thumb_download_dir = 32;
    if (has_add_camera_roll_thumb_download_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_camera_roll_thumb_download_dir());
    }
    
    // optional string remove_camera_roll_thumb_download_dir = 33;
    if (has_remove_camera_roll_thumb_download_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remove_camera_roll_thumb_download_dir());
    }
    
    // optional string send_file_to_camera_roll = 22;
    if (has_send_file_to_camera_roll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->send_file_to_camera_roll());
    }
    
    // optional bool enable_global_delete = 34;
    if (has_enable_global_delete()) {
      total_size += 2 + 1;
    }
    
    // optional .ccd.SyncFeatureSettingsRequest configure_notes_sync = 26;
    if (has_configure_notes_sync()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configure_notes_sync());
    }
    
    // optional bool enable_notes_sync = 27;
    if (has_enable_notes_sync()) {
      total_size += 2 + 1;
    }
    
    // optional .ccd.MediaMetadataThumbMigrate migrate_mm_thumb_download_path = 28;
    if (has_migrate_mm_thumb_download_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->migrate_mm_thumb_download_path());
    }
    
    // optional bool enable_mm_thumb_sync = 29;
    if (has_enable_mm_thumb_sync()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool enable_clouddoc_sync = 30;
    if (has_enable_clouddoc_sync()) {
      total_size += 2 + 1;
    }
    
    // optional .ccd.SyncFeatureSettingsRequest configure_syncbox_sync = 35;
    if (has_configure_syncbox_sync()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->configure_syncbox_sync());
    }
    
    // optional bool enable_shared_by_me = 36;
    if (has_enable_shared_by_me()) {
      total_size += 2 + 1;
    }
    
    // optional bool enable_shared_with_me = 37;
    if (has_enable_shared_with_me()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string add_camera_roll_upload_dirs = 13;
  total_size += 1 * this->add_camera_roll_upload_dirs_size();
  for (int i = 0; i < this->add_camera_roll_upload_dirs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->add_camera_roll_upload_dirs(i));
  }
  
  // repeated string remove_camera_roll_upload_dirs = 14;
  total_size += 1 * this->remove_camera_roll_upload_dirs_size();
  for (int i = 0; i < this->remove_camera_roll_upload_dirs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_camera_roll_upload_dirs(i));
  }
  
  // repeated .ccd.SyncFeature_t enable_mm_thumb_sync_types = 31;
  {
    int data_size = 0;
    for (int i = 0; i < this->enable_mm_thumb_sync_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->enable_mm_thumb_sync_types(i));
    }
    total_size += 2 * this->enable_mm_thumb_sync_types_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSyncSettingsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSyncSettingsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSyncSettingsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSyncSettingsInput::MergeFrom(const UpdateSyncSettingsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_camera_roll_upload_dirs_.MergeFrom(from.add_camera_roll_upload_dirs_);
  remove_camera_roll_upload_dirs_.MergeFrom(from.remove_camera_roll_upload_dirs_);
  enable_mm_thumb_sync_types_.MergeFrom(from.enable_mm_thumb_sync_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_set_my_device_name()) {
      set_set_my_device_name(from.set_my_device_name());
    }
    if (from.has_enable_camera_roll()) {
      set_enable_camera_roll(from.enable_camera_roll());
    }
    if (from.has_enable_network_activity()) {
      set_enable_network_activity(from.enable_network_activity());
    }
    if (from.has_set_max_download_rate_bytes_sec()) {
      set_set_max_download_rate_bytes_sec(from.set_max_download_rate_bytes_sec());
    }
    if (from.has_set_max_upload_rate_bytes_sec()) {
      set_set_max_upload_rate_bytes_sec(from.set_max_upload_rate_bytes_sec());
    }
    if (from.has_background_data()) {
      set_background_data(from.background_data());
    }
    if (from.has_auto_sync()) {
      set_auto_sync(from.auto_sync());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mobile_network_data()) {
      set_mobile_network_data(from.mobile_network_data());
    }
    if (from.has_trigger_camera_roll_upload_dir()) {
      set_trigger_camera_roll_upload_dir(from.trigger_camera_roll_upload_dir());
    }
    if (from.has_add_camera_roll_full_res_download_dir()) {
      mutable_add_camera_roll_full_res_download_dir()->::ccd::CameraRollDownloadDirSpec::MergeFrom(from.add_camera_roll_full_res_download_dir());
    }
    if (from.has_remove_camera_roll_full_res_download_dir()) {
      set_remove_camera_roll_full_res_download_dir(from.remove_camera_roll_full_res_download_dir());
    }
    if (from.has_add_camera_roll_low_res_download_dir()) {
      mutable_add_camera_roll_low_res_download_dir()->::ccd::CameraRollDownloadDirSpec::MergeFrom(from.add_camera_roll_low_res_download_dir());
    }
    if (from.has_remove_camera_roll_low_res_download_dir()) {
      set_remove_camera_roll_low_res_download_dir(from.remove_camera_roll_low_res_download_dir());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_add_camera_roll_thumb_download_dir()) {
      mutable_add_camera_roll_thumb_download_dir()->::ccd::CameraRollDownloadDirSpec::MergeFrom(from.add_camera_roll_thumb_download_dir());
    }
    if (from.has_remove_camera_roll_thumb_download_dir()) {
      set_remove_camera_roll_thumb_download_dir(from.remove_camera_roll_thumb_download_dir());
    }
    if (from.has_send_file_to_camera_roll()) {
      set_send_file_to_camera_roll(from.send_file_to_camera_roll());
    }
    if (from.has_enable_global_delete()) {
      set_enable_global_delete(from.enable_global_delete());
    }
    if (from.has_configure_notes_sync()) {
      mutable_configure_notes_sync()->::ccd::SyncFeatureSettingsRequest::MergeFrom(from.configure_notes_sync());
    }
    if (from.has_enable_notes_sync()) {
      set_enable_notes_sync(from.enable_notes_sync());
    }
    if (from.has_migrate_mm_thumb_download_path()) {
      mutable_migrate_mm_thumb_download_path()->::ccd::MediaMetadataThumbMigrate::MergeFrom(from.migrate_mm_thumb_download_path());
    }
    if (from.has_enable_mm_thumb_sync()) {
      set_enable_mm_thumb_sync(from.enable_mm_thumb_sync());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_enable_clouddoc_sync()) {
      set_enable_clouddoc_sync(from.enable_clouddoc_sync());
    }
    if (from.has_configure_syncbox_sync()) {
      mutable_configure_syncbox_sync()->::ccd::SyncFeatureSettingsRequest::MergeFrom(from.configure_syncbox_sync());
    }
    if (from.has_enable_shared_by_me()) {
      set_enable_shared_by_me(from.enable_shared_by_me());
    }
    if (from.has_enable_shared_with_me()) {
      set_enable_shared_with_me(from.enable_shared_with_me());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSyncSettingsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSyncSettingsInput::CopyFrom(const UpdateSyncSettingsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSyncSettingsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_add_camera_roll_full_res_download_dir()) {
    if (!this->add_camera_roll_full_res_download_dir().IsInitialized()) return false;
  }
  if (has_add_camera_roll_low_res_download_dir()) {
    if (!this->add_camera_roll_low_res_download_dir().IsInitialized()) return false;
  }
  if (has_add_camera_roll_thumb_download_dir()) {
    if (!this->add_camera_roll_thumb_download_dir().IsInitialized()) return false;
  }
  if (has_configure_notes_sync()) {
    if (!this->configure_notes_sync().IsInitialized()) return false;
  }
  if (has_configure_syncbox_sync()) {
    if (!this->configure_syncbox_sync().IsInitialized()) return false;
  }
  return true;
}

void UpdateSyncSettingsInput::Swap(UpdateSyncSettingsInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(set_my_device_name_, other->set_my_device_name_);
    std::swap(enable_camera_roll_, other->enable_camera_roll_);
    std::swap(enable_network_activity_, other->enable_network_activity_);
    std::swap(set_max_download_rate_bytes_sec_, other->set_max_download_rate_bytes_sec_);
    std::swap(set_max_upload_rate_bytes_sec_, other->set_max_upload_rate_bytes_sec_);
    std::swap(background_data_, other->background_data_);
    std::swap(auto_sync_, other->auto_sync_);
    std::swap(mobile_network_data_, other->mobile_network_data_);
    add_camera_roll_upload_dirs_.Swap(&other->add_camera_roll_upload_dirs_);
    remove_camera_roll_upload_dirs_.Swap(&other->remove_camera_roll_upload_dirs_);
    std::swap(trigger_camera_roll_upload_dir_, other->trigger_camera_roll_upload_dir_);
    std::swap(add_camera_roll_full_res_download_dir_, other->add_camera_roll_full_res_download_dir_);
    std::swap(remove_camera_roll_full_res_download_dir_, other->remove_camera_roll_full_res_download_dir_);
    std::swap(add_camera_roll_low_res_download_dir_, other->add_camera_roll_low_res_download_dir_);
    std::swap(remove_camera_roll_low_res_download_dir_, other->remove_camera_roll_low_res_download_dir_);
    std::swap(add_camera_roll_thumb_download_dir_, other->add_camera_roll_thumb_download_dir_);
    std::swap(remove_camera_roll_thumb_download_dir_, other->remove_camera_roll_thumb_download_dir_);
    std::swap(send_file_to_camera_roll_, other->send_file_to_camera_roll_);
    std::swap(enable_global_delete_, other->enable_global_delete_);
    std::swap(configure_notes_sync_, other->configure_notes_sync_);
    std::swap(enable_notes_sync_, other->enable_notes_sync_);
    std::swap(migrate_mm_thumb_download_path_, other->migrate_mm_thumb_download_path_);
    std::swap(enable_mm_thumb_sync_, other->enable_mm_thumb_sync_);
    std::swap(enable_clouddoc_sync_, other->enable_clouddoc_sync_);
    enable_mm_thumb_sync_types_.Swap(&other->enable_mm_thumb_sync_types_);
    std::swap(configure_syncbox_sync_, other->configure_syncbox_sync_);
    std::swap(enable_shared_by_me_, other->enable_shared_by_me_);
    std::swap(enable_shared_with_me_, other->enable_shared_with_me_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSyncSettingsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSyncSettingsInput_descriptor_;
  metadata.reflection = UpdateSyncSettingsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSyncSettingsOutput::kSetMyDeviceNameErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableCameraRollErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableGlobalDeleteErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableNetworkActivityErrFieldNumber;
const int UpdateSyncSettingsOutput::kSetMaxDownloadRateErrFieldNumber;
const int UpdateSyncSettingsOutput::kSetMaxUploadRateErrFieldNumber;
const int UpdateSyncSettingsOutput::kBackgroundDataErrFieldNumber;
const int UpdateSyncSettingsOutput::kAutoSyncErrFieldNumber;
const int UpdateSyncSettingsOutput::kMobileNetworkDataErrFieldNumber;
const int UpdateSyncSettingsOutput::kAddCameraRollUploadDirsErrFieldNumber;
const int UpdateSyncSettingsOutput::kRemoveCameraRollUploadDirsErrFieldNumber;
const int UpdateSyncSettingsOutput::kTriggerCameraRollUploadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kAddCameraRollFullResDownloadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kRemoveCameraRollFullResDownloadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kAddCameraRollLowResDownloadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kRemoveCameraRollLowResDownloadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kAddCameraRollThumbDownloadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kRemoveCameraRollThumbDownloadDirErrFieldNumber;
const int UpdateSyncSettingsOutput::kSendFileToCameraRollErrFieldNumber;
const int UpdateSyncSettingsOutput::kConfigureNotesSyncErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableNotesSyncErrFieldNumber;
const int UpdateSyncSettingsOutput::kMigrateMmThumbDownloadPathErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableMmThumbSyncErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableClouddocSyncErrFieldNumber;
const int UpdateSyncSettingsOutput::kConfigureSyncboxSyncErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableSharedByMeErrFieldNumber;
const int UpdateSyncSettingsOutput::kEnableSharedWithMeErrFieldNumber;
#endif  // !_MSC_VER

UpdateSyncSettingsOutput::UpdateSyncSettingsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSyncSettingsOutput::InitAsDefaultInstance() {
}

UpdateSyncSettingsOutput::UpdateSyncSettingsOutput(const UpdateSyncSettingsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSyncSettingsOutput::SharedCtor() {
  _cached_size_ = 0;
  set_my_device_name_err_ = 0;
  enable_camera_roll_err_ = 0;
  enable_global_delete_err_ = 0;
  enable_network_activity_err_ = 0;
  set_max_download_rate_err_ = 0;
  set_max_upload_rate_err_ = 0;
  background_data_err_ = 0;
  auto_sync_err_ = 0;
  mobile_network_data_err_ = 0;
  add_camera_roll_upload_dirs_err_ = 0;
  remove_camera_roll_upload_dirs_err_ = 0;
  trigger_camera_roll_upload_dir_err_ = 0;
  add_camera_roll_full_res_download_dir_err_ = 0;
  remove_camera_roll_full_res_download_dir_err_ = 0;
  add_camera_roll_low_res_download_dir_err_ = 0;
  remove_camera_roll_low_res_download_dir_err_ = 0;
  add_camera_roll_thumb_download_dir_err_ = 0;
  remove_camera_roll_thumb_download_dir_err_ = 0;
  send_file_to_camera_roll_err_ = 0;
  configure_notes_sync_err_ = 0;
  enable_notes_sync_err_ = 0;
  migrate_mm_thumb_download_path_err_ = 0;
  enable_mm_thumb_sync_err_ = 0;
  enable_clouddoc_sync_err_ = 0;
  configure_syncbox_sync_err_ = 0;
  enable_shared_by_me_err_ = 0;
  enable_shared_with_me_err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSyncSettingsOutput::~UpdateSyncSettingsOutput() {
  SharedDtor();
}

void UpdateSyncSettingsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSyncSettingsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSyncSettingsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSyncSettingsOutput_descriptor_;
}

const UpdateSyncSettingsOutput& UpdateSyncSettingsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateSyncSettingsOutput* UpdateSyncSettingsOutput::default_instance_ = NULL;

UpdateSyncSettingsOutput* UpdateSyncSettingsOutput::New() const {
  return new UpdateSyncSettingsOutput;
}

void UpdateSyncSettingsOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    set_my_device_name_err_ = 0;
    enable_camera_roll_err_ = 0;
    enable_global_delete_err_ = 0;
    enable_network_activity_err_ = 0;
    set_max_download_rate_err_ = 0;
    set_max_upload_rate_err_ = 0;
    background_data_err_ = 0;
    auto_sync_err_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mobile_network_data_err_ = 0;
    add_camera_roll_upload_dirs_err_ = 0;
    remove_camera_roll_upload_dirs_err_ = 0;
    trigger_camera_roll_upload_dir_err_ = 0;
    add_camera_roll_full_res_download_dir_err_ = 0;
    remove_camera_roll_full_res_download_dir_err_ = 0;
    add_camera_roll_low_res_download_dir_err_ = 0;
    remove_camera_roll_low_res_download_dir_err_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    add_camera_roll_thumb_download_dir_err_ = 0;
    remove_camera_roll_thumb_download_dir_err_ = 0;
    send_file_to_camera_roll_err_ = 0;
    configure_notes_sync_err_ = 0;
    enable_notes_sync_err_ = 0;
    migrate_mm_thumb_download_path_err_ = 0;
    enable_mm_thumb_sync_err_ = 0;
    enable_clouddoc_sync_err_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    configure_syncbox_sync_err_ = 0;
    enable_shared_by_me_err_ = 0;
    enable_shared_with_me_err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSyncSettingsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 set_my_device_name_err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &set_my_device_name_err_)));
          set_has_set_my_device_name_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_set_max_download_rate_err;
        break;
      }
      
      // optional sint32 set_max_download_rate_err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_max_download_rate_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &set_max_download_rate_err_)));
          set_has_set_max_download_rate_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_set_max_upload_rate_err;
        break;
      }
      
      // optional sint32 set_max_upload_rate_err = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_set_max_upload_rate_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &set_max_upload_rate_err_)));
          set_has_set_max_upload_rate_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enable_camera_roll_err;
        break;
      }
      
      // optional sint32 enable_camera_roll_err = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_camera_roll_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_camera_roll_err_)));
          set_has_enable_camera_roll_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enable_network_activity_err;
        break;
      }
      
      // optional sint32 enable_network_activity_err = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_network_activity_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_network_activity_err_)));
          set_has_enable_network_activity_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_background_data_err;
        break;
      }
      
      // optional sint32 background_data_err = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_background_data_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &background_data_err_)));
          set_has_background_data_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_auto_sync_err;
        break;
      }
      
      // optional sint32 auto_sync_err = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_sync_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &auto_sync_err_)));
          set_has_auto_sync_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mobile_network_data_err;
        break;
      }
      
      // optional sint32 mobile_network_data_err = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mobile_network_data_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mobile_network_data_err_)));
          set_has_mobile_network_data_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_add_camera_roll_upload_dirs_err;
        break;
      }
      
      // optional sint32 add_camera_roll_upload_dirs_err = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_camera_roll_upload_dirs_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &add_camera_roll_upload_dirs_err_)));
          set_has_add_camera_roll_upload_dirs_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_remove_camera_roll_upload_dirs_err;
        break;
      }
      
      // optional sint32 remove_camera_roll_upload_dirs_err = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_camera_roll_upload_dirs_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remove_camera_roll_upload_dirs_err_)));
          set_has_remove_camera_roll_upload_dirs_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_trigger_camera_roll_upload_dir_err;
        break;
      }
      
      // optional sint32 trigger_camera_roll_upload_dir_err = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_camera_roll_upload_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &trigger_camera_roll_upload_dir_err_)));
          set_has_trigger_camera_roll_upload_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_add_camera_roll_full_res_download_dir_err;
        break;
      }
      
      // optional sint32 add_camera_roll_full_res_download_dir_err = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_camera_roll_full_res_download_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &add_camera_roll_full_res_download_dir_err_)));
          set_has_add_camera_roll_full_res_download_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_remove_camera_roll_full_res_download_dir_err;
        break;
      }
      
      // optional sint32 remove_camera_roll_full_res_download_dir_err = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_camera_roll_full_res_download_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remove_camera_roll_full_res_download_dir_err_)));
          set_has_remove_camera_roll_full_res_download_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_add_camera_roll_low_res_download_dir_err;
        break;
      }
      
      // optional sint32 add_camera_roll_low_res_download_dir_err = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_camera_roll_low_res_download_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &add_camera_roll_low_res_download_dir_err_)));
          set_has_add_camera_roll_low_res_download_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_remove_camera_roll_low_res_download_dir_err;
        break;
      }
      
      // optional sint32 remove_camera_roll_low_res_download_dir_err = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_camera_roll_low_res_download_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remove_camera_roll_low_res_download_dir_err_)));
          set_has_remove_camera_roll_low_res_download_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_send_file_to_camera_roll_err;
        break;
      }
      
      // optional sint32 send_file_to_camera_roll_err = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_file_to_camera_roll_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &send_file_to_camera_roll_err_)));
          set_has_send_file_to_camera_roll_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_configure_notes_sync_err;
        break;
      }
      
      // optional sint32 configure_notes_sync_err = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_configure_notes_sync_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &configure_notes_sync_err_)));
          set_has_configure_notes_sync_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_enable_notes_sync_err;
        break;
      }
      
      // optional sint32 enable_notes_sync_err = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_notes_sync_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_notes_sync_err_)));
          set_has_enable_notes_sync_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_migrate_mm_thumb_download_path_err;
        break;
      }
      
      // optional sint32 migrate_mm_thumb_download_path_err = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_migrate_mm_thumb_download_path_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &migrate_mm_thumb_download_path_err_)));
          set_has_migrate_mm_thumb_download_path_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_enable_mm_thumb_sync_err;
        break;
      }
      
      // optional sint32 enable_mm_thumb_sync_err = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_mm_thumb_sync_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_mm_thumb_sync_err_)));
          set_has_enable_mm_thumb_sync_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_enable_clouddoc_sync_err;
        break;
      }
      
      // optional sint32 enable_clouddoc_sync_err = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_clouddoc_sync_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_clouddoc_sync_err_)));
          set_has_enable_clouddoc_sync_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_configure_syncbox_sync_err;
        break;
      }
      
      // optional sint32 configure_syncbox_sync_err = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_configure_syncbox_sync_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &configure_syncbox_sync_err_)));
          set_has_configure_syncbox_sync_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_add_camera_roll_thumb_download_dir_err;
        break;
      }
      
      // optional sint32 add_camera_roll_thumb_download_dir_err = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_camera_roll_thumb_download_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &add_camera_roll_thumb_download_dir_err_)));
          set_has_add_camera_roll_thumb_download_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_remove_camera_roll_thumb_download_dir_err;
        break;
      }
      
      // optional sint32 remove_camera_roll_thumb_download_dir_err = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remove_camera_roll_thumb_download_dir_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &remove_camera_roll_thumb_download_dir_err_)));
          set_has_remove_camera_roll_thumb_download_dir_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_enable_global_delete_err;
        break;
      }
      
      // optional sint32 enable_global_delete_err = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_global_delete_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_global_delete_err_)));
          set_has_enable_global_delete_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_enable_shared_by_me_err;
        break;
      }
      
      // optional sint32 enable_shared_by_me_err = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_shared_by_me_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_shared_by_me_err_)));
          set_has_enable_shared_by_me_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_enable_shared_with_me_err;
        break;
      }
      
      // optional sint32 enable_shared_with_me_err = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_shared_with_me_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_shared_with_me_err_)));
          set_has_enable_shared_with_me_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSyncSettingsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 set_my_device_name_err = 1;
  if (has_set_my_device_name_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->set_my_device_name_err(), output);
  }
  
  // optional sint32 set_max_download_rate_err = 4;
  if (has_set_max_download_rate_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->set_max_download_rate_err(), output);
  }
  
  // optional sint32 set_max_upload_rate_err = 5;
  if (has_set_max_upload_rate_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->set_max_upload_rate_err(), output);
  }
  
  // optional sint32 enable_camera_roll_err = 6;
  if (has_enable_camera_roll_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->enable_camera_roll_err(), output);
  }
  
  // optional sint32 enable_network_activity_err = 7;
  if (has_enable_network_activity_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->enable_network_activity_err(), output);
  }
  
  // optional sint32 background_data_err = 10;
  if (has_background_data_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->background_data_err(), output);
  }
  
  // optional sint32 auto_sync_err = 11;
  if (has_auto_sync_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->auto_sync_err(), output);
  }
  
  // optional sint32 mobile_network_data_err = 12;
  if (has_mobile_network_data_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->mobile_network_data_err(), output);
  }
  
  // optional sint32 add_camera_roll_upload_dirs_err = 13;
  if (has_add_camera_roll_upload_dirs_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->add_camera_roll_upload_dirs_err(), output);
  }
  
  // optional sint32 remove_camera_roll_upload_dirs_err = 14;
  if (has_remove_camera_roll_upload_dirs_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->remove_camera_roll_upload_dirs_err(), output);
  }
  
  // optional sint32 trigger_camera_roll_upload_dir_err = 15;
  if (has_trigger_camera_roll_upload_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->trigger_camera_roll_upload_dir_err(), output);
  }
  
  // optional sint32 add_camera_roll_full_res_download_dir_err = 18;
  if (has_add_camera_roll_full_res_download_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(18, this->add_camera_roll_full_res_download_dir_err(), output);
  }
  
  // optional sint32 remove_camera_roll_full_res_download_dir_err = 19;
  if (has_remove_camera_roll_full_res_download_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(19, this->remove_camera_roll_full_res_download_dir_err(), output);
  }
  
  // optional sint32 add_camera_roll_low_res_download_dir_err = 20;
  if (has_add_camera_roll_low_res_download_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->add_camera_roll_low_res_download_dir_err(), output);
  }
  
  // optional sint32 remove_camera_roll_low_res_download_dir_err = 21;
  if (has_remove_camera_roll_low_res_download_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->remove_camera_roll_low_res_download_dir_err(), output);
  }
  
  // optional sint32 send_file_to_camera_roll_err = 22;
  if (has_send_file_to_camera_roll_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->send_file_to_camera_roll_err(), output);
  }
  
  // optional sint32 configure_notes_sync_err = 26;
  if (has_configure_notes_sync_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(26, this->configure_notes_sync_err(), output);
  }
  
  // optional sint32 enable_notes_sync_err = 27;
  if (has_enable_notes_sync_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(27, this->enable_notes_sync_err(), output);
  }
  
  // optional sint32 migrate_mm_thumb_download_path_err = 28;
  if (has_migrate_mm_thumb_download_path_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(28, this->migrate_mm_thumb_download_path_err(), output);
  }
  
  // optional sint32 enable_mm_thumb_sync_err = 29;
  if (has_enable_mm_thumb_sync_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->enable_mm_thumb_sync_err(), output);
  }
  
  // optional sint32 enable_clouddoc_sync_err = 30;
  if (has_enable_clouddoc_sync_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(30, this->enable_clouddoc_sync_err(), output);
  }
  
  // optional sint32 configure_syncbox_sync_err = 31;
  if (has_configure_syncbox_sync_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->configure_syncbox_sync_err(), output);
  }
  
  // optional sint32 add_camera_roll_thumb_download_dir_err = 32;
  if (has_add_camera_roll_thumb_download_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(32, this->add_camera_roll_thumb_download_dir_err(), output);
  }
  
  // optional sint32 remove_camera_roll_thumb_download_dir_err = 33;
  if (has_remove_camera_roll_thumb_download_dir_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(33, this->remove_camera_roll_thumb_download_dir_err(), output);
  }
  
  // optional sint32 enable_global_delete_err = 34;
  if (has_enable_global_delete_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(34, this->enable_global_delete_err(), output);
  }
  
  // optional sint32 enable_shared_by_me_err = 35;
  if (has_enable_shared_by_me_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(35, this->enable_shared_by_me_err(), output);
  }
  
  // optional sint32 enable_shared_with_me_err = 36;
  if (has_enable_shared_with_me_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(36, this->enable_shared_with_me_err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSyncSettingsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 set_my_device_name_err = 1;
  if (has_set_my_device_name_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->set_my_device_name_err(), target);
  }
  
  // optional sint32 set_max_download_rate_err = 4;
  if (has_set_max_download_rate_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->set_max_download_rate_err(), target);
  }
  
  // optional sint32 set_max_upload_rate_err = 5;
  if (has_set_max_upload_rate_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->set_max_upload_rate_err(), target);
  }
  
  // optional sint32 enable_camera_roll_err = 6;
  if (has_enable_camera_roll_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->enable_camera_roll_err(), target);
  }
  
  // optional sint32 enable_network_activity_err = 7;
  if (has_enable_network_activity_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->enable_network_activity_err(), target);
  }
  
  // optional sint32 background_data_err = 10;
  if (has_background_data_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->background_data_err(), target);
  }
  
  // optional sint32 auto_sync_err = 11;
  if (has_auto_sync_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->auto_sync_err(), target);
  }
  
  // optional sint32 mobile_network_data_err = 12;
  if (has_mobile_network_data_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->mobile_network_data_err(), target);
  }
  
  // optional sint32 add_camera_roll_upload_dirs_err = 13;
  if (has_add_camera_roll_upload_dirs_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->add_camera_roll_upload_dirs_err(), target);
  }
  
  // optional sint32 remove_camera_roll_upload_dirs_err = 14;
  if (has_remove_camera_roll_upload_dirs_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->remove_camera_roll_upload_dirs_err(), target);
  }
  
  // optional sint32 trigger_camera_roll_upload_dir_err = 15;
  if (has_trigger_camera_roll_upload_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->trigger_camera_roll_upload_dir_err(), target);
  }
  
  // optional sint32 add_camera_roll_full_res_download_dir_err = 18;
  if (has_add_camera_roll_full_res_download_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(18, this->add_camera_roll_full_res_download_dir_err(), target);
  }
  
  // optional sint32 remove_camera_roll_full_res_download_dir_err = 19;
  if (has_remove_camera_roll_full_res_download_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(19, this->remove_camera_roll_full_res_download_dir_err(), target);
  }
  
  // optional sint32 add_camera_roll_low_res_download_dir_err = 20;
  if (has_add_camera_roll_low_res_download_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->add_camera_roll_low_res_download_dir_err(), target);
  }
  
  // optional sint32 remove_camera_roll_low_res_download_dir_err = 21;
  if (has_remove_camera_roll_low_res_download_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->remove_camera_roll_low_res_download_dir_err(), target);
  }
  
  // optional sint32 send_file_to_camera_roll_err = 22;
  if (has_send_file_to_camera_roll_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->send_file_to_camera_roll_err(), target);
  }
  
  // optional sint32 configure_notes_sync_err = 26;
  if (has_configure_notes_sync_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(26, this->configure_notes_sync_err(), target);
  }
  
  // optional sint32 enable_notes_sync_err = 27;
  if (has_enable_notes_sync_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(27, this->enable_notes_sync_err(), target);
  }
  
  // optional sint32 migrate_mm_thumb_download_path_err = 28;
  if (has_migrate_mm_thumb_download_path_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(28, this->migrate_mm_thumb_download_path_err(), target);
  }
  
  // optional sint32 enable_mm_thumb_sync_err = 29;
  if (has_enable_mm_thumb_sync_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->enable_mm_thumb_sync_err(), target);
  }
  
  // optional sint32 enable_clouddoc_sync_err = 30;
  if (has_enable_clouddoc_sync_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(30, this->enable_clouddoc_sync_err(), target);
  }
  
  // optional sint32 configure_syncbox_sync_err = 31;
  if (has_configure_syncbox_sync_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->configure_syncbox_sync_err(), target);
  }
  
  // optional sint32 add_camera_roll_thumb_download_dir_err = 32;
  if (has_add_camera_roll_thumb_download_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(32, this->add_camera_roll_thumb_download_dir_err(), target);
  }
  
  // optional sint32 remove_camera_roll_thumb_download_dir_err = 33;
  if (has_remove_camera_roll_thumb_download_dir_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(33, this->remove_camera_roll_thumb_download_dir_err(), target);
  }
  
  // optional sint32 enable_global_delete_err = 34;
  if (has_enable_global_delete_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(34, this->enable_global_delete_err(), target);
  }
  
  // optional sint32 enable_shared_by_me_err = 35;
  if (has_enable_shared_by_me_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(35, this->enable_shared_by_me_err(), target);
  }
  
  // optional sint32 enable_shared_with_me_err = 36;
  if (has_enable_shared_with_me_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(36, this->enable_shared_with_me_err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSyncSettingsOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 set_my_device_name_err = 1;
    if (has_set_my_device_name_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->set_my_device_name_err());
    }
    
    // optional sint32 enable_camera_roll_err = 6;
    if (has_enable_camera_roll_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_camera_roll_err());
    }
    
    // optional sint32 enable_global_delete_err = 34;
    if (has_enable_global_delete_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_global_delete_err());
    }
    
    // optional sint32 enable_network_activity_err = 7;
    if (has_enable_network_activity_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_network_activity_err());
    }
    
    // optional sint32 set_max_download_rate_err = 4;
    if (has_set_max_download_rate_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->set_max_download_rate_err());
    }
    
    // optional sint32 set_max_upload_rate_err = 5;
    if (has_set_max_upload_rate_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->set_max_upload_rate_err());
    }
    
    // optional sint32 background_data_err = 10;
    if (has_background_data_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->background_data_err());
    }
    
    // optional sint32 auto_sync_err = 11;
    if (has_auto_sync_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->auto_sync_err());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 mobile_network_data_err = 12;
    if (has_mobile_network_data_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mobile_network_data_err());
    }
    
    // optional sint32 add_camera_roll_upload_dirs_err = 13;
    if (has_add_camera_roll_upload_dirs_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->add_camera_roll_upload_dirs_err());
    }
    
    // optional sint32 remove_camera_roll_upload_dirs_err = 14;
    if (has_remove_camera_roll_upload_dirs_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remove_camera_roll_upload_dirs_err());
    }
    
    // optional sint32 trigger_camera_roll_upload_dir_err = 15;
    if (has_trigger_camera_roll_upload_dir_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->trigger_camera_roll_upload_dir_err());
    }
    
    // optional sint32 add_camera_roll_full_res_download_dir_err = 18;
    if (has_add_camera_roll_full_res_download_dir_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->add_camera_roll_full_res_download_dir_err());
    }
    
    // optional sint32 remove_camera_roll_full_res_download_dir_err = 19;
    if (has_remove_camera_roll_full_res_download_dir_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remove_camera_roll_full_res_download_dir_err());
    }
    
    // optional sint32 add_camera_roll_low_res_download_dir_err = 20;
    if (has_add_camera_roll_low_res_download_dir_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->add_camera_roll_low_res_download_dir_err());
    }
    
    // optional sint32 remove_camera_roll_low_res_download_dir_err = 21;
    if (has_remove_camera_roll_low_res_download_dir_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remove_camera_roll_low_res_download_dir_err());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sint32 add_camera_roll_thumb_download_dir_err = 32;
    if (has_add_camera_roll_thumb_download_dir_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->add_camera_roll_thumb_download_dir_err());
    }
    
    // optional sint32 remove_camera_roll_thumb_download_dir_err = 33;
    if (has_remove_camera_roll_thumb_download_dir_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->remove_camera_roll_thumb_download_dir_err());
    }
    
    // optional sint32 send_file_to_camera_roll_err = 22;
    if (has_send_file_to_camera_roll_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->send_file_to_camera_roll_err());
    }
    
    // optional sint32 configure_notes_sync_err = 26;
    if (has_configure_notes_sync_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->configure_notes_sync_err());
    }
    
    // optional sint32 enable_notes_sync_err = 27;
    if (has_enable_notes_sync_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_notes_sync_err());
    }
    
    // optional sint32 migrate_mm_thumb_download_path_err = 28;
    if (has_migrate_mm_thumb_download_path_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->migrate_mm_thumb_download_path_err());
    }
    
    // optional sint32 enable_mm_thumb_sync_err = 29;
    if (has_enable_mm_thumb_sync_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_mm_thumb_sync_err());
    }
    
    // optional sint32 enable_clouddoc_sync_err = 30;
    if (has_enable_clouddoc_sync_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_clouddoc_sync_err());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sint32 configure_syncbox_sync_err = 31;
    if (has_configure_syncbox_sync_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->configure_syncbox_sync_err());
    }
    
    // optional sint32 enable_shared_by_me_err = 35;
    if (has_enable_shared_by_me_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_shared_by_me_err());
    }
    
    // optional sint32 enable_shared_with_me_err = 36;
    if (has_enable_shared_with_me_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_shared_with_me_err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSyncSettingsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSyncSettingsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSyncSettingsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSyncSettingsOutput::MergeFrom(const UpdateSyncSettingsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_my_device_name_err()) {
      set_set_my_device_name_err(from.set_my_device_name_err());
    }
    if (from.has_enable_camera_roll_err()) {
      set_enable_camera_roll_err(from.enable_camera_roll_err());
    }
    if (from.has_enable_global_delete_err()) {
      set_enable_global_delete_err(from.enable_global_delete_err());
    }
    if (from.has_enable_network_activity_err()) {
      set_enable_network_activity_err(from.enable_network_activity_err());
    }
    if (from.has_set_max_download_rate_err()) {
      set_set_max_download_rate_err(from.set_max_download_rate_err());
    }
    if (from.has_set_max_upload_rate_err()) {
      set_set_max_upload_rate_err(from.set_max_upload_rate_err());
    }
    if (from.has_background_data_err()) {
      set_background_data_err(from.background_data_err());
    }
    if (from.has_auto_sync_err()) {
      set_auto_sync_err(from.auto_sync_err());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mobile_network_data_err()) {
      set_mobile_network_data_err(from.mobile_network_data_err());
    }
    if (from.has_add_camera_roll_upload_dirs_err()) {
      set_add_camera_roll_upload_dirs_err(from.add_camera_roll_upload_dirs_err());
    }
    if (from.has_remove_camera_roll_upload_dirs_err()) {
      set_remove_camera_roll_upload_dirs_err(from.remove_camera_roll_upload_dirs_err());
    }
    if (from.has_trigger_camera_roll_upload_dir_err()) {
      set_trigger_camera_roll_upload_dir_err(from.trigger_camera_roll_upload_dir_err());
    }
    if (from.has_add_camera_roll_full_res_download_dir_err()) {
      set_add_camera_roll_full_res_download_dir_err(from.add_camera_roll_full_res_download_dir_err());
    }
    if (from.has_remove_camera_roll_full_res_download_dir_err()) {
      set_remove_camera_roll_full_res_download_dir_err(from.remove_camera_roll_full_res_download_dir_err());
    }
    if (from.has_add_camera_roll_low_res_download_dir_err()) {
      set_add_camera_roll_low_res_download_dir_err(from.add_camera_roll_low_res_download_dir_err());
    }
    if (from.has_remove_camera_roll_low_res_download_dir_err()) {
      set_remove_camera_roll_low_res_download_dir_err(from.remove_camera_roll_low_res_download_dir_err());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_add_camera_roll_thumb_download_dir_err()) {
      set_add_camera_roll_thumb_download_dir_err(from.add_camera_roll_thumb_download_dir_err());
    }
    if (from.has_remove_camera_roll_thumb_download_dir_err()) {
      set_remove_camera_roll_thumb_download_dir_err(from.remove_camera_roll_thumb_download_dir_err());
    }
    if (from.has_send_file_to_camera_roll_err()) {
      set_send_file_to_camera_roll_err(from.send_file_to_camera_roll_err());
    }
    if (from.has_configure_notes_sync_err()) {
      set_configure_notes_sync_err(from.configure_notes_sync_err());
    }
    if (from.has_enable_notes_sync_err()) {
      set_enable_notes_sync_err(from.enable_notes_sync_err());
    }
    if (from.has_migrate_mm_thumb_download_path_err()) {
      set_migrate_mm_thumb_download_path_err(from.migrate_mm_thumb_download_path_err());
    }
    if (from.has_enable_mm_thumb_sync_err()) {
      set_enable_mm_thumb_sync_err(from.enable_mm_thumb_sync_err());
    }
    if (from.has_enable_clouddoc_sync_err()) {
      set_enable_clouddoc_sync_err(from.enable_clouddoc_sync_err());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_configure_syncbox_sync_err()) {
      set_configure_syncbox_sync_err(from.configure_syncbox_sync_err());
    }
    if (from.has_enable_shared_by_me_err()) {
      set_enable_shared_by_me_err(from.enable_shared_by_me_err());
    }
    if (from.has_enable_shared_with_me_err()) {
      set_enable_shared_with_me_err(from.enable_shared_with_me_err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSyncSettingsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSyncSettingsOutput::CopyFrom(const UpdateSyncSettingsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSyncSettingsOutput::IsInitialized() const {
  
  return true;
}

void UpdateSyncSettingsOutput::Swap(UpdateSyncSettingsOutput* other) {
  if (other != this) {
    std::swap(set_my_device_name_err_, other->set_my_device_name_err_);
    std::swap(enable_camera_roll_err_, other->enable_camera_roll_err_);
    std::swap(enable_global_delete_err_, other->enable_global_delete_err_);
    std::swap(enable_network_activity_err_, other->enable_network_activity_err_);
    std::swap(set_max_download_rate_err_, other->set_max_download_rate_err_);
    std::swap(set_max_upload_rate_err_, other->set_max_upload_rate_err_);
    std::swap(background_data_err_, other->background_data_err_);
    std::swap(auto_sync_err_, other->auto_sync_err_);
    std::swap(mobile_network_data_err_, other->mobile_network_data_err_);
    std::swap(add_camera_roll_upload_dirs_err_, other->add_camera_roll_upload_dirs_err_);
    std::swap(remove_camera_roll_upload_dirs_err_, other->remove_camera_roll_upload_dirs_err_);
    std::swap(trigger_camera_roll_upload_dir_err_, other->trigger_camera_roll_upload_dir_err_);
    std::swap(add_camera_roll_full_res_download_dir_err_, other->add_camera_roll_full_res_download_dir_err_);
    std::swap(remove_camera_roll_full_res_download_dir_err_, other->remove_camera_roll_full_res_download_dir_err_);
    std::swap(add_camera_roll_low_res_download_dir_err_, other->add_camera_roll_low_res_download_dir_err_);
    std::swap(remove_camera_roll_low_res_download_dir_err_, other->remove_camera_roll_low_res_download_dir_err_);
    std::swap(add_camera_roll_thumb_download_dir_err_, other->add_camera_roll_thumb_download_dir_err_);
    std::swap(remove_camera_roll_thumb_download_dir_err_, other->remove_camera_roll_thumb_download_dir_err_);
    std::swap(send_file_to_camera_roll_err_, other->send_file_to_camera_roll_err_);
    std::swap(configure_notes_sync_err_, other->configure_notes_sync_err_);
    std::swap(enable_notes_sync_err_, other->enable_notes_sync_err_);
    std::swap(migrate_mm_thumb_download_path_err_, other->migrate_mm_thumb_download_path_err_);
    std::swap(enable_mm_thumb_sync_err_, other->enable_mm_thumb_sync_err_);
    std::swap(enable_clouddoc_sync_err_, other->enable_clouddoc_sync_err_);
    std::swap(configure_syncbox_sync_err_, other->configure_syncbox_sync_err_);
    std::swap(enable_shared_by_me_err_, other->enable_shared_by_me_err_);
    std::swap(enable_shared_with_me_err_, other->enable_shared_with_me_err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSyncSettingsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSyncSettingsOutput_descriptor_;
  metadata.reflection = UpdateSyncSettingsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSyncSubscriptionInput::kUserIdFieldNumber;
const int UpdateSyncSubscriptionInput::kDatasetIdFieldNumber;
const int UpdateSyncSubscriptionInput::kDeviceIdFieldNumber;
const int UpdateSyncSubscriptionInput::kNewFilterFieldNumber;
const int UpdateSyncSubscriptionInput::kMaxSizeFieldNumber;
const int UpdateSyncSubscriptionInput::kMaxFilesFieldNumber;
#endif  // !_MSC_VER

UpdateSyncSubscriptionInput::UpdateSyncSubscriptionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSyncSubscriptionInput::InitAsDefaultInstance() {
}

UpdateSyncSubscriptionInput::UpdateSyncSubscriptionInput(const UpdateSyncSubscriptionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSyncSubscriptionInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  dataset_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  new_filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = GOOGLE_ULONGLONG(0);
  max_files_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSyncSubscriptionInput::~UpdateSyncSubscriptionInput() {
  SharedDtor();
}

void UpdateSyncSubscriptionInput::SharedDtor() {
  if (new_filter_ != &::google::protobuf::internal::kEmptyString) {
    delete new_filter_;
  }
  if (this != default_instance_) {
  }
}

void UpdateSyncSubscriptionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSyncSubscriptionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSyncSubscriptionInput_descriptor_;
}

const UpdateSyncSubscriptionInput& UpdateSyncSubscriptionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateSyncSubscriptionInput* UpdateSyncSubscriptionInput::default_instance_ = NULL;

UpdateSyncSubscriptionInput* UpdateSyncSubscriptionInput::New() const {
  return new UpdateSyncSubscriptionInput;
}

void UpdateSyncSubscriptionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    dataset_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_new_filter()) {
      if (new_filter_ != &::google::protobuf::internal::kEmptyString) {
        new_filter_->clear();
      }
    }
    max_size_ = GOOGLE_ULONGLONG(0);
    max_files_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSyncSubscriptionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dataset_id;
        break;
      }
      
      // required fixed64 dataset_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dataset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dataset_id_)));
          set_has_dataset_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_device_id;
        break;
      }
      
      // optional fixed64 device_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_new_filter;
        break;
      }
      
      // optional string new_filter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_filter().data(), this->new_filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_max_size;
        break;
      }
      
      // optional fixed64 max_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_max_files;
        break;
      }
      
      // optional fixed64 max_files = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &max_files_)));
          set_has_max_files();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSyncSubscriptionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->dataset_id(), output);
  }
  
  // optional fixed64 device_id = 3;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->device_id(), output);
  }
  
  // optional string new_filter = 4;
  if (has_new_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_filter().data(), this->new_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->new_filter(), output);
  }
  
  // optional fixed64 max_size = 5;
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->max_size(), output);
  }
  
  // optional fixed64 max_files = 6;
  if (has_max_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->max_files(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSyncSubscriptionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 dataset_id = 2;
  if (has_dataset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->dataset_id(), target);
  }
  
  // optional fixed64 device_id = 3;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->device_id(), target);
  }
  
  // optional string new_filter = 4;
  if (has_new_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_filter().data(), this->new_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->new_filter(), target);
  }
  
  // optional fixed64 max_size = 5;
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->max_size(), target);
  }
  
  // optional fixed64 max_files = 6;
  if (has_max_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->max_files(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSyncSubscriptionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 dataset_id = 2;
    if (has_dataset_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 device_id = 3;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // optional string new_filter = 4;
    if (has_new_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_filter());
    }
    
    // optional fixed64 max_size = 5;
    if (has_max_size()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 max_files = 6;
    if (has_max_files()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSyncSubscriptionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSyncSubscriptionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSyncSubscriptionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSyncSubscriptionInput::MergeFrom(const UpdateSyncSubscriptionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_dataset_id()) {
      set_dataset_id(from.dataset_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_new_filter()) {
      set_new_filter(from.new_filter());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
    if (from.has_max_files()) {
      set_max_files(from.max_files());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSyncSubscriptionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSyncSubscriptionInput::CopyFrom(const UpdateSyncSubscriptionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSyncSubscriptionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UpdateSyncSubscriptionInput::Swap(UpdateSyncSubscriptionInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(dataset_id_, other->dataset_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(new_filter_, other->new_filter_);
    std::swap(max_size_, other->max_size_);
    std::swap(max_files_, other->max_files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSyncSubscriptionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSyncSubscriptionInput_descriptor_;
  metadata.reflection = UpdateSyncSubscriptionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateCheckInput::kAppGuidFieldNumber;
const int SWUpdateCheckInput::kAppVersionFieldNumber;
const int SWUpdateCheckInput::kUpdateCacheFieldNumber;
#endif  // !_MSC_VER

SWUpdateCheckInput::SWUpdateCheckInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateCheckInput::InitAsDefaultInstance() {
}

SWUpdateCheckInput::SWUpdateCheckInput(const SWUpdateCheckInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateCheckInput::SharedCtor() {
  _cached_size_ = 0;
  app_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_cache_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateCheckInput::~SWUpdateCheckInput() {
  SharedDtor();
}

void SWUpdateCheckInput::SharedDtor() {
  if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete app_guid_;
  }
  if (app_version_ != &::google::protobuf::internal::kEmptyString) {
    delete app_version_;
  }
  if (this != default_instance_) {
  }
}

void SWUpdateCheckInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateCheckInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateCheckInput_descriptor_;
}

const SWUpdateCheckInput& SWUpdateCheckInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateCheckInput* SWUpdateCheckInput::default_instance_ = NULL;

SWUpdateCheckInput* SWUpdateCheckInput::New() const {
  return new SWUpdateCheckInput;
}

void SWUpdateCheckInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_guid()) {
      if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
        app_guid_->clear();
      }
    }
    if (has_app_version()) {
      if (app_version_ != &::google::protobuf::internal::kEmptyString) {
        app_version_->clear();
      }
    }
    update_cache_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateCheckInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_guid().data(), this->app_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_version;
        break;
      }
      
      // required string app_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_version().data(), this->app_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update_cache;
        break;
      }
      
      // optional bool update_cache = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_cache_)));
          set_has_update_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateCheckInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_guid = 1;
  if (has_app_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_guid().data(), this->app_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_guid(), output);
  }
  
  // required string app_version = 2;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_version().data(), this->app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_version(), output);
  }
  
  // optional bool update_cache = 3;
  if (has_update_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->update_cache(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateCheckInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_guid = 1;
  if (has_app_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_guid().data(), this->app_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_guid(), target);
  }
  
  // required string app_version = 2;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_version().data(), this->app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_version(), target);
  }
  
  // optional bool update_cache = 3;
  if (has_update_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->update_cache(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateCheckInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_guid = 1;
    if (has_app_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_guid());
    }
    
    // required string app_version = 2;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_version());
    }
    
    // optional bool update_cache = 3;
    if (has_update_cache()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateCheckInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateCheckInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateCheckInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateCheckInput::MergeFrom(const SWUpdateCheckInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_guid()) {
      set_app_guid(from.app_guid());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_update_cache()) {
      set_update_cache(from.update_cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateCheckInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateCheckInput::CopyFrom(const SWUpdateCheckInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateCheckInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SWUpdateCheckInput::Swap(SWUpdateCheckInput* other) {
  if (other != this) {
    std::swap(app_guid_, other->app_guid_);
    std::swap(app_version_, other->app_version_);
    std::swap(update_cache_, other->update_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateCheckInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateCheckInput_descriptor_;
  metadata.reflection = SWUpdateCheckInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateCheckOutput::kUpdateMaskFieldNumber;
const int SWUpdateCheckOutput::kLatestAppVersionFieldNumber;
const int SWUpdateCheckOutput::kLatestCcdVersionFieldNumber;
const int SWUpdateCheckOutput::kChangeLogFieldNumber;
const int SWUpdateCheckOutput::kAppSizeFieldNumber;
const int SWUpdateCheckOutput::kIsQaFieldNumber;
const int SWUpdateCheckOutput::kIsAutoUpdateDisabledFieldNumber;
const int SWUpdateCheckOutput::kIsInfraDownloadFieldNumber;
#endif  // !_MSC_VER

SWUpdateCheckOutput::SWUpdateCheckOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateCheckOutput::InitAsDefaultInstance() {
}

SWUpdateCheckOutput::SWUpdateCheckOutput(const SWUpdateCheckOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateCheckOutput::SharedCtor() {
  _cached_size_ = 0;
  update_mask_ = GOOGLE_ULONGLONG(0);
  latest_app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latest_ccd_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_size_ = GOOGLE_ULONGLONG(0);
  is_qa_ = false;
  is_auto_update_disabled_ = false;
  is_infra_download_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateCheckOutput::~SWUpdateCheckOutput() {
  SharedDtor();
}

void SWUpdateCheckOutput::SharedDtor() {
  if (latest_app_version_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_app_version_;
  }
  if (latest_ccd_version_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_ccd_version_;
  }
  if (change_log_ != &::google::protobuf::internal::kEmptyString) {
    delete change_log_;
  }
  if (this != default_instance_) {
  }
}

void SWUpdateCheckOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateCheckOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateCheckOutput_descriptor_;
}

const SWUpdateCheckOutput& SWUpdateCheckOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateCheckOutput* SWUpdateCheckOutput::default_instance_ = NULL;

SWUpdateCheckOutput* SWUpdateCheckOutput::New() const {
  return new SWUpdateCheckOutput;
}

void SWUpdateCheckOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_mask_ = GOOGLE_ULONGLONG(0);
    if (has_latest_app_version()) {
      if (latest_app_version_ != &::google::protobuf::internal::kEmptyString) {
        latest_app_version_->clear();
      }
    }
    if (has_latest_ccd_version()) {
      if (latest_ccd_version_ != &::google::protobuf::internal::kEmptyString) {
        latest_ccd_version_->clear();
      }
    }
    if (has_change_log()) {
      if (change_log_ != &::google::protobuf::internal::kEmptyString) {
        change_log_->clear();
      }
    }
    app_size_ = GOOGLE_ULONGLONG(0);
    is_qa_ = false;
    is_auto_update_disabled_ = false;
    is_infra_download_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateCheckOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 update_mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_mask_)));
          set_has_update_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_latest_app_version;
        break;
      }
      
      // required string latest_app_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_app_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latest_app_version().data(), this->latest_app_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_latest_ccd_version;
        break;
      }
      
      // required string latest_ccd_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_ccd_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_ccd_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latest_ccd_version().data(), this->latest_ccd_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_change_log;
        break;
      }
      
      // required string change_log = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->change_log().data(), this->change_log().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_app_size;
        break;
      }
      
      // optional uint64 app_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &app_size_)));
          set_has_app_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_qa;
        break;
      }
      
      // optional bool is_qa = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_qa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_qa_)));
          set_has_is_qa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_auto_update_disabled;
        break;
      }
      
      // optional bool is_auto_update_disabled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_update_disabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_update_disabled_)));
          set_has_is_auto_update_disabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_infra_download;
        break;
      }
      
      // optional bool is_infra_download = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_infra_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_infra_download_)));
          set_has_is_infra_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateCheckOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 update_mask = 1;
  if (has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->update_mask(), output);
  }
  
  // required string latest_app_version = 2;
  if (has_latest_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_app_version().data(), this->latest_app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->latest_app_version(), output);
  }
  
  // required string latest_ccd_version = 3;
  if (has_latest_ccd_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_ccd_version().data(), this->latest_ccd_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->latest_ccd_version(), output);
  }
  
  // required string change_log = 4;
  if (has_change_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->change_log().data(), this->change_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->change_log(), output);
  }
  
  // optional uint64 app_size = 5;
  if (has_app_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->app_size(), output);
  }
  
  // optional bool is_qa = 6;
  if (has_is_qa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_qa(), output);
  }
  
  // optional bool is_auto_update_disabled = 7;
  if (has_is_auto_update_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_auto_update_disabled(), output);
  }
  
  // optional bool is_infra_download = 8;
  if (has_is_infra_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_infra_download(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateCheckOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 update_mask = 1;
  if (has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->update_mask(), target);
  }
  
  // required string latest_app_version = 2;
  if (has_latest_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_app_version().data(), this->latest_app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->latest_app_version(), target);
  }
  
  // required string latest_ccd_version = 3;
  if (has_latest_ccd_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_ccd_version().data(), this->latest_ccd_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->latest_ccd_version(), target);
  }
  
  // required string change_log = 4;
  if (has_change_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->change_log().data(), this->change_log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->change_log(), target);
  }
  
  // optional uint64 app_size = 5;
  if (has_app_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->app_size(), target);
  }
  
  // optional bool is_qa = 6;
  if (has_is_qa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_qa(), target);
  }
  
  // optional bool is_auto_update_disabled = 7;
  if (has_is_auto_update_disabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_auto_update_disabled(), target);
  }
  
  // optional bool is_infra_download = 8;
  if (has_is_infra_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_infra_download(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateCheckOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 update_mask = 1;
    if (has_update_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_mask());
    }
    
    // required string latest_app_version = 2;
    if (has_latest_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_app_version());
    }
    
    // required string latest_ccd_version = 3;
    if (has_latest_ccd_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_ccd_version());
    }
    
    // required string change_log = 4;
    if (has_change_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_log());
    }
    
    // optional uint64 app_size = 5;
    if (has_app_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->app_size());
    }
    
    // optional bool is_qa = 6;
    if (has_is_qa()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_auto_update_disabled = 7;
    if (has_is_auto_update_disabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_infra_download = 8;
    if (has_is_infra_download()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateCheckOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateCheckOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateCheckOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateCheckOutput::MergeFrom(const SWUpdateCheckOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_mask()) {
      set_update_mask(from.update_mask());
    }
    if (from.has_latest_app_version()) {
      set_latest_app_version(from.latest_app_version());
    }
    if (from.has_latest_ccd_version()) {
      set_latest_ccd_version(from.latest_ccd_version());
    }
    if (from.has_change_log()) {
      set_change_log(from.change_log());
    }
    if (from.has_app_size()) {
      set_app_size(from.app_size());
    }
    if (from.has_is_qa()) {
      set_is_qa(from.is_qa());
    }
    if (from.has_is_auto_update_disabled()) {
      set_is_auto_update_disabled(from.is_auto_update_disabled());
    }
    if (from.has_is_infra_download()) {
      set_is_infra_download(from.is_infra_download());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateCheckOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateCheckOutput::CopyFrom(const SWUpdateCheckOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateCheckOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SWUpdateCheckOutput::Swap(SWUpdateCheckOutput* other) {
  if (other != this) {
    std::swap(update_mask_, other->update_mask_);
    std::swap(latest_app_version_, other->latest_app_version_);
    std::swap(latest_ccd_version_, other->latest_ccd_version_);
    std::swap(change_log_, other->change_log_);
    std::swap(app_size_, other->app_size_);
    std::swap(is_qa_, other->is_qa_);
    std::swap(is_auto_update_disabled_, other->is_auto_update_disabled_);
    std::swap(is_infra_download_, other->is_infra_download_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateCheckOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateCheckOutput_descriptor_;
  metadata.reflection = SWUpdateCheckOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateBeginDownloadInput::kAppGuidFieldNumber;
const int SWUpdateBeginDownloadInput::kAppVersionFieldNumber;
#endif  // !_MSC_VER

SWUpdateBeginDownloadInput::SWUpdateBeginDownloadInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateBeginDownloadInput::InitAsDefaultInstance() {
}

SWUpdateBeginDownloadInput::SWUpdateBeginDownloadInput(const SWUpdateBeginDownloadInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateBeginDownloadInput::SharedCtor() {
  _cached_size_ = 0;
  app_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateBeginDownloadInput::~SWUpdateBeginDownloadInput() {
  SharedDtor();
}

void SWUpdateBeginDownloadInput::SharedDtor() {
  if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete app_guid_;
  }
  if (app_version_ != &::google::protobuf::internal::kEmptyString) {
    delete app_version_;
  }
  if (this != default_instance_) {
  }
}

void SWUpdateBeginDownloadInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateBeginDownloadInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateBeginDownloadInput_descriptor_;
}

const SWUpdateBeginDownloadInput& SWUpdateBeginDownloadInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateBeginDownloadInput* SWUpdateBeginDownloadInput::default_instance_ = NULL;

SWUpdateBeginDownloadInput* SWUpdateBeginDownloadInput::New() const {
  return new SWUpdateBeginDownloadInput;
}

void SWUpdateBeginDownloadInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_guid()) {
      if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
        app_guid_->clear();
      }
    }
    if (has_app_version()) {
      if (app_version_ != &::google::protobuf::internal::kEmptyString) {
        app_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateBeginDownloadInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_guid().data(), this->app_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_version;
        break;
      }
      
      // required string app_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_version().data(), this->app_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateBeginDownloadInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_guid = 1;
  if (has_app_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_guid().data(), this->app_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_guid(), output);
  }
  
  // required string app_version = 2;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_version().data(), this->app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateBeginDownloadInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_guid = 1;
  if (has_app_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_guid().data(), this->app_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_guid(), target);
  }
  
  // required string app_version = 2;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_version().data(), this->app_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateBeginDownloadInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_guid = 1;
    if (has_app_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_guid());
    }
    
    // required string app_version = 2;
    if (has_app_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateBeginDownloadInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateBeginDownloadInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateBeginDownloadInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateBeginDownloadInput::MergeFrom(const SWUpdateBeginDownloadInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_guid()) {
      set_app_guid(from.app_guid());
    }
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateBeginDownloadInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateBeginDownloadInput::CopyFrom(const SWUpdateBeginDownloadInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateBeginDownloadInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SWUpdateBeginDownloadInput::Swap(SWUpdateBeginDownloadInput* other) {
  if (other != this) {
    std::swap(app_guid_, other->app_guid_);
    std::swap(app_version_, other->app_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateBeginDownloadInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateBeginDownloadInput_descriptor_;
  metadata.reflection = SWUpdateBeginDownloadInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateBeginDownloadOutput::kHandleFieldNumber;
#endif  // !_MSC_VER

SWUpdateBeginDownloadOutput::SWUpdateBeginDownloadOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateBeginDownloadOutput::InitAsDefaultInstance() {
}

SWUpdateBeginDownloadOutput::SWUpdateBeginDownloadOutput(const SWUpdateBeginDownloadOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateBeginDownloadOutput::SharedCtor() {
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateBeginDownloadOutput::~SWUpdateBeginDownloadOutput() {
  SharedDtor();
}

void SWUpdateBeginDownloadOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SWUpdateBeginDownloadOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateBeginDownloadOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateBeginDownloadOutput_descriptor_;
}

const SWUpdateBeginDownloadOutput& SWUpdateBeginDownloadOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateBeginDownloadOutput* SWUpdateBeginDownloadOutput::default_instance_ = NULL;

SWUpdateBeginDownloadOutput* SWUpdateBeginDownloadOutput::New() const {
  return new SWUpdateBeginDownloadOutput;
}

void SWUpdateBeginDownloadOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateBeginDownloadOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateBeginDownloadOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateBeginDownloadOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateBeginDownloadOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateBeginDownloadOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateBeginDownloadOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateBeginDownloadOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateBeginDownloadOutput::MergeFrom(const SWUpdateBeginDownloadOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateBeginDownloadOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateBeginDownloadOutput::CopyFrom(const SWUpdateBeginDownloadOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateBeginDownloadOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SWUpdateBeginDownloadOutput::Swap(SWUpdateBeginDownloadOutput* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateBeginDownloadOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateBeginDownloadOutput_descriptor_;
  metadata.reflection = SWUpdateBeginDownloadOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateGetDownloadProgressInput::kHandleFieldNumber;
#endif  // !_MSC_VER

SWUpdateGetDownloadProgressInput::SWUpdateGetDownloadProgressInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateGetDownloadProgressInput::InitAsDefaultInstance() {
}

SWUpdateGetDownloadProgressInput::SWUpdateGetDownloadProgressInput(const SWUpdateGetDownloadProgressInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateGetDownloadProgressInput::SharedCtor() {
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateGetDownloadProgressInput::~SWUpdateGetDownloadProgressInput() {
  SharedDtor();
}

void SWUpdateGetDownloadProgressInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SWUpdateGetDownloadProgressInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateGetDownloadProgressInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateGetDownloadProgressInput_descriptor_;
}

const SWUpdateGetDownloadProgressInput& SWUpdateGetDownloadProgressInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateGetDownloadProgressInput* SWUpdateGetDownloadProgressInput::default_instance_ = NULL;

SWUpdateGetDownloadProgressInput* SWUpdateGetDownloadProgressInput::New() const {
  return new SWUpdateGetDownloadProgressInput;
}

void SWUpdateGetDownloadProgressInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateGetDownloadProgressInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateGetDownloadProgressInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateGetDownloadProgressInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateGetDownloadProgressInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateGetDownloadProgressInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateGetDownloadProgressInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateGetDownloadProgressInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateGetDownloadProgressInput::MergeFrom(const SWUpdateGetDownloadProgressInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateGetDownloadProgressInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateGetDownloadProgressInput::CopyFrom(const SWUpdateGetDownloadProgressInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateGetDownloadProgressInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SWUpdateGetDownloadProgressInput::Swap(SWUpdateGetDownloadProgressInput* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateGetDownloadProgressInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateGetDownloadProgressInput_descriptor_;
  metadata.reflection = SWUpdateGetDownloadProgressInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateGetDownloadProgressOutput::kTotalTransferSizeFieldNumber;
const int SWUpdateGetDownloadProgressOutput::kBytesTransferredCntFieldNumber;
const int SWUpdateGetDownloadProgressOutput::kStateFieldNumber;
#endif  // !_MSC_VER

SWUpdateGetDownloadProgressOutput::SWUpdateGetDownloadProgressOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateGetDownloadProgressOutput::InitAsDefaultInstance() {
}

SWUpdateGetDownloadProgressOutput::SWUpdateGetDownloadProgressOutput(const SWUpdateGetDownloadProgressOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateGetDownloadProgressOutput::SharedCtor() {
  _cached_size_ = 0;
  total_transfer_size_ = GOOGLE_ULONGLONG(0);
  bytes_transferred_cnt_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateGetDownloadProgressOutput::~SWUpdateGetDownloadProgressOutput() {
  SharedDtor();
}

void SWUpdateGetDownloadProgressOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SWUpdateGetDownloadProgressOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateGetDownloadProgressOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateGetDownloadProgressOutput_descriptor_;
}

const SWUpdateGetDownloadProgressOutput& SWUpdateGetDownloadProgressOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateGetDownloadProgressOutput* SWUpdateGetDownloadProgressOutput::default_instance_ = NULL;

SWUpdateGetDownloadProgressOutput* SWUpdateGetDownloadProgressOutput::New() const {
  return new SWUpdateGetDownloadProgressOutput;
}

void SWUpdateGetDownloadProgressOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_transfer_size_ = GOOGLE_ULONGLONG(0);
    bytes_transferred_cnt_ = GOOGLE_ULONGLONG(0);
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateGetDownloadProgressOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 total_transfer_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_transfer_size_)));
          set_has_total_transfer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytes_transferred_cnt;
        break;
      }
      
      // required uint64 bytes_transferred_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytes_transferred_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_transferred_cnt_)));
          set_has_bytes_transferred_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }
      
      // required .ccd.SWUpdateDownloadState_t state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SWUpdateDownloadState_t_IsValid(value)) {
            set_state(static_cast< ccd::SWUpdateDownloadState_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateGetDownloadProgressOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 total_transfer_size = 1;
  if (has_total_transfer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total_transfer_size(), output);
  }
  
  // required uint64 bytes_transferred_cnt = 2;
  if (has_bytes_transferred_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_transferred_cnt(), output);
  }
  
  // required .ccd.SWUpdateDownloadState_t state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateGetDownloadProgressOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 total_transfer_size = 1;
  if (has_total_transfer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->total_transfer_size(), target);
  }
  
  // required uint64 bytes_transferred_cnt = 2;
  if (has_bytes_transferred_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_transferred_cnt(), target);
  }
  
  // required .ccd.SWUpdateDownloadState_t state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateGetDownloadProgressOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 total_transfer_size = 1;
    if (has_total_transfer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_transfer_size());
    }
    
    // required uint64 bytes_transferred_cnt = 2;
    if (has_bytes_transferred_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_transferred_cnt());
    }
    
    // required .ccd.SWUpdateDownloadState_t state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateGetDownloadProgressOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateGetDownloadProgressOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateGetDownloadProgressOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateGetDownloadProgressOutput::MergeFrom(const SWUpdateGetDownloadProgressOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_transfer_size()) {
      set_total_transfer_size(from.total_transfer_size());
    }
    if (from.has_bytes_transferred_cnt()) {
      set_bytes_transferred_cnt(from.bytes_transferred_cnt());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateGetDownloadProgressOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateGetDownloadProgressOutput::CopyFrom(const SWUpdateGetDownloadProgressOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateGetDownloadProgressOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SWUpdateGetDownloadProgressOutput::Swap(SWUpdateGetDownloadProgressOutput* other) {
  if (other != this) {
    std::swap(total_transfer_size_, other->total_transfer_size_);
    std::swap(bytes_transferred_cnt_, other->bytes_transferred_cnt_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateGetDownloadProgressOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateGetDownloadProgressOutput_descriptor_;
  metadata.reflection = SWUpdateGetDownloadProgressOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateEndDownloadInput::kHandleFieldNumber;
const int SWUpdateEndDownloadInput::kFileLocationFieldNumber;
#endif  // !_MSC_VER

SWUpdateEndDownloadInput::SWUpdateEndDownloadInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateEndDownloadInput::InitAsDefaultInstance() {
}

SWUpdateEndDownloadInput::SWUpdateEndDownloadInput(const SWUpdateEndDownloadInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateEndDownloadInput::SharedCtor() {
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  file_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateEndDownloadInput::~SWUpdateEndDownloadInput() {
  SharedDtor();
}

void SWUpdateEndDownloadInput::SharedDtor() {
  if (file_location_ != &::google::protobuf::internal::kEmptyString) {
    delete file_location_;
  }
  if (this != default_instance_) {
  }
}

void SWUpdateEndDownloadInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateEndDownloadInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateEndDownloadInput_descriptor_;
}

const SWUpdateEndDownloadInput& SWUpdateEndDownloadInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateEndDownloadInput* SWUpdateEndDownloadInput::default_instance_ = NULL;

SWUpdateEndDownloadInput* SWUpdateEndDownloadInput::New() const {
  return new SWUpdateEndDownloadInput;
}

void SWUpdateEndDownloadInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = GOOGLE_ULONGLONG(0);
    if (has_file_location()) {
      if (file_location_ != &::google::protobuf::internal::kEmptyString) {
        file_location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateEndDownloadInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_location;
        break;
      }
      
      // required string file_location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_location().data(), this->file_location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateEndDownloadInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }
  
  // required string file_location = 2;
  if (has_file_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_location().data(), this->file_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->file_location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateEndDownloadInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }
  
  // required string file_location = 2;
  if (has_file_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_location().data(), this->file_location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateEndDownloadInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }
    
    // required string file_location = 2;
    if (has_file_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateEndDownloadInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateEndDownloadInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateEndDownloadInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateEndDownloadInput::MergeFrom(const SWUpdateEndDownloadInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_file_location()) {
      set_file_location(from.file_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateEndDownloadInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateEndDownloadInput::CopyFrom(const SWUpdateEndDownloadInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateEndDownloadInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SWUpdateEndDownloadInput::Swap(SWUpdateEndDownloadInput* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(file_location_, other->file_location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateEndDownloadInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateEndDownloadInput_descriptor_;
  metadata.reflection = SWUpdateEndDownloadInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateCancelDownloadInput::kHandleFieldNumber;
#endif  // !_MSC_VER

SWUpdateCancelDownloadInput::SWUpdateCancelDownloadInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateCancelDownloadInput::InitAsDefaultInstance() {
}

SWUpdateCancelDownloadInput::SWUpdateCancelDownloadInput(const SWUpdateCancelDownloadInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateCancelDownloadInput::SharedCtor() {
  _cached_size_ = 0;
  handle_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateCancelDownloadInput::~SWUpdateCancelDownloadInput() {
  SharedDtor();
}

void SWUpdateCancelDownloadInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SWUpdateCancelDownloadInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateCancelDownloadInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateCancelDownloadInput_descriptor_;
}

const SWUpdateCancelDownloadInput& SWUpdateCancelDownloadInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateCancelDownloadInput* SWUpdateCancelDownloadInput::default_instance_ = NULL;

SWUpdateCancelDownloadInput* SWUpdateCancelDownloadInput::New() const {
  return new SWUpdateCancelDownloadInput;
}

void SWUpdateCancelDownloadInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateCancelDownloadInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateCancelDownloadInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateCancelDownloadInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateCancelDownloadInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateCancelDownloadInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateCancelDownloadInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateCancelDownloadInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateCancelDownloadInput::MergeFrom(const SWUpdateCancelDownloadInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateCancelDownloadInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateCancelDownloadInput::CopyFrom(const SWUpdateCancelDownloadInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateCancelDownloadInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SWUpdateCancelDownloadInput::Swap(SWUpdateCancelDownloadInput* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateCancelDownloadInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateCancelDownloadInput_descriptor_;
  metadata.reflection = SWUpdateCancelDownloadInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SWUpdateSetCcdVersionInput::kCcdGuidFieldNumber;
const int SWUpdateSetCcdVersionInput::kCcdVersionFieldNumber;
#endif  // !_MSC_VER

SWUpdateSetCcdVersionInput::SWUpdateSetCcdVersionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SWUpdateSetCcdVersionInput::InitAsDefaultInstance() {
}

SWUpdateSetCcdVersionInput::SWUpdateSetCcdVersionInput(const SWUpdateSetCcdVersionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SWUpdateSetCcdVersionInput::SharedCtor() {
  _cached_size_ = 0;
  ccd_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ccd_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SWUpdateSetCcdVersionInput::~SWUpdateSetCcdVersionInput() {
  SharedDtor();
}

void SWUpdateSetCcdVersionInput::SharedDtor() {
  if (ccd_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete ccd_guid_;
  }
  if (ccd_version_ != &::google::protobuf::internal::kEmptyString) {
    delete ccd_version_;
  }
  if (this != default_instance_) {
  }
}

void SWUpdateSetCcdVersionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SWUpdateSetCcdVersionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SWUpdateSetCcdVersionInput_descriptor_;
}

const SWUpdateSetCcdVersionInput& SWUpdateSetCcdVersionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SWUpdateSetCcdVersionInput* SWUpdateSetCcdVersionInput::default_instance_ = NULL;

SWUpdateSetCcdVersionInput* SWUpdateSetCcdVersionInput::New() const {
  return new SWUpdateSetCcdVersionInput;
}

void SWUpdateSetCcdVersionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ccd_guid()) {
      if (ccd_guid_ != &::google::protobuf::internal::kEmptyString) {
        ccd_guid_->clear();
      }
    }
    if (has_ccd_version()) {
      if (ccd_version_ != &::google::protobuf::internal::kEmptyString) {
        ccd_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SWUpdateSetCcdVersionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ccd_guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccd_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ccd_guid().data(), this->ccd_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ccd_version;
        break;
      }
      
      // required string ccd_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccd_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ccd_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ccd_version().data(), this->ccd_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SWUpdateSetCcdVersionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ccd_guid = 1;
  if (has_ccd_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccd_guid().data(), this->ccd_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ccd_guid(), output);
  }
  
  // required string ccd_version = 2;
  if (has_ccd_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccd_version().data(), this->ccd_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ccd_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SWUpdateSetCcdVersionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ccd_guid = 1;
  if (has_ccd_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccd_guid().data(), this->ccd_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ccd_guid(), target);
  }
  
  // required string ccd_version = 2;
  if (has_ccd_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ccd_version().data(), this->ccd_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ccd_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SWUpdateSetCcdVersionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ccd_guid = 1;
    if (has_ccd_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccd_guid());
    }
    
    // required string ccd_version = 2;
    if (has_ccd_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ccd_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SWUpdateSetCcdVersionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SWUpdateSetCcdVersionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SWUpdateSetCcdVersionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SWUpdateSetCcdVersionInput::MergeFrom(const SWUpdateSetCcdVersionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ccd_guid()) {
      set_ccd_guid(from.ccd_guid());
    }
    if (from.has_ccd_version()) {
      set_ccd_version(from.ccd_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SWUpdateSetCcdVersionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SWUpdateSetCcdVersionInput::CopyFrom(const SWUpdateSetCcdVersionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SWUpdateSetCcdVersionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SWUpdateSetCcdVersionInput::Swap(SWUpdateSetCcdVersionInput* other) {
  if (other != this) {
    std::swap(ccd_guid_, other->ccd_guid_);
    std::swap(ccd_version_, other->ccd_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SWUpdateSetCcdVersionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SWUpdateSetCcdVersionInput_descriptor_;
  metadata.reflection = SWUpdateSetCcdVersionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSystemStateInput::kDoShutdownFieldNumber;
const int UpdateSystemStateInput::kReportNetworkConnectedFieldNumber;
const int UpdateSystemStateInput::kReportDifferentNetworkFieldNumber;
const int UpdateSystemStateInput::kBackgroundModeIntervalSecFieldNumber;
const int UpdateSystemStateInput::kPerformBackgroundTasksFieldNumber;
const int UpdateSystemStateInput::kLogCachesFieldNumber;
const int UpdateSystemStateInput::kOnlyMobileNetworkAvailableFieldNumber;
const int UpdateSystemStateInput::kStreamPowerModeFieldNumber;
const int UpdateSystemStateInput::kEnableIoacFieldNumber;
#endif  // !_MSC_VER

UpdateSystemStateInput::UpdateSystemStateInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSystemStateInput::InitAsDefaultInstance() {
}

UpdateSystemStateInput::UpdateSystemStateInput(const UpdateSystemStateInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSystemStateInput::SharedCtor() {
  _cached_size_ = 0;
  do_shutdown_ = false;
  report_network_connected_ = false;
  report_different_network_ = false;
  background_mode_interval_sec_ = 0;
  perform_background_tasks_ = false;
  log_caches_ = false;
  only_mobile_network_available_ = false;
  stream_power_mode_ = false;
  enable_ioac_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSystemStateInput::~UpdateSystemStateInput() {
  SharedDtor();
}

void UpdateSystemStateInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSystemStateInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSystemStateInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSystemStateInput_descriptor_;
}

const UpdateSystemStateInput& UpdateSystemStateInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateSystemStateInput* UpdateSystemStateInput::default_instance_ = NULL;

UpdateSystemStateInput* UpdateSystemStateInput::New() const {
  return new UpdateSystemStateInput;
}

void UpdateSystemStateInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    do_shutdown_ = false;
    report_network_connected_ = false;
    report_different_network_ = false;
    background_mode_interval_sec_ = 0;
    perform_background_tasks_ = false;
    log_caches_ = false;
    only_mobile_network_available_ = false;
    stream_power_mode_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enable_ioac_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSystemStateInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 background_mode_interval_sec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &background_mode_interval_sec_)));
          set_has_background_mode_interval_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_perform_background_tasks;
        break;
      }
      
      // optional bool perform_background_tasks = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perform_background_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &perform_background_tasks_)));
          set_has_perform_background_tasks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_do_shutdown;
        break;
      }
      
      // optional bool do_shutdown = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_shutdown_)));
          set_has_do_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_report_network_connected;
        break;
      }
      
      // optional bool report_network_connected = 13 [default = false];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_network_connected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_network_connected_)));
          set_has_report_network_connected();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_log_caches;
        break;
      }
      
      // optional bool log_caches = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_caches:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_caches_)));
          set_has_log_caches();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_only_mobile_network_available;
        break;
      }
      
      // optional bool only_mobile_network_available = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_mobile_network_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_mobile_network_available_)));
          set_has_only_mobile_network_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_stream_power_mode;
        break;
      }
      
      // optional bool stream_power_mode = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_power_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_power_mode_)));
          set_has_stream_power_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_report_different_network;
        break;
      }
      
      // optional bool report_different_network = 23 [default = false];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_different_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_different_network_)));
          set_has_report_different_network();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_enable_ioac;
        break;
      }
      
      // optional bool enable_ioac = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_ioac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ioac_)));
          set_has_enable_ioac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSystemStateInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 background_mode_interval_sec = 8;
  if (has_background_mode_interval_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->background_mode_interval_sec(), output);
  }
  
  // optional bool perform_background_tasks = 9 [default = false];
  if (has_perform_background_tasks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->perform_background_tasks(), output);
  }
  
  // optional bool do_shutdown = 12 [default = false];
  if (has_do_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->do_shutdown(), output);
  }
  
  // optional bool report_network_connected = 13 [default = false];
  if (has_report_network_connected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->report_network_connected(), output);
  }
  
  // optional bool log_caches = 20 [default = false];
  if (has_log_caches()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->log_caches(), output);
  }
  
  // optional bool only_mobile_network_available = 21;
  if (has_only_mobile_network_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->only_mobile_network_available(), output);
  }
  
  // optional bool stream_power_mode = 22;
  if (has_stream_power_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->stream_power_mode(), output);
  }
  
  // optional bool report_different_network = 23 [default = false];
  if (has_report_different_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->report_different_network(), output);
  }
  
  // optional bool enable_ioac = 24;
  if (has_enable_ioac()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->enable_ioac(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSystemStateInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 background_mode_interval_sec = 8;
  if (has_background_mode_interval_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->background_mode_interval_sec(), target);
  }
  
  // optional bool perform_background_tasks = 9 [default = false];
  if (has_perform_background_tasks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->perform_background_tasks(), target);
  }
  
  // optional bool do_shutdown = 12 [default = false];
  if (has_do_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->do_shutdown(), target);
  }
  
  // optional bool report_network_connected = 13 [default = false];
  if (has_report_network_connected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->report_network_connected(), target);
  }
  
  // optional bool log_caches = 20 [default = false];
  if (has_log_caches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->log_caches(), target);
  }
  
  // optional bool only_mobile_network_available = 21;
  if (has_only_mobile_network_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->only_mobile_network_available(), target);
  }
  
  // optional bool stream_power_mode = 22;
  if (has_stream_power_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->stream_power_mode(), target);
  }
  
  // optional bool report_different_network = 23 [default = false];
  if (has_report_different_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->report_different_network(), target);
  }
  
  // optional bool enable_ioac = 24;
  if (has_enable_ioac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->enable_ioac(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSystemStateInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool do_shutdown = 12 [default = false];
    if (has_do_shutdown()) {
      total_size += 1 + 1;
    }
    
    // optional bool report_network_connected = 13 [default = false];
    if (has_report_network_connected()) {
      total_size += 1 + 1;
    }
    
    // optional bool report_different_network = 23 [default = false];
    if (has_report_different_network()) {
      total_size += 2 + 1;
    }
    
    // optional sint32 background_mode_interval_sec = 8;
    if (has_background_mode_interval_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->background_mode_interval_sec());
    }
    
    // optional bool perform_background_tasks = 9 [default = false];
    if (has_perform_background_tasks()) {
      total_size += 1 + 1;
    }
    
    // optional bool log_caches = 20 [default = false];
    if (has_log_caches()) {
      total_size += 2 + 1;
    }
    
    // optional bool only_mobile_network_available = 21;
    if (has_only_mobile_network_available()) {
      total_size += 2 + 1;
    }
    
    // optional bool stream_power_mode = 22;
    if (has_stream_power_mode()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool enable_ioac = 24;
    if (has_enable_ioac()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSystemStateInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSystemStateInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSystemStateInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSystemStateInput::MergeFrom(const UpdateSystemStateInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_shutdown()) {
      set_do_shutdown(from.do_shutdown());
    }
    if (from.has_report_network_connected()) {
      set_report_network_connected(from.report_network_connected());
    }
    if (from.has_report_different_network()) {
      set_report_different_network(from.report_different_network());
    }
    if (from.has_background_mode_interval_sec()) {
      set_background_mode_interval_sec(from.background_mode_interval_sec());
    }
    if (from.has_perform_background_tasks()) {
      set_perform_background_tasks(from.perform_background_tasks());
    }
    if (from.has_log_caches()) {
      set_log_caches(from.log_caches());
    }
    if (from.has_only_mobile_network_available()) {
      set_only_mobile_network_available(from.only_mobile_network_available());
    }
    if (from.has_stream_power_mode()) {
      set_stream_power_mode(from.stream_power_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enable_ioac()) {
      set_enable_ioac(from.enable_ioac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSystemStateInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSystemStateInput::CopyFrom(const UpdateSystemStateInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSystemStateInput::IsInitialized() const {
  
  return true;
}

void UpdateSystemStateInput::Swap(UpdateSystemStateInput* other) {
  if (other != this) {
    std::swap(do_shutdown_, other->do_shutdown_);
    std::swap(report_network_connected_, other->report_network_connected_);
    std::swap(report_different_network_, other->report_different_network_);
    std::swap(background_mode_interval_sec_, other->background_mode_interval_sec_);
    std::swap(perform_background_tasks_, other->perform_background_tasks_);
    std::swap(log_caches_, other->log_caches_);
    std::swap(only_mobile_network_available_, other->only_mobile_network_available_);
    std::swap(stream_power_mode_, other->stream_power_mode_);
    std::swap(enable_ioac_, other->enable_ioac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSystemStateInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSystemStateInput_descriptor_;
  metadata.reflection = UpdateSystemStateInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSystemStateOutput::kDoShutdownFieldNumber;
const int UpdateSystemStateOutput::kBackgroundModeIntervalErrFieldNumber;
const int UpdateSystemStateOutput::kPerformBackgroundTasksErrFieldNumber;
const int UpdateSystemStateOutput::kLogCachesErrFieldNumber;
const int UpdateSystemStateOutput::kOnlyMobileNetworkAvailableErrFieldNumber;
const int UpdateSystemStateOutput::kStreamPowerModeErrFieldNumber;
const int UpdateSystemStateOutput::kEnableIoacErrFieldNumber;
#endif  // !_MSC_VER

UpdateSystemStateOutput::UpdateSystemStateOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateSystemStateOutput::InitAsDefaultInstance() {
}

UpdateSystemStateOutput::UpdateSystemStateOutput(const UpdateSystemStateOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateSystemStateOutput::SharedCtor() {
  _cached_size_ = 0;
  do_shutdown_ = 0;
  background_mode_interval_err_ = 0;
  perform_background_tasks_err_ = 0;
  log_caches_err_ = 0;
  only_mobile_network_available_err_ = 0;
  stream_power_mode_err_ = 0;
  enable_ioac_err_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSystemStateOutput::~UpdateSystemStateOutput() {
  SharedDtor();
}

void UpdateSystemStateOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSystemStateOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSystemStateOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSystemStateOutput_descriptor_;
}

const UpdateSystemStateOutput& UpdateSystemStateOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateSystemStateOutput* UpdateSystemStateOutput::default_instance_ = NULL;

UpdateSystemStateOutput* UpdateSystemStateOutput::New() const {
  return new UpdateSystemStateOutput;
}

void UpdateSystemStateOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    do_shutdown_ = 0;
    background_mode_interval_err_ = 0;
    perform_background_tasks_err_ = 0;
    log_caches_err_ = 0;
    only_mobile_network_available_err_ = 0;
    stream_power_mode_err_ = 0;
    enable_ioac_err_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSystemStateOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 background_mode_interval_err = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &background_mode_interval_err_)));
          set_has_background_mode_interval_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_perform_background_tasks_err;
        break;
      }
      
      // optional sint32 perform_background_tasks_err = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perform_background_tasks_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &perform_background_tasks_err_)));
          set_has_perform_background_tasks_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_do_shutdown;
        break;
      }
      
      // optional sint32 do_shutdown = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_shutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &do_shutdown_)));
          set_has_do_shutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_log_caches_err;
        break;
      }
      
      // optional sint32 log_caches_err = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_caches_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &log_caches_err_)));
          set_has_log_caches_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_only_mobile_network_available_err;
        break;
      }
      
      // optional sint32 only_mobile_network_available_err = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_mobile_network_available_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &only_mobile_network_available_err_)));
          set_has_only_mobile_network_available_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_stream_power_mode_err;
        break;
      }
      
      // optional sint32 stream_power_mode_err = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stream_power_mode_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &stream_power_mode_err_)));
          set_has_stream_power_mode_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_enable_ioac_err;
        break;
      }
      
      // optional sint32 enable_ioac_err = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_ioac_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &enable_ioac_err_)));
          set_has_enable_ioac_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateSystemStateOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 background_mode_interval_err = 8;
  if (has_background_mode_interval_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->background_mode_interval_err(), output);
  }
  
  // optional sint32 perform_background_tasks_err = 9;
  if (has_perform_background_tasks_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->perform_background_tasks_err(), output);
  }
  
  // optional sint32 do_shutdown = 12;
  if (has_do_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->do_shutdown(), output);
  }
  
  // optional sint32 log_caches_err = 20;
  if (has_log_caches_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(20, this->log_caches_err(), output);
  }
  
  // optional sint32 only_mobile_network_available_err = 21;
  if (has_only_mobile_network_available_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(21, this->only_mobile_network_available_err(), output);
  }
  
  // optional sint32 stream_power_mode_err = 22;
  if (has_stream_power_mode_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(22, this->stream_power_mode_err(), output);
  }
  
  // optional sint32 enable_ioac_err = 24;
  if (has_enable_ioac_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(24, this->enable_ioac_err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateSystemStateOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 background_mode_interval_err = 8;
  if (has_background_mode_interval_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->background_mode_interval_err(), target);
  }
  
  // optional sint32 perform_background_tasks_err = 9;
  if (has_perform_background_tasks_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->perform_background_tasks_err(), target);
  }
  
  // optional sint32 do_shutdown = 12;
  if (has_do_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->do_shutdown(), target);
  }
  
  // optional sint32 log_caches_err = 20;
  if (has_log_caches_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(20, this->log_caches_err(), target);
  }
  
  // optional sint32 only_mobile_network_available_err = 21;
  if (has_only_mobile_network_available_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(21, this->only_mobile_network_available_err(), target);
  }
  
  // optional sint32 stream_power_mode_err = 22;
  if (has_stream_power_mode_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(22, this->stream_power_mode_err(), target);
  }
  
  // optional sint32 enable_ioac_err = 24;
  if (has_enable_ioac_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(24, this->enable_ioac_err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateSystemStateOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 do_shutdown = 12;
    if (has_do_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->do_shutdown());
    }
    
    // optional sint32 background_mode_interval_err = 8;
    if (has_background_mode_interval_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->background_mode_interval_err());
    }
    
    // optional sint32 perform_background_tasks_err = 9;
    if (has_perform_background_tasks_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->perform_background_tasks_err());
    }
    
    // optional sint32 log_caches_err = 20;
    if (has_log_caches_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->log_caches_err());
    }
    
    // optional sint32 only_mobile_network_available_err = 21;
    if (has_only_mobile_network_available_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->only_mobile_network_available_err());
    }
    
    // optional sint32 stream_power_mode_err = 22;
    if (has_stream_power_mode_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->stream_power_mode_err());
    }
    
    // optional sint32 enable_ioac_err = 24;
    if (has_enable_ioac_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->enable_ioac_err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSystemStateOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSystemStateOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSystemStateOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSystemStateOutput::MergeFrom(const UpdateSystemStateOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_do_shutdown()) {
      set_do_shutdown(from.do_shutdown());
    }
    if (from.has_background_mode_interval_err()) {
      set_background_mode_interval_err(from.background_mode_interval_err());
    }
    if (from.has_perform_background_tasks_err()) {
      set_perform_background_tasks_err(from.perform_background_tasks_err());
    }
    if (from.has_log_caches_err()) {
      set_log_caches_err(from.log_caches_err());
    }
    if (from.has_only_mobile_network_available_err()) {
      set_only_mobile_network_available_err(from.only_mobile_network_available_err());
    }
    if (from.has_stream_power_mode_err()) {
      set_stream_power_mode_err(from.stream_power_mode_err());
    }
    if (from.has_enable_ioac_err()) {
      set_enable_ioac_err(from.enable_ioac_err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSystemStateOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSystemStateOutput::CopyFrom(const UpdateSystemStateOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSystemStateOutput::IsInitialized() const {
  
  return true;
}

void UpdateSystemStateOutput::Swap(UpdateSystemStateOutput* other) {
  if (other != this) {
    std::swap(do_shutdown_, other->do_shutdown_);
    std::swap(background_mode_interval_err_, other->background_mode_interval_err_);
    std::swap(perform_background_tasks_err_, other->perform_background_tasks_err_);
    std::swap(log_caches_err_, other->log_caches_err_);
    std::swap(only_mobile_network_available_err_, other->only_mobile_network_available_err_);
    std::swap(stream_power_mode_err_, other->stream_power_mode_err_);
    std::swap(enable_ioac_err_, other->enable_ioac_err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSystemStateOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSystemStateOutput_descriptor_;
  metadata.reflection = UpdateSystemStateOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginMetadataTransactionInput::kCollectionIdFieldNumber;
const int BeginMetadataTransactionInput::kCollectionTimestampFieldNumber;
const int BeginMetadataTransactionInput::kResetCollectionFieldNumber;
#endif  // !_MSC_VER

BeginMetadataTransactionInput::BeginMetadataTransactionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginMetadataTransactionInput::InitAsDefaultInstance() {
}

BeginMetadataTransactionInput::BeginMetadataTransactionInput(const BeginMetadataTransactionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginMetadataTransactionInput::SharedCtor() {
  _cached_size_ = 0;
  collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collection_timestamp_ = GOOGLE_ULONGLONG(0);
  reset_collection_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginMetadataTransactionInput::~BeginMetadataTransactionInput() {
  SharedDtor();
}

void BeginMetadataTransactionInput::SharedDtor() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete collection_id_;
  }
  if (this != default_instance_) {
  }
}

void BeginMetadataTransactionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginMetadataTransactionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginMetadataTransactionInput_descriptor_;
}

const BeginMetadataTransactionInput& BeginMetadataTransactionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

BeginMetadataTransactionInput* BeginMetadataTransactionInput::default_instance_ = NULL;

BeginMetadataTransactionInput* BeginMetadataTransactionInput::New() const {
  return new BeginMetadataTransactionInput;
}

void BeginMetadataTransactionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collection_id()) {
      if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
        collection_id_->clear();
      }
    }
    collection_timestamp_ = GOOGLE_ULONGLONG(0);
    reset_collection_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginMetadataTransactionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id().data(), this->collection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_collection_timestamp;
        break;
      }
      
      // optional uint64 collection_timestamp = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collection_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_timestamp_)));
          set_has_collection_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reset_collection;
        break;
      }
      
      // optional bool reset_collection = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_collection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_collection_)));
          set_has_reset_collection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginMetadataTransactionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string collection_id = 1;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collection_id(), output);
  }
  
  // optional uint64 collection_timestamp = 2 [default = 0];
  if (has_collection_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->collection_timestamp(), output);
  }
  
  // optional bool reset_collection = 3 [default = false];
  if (has_reset_collection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reset_collection(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginMetadataTransactionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string collection_id = 1;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection_id(), target);
  }
  
  // optional uint64 collection_timestamp = 2 [default = 0];
  if (has_collection_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->collection_timestamp(), target);
  }
  
  // optional bool reset_collection = 3 [default = false];
  if (has_reset_collection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reset_collection(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginMetadataTransactionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string collection_id = 1;
    if (has_collection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_id());
    }
    
    // optional uint64 collection_timestamp = 2 [default = 0];
    if (has_collection_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collection_timestamp());
    }
    
    // optional bool reset_collection = 3 [default = false];
    if (has_reset_collection()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginMetadataTransactionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginMetadataTransactionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginMetadataTransactionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginMetadataTransactionInput::MergeFrom(const BeginMetadataTransactionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collection_id()) {
      set_collection_id(from.collection_id());
    }
    if (from.has_collection_timestamp()) {
      set_collection_timestamp(from.collection_timestamp());
    }
    if (from.has_reset_collection()) {
      set_reset_collection(from.reset_collection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginMetadataTransactionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginMetadataTransactionInput::CopyFrom(const BeginMetadataTransactionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginMetadataTransactionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BeginMetadataTransactionInput::Swap(BeginMetadataTransactionInput* other) {
  if (other != this) {
    std::swap(collection_id_, other->collection_id_);
    std::swap(collection_timestamp_, other->collection_timestamp_);
    std::swap(reset_collection_, other->reset_collection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginMetadataTransactionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginMetadataTransactionInput_descriptor_;
  metadata.reflection = BeginMetadataTransactionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMetadataInput::kMetadataFieldNumber;
#endif  // !_MSC_VER

UpdateMetadataInput::UpdateMetadataInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMetadataInput::InitAsDefaultInstance() {
  metadata_ = const_cast< ::media_metadata::ContentDirectoryObject*>(&::media_metadata::ContentDirectoryObject::default_instance());
}

UpdateMetadataInput::UpdateMetadataInput(const UpdateMetadataInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMetadataInput::SharedCtor() {
  _cached_size_ = 0;
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMetadataInput::~UpdateMetadataInput() {
  SharedDtor();
}

void UpdateMetadataInput::SharedDtor() {
  if (this != default_instance_) {
    delete metadata_;
  }
}

void UpdateMetadataInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMetadataInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMetadataInput_descriptor_;
}

const UpdateMetadataInput& UpdateMetadataInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UpdateMetadataInput* UpdateMetadataInput::default_instance_ = NULL;

UpdateMetadataInput* UpdateMetadataInput::New() const {
  return new UpdateMetadataInput;
}

void UpdateMetadataInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::media_metadata::ContentDirectoryObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMetadataInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .media_metadata.ContentDirectoryObject metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMetadataInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .media_metadata.ContentDirectoryObject metadata = 1;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMetadataInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .media_metadata.ContentDirectoryObject metadata = 1;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMetadataInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .media_metadata.ContentDirectoryObject metadata = 1;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMetadataInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMetadataInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMetadataInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMetadataInput::MergeFrom(const UpdateMetadataInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_metadata()) {
      mutable_metadata()->::media_metadata::ContentDirectoryObject::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMetadataInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMetadataInput::CopyFrom(const UpdateMetadataInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMetadataInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  return true;
}

void UpdateMetadataInput::Swap(UpdateMetadataInput* other) {
  if (other != this) {
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMetadataInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMetadataInput_descriptor_;
  metadata.reflection = UpdateMetadataInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMetadataInput::kObjectIdFieldNumber;
#endif  // !_MSC_VER

DeleteMetadataInput::DeleteMetadataInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteMetadataInput::InitAsDefaultInstance() {
}

DeleteMetadataInput::DeleteMetadataInput(const DeleteMetadataInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteMetadataInput::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMetadataInput::~DeleteMetadataInput() {
  SharedDtor();
}

void DeleteMetadataInput::SharedDtor() {
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    delete object_id_;
  }
  if (this != default_instance_) {
  }
}

void DeleteMetadataInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteMetadataInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteMetadataInput_descriptor_;
}

const DeleteMetadataInput& DeleteMetadataInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DeleteMetadataInput* DeleteMetadataInput::default_instance_ = NULL;

DeleteMetadataInput* DeleteMetadataInput::New() const {
  return new DeleteMetadataInput;
}

void DeleteMetadataInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_object_id()) {
      if (object_id_ != &::google::protobuf::internal::kEmptyString) {
        object_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteMetadataInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteMetadataInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->object_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteMetadataInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->object_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteMetadataInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMetadataInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteMetadataInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteMetadataInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteMetadataInput::MergeFrom(const DeleteMetadataInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteMetadataInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMetadataInput::CopyFrom(const DeleteMetadataInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMetadataInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteMetadataInput::Swap(DeleteMetadataInput* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteMetadataInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteMetadataInput_descriptor_;
  metadata.reflection = DeleteMetadataInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCollectionInput::kCollectionIdFieldNumber;
#endif  // !_MSC_VER

DeleteCollectionInput::DeleteCollectionInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteCollectionInput::InitAsDefaultInstance() {
}

DeleteCollectionInput::DeleteCollectionInput(const DeleteCollectionInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteCollectionInput::SharedCtor() {
  _cached_size_ = 0;
  collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCollectionInput::~DeleteCollectionInput() {
  SharedDtor();
}

void DeleteCollectionInput::SharedDtor() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete collection_id_;
  }
  if (this != default_instance_) {
  }
}

void DeleteCollectionInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCollectionInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCollectionInput_descriptor_;
}

const DeleteCollectionInput& DeleteCollectionInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DeleteCollectionInput* DeleteCollectionInput::default_instance_ = NULL;

DeleteCollectionInput* DeleteCollectionInput::New() const {
  return new DeleteCollectionInput;
}

void DeleteCollectionInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collection_id()) {
      if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
        collection_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCollectionInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id().data(), this->collection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteCollectionInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string collection_id = 1;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collection_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteCollectionInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string collection_id = 1;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteCollectionInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string collection_id = 1;
    if (has_collection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCollectionInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCollectionInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCollectionInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCollectionInput::MergeFrom(const DeleteCollectionInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collection_id()) {
      set_collection_id(from.collection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCollectionInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCollectionInput::CopyFrom(const DeleteCollectionInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCollectionInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DeleteCollectionInput::Swap(DeleteCollectionInput* other) {
  if (other != this) {
    std::swap(collection_id_, other->collection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCollectionInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCollectionInput_descriptor_;
  metadata.reflection = DeleteCollectionInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCollectionDetailsInput::kCollectionIdFieldNumber;
#endif  // !_MSC_VER

GetCollectionDetailsInput::GetCollectionDetailsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCollectionDetailsInput::InitAsDefaultInstance() {
}

GetCollectionDetailsInput::GetCollectionDetailsInput(const GetCollectionDetailsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCollectionDetailsInput::SharedCtor() {
  _cached_size_ = 0;
  collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCollectionDetailsInput::~GetCollectionDetailsInput() {
  SharedDtor();
}

void GetCollectionDetailsInput::SharedDtor() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete collection_id_;
  }
  if (this != default_instance_) {
  }
}

void GetCollectionDetailsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCollectionDetailsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCollectionDetailsInput_descriptor_;
}

const GetCollectionDetailsInput& GetCollectionDetailsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetCollectionDetailsInput* GetCollectionDetailsInput::default_instance_ = NULL;

GetCollectionDetailsInput* GetCollectionDetailsInput::New() const {
  return new GetCollectionDetailsInput;
}

void GetCollectionDetailsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_collection_id()) {
      if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
        collection_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCollectionDetailsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string collection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id().data(), this->collection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCollectionDetailsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string collection_id = 1;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->collection_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCollectionDetailsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string collection_id = 1;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->collection_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCollectionDetailsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string collection_id = 1;
    if (has_collection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCollectionDetailsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCollectionDetailsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCollectionDetailsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCollectionDetailsInput::MergeFrom(const GetCollectionDetailsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collection_id()) {
      set_collection_id(from.collection_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCollectionDetailsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionDetailsInput::CopyFrom(const GetCollectionDetailsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionDetailsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetCollectionDetailsInput::Swap(GetCollectionDetailsInput* other) {
  if (other != this) {
    std::swap(collection_id_, other->collection_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCollectionDetailsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCollectionDetailsInput_descriptor_;
  metadata.reflection = GetCollectionDetailsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCollectionDetailsOutput::kMetadataFieldNumber;
#endif  // !_MSC_VER

GetCollectionDetailsOutput::GetCollectionDetailsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCollectionDetailsOutput::InitAsDefaultInstance() {
}

GetCollectionDetailsOutput::GetCollectionDetailsOutput(const GetCollectionDetailsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCollectionDetailsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCollectionDetailsOutput::~GetCollectionDetailsOutput() {
  SharedDtor();
}

void GetCollectionDetailsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetCollectionDetailsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCollectionDetailsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCollectionDetailsOutput_descriptor_;
}

const GetCollectionDetailsOutput& GetCollectionDetailsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetCollectionDetailsOutput* GetCollectionDetailsOutput::default_instance_ = NULL;

GetCollectionDetailsOutput* GetCollectionDetailsOutput::New() const {
  return new GetCollectionDetailsOutput;
}

void GetCollectionDetailsOutput::Clear() {
  metadata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCollectionDetailsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .media_metadata.ContentDirectoryObject metadata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_metadata;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCollectionDetailsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .media_metadata.ContentDirectoryObject metadata = 1;
  for (int i = 0; i < this->metadata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCollectionDetailsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .media_metadata.ContentDirectoryObject metadata = 1;
  for (int i = 0; i < this->metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->metadata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCollectionDetailsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .media_metadata.ContentDirectoryObject metadata = 1;
  total_size += 1 * this->metadata_size();
  for (int i = 0; i < this->metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metadata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCollectionDetailsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCollectionDetailsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCollectionDetailsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCollectionDetailsOutput::MergeFrom(const GetCollectionDetailsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  metadata_.MergeFrom(from.metadata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCollectionDetailsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCollectionDetailsOutput::CopyFrom(const GetCollectionDetailsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCollectionDetailsOutput::IsInitialized() const {
  
  for (int i = 0; i < metadata_size(); i++) {
    if (!this->metadata(i).IsInitialized()) return false;
  }
  return true;
}

void GetCollectionDetailsOutput::Swap(GetCollectionDetailsOutput* other) {
  if (other != this) {
    metadata_.Swap(&other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCollectionDetailsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCollectionDetailsOutput_descriptor_;
  metadata.reflection = GetCollectionDetailsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginCatalogInput::kCatalogTypeFieldNumber;
#endif  // !_MSC_VER

BeginCatalogInput::BeginCatalogInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeginCatalogInput::InitAsDefaultInstance() {
}

BeginCatalogInput::BeginCatalogInput(const BeginCatalogInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeginCatalogInput::SharedCtor() {
  _cached_size_ = 0;
  catalog_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginCatalogInput::~BeginCatalogInput() {
  SharedDtor();
}

void BeginCatalogInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginCatalogInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginCatalogInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginCatalogInput_descriptor_;
}

const BeginCatalogInput& BeginCatalogInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

BeginCatalogInput* BeginCatalogInput::default_instance_ = NULL;

BeginCatalogInput* BeginCatalogInput::New() const {
  return new BeginCatalogInput;
}

void BeginCatalogInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    catalog_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginCatalogInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media_metadata.CatalogType_t catalog_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::CatalogType_t_IsValid(value)) {
            set_catalog_type(static_cast< media_metadata::CatalogType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeginCatalogInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->catalog_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeginCatalogInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->catalog_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeginCatalogInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .media_metadata.CatalogType_t catalog_type = 1;
    if (has_catalog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->catalog_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginCatalogInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginCatalogInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginCatalogInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginCatalogInput::MergeFrom(const BeginCatalogInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_catalog_type()) {
      set_catalog_type(from.catalog_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginCatalogInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginCatalogInput::CopyFrom(const BeginCatalogInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginCatalogInput::IsInitialized() const {
  
  return true;
}

void BeginCatalogInput::Swap(BeginCatalogInput* other) {
  if (other != this) {
    std::swap(catalog_type_, other->catalog_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginCatalogInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginCatalogInput_descriptor_;
  metadata.reflection = BeginCatalogInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommitCatalogInput::kCatalogTypeFieldNumber;
#endif  // !_MSC_VER

CommitCatalogInput::CommitCatalogInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommitCatalogInput::InitAsDefaultInstance() {
}

CommitCatalogInput::CommitCatalogInput(const CommitCatalogInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommitCatalogInput::SharedCtor() {
  _cached_size_ = 0;
  catalog_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommitCatalogInput::~CommitCatalogInput() {
  SharedDtor();
}

void CommitCatalogInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommitCatalogInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitCatalogInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitCatalogInput_descriptor_;
}

const CommitCatalogInput& CommitCatalogInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CommitCatalogInput* CommitCatalogInput::default_instance_ = NULL;

CommitCatalogInput* CommitCatalogInput::New() const {
  return new CommitCatalogInput;
}

void CommitCatalogInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    catalog_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommitCatalogInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media_metadata.CatalogType_t catalog_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::CatalogType_t_IsValid(value)) {
            set_catalog_type(static_cast< media_metadata::CatalogType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommitCatalogInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->catalog_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommitCatalogInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->catalog_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommitCatalogInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .media_metadata.CatalogType_t catalog_type = 1;
    if (has_catalog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->catalog_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitCatalogInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommitCatalogInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommitCatalogInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommitCatalogInput::MergeFrom(const CommitCatalogInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_catalog_type()) {
      set_catalog_type(from.catalog_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommitCatalogInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitCatalogInput::CopyFrom(const CommitCatalogInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitCatalogInput::IsInitialized() const {
  
  return true;
}

void CommitCatalogInput::Swap(CommitCatalogInput* other) {
  if (other != this) {
    std::swap(catalog_type_, other->catalog_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommitCatalogInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitCatalogInput_descriptor_;
  metadata.reflection = CommitCatalogInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndCatalogInput::kCatalogTypeFieldNumber;
#endif  // !_MSC_VER

EndCatalogInput::EndCatalogInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndCatalogInput::InitAsDefaultInstance() {
}

EndCatalogInput::EndCatalogInput(const EndCatalogInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndCatalogInput::SharedCtor() {
  _cached_size_ = 0;
  catalog_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndCatalogInput::~EndCatalogInput() {
  SharedDtor();
}

void EndCatalogInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndCatalogInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndCatalogInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndCatalogInput_descriptor_;
}

const EndCatalogInput& EndCatalogInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

EndCatalogInput* EndCatalogInput::default_instance_ = NULL;

EndCatalogInput* EndCatalogInput::New() const {
  return new EndCatalogInput;
}

void EndCatalogInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    catalog_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndCatalogInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media_metadata.CatalogType_t catalog_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::CatalogType_t_IsValid(value)) {
            set_catalog_type(static_cast< media_metadata::CatalogType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndCatalogInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->catalog_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndCatalogInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->catalog_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndCatalogInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .media_metadata.CatalogType_t catalog_type = 1;
    if (has_catalog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->catalog_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndCatalogInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndCatalogInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndCatalogInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndCatalogInput::MergeFrom(const EndCatalogInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_catalog_type()) {
      set_catalog_type(from.catalog_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndCatalogInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndCatalogInput::CopyFrom(const EndCatalogInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndCatalogInput::IsInitialized() const {
  
  return true;
}

void EndCatalogInput::Swap(EndCatalogInput* other) {
  if (other != this) {
    std::swap(catalog_type_, other->catalog_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndCatalogInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndCatalogInput_descriptor_;
  metadata.reflection = EndCatalogInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCatalogInput::kCatalogTypeFieldNumber;
#endif  // !_MSC_VER

DeleteCatalogInput::DeleteCatalogInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteCatalogInput::InitAsDefaultInstance() {
}

DeleteCatalogInput::DeleteCatalogInput(const DeleteCatalogInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteCatalogInput::SharedCtor() {
  _cached_size_ = 0;
  catalog_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCatalogInput::~DeleteCatalogInput() {
  SharedDtor();
}

void DeleteCatalogInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteCatalogInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCatalogInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCatalogInput_descriptor_;
}

const DeleteCatalogInput& DeleteCatalogInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

DeleteCatalogInput* DeleteCatalogInput::default_instance_ = NULL;

DeleteCatalogInput* DeleteCatalogInput::New() const {
  return new DeleteCatalogInput;
}

void DeleteCatalogInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    catalog_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCatalogInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media_metadata.CatalogType_t catalog_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::CatalogType_t_IsValid(value)) {
            set_catalog_type(static_cast< media_metadata::CatalogType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteCatalogInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->catalog_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteCatalogInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  if (has_catalog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->catalog_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteCatalogInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .media_metadata.CatalogType_t catalog_type = 1;
    if (has_catalog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->catalog_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCatalogInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCatalogInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCatalogInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCatalogInput::MergeFrom(const DeleteCatalogInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_catalog_type()) {
      set_catalog_type(from.catalog_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCatalogInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCatalogInput::CopyFrom(const DeleteCatalogInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCatalogInput::IsInitialized() const {
  
  return true;
}

void DeleteCatalogInput::Swap(DeleteCatalogInput* other) {
  if (other != this) {
    std::swap(catalog_type_, other->catalog_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCatalogInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCatalogInput_descriptor_;
  metadata.reflection = DeleteCatalogInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSAGetContentURLInput::kUserIdFieldNumber;
const int MSAGetContentURLInput::kCatalogTypeFieldNumber;
const int MSAGetContentURLInput::kCollectionIdFieldNumber;
const int MSAGetContentURLInput::kObjectIdFieldNumber;
const int MSAGetContentURLInput::kIsThumbFieldNumber;
#endif  // !_MSC_VER

MSAGetContentURLInput::MSAGetContentURLInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSAGetContentURLInput::InitAsDefaultInstance() {
}

MSAGetContentURLInput::MSAGetContentURLInput(const MSAGetContentURLInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSAGetContentURLInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  catalog_type_ = 1;
  collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_thumb_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSAGetContentURLInput::~MSAGetContentURLInput() {
  SharedDtor();
}

void MSAGetContentURLInput::SharedDtor() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    delete collection_id_;
  }
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    delete object_id_;
  }
  if (this != default_instance_) {
  }
}

void MSAGetContentURLInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSAGetContentURLInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSAGetContentURLInput_descriptor_;
}

const MSAGetContentURLInput& MSAGetContentURLInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

MSAGetContentURLInput* MSAGetContentURLInput::default_instance_ = NULL;

MSAGetContentURLInput* MSAGetContentURLInput::New() const {
  return new MSAGetContentURLInput;
}

void MSAGetContentURLInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    catalog_type_ = 1;
    if (has_collection_id()) {
      if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
        collection_id_->clear();
      }
    }
    if (has_object_id()) {
      if (object_id_ != &::google::protobuf::internal::kEmptyString) {
        object_id_->clear();
      }
    }
    is_thumb_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSAGetContentURLInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_catalog_type;
        break;
      }
      
      // required .media_metadata.CatalogType_t catalog_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_catalog_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::CatalogType_t_IsValid(value)) {
            set_catalog_type(static_cast< media_metadata::CatalogType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_collection_id;
        break;
      }
      
      // required string collection_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collection_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->collection_id().data(), this->collection_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_object_id;
        break;
      }
      
      // required string object_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_id().data(), this->object_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_thumb;
        break;
      }
      
      // optional bool is_thumb = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_thumb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_thumb_)));
          set_has_is_thumb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSAGetContentURLInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required .media_metadata.CatalogType_t catalog_type = 2;
  if (has_catalog_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->catalog_type(), output);
  }
  
  // required string collection_id = 3;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->collection_id(), output);
  }
  
  // required string object_id = 4;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->object_id(), output);
  }
  
  // optional bool is_thumb = 5 [default = false];
  if (has_is_thumb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_thumb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSAGetContentURLInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required .media_metadata.CatalogType_t catalog_type = 2;
  if (has_catalog_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->catalog_type(), target);
  }
  
  // required string collection_id = 3;
  if (has_collection_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->collection_id().data(), this->collection_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_id(), target);
  }
  
  // required string object_id = 4;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_id().data(), this->object_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->object_id(), target);
  }
  
  // optional bool is_thumb = 5 [default = false];
  if (has_is_thumb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_thumb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSAGetContentURLInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required .media_metadata.CatalogType_t catalog_type = 2;
    if (has_catalog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->catalog_type());
    }
    
    // required string collection_id = 3;
    if (has_collection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_id());
    }
    
    // required string object_id = 4;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_id());
    }
    
    // optional bool is_thumb = 5 [default = false];
    if (has_is_thumb()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSAGetContentURLInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSAGetContentURLInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSAGetContentURLInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSAGetContentURLInput::MergeFrom(const MSAGetContentURLInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_catalog_type()) {
      set_catalog_type(from.catalog_type());
    }
    if (from.has_collection_id()) {
      set_collection_id(from.collection_id());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_is_thumb()) {
      set_is_thumb(from.is_thumb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSAGetContentURLInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSAGetContentURLInput::CopyFrom(const MSAGetContentURLInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSAGetContentURLInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MSAGetContentURLInput::Swap(MSAGetContentURLInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(catalog_type_, other->catalog_type_);
    std::swap(collection_id_, other->collection_id_);
    std::swap(object_id_, other->object_id_);
    std::swap(is_thumb_, other->is_thumb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSAGetContentURLInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSAGetContentURLInput_descriptor_;
  metadata.reflection = MSAGetContentURLInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSAGetContentURLOutput::kUrlFieldNumber;
#endif  // !_MSC_VER

MSAGetContentURLOutput::MSAGetContentURLOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSAGetContentURLOutput::InitAsDefaultInstance() {
}

MSAGetContentURLOutput::MSAGetContentURLOutput(const MSAGetContentURLOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSAGetContentURLOutput::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSAGetContentURLOutput::~MSAGetContentURLOutput() {
  SharedDtor();
}

void MSAGetContentURLOutput::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void MSAGetContentURLOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSAGetContentURLOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSAGetContentURLOutput_descriptor_;
}

const MSAGetContentURLOutput& MSAGetContentURLOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

MSAGetContentURLOutput* MSAGetContentURLOutput::default_instance_ = NULL;

MSAGetContentURLOutput* MSAGetContentURLOutput::New() const {
  return new MSAGetContentURLOutput;
}

void MSAGetContentURLOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSAGetContentURLOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSAGetContentURLOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSAGetContentURLOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSAGetContentURLOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSAGetContentURLOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSAGetContentURLOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSAGetContentURLOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSAGetContentURLOutput::MergeFrom(const MSAGetContentURLOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSAGetContentURLOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSAGetContentURLOutput::CopyFrom(const MSAGetContentURLOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSAGetContentURLOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MSAGetContentURLOutput::Swap(MSAGetContentURLOutput* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSAGetContentURLOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSAGetContentURLOutput_descriptor_;
  metadata.reflection = MSAGetContentURLOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MCAQueryMetadataObjectsInput::kCloudDeviceIdFieldNumber;
const int MCAQueryMetadataObjectsInput::kFilterFieldFieldNumber;
const int MCAQueryMetadataObjectsInput::kSearchFieldFieldNumber;
const int MCAQueryMetadataObjectsInput::kSortFieldFieldNumber;
#endif  // !_MSC_VER

MCAQueryMetadataObjectsInput::MCAQueryMetadataObjectsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MCAQueryMetadataObjectsInput::InitAsDefaultInstance() {
}

MCAQueryMetadataObjectsInput::MCAQueryMetadataObjectsInput(const MCAQueryMetadataObjectsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MCAQueryMetadataObjectsInput::SharedCtor() {
  _cached_size_ = 0;
  cloud_device_id_ = GOOGLE_ULONGLONG(0);
  filter_field_ = 1;
  search_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sort_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MCAQueryMetadataObjectsInput::~MCAQueryMetadataObjectsInput() {
  SharedDtor();
}

void MCAQueryMetadataObjectsInput::SharedDtor() {
  if (search_field_ != &::google::protobuf::internal::kEmptyString) {
    delete search_field_;
  }
  if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
    delete sort_field_;
  }
  if (this != default_instance_) {
  }
}

void MCAQueryMetadataObjectsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCAQueryMetadataObjectsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCAQueryMetadataObjectsInput_descriptor_;
}

const MCAQueryMetadataObjectsInput& MCAQueryMetadataObjectsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

MCAQueryMetadataObjectsInput* MCAQueryMetadataObjectsInput::default_instance_ = NULL;

MCAQueryMetadataObjectsInput* MCAQueryMetadataObjectsInput::New() const {
  return new MCAQueryMetadataObjectsInput;
}

void MCAQueryMetadataObjectsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cloud_device_id_ = GOOGLE_ULONGLONG(0);
    filter_field_ = 1;
    if (has_search_field()) {
      if (search_field_ != &::google::protobuf::internal::kEmptyString) {
        search_field_->clear();
      }
    }
    if (has_sort_field()) {
      if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
        sort_field_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MCAQueryMetadataObjectsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 cloud_device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cloud_device_id_)));
          set_has_cloud_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_filter_field;
        break;
      }
      
      // required .media_metadata.DBFilterType_t filter_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (media_metadata::DBFilterType_t_IsValid(value)) {
            set_filter_field(static_cast< media_metadata::DBFilterType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_search_field;
        break;
      }
      
      // optional string search_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_field().data(), this->search_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sort_field;
        break;
      }
      
      // optional string sort_field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sort_field().data(), this->sort_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MCAQueryMetadataObjectsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 cloud_device_id = 1;
  if (has_cloud_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->cloud_device_id(), output);
  }
  
  // required .media_metadata.DBFilterType_t filter_field = 2;
  if (has_filter_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filter_field(), output);
  }
  
  // optional string search_field = 3;
  if (has_search_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_field().data(), this->search_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->search_field(), output);
  }
  
  // optional string sort_field = 4;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sort_field().data(), this->sort_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sort_field(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MCAQueryMetadataObjectsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 cloud_device_id = 1;
  if (has_cloud_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->cloud_device_id(), target);
  }
  
  // required .media_metadata.DBFilterType_t filter_field = 2;
  if (has_filter_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filter_field(), target);
  }
  
  // optional string search_field = 3;
  if (has_search_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_field().data(), this->search_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_field(), target);
  }
  
  // optional string sort_field = 4;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sort_field().data(), this->sort_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sort_field(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MCAQueryMetadataObjectsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 cloud_device_id = 1;
    if (has_cloud_device_id()) {
      total_size += 1 + 8;
    }
    
    // required .media_metadata.DBFilterType_t filter_field = 2;
    if (has_filter_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_field());
    }
    
    // optional string search_field = 3;
    if (has_search_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_field());
    }
    
    // optional string sort_field = 4;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sort_field());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCAQueryMetadataObjectsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MCAQueryMetadataObjectsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MCAQueryMetadataObjectsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MCAQueryMetadataObjectsInput::MergeFrom(const MCAQueryMetadataObjectsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cloud_device_id()) {
      set_cloud_device_id(from.cloud_device_id());
    }
    if (from.has_filter_field()) {
      set_filter_field(from.filter_field());
    }
    if (from.has_search_field()) {
      set_search_field(from.search_field());
    }
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MCAQueryMetadataObjectsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCAQueryMetadataObjectsInput::CopyFrom(const MCAQueryMetadataObjectsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCAQueryMetadataObjectsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MCAQueryMetadataObjectsInput::Swap(MCAQueryMetadataObjectsInput* other) {
  if (other != this) {
    std::swap(cloud_device_id_, other->cloud_device_id_);
    std::swap(filter_field_, other->filter_field_);
    std::swap(search_field_, other->search_field_);
    std::swap(sort_field_, other->sort_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MCAQueryMetadataObjectsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MCAQueryMetadataObjectsInput_descriptor_;
  metadata.reflection = MCAQueryMetadataObjectsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MCAQueryMetadataObjectsOutput::kContentObjectsFieldNumber;
#endif  // !_MSC_VER

MCAQueryMetadataObjectsOutput::MCAQueryMetadataObjectsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MCAQueryMetadataObjectsOutput::InitAsDefaultInstance() {
}

MCAQueryMetadataObjectsOutput::MCAQueryMetadataObjectsOutput(const MCAQueryMetadataObjectsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MCAQueryMetadataObjectsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MCAQueryMetadataObjectsOutput::~MCAQueryMetadataObjectsOutput() {
  SharedDtor();
}

void MCAQueryMetadataObjectsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MCAQueryMetadataObjectsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCAQueryMetadataObjectsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCAQueryMetadataObjectsOutput_descriptor_;
}

const MCAQueryMetadataObjectsOutput& MCAQueryMetadataObjectsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

MCAQueryMetadataObjectsOutput* MCAQueryMetadataObjectsOutput::default_instance_ = NULL;

MCAQueryMetadataObjectsOutput* MCAQueryMetadataObjectsOutput::New() const {
  return new MCAQueryMetadataObjectsOutput;
}

void MCAQueryMetadataObjectsOutput::Clear() {
  content_objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MCAQueryMetadataObjectsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .media_metadata.MCAMetadataQueryObject content_objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MCAQueryMetadataObjectsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .media_metadata.MCAMetadataQueryObject content_objects = 1;
  for (int i = 0; i < this->content_objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content_objects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MCAQueryMetadataObjectsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .media_metadata.MCAMetadataQueryObject content_objects = 1;
  for (int i = 0; i < this->content_objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content_objects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MCAQueryMetadataObjectsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .media_metadata.MCAMetadataQueryObject content_objects = 1;
  total_size += 1 * this->content_objects_size();
  for (int i = 0; i < this->content_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCAQueryMetadataObjectsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MCAQueryMetadataObjectsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MCAQueryMetadataObjectsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MCAQueryMetadataObjectsOutput::MergeFrom(const MCAQueryMetadataObjectsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_objects_.MergeFrom(from.content_objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MCAQueryMetadataObjectsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCAQueryMetadataObjectsOutput::CopyFrom(const MCAQueryMetadataObjectsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCAQueryMetadataObjectsOutput::IsInitialized() const {
  
  for (int i = 0; i < content_objects_size(); i++) {
    if (!this->content_objects(i).IsInitialized()) return false;
  }
  return true;
}

void MCAQueryMetadataObjectsOutput::Swap(MCAQueryMetadataObjectsOutput* other) {
  if (other != this) {
    content_objects_.Swap(&other->content_objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MCAQueryMetadataObjectsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MCAQueryMetadataObjectsOutput_descriptor_;
  metadata.reflection = MCAQueryMetadataObjectsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingInput::kHostHwidFieldNumber;
const int RequestPairingInput::kHostDeviceidFieldNumber;
const int RequestPairingInput::kPinFieldNumber;
const int RequestPairingInput::kDeviceHwidFieldNumber;
const int RequestPairingInput::kPairingAttributesFieldNumber;
#endif  // !_MSC_VER

RequestPairingInput::RequestPairingInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingInput::InitAsDefaultInstance() {
}

RequestPairingInput::RequestPairingInput(const RequestPairingInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingInput::SharedCtor() {
  _cached_size_ = 0;
  host_hwid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_deviceid_ = GOOGLE_ULONGLONG(0);
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_hwid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingInput::~RequestPairingInput() {
  SharedDtor();
}

void RequestPairingInput::SharedDtor() {
  if (host_hwid_ != &::google::protobuf::internal::kEmptyString) {
    delete host_hwid_;
  }
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (device_hwid_ != &::google::protobuf::internal::kEmptyString) {
    delete device_hwid_;
  }
  if (this != default_instance_) {
  }
}

void RequestPairingInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingInput_descriptor_;
}

const RequestPairingInput& RequestPairingInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RequestPairingInput* RequestPairingInput::default_instance_ = NULL;

RequestPairingInput* RequestPairingInput::New() const {
  return new RequestPairingInput;
}

void RequestPairingInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host_hwid()) {
      if (host_hwid_ != &::google::protobuf::internal::kEmptyString) {
        host_hwid_->clear();
      }
    }
    host_deviceid_ = GOOGLE_ULONGLONG(0);
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
    if (has_device_hwid()) {
      if (device_hwid_ != &::google::protobuf::internal::kEmptyString) {
        device_hwid_->clear();
      }
    }
  }
  pairing_attributes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host_hwid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_hwid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_hwid().data(), this->host_hwid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_host_deviceid;
        break;
      }
      
      // optional fixed64 host_deviceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_host_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &host_deviceid_)));
          set_has_host_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pin;
        break;
      }
      
      // optional string pin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device_hwid;
        break;
      }
      
      // required string device_hwid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_hwid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_hwid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_hwid().data(), this->device_hwid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pairing_attributes;
        break;
      }
      
      // repeated .ccd.PairingRequestAttribute pairing_attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairing_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairing_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pairing_attributes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host_hwid = 1;
  if (has_host_hwid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_hwid().data(), this->host_hwid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host_hwid(), output);
  }
  
  // optional fixed64 host_deviceid = 2;
  if (has_host_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->host_deviceid(), output);
  }
  
  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pin(), output);
  }
  
  // required string device_hwid = 4;
  if (has_device_hwid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_hwid().data(), this->device_hwid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device_hwid(), output);
  }
  
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 5;
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pairing_attributes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host_hwid = 1;
  if (has_host_hwid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_hwid().data(), this->host_hwid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host_hwid(), target);
  }
  
  // optional fixed64 host_deviceid = 2;
  if (has_host_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->host_deviceid(), target);
  }
  
  // optional string pin = 3;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pin(), target);
  }
  
  // required string device_hwid = 4;
  if (has_device_hwid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_hwid().data(), this->device_hwid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_hwid(), target);
  }
  
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 5;
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pairing_attributes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host_hwid = 1;
    if (has_host_hwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_hwid());
    }
    
    // optional fixed64 host_deviceid = 2;
    if (has_host_deviceid()) {
      total_size += 1 + 8;
    }
    
    // optional string pin = 3;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
    // required string device_hwid = 4;
    if (has_device_hwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_hwid());
    }
    
  }
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 5;
  total_size += 1 * this->pairing_attributes_size();
  for (int i = 0; i < this->pairing_attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairing_attributes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingInput::MergeFrom(const RequestPairingInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairing_attributes_.MergeFrom(from.pairing_attributes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host_hwid()) {
      set_host_hwid(from.host_hwid());
    }
    if (from.has_host_deviceid()) {
      set_host_deviceid(from.host_deviceid());
    }
    if (from.has_pin()) {
      set_pin(from.pin());
    }
    if (from.has_device_hwid()) {
      set_device_hwid(from.device_hwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingInput::CopyFrom(const RequestPairingInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  
  for (int i = 0; i < pairing_attributes_size(); i++) {
    if (!this->pairing_attributes(i).IsInitialized()) return false;
  }
  return true;
}

void RequestPairingInput::Swap(RequestPairingInput* other) {
  if (other != this) {
    std::swap(host_hwid_, other->host_hwid_);
    std::swap(host_deviceid_, other->host_deviceid_);
    std::swap(pin_, other->pin_);
    std::swap(device_hwid_, other->device_hwid_);
    pairing_attributes_.Swap(&other->pairing_attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingInput_descriptor_;
  metadata.reflection = RequestPairingInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingOutput::kPairingTokenFieldNumber;
#endif  // !_MSC_VER

RequestPairingOutput::RequestPairingOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingOutput::InitAsDefaultInstance() {
}

RequestPairingOutput::RequestPairingOutput(const RequestPairingOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingOutput::SharedCtor() {
  _cached_size_ = 0;
  pairing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingOutput::~RequestPairingOutput() {
  SharedDtor();
}

void RequestPairingOutput::SharedDtor() {
  if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pairing_token_;
  }
  if (this != default_instance_) {
  }
}

void RequestPairingOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingOutput_descriptor_;
}

const RequestPairingOutput& RequestPairingOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RequestPairingOutput* RequestPairingOutput::default_instance_ = NULL;

RequestPairingOutput* RequestPairingOutput::New() const {
  return new RequestPairingOutput;
}

void RequestPairingOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pairing_token()) {
      if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
        pairing_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pairing_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairing_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairing_token().data(), this->pairing_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pairing_token = 1;
  if (has_pairing_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairing_token().data(), this->pairing_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pairing_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pairing_token = 1;
  if (has_pairing_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairing_token().data(), this->pairing_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pairing_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pairing_token = 1;
    if (has_pairing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairing_token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingOutput::MergeFrom(const RequestPairingOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pairing_token()) {
      set_pairing_token(from.pairing_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingOutput::CopyFrom(const RequestPairingOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestPairingOutput::Swap(RequestPairingOutput* other) {
  if (other != this) {
    std::swap(pairing_token_, other->pairing_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingOutput_descriptor_;
  metadata.reflection = RequestPairingOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondToPairingRequestInput::kTransactionIdFieldNumber;
const int RespondToPairingRequestInput::kAcceptedPairingFieldNumber;
const int RespondToPairingRequestInput::kUserIdFieldNumber;
#endif  // !_MSC_VER

RespondToPairingRequestInput::RespondToPairingRequestInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondToPairingRequestInput::InitAsDefaultInstance() {
}

RespondToPairingRequestInput::RespondToPairingRequestInput(const RespondToPairingRequestInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondToPairingRequestInput::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accepted_pairing_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondToPairingRequestInput::~RespondToPairingRequestInput() {
  SharedDtor();
}

void RespondToPairingRequestInput::SharedDtor() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (this != default_instance_) {
  }
}

void RespondToPairingRequestInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondToPairingRequestInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondToPairingRequestInput_descriptor_;
}

const RespondToPairingRequestInput& RespondToPairingRequestInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RespondToPairingRequestInput* RespondToPairingRequestInput::default_instance_ = NULL;

RespondToPairingRequestInput* RespondToPairingRequestInput::New() const {
  return new RespondToPairingRequestInput;
}

void RespondToPairingRequestInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transaction_id()) {
      if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
        transaction_id_->clear();
      }
    }
    accepted_pairing_ = 0;
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondToPairingRequestInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string transaction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transaction_id().data(), this->transaction_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accepted_pairing;
        break;
      }
      
      // required int32 accepted_pairing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepted_pairing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accepted_pairing_)));
          set_has_accepted_pairing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_user_id;
        break;
      }
      
      // required fixed64 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondToPairingRequestInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->transaction_id(), output);
  }
  
  // required int32 accepted_pairing = 2;
  if (has_accepted_pairing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accepted_pairing(), output);
  }
  
  // required fixed64 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondToPairingRequestInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transaction_id().data(), this->transaction_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction_id(), target);
  }
  
  // required int32 accepted_pairing = 2;
  if (has_accepted_pairing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accepted_pairing(), target);
  }
  
  // required fixed64 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondToPairingRequestInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transaction_id());
    }
    
    // required int32 accepted_pairing = 2;
    if (has_accepted_pairing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accepted_pairing());
    }
    
    // required fixed64 user_id = 3;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondToPairingRequestInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondToPairingRequestInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondToPairingRequestInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondToPairingRequestInput::MergeFrom(const RespondToPairingRequestInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_accepted_pairing()) {
      set_accepted_pairing(from.accepted_pairing());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondToPairingRequestInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondToPairingRequestInput::CopyFrom(const RespondToPairingRequestInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondToPairingRequestInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RespondToPairingRequestInput::Swap(RespondToPairingRequestInput* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(accepted_pairing_, other->accepted_pairing_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondToPairingRequestInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondToPairingRequestInput_descriptor_;
  metadata.reflection = RespondToPairingRequestInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingPinInput::kDeviceIdFieldNumber;
const int RequestPairingPinInput::kUserIdFieldNumber;
#endif  // !_MSC_VER

RequestPairingPinInput::RequestPairingPinInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingPinInput::InitAsDefaultInstance() {
}

RequestPairingPinInput::RequestPairingPinInput(const RequestPairingPinInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingPinInput::SharedCtor() {
  _cached_size_ = 0;
  device_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingPinInput::~RequestPairingPinInput() {
  SharedDtor();
}

void RequestPairingPinInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPairingPinInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingPinInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingPinInput_descriptor_;
}

const RequestPairingPinInput& RequestPairingPinInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RequestPairingPinInput* RequestPairingPinInput::default_instance_ = NULL;

RequestPairingPinInput* RequestPairingPinInput::New() const {
  return new RequestPairingPinInput;
}

void RequestPairingPinInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_id_ = GOOGLE_ULONGLONG(0);
    user_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingPinInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 device_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_user_id;
        break;
      }
      
      // required fixed64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingPinInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->device_id(), output);
  }
  
  // required fixed64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingPinInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 device_id = 1;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->device_id(), target);
  }
  
  // required fixed64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingPinInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 device_id = 1;
    if (has_device_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingPinInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingPinInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingPinInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingPinInput::MergeFrom(const RequestPairingPinInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingPinInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingPinInput::CopyFrom(const RequestPairingPinInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingPinInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequestPairingPinInput::Swap(RequestPairingPinInput* other) {
  if (other != this) {
    std::swap(device_id_, other->device_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingPinInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingPinInput_descriptor_;
  metadata.reflection = RequestPairingPinInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestPairingPinOutput::kPinFieldNumber;
#endif  // !_MSC_VER

RequestPairingPinOutput::RequestPairingPinOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestPairingPinOutput::InitAsDefaultInstance() {
}

RequestPairingPinOutput::RequestPairingPinOutput(const RequestPairingPinOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestPairingPinOutput::SharedCtor() {
  _cached_size_ = 0;
  pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPairingPinOutput::~RequestPairingPinOutput() {
  SharedDtor();
}

void RequestPairingPinOutput::SharedDtor() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (this != default_instance_) {
  }
}

void RequestPairingPinOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPairingPinOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPairingPinOutput_descriptor_;
}

const RequestPairingPinOutput& RequestPairingPinOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RequestPairingPinOutput* RequestPairingPinOutput::default_instance_ = NULL;

RequestPairingPinOutput* RequestPairingPinOutput::New() const {
  return new RequestPairingPinOutput;
}

void RequestPairingPinOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pin()) {
      if (pin_ != &::google::protobuf::internal::kEmptyString) {
        pin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestPairingPinOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pin().data(), this->pin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestPairingPinOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestPairingPinOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pin = 1;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pin().data(), this->pin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestPairingPinOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pin = 1;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPairingPinOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestPairingPinOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestPairingPinOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestPairingPinOutput::MergeFrom(const RequestPairingPinOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pin()) {
      set_pin(from.pin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestPairingPinOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPairingPinOutput::CopyFrom(const RequestPairingPinOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPairingPinOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RequestPairingPinOutput::Swap(RequestPairingPinOutput* other) {
  if (other != this) {
    std::swap(pin_, other->pin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestPairingPinOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPairingPinOutput_descriptor_;
  metadata.reflection = RequestPairingPinOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPairingStatusInput::kPairingTokenFieldNumber;
#endif  // !_MSC_VER

GetPairingStatusInput::GetPairingStatusInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPairingStatusInput::InitAsDefaultInstance() {
}

GetPairingStatusInput::GetPairingStatusInput(const GetPairingStatusInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPairingStatusInput::SharedCtor() {
  _cached_size_ = 0;
  pairing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPairingStatusInput::~GetPairingStatusInput() {
  SharedDtor();
}

void GetPairingStatusInput::SharedDtor() {
  if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
    delete pairing_token_;
  }
  if (this != default_instance_) {
  }
}

void GetPairingStatusInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPairingStatusInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPairingStatusInput_descriptor_;
}

const GetPairingStatusInput& GetPairingStatusInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetPairingStatusInput* GetPairingStatusInput::default_instance_ = NULL;

GetPairingStatusInput* GetPairingStatusInput::New() const {
  return new GetPairingStatusInput;
}

void GetPairingStatusInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pairing_token()) {
      if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
        pairing_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPairingStatusInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string pairing_token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairing_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairing_token().data(), this->pairing_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPairingStatusInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string pairing_token = 1;
  if (has_pairing_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairing_token().data(), this->pairing_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pairing_token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPairingStatusInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string pairing_token = 1;
  if (has_pairing_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairing_token().data(), this->pairing_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pairing_token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPairingStatusInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string pairing_token = 1;
    if (has_pairing_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairing_token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPairingStatusInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPairingStatusInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPairingStatusInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPairingStatusInput::MergeFrom(const GetPairingStatusInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pairing_token()) {
      set_pairing_token(from.pairing_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPairingStatusInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPairingStatusInput::CopyFrom(const GetPairingStatusInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPairingStatusInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetPairingStatusInput::Swap(GetPairingStatusInput* other) {
  if (other != this) {
    std::swap(pairing_token_, other->pairing_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPairingStatusInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPairingStatusInput_descriptor_;
  metadata.reflection = GetPairingStatusInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPairingStatusOutput::kStatusFieldNumber;
const int GetPairingStatusOutput::kUserNameFieldNumber;
#endif  // !_MSC_VER

GetPairingStatusOutput::GetPairingStatusOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPairingStatusOutput::InitAsDefaultInstance() {
}

GetPairingStatusOutput::GetPairingStatusOutput(const GetPairingStatusOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPairingStatusOutput::SharedCtor() {
  _cached_size_ = 0;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPairingStatusOutput::~GetPairingStatusOutput() {
  SharedDtor();
}

void GetPairingStatusOutput::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void GetPairingStatusOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPairingStatusOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPairingStatusOutput_descriptor_;
}

const GetPairingStatusOutput& GetPairingStatusOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

GetPairingStatusOutput* GetPairingStatusOutput::default_instance_ = NULL;

GetPairingStatusOutput* GetPairingStatusOutput::New() const {
  return new GetPairingStatusOutput;
}

void GetPairingStatusOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPairingStatusOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPairingStatusOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->status(), output);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPairingStatusOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->status(), target);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPairingStatusOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPairingStatusOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPairingStatusOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPairingStatusOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPairingStatusOutput::MergeFrom(const GetPairingStatusOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPairingStatusOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPairingStatusOutput::CopyFrom(const GetPairingStatusOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPairingStatusOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetPairingStatusOutput::Swap(GetPairingStatusOutput* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPairingStatusOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPairingStatusOutput_descriptor_;
  metadata.reflection = GetPairingStatusOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDIQueryPicStreamObjectsInput::kFilterFieldFieldNumber;
const int CCDIQueryPicStreamObjectsInput::kSearchFieldFieldNumber;
const int CCDIQueryPicStreamObjectsInput::kSortFieldFieldNumber;
#endif  // !_MSC_VER

CCDIQueryPicStreamObjectsInput::CCDIQueryPicStreamObjectsInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDIQueryPicStreamObjectsInput::InitAsDefaultInstance() {
}

CCDIQueryPicStreamObjectsInput::CCDIQueryPicStreamObjectsInput(const CCDIQueryPicStreamObjectsInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDIQueryPicStreamObjectsInput::SharedCtor() {
  _cached_size_ = 0;
  filter_field_ = 1;
  search_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sort_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDIQueryPicStreamObjectsInput::~CCDIQueryPicStreamObjectsInput() {
  SharedDtor();
}

void CCDIQueryPicStreamObjectsInput::SharedDtor() {
  if (search_field_ != &::google::protobuf::internal::kEmptyString) {
    delete search_field_;
  }
  if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
    delete sort_field_;
  }
  if (this != default_instance_) {
  }
}

void CCDIQueryPicStreamObjectsInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDIQueryPicStreamObjectsInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDIQueryPicStreamObjectsInput_descriptor_;
}

const CCDIQueryPicStreamObjectsInput& CCDIQueryPicStreamObjectsInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CCDIQueryPicStreamObjectsInput* CCDIQueryPicStreamObjectsInput::default_instance_ = NULL;

CCDIQueryPicStreamObjectsInput* CCDIQueryPicStreamObjectsInput::New() const {
  return new CCDIQueryPicStreamObjectsInput;
}

void CCDIQueryPicStreamObjectsInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filter_field_ = 1;
    if (has_search_field()) {
      if (search_field_ != &::google::protobuf::internal::kEmptyString) {
        search_field_->clear();
      }
    }
    if (has_sort_field()) {
      if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
        sort_field_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDIQueryPicStreamObjectsInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ccd.PicStream_DBFilterType_t filter_field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::PicStream_DBFilterType_t_IsValid(value)) {
            set_filter_field(static_cast< ccd::PicStream_DBFilterType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_search_field;
        break;
      }
      
      // optional string search_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_field().data(), this->search_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sort_field;
        break;
      }
      
      // optional string sort_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sort_field().data(), this->sort_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDIQueryPicStreamObjectsInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ccd.PicStream_DBFilterType_t filter_field = 1;
  if (has_filter_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filter_field(), output);
  }
  
  // optional string search_field = 2;
  if (has_search_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_field().data(), this->search_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->search_field(), output);
  }
  
  // optional string sort_field = 3;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sort_field().data(), this->sort_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sort_field(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDIQueryPicStreamObjectsInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ccd.PicStream_DBFilterType_t filter_field = 1;
  if (has_filter_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filter_field(), target);
  }
  
  // optional string search_field = 2;
  if (has_search_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_field().data(), this->search_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->search_field(), target);
  }
  
  // optional string sort_field = 3;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sort_field().data(), this->sort_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sort_field(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDIQueryPicStreamObjectsInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ccd.PicStream_DBFilterType_t filter_field = 1;
    if (has_filter_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_field());
    }
    
    // optional string search_field = 2;
    if (has_search_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_field());
    }
    
    // optional string sort_field = 3;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sort_field());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDIQueryPicStreamObjectsInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDIQueryPicStreamObjectsInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDIQueryPicStreamObjectsInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDIQueryPicStreamObjectsInput::MergeFrom(const CCDIQueryPicStreamObjectsInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter_field()) {
      set_filter_field(from.filter_field());
    }
    if (from.has_search_field()) {
      set_search_field(from.search_field());
    }
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDIQueryPicStreamObjectsInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDIQueryPicStreamObjectsInput::CopyFrom(const CCDIQueryPicStreamObjectsInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDIQueryPicStreamObjectsInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CCDIQueryPicStreamObjectsInput::Swap(CCDIQueryPicStreamObjectsInput* other) {
  if (other != this) {
    std::swap(filter_field_, other->filter_field_);
    std::swap(search_field_, other->search_field_);
    std::swap(sort_field_, other->sort_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDIQueryPicStreamObjectsInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDIQueryPicStreamObjectsInput_descriptor_;
  metadata.reflection = CCDIQueryPicStreamObjectsInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CCDIQueryPicStreamObjectsOutput::kContentObjectsFieldNumber;
#endif  // !_MSC_VER

CCDIQueryPicStreamObjectsOutput::CCDIQueryPicStreamObjectsOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CCDIQueryPicStreamObjectsOutput::InitAsDefaultInstance() {
}

CCDIQueryPicStreamObjectsOutput::CCDIQueryPicStreamObjectsOutput(const CCDIQueryPicStreamObjectsOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CCDIQueryPicStreamObjectsOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CCDIQueryPicStreamObjectsOutput::~CCDIQueryPicStreamObjectsOutput() {
  SharedDtor();
}

void CCDIQueryPicStreamObjectsOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CCDIQueryPicStreamObjectsOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDIQueryPicStreamObjectsOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CCDIQueryPicStreamObjectsOutput_descriptor_;
}

const CCDIQueryPicStreamObjectsOutput& CCDIQueryPicStreamObjectsOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

CCDIQueryPicStreamObjectsOutput* CCDIQueryPicStreamObjectsOutput::default_instance_ = NULL;

CCDIQueryPicStreamObjectsOutput* CCDIQueryPicStreamObjectsOutput::New() const {
  return new CCDIQueryPicStreamObjectsOutput;
}

void CCDIQueryPicStreamObjectsOutput::Clear() {
  content_objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CCDIQueryPicStreamObjectsOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.PicStreamQueryObject content_objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CCDIQueryPicStreamObjectsOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.PicStreamQueryObject content_objects = 1;
  for (int i = 0; i < this->content_objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content_objects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CCDIQueryPicStreamObjectsOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.PicStreamQueryObject content_objects = 1;
  for (int i = 0; i < this->content_objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content_objects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CCDIQueryPicStreamObjectsOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.PicStreamQueryObject content_objects = 1;
  total_size += 1 * this->content_objects_size();
  for (int i = 0; i < this->content_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content_objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDIQueryPicStreamObjectsOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CCDIQueryPicStreamObjectsOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CCDIQueryPicStreamObjectsOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CCDIQueryPicStreamObjectsOutput::MergeFrom(const CCDIQueryPicStreamObjectsOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_objects_.MergeFrom(from.content_objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CCDIQueryPicStreamObjectsOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDIQueryPicStreamObjectsOutput::CopyFrom(const CCDIQueryPicStreamObjectsOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDIQueryPicStreamObjectsOutput::IsInitialized() const {
  
  for (int i = 0; i < content_objects_size(); i++) {
    if (!this->content_objects(i).IsInitialized()) return false;
  }
  return true;
}

void CCDIQueryPicStreamObjectsOutput::Swap(CCDIQueryPicStreamObjectsOutput* other) {
  if (other != this) {
    content_objects_.Swap(&other->content_objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CCDIQueryPicStreamObjectsOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CCDIQueryPicStreamObjectsOutput_descriptor_;
  metadata.reflection = CCDIQueryPicStreamObjectsOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicStreamQueryObject::kPcdoFieldNumber;
const int PicStreamQueryObject::kPicStreamAlbumFieldNumber;
const int PicStreamQueryObject::kFullResUrlFieldNumber;
const int PicStreamQueryObject::kLowResUrlFieldNumber;
const int PicStreamQueryObject::kThumbnailUrlFieldNumber;
#endif  // !_MSC_VER

PicStreamQueryObject::PicStreamQueryObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PicStreamQueryObject::InitAsDefaultInstance() {
  pcdo_ = const_cast< ::ccd::PicStreamContentDirectoryObject*>(&::ccd::PicStreamContentDirectoryObject::default_instance());
  picstream_album_ = const_cast< ::ccd::PicStreamAlbumFields*>(&::ccd::PicStreamAlbumFields::default_instance());
}

PicStreamQueryObject::PicStreamQueryObject(const PicStreamQueryObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PicStreamQueryObject::SharedCtor() {
  _cached_size_ = 0;
  pcdo_ = NULL;
  picstream_album_ = NULL;
  full_res_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  low_res_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  thumbnail_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicStreamQueryObject::~PicStreamQueryObject() {
  SharedDtor();
}

void PicStreamQueryObject::SharedDtor() {
  if (full_res_url_ != &::google::protobuf::internal::kEmptyString) {
    delete full_res_url_;
  }
  if (low_res_url_ != &::google::protobuf::internal::kEmptyString) {
    delete low_res_url_;
  }
  if (thumbnail_url_ != &::google::protobuf::internal::kEmptyString) {
    delete thumbnail_url_;
  }
  if (this != default_instance_) {
    delete pcdo_;
    delete picstream_album_;
  }
}

void PicStreamQueryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PicStreamQueryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicStreamQueryObject_descriptor_;
}

const PicStreamQueryObject& PicStreamQueryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PicStreamQueryObject* PicStreamQueryObject::default_instance_ = NULL;

PicStreamQueryObject* PicStreamQueryObject::New() const {
  return new PicStreamQueryObject;
}

void PicStreamQueryObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pcdo()) {
      if (pcdo_ != NULL) pcdo_->::ccd::PicStreamContentDirectoryObject::Clear();
    }
    if (has_picstream_album()) {
      if (picstream_album_ != NULL) picstream_album_->::ccd::PicStreamAlbumFields::Clear();
    }
    if (has_full_res_url()) {
      if (full_res_url_ != &::google::protobuf::internal::kEmptyString) {
        full_res_url_->clear();
      }
    }
    if (has_low_res_url()) {
      if (low_res_url_ != &::google::protobuf::internal::kEmptyString) {
        low_res_url_->clear();
      }
    }
    if (has_thumbnail_url()) {
      if (thumbnail_url_ != &::google::protobuf::internal::kEmptyString) {
        thumbnail_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PicStreamQueryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ccd.PicStreamContentDirectoryObject pcdo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pcdo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PicStream_album;
        break;
      }
      
      // optional .ccd.PicStreamAlbumFields PicStream_album = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PicStream_album:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picstream_album()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_full_res_url;
        break;
      }
      
      // optional string full_res_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_full_res_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_res_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->full_res_url().data(), this->full_res_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_low_res_url;
        break;
      }
      
      // optional string low_res_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low_res_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_low_res_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->low_res_url().data(), this->low_res_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_thumbnail_url;
        break;
      }
      
      // optional string thumbnail_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumbnail_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->thumbnail_url().data(), this->thumbnail_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PicStreamQueryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ccd.PicStreamContentDirectoryObject pcdo = 1;
  if (has_pcdo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pcdo(), output);
  }
  
  // optional .ccd.PicStreamAlbumFields PicStream_album = 2;
  if (has_picstream_album()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->picstream_album(), output);
  }
  
  // optional string full_res_url = 3;
  if (has_full_res_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_res_url().data(), this->full_res_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->full_res_url(), output);
  }
  
  // optional string low_res_url = 4;
  if (has_low_res_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->low_res_url().data(), this->low_res_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->low_res_url(), output);
  }
  
  // optional string thumbnail_url = 5;
  if (has_thumbnail_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail_url().data(), this->thumbnail_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->thumbnail_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PicStreamQueryObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ccd.PicStreamContentDirectoryObject pcdo = 1;
  if (has_pcdo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pcdo(), target);
  }
  
  // optional .ccd.PicStreamAlbumFields PicStream_album = 2;
  if (has_picstream_album()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->picstream_album(), target);
  }
  
  // optional string full_res_url = 3;
  if (has_full_res_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->full_res_url().data(), this->full_res_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->full_res_url(), target);
  }
  
  // optional string low_res_url = 4;
  if (has_low_res_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->low_res_url().data(), this->low_res_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->low_res_url(), target);
  }
  
  // optional string thumbnail_url = 5;
  if (has_thumbnail_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->thumbnail_url().data(), this->thumbnail_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->thumbnail_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PicStreamQueryObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ccd.PicStreamContentDirectoryObject pcdo = 1;
    if (has_pcdo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pcdo());
    }
    
    // optional .ccd.PicStreamAlbumFields PicStream_album = 2;
    if (has_picstream_album()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picstream_album());
    }
    
    // optional string full_res_url = 3;
    if (has_full_res_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->full_res_url());
    }
    
    // optional string low_res_url = 4;
    if (has_low_res_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->low_res_url());
    }
    
    // optional string thumbnail_url = 5;
    if (has_thumbnail_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumbnail_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicStreamQueryObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicStreamQueryObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PicStreamQueryObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PicStreamQueryObject::MergeFrom(const PicStreamQueryObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pcdo()) {
      mutable_pcdo()->::ccd::PicStreamContentDirectoryObject::MergeFrom(from.pcdo());
    }
    if (from.has_picstream_album()) {
      mutable_picstream_album()->::ccd::PicStreamAlbumFields::MergeFrom(from.picstream_album());
    }
    if (from.has_full_res_url()) {
      set_full_res_url(from.full_res_url());
    }
    if (from.has_low_res_url()) {
      set_low_res_url(from.low_res_url());
    }
    if (from.has_thumbnail_url()) {
      set_thumbnail_url(from.thumbnail_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PicStreamQueryObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PicStreamQueryObject::CopyFrom(const PicStreamQueryObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicStreamQueryObject::IsInitialized() const {
  
  if (has_pcdo()) {
    if (!this->pcdo().IsInitialized()) return false;
  }
  if (has_picstream_album()) {
    if (!this->picstream_album().IsInitialized()) return false;
  }
  return true;
}

void PicStreamQueryObject::Swap(PicStreamQueryObject* other) {
  if (other != this) {
    std::swap(pcdo_, other->pcdo_);
    std::swap(picstream_album_, other->picstream_album_);
    std::swap(full_res_url_, other->full_res_url_);
    std::swap(low_res_url_, other->low_res_url_);
    std::swap(thumbnail_url_, other->thumbnail_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PicStreamQueryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PicStreamQueryObject_descriptor_;
  metadata.reflection = PicStreamQueryObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicStreamContentDirectoryObject::kCompIdFieldNumber;
const int PicStreamContentDirectoryObject::kOptionalFieldsFieldNumber;
const int PicStreamContentDirectoryObject::kPicstreamItemFieldNumber;
#endif  // !_MSC_VER

PicStreamContentDirectoryObject::PicStreamContentDirectoryObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PicStreamContentDirectoryObject::InitAsDefaultInstance() {
  picstream_item_ = const_cast< ::ccd::PicStreamItemFields*>(&::ccd::PicStreamItemFields::default_instance());
}

PicStreamContentDirectoryObject::PicStreamContentDirectoryObject(const PicStreamContentDirectoryObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PicStreamContentDirectoryObject::SharedCtor() {
  _cached_size_ = 0;
  comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picstream_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicStreamContentDirectoryObject::~PicStreamContentDirectoryObject() {
  SharedDtor();
}

void PicStreamContentDirectoryObject::SharedDtor() {
  if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
    delete comp_id_;
  }
  if (this != default_instance_) {
    delete picstream_item_;
  }
}

void PicStreamContentDirectoryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PicStreamContentDirectoryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicStreamContentDirectoryObject_descriptor_;
}

const PicStreamContentDirectoryObject& PicStreamContentDirectoryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PicStreamContentDirectoryObject* PicStreamContentDirectoryObject::default_instance_ = NULL;

PicStreamContentDirectoryObject* PicStreamContentDirectoryObject::New() const {
  return new PicStreamContentDirectoryObject;
}

void PicStreamContentDirectoryObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comp_id()) {
      if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
        comp_id_->clear();
      }
    }
    if (has_picstream_item()) {
      if (picstream_item_ != NULL) picstream_item_->::ccd::PicStreamItemFields::Clear();
    }
  }
  optional_fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PicStreamContentDirectoryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string comp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comp_id().data(), this->comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_optional_fields;
        break;
      }
      
      // repeated string optional_fields = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optional_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optional_fields()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->optional_fields(0).data(), this->optional_fields(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_optional_fields;
        if (input->ExpectTag(26)) goto parse_picstream_item;
        break;
      }
      
      // optional .ccd.PicStreamItemFields picstream_item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picstream_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_picstream_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PicStreamContentDirectoryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string comp_id = 1;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_id().data(), this->comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->comp_id(), output);
  }
  
  // repeated string optional_fields = 2;
  for (int i = 0; i < this->optional_fields_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->optional_fields(i).data(), this->optional_fields(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->optional_fields(i), output);
  }
  
  // optional .ccd.PicStreamItemFields picstream_item = 3;
  if (has_picstream_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->picstream_item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PicStreamContentDirectoryObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string comp_id = 1;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comp_id().data(), this->comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comp_id(), target);
  }
  
  // repeated string optional_fields = 2;
  for (int i = 0; i < this->optional_fields_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optional_fields(i).data(), this->optional_fields(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->optional_fields(i), target);
  }
  
  // optional .ccd.PicStreamItemFields picstream_item = 3;
  if (has_picstream_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->picstream_item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PicStreamContentDirectoryObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string comp_id = 1;
    if (has_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comp_id());
    }
    
    // optional .ccd.PicStreamItemFields picstream_item = 3;
    if (has_picstream_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picstream_item());
    }
    
  }
  // repeated string optional_fields = 2;
  total_size += 1 * this->optional_fields_size();
  for (int i = 0; i < this->optional_fields_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optional_fields(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicStreamContentDirectoryObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicStreamContentDirectoryObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PicStreamContentDirectoryObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PicStreamContentDirectoryObject::MergeFrom(const PicStreamContentDirectoryObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  optional_fields_.MergeFrom(from.optional_fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_picstream_item()) {
      mutable_picstream_item()->::ccd::PicStreamItemFields::MergeFrom(from.picstream_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PicStreamContentDirectoryObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PicStreamContentDirectoryObject::CopyFrom(const PicStreamContentDirectoryObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicStreamContentDirectoryObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_picstream_item()) {
    if (!this->picstream_item().IsInitialized()) return false;
  }
  return true;
}

void PicStreamContentDirectoryObject::Swap(PicStreamContentDirectoryObject* other) {
  if (other != this) {
    std::swap(comp_id_, other->comp_id_);
    optional_fields_.Swap(&other->optional_fields_);
    std::swap(picstream_item_, other->picstream_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PicStreamContentDirectoryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PicStreamContentDirectoryObject_descriptor_;
  metadata.reflection = PicStreamContentDirectoryObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicStreamItemFields::kIdentifierFieldNumber;
const int PicStreamItemFields::kTitleFieldNumber;
const int PicStreamItemFields::kAlbumNameFieldNumber;
const int PicStreamItemFields::kDateTimeFieldNumber;
const int PicStreamItemFields::kFileSizeFieldNumber;
const int PicStreamItemFields::kOriDeviceidFieldNumber;
#endif  // !_MSC_VER

PicStreamItemFields::PicStreamItemFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PicStreamItemFields::InitAsDefaultInstance() {
}

PicStreamItemFields::PicStreamItemFields(const PicStreamItemFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PicStreamItemFields::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_time_ = GOOGLE_ULONGLONG(0);
  file_size_ = GOOGLE_ULONGLONG(0);
  ori_deviceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicStreamItemFields::~PicStreamItemFields() {
  SharedDtor();
}

void PicStreamItemFields::SharedDtor() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    delete identifier_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (this != default_instance_) {
  }
}

void PicStreamItemFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PicStreamItemFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicStreamItemFields_descriptor_;
}

const PicStreamItemFields& PicStreamItemFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PicStreamItemFields* PicStreamItemFields::default_instance_ = NULL;

PicStreamItemFields* PicStreamItemFields::New() const {
  return new PicStreamItemFields;
}

void PicStreamItemFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_identifier()) {
      if (identifier_ != &::google::protobuf::internal::kEmptyString) {
        identifier_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    date_time_ = GOOGLE_ULONGLONG(0);
    file_size_ = GOOGLE_ULONGLONG(0);
    ori_deviceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PicStreamItemFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identifier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identifier().data(), this->identifier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }
      
      // required string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_album_name;
        break;
      }
      
      // required string album_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_album_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_date_time;
        break;
      }
      
      // required uint64 date_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &date_time_)));
          set_has_date_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_file_size;
        break;
      }
      
      // optional uint64 file_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ori_deviceid;
        break;
      }
      
      // required uint64 ori_deviceid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ori_deviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ori_deviceid_)));
          set_has_ori_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PicStreamItemFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->identifier(), output);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }
  
  // required string album_name = 3;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->album_name(), output);
  }
  
  // required uint64 date_time = 4;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->date_time(), output);
  }
  
  // optional uint64 file_size = 5;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->file_size(), output);
  }
  
  // required uint64 ori_deviceid = 6;
  if (has_ori_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ori_deviceid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PicStreamItemFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identifier().data(), this->identifier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->identifier(), target);
  }
  
  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }
  
  // required string album_name = 3;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->album_name(), target);
  }
  
  // required uint64 date_time = 4;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->date_time(), target);
  }
  
  // optional uint64 file_size = 5;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->file_size(), target);
  }
  
  // required uint64 ori_deviceid = 6;
  if (has_ori_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ori_deviceid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PicStreamItemFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identifier());
    }
    
    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // required string album_name = 3;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // required uint64 date_time = 4;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->date_time());
    }
    
    // optional uint64 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }
    
    // required uint64 ori_deviceid = 6;
    if (has_ori_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ori_deviceid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicStreamItemFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicStreamItemFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PicStreamItemFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PicStreamItemFields::MergeFrom(const PicStreamItemFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_ori_deviceid()) {
      set_ori_deviceid(from.ori_deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PicStreamItemFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PicStreamItemFields::CopyFrom(const PicStreamItemFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicStreamItemFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  return true;
}

void PicStreamItemFields::Swap(PicStreamItemFields* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(title_, other->title_);
    std::swap(album_name_, other->album_name_);
    std::swap(date_time_, other->date_time_);
    std::swap(file_size_, other->file_size_);
    std::swap(ori_deviceid_, other->ori_deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PicStreamItemFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PicStreamItemFields_descriptor_;
  metadata.reflection = PicStreamItemFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PicStreamAlbumFields::kAlbumNameFieldNumber;
const int PicStreamAlbumFields::kItemCountFieldNumber;
const int PicStreamAlbumFields::kItemTotalSizeFieldNumber;
#endif  // !_MSC_VER

PicStreamAlbumFields::PicStreamAlbumFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PicStreamAlbumFields::InitAsDefaultInstance() {
}

PicStreamAlbumFields::PicStreamAlbumFields(const PicStreamAlbumFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PicStreamAlbumFields::SharedCtor() {
  _cached_size_ = 0;
  album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_count_ = 0u;
  item_total_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PicStreamAlbumFields::~PicStreamAlbumFields() {
  SharedDtor();
}

void PicStreamAlbumFields::SharedDtor() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    delete album_name_;
  }
  if (this != default_instance_) {
  }
}

void PicStreamAlbumFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PicStreamAlbumFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PicStreamAlbumFields_descriptor_;
}

const PicStreamAlbumFields& PicStreamAlbumFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

PicStreamAlbumFields* PicStreamAlbumFields::default_instance_ = NULL;

PicStreamAlbumFields* PicStreamAlbumFields::New() const {
  return new PicStreamAlbumFields;
}

void PicStreamAlbumFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_album_name()) {
      if (album_name_ != &::google::protobuf::internal::kEmptyString) {
        album_name_->clear();
      }
    }
    item_count_ = 0u;
    item_total_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PicStreamAlbumFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string album_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_album_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->album_name().data(), this->album_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }
      
      // required uint32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_total_size;
        break;
      }
      
      // required uint64 item_total_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_total_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_total_size_)));
          set_has_item_total_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PicStreamAlbumFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string album_name = 1;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->album_name(), output);
  }
  
  // required uint32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_count(), output);
  }
  
  // required uint64 item_total_size = 3;
  if (has_item_total_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_total_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PicStreamAlbumFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string album_name = 1;
  if (has_album_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->album_name().data(), this->album_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->album_name(), target);
  }
  
  // required uint32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_count(), target);
  }
  
  // required uint64 item_total_size = 3;
  if (has_item_total_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_total_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PicStreamAlbumFields::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string album_name = 1;
    if (has_album_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->album_name());
    }
    
    // required uint32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }
    
    // required uint64 item_total_size = 3;
    if (has_item_total_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_total_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PicStreamAlbumFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PicStreamAlbumFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PicStreamAlbumFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PicStreamAlbumFields::MergeFrom(const PicStreamAlbumFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_album_name()) {
      set_album_name(from.album_name());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_item_total_size()) {
      set_item_total_size(from.item_total_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PicStreamAlbumFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PicStreamAlbumFields::CopyFrom(const PicStreamAlbumFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicStreamAlbumFields::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PicStreamAlbumFields::Swap(PicStreamAlbumFields* other) {
  if (other != this) {
    std::swap(album_name_, other->album_name_);
    std::swap(item_count_, other->item_count_);
    std::swap(item_total_size_, other->item_total_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PicStreamAlbumFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PicStreamAlbumFields_descriptor_;
  metadata.reflection = PicStreamAlbumFields_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesStoreFileInput::kUserIdFieldNumber;
const int SharedFilesStoreFileInput::kAbsFilePathFieldNumber;
const int SharedFilesStoreFileInput::kOpaqueMetadataFieldNumber;
const int SharedFilesStoreFileInput::kAbsPreviewPathFieldNumber;
#endif  // !_MSC_VER

SharedFilesStoreFileInput::SharedFilesStoreFileInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesStoreFileInput::InitAsDefaultInstance() {
}

SharedFilesStoreFileInput::SharedFilesStoreFileInput(const SharedFilesStoreFileInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesStoreFileInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  abs_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opaque_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  abs_preview_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesStoreFileInput::~SharedFilesStoreFileInput() {
  SharedDtor();
}

void SharedFilesStoreFileInput::SharedDtor() {
  if (abs_file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete abs_file_path_;
  }
  if (opaque_metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete opaque_metadata_;
  }
  if (abs_preview_path_ != &::google::protobuf::internal::kEmptyString) {
    delete abs_preview_path_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesStoreFileInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesStoreFileInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesStoreFileInput_descriptor_;
}

const SharedFilesStoreFileInput& SharedFilesStoreFileInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesStoreFileInput* SharedFilesStoreFileInput::default_instance_ = NULL;

SharedFilesStoreFileInput* SharedFilesStoreFileInput::New() const {
  return new SharedFilesStoreFileInput;
}

void SharedFilesStoreFileInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_abs_file_path()) {
      if (abs_file_path_ != &::google::protobuf::internal::kEmptyString) {
        abs_file_path_->clear();
      }
    }
    if (has_opaque_metadata()) {
      if (opaque_metadata_ != &::google::protobuf::internal::kEmptyString) {
        opaque_metadata_->clear();
      }
    }
    if (has_abs_preview_path()) {
      if (abs_preview_path_ != &::google::protobuf::internal::kEmptyString) {
        abs_preview_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesStoreFileInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_abs_file_path;
        break;
      }
      
      // required string abs_file_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abs_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abs_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abs_file_path().data(), this->abs_file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_opaque_metadata;
        break;
      }
      
      // optional string opaque_metadata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opaque_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opaque_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opaque_metadata().data(), this->opaque_metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_abs_preview_path;
        break;
      }
      
      // optional string abs_preview_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abs_preview_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_abs_preview_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->abs_preview_path().data(), this->abs_preview_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesStoreFileInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string abs_file_path = 2;
  if (has_abs_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abs_file_path().data(), this->abs_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->abs_file_path(), output);
  }
  
  // optional string opaque_metadata = 3;
  if (has_opaque_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opaque_metadata().data(), this->opaque_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->opaque_metadata(), output);
  }
  
  // optional string abs_preview_path = 4;
  if (has_abs_preview_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abs_preview_path().data(), this->abs_preview_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->abs_preview_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesStoreFileInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string abs_file_path = 2;
  if (has_abs_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abs_file_path().data(), this->abs_file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->abs_file_path(), target);
  }
  
  // optional string opaque_metadata = 3;
  if (has_opaque_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opaque_metadata().data(), this->opaque_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->opaque_metadata(), target);
  }
  
  // optional string abs_preview_path = 4;
  if (has_abs_preview_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->abs_preview_path().data(), this->abs_preview_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->abs_preview_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesStoreFileInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string abs_file_path = 2;
    if (has_abs_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abs_file_path());
    }
    
    // optional string opaque_metadata = 3;
    if (has_opaque_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opaque_metadata());
    }
    
    // optional string abs_preview_path = 4;
    if (has_abs_preview_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->abs_preview_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesStoreFileInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesStoreFileInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesStoreFileInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesStoreFileInput::MergeFrom(const SharedFilesStoreFileInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_abs_file_path()) {
      set_abs_file_path(from.abs_file_path());
    }
    if (from.has_opaque_metadata()) {
      set_opaque_metadata(from.opaque_metadata());
    }
    if (from.has_abs_preview_path()) {
      set_abs_preview_path(from.abs_preview_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesStoreFileInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesStoreFileInput::CopyFrom(const SharedFilesStoreFileInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesStoreFileInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SharedFilesStoreFileInput::Swap(SharedFilesStoreFileInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(abs_file_path_, other->abs_file_path_);
    std::swap(opaque_metadata_, other->opaque_metadata_);
    std::swap(abs_preview_path_, other->abs_preview_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesStoreFileInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesStoreFileInput_descriptor_;
  metadata.reflection = SharedFilesStoreFileInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesStoreFileOutput::kCompIdFieldNumber;
const int SharedFilesStoreFileOutput::kStoredNameFieldNumber;
#endif  // !_MSC_VER

SharedFilesStoreFileOutput::SharedFilesStoreFileOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesStoreFileOutput::InitAsDefaultInstance() {
}

SharedFilesStoreFileOutput::SharedFilesStoreFileOutput(const SharedFilesStoreFileOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesStoreFileOutput::SharedCtor() {
  _cached_size_ = 0;
  comp_id_ = GOOGLE_ULONGLONG(0);
  stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesStoreFileOutput::~SharedFilesStoreFileOutput() {
  SharedDtor();
}

void SharedFilesStoreFileOutput::SharedDtor() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stored_name_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesStoreFileOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesStoreFileOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesStoreFileOutput_descriptor_;
}

const SharedFilesStoreFileOutput& SharedFilesStoreFileOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesStoreFileOutput* SharedFilesStoreFileOutput::default_instance_ = NULL;

SharedFilesStoreFileOutput* SharedFilesStoreFileOutput::New() const {
  return new SharedFilesStoreFileOutput;
}

void SharedFilesStoreFileOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comp_id_ = GOOGLE_ULONGLONG(0);
    if (has_stored_name()) {
      if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
        stored_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesStoreFileOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 comp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stored_name;
        break;
      }
      
      // optional string stored_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stored_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stored_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stored_name().data(), this->stored_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesStoreFileOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed64 comp_id = 1;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->comp_id(), output);
  }
  
  // optional string stored_name = 2;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stored_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesStoreFileOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed64 comp_id = 1;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->comp_id(), target);
  }
  
  // optional string stored_name = 2;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stored_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesStoreFileOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed64 comp_id = 1;
    if (has_comp_id()) {
      total_size += 1 + 8;
    }
    
    // optional string stored_name = 2;
    if (has_stored_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stored_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesStoreFileOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesStoreFileOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesStoreFileOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesStoreFileOutput::MergeFrom(const SharedFilesStoreFileOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_stored_name()) {
      set_stored_name(from.stored_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesStoreFileOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesStoreFileOutput::CopyFrom(const SharedFilesStoreFileOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesStoreFileOutput::IsInitialized() const {
  
  return true;
}

void SharedFilesStoreFileOutput::Swap(SharedFilesStoreFileOutput* other) {
  if (other != this) {
    std::swap(comp_id_, other->comp_id_);
    std::swap(stored_name_, other->stored_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesStoreFileOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesStoreFileOutput_descriptor_;
  metadata.reflection = SharedFilesStoreFileOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesShareFileInput::kUserIdFieldNumber;
const int SharedFilesShareFileInput::kCompIdFieldNumber;
const int SharedFilesShareFileInput::kStoredNameFieldNumber;
const int SharedFilesShareFileInput::kRecipientEmailsFieldNumber;
#endif  // !_MSC_VER

SharedFilesShareFileInput::SharedFilesShareFileInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesShareFileInput::InitAsDefaultInstance() {
}

SharedFilesShareFileInput::SharedFilesShareFileInput(const SharedFilesShareFileInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesShareFileInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  comp_id_ = GOOGLE_ULONGLONG(0);
  stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesShareFileInput::~SharedFilesShareFileInput() {
  SharedDtor();
}

void SharedFilesShareFileInput::SharedDtor() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stored_name_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesShareFileInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesShareFileInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesShareFileInput_descriptor_;
}

const SharedFilesShareFileInput& SharedFilesShareFileInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesShareFileInput* SharedFilesShareFileInput::default_instance_ = NULL;

SharedFilesShareFileInput* SharedFilesShareFileInput::New() const {
  return new SharedFilesShareFileInput;
}

void SharedFilesShareFileInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    comp_id_ = GOOGLE_ULONGLONG(0);
    if (has_stored_name()) {
      if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
        stored_name_->clear();
      }
    }
  }
  recipient_emails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesShareFileInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_comp_id;
        break;
      }
      
      // required fixed64 comp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stored_name;
        break;
      }
      
      // optional string stored_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stored_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stored_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stored_name().data(), this->stored_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recipient_emails;
        break;
      }
      
      // repeated string recipient_emails = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipient_emails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipient_emails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recipient_emails(0).data(), this->recipient_emails(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recipient_emails;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesShareFileInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 comp_id = 2;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->comp_id(), output);
  }
  
  // optional string stored_name = 3;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stored_name(), output);
  }
  
  // repeated string recipient_emails = 4;
  for (int i = 0; i < this->recipient_emails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recipient_emails(i).data(), this->recipient_emails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->recipient_emails(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesShareFileInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 comp_id = 2;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->comp_id(), target);
  }
  
  // optional string stored_name = 3;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stored_name(), target);
  }
  
  // repeated string recipient_emails = 4;
  for (int i = 0; i < this->recipient_emails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipient_emails(i).data(), this->recipient_emails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->recipient_emails(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesShareFileInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 comp_id = 2;
    if (has_comp_id()) {
      total_size += 1 + 8;
    }
    
    // optional string stored_name = 3;
    if (has_stored_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stored_name());
    }
    
  }
  // repeated string recipient_emails = 4;
  total_size += 1 * this->recipient_emails_size();
  for (int i = 0; i < this->recipient_emails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipient_emails(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesShareFileInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesShareFileInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesShareFileInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesShareFileInput::MergeFrom(const SharedFilesShareFileInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipient_emails_.MergeFrom(from.recipient_emails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_stored_name()) {
      set_stored_name(from.stored_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesShareFileInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesShareFileInput::CopyFrom(const SharedFilesShareFileInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesShareFileInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SharedFilesShareFileInput::Swap(SharedFilesShareFileInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(stored_name_, other->stored_name_);
    recipient_emails_.Swap(&other->recipient_emails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesShareFileInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesShareFileInput_descriptor_;
  metadata.reflection = SharedFilesShareFileInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesUnshareFileInput::kUserIdFieldNumber;
const int SharedFilesUnshareFileInput::kCompIdFieldNumber;
const int SharedFilesUnshareFileInput::kStoredNameFieldNumber;
const int SharedFilesUnshareFileInput::kRecipientEmailsFieldNumber;
#endif  // !_MSC_VER

SharedFilesUnshareFileInput::SharedFilesUnshareFileInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesUnshareFileInput::InitAsDefaultInstance() {
}

SharedFilesUnshareFileInput::SharedFilesUnshareFileInput(const SharedFilesUnshareFileInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesUnshareFileInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  comp_id_ = GOOGLE_ULONGLONG(0);
  stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesUnshareFileInput::~SharedFilesUnshareFileInput() {
  SharedDtor();
}

void SharedFilesUnshareFileInput::SharedDtor() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stored_name_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesUnshareFileInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesUnshareFileInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesUnshareFileInput_descriptor_;
}

const SharedFilesUnshareFileInput& SharedFilesUnshareFileInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesUnshareFileInput* SharedFilesUnshareFileInput::default_instance_ = NULL;

SharedFilesUnshareFileInput* SharedFilesUnshareFileInput::New() const {
  return new SharedFilesUnshareFileInput;
}

void SharedFilesUnshareFileInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    comp_id_ = GOOGLE_ULONGLONG(0);
    if (has_stored_name()) {
      if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
        stored_name_->clear();
      }
    }
  }
  recipient_emails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesUnshareFileInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_comp_id;
        break;
      }
      
      // required fixed64 comp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stored_name;
        break;
      }
      
      // optional string stored_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stored_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stored_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stored_name().data(), this->stored_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recipient_emails;
        break;
      }
      
      // repeated string recipient_emails = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipient_emails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipient_emails()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recipient_emails(0).data(), this->recipient_emails(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recipient_emails;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesUnshareFileInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 comp_id = 2;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->comp_id(), output);
  }
  
  // optional string stored_name = 3;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stored_name(), output);
  }
  
  // repeated string recipient_emails = 4;
  for (int i = 0; i < this->recipient_emails_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recipient_emails(i).data(), this->recipient_emails(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->recipient_emails(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesUnshareFileInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 comp_id = 2;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->comp_id(), target);
  }
  
  // optional string stored_name = 3;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stored_name(), target);
  }
  
  // repeated string recipient_emails = 4;
  for (int i = 0; i < this->recipient_emails_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipient_emails(i).data(), this->recipient_emails(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->recipient_emails(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesUnshareFileInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 comp_id = 2;
    if (has_comp_id()) {
      total_size += 1 + 8;
    }
    
    // optional string stored_name = 3;
    if (has_stored_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stored_name());
    }
    
  }
  // repeated string recipient_emails = 4;
  total_size += 1 * this->recipient_emails_size();
  for (int i = 0; i < this->recipient_emails_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipient_emails(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesUnshareFileInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesUnshareFileInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesUnshareFileInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesUnshareFileInput::MergeFrom(const SharedFilesUnshareFileInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipient_emails_.MergeFrom(from.recipient_emails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_stored_name()) {
      set_stored_name(from.stored_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesUnshareFileInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesUnshareFileInput::CopyFrom(const SharedFilesUnshareFileInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesUnshareFileInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SharedFilesUnshareFileInput::Swap(SharedFilesUnshareFileInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(stored_name_, other->stored_name_);
    recipient_emails_.Swap(&other->recipient_emails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesUnshareFileInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesUnshareFileInput_descriptor_;
  metadata.reflection = SharedFilesUnshareFileInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesDeleteSharedFileInput::kUserIdFieldNumber;
const int SharedFilesDeleteSharedFileInput::kCompIdFieldNumber;
const int SharedFilesDeleteSharedFileInput::kStoredNameFieldNumber;
#endif  // !_MSC_VER

SharedFilesDeleteSharedFileInput::SharedFilesDeleteSharedFileInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesDeleteSharedFileInput::InitAsDefaultInstance() {
}

SharedFilesDeleteSharedFileInput::SharedFilesDeleteSharedFileInput(const SharedFilesDeleteSharedFileInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesDeleteSharedFileInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  comp_id_ = GOOGLE_ULONGLONG(0);
  stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesDeleteSharedFileInput::~SharedFilesDeleteSharedFileInput() {
  SharedDtor();
}

void SharedFilesDeleteSharedFileInput::SharedDtor() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stored_name_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesDeleteSharedFileInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesDeleteSharedFileInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesDeleteSharedFileInput_descriptor_;
}

const SharedFilesDeleteSharedFileInput& SharedFilesDeleteSharedFileInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesDeleteSharedFileInput* SharedFilesDeleteSharedFileInput::default_instance_ = NULL;

SharedFilesDeleteSharedFileInput* SharedFilesDeleteSharedFileInput::New() const {
  return new SharedFilesDeleteSharedFileInput;
}

void SharedFilesDeleteSharedFileInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    comp_id_ = GOOGLE_ULONGLONG(0);
    if (has_stored_name()) {
      if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
        stored_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesDeleteSharedFileInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_comp_id;
        break;
      }
      
      // required fixed64 comp_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stored_name;
        break;
      }
      
      // optional string stored_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stored_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stored_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stored_name().data(), this->stored_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesDeleteSharedFileInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required fixed64 comp_id = 2;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->comp_id(), output);
  }
  
  // optional string stored_name = 3;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stored_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesDeleteSharedFileInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required fixed64 comp_id = 2;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->comp_id(), target);
  }
  
  // optional string stored_name = 3;
  if (has_stored_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stored_name().data(), this->stored_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stored_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesDeleteSharedFileInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required fixed64 comp_id = 2;
    if (has_comp_id()) {
      total_size += 1 + 8;
    }
    
    // optional string stored_name = 3;
    if (has_stored_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stored_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesDeleteSharedFileInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesDeleteSharedFileInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesDeleteSharedFileInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesDeleteSharedFileInput::MergeFrom(const SharedFilesDeleteSharedFileInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_stored_name()) {
      set_stored_name(from.stored_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesDeleteSharedFileInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesDeleteSharedFileInput::CopyFrom(const SharedFilesDeleteSharedFileInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesDeleteSharedFileInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SharedFilesDeleteSharedFileInput::Swap(SharedFilesDeleteSharedFileInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(stored_name_, other->stored_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesDeleteSharedFileInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesDeleteSharedFileInput_descriptor_;
  metadata.reflection = SharedFilesDeleteSharedFileInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesQueryInput::kUserIdFieldNumber;
const int SharedFilesQueryInput::kSyncFeatureFieldNumber;
const int SharedFilesQueryInput::kSearchFieldFieldNumber;
const int SharedFilesQueryInput::kSortFieldFieldNumber;
#endif  // !_MSC_VER

SharedFilesQueryInput::SharedFilesQueryInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesQueryInput::InitAsDefaultInstance() {
}

SharedFilesQueryInput::SharedFilesQueryInput(const SharedFilesQueryInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesQueryInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  sync_feature_ = 1;
  search_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sort_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesQueryInput::~SharedFilesQueryInput() {
  SharedDtor();
}

void SharedFilesQueryInput::SharedDtor() {
  if (search_field_ != &::google::protobuf::internal::kEmptyString) {
    delete search_field_;
  }
  if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
    delete sort_field_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesQueryInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesQueryInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesQueryInput_descriptor_;
}

const SharedFilesQueryInput& SharedFilesQueryInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesQueryInput* SharedFilesQueryInput::default_instance_ = NULL;

SharedFilesQueryInput* SharedFilesQueryInput::New() const {
  return new SharedFilesQueryInput;
}

void SharedFilesQueryInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    sync_feature_ = 1;
    if (has_search_field()) {
      if (search_field_ != &::google::protobuf::internal::kEmptyString) {
        search_field_->clear();
      }
    }
    if (has_sort_field()) {
      if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
        sort_field_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesQueryInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sync_feature;
        break;
      }
      
      // required .ccd.SyncFeature_t sync_feature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sync_feature:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ccd::SyncFeature_t_IsValid(value)) {
            set_sync_feature(static_cast< ccd::SyncFeature_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_search_field;
        break;
      }
      
      // optional string search_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_search_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->search_field().data(), this->search_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sort_field;
        break;
      }
      
      // optional string sort_field = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sort_field:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sort_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sort_field().data(), this->sort_field().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesQueryInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required .ccd.SyncFeature_t sync_feature = 2;
  if (has_sync_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sync_feature(), output);
  }
  
  // optional string search_field = 3;
  if (has_search_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_field().data(), this->search_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->search_field(), output);
  }
  
  // optional string sort_field = 4;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sort_field().data(), this->sort_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sort_field(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesQueryInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required .ccd.SyncFeature_t sync_feature = 2;
  if (has_sync_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sync_feature(), target);
  }
  
  // optional string search_field = 3;
  if (has_search_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->search_field().data(), this->search_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->search_field(), target);
  }
  
  // optional string sort_field = 4;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sort_field().data(), this->sort_field().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sort_field(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesQueryInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required .ccd.SyncFeature_t sync_feature = 2;
    if (has_sync_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_feature());
    }
    
    // optional string search_field = 3;
    if (has_search_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_field());
    }
    
    // optional string sort_field = 4;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sort_field());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesQueryInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesQueryInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesQueryInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesQueryInput::MergeFrom(const SharedFilesQueryInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_sync_feature()) {
      set_sync_feature(from.sync_feature());
    }
    if (from.has_search_field()) {
      set_search_field(from.search_field());
    }
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesQueryInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesQueryInput::CopyFrom(const SharedFilesQueryInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesQueryInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SharedFilesQueryInput::Swap(SharedFilesQueryInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(sync_feature_, other->sync_feature_);
    std::swap(search_field_, other->search_field_);
    std::swap(sort_field_, other->sort_field_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesQueryInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesQueryInput_descriptor_;
  metadata.reflection = SharedFilesQueryInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesQueryObject::kCompIdFieldNumber;
const int SharedFilesQueryObject::kRevisionFieldNumber;
const int SharedFilesQueryObject::kNameFieldNumber;
const int SharedFilesQueryObject::kContentUrlFieldNumber;
const int SharedFilesQueryObject::kPreviewUrlFieldNumber;
const int SharedFilesQueryObject::kOpaqueMetadataFieldNumber;
const int SharedFilesQueryObject::kRecipientListFieldNumber;
#endif  // !_MSC_VER

SharedFilesQueryObject::SharedFilesQueryObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesQueryObject::InitAsDefaultInstance() {
}

SharedFilesQueryObject::SharedFilesQueryObject(const SharedFilesQueryObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesQueryObject::SharedCtor() {
  _cached_size_ = 0;
  comp_id_ = GOOGLE_ULONGLONG(0);
  revision_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preview_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opaque_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesQueryObject::~SharedFilesQueryObject() {
  SharedDtor();
}

void SharedFilesQueryObject::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (content_url_ != &::google::protobuf::internal::kEmptyString) {
    delete content_url_;
  }
  if (preview_url_ != &::google::protobuf::internal::kEmptyString) {
    delete preview_url_;
  }
  if (opaque_metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete opaque_metadata_;
  }
  if (this != default_instance_) {
  }
}

void SharedFilesQueryObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesQueryObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesQueryObject_descriptor_;
}

const SharedFilesQueryObject& SharedFilesQueryObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesQueryObject* SharedFilesQueryObject::default_instance_ = NULL;

SharedFilesQueryObject* SharedFilesQueryObject::New() const {
  return new SharedFilesQueryObject;
}

void SharedFilesQueryObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comp_id_ = GOOGLE_ULONGLONG(0);
    revision_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_content_url()) {
      if (content_url_ != &::google::protobuf::internal::kEmptyString) {
        content_url_->clear();
      }
    }
    if (has_preview_url()) {
      if (preview_url_ != &::google::protobuf::internal::kEmptyString) {
        preview_url_->clear();
      }
    }
    if (has_opaque_metadata()) {
      if (opaque_metadata_ != &::google::protobuf::internal::kEmptyString) {
        opaque_metadata_->clear();
      }
    }
  }
  recipient_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesQueryObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 comp_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_revision;
        break;
      }
      
      // optional fixed64 revision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content_url;
        break;
      }
      
      // optional string content_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content_url().data(), this->content_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_preview_url;
        break;
      }
      
      // optional string preview_url = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preview_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preview_url().data(), this->preview_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_opaque_metadata;
        break;
      }
      
      // optional string opaque_metadata = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opaque_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opaque_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opaque_metadata().data(), this->opaque_metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recipient_list;
        break;
      }
      
      // repeated string recipient_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recipient_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipient_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recipient_list(0).data(), this->recipient_list(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_recipient_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesQueryObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 comp_id = 1;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->comp_id(), output);
  }
  
  // optional fixed64 revision = 2;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->revision(), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string content_url = 4;
  if (has_content_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_url().data(), this->content_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content_url(), output);
  }
  
  // optional string preview_url = 5;
  if (has_preview_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preview_url().data(), this->preview_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->preview_url(), output);
  }
  
  // optional string opaque_metadata = 6;
  if (has_opaque_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opaque_metadata().data(), this->opaque_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opaque_metadata(), output);
  }
  
  // repeated string recipient_list = 7;
  for (int i = 0; i < this->recipient_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->recipient_list(i).data(), this->recipient_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->recipient_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesQueryObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 comp_id = 1;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->comp_id(), target);
  }
  
  // optional fixed64 revision = 2;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->revision(), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string content_url = 4;
  if (has_content_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content_url().data(), this->content_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content_url(), target);
  }
  
  // optional string preview_url = 5;
  if (has_preview_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preview_url().data(), this->preview_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->preview_url(), target);
  }
  
  // optional string opaque_metadata = 6;
  if (has_opaque_metadata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opaque_metadata().data(), this->opaque_metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->opaque_metadata(), target);
  }
  
  // repeated string recipient_list = 7;
  for (int i = 0; i < this->recipient_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recipient_list(i).data(), this->recipient_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->recipient_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesQueryObject::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 comp_id = 1;
    if (has_comp_id()) {
      total_size += 1 + 8;
    }
    
    // optional fixed64 revision = 2;
    if (has_revision()) {
      total_size += 1 + 8;
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string content_url = 4;
    if (has_content_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_url());
    }
    
    // optional string preview_url = 5;
    if (has_preview_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_url());
    }
    
    // optional string opaque_metadata = 6;
    if (has_opaque_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opaque_metadata());
    }
    
  }
  // repeated string recipient_list = 7;
  total_size += 1 * this->recipient_list_size();
  for (int i = 0; i < this->recipient_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipient_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesQueryObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesQueryObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesQueryObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesQueryObject::MergeFrom(const SharedFilesQueryObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  recipient_list_.MergeFrom(from.recipient_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content_url()) {
      set_content_url(from.content_url());
    }
    if (from.has_preview_url()) {
      set_preview_url(from.preview_url());
    }
    if (from.has_opaque_metadata()) {
      set_opaque_metadata(from.opaque_metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesQueryObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesQueryObject::CopyFrom(const SharedFilesQueryObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesQueryObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void SharedFilesQueryObject::Swap(SharedFilesQueryObject* other) {
  if (other != this) {
    std::swap(comp_id_, other->comp_id_);
    std::swap(revision_, other->revision_);
    std::swap(name_, other->name_);
    std::swap(content_url_, other->content_url_);
    std::swap(preview_url_, other->preview_url_);
    std::swap(opaque_metadata_, other->opaque_metadata_);
    recipient_list_.Swap(&other->recipient_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesQueryObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesQueryObject_descriptor_;
  metadata.reflection = SharedFilesQueryObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SharedFilesQueryOutput::kQueryObjectsFieldNumber;
#endif  // !_MSC_VER

SharedFilesQueryOutput::SharedFilesQueryOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SharedFilesQueryOutput::InitAsDefaultInstance() {
}

SharedFilesQueryOutput::SharedFilesQueryOutput(const SharedFilesQueryOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SharedFilesQueryOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SharedFilesQueryOutput::~SharedFilesQueryOutput() {
  SharedDtor();
}

void SharedFilesQueryOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SharedFilesQueryOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SharedFilesQueryOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SharedFilesQueryOutput_descriptor_;
}

const SharedFilesQueryOutput& SharedFilesQueryOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

SharedFilesQueryOutput* SharedFilesQueryOutput::default_instance_ = NULL;

SharedFilesQueryOutput* SharedFilesQueryOutput::New() const {
  return new SharedFilesQueryOutput;
}

void SharedFilesQueryOutput::Clear() {
  query_objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SharedFilesQueryOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.SharedFilesQueryObject query_objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_query_objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SharedFilesQueryOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.SharedFilesQueryObject query_objects = 1;
  for (int i = 0; i < this->query_objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->query_objects(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SharedFilesQueryOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.SharedFilesQueryObject query_objects = 1;
  for (int i = 0; i < this->query_objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->query_objects(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SharedFilesQueryOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.SharedFilesQueryObject query_objects = 1;
  total_size += 1 * this->query_objects_size();
  for (int i = 0; i < this->query_objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->query_objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedFilesQueryOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SharedFilesQueryOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SharedFilesQueryOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SharedFilesQueryOutput::MergeFrom(const SharedFilesQueryOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  query_objects_.MergeFrom(from.query_objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SharedFilesQueryOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SharedFilesQueryOutput::CopyFrom(const SharedFilesQueryOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedFilesQueryOutput::IsInitialized() const {
  
  for (int i = 0; i < query_objects_size(); i++) {
    if (!this->query_objects(i).IsInitialized()) return false;
  }
  return true;
}

void SharedFilesQueryOutput::Swap(SharedFilesQueryOutput* other) {
  if (other != this) {
    query_objects_.Swap(&other->query_objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SharedFilesQueryOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SharedFilesQueryOutput_descriptor_;
  metadata.reflection = SharedFilesQueryOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoteExecutableInfo::kNameFieldNumber;
const int RemoteExecutableInfo::kAbsolutePathFieldNumber;
const int RemoteExecutableInfo::kVersionNumFieldNumber;
#endif  // !_MSC_VER

RemoteExecutableInfo::RemoteExecutableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoteExecutableInfo::InitAsDefaultInstance() {
}

RemoteExecutableInfo::RemoteExecutableInfo(const RemoteExecutableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteExecutableInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteExecutableInfo::~RemoteExecutableInfo() {
  SharedDtor();
}

void RemoteExecutableInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (this != default_instance_) {
  }
}

void RemoteExecutableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoteExecutableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoteExecutableInfo_descriptor_;
}

const RemoteExecutableInfo& RemoteExecutableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RemoteExecutableInfo* RemoteExecutableInfo::default_instance_ = NULL;

RemoteExecutableInfo* RemoteExecutableInfo::New() const {
  return new RemoteExecutableInfo;
}

void RemoteExecutableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
    version_num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoteExecutableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_absolute_path;
        break;
      }
      
      // required string absolute_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absolute_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_version_num;
        break;
      }
      
      // required fixed64 version_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_num_)));
          set_has_version_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteExecutableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->absolute_path(), output);
  }
  
  // required fixed64 version_num = 3;
  if (has_version_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->version_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoteExecutableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string absolute_path = 2;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->absolute_path(), target);
  }
  
  // required fixed64 version_num = 3;
  if (has_version_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->version_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoteExecutableInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string absolute_path = 2;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
    // required fixed64 version_num = 3;
    if (has_version_num()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteExecutableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoteExecutableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoteExecutableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoteExecutableInfo::MergeFrom(const RemoteExecutableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
    if (from.has_version_num()) {
      set_version_num(from.version_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoteExecutableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteExecutableInfo::CopyFrom(const RemoteExecutableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteExecutableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RemoteExecutableInfo::Swap(RemoteExecutableInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(version_num_, other->version_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoteExecutableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoteExecutableInfo_descriptor_;
  metadata.reflection = RemoteExecutableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterRemoteExecutableInput::kUserIdFieldNumber;
const int RegisterRemoteExecutableInput::kAppKeyFieldNumber;
const int RegisterRemoteExecutableInput::kRemoteExecutableInfoFieldNumber;
#endif  // !_MSC_VER

RegisterRemoteExecutableInput::RegisterRemoteExecutableInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterRemoteExecutableInput::InitAsDefaultInstance() {
  remote_executable_info_ = const_cast< ::ccd::RemoteExecutableInfo*>(&::ccd::RemoteExecutableInfo::default_instance());
}

RegisterRemoteExecutableInput::RegisterRemoteExecutableInput(const RegisterRemoteExecutableInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterRemoteExecutableInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_executable_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterRemoteExecutableInput::~RegisterRemoteExecutableInput() {
  SharedDtor();
}

void RegisterRemoteExecutableInput::SharedDtor() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    delete app_key_;
  }
  if (this != default_instance_) {
    delete remote_executable_info_;
  }
}

void RegisterRemoteExecutableInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRemoteExecutableInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRemoteExecutableInput_descriptor_;
}

const RegisterRemoteExecutableInput& RegisterRemoteExecutableInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

RegisterRemoteExecutableInput* RegisterRemoteExecutableInput::default_instance_ = NULL;

RegisterRemoteExecutableInput* RegisterRemoteExecutableInput::New() const {
  return new RegisterRemoteExecutableInput;
}

void RegisterRemoteExecutableInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::kEmptyString) {
        app_key_->clear();
      }
    }
    if (has_remote_executable_info()) {
      if (remote_executable_info_ != NULL) remote_executable_info_->::ccd::RemoteExecutableInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterRemoteExecutableInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_key;
        break;
      }
      
      // required string app_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_executable_info;
        break;
      }
      
      // required .ccd.RemoteExecutableInfo remote_executable_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_executable_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_executable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterRemoteExecutableInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string app_key = 2;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_key(), output);
  }
  
  // required .ccd.RemoteExecutableInfo remote_executable_info = 3;
  if (has_remote_executable_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->remote_executable_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterRemoteExecutableInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string app_key = 2;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_key(), target);
  }
  
  // required .ccd.RemoteExecutableInfo remote_executable_info = 3;
  if (has_remote_executable_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->remote_executable_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterRemoteExecutableInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string app_key = 2;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }
    
    // required .ccd.RemoteExecutableInfo remote_executable_info = 3;
    if (has_remote_executable_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remote_executable_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRemoteExecutableInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterRemoteExecutableInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterRemoteExecutableInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterRemoteExecutableInput::MergeFrom(const RegisterRemoteExecutableInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
    if (from.has_remote_executable_info()) {
      mutable_remote_executable_info()->::ccd::RemoteExecutableInfo::MergeFrom(from.remote_executable_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterRemoteExecutableInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRemoteExecutableInput::CopyFrom(const RegisterRemoteExecutableInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRemoteExecutableInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_remote_executable_info()) {
    if (!this->remote_executable_info().IsInitialized()) return false;
  }
  return true;
}

void RegisterRemoteExecutableInput::Swap(RegisterRemoteExecutableInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(app_key_, other->app_key_);
    std::swap(remote_executable_info_, other->remote_executable_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterRemoteExecutableInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRemoteExecutableInput_descriptor_;
  metadata.reflection = RegisterRemoteExecutableInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnregisterRemoteExecutableInput::kUserIdFieldNumber;
const int UnregisterRemoteExecutableInput::kAppKeyFieldNumber;
const int UnregisterRemoteExecutableInput::kRemoteExecutableNameFieldNumber;
#endif  // !_MSC_VER

UnregisterRemoteExecutableInput::UnregisterRemoteExecutableInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnregisterRemoteExecutableInput::InitAsDefaultInstance() {
}

UnregisterRemoteExecutableInput::UnregisterRemoteExecutableInput(const UnregisterRemoteExecutableInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnregisterRemoteExecutableInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_executable_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnregisterRemoteExecutableInput::~UnregisterRemoteExecutableInput() {
  SharedDtor();
}

void UnregisterRemoteExecutableInput::SharedDtor() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    delete app_key_;
  }
  if (remote_executable_name_ != &::google::protobuf::internal::kEmptyString) {
    delete remote_executable_name_;
  }
  if (this != default_instance_) {
  }
}

void UnregisterRemoteExecutableInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnregisterRemoteExecutableInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnregisterRemoteExecutableInput_descriptor_;
}

const UnregisterRemoteExecutableInput& UnregisterRemoteExecutableInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

UnregisterRemoteExecutableInput* UnregisterRemoteExecutableInput::default_instance_ = NULL;

UnregisterRemoteExecutableInput* UnregisterRemoteExecutableInput::New() const {
  return new UnregisterRemoteExecutableInput;
}

void UnregisterRemoteExecutableInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::kEmptyString) {
        app_key_->clear();
      }
    }
    if (has_remote_executable_name()) {
      if (remote_executable_name_ != &::google::protobuf::internal::kEmptyString) {
        remote_executable_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnregisterRemoteExecutableInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_key;
        break;
      }
      
      // required string app_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_remote_executable_name;
        break;
      }
      
      // required string remote_executable_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_executable_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_executable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remote_executable_name().data(), this->remote_executable_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnregisterRemoteExecutableInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string app_key = 2;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_key(), output);
  }
  
  // required string remote_executable_name = 3;
  if (has_remote_executable_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_executable_name().data(), this->remote_executable_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->remote_executable_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnregisterRemoteExecutableInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string app_key = 2;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_key(), target);
  }
  
  // required string remote_executable_name = 3;
  if (has_remote_executable_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_executable_name().data(), this->remote_executable_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remote_executable_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnregisterRemoteExecutableInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string app_key = 2;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }
    
    // required string remote_executable_name = 3;
    if (has_remote_executable_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_executable_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnregisterRemoteExecutableInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnregisterRemoteExecutableInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnregisterRemoteExecutableInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnregisterRemoteExecutableInput::MergeFrom(const UnregisterRemoteExecutableInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
    if (from.has_remote_executable_name()) {
      set_remote_executable_name(from.remote_executable_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnregisterRemoteExecutableInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterRemoteExecutableInput::CopyFrom(const UnregisterRemoteExecutableInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterRemoteExecutableInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UnregisterRemoteExecutableInput::Swap(UnregisterRemoteExecutableInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(app_key_, other->app_key_);
    std::swap(remote_executable_name_, other->remote_executable_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnregisterRemoteExecutableInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnregisterRemoteExecutableInput_descriptor_;
  metadata.reflection = UnregisterRemoteExecutableInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListRegisteredRemoteExecutablesInput::kUserIdFieldNumber;
const int ListRegisteredRemoteExecutablesInput::kAppKeyFieldNumber;
#endif  // !_MSC_VER

ListRegisteredRemoteExecutablesInput::ListRegisteredRemoteExecutablesInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRegisteredRemoteExecutablesInput::InitAsDefaultInstance() {
}

ListRegisteredRemoteExecutablesInput::ListRegisteredRemoteExecutablesInput(const ListRegisteredRemoteExecutablesInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRegisteredRemoteExecutablesInput::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRegisteredRemoteExecutablesInput::~ListRegisteredRemoteExecutablesInput() {
  SharedDtor();
}

void ListRegisteredRemoteExecutablesInput::SharedDtor() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    delete app_key_;
  }
  if (this != default_instance_) {
  }
}

void ListRegisteredRemoteExecutablesInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRegisteredRemoteExecutablesInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRegisteredRemoteExecutablesInput_descriptor_;
}

const ListRegisteredRemoteExecutablesInput& ListRegisteredRemoteExecutablesInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListRegisteredRemoteExecutablesInput* ListRegisteredRemoteExecutablesInput::default_instance_ = NULL;

ListRegisteredRemoteExecutablesInput* ListRegisteredRemoteExecutablesInput::New() const {
  return new ListRegisteredRemoteExecutablesInput;
}

void ListRegisteredRemoteExecutablesInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_app_key()) {
      if (app_key_ != &::google::protobuf::internal::kEmptyString) {
        app_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRegisteredRemoteExecutablesInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_key;
        break;
      }
      
      // required string app_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_key().data(), this->app_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListRegisteredRemoteExecutablesInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }
  
  // required string app_key = 2;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_key(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRegisteredRemoteExecutablesInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }
  
  // required string app_key = 2;
  if (has_app_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_key().data(), this->app_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_key(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRegisteredRemoteExecutablesInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 + 8;
    }
    
    // required string app_key = 2;
    if (has_app_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_key());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRegisteredRemoteExecutablesInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRegisteredRemoteExecutablesInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRegisteredRemoteExecutablesInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRegisteredRemoteExecutablesInput::MergeFrom(const ListRegisteredRemoteExecutablesInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_app_key()) {
      set_app_key(from.app_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRegisteredRemoteExecutablesInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRegisteredRemoteExecutablesInput::CopyFrom(const ListRegisteredRemoteExecutablesInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRegisteredRemoteExecutablesInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ListRegisteredRemoteExecutablesInput::Swap(ListRegisteredRemoteExecutablesInput* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(app_key_, other->app_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRegisteredRemoteExecutablesInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRegisteredRemoteExecutablesInput_descriptor_;
  metadata.reflection = ListRegisteredRemoteExecutablesInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListRegisteredRemoteExecutablesOutput::kRegisteredRemoteExecutablesFieldNumber;
#endif  // !_MSC_VER

ListRegisteredRemoteExecutablesOutput::ListRegisteredRemoteExecutablesOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRegisteredRemoteExecutablesOutput::InitAsDefaultInstance() {
}

ListRegisteredRemoteExecutablesOutput::ListRegisteredRemoteExecutablesOutput(const ListRegisteredRemoteExecutablesOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRegisteredRemoteExecutablesOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRegisteredRemoteExecutablesOutput::~ListRegisteredRemoteExecutablesOutput() {
  SharedDtor();
}

void ListRegisteredRemoteExecutablesOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListRegisteredRemoteExecutablesOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRegisteredRemoteExecutablesOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRegisteredRemoteExecutablesOutput_descriptor_;
}

const ListRegisteredRemoteExecutablesOutput& ListRegisteredRemoteExecutablesOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ccdi_5frpc_2eproto();  return *default_instance_;
}

ListRegisteredRemoteExecutablesOutput* ListRegisteredRemoteExecutablesOutput::default_instance_ = NULL;

ListRegisteredRemoteExecutablesOutput* ListRegisteredRemoteExecutablesOutput::New() const {
  return new ListRegisteredRemoteExecutablesOutput;
}

void ListRegisteredRemoteExecutablesOutput::Clear() {
  registered_remote_executables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRegisteredRemoteExecutablesOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ccd.RemoteExecutableInfo registered_remote_executables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registered_remote_executables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_registered_remote_executables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_registered_remote_executables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListRegisteredRemoteExecutablesOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ccd.RemoteExecutableInfo registered_remote_executables = 1;
  for (int i = 0; i < this->registered_remote_executables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->registered_remote_executables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRegisteredRemoteExecutablesOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ccd.RemoteExecutableInfo registered_remote_executables = 1;
  for (int i = 0; i < this->registered_remote_executables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->registered_remote_executables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRegisteredRemoteExecutablesOutput::ByteSize() const {
  int total_size = 0;
  
  // repeated .ccd.RemoteExecutableInfo registered_remote_executables = 1;
  total_size += 1 * this->registered_remote_executables_size();
  for (int i = 0; i < this->registered_remote_executables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->registered_remote_executables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRegisteredRemoteExecutablesOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRegisteredRemoteExecutablesOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRegisteredRemoteExecutablesOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRegisteredRemoteExecutablesOutput::MergeFrom(const ListRegisteredRemoteExecutablesOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  registered_remote_executables_.MergeFrom(from.registered_remote_executables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRegisteredRemoteExecutablesOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRegisteredRemoteExecutablesOutput::CopyFrom(const ListRegisteredRemoteExecutablesOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRegisteredRemoteExecutablesOutput::IsInitialized() const {
  
  for (int i = 0; i < registered_remote_executables_size(); i++) {
    if (!this->registered_remote_executables(i).IsInitialized()) return false;
  }
  return true;
}

void ListRegisteredRemoteExecutablesOutput::Swap(ListRegisteredRemoteExecutablesOutput* other) {
  if (other != this) {
    registered_remote_executables_.Swap(&other->registered_remote_executables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRegisteredRemoteExecutablesOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRegisteredRemoteExecutablesOutput_descriptor_;
  metadata.reflection = ListRegisteredRemoteExecutablesOutput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccd

// @@protoc_insertion_point(global_scope)
