// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccdi_rpc.proto

#ifndef PROTOBUF_ccdi_5frpc_2eproto__INCLUDED
#define PROTOBUF_ccdi_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "media_metadata_types.pb.h"
#include "vplex_vs_directory_service_types.pb.h"
// @@protoc_insertion_point(includes)

namespace ccd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ccdi_5frpc_2eproto();
void protobuf_AssignDesc_ccdi_5frpc_2eproto();
void protobuf_ShutdownFile_ccdi_5frpc_2eproto();

class NoParamRequest;
class PlayerIndexRequest;
class UserIdRequest;
class NoParamResponse;
class CurrentPlayer;
class CurrentPlayers;
class DiskInfo;
class NetworkInfo;
class IoacAdapterWarnings;
class IoacAdapterStatus;
class IoacOverallStatus;
class GetSystemStateInput;
class PowerStatus;
class CurrentUser;
class LoggedOutUser;
class GetSystemStateOutput;
class LoginInput;
class LoginOutput;
class LogoutInput;
class InfraHttpRequestInput;
class InfraHttpRequestOutput;
class RegisterStorageNodeInput;
class UnregisterStorageNodeInput;
class RemoteFileAccessControlDirSpec;
class RemoteFileAccessControlDirs;
class UpdateStorageNodeInput;
class LanDeviceRouteInfo;
class LanDeviceInfo;
class ReportLanDevicesInput;
class ListLanDevicesInput;
class ListLanDevicesOutput;
class DatasetItem;
class ListStorageNodeDatasetsOutput;
class TrusteeItem;
class CCDWin32StartParams;
class AddDatasetInput;
class AddDatasetOutput;
class AddSyncSubscriptionInput;
class DeleteDatasetInput;
class DeleteSyncSubscriptionsInput;
class EventsCreateQueueInput;
class EventsCreateQueueOutput;
class EventsDestroyQueueInput;
class EventsDequeueInput;
class EventSyncFeatureStatusChange;
class EventDeviceInfoChange;
class EventDeviceConnectionChange;
class EventDatasetContentChange;
class EventDatasetChange;
class PairingRequestAttribute;
class EventPairingRequest;
class EventStorageNodeChange;
class EventUserLogin;
class EventUserLogout;
class EventDocSaveAndGoCompletion;
class EventDocSaveAndGoEngineStateChange;
class EventSWUpdateProgress;
class EventIoacStatusChange;
class EventLanDevicesChange;
class EventLanDevicesProbeRequest;
class EventPowerModeChange;
class EventRemoteSwUpdateMessage;
class EventAsyncUploadCompletion;
class EventSyncBackCompletion;
class EventPicStreamDBUpdateComplete;
class EventPicStreamStorageConservation;
class EventDeviceCredentialsChange;
class EventUserCredentialsChange;
class CcdiEvent;
class EventsDequeueOutput;
class GetDatasetDirectoryEntriesInput;
class DatasetDirectoryEntry;
class GetDatasetDirectoryEntriesOutput;
class GetInfraHttpInfoInput;
class GetInfraHttpInfoOutput;
class GetLocalHttpInfoInput;
class GetLocalHttpInfoOutput;
class GetPersonalCloudStateInput;
class DeviceConnectionStatus;
class StorageNodeInfo;
class GetPersonalCloudStateOutput;
class LookupAbsPathInput;
class EventSyncHistory;
class GetSyncStateInput;
class ObjectSyncState;
class DatasetSyncStateSummary;
class FeatureSyncStateSummary;
class MediaMetadataThumbMigrateStatus;
class SyncFeatureSettings;
class LookupAbsPathOutput;
class GetSyncStateOutput;
class GetSyncStateNotificationsInput;
class SyncEventSyncComplete;
class SyncEventFileAdded;
class SyncEventFileRemoved;
class SyncEventError;
class SyncEventFileStatus;
class SyncStateNotification;
class GetSyncStateNotificationsOutput;
class LinkDeviceInput;
class ListLinkedDevicesInput;
class LinkedDeviceInfo;
class ListLinkedDevicesOutput;
class ListOwnedDatasetsInput;
class ListOwnedDatasetsOutput;
class ListUserStorageInput;
class ListUserStorageOutput;
class ListSyncSubscriptionsInput;
class SyncSubscriptionDetail;
class ListSyncSubscriptionsOutput;
class RemoteWakeupInput;
class RemoteSwUpdateMessageInput;
class RenameDatasetInput;
class PrivateMsaDataCommitInput;
class SyncOnceInput;
class SyncOnceOutput;
class UnlinkDeviceInput;
class UpdateAppStateInput;
class UpdateAppStateOutput;
class CameraRollDownloadDirSpec;
class MediaMetadataThumbMigrate;
class SyncFeatureSettingsRequest;
class UpdateSyncSettingsInput;
class UpdateSyncSettingsOutput;
class UpdateSyncSubscriptionInput;
class SWUpdateCheckInput;
class SWUpdateCheckOutput;
class SWUpdateBeginDownloadInput;
class SWUpdateBeginDownloadOutput;
class SWUpdateGetDownloadProgressInput;
class SWUpdateGetDownloadProgressOutput;
class SWUpdateEndDownloadInput;
class SWUpdateCancelDownloadInput;
class SWUpdateSetCcdVersionInput;
class UpdateSystemStateInput;
class UpdateSystemStateOutput;
class BeginMetadataTransactionInput;
class UpdateMetadataInput;
class DeleteMetadataInput;
class DeleteCollectionInput;
class GetCollectionDetailsInput;
class GetCollectionDetailsOutput;
class BeginCatalogInput;
class CommitCatalogInput;
class EndCatalogInput;
class DeleteCatalogInput;
class MSAGetContentURLInput;
class MSAGetContentURLOutput;
class MCAQueryMetadataObjectsInput;
class MCAQueryMetadataObjectsOutput;
class RequestPairingInput;
class RequestPairingOutput;
class RespondToPairingRequestInput;
class RequestPairingPinInput;
class RequestPairingPinOutput;
class GetPairingStatusInput;
class GetPairingStatusOutput;
class CCDIQueryPicStreamObjectsInput;
class CCDIQueryPicStreamObjectsOutput;
class PicStreamQueryObject;
class PicStreamContentDirectoryObject;
class PicStreamItemFields;
class PicStreamAlbumFields;
class SharedFilesStoreFileInput;
class SharedFilesStoreFileOutput;
class SharedFilesShareFileInput;
class SharedFilesUnshareFileInput;
class SharedFilesDeleteSharedFileInput;
class SharedFilesQueryInput;
class SharedFilesQueryObject;
class SharedFilesQueryOutput;
class RemoteExecutableInfo;
class RegisterRemoteExecutableInput;
class UnregisterRemoteExecutableInput;
class ListRegisteredRemoteExecutablesInput;
class ListRegisteredRemoteExecutablesOutput;

enum InfraHttpService_t {
  INFRA_HTTP_SERVICE_OPS = 1,
  INFRA_HTTP_SERVICE_OPS_CENTRAL = 2,
  INFRA_HTTP_SERVICE_OPS_REGIONAL = 3,
  INFRA_HTTP_SERVICE_VCS = 4
};
bool InfraHttpService_t_IsValid(int value);
const InfraHttpService_t InfraHttpService_t_MIN = INFRA_HTTP_SERVICE_OPS;
const InfraHttpService_t InfraHttpService_t_MAX = INFRA_HTTP_SERVICE_VCS;
const int InfraHttpService_t_ARRAYSIZE = InfraHttpService_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfraHttpService_t_descriptor();
inline const ::std::string& InfraHttpService_t_Name(InfraHttpService_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfraHttpService_t_descriptor(), value);
}
inline bool InfraHttpService_t_Parse(
    const ::std::string& name, InfraHttpService_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfraHttpService_t>(
    InfraHttpService_t_descriptor(), name, value);
}
enum LocalHttpService_t {
  LOCAL_HTTP_SERVICE_REMOTE_FILES = 1
};
bool LocalHttpService_t_IsValid(int value);
const LocalHttpService_t LocalHttpService_t_MIN = LOCAL_HTTP_SERVICE_REMOTE_FILES;
const LocalHttpService_t LocalHttpService_t_MAX = LOCAL_HTTP_SERVICE_REMOTE_FILES;
const int LocalHttpService_t_ARRAYSIZE = LocalHttpService_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LocalHttpService_t_descriptor();
inline const ::std::string& LocalHttpService_t_Name(LocalHttpService_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LocalHttpService_t_descriptor(), value);
}
inline bool LocalHttpService_t_Parse(
    const ::std::string& name, LocalHttpService_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalHttpService_t>(
    LocalHttpService_t_descriptor(), name, value);
}
enum IoacStatusSummary_t {
  IOAC_STATUS_SUMMARY_INACTIVE = 1,
  IOAC_STATUS_SUMMARY_UPDATING = 4,
  IOAC_STATUS_SUMMARY_GETTING_INFO = 5,
  IOAC_STATUS_SUMMARY_TESTING = 6,
  IOAC_STATUS_SUMMARY_GOOD = 7,
  IOAC_STATUS_SUMMARY_UDP_FILTERED = 8,
  IOAC_STATUS_SUMMARY_FAIL_NO_HARDWARE = 9,
  IOAC_STATUS_SUMMARY_FAIL_RESOLVE_SERVER = 10,
  IOAC_STATUS_SUMMARY_FAIL_INTERNAL = 11
};
bool IoacStatusSummary_t_IsValid(int value);
const IoacStatusSummary_t IoacStatusSummary_t_MIN = IOAC_STATUS_SUMMARY_INACTIVE;
const IoacStatusSummary_t IoacStatusSummary_t_MAX = IOAC_STATUS_SUMMARY_FAIL_INTERNAL;
const int IoacStatusSummary_t_ARRAYSIZE = IoacStatusSummary_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* IoacStatusSummary_t_descriptor();
inline const ::std::string& IoacStatusSummary_t_Name(IoacStatusSummary_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    IoacStatusSummary_t_descriptor(), value);
}
inline bool IoacStatusSummary_t_Parse(
    const ::std::string& name, IoacStatusSummary_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IoacStatusSummary_t>(
    IoacStatusSummary_t_descriptor(), name, value);
}
enum InfraHttpRequestMethod_t {
  INFRA_HTTP_METHOD_GET = 1,
  INFRA_HTTP_METHOD_POST = 2
};
bool InfraHttpRequestMethod_t_IsValid(int value);
const InfraHttpRequestMethod_t InfraHttpRequestMethod_t_MIN = INFRA_HTTP_METHOD_GET;
const InfraHttpRequestMethod_t InfraHttpRequestMethod_t_MAX = INFRA_HTTP_METHOD_POST;
const int InfraHttpRequestMethod_t_ARRAYSIZE = InfraHttpRequestMethod_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* InfraHttpRequestMethod_t_descriptor();
inline const ::std::string& InfraHttpRequestMethod_t_Name(InfraHttpRequestMethod_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    InfraHttpRequestMethod_t_descriptor(), value);
}
inline bool InfraHttpRequestMethod_t_Parse(
    const ::std::string& name, InfraHttpRequestMethod_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InfraHttpRequestMethod_t>(
    InfraHttpRequestMethod_t_descriptor(), name, value);
}
enum LanDeviceType_t {
  LAN_DEVICE_TYPE_CLOUD_NODE = 1
};
bool LanDeviceType_t_IsValid(int value);
const LanDeviceType_t LanDeviceType_t_MIN = LAN_DEVICE_TYPE_CLOUD_NODE;
const LanDeviceType_t LanDeviceType_t_MAX = LAN_DEVICE_TYPE_CLOUD_NODE;
const int LanDeviceType_t_ARRAYSIZE = LanDeviceType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanDeviceType_t_descriptor();
inline const ::std::string& LanDeviceType_t_Name(LanDeviceType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanDeviceType_t_descriptor(), value);
}
inline bool LanDeviceType_t_Parse(
    const ::std::string& name, LanDeviceType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanDeviceType_t>(
    LanDeviceType_t_descriptor(), name, value);
}
enum LanInterfaceType_t {
  LAN_INTERFACE_TYPE_USB3 = 1,
  LAN_INTERFACE_TYPE_ETH = 2,
  LAN_INTERFACE_TYPE_WIFI = 3
};
bool LanInterfaceType_t_IsValid(int value);
const LanInterfaceType_t LanInterfaceType_t_MIN = LAN_INTERFACE_TYPE_USB3;
const LanInterfaceType_t LanInterfaceType_t_MAX = LAN_INTERFACE_TYPE_WIFI;
const int LanInterfaceType_t_ARRAYSIZE = LanInterfaceType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanInterfaceType_t_descriptor();
inline const ::std::string& LanInterfaceType_t_Name(LanInterfaceType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanInterfaceType_t_descriptor(), value);
}
inline bool LanInterfaceType_t_Parse(
    const ::std::string& name, LanInterfaceType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanInterfaceType_t>(
    LanInterfaceType_t_descriptor(), name, value);
}
enum NewDatasetType_t {
  NEW_DATASET_TYPE_CAMERA = 1,
  NEW_DATASET_TYPE_MEDIA = 2,
  NEW_DATASET_TYPE_USER = 3,
  NEW_DATASET_TYPE_CACHE = 4,
  NEW_DATASET_TYPE_FS = 5
};
bool NewDatasetType_t_IsValid(int value);
const NewDatasetType_t NewDatasetType_t_MIN = NEW_DATASET_TYPE_CAMERA;
const NewDatasetType_t NewDatasetType_t_MAX = NEW_DATASET_TYPE_FS;
const int NewDatasetType_t_ARRAYSIZE = NewDatasetType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* NewDatasetType_t_descriptor();
inline const ::std::string& NewDatasetType_t_Name(NewDatasetType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    NewDatasetType_t_descriptor(), value);
}
inline bool NewDatasetType_t_Parse(
    const ::std::string& name, NewDatasetType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NewDatasetType_t>(
    NewDatasetType_t_descriptor(), name, value);
}
enum SyncSubscriptionType_t {
  SUBSCRIPTION_TYPE_NORMAL = 1,
  SUBSCRIPTION_TYPE_CAMERA = 2,
  SUBSCRIPTION_TYPE_PRODUCER = 3,
  SUBSCRIPTION_TYPE_CONSUMER = 4,
  SUBSCRIPTION_TYPE_CLEARFI_SERVER = 5,
  SUBSCRIPTION_TYPE_CLEARFI_CLIENT = 6
};
bool SyncSubscriptionType_t_IsValid(int value);
const SyncSubscriptionType_t SyncSubscriptionType_t_MIN = SUBSCRIPTION_TYPE_NORMAL;
const SyncSubscriptionType_t SyncSubscriptionType_t_MAX = SUBSCRIPTION_TYPE_CLEARFI_CLIENT;
const int SyncSubscriptionType_t_ARRAYSIZE = SyncSubscriptionType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncSubscriptionType_t_descriptor();
inline const ::std::string& SyncSubscriptionType_t_Name(SyncSubscriptionType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncSubscriptionType_t_descriptor(), value);
}
inline bool SyncSubscriptionType_t_Parse(
    const ::std::string& name, SyncSubscriptionType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncSubscriptionType_t>(
    SyncSubscriptionType_t_descriptor(), name, value);
}
enum SyncFeature_t {
  SYNC_FEATURE_PHOTO_METADATA = 1,
  SYNC_FEATURE_PHOTO_THUMBNAILS = 2,
  SYNC_FEATURE_MUSIC_METADATA = 3,
  SYNC_FEATURE_MUSIC_THUMBNAILS = 4,
  SYNC_FEATURE_VIDEO_METADATA = 5,
  SYNC_FEATURE_VIDEO_THUMBNAILS = 6,
  SYNC_FEATURE_PLAYLISTS = 7,
  SYNC_FEATURE_NOTES = 20,
  SYNC_FEATURE_SYNCBOX = 30,
  SYNC_FEATURE_PICSTREAM_UPLOAD = 40,
  SYNC_FEATURE_PICSTREAM_DOWNLOAD_FULL_RES = 50,
  SYNC_FEATURE_PICSTREAM_DOWNLOAD_LOW_RES = 60,
  SYNC_FEATURE_PICSTREAM_DOWNLOAD_THUMBNAIL = 70,
  SYNC_FEATURE_PICSTREAM_DELETION = 80,
  SYNC_FEATURE_SHARED_FILES_PHOTOS_SHARED_BY_ME = 81,
  SYNC_FEATURE_SHARED_FILES_PHOTOS_SHARED_WITH_ME = 82,
  SYNC_FEATURE_MEDIA_METADATA_UPLOAD = 100,
  SYNC_FEATURE_METADATA_PHOTO_INDEX_UPLOAD = 101,
  SYNC_FEATURE_METADATA_PHOTO_THUMB_UPLOAD = 102,
  SYNC_FEATURE_METADATA_MUSIC_INDEX_UPLOAD = 103,
  SYNC_FEATURE_METADATA_MUSIC_THUMB_UPLOAD = 104,
  SYNC_FEATURE_METADATA_VIDEO_INDEX_UPLOAD = 105,
  SYNC_FEATURE_METADATA_VIDEO_THUMB_UPLOAD = 106
};
bool SyncFeature_t_IsValid(int value);
const SyncFeature_t SyncFeature_t_MIN = SYNC_FEATURE_PHOTO_METADATA;
const SyncFeature_t SyncFeature_t_MAX = SYNC_FEATURE_METADATA_VIDEO_THUMB_UPLOAD;
const int SyncFeature_t_ARRAYSIZE = SyncFeature_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncFeature_t_descriptor();
inline const ::std::string& SyncFeature_t_Name(SyncFeature_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncFeature_t_descriptor(), value);
}
inline bool SyncFeature_t_Parse(
    const ::std::string& name, SyncFeature_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncFeature_t>(
    SyncFeature_t_descriptor(), name, value);
}
enum DatasetSyncStateType_t {
  CCD_SYNC_STATE_IN_SYNC = 1,
  CCD_SYNC_STATE_SYNCING = 2,
  CCD_SYNC_STATE_OUT_OF_SYNC = 3
};
bool DatasetSyncStateType_t_IsValid(int value);
const DatasetSyncStateType_t DatasetSyncStateType_t_MIN = CCD_SYNC_STATE_IN_SYNC;
const DatasetSyncStateType_t DatasetSyncStateType_t_MAX = CCD_SYNC_STATE_OUT_OF_SYNC;
const int DatasetSyncStateType_t_ARRAYSIZE = DatasetSyncStateType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatasetSyncStateType_t_descriptor();
inline const ::std::string& DatasetSyncStateType_t_Name(DatasetSyncStateType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatasetSyncStateType_t_descriptor(), value);
}
inline bool DatasetSyncStateType_t_Parse(
    const ::std::string& name, DatasetSyncStateType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatasetSyncStateType_t>(
    DatasetSyncStateType_t_descriptor(), name, value);
}
enum CcdApp_t {
  CCD_APP_DEFAULT = 0,
  CCD_APP_PHOTO = 1,
  CCD_APP_MUSIC = 2,
  CCD_APP_VIDEO = 3,
  CCD_APP_MUSIC_AND_VIDEO = 4,
  CCD_APP_ALL_MEDIA = 5
};
bool CcdApp_t_IsValid(int value);
const CcdApp_t CcdApp_t_MIN = CCD_APP_DEFAULT;
const CcdApp_t CcdApp_t_MAX = CCD_APP_ALL_MEDIA;
const int CcdApp_t_ARRAYSIZE = CcdApp_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* CcdApp_t_descriptor();
inline const ::std::string& CcdApp_t_Name(CcdApp_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    CcdApp_t_descriptor(), value);
}
inline bool CcdApp_t_Parse(
    const ::std::string& name, CcdApp_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CcdApp_t>(
    CcdApp_t_descriptor(), name, value);
}
enum DeviceInfoChangeType_t {
  DEVICE_INFO_CHANGE_TYPE_LINK = 1,
  DEVICE_INFO_CHANGE_TYPE_UNLINK = 2,
  DEVICE_INFO_CHANGE_TYPE_UPDATE = 3
};
bool DeviceInfoChangeType_t_IsValid(int value);
const DeviceInfoChangeType_t DeviceInfoChangeType_t_MIN = DEVICE_INFO_CHANGE_TYPE_LINK;
const DeviceInfoChangeType_t DeviceInfoChangeType_t_MAX = DEVICE_INFO_CHANGE_TYPE_UPDATE;
const int DeviceInfoChangeType_t_ARRAYSIZE = DeviceInfoChangeType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceInfoChangeType_t_descriptor();
inline const ::std::string& DeviceInfoChangeType_t_Name(DeviceInfoChangeType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceInfoChangeType_t_descriptor(), value);
}
inline bool DeviceInfoChangeType_t_Parse(
    const ::std::string& name, DeviceInfoChangeType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceInfoChangeType_t>(
    DeviceInfoChangeType_t_descriptor(), name, value);
}
enum StorageNodeChangeType_t {
  STORAGE_NODE_CHANGE_TYPE_CREATED = 1,
  STORAGE_NODE_CHANGE_TYPE_DELETED = 2,
  STORAGE_NODE_CHANGE_TYPE_UPDATED = 3
};
bool StorageNodeChangeType_t_IsValid(int value);
const StorageNodeChangeType_t StorageNodeChangeType_t_MIN = STORAGE_NODE_CHANGE_TYPE_CREATED;
const StorageNodeChangeType_t StorageNodeChangeType_t_MAX = STORAGE_NODE_CHANGE_TYPE_UPDATED;
const int StorageNodeChangeType_t_ARRAYSIZE = StorageNodeChangeType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* StorageNodeChangeType_t_descriptor();
inline const ::std::string& StorageNodeChangeType_t_Name(StorageNodeChangeType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    StorageNodeChangeType_t_descriptor(), value);
}
inline bool StorageNodeChangeType_t_Parse(
    const ::std::string& name, StorageNodeChangeType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StorageNodeChangeType_t>(
    StorageNodeChangeType_t_descriptor(), name, value);
}
enum LogoutReason_t {
  LOGOUT_REASON_UNSPECIFIED = 1,
  LOGOUT_REASON_CCDI_LOGOUT = 2,
  LOGOUT_REASON_DEVICE_UNLINKED = 3,
  LOGOUT_REASON_SESSION_INVALID = 4,
  LOGOUT_REASON_CLEAR_CACHE = 5,
  LOGOUT_REASON_CCDI_LOGIN = 6,
  LOGOUT_REASON_SHARED_CREDENTIALS_REMOVED = 7
};
bool LogoutReason_t_IsValid(int value);
const LogoutReason_t LogoutReason_t_MIN = LOGOUT_REASON_UNSPECIFIED;
const LogoutReason_t LogoutReason_t_MAX = LOGOUT_REASON_SHARED_CREDENTIALS_REMOVED;
const int LogoutReason_t_ARRAYSIZE = LogoutReason_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogoutReason_t_descriptor();
inline const ::std::string& LogoutReason_t_Name(LogoutReason_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogoutReason_t_descriptor(), value);
}
inline bool LogoutReason_t_Parse(
    const ::std::string& name, LogoutReason_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogoutReason_t>(
    LogoutReason_t_descriptor(), name, value);
}
enum PowerMode_t {
  POWER_NO_SYNC = 1,
  POWER_FOREGROUND = 2,
  POWER_BACKGROUND = 3
};
bool PowerMode_t_IsValid(int value);
const PowerMode_t PowerMode_t_MIN = POWER_NO_SYNC;
const PowerMode_t PowerMode_t_MAX = POWER_BACKGROUND;
const int PowerMode_t_ARRAYSIZE = PowerMode_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* PowerMode_t_descriptor();
inline const ::std::string& PowerMode_t_Name(PowerMode_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    PowerMode_t_descriptor(), value);
}
inline bool PowerMode_t_Parse(
    const ::std::string& name, PowerMode_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PowerMode_t>(
    PowerMode_t_descriptor(), name, value);
}
enum AsyncUploadState_t {
  ASYNC_UPLOAD_STATE_WAIT = 1,
  ASYNC_UPLOAD_STATE_ACTIVE = 2,
  ASYNC_UPLOAD_STATE_DONE = 3,
  ASYNC_UPLOAD_STATE_ERROR = 4
};
bool AsyncUploadState_t_IsValid(int value);
const AsyncUploadState_t AsyncUploadState_t_MIN = ASYNC_UPLOAD_STATE_WAIT;
const AsyncUploadState_t AsyncUploadState_t_MAX = ASYNC_UPLOAD_STATE_ERROR;
const int AsyncUploadState_t_ARRAYSIZE = AsyncUploadState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* AsyncUploadState_t_descriptor();
inline const ::std::string& AsyncUploadState_t_Name(AsyncUploadState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    AsyncUploadState_t_descriptor(), value);
}
inline bool AsyncUploadState_t_Parse(
    const ::std::string& name, AsyncUploadState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AsyncUploadState_t>(
    AsyncUploadState_t_descriptor(), name, value);
}
enum DeviceCredChangeType_t {
  DEVICE_CRED_CHANGE_TYPE_WRITE = 1,
  DEVICE_CRED_CHANGE_TYPE_DELETE = 2
};
bool DeviceCredChangeType_t_IsValid(int value);
const DeviceCredChangeType_t DeviceCredChangeType_t_MIN = DEVICE_CRED_CHANGE_TYPE_WRITE;
const DeviceCredChangeType_t DeviceCredChangeType_t_MAX = DEVICE_CRED_CHANGE_TYPE_DELETE;
const int DeviceCredChangeType_t_ARRAYSIZE = DeviceCredChangeType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceCredChangeType_t_descriptor();
inline const ::std::string& DeviceCredChangeType_t_Name(DeviceCredChangeType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceCredChangeType_t_descriptor(), value);
}
inline bool DeviceCredChangeType_t_Parse(
    const ::std::string& name, DeviceCredChangeType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceCredChangeType_t>(
    DeviceCredChangeType_t_descriptor(), name, value);
}
enum DeviceConnectionState_t {
  DEVICE_CONNECTION_OFFLINE = 1,
  DEVICE_CONNECTION_ONLINE = 2,
  DEVICE_CONNECTION_STANDBY = 3
};
bool DeviceConnectionState_t_IsValid(int value);
const DeviceConnectionState_t DeviceConnectionState_t_MIN = DEVICE_CONNECTION_OFFLINE;
const DeviceConnectionState_t DeviceConnectionState_t_MAX = DEVICE_CONNECTION_STANDBY;
const int DeviceConnectionState_t_ARRAYSIZE = DeviceConnectionState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceConnectionState_t_descriptor();
inline const ::std::string& DeviceConnectionState_t_Name(DeviceConnectionState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceConnectionState_t_descriptor(), value);
}
inline bool DeviceConnectionState_t_Parse(
    const ::std::string& name, DeviceConnectionState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceConnectionState_t>(
    DeviceConnectionState_t_descriptor(), name, value);
}
enum SyncEventType_t {
  CCD_SYNC_EVENT_NEW_FILE_DOWNLOADED = 1,
  CCD_SYNC_EVENT_MODIFIED_FILE_DOWNLOADED = 2,
  CCD_SYNC_EVENT_FILE_DELETE_DOWNLOADED = 3,
  CCD_SYNC_EVENT_FOLDER_CREATE_DOWNLOADED = 4,
  CCD_SYNC_EVENT_FOLDER_DELETE_DOWNLOADED = 5,
  CCD_SYNC_EVENT_NEW_FILE_UPLOADED = 8,
  CCD_SYNC_EVENT_MODIFIED_FILE_UPLOADED = 9,
  CCD_SYNC_EVENT_FILE_DELETE_UPLOADED = 10,
  CCD_SYNC_EVENT_FOLDER_CREATE_UPLOADED = 11,
  CCD_SYNC_EVENT_FOLDER_DELETE_UPLOADED = 12,
  CCD_SYNC_EVENT_CONFLICT_FILE_CREATED = 15
};
bool SyncEventType_t_IsValid(int value);
const SyncEventType_t SyncEventType_t_MIN = CCD_SYNC_EVENT_NEW_FILE_DOWNLOADED;
const SyncEventType_t SyncEventType_t_MAX = CCD_SYNC_EVENT_CONFLICT_FILE_CREATED;
const int SyncEventType_t_ARRAYSIZE = SyncEventType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncEventType_t_descriptor();
inline const ::std::string& SyncEventType_t_Name(SyncEventType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncEventType_t_descriptor(), value);
}
inline bool SyncEventType_t_Parse(
    const ::std::string& name, SyncEventType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncEventType_t>(
    SyncEventType_t_descriptor(), name, value);
}
enum SyncStateType_t {
  SYNC_STATE_NOT_IN_SYNC_FOLDER = 1,
  SYNC_STATE_UP_TO_DATE = 2,
  SYNC_STATE_NEED_TO_DOWNLOAD = 4,
  SYNC_STATE_NEED_TO_UPLOAD = 6,
  SYNC_STATE_NEED_TO_UPLOAD_AND_DOWNLOAD = 7,
  SYNC_STATE_FILTERED = 8,
  SYNC_STATE_UNKNOWN = 9
};
bool SyncStateType_t_IsValid(int value);
const SyncStateType_t SyncStateType_t_MIN = SYNC_STATE_NOT_IN_SYNC_FOLDER;
const SyncStateType_t SyncStateType_t_MAX = SYNC_STATE_UNKNOWN;
const int SyncStateType_t_ARRAYSIZE = SyncStateType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncStateType_t_descriptor();
inline const ::std::string& SyncStateType_t_Name(SyncStateType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncStateType_t_descriptor(), value);
}
inline bool SyncStateType_t_Parse(
    const ::std::string& name, SyncStateType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncStateType_t>(
    SyncStateType_t_descriptor(), name, value);
}
enum FeatureSyncStateType_t {
  CCD_FEATURE_STATE_IN_SYNC = 1,
  CCD_FEATURE_STATE_SYNCING = 2,
  CCD_FEATURE_STATE_OUT_OF_SYNC = 3
};
bool FeatureSyncStateType_t_IsValid(int value);
const FeatureSyncStateType_t FeatureSyncStateType_t_MIN = CCD_FEATURE_STATE_IN_SYNC;
const FeatureSyncStateType_t FeatureSyncStateType_t_MAX = CCD_FEATURE_STATE_OUT_OF_SYNC;
const int FeatureSyncStateType_t_ARRAYSIZE = FeatureSyncStateType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* FeatureSyncStateType_t_descriptor();
inline const ::std::string& FeatureSyncStateType_t_Name(FeatureSyncStateType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    FeatureSyncStateType_t_descriptor(), value);
}
inline bool FeatureSyncStateType_t_Parse(
    const ::std::string& name, FeatureSyncStateType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeatureSyncStateType_t>(
    FeatureSyncStateType_t_descriptor(), name, value);
}
enum SyncEventErrorType_t {
  SYNC_EVENT_ERROR_INFRA_CONNECTION_LOST = 1,
  SYNC_EVENT_ERROR_STORAGE_CONNECTION_LOST = 2,
  SYNC_EVENT_ERROR_CANNOT_ACCESS_FOLDER = 3,
  SYNC_EVENT_ERROR_OUT_OF_SPACE = 4,
  SYNC_EVENT_ERROR_QUOTA_EXCEEDED = 5
};
bool SyncEventErrorType_t_IsValid(int value);
const SyncEventErrorType_t SyncEventErrorType_t_MIN = SYNC_EVENT_ERROR_INFRA_CONNECTION_LOST;
const SyncEventErrorType_t SyncEventErrorType_t_MAX = SYNC_EVENT_ERROR_QUOTA_EXCEEDED;
const int SyncEventErrorType_t_ARRAYSIZE = SyncEventErrorType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncEventErrorType_t_descriptor();
inline const ::std::string& SyncEventErrorType_t_Name(SyncEventErrorType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncEventErrorType_t_descriptor(), value);
}
inline bool SyncEventErrorType_t_Parse(
    const ::std::string& name, SyncEventErrorType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncEventErrorType_t>(
    SyncEventErrorType_t_descriptor(), name, value);
}
enum SyncFileChangeType_t {
  SYNC_FILE_CHANGE_LOCAL_ADD = 1,
  SYNC_FILE_CHANGE_LOCAL_REMOVE = 2,
  SYNC_FILE_CHANGE_LOCAL_MODIFY = 3,
  SYNC_FILE_CHANGE_REMOTE_ADD = 6,
  SYNC_FILE_CHANGE_REMOTE_REMOVE = 7,
  SYNC_FILE_CHANGE_REMOTE_MODIFY = 8
};
bool SyncFileChangeType_t_IsValid(int value);
const SyncFileChangeType_t SyncFileChangeType_t_MIN = SYNC_FILE_CHANGE_LOCAL_ADD;
const SyncFileChangeType_t SyncFileChangeType_t_MAX = SYNC_FILE_CHANGE_REMOTE_MODIFY;
const int SyncFileChangeType_t_ARRAYSIZE = SyncFileChangeType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncFileChangeType_t_descriptor();
inline const ::std::string& SyncFileChangeType_t_Name(SyncFileChangeType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncFileChangeType_t_descriptor(), value);
}
inline bool SyncFileChangeType_t_Parse(
    const ::std::string& name, SyncFileChangeType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncFileChangeType_t>(
    SyncFileChangeType_t_descriptor(), name, value);
}
enum SWUpdateMaskBits_t {
  SW_UPDATE_BIT_APP_OPTIONAL = 1,
  SW_UPDATE_BIT_APP_CRITICAL = 2,
  SW_UPDATE_BIT_CCD_NEEDED = 4,
  SW_UPDATE_BIT_CCD_CRITICAL = 8
};
bool SWUpdateMaskBits_t_IsValid(int value);
const SWUpdateMaskBits_t SWUpdateMaskBits_t_MIN = SW_UPDATE_BIT_APP_OPTIONAL;
const SWUpdateMaskBits_t SWUpdateMaskBits_t_MAX = SW_UPDATE_BIT_CCD_CRITICAL;
const int SWUpdateMaskBits_t_ARRAYSIZE = SWUpdateMaskBits_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SWUpdateMaskBits_t_descriptor();
inline const ::std::string& SWUpdateMaskBits_t_Name(SWUpdateMaskBits_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SWUpdateMaskBits_t_descriptor(), value);
}
inline bool SWUpdateMaskBits_t_Parse(
    const ::std::string& name, SWUpdateMaskBits_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SWUpdateMaskBits_t>(
    SWUpdateMaskBits_t_descriptor(), name, value);
}
enum SWUpdateDownloadState_t {
  SWU_DLSTATE_IN_PROGRESS = 1,
  SWU_DLSTATE_FAILED = 2,
  SWU_DLSTATE_STOPPED = 3,
  SWU_DLSTATE_DONE = 4,
  SWU_DLSTATE_CANCELED = 5
};
bool SWUpdateDownloadState_t_IsValid(int value);
const SWUpdateDownloadState_t SWUpdateDownloadState_t_MIN = SWU_DLSTATE_IN_PROGRESS;
const SWUpdateDownloadState_t SWUpdateDownloadState_t_MAX = SWU_DLSTATE_CANCELED;
const int SWUpdateDownloadState_t_ARRAYSIZE = SWUpdateDownloadState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* SWUpdateDownloadState_t_descriptor();
inline const ::std::string& SWUpdateDownloadState_t_Name(SWUpdateDownloadState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    SWUpdateDownloadState_t_descriptor(), value);
}
inline bool SWUpdateDownloadState_t_Parse(
    const ::std::string& name, SWUpdateDownloadState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SWUpdateDownloadState_t>(
    SWUpdateDownloadState_t_descriptor(), name, value);
}
enum DocSaveAndGoChangeType {
  DOC_SAVE_AND_GO_UPDATE = 1,
  DOC_SAVE_AND_GO_MOVE = 2,
  DOC_SAVE_AND_GO_DELETE = 3
};
bool DocSaveAndGoChangeType_IsValid(int value);
const DocSaveAndGoChangeType DocSaveAndGoChangeType_MIN = DOC_SAVE_AND_GO_UPDATE;
const DocSaveAndGoChangeType DocSaveAndGoChangeType_MAX = DOC_SAVE_AND_GO_DELETE;
const int DocSaveAndGoChangeType_ARRAYSIZE = DocSaveAndGoChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DocSaveAndGoChangeType_descriptor();
inline const ::std::string& DocSaveAndGoChangeType_Name(DocSaveAndGoChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DocSaveAndGoChangeType_descriptor(), value);
}
inline bool DocSaveAndGoChangeType_Parse(
    const ::std::string& name, DocSaveAndGoChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DocSaveAndGoChangeType>(
    DocSaveAndGoChangeType_descriptor(), name, value);
}
enum PicStream_DBFilterType_t {
  PICSTREAM_QUERY_ITEM = 1,
  PICSTREAM_QUERY_ALBUM = 2
};
bool PicStream_DBFilterType_t_IsValid(int value);
const PicStream_DBFilterType_t PicStream_DBFilterType_t_MIN = PICSTREAM_QUERY_ITEM;
const PicStream_DBFilterType_t PicStream_DBFilterType_t_MAX = PICSTREAM_QUERY_ALBUM;
const int PicStream_DBFilterType_t_ARRAYSIZE = PicStream_DBFilterType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* PicStream_DBFilterType_t_descriptor();
inline const ::std::string& PicStream_DBFilterType_t_Name(PicStream_DBFilterType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    PicStream_DBFilterType_t_descriptor(), value);
}
inline bool PicStream_DBFilterType_t_Parse(
    const ::std::string& name, PicStream_DBFilterType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PicStream_DBFilterType_t>(
    PicStream_DBFilterType_t_descriptor(), name, value);
}
// ===================================================================

class NoParamRequest : public ::google::protobuf::Message {
 public:
  NoParamRequest();
  virtual ~NoParamRequest();
  
  NoParamRequest(const NoParamRequest& from);
  
  inline NoParamRequest& operator=(const NoParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoParamRequest& default_instance();
  
  void Swap(NoParamRequest* other);
  
  // implements Message ----------------------------------------------
  
  NoParamRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoParamRequest& from);
  void MergeFrom(const NoParamRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ccd.NoParamRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static NoParamRequest* default_instance_;
};
// -------------------------------------------------------------------

class PlayerIndexRequest : public ::google::protobuf::Message {
 public:
  PlayerIndexRequest();
  virtual ~PlayerIndexRequest();
  
  PlayerIndexRequest(const PlayerIndexRequest& from);
  
  inline PlayerIndexRequest& operator=(const PlayerIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerIndexRequest& default_instance();
  
  void Swap(PlayerIndexRequest* other);
  
  // implements Message ----------------------------------------------
  
  PlayerIndexRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerIndexRequest& from);
  void MergeFrom(const PlayerIndexRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 player_index = 1;
  inline bool has_player_index() const;
  inline void clear_player_index();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 player_index() const;
  inline void set_player_index(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.PlayerIndexRequest)
 private:
  inline void set_has_player_index();
  inline void clear_has_player_index();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PlayerIndexRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserIdRequest : public ::google::protobuf::Message {
 public:
  UserIdRequest();
  virtual ~UserIdRequest();
  
  UserIdRequest(const UserIdRequest& from);
  
  inline UserIdRequest& operator=(const UserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserIdRequest& default_instance();
  
  void Swap(UserIdRequest* other);
  
  // implements Message ----------------------------------------------
  
  UserIdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserIdRequest& from);
  void MergeFrom(const UserIdRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UserIdRequest)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UserIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class NoParamResponse : public ::google::protobuf::Message {
 public:
  NoParamResponse();
  virtual ~NoParamResponse();
  
  NoParamResponse(const NoParamResponse& from);
  
  inline NoParamResponse& operator=(const NoParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoParamResponse& default_instance();
  
  void Swap(NoParamResponse* other);
  
  // implements Message ----------------------------------------------
  
  NoParamResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoParamResponse& from);
  void MergeFrom(const NoParamResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ccd.NoParamResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static NoParamResponse* default_instance_;
};
// -------------------------------------------------------------------

class CurrentPlayer : public ::google::protobuf::Message {
 public:
  CurrentPlayer();
  virtual ~CurrentPlayer();
  
  CurrentPlayer(const CurrentPlayer& from);
  
  inline CurrentPlayer& operator=(const CurrentPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentPlayer& default_instance();
  
  void Swap(CurrentPlayer* other);
  
  // implements Message ----------------------------------------------
  
  CurrentPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentPlayer& from);
  void MergeFrom(const CurrentPlayer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional string account_id = 4;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 4;
  inline const ::std::string& account_id() const;
  inline void set_account_id(const ::std::string& value);
  inline void set_account_id(const char* value);
  inline void set_account_id(const char* value, size_t size);
  inline ::std::string* mutable_account_id();
  inline ::std::string* release_account_id();
  
  // optional bool has_elevated_privileges = 5 [default = false];
  inline bool has_has_elevated_privileges() const;
  inline void clear_has_elevated_privileges();
  static const int kHasElevatedPrivilegesFieldNumber = 5;
  inline bool has_elevated_privileges() const;
  inline void set_has_elevated_privileges(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.CurrentPlayer)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_has_elevated_privileges();
  inline void clear_has_has_elevated_privileges();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* username_;
  ::std::string* account_id_;
  bool has_elevated_privileges_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CurrentPlayer* default_instance_;
};
// -------------------------------------------------------------------

class CurrentPlayers : public ::google::protobuf::Message {
 public:
  CurrentPlayers();
  virtual ~CurrentPlayers();
  
  CurrentPlayers(const CurrentPlayers& from);
  
  inline CurrentPlayers& operator=(const CurrentPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentPlayers& default_instance();
  
  void Swap(CurrentPlayers* other);
  
  // implements Message ----------------------------------------------
  
  CurrentPlayers* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentPlayers& from);
  void MergeFrom(const CurrentPlayers& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.CurrentPlayer players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::ccd::CurrentPlayer& players(int index) const;
  inline ::ccd::CurrentPlayer* mutable_players(int index);
  inline ::ccd::CurrentPlayer* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::CurrentPlayer >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::CurrentPlayer >*
      mutable_players();
  
  // @@protoc_insertion_point(class_scope:ccd.CurrentPlayers)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::CurrentPlayer > players_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CurrentPlayers* default_instance_;
};
// -------------------------------------------------------------------

class DiskInfo : public ::google::protobuf::Message {
 public:
  DiskInfo();
  virtual ~DiskInfo();
  
  DiskInfo(const DiskInfo& from);
  
  inline DiskInfo& operator=(const DiskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskInfo& default_instance();
  
  void Swap(DiskInfo* other);
  
  // implements Message ----------------------------------------------
  
  DiskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskInfo& from);
  void MergeFrom(const DiskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 total_size_bytes = 1;
  inline bool has_total_size_bytes() const;
  inline void clear_total_size_bytes();
  static const int kTotalSizeBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 total_size_bytes() const;
  inline void set_total_size_bytes(::google::protobuf::uint64 value);
  
  // required uint64 free_space_bytes = 2;
  inline bool has_free_space_bytes() const;
  inline void clear_free_space_bytes();
  static const int kFreeSpaceBytesFieldNumber = 2;
  inline ::google::protobuf::uint64 free_space_bytes() const;
  inline void set_free_space_bytes(::google::protobuf::uint64 value);
  
  // optional uint64 available_inodes = 3;
  inline bool has_available_inodes() const;
  inline void clear_available_inodes();
  static const int kAvailableInodesFieldNumber = 3;
  inline ::google::protobuf::uint64 available_inodes() const;
  inline void set_available_inodes(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.DiskInfo)
 private:
  inline void set_has_total_size_bytes();
  inline void clear_has_total_size_bytes();
  inline void set_has_free_space_bytes();
  inline void clear_has_free_space_bytes();
  inline void set_has_available_inodes();
  inline void clear_has_available_inodes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 total_size_bytes_;
  ::google::protobuf::uint64 free_space_bytes_;
  ::google::protobuf::uint64 available_inodes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DiskInfo* default_instance_;
};
// -------------------------------------------------------------------

class NetworkInfo : public ::google::protobuf::Message {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();
  
  NetworkInfo(const NetworkInfo& from);
  
  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkInfo& default_instance();
  
  void Swap(NetworkInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetworkInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 proxy_agent_port = 1;
  inline bool has_proxy_agent_port() const;
  inline void clear_proxy_agent_port();
  static const int kProxyAgentPortFieldNumber = 1;
  inline ::google::protobuf::uint32 proxy_agent_port() const;
  inline void set_proxy_agent_port(::google::protobuf::uint32 value);
  
  // optional uint32 media_server_port = 2;
  inline bool has_media_server_port() const;
  inline void clear_media_server_port();
  static const int kMediaServerPortFieldNumber = 2;
  inline ::google::protobuf::uint32 media_server_port() const;
  inline void set_media_server_port(::google::protobuf::uint32 value);
  
  // optional uint32 virtual_drive_port = 3;
  inline bool has_virtual_drive_port() const;
  inline void clear_virtual_drive_port();
  static const int kVirtualDrivePortFieldNumber = 3;
  inline ::google::protobuf::uint32 virtual_drive_port() const;
  inline void set_virtual_drive_port(::google::protobuf::uint32 value);
  
  // optional uint32 tunnel_service_port = 4;
  inline bool has_tunnel_service_port() const;
  inline void clear_tunnel_service_port();
  static const int kTunnelServicePortFieldNumber = 4;
  inline ::google::protobuf::uint32 tunnel_service_port() const;
  inline void set_tunnel_service_port(::google::protobuf::uint32 value);
  
  // optional uint32 ext_tunnel_service_port = 5;
  inline bool has_ext_tunnel_service_port() const;
  inline void clear_ext_tunnel_service_port();
  static const int kExtTunnelServicePortFieldNumber = 5;
  inline ::google::protobuf::uint32 ext_tunnel_service_port() const;
  inline void set_ext_tunnel_service_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.NetworkInfo)
 private:
  inline void set_has_proxy_agent_port();
  inline void clear_has_proxy_agent_port();
  inline void set_has_media_server_port();
  inline void clear_has_media_server_port();
  inline void set_has_virtual_drive_port();
  inline void clear_has_virtual_drive_port();
  inline void set_has_tunnel_service_port();
  inline void clear_has_tunnel_service_port();
  inline void set_has_ext_tunnel_service_port();
  inline void clear_has_ext_tunnel_service_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 proxy_agent_port_;
  ::google::protobuf::uint32 media_server_port_;
  ::google::protobuf::uint32 virtual_drive_port_;
  ::google::protobuf::uint32 tunnel_service_port_;
  ::google::protobuf::uint32 ext_tunnel_service_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static NetworkInfo* default_instance_;
};
// -------------------------------------------------------------------

class IoacAdapterWarnings : public ::google::protobuf::Message {
 public:
  IoacAdapterWarnings();
  virtual ~IoacAdapterWarnings();
  
  IoacAdapterWarnings(const IoacAdapterWarnings& from);
  
  inline IoacAdapterWarnings& operator=(const IoacAdapterWarnings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IoacAdapterWarnings& default_instance();
  
  void Swap(IoacAdapterWarnings* other);
  
  // implements Message ----------------------------------------------
  
  IoacAdapterWarnings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IoacAdapterWarnings& from);
  void MergeFrom(const IoacAdapterWarnings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool magic_packet_not_supported = 16;
  inline bool has_magic_packet_not_supported() const;
  inline void clear_magic_packet_not_supported();
  static const int kMagicPacketNotSupportedFieldNumber = 16;
  inline bool magic_packet_not_supported() const;
  inline void set_magic_packet_not_supported(bool value);
  
  // optional bool offload_arp_not_supported = 17;
  inline bool has_offload_arp_not_supported() const;
  inline void clear_offload_arp_not_supported();
  static const int kOffloadArpNotSupportedFieldNumber = 17;
  inline bool offload_arp_not_supported() const;
  inline void set_offload_arp_not_supported(bool value);
  
  // optional bool offload_ns_not_supported = 18;
  inline bool has_offload_ns_not_supported() const;
  inline void clear_offload_ns_not_supported();
  static const int kOffloadNsNotSupportedFieldNumber = 18;
  inline bool offload_ns_not_supported() const;
  inline void set_offload_ns_not_supported(bool value);
  
  // optional bool offload_80211_rsn_rekey_not_supported = 19;
  inline bool has_offload_80211_rsn_rekey_not_supported() const;
  inline void clear_offload_80211_rsn_rekey_not_supported();
  static const int kOffload80211RsnRekeyNotSupportedFieldNumber = 19;
  inline bool offload_80211_rsn_rekey_not_supported() const;
  inline void set_offload_80211_rsn_rekey_not_supported(bool value);
  
  // optional bool offload_arp_failed = 20;
  inline bool has_offload_arp_failed() const;
  inline void clear_offload_arp_failed();
  static const int kOffloadArpFailedFieldNumber = 20;
  inline bool offload_arp_failed() const;
  inline void set_offload_arp_failed(bool value);
  
  // optional bool enable_keepalive_failed = 21;
  inline bool has_enable_keepalive_failed() const;
  inline void clear_enable_keepalive_failed();
  static const int kEnableKeepaliveFailedFieldNumber = 21;
  inline bool enable_keepalive_failed() const;
  inline void set_enable_keepalive_failed(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.IoacAdapterWarnings)
 private:
  inline void set_has_magic_packet_not_supported();
  inline void clear_has_magic_packet_not_supported();
  inline void set_has_offload_arp_not_supported();
  inline void clear_has_offload_arp_not_supported();
  inline void set_has_offload_ns_not_supported();
  inline void clear_has_offload_ns_not_supported();
  inline void set_has_offload_80211_rsn_rekey_not_supported();
  inline void clear_has_offload_80211_rsn_rekey_not_supported();
  inline void set_has_offload_arp_failed();
  inline void clear_has_offload_arp_failed();
  inline void set_has_enable_keepalive_failed();
  inline void clear_has_enable_keepalive_failed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool magic_packet_not_supported_;
  bool offload_arp_not_supported_;
  bool offload_ns_not_supported_;
  bool offload_80211_rsn_rekey_not_supported_;
  bool offload_arp_failed_;
  bool enable_keepalive_failed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static IoacAdapterWarnings* default_instance_;
};
// -------------------------------------------------------------------

class IoacAdapterStatus : public ::google::protobuf::Message {
 public:
  IoacAdapterStatus();
  virtual ~IoacAdapterStatus();
  
  IoacAdapterStatus(const IoacAdapterStatus& from);
  
  inline IoacAdapterStatus& operator=(const IoacAdapterStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IoacAdapterStatus& default_instance();
  
  void Swap(IoacAdapterStatus* other);
  
  // implements Message ----------------------------------------------
  
  IoacAdapterStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IoacAdapterStatus& from);
  void MergeFrom(const IoacAdapterStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string guid = 1;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 1;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  
  // optional .ccd.IoacStatusSummary_t summary = 4;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 4;
  inline ccd::IoacStatusSummary_t summary() const;
  inline void set_summary(ccd::IoacStatusSummary_t value);
  
  // optional .ccd.IoacAdapterWarnings warnings = 5;
  inline bool has_warnings() const;
  inline void clear_warnings();
  static const int kWarningsFieldNumber = 5;
  inline const ::ccd::IoacAdapterWarnings& warnings() const;
  inline ::ccd::IoacAdapterWarnings* mutable_warnings();
  inline ::ccd::IoacAdapterWarnings* release_warnings();
  
  // @@protoc_insertion_point(class_scope:ccd.IoacAdapterStatus)
 private:
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_warnings();
  inline void clear_has_warnings();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* guid_;
  ::ccd::IoacAdapterWarnings* warnings_;
  int summary_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static IoacAdapterStatus* default_instance_;
};
// -------------------------------------------------------------------

class IoacOverallStatus : public ::google::protobuf::Message {
 public:
  IoacOverallStatus();
  virtual ~IoacOverallStatus();
  
  IoacOverallStatus(const IoacOverallStatus& from);
  
  inline IoacOverallStatus& operator=(const IoacOverallStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IoacOverallStatus& default_instance();
  
  void Swap(IoacOverallStatus* other);
  
  // implements Message ----------------------------------------------
  
  IoacOverallStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IoacOverallStatus& from);
  void MergeFrom(const IoacOverallStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.IoacStatusSummary_t summary = 1;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 1;
  inline ccd::IoacStatusSummary_t summary() const;
  inline void set_summary(ccd::IoacStatusSummary_t value);
  
  // repeated .ccd.IoacAdapterStatus adapters = 2;
  inline int adapters_size() const;
  inline void clear_adapters();
  static const int kAdaptersFieldNumber = 2;
  inline const ::ccd::IoacAdapterStatus& adapters(int index) const;
  inline ::ccd::IoacAdapterStatus* mutable_adapters(int index);
  inline ::ccd::IoacAdapterStatus* add_adapters();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::IoacAdapterStatus >&
      adapters() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::IoacAdapterStatus >*
      mutable_adapters();
  
  // optional bool warn_sleep_not_supported = 16;
  inline bool has_warn_sleep_not_supported() const;
  inline void clear_warn_sleep_not_supported();
  static const int kWarnSleepNotSupportedFieldNumber = 16;
  inline bool warn_sleep_not_supported() const;
  inline void set_warn_sleep_not_supported(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.IoacOverallStatus)
 private:
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_warn_sleep_not_supported();
  inline void clear_has_warn_sleep_not_supported();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::IoacAdapterStatus > adapters_;
  int summary_;
  bool warn_sleep_not_supported_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static IoacOverallStatus* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemStateInput : public ::google::protobuf::Message {
 public:
  GetSystemStateInput();
  virtual ~GetSystemStateInput();
  
  GetSystemStateInput(const GetSystemStateInput& from);
  
  inline GetSystemStateInput& operator=(const GetSystemStateInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemStateInput& default_instance();
  
  void Swap(GetSystemStateInput* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemStateInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemStateInput& from);
  void MergeFrom(const GetSystemStateInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool get_device_id = 4 [default = false];
  inline bool has_get_device_id() const;
  inline void clear_get_device_id();
  static const int kGetDeviceIdFieldNumber = 4;
  inline bool get_device_id() const;
  inline void set_get_device_id(bool value);
  
  // optional bool get_players = 2 [default = false];
  inline bool has_get_players() const;
  inline void clear_get_players();
  static const int kGetPlayersFieldNumber = 2;
  inline bool get_players() const;
  inline void set_get_players(bool value);
  
  // optional bool get_users = 10 [default = false];
  inline bool has_get_users() const;
  inline void clear_get_users();
  static const int kGetUsersFieldNumber = 10;
  inline bool get_users() const;
  inline void set_get_users(bool value);
  
  // optional bool get_logged_out_users = 13 [default = false];
  inline bool has_get_logged_out_users() const;
  inline void clear_get_logged_out_users();
  static const int kGetLoggedOutUsersFieldNumber = 13;
  inline bool get_logged_out_users() const;
  inline void set_get_logged_out_users(bool value);
  
  // optional bool get_disk_info = 5 [default = false];
  inline bool has_get_disk_info() const;
  inline void clear_get_disk_info();
  static const int kGetDiskInfoFieldNumber = 5;
  inline bool get_disk_info() const;
  inline void set_get_disk_info(bool value);
  
  // optional bool get_device_locale = 8 [default = false];
  inline bool has_get_device_locale() const;
  inline void clear_get_device_locale();
  static const int kGetDeviceLocaleFieldNumber = 8;
  inline bool get_device_locale() const;
  inline void set_get_device_locale(bool value);
  
  // optional bool get_network_info = 9 [default = false];
  inline bool has_get_network_info() const;
  inline void clear_get_network_info();
  static const int kGetNetworkInfoFieldNumber = 9;
  inline bool get_network_info() const;
  inline void set_get_network_info(bool value);
  
  // optional bool get_ioac_status = 11 [default = false];
  inline bool has_get_ioac_status() const;
  inline void clear_get_ioac_status();
  static const int kGetIoacStatusFieldNumber = 11;
  inline bool get_ioac_status() const;
  inline void set_get_ioac_status(bool value);
  
  // optional bool get_enable_ioac = 14 [default = false];
  inline bool has_get_enable_ioac() const;
  inline void clear_get_enable_ioac();
  static const int kGetEnableIoacFieldNumber = 14;
  inline bool get_enable_ioac() const;
  inline void set_get_enable_ioac(bool value);
  
  // optional bool get_ioac_already_in_use = 15 [default = false];
  inline bool has_get_ioac_already_in_use() const;
  inline void clear_get_ioac_already_in_use();
  static const int kGetIoacAlreadyInUseFieldNumber = 15;
  inline bool get_ioac_already_in_use() const;
  inline void set_get_ioac_already_in_use(bool value);
  
  // optional bool get_background_mode_interval_sec = 12;
  inline bool has_get_background_mode_interval_sec() const;
  inline void clear_get_background_mode_interval_sec();
  static const int kGetBackgroundModeIntervalSecFieldNumber = 12;
  inline bool get_background_mode_interval_sec() const;
  inline void set_get_background_mode_interval_sec(bool value);
  
  // optional bool get_only_mobile_network_available = 21;
  inline bool has_get_only_mobile_network_available() const;
  inline void clear_get_only_mobile_network_available();
  static const int kGetOnlyMobileNetworkAvailableFieldNumber = 21;
  inline bool get_only_mobile_network_available() const;
  inline void set_get_only_mobile_network_available(bool value);
  
  // optional bool get_stream_power_mode = 22;
  inline bool has_get_stream_power_mode() const;
  inline void clear_get_stream_power_mode();
  static const int kGetStreamPowerModeFieldNumber = 22;
  inline bool get_stream_power_mode() const;
  inline void set_get_stream_power_mode(bool value);
  
  // optional bool get_power_mode = 23;
  inline bool has_get_power_mode() const;
  inline void clear_get_power_mode();
  static const int kGetPowerModeFieldNumber = 23;
  inline bool get_power_mode() const;
  inline void set_get_power_mode(bool value);
  
  // optional bool get_pd_instance_id = 24;
  inline bool has_get_pd_instance_id() const;
  inline void clear_get_pd_instance_id();
  static const int kGetPdInstanceIdFieldNumber = 24;
  inline bool get_pd_instance_id() const;
  inline void set_get_pd_instance_id(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.GetSystemStateInput)
 private:
  inline void set_has_get_device_id();
  inline void clear_has_get_device_id();
  inline void set_has_get_players();
  inline void clear_has_get_players();
  inline void set_has_get_users();
  inline void clear_has_get_users();
  inline void set_has_get_logged_out_users();
  inline void clear_has_get_logged_out_users();
  inline void set_has_get_disk_info();
  inline void clear_has_get_disk_info();
  inline void set_has_get_device_locale();
  inline void clear_has_get_device_locale();
  inline void set_has_get_network_info();
  inline void clear_has_get_network_info();
  inline void set_has_get_ioac_status();
  inline void clear_has_get_ioac_status();
  inline void set_has_get_enable_ioac();
  inline void clear_has_get_enable_ioac();
  inline void set_has_get_ioac_already_in_use();
  inline void clear_has_get_ioac_already_in_use();
  inline void set_has_get_background_mode_interval_sec();
  inline void clear_has_get_background_mode_interval_sec();
  inline void set_has_get_only_mobile_network_available();
  inline void clear_has_get_only_mobile_network_available();
  inline void set_has_get_stream_power_mode();
  inline void clear_has_get_stream_power_mode();
  inline void set_has_get_power_mode();
  inline void clear_has_get_power_mode();
  inline void set_has_get_pd_instance_id();
  inline void clear_has_get_pd_instance_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool get_device_id_;
  bool get_players_;
  bool get_users_;
  bool get_logged_out_users_;
  bool get_disk_info_;
  bool get_device_locale_;
  bool get_network_info_;
  bool get_ioac_status_;
  bool get_enable_ioac_;
  bool get_ioac_already_in_use_;
  bool get_background_mode_interval_sec_;
  bool get_only_mobile_network_available_;
  bool get_stream_power_mode_;
  bool get_power_mode_;
  bool get_pd_instance_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemStateInput* default_instance_;
};
// -------------------------------------------------------------------

class PowerStatus : public ::google::protobuf::Message {
 public:
  PowerStatus();
  virtual ~PowerStatus();
  
  PowerStatus(const PowerStatus& from);
  
  inline PowerStatus& operator=(const PowerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PowerStatus& default_instance();
  
  void Swap(PowerStatus* other);
  
  // implements Message ----------------------------------------------
  
  PowerStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PowerStatus& from);
  void MergeFrom(const PowerStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.PowerMode_t power_mode = 1;
  inline bool has_power_mode() const;
  inline void clear_power_mode();
  static const int kPowerModeFieldNumber = 1;
  inline ccd::PowerMode_t power_mode() const;
  inline void set_power_mode(ccd::PowerMode_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.PowerStatus)
 private:
  inline void set_has_power_mode();
  inline void clear_has_power_mode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int power_mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PowerStatus* default_instance_;
};
// -------------------------------------------------------------------

class CurrentUser : public ::google::protobuf::Message {
 public:
  CurrentUser();
  virtual ~CurrentUser();
  
  CurrentUser(const CurrentUser& from);
  
  inline CurrentUser& operator=(const CurrentUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrentUser& default_instance();
  
  void Swap(CurrentUser* other);
  
  // implements Message ----------------------------------------------
  
  CurrentUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrentUser& from);
  void MergeFrom(const CurrentUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // @@protoc_insertion_point(class_scope:ccd.CurrentUser)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_username();
  inline void clear_has_username();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* username_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CurrentUser* default_instance_;
};
// -------------------------------------------------------------------

class LoggedOutUser : public ::google::protobuf::Message {
 public:
  LoggedOutUser();
  virtual ~LoggedOutUser();
  
  LoggedOutUser(const LoggedOutUser& from);
  
  inline LoggedOutUser& operator=(const LoggedOutUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoggedOutUser& default_instance();
  
  void Swap(LoggedOutUser* other);
  
  // implements Message ----------------------------------------------
  
  LoggedOutUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoggedOutUser& from);
  void MergeFrom(const LoggedOutUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required .ccd.LogoutReason_t reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ccd::LogoutReason_t reason() const;
  inline void set_reason(ccd::LogoutReason_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.LoggedOutUser)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* username_;
  int reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LoggedOutUser* default_instance_;
};
// -------------------------------------------------------------------

class GetSystemStateOutput : public ::google::protobuf::Message {
 public:
  GetSystemStateOutput();
  virtual ~GetSystemStateOutput();
  
  GetSystemStateOutput(const GetSystemStateOutput& from);
  
  inline GetSystemStateOutput& operator=(const GetSystemStateOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSystemStateOutput& default_instance();
  
  void Swap(GetSystemStateOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetSystemStateOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSystemStateOutput& from);
  void MergeFrom(const GetSystemStateOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 device_id = 4;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 4;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional .ccd.CurrentPlayers players = 2;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 2;
  inline const ::ccd::CurrentPlayers& players() const;
  inline ::ccd::CurrentPlayers* mutable_players();
  inline ::ccd::CurrentPlayers* release_players();
  
  // repeated .ccd.CurrentUser users = 10;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 10;
  inline const ::ccd::CurrentUser& users(int index) const;
  inline ::ccd::CurrentUser* mutable_users(int index);
  inline ::ccd::CurrentUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::CurrentUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::CurrentUser >*
      mutable_users();
  
  // repeated .ccd.LoggedOutUser logged_out_users = 13;
  inline int logged_out_users_size() const;
  inline void clear_logged_out_users();
  static const int kLoggedOutUsersFieldNumber = 13;
  inline const ::ccd::LoggedOutUser& logged_out_users(int index) const;
  inline ::ccd::LoggedOutUser* mutable_logged_out_users(int index);
  inline ::ccd::LoggedOutUser* add_logged_out_users();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::LoggedOutUser >&
      logged_out_users() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::LoggedOutUser >*
      mutable_logged_out_users();
  
  // optional .ccd.DiskInfo disk_info = 5;
  inline bool has_disk_info() const;
  inline void clear_disk_info();
  static const int kDiskInfoFieldNumber = 5;
  inline const ::ccd::DiskInfo& disk_info() const;
  inline ::ccd::DiskInfo* mutable_disk_info();
  inline ::ccd::DiskInfo* release_disk_info();
  
  // optional string device_locale = 8;
  inline bool has_device_locale() const;
  inline void clear_device_locale();
  static const int kDeviceLocaleFieldNumber = 8;
  inline const ::std::string& device_locale() const;
  inline void set_device_locale(const ::std::string& value);
  inline void set_device_locale(const char* value);
  inline void set_device_locale(const char* value, size_t size);
  inline ::std::string* mutable_device_locale();
  inline ::std::string* release_device_locale();
  
  // optional .ccd.NetworkInfo network_info = 9;
  inline bool has_network_info() const;
  inline void clear_network_info();
  static const int kNetworkInfoFieldNumber = 9;
  inline const ::ccd::NetworkInfo& network_info() const;
  inline ::ccd::NetworkInfo* mutable_network_info();
  inline ::ccd::NetworkInfo* release_network_info();
  
  // optional .ccd.IoacOverallStatus ioac_status = 11;
  inline bool has_ioac_status() const;
  inline void clear_ioac_status();
  static const int kIoacStatusFieldNumber = 11;
  inline const ::ccd::IoacOverallStatus& ioac_status() const;
  inline ::ccd::IoacOverallStatus* mutable_ioac_status();
  inline ::ccd::IoacOverallStatus* release_ioac_status();
  
  // optional sint32 background_mode_interval_sec = 12;
  inline bool has_background_mode_interval_sec() const;
  inline void clear_background_mode_interval_sec();
  static const int kBackgroundModeIntervalSecFieldNumber = 12;
  inline ::google::protobuf::int32 background_mode_interval_sec() const;
  inline void set_background_mode_interval_sec(::google::protobuf::int32 value);
  
  // optional bool only_mobile_network_available = 21;
  inline bool has_only_mobile_network_available() const;
  inline void clear_only_mobile_network_available();
  static const int kOnlyMobileNetworkAvailableFieldNumber = 21;
  inline bool only_mobile_network_available() const;
  inline void set_only_mobile_network_available(bool value);
  
  // optional bool enable_ioac = 14;
  inline bool has_enable_ioac() const;
  inline void clear_enable_ioac();
  static const int kEnableIoacFieldNumber = 14;
  inline bool enable_ioac() const;
  inline void set_enable_ioac(bool value);
  
  // optional bool ioac_already_in_use = 15;
  inline bool has_ioac_already_in_use() const;
  inline void clear_ioac_already_in_use();
  static const int kIoacAlreadyInUseFieldNumber = 15;
  inline bool ioac_already_in_use() const;
  inline void set_ioac_already_in_use(bool value);
  
  // optional bool stream_power_mode = 22;
  inline bool has_stream_power_mode() const;
  inline void clear_stream_power_mode();
  static const int kStreamPowerModeFieldNumber = 22;
  inline bool stream_power_mode() const;
  inline void set_stream_power_mode(bool value);
  
  // optional .ccd.PowerStatus power_mode_status = 23;
  inline bool has_power_mode_status() const;
  inline void clear_power_mode_status();
  static const int kPowerModeStatusFieldNumber = 23;
  inline const ::ccd::PowerStatus& power_mode_status() const;
  inline ::ccd::PowerStatus* mutable_power_mode_status();
  inline ::ccd::PowerStatus* release_power_mode_status();
  
  // optional string pd_instance_id = 24;
  inline bool has_pd_instance_id() const;
  inline void clear_pd_instance_id();
  static const int kPdInstanceIdFieldNumber = 24;
  inline const ::std::string& pd_instance_id() const;
  inline void set_pd_instance_id(const ::std::string& value);
  inline void set_pd_instance_id(const char* value);
  inline void set_pd_instance_id(const char* value, size_t size);
  inline ::std::string* mutable_pd_instance_id();
  inline ::std::string* release_pd_instance_id();
  
  // optional uint32 pd_instance_id_num = 25;
  inline bool has_pd_instance_id_num() const;
  inline void clear_pd_instance_id_num();
  static const int kPdInstanceIdNumFieldNumber = 25;
  inline ::google::protobuf::uint32 pd_instance_id_num() const;
  inline void set_pd_instance_id_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.GetSystemStateOutput)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_players();
  inline void clear_has_players();
  inline void set_has_disk_info();
  inline void clear_has_disk_info();
  inline void set_has_device_locale();
  inline void clear_has_device_locale();
  inline void set_has_network_info();
  inline void clear_has_network_info();
  inline void set_has_ioac_status();
  inline void clear_has_ioac_status();
  inline void set_has_background_mode_interval_sec();
  inline void clear_has_background_mode_interval_sec();
  inline void set_has_only_mobile_network_available();
  inline void clear_has_only_mobile_network_available();
  inline void set_has_enable_ioac();
  inline void clear_has_enable_ioac();
  inline void set_has_ioac_already_in_use();
  inline void clear_has_ioac_already_in_use();
  inline void set_has_stream_power_mode();
  inline void clear_has_stream_power_mode();
  inline void set_has_power_mode_status();
  inline void clear_has_power_mode_status();
  inline void set_has_pd_instance_id();
  inline void clear_has_pd_instance_id();
  inline void set_has_pd_instance_id_num();
  inline void clear_has_pd_instance_id_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::ccd::CurrentPlayers* players_;
  ::google::protobuf::RepeatedPtrField< ::ccd::CurrentUser > users_;
  ::google::protobuf::RepeatedPtrField< ::ccd::LoggedOutUser > logged_out_users_;
  ::ccd::DiskInfo* disk_info_;
  ::std::string* device_locale_;
  ::ccd::NetworkInfo* network_info_;
  ::ccd::IoacOverallStatus* ioac_status_;
  ::google::protobuf::int32 background_mode_interval_sec_;
  bool only_mobile_network_available_;
  bool enable_ioac_;
  bool ioac_already_in_use_;
  bool stream_power_mode_;
  ::ccd::PowerStatus* power_mode_status_;
  ::std::string* pd_instance_id_;
  ::google::protobuf::uint32 pd_instance_id_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetSystemStateOutput* default_instance_;
};
// -------------------------------------------------------------------

class LoginInput : public ::google::protobuf::Message {
 public:
  LoginInput();
  virtual ~LoginInput();
  
  LoginInput(const LoginInput& from);
  
  inline LoginInput& operator=(const LoginInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginInput& default_instance();
  
  void Swap(LoginInput* other);
  
  // implements Message ----------------------------------------------
  
  LoginInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginInput& from);
  void MergeFrom(const LoginInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player_index = 1 [default = 0];
  inline bool has_player_index() const;
  inline void clear_player_index();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 player_index() const;
  inline void set_player_index(::google::protobuf::int32 value);
  
  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string pairing_token = 15;
  inline bool has_pairing_token() const;
  inline void clear_pairing_token();
  static const int kPairingTokenFieldNumber = 15;
  inline const ::std::string& pairing_token() const;
  inline void set_pairing_token(const ::std::string& value);
  inline void set_pairing_token(const char* value);
  inline void set_pairing_token(const char* value, size_t size);
  inline ::std::string* mutable_pairing_token();
  inline ::std::string* release_pairing_token();
  
  // optional bool ac_eula_agreed = 14;
  inline bool has_ac_eula_agreed() const;
  inline void clear_ac_eula_agreed();
  static const int kAcEulaAgreedFieldNumber = 14;
  inline bool ac_eula_agreed() const;
  inline void set_ac_eula_agreed(bool value);
  
  // optional bool skip_if_already_correct = 5 [default = true];
  inline bool has_skip_if_already_correct() const;
  inline void clear_skip_if_already_correct();
  static const int kSkipIfAlreadyCorrectFieldNumber = 5;
  inline bool skip_if_already_correct() const;
  inline void set_skip_if_already_correct(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.LoginInput)
 private:
  inline void set_has_player_index();
  inline void clear_has_player_index();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_pairing_token();
  inline void clear_has_pairing_token();
  inline void set_has_ac_eula_agreed();
  inline void clear_has_ac_eula_agreed();
  inline void set_has_skip_if_already_correct();
  inline void clear_has_skip_if_already_correct();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* user_name_;
  ::std::string* password_;
  ::std::string* pairing_token_;
  ::google::protobuf::int32 player_index_;
  bool ac_eula_agreed_;
  bool skip_if_already_correct_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LoginInput* default_instance_;
};
// -------------------------------------------------------------------

class LoginOutput : public ::google::protobuf::Message {
 public:
  LoginOutput();
  virtual ~LoginOutput();
  
  LoginOutput(const LoginOutput& from);
  
  inline LoginOutput& operator=(const LoginOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginOutput& default_instance();
  
  void Swap(LoginOutput* other);
  
  // implements Message ----------------------------------------------
  
  LoginOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginOutput& from);
  void MergeFrom(const LoginOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.LoginOutput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LoginOutput* default_instance_;
};
// -------------------------------------------------------------------

class LogoutInput : public ::google::protobuf::Message {
 public:
  LogoutInput();
  virtual ~LogoutInput();
  
  LogoutInput(const LogoutInput& from);
  
  inline LogoutInput& operator=(const LogoutInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutInput& default_instance();
  
  void Swap(LogoutInput* other);
  
  // implements Message ----------------------------------------------
  
  LogoutInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutInput& from);
  void MergeFrom(const LogoutInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 player_index = 1;
  inline bool has_player_index() const;
  inline void clear_player_index();
  static const int kPlayerIndexFieldNumber = 1;
  inline ::google::protobuf::int32 player_index() const;
  inline void set_player_index(::google::protobuf::int32 value);
  
  // optional fixed64 local_user_id = 2;
  inline bool has_local_user_id() const;
  inline void clear_local_user_id();
  static const int kLocalUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 local_user_id() const;
  inline void set_local_user_id(::google::protobuf::uint64 value);
  
  // optional bool warn_if_no_user = 9 [default = true];
  inline bool has_warn_if_no_user() const;
  inline void clear_warn_if_no_user();
  static const int kWarnIfNoUserFieldNumber = 9;
  inline bool warn_if_no_user() const;
  inline void set_warn_if_no_user(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.LogoutInput)
 private:
  inline void set_has_player_index();
  inline void clear_has_player_index();
  inline void set_has_local_user_id();
  inline void clear_has_local_user_id();
  inline void set_has_warn_if_no_user();
  inline void clear_has_warn_if_no_user();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 local_user_id_;
  ::google::protobuf::int32 player_index_;
  bool warn_if_no_user_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LogoutInput* default_instance_;
};
// -------------------------------------------------------------------

class InfraHttpRequestInput : public ::google::protobuf::Message {
 public:
  InfraHttpRequestInput();
  virtual ~InfraHttpRequestInput();
  
  InfraHttpRequestInput(const InfraHttpRequestInput& from);
  
  inline InfraHttpRequestInput& operator=(const InfraHttpRequestInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfraHttpRequestInput& default_instance();
  
  void Swap(InfraHttpRequestInput* other);
  
  // implements Message ----------------------------------------------
  
  InfraHttpRequestInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfraHttpRequestInput& from);
  void MergeFrom(const InfraHttpRequestInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required .ccd.InfraHttpService_t service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline ccd::InfraHttpService_t service() const;
  inline void set_service(ccd::InfraHttpService_t value);
  
  // required bool secure = 3 [default = true];
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 3;
  inline bool secure() const;
  inline void set_secure(bool value);
  
  // optional .ccd.InfraHttpRequestMethod_t method = 4 [default = INFRA_HTTP_METHOD_GET];
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 4;
  inline ccd::InfraHttpRequestMethod_t method() const;
  inline void set_method(ccd::InfraHttpRequestMethod_t value);
  
  // required string url_suffix = 5;
  inline bool has_url_suffix() const;
  inline void clear_url_suffix();
  static const int kUrlSuffixFieldNumber = 5;
  inline const ::std::string& url_suffix() const;
  inline void set_url_suffix(const ::std::string& value);
  inline void set_url_suffix(const char* value);
  inline void set_url_suffix(const char* value, size_t size);
  inline ::std::string* mutable_url_suffix();
  inline ::std::string* release_url_suffix();
  
  // optional string post_data = 6;
  inline bool has_post_data() const;
  inline void clear_post_data();
  static const int kPostDataFieldNumber = 6;
  inline const ::std::string& post_data() const;
  inline void set_post_data(const ::std::string& value);
  inline void set_post_data(const char* value);
  inline void set_post_data(const char* value, size_t size);
  inline ::std::string* mutable_post_data();
  inline ::std::string* release_post_data();
  
  // optional bool privileged_operation = 7 [default = false];
  inline bool has_privileged_operation() const;
  inline void clear_privileged_operation();
  static const int kPrivilegedOperationFieldNumber = 7;
  inline bool privileged_operation() const;
  inline void set_privileged_operation(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.InfraHttpRequestInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_secure();
  inline void clear_has_secure();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_url_suffix();
  inline void clear_has_url_suffix();
  inline void set_has_post_data();
  inline void clear_has_post_data();
  inline void set_has_privileged_operation();
  inline void clear_has_privileged_operation();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  int service_;
  int method_;
  ::std::string* url_suffix_;
  ::std::string* post_data_;
  bool secure_;
  bool privileged_operation_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static InfraHttpRequestInput* default_instance_;
};
// -------------------------------------------------------------------

class InfraHttpRequestOutput : public ::google::protobuf::Message {
 public:
  InfraHttpRequestOutput();
  virtual ~InfraHttpRequestOutput();
  
  InfraHttpRequestOutput(const InfraHttpRequestOutput& from);
  
  inline InfraHttpRequestOutput& operator=(const InfraHttpRequestOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfraHttpRequestOutput& default_instance();
  
  void Swap(InfraHttpRequestOutput* other);
  
  // implements Message ----------------------------------------------
  
  InfraHttpRequestOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfraHttpRequestOutput& from);
  void MergeFrom(const InfraHttpRequestOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 response_code = 1;
  inline bool has_response_code() const;
  inline void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  inline ::google::protobuf::int32 response_code() const;
  inline void set_response_code(::google::protobuf::int32 value);
  
  // optional string http_response = 2;
  inline bool has_http_response() const;
  inline void clear_http_response();
  static const int kHttpResponseFieldNumber = 2;
  inline const ::std::string& http_response() const;
  inline void set_http_response(const ::std::string& value);
  inline void set_http_response(const char* value);
  inline void set_http_response(const char* value, size_t size);
  inline ::std::string* mutable_http_response();
  inline ::std::string* release_http_response();
  
  // @@protoc_insertion_point(class_scope:ccd.InfraHttpRequestOutput)
 private:
  inline void set_has_response_code();
  inline void clear_has_response_code();
  inline void set_has_http_response();
  inline void clear_has_http_response();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* http_response_;
  ::google::protobuf::int32 response_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static InfraHttpRequestOutput* default_instance_;
};
// -------------------------------------------------------------------

class RegisterStorageNodeInput : public ::google::protobuf::Message {
 public:
  RegisterStorageNodeInput();
  virtual ~RegisterStorageNodeInput();
  
  RegisterStorageNodeInput(const RegisterStorageNodeInput& from);
  
  inline RegisterStorageNodeInput& operator=(const RegisterStorageNodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterStorageNodeInput& default_instance();
  
  void Swap(RegisterStorageNodeInput* other);
  
  // implements Message ----------------------------------------------
  
  RegisterStorageNodeInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterStorageNodeInput& from);
  void MergeFrom(const RegisterStorageNodeInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.RegisterStorageNodeInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RegisterStorageNodeInput* default_instance_;
};
// -------------------------------------------------------------------

class UnregisterStorageNodeInput : public ::google::protobuf::Message {
 public:
  UnregisterStorageNodeInput();
  virtual ~UnregisterStorageNodeInput();
  
  UnregisterStorageNodeInput(const UnregisterStorageNodeInput& from);
  
  inline UnregisterStorageNodeInput& operator=(const UnregisterStorageNodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnregisterStorageNodeInput& default_instance();
  
  void Swap(UnregisterStorageNodeInput* other);
  
  // implements Message ----------------------------------------------
  
  UnregisterStorageNodeInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnregisterStorageNodeInput& from);
  void MergeFrom(const UnregisterStorageNodeInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional fixed64 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UnregisterStorageNodeInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UnregisterStorageNodeInput* default_instance_;
};
// -------------------------------------------------------------------

class RemoteFileAccessControlDirSpec : public ::google::protobuf::Message {
 public:
  RemoteFileAccessControlDirSpec();
  virtual ~RemoteFileAccessControlDirSpec();
  
  RemoteFileAccessControlDirSpec(const RemoteFileAccessControlDirSpec& from);
  
  inline RemoteFileAccessControlDirSpec& operator=(const RemoteFileAccessControlDirSpec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteFileAccessControlDirSpec& default_instance();
  
  void Swap(RemoteFileAccessControlDirSpec* other);
  
  // implements Message ----------------------------------------------
  
  RemoteFileAccessControlDirSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteFileAccessControlDirSpec& from);
  void MergeFrom(const RemoteFileAccessControlDirSpec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string dir = 1;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 1;
  inline const ::std::string& dir() const;
  inline void set_dir(const ::std::string& value);
  inline void set_dir(const char* value);
  inline void set_dir(const char* value, size_t size);
  inline ::std::string* mutable_dir();
  inline ::std::string* release_dir();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool is_user = 3;
  inline bool has_is_user() const;
  inline void clear_is_user();
  static const int kIsUserFieldNumber = 3;
  inline bool is_user() const;
  inline void set_is_user(bool value);
  
  // required bool is_allowed = 4;
  inline bool has_is_allowed() const;
  inline void clear_is_allowed();
  static const int kIsAllowedFieldNumber = 4;
  inline bool is_allowed() const;
  inline void set_is_allowed(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.RemoteFileAccessControlDirSpec)
 private:
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_is_user();
  inline void clear_has_is_user();
  inline void set_has_is_allowed();
  inline void clear_has_is_allowed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* dir_;
  ::std::string* name_;
  bool is_user_;
  bool is_allowed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RemoteFileAccessControlDirSpec* default_instance_;
};
// -------------------------------------------------------------------

class RemoteFileAccessControlDirs : public ::google::protobuf::Message {
 public:
  RemoteFileAccessControlDirs();
  virtual ~RemoteFileAccessControlDirs();
  
  RemoteFileAccessControlDirs(const RemoteFileAccessControlDirs& from);
  
  inline RemoteFileAccessControlDirs& operator=(const RemoteFileAccessControlDirs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteFileAccessControlDirs& default_instance();
  
  void Swap(RemoteFileAccessControlDirs* other);
  
  // implements Message ----------------------------------------------
  
  RemoteFileAccessControlDirs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteFileAccessControlDirs& from);
  void MergeFrom(const RemoteFileAccessControlDirs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.RemoteFileAccessControlDirSpec dirs = 1;
  inline int dirs_size() const;
  inline void clear_dirs();
  static const int kDirsFieldNumber = 1;
  inline const ::ccd::RemoteFileAccessControlDirSpec& dirs(int index) const;
  inline ::ccd::RemoteFileAccessControlDirSpec* mutable_dirs(int index);
  inline ::ccd::RemoteFileAccessControlDirSpec* add_dirs();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::RemoteFileAccessControlDirSpec >&
      dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::RemoteFileAccessControlDirSpec >*
      mutable_dirs();
  
  // @@protoc_insertion_point(class_scope:ccd.RemoteFileAccessControlDirs)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::RemoteFileAccessControlDirSpec > dirs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RemoteFileAccessControlDirs* default_instance_;
};
// -------------------------------------------------------------------

class UpdateStorageNodeInput : public ::google::protobuf::Message {
 public:
  UpdateStorageNodeInput();
  virtual ~UpdateStorageNodeInput();
  
  UpdateStorageNodeInput(const UpdateStorageNodeInput& from);
  
  inline UpdateStorageNodeInput& operator=(const UpdateStorageNodeInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateStorageNodeInput& default_instance();
  
  void Swap(UpdateStorageNodeInput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateStorageNodeInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateStorageNodeInput& from);
  void MergeFrom(const UpdateStorageNodeInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional fixed64 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional bool feature_media_server_enabled = 3;
  inline bool has_feature_media_server_enabled() const;
  inline void clear_feature_media_server_enabled();
  static const int kFeatureMediaServerEnabledFieldNumber = 3;
  inline bool feature_media_server_enabled() const;
  inline void set_feature_media_server_enabled(bool value);
  
  // optional bool feature_virt_drive_enabled = 4;
  inline bool has_feature_virt_drive_enabled() const;
  inline void clear_feature_virt_drive_enabled();
  static const int kFeatureVirtDriveEnabledFieldNumber = 4;
  inline bool feature_virt_drive_enabled() const;
  inline void set_feature_virt_drive_enabled(bool value);
  
  // optional bool feature_remote_file_access_enabled = 5;
  inline bool has_feature_remote_file_access_enabled() const;
  inline void clear_feature_remote_file_access_enabled();
  static const int kFeatureRemoteFileAccessEnabledFieldNumber = 5;
  inline bool feature_remote_file_access_enabled() const;
  inline void set_feature_remote_file_access_enabled(bool value);
  
  // optional bool feature_my_storage_server_enabled = 8;
  inline bool has_feature_my_storage_server_enabled() const;
  inline void clear_feature_my_storage_server_enabled();
  static const int kFeatureMyStorageServerEnabledFieldNumber = 8;
  inline bool feature_my_storage_server_enabled() const;
  inline void set_feature_my_storage_server_enabled(bool value);
  
  // optional .ccd.RemoteFileAccessControlDirSpec add_remotefile_access_control_dir = 6;
  inline bool has_add_remotefile_access_control_dir() const;
  inline void clear_add_remotefile_access_control_dir();
  static const int kAddRemotefileAccessControlDirFieldNumber = 6;
  inline const ::ccd::RemoteFileAccessControlDirSpec& add_remotefile_access_control_dir() const;
  inline ::ccd::RemoteFileAccessControlDirSpec* mutable_add_remotefile_access_control_dir();
  inline ::ccd::RemoteFileAccessControlDirSpec* release_add_remotefile_access_control_dir();
  
  // optional .ccd.RemoteFileAccessControlDirSpec remove_remotefile_access_control_dir = 7;
  inline bool has_remove_remotefile_access_control_dir() const;
  inline void clear_remove_remotefile_access_control_dir();
  static const int kRemoveRemotefileAccessControlDirFieldNumber = 7;
  inline const ::ccd::RemoteFileAccessControlDirSpec& remove_remotefile_access_control_dir() const;
  inline ::ccd::RemoteFileAccessControlDirSpec* mutable_remove_remotefile_access_control_dir();
  inline ::ccd::RemoteFileAccessControlDirSpec* release_remove_remotefile_access_control_dir();
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateStorageNodeInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_feature_media_server_enabled();
  inline void clear_has_feature_media_server_enabled();
  inline void set_has_feature_virt_drive_enabled();
  inline void clear_has_feature_virt_drive_enabled();
  inline void set_has_feature_remote_file_access_enabled();
  inline void clear_has_feature_remote_file_access_enabled();
  inline void set_has_feature_my_storage_server_enabled();
  inline void clear_has_feature_my_storage_server_enabled();
  inline void set_has_add_remotefile_access_control_dir();
  inline void clear_has_add_remotefile_access_control_dir();
  inline void set_has_remove_remotefile_access_control_dir();
  inline void clear_has_remove_remotefile_access_control_dir();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_id_;
  ::ccd::RemoteFileAccessControlDirSpec* add_remotefile_access_control_dir_;
  ::ccd::RemoteFileAccessControlDirSpec* remove_remotefile_access_control_dir_;
  bool feature_media_server_enabled_;
  bool feature_virt_drive_enabled_;
  bool feature_remote_file_access_enabled_;
  bool feature_my_storage_server_enabled_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateStorageNodeInput* default_instance_;
};
// -------------------------------------------------------------------

class LanDeviceRouteInfo : public ::google::protobuf::Message {
 public:
  LanDeviceRouteInfo();
  virtual ~LanDeviceRouteInfo();
  
  LanDeviceRouteInfo(const LanDeviceRouteInfo& from);
  
  inline LanDeviceRouteInfo& operator=(const LanDeviceRouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LanDeviceRouteInfo& default_instance();
  
  void Swap(LanDeviceRouteInfo* other);
  
  // implements Message ----------------------------------------------
  
  LanDeviceRouteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LanDeviceRouteInfo& from);
  void MergeFrom(const LanDeviceRouteInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.LanInterfaceType_t type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ccd::LanInterfaceType_t type() const;
  inline void set_type(ccd::LanInterfaceType_t value);
  
  // optional string ip_v4_address = 2;
  inline bool has_ip_v4_address() const;
  inline void clear_ip_v4_address();
  static const int kIpV4AddressFieldNumber = 2;
  inline const ::std::string& ip_v4_address() const;
  inline void set_ip_v4_address(const ::std::string& value);
  inline void set_ip_v4_address(const char* value);
  inline void set_ip_v4_address(const char* value, size_t size);
  inline ::std::string* mutable_ip_v4_address();
  inline ::std::string* release_ip_v4_address();
  
  // optional string ip_v6_address = 3;
  inline bool has_ip_v6_address() const;
  inline void clear_ip_v6_address();
  static const int kIpV6AddressFieldNumber = 3;
  inline const ::std::string& ip_v6_address() const;
  inline void set_ip_v6_address(const ::std::string& value);
  inline void set_ip_v6_address(const char* value);
  inline void set_ip_v6_address(const char* value, size_t size);
  inline ::std::string* mutable_ip_v6_address();
  inline ::std::string* release_ip_v6_address();
  
  // optional uint32 media_server_port = 4;
  inline bool has_media_server_port() const;
  inline void clear_media_server_port();
  static const int kMediaServerPortFieldNumber = 4;
  inline ::google::protobuf::uint32 media_server_port() const;
  inline void set_media_server_port(::google::protobuf::uint32 value);
  
  // optional uint32 virtual_drive_port = 5;
  inline bool has_virtual_drive_port() const;
  inline void clear_virtual_drive_port();
  static const int kVirtualDrivePortFieldNumber = 5;
  inline ::google::protobuf::uint32 virtual_drive_port() const;
  inline void set_virtual_drive_port(::google::protobuf::uint32 value);
  
  // optional uint32 web_front_port = 6;
  inline bool has_web_front_port() const;
  inline void clear_web_front_port();
  static const int kWebFrontPortFieldNumber = 6;
  inline ::google::protobuf::uint32 web_front_port() const;
  inline void set_web_front_port(::google::protobuf::uint32 value);
  
  // optional uint32 tunnel_service_port = 7;
  inline bool has_tunnel_service_port() const;
  inline void clear_tunnel_service_port();
  static const int kTunnelServicePortFieldNumber = 7;
  inline ::google::protobuf::uint32 tunnel_service_port() const;
  inline void set_tunnel_service_port(::google::protobuf::uint32 value);
  
  // optional uint32 ext_tunnel_service_port = 8;
  inline bool has_ext_tunnel_service_port() const;
  inline void clear_ext_tunnel_service_port();
  static const int kExtTunnelServicePortFieldNumber = 8;
  inline ::google::protobuf::uint32 ext_tunnel_service_port() const;
  inline void set_ext_tunnel_service_port(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.LanDeviceRouteInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ip_v4_address();
  inline void clear_has_ip_v4_address();
  inline void set_has_ip_v6_address();
  inline void clear_has_ip_v6_address();
  inline void set_has_media_server_port();
  inline void clear_has_media_server_port();
  inline void set_has_virtual_drive_port();
  inline void clear_has_virtual_drive_port();
  inline void set_has_web_front_port();
  inline void clear_has_web_front_port();
  inline void set_has_tunnel_service_port();
  inline void clear_has_tunnel_service_port();
  inline void set_has_ext_tunnel_service_port();
  inline void clear_has_ext_tunnel_service_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_v4_address_;
  int type_;
  ::google::protobuf::uint32 media_server_port_;
  ::std::string* ip_v6_address_;
  ::google::protobuf::uint32 virtual_drive_port_;
  ::google::protobuf::uint32 web_front_port_;
  ::google::protobuf::uint32 tunnel_service_port_;
  ::google::protobuf::uint32 ext_tunnel_service_port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LanDeviceRouteInfo* default_instance_;
};
// -------------------------------------------------------------------

class LanDeviceInfo : public ::google::protobuf::Message {
 public:
  LanDeviceInfo();
  virtual ~LanDeviceInfo();
  
  LanDeviceInfo(const LanDeviceInfo& from);
  
  inline LanDeviceInfo& operator=(const LanDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LanDeviceInfo& default_instance();
  
  void Swap(LanDeviceInfo* other);
  
  // implements Message ----------------------------------------------
  
  LanDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LanDeviceInfo& from);
  void MergeFrom(const LanDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.LanDeviceType_t type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ccd::LanDeviceType_t type() const;
  inline void set_type(ccd::LanDeviceType_t value);
  
  // required string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // required string device_name = 3;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 3;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // optional fixed64 device_id = 4;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 4;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required .ccd.LanDeviceRouteInfo route_info = 5;
  inline bool has_route_info() const;
  inline void clear_route_info();
  static const int kRouteInfoFieldNumber = 5;
  inline const ::ccd::LanDeviceRouteInfo& route_info() const;
  inline ::ccd::LanDeviceRouteInfo* mutable_route_info();
  inline ::ccd::LanDeviceRouteInfo* release_route_info();
  
  // optional uint32 notifications = 6;
  inline bool has_notifications() const;
  inline void clear_notifications();
  static const int kNotificationsFieldNumber = 6;
  inline ::google::protobuf::uint32 notifications() const;
  inline void set_notifications(::google::protobuf::uint32 value);
  
  // optional fixed64 user_id = 7;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional string pd_instance_id = 8;
  inline bool has_pd_instance_id() const;
  inline void clear_pd_instance_id();
  static const int kPdInstanceIdFieldNumber = 8;
  inline const ::std::string& pd_instance_id() const;
  inline void set_pd_instance_id(const ::std::string& value);
  inline void set_pd_instance_id(const char* value);
  inline void set_pd_instance_id(const char* value, size_t size);
  inline ::std::string* mutable_pd_instance_id();
  inline ::std::string* release_pd_instance_id();
  
  // optional uint32 pd_instance_id_num = 9;
  inline bool has_pd_instance_id_num() const;
  inline void clear_pd_instance_id_num();
  static const int kPdInstanceIdNumFieldNumber = 9;
  inline ::google::protobuf::uint32 pd_instance_id_num() const;
  inline void set_pd_instance_id_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.LanDeviceInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_route_info();
  inline void clear_has_route_info();
  inline void set_has_notifications();
  inline void clear_has_notifications();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_pd_instance_id();
  inline void clear_has_pd_instance_id();
  inline void set_has_pd_instance_id_num();
  inline void clear_has_pd_instance_id_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uuid_;
  ::std::string* device_name_;
  int type_;
  ::google::protobuf::uint32 notifications_;
  ::google::protobuf::uint64 device_id_;
  ::ccd::LanDeviceRouteInfo* route_info_;
  ::google::protobuf::uint64 user_id_;
  ::std::string* pd_instance_id_;
  ::google::protobuf::uint32 pd_instance_id_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LanDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReportLanDevicesInput : public ::google::protobuf::Message {
 public:
  ReportLanDevicesInput();
  virtual ~ReportLanDevicesInput();
  
  ReportLanDevicesInput(const ReportLanDevicesInput& from);
  
  inline ReportLanDevicesInput& operator=(const ReportLanDevicesInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportLanDevicesInput& default_instance();
  
  void Swap(ReportLanDevicesInput* other);
  
  // implements Message ----------------------------------------------
  
  ReportLanDevicesInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportLanDevicesInput& from);
  void MergeFrom(const ReportLanDevicesInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.LanDeviceInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::ccd::LanDeviceInfo& infos(int index) const;
  inline ::ccd::LanDeviceInfo* mutable_infos(int index);
  inline ::ccd::LanDeviceInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:ccd.ReportLanDevicesInput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ReportLanDevicesInput* default_instance_;
};
// -------------------------------------------------------------------

class ListLanDevicesInput : public ::google::protobuf::Message {
 public:
  ListLanDevicesInput();
  virtual ~ListLanDevicesInput();
  
  ListLanDevicesInput(const ListLanDevicesInput& from);
  
  inline ListLanDevicesInput& operator=(const ListLanDevicesInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLanDevicesInput& default_instance();
  
  void Swap(ListLanDevicesInput* other);
  
  // implements Message ----------------------------------------------
  
  ListLanDevicesInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListLanDevicesInput& from);
  void MergeFrom(const ListLanDevicesInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool include_unregistered = 2;
  inline bool has_include_unregistered() const;
  inline void clear_include_unregistered();
  static const int kIncludeUnregisteredFieldNumber = 2;
  inline bool include_unregistered() const;
  inline void set_include_unregistered(bool value);
  
  // optional bool include_registered_but_not_linked = 3;
  inline bool has_include_registered_but_not_linked() const;
  inline void clear_include_registered_but_not_linked();
  static const int kIncludeRegisteredButNotLinkedFieldNumber = 3;
  inline bool include_registered_but_not_linked() const;
  inline void set_include_registered_but_not_linked(bool value);
  
  // optional bool include_linked = 4;
  inline bool has_include_linked() const;
  inline void clear_include_linked();
  static const int kIncludeLinkedFieldNumber = 4;
  inline bool include_linked() const;
  inline void set_include_linked(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.ListLanDevicesInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_include_unregistered();
  inline void clear_has_include_unregistered();
  inline void set_has_include_registered_but_not_linked();
  inline void clear_has_include_registered_but_not_linked();
  inline void set_has_include_linked();
  inline void clear_has_include_linked();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  bool include_unregistered_;
  bool include_registered_but_not_linked_;
  bool include_linked_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListLanDevicesInput* default_instance_;
};
// -------------------------------------------------------------------

class ListLanDevicesOutput : public ::google::protobuf::Message {
 public:
  ListLanDevicesOutput();
  virtual ~ListLanDevicesOutput();
  
  ListLanDevicesOutput(const ListLanDevicesOutput& from);
  
  inline ListLanDevicesOutput& operator=(const ListLanDevicesOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLanDevicesOutput& default_instance();
  
  void Swap(ListLanDevicesOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListLanDevicesOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListLanDevicesOutput& from);
  void MergeFrom(const ListLanDevicesOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.LanDeviceInfo infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::ccd::LanDeviceInfo& infos(int index) const;
  inline ::ccd::LanDeviceInfo* mutable_infos(int index);
  inline ::ccd::LanDeviceInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >*
      mutable_infos();
  
  // @@protoc_insertion_point(class_scope:ccd.ListLanDevicesOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo > infos_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListLanDevicesOutput* default_instance_;
};
// -------------------------------------------------------------------

class DatasetItem : public ::google::protobuf::Message {
 public:
  DatasetItem();
  virtual ~DatasetItem();
  
  DatasetItem(const DatasetItem& from);
  
  inline DatasetItem& operator=(const DatasetItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetItem& default_instance();
  
  void Swap(DatasetItem* other);
  
  // implements Message ----------------------------------------------
  
  DatasetItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetItem& from);
  void MergeFrom(const DatasetItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.DatasetItem)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 dataset_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DatasetItem* default_instance_;
};
// -------------------------------------------------------------------

class ListStorageNodeDatasetsOutput : public ::google::protobuf::Message {
 public:
  ListStorageNodeDatasetsOutput();
  virtual ~ListStorageNodeDatasetsOutput();
  
  ListStorageNodeDatasetsOutput(const ListStorageNodeDatasetsOutput& from);
  
  inline ListStorageNodeDatasetsOutput& operator=(const ListStorageNodeDatasetsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListStorageNodeDatasetsOutput& default_instance();
  
  void Swap(ListStorageNodeDatasetsOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListStorageNodeDatasetsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListStorageNodeDatasetsOutput& from);
  void MergeFrom(const ListStorageNodeDatasetsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.DatasetItem datasets = 1;
  inline int datasets_size() const;
  inline void clear_datasets();
  static const int kDatasetsFieldNumber = 1;
  inline const ::ccd::DatasetItem& datasets(int index) const;
  inline ::ccd::DatasetItem* mutable_datasets(int index);
  inline ::ccd::DatasetItem* add_datasets();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::DatasetItem >&
      datasets() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::DatasetItem >*
      mutable_datasets();
  
  // @@protoc_insertion_point(class_scope:ccd.ListStorageNodeDatasetsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::DatasetItem > datasets_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListStorageNodeDatasetsOutput* default_instance_;
};
// -------------------------------------------------------------------

class TrusteeItem : public ::google::protobuf::Message {
 public:
  TrusteeItem();
  virtual ~TrusteeItem();
  
  TrusteeItem(const TrusteeItem& from);
  
  inline TrusteeItem& operator=(const TrusteeItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrusteeItem& default_instance();
  
  void Swap(TrusteeItem* other);
  
  // implements Message ----------------------------------------------
  
  TrusteeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrusteeItem& from);
  void MergeFrom(const TrusteeItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string sid = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 1;
  inline const ::std::string& sid() const;
  inline void set_sid(const ::std::string& value);
  inline void set_sid(const char* value);
  inline void set_sid(const char* value, size_t size);
  inline ::std::string* mutable_sid();
  inline ::std::string* release_sid();
  
  // required fixed64 attr = 2;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  inline ::google::protobuf::uint64 attr() const;
  inline void set_attr(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.TrusteeItem)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_attr();
  inline void clear_has_attr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sid_;
  ::google::protobuf::uint64 attr_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static TrusteeItem* default_instance_;
};
// -------------------------------------------------------------------

class CCDWin32StartParams : public ::google::protobuf::Message {
 public:
  CCDWin32StartParams();
  virtual ~CCDWin32StartParams();
  
  CCDWin32StartParams(const CCDWin32StartParams& from);
  
  inline CCDWin32StartParams& operator=(const CCDWin32StartParams& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CCDWin32StartParams& default_instance();
  
  void Swap(CCDWin32StartParams* other);
  
  // implements Message ----------------------------------------------
  
  CCDWin32StartParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCDWin32StartParams& from);
  void MergeFrom(const CCDWin32StartParams& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.TrusteeItem trustees = 1;
  inline int trustees_size() const;
  inline void clear_trustees();
  static const int kTrusteesFieldNumber = 1;
  inline const ::ccd::TrusteeItem& trustees(int index) const;
  inline ::ccd::TrusteeItem* mutable_trustees(int index);
  inline ::ccd::TrusteeItem* add_trustees();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::TrusteeItem >&
      trustees() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::TrusteeItem >*
      mutable_trustees();
  
  // @@protoc_insertion_point(class_scope:ccd.CCDWin32StartParams)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::TrusteeItem > trustees_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CCDWin32StartParams* default_instance_;
};
// -------------------------------------------------------------------

class AddDatasetInput : public ::google::protobuf::Message {
 public:
  AddDatasetInput();
  virtual ~AddDatasetInput();
  
  AddDatasetInput(const AddDatasetInput& from);
  
  inline AddDatasetInput& operator=(const AddDatasetInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDatasetInput& default_instance();
  
  void Swap(AddDatasetInput* other);
  
  // implements Message ----------------------------------------------
  
  AddDatasetInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddDatasetInput& from);
  void MergeFrom(const AddDatasetInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string dataset_name = 2;
  inline bool has_dataset_name() const;
  inline void clear_dataset_name();
  static const int kDatasetNameFieldNumber = 2;
  inline const ::std::string& dataset_name() const;
  inline void set_dataset_name(const ::std::string& value);
  inline void set_dataset_name(const char* value);
  inline void set_dataset_name(const char* value, size_t size);
  inline ::std::string* mutable_dataset_name();
  inline ::std::string* release_dataset_name();
  
  // required .ccd.NewDatasetType_t dataset_type = 3;
  inline bool has_dataset_type() const;
  inline void clear_dataset_type();
  static const int kDatasetTypeFieldNumber = 3;
  inline ccd::NewDatasetType_t dataset_type() const;
  inline void set_dataset_type(ccd::NewDatasetType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.AddDatasetInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_name();
  inline void clear_has_dataset_name();
  inline void set_has_dataset_type();
  inline void clear_has_dataset_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* dataset_name_;
  int dataset_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static AddDatasetInput* default_instance_;
};
// -------------------------------------------------------------------

class AddDatasetOutput : public ::google::protobuf::Message {
 public:
  AddDatasetOutput();
  virtual ~AddDatasetOutput();
  
  AddDatasetOutput(const AddDatasetOutput& from);
  
  inline AddDatasetOutput& operator=(const AddDatasetOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddDatasetOutput& default_instance();
  
  void Swap(AddDatasetOutput* other);
  
  // implements Message ----------------------------------------------
  
  AddDatasetOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddDatasetOutput& from);
  void MergeFrom(const AddDatasetOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 dataset_id = 1;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.AddDatasetOutput)
 private:
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static AddDatasetOutput* default_instance_;
};
// -------------------------------------------------------------------

class AddSyncSubscriptionInput : public ::google::protobuf::Message {
 public:
  AddSyncSubscriptionInput();
  virtual ~AddSyncSubscriptionInput();
  
  AddSyncSubscriptionInput(const AddSyncSubscriptionInput& from);
  
  inline AddSyncSubscriptionInput& operator=(const AddSyncSubscriptionInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddSyncSubscriptionInput& default_instance();
  
  void Swap(AddSyncSubscriptionInput* other);
  
  // implements Message ----------------------------------------------
  
  AddSyncSubscriptionInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddSyncSubscriptionInput& from);
  void MergeFrom(const AddSyncSubscriptionInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional fixed64 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 3;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required .ccd.SyncSubscriptionType_t subscription_type = 4;
  inline bool has_subscription_type() const;
  inline void clear_subscription_type();
  static const int kSubscriptionTypeFieldNumber = 4;
  inline ccd::SyncSubscriptionType_t subscription_type() const;
  inline void set_subscription_type(ccd::SyncSubscriptionType_t value);
  
  // optional string device_root = 5;
  inline bool has_device_root() const;
  inline void clear_device_root();
  static const int kDeviceRootFieldNumber = 5;
  inline const ::std::string& device_root() const;
  inline void set_device_root(const ::std::string& value);
  inline void set_device_root(const char* value);
  inline void set_device_root(const char* value, size_t size);
  inline ::std::string* mutable_device_root();
  inline ::std::string* release_device_root();
  
  // optional string filter = 6;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 6;
  inline const ::std::string& filter() const;
  inline void set_filter(const ::std::string& value);
  inline void set_filter(const char* value);
  inline void set_filter(const char* value, size_t size);
  inline ::std::string* mutable_filter();
  inline ::std::string* release_filter();
  
  // optional fixed64 max_size = 7;
  inline bool has_max_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 7;
  inline ::google::protobuf::uint64 max_size() const;
  inline void set_max_size(::google::protobuf::uint64 value);
  
  // optional fixed64 max_files = 8;
  inline bool has_max_files() const;
  inline void clear_max_files();
  static const int kMaxFilesFieldNumber = 8;
  inline ::google::protobuf::uint64 max_files() const;
  inline void set_max_files(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.AddSyncSubscriptionInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_subscription_type();
  inline void clear_has_subscription_type();
  inline void set_has_device_root();
  inline void clear_has_device_root();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_max_size();
  inline void clear_has_max_size();
  inline void set_has_max_files();
  inline void clear_has_max_files();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_id_;
  ::google::protobuf::uint64 dataset_id_;
  ::std::string* device_root_;
  ::std::string* filter_;
  ::google::protobuf::uint64 max_size_;
  ::google::protobuf::uint64 max_files_;
  int subscription_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static AddSyncSubscriptionInput* default_instance_;
};
// -------------------------------------------------------------------

class DeleteDatasetInput : public ::google::protobuf::Message {
 public:
  DeleteDatasetInput();
  virtual ~DeleteDatasetInput();
  
  DeleteDatasetInput(const DeleteDatasetInput& from);
  
  inline DeleteDatasetInput& operator=(const DeleteDatasetInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteDatasetInput& default_instance();
  
  void Swap(DeleteDatasetInput* other);
  
  // implements Message ----------------------------------------------
  
  DeleteDatasetInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteDatasetInput& from);
  void MergeFrom(const DeleteDatasetInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.DeleteDatasetInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 dataset_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DeleteDatasetInput* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSyncSubscriptionsInput : public ::google::protobuf::Message {
 public:
  DeleteSyncSubscriptionsInput();
  virtual ~DeleteSyncSubscriptionsInput();
  
  DeleteSyncSubscriptionsInput(const DeleteSyncSubscriptionsInput& from);
  
  inline DeleteSyncSubscriptionsInput& operator=(const DeleteSyncSubscriptionsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSyncSubscriptionsInput& default_instance();
  
  void Swap(DeleteSyncSubscriptionsInput* other);
  
  // implements Message ----------------------------------------------
  
  DeleteSyncSubscriptionsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSyncSubscriptionsInput& from);
  void MergeFrom(const DeleteSyncSubscriptionsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // repeated fixed64 dataset_ids = 2;
  inline int dataset_ids_size() const;
  inline void clear_dataset_ids();
  static const int kDatasetIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_ids(int index) const;
  inline void set_dataset_ids(int index, ::google::protobuf::uint64 value);
  inline void add_dataset_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      dataset_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_dataset_ids();
  
  // optional fixed64 device_id = 3;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.DeleteSyncSubscriptionsInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > dataset_ids_;
  ::google::protobuf::uint64 device_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DeleteSyncSubscriptionsInput* default_instance_;
};
// -------------------------------------------------------------------

class EventsCreateQueueInput : public ::google::protobuf::Message {
 public:
  EventsCreateQueueInput();
  virtual ~EventsCreateQueueInput();
  
  EventsCreateQueueInput(const EventsCreateQueueInput& from);
  
  inline EventsCreateQueueInput& operator=(const EventsCreateQueueInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsCreateQueueInput& default_instance();
  
  void Swap(EventsCreateQueueInput* other);
  
  // implements Message ----------------------------------------------
  
  EventsCreateQueueInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsCreateQueueInput& from);
  void MergeFrom(const EventsCreateQueueInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ccd.EventsCreateQueueInput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventsCreateQueueInput* default_instance_;
};
// -------------------------------------------------------------------

class EventsCreateQueueOutput : public ::google::protobuf::Message {
 public:
  EventsCreateQueueOutput();
  virtual ~EventsCreateQueueOutput();
  
  EventsCreateQueueOutput(const EventsCreateQueueOutput& from);
  
  inline EventsCreateQueueOutput& operator=(const EventsCreateQueueOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsCreateQueueOutput& default_instance();
  
  void Swap(EventsCreateQueueOutput* other);
  
  // implements Message ----------------------------------------------
  
  EventsCreateQueueOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsCreateQueueOutput& from);
  void MergeFrom(const EventsCreateQueueOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 queue_handle = 1;
  inline bool has_queue_handle() const;
  inline void clear_queue_handle();
  static const int kQueueHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 queue_handle() const;
  inline void set_queue_handle(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventsCreateQueueOutput)
 private:
  inline void set_has_queue_handle();
  inline void clear_has_queue_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 queue_handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventsCreateQueueOutput* default_instance_;
};
// -------------------------------------------------------------------

class EventsDestroyQueueInput : public ::google::protobuf::Message {
 public:
  EventsDestroyQueueInput();
  virtual ~EventsDestroyQueueInput();
  
  EventsDestroyQueueInput(const EventsDestroyQueueInput& from);
  
  inline EventsDestroyQueueInput& operator=(const EventsDestroyQueueInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsDestroyQueueInput& default_instance();
  
  void Swap(EventsDestroyQueueInput* other);
  
  // implements Message ----------------------------------------------
  
  EventsDestroyQueueInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsDestroyQueueInput& from);
  void MergeFrom(const EventsDestroyQueueInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 queue_handle = 1;
  inline bool has_queue_handle() const;
  inline void clear_queue_handle();
  static const int kQueueHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 queue_handle() const;
  inline void set_queue_handle(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventsDestroyQueueInput)
 private:
  inline void set_has_queue_handle();
  inline void clear_has_queue_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 queue_handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventsDestroyQueueInput* default_instance_;
};
// -------------------------------------------------------------------

class EventsDequeueInput : public ::google::protobuf::Message {
 public:
  EventsDequeueInput();
  virtual ~EventsDequeueInput();
  
  EventsDequeueInput(const EventsDequeueInput& from);
  
  inline EventsDequeueInput& operator=(const EventsDequeueInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsDequeueInput& default_instance();
  
  void Swap(EventsDequeueInput* other);
  
  // implements Message ----------------------------------------------
  
  EventsDequeueInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsDequeueInput& from);
  void MergeFrom(const EventsDequeueInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 queue_handle = 1;
  inline bool has_queue_handle() const;
  inline void clear_queue_handle();
  static const int kQueueHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 queue_handle() const;
  inline void set_queue_handle(::google::protobuf::uint64 value);
  
  // optional uint32 max_count = 2;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 2;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);
  
  // optional int32 timeout = 3 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 3;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventsDequeueInput)
 private:
  inline void set_has_queue_handle();
  inline void clear_has_queue_handle();
  inline void set_has_max_count();
  inline void clear_has_max_count();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 queue_handle_;
  ::google::protobuf::uint32 max_count_;
  ::google::protobuf::int32 timeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventsDequeueInput* default_instance_;
};
// -------------------------------------------------------------------

class EventSyncFeatureStatusChange : public ::google::protobuf::Message {
 public:
  EventSyncFeatureStatusChange();
  virtual ~EventSyncFeatureStatusChange();
  
  EventSyncFeatureStatusChange(const EventSyncFeatureStatusChange& from);
  
  inline EventSyncFeatureStatusChange& operator=(const EventSyncFeatureStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventSyncFeatureStatusChange& default_instance();
  
  void Swap(EventSyncFeatureStatusChange* other);
  
  // implements Message ----------------------------------------------
  
  EventSyncFeatureStatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventSyncFeatureStatusChange& from);
  void MergeFrom(const EventSyncFeatureStatusChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.SyncFeature_t feature = 1;
  inline bool has_feature() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 1;
  inline ccd::SyncFeature_t feature() const;
  inline void set_feature(ccd::SyncFeature_t value);
  
  // required .ccd.FeatureSyncStateSummary status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::ccd::FeatureSyncStateSummary& status() const;
  inline ::ccd::FeatureSyncStateSummary* mutable_status();
  inline ::ccd::FeatureSyncStateSummary* release_status();
  
  // optional fixed64 device_id = 8;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 8;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventSyncFeatureStatusChange)
 private:
  inline void set_has_feature();
  inline void clear_has_feature();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ccd::FeatureSyncStateSummary* status_;
  ::google::protobuf::uint64 device_id_;
  int feature_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventSyncFeatureStatusChange* default_instance_;
};
// -------------------------------------------------------------------

class EventDeviceInfoChange : public ::google::protobuf::Message {
 public:
  EventDeviceInfoChange();
  virtual ~EventDeviceInfoChange();
  
  EventDeviceInfoChange(const EventDeviceInfoChange& from);
  
  inline EventDeviceInfoChange& operator=(const EventDeviceInfoChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDeviceInfoChange& default_instance();
  
  void Swap(EventDeviceInfoChange* other);
  
  // implements Message ----------------------------------------------
  
  EventDeviceInfoChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDeviceInfoChange& from);
  void MergeFrom(const EventDeviceInfoChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required .ccd.DeviceInfoChangeType_t change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ccd::DeviceInfoChangeType_t change_type() const;
  inline void set_change_type(ccd::DeviceInfoChangeType_t value);
  
  // optional string device_name = 3;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 3;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // optional string protocol_version = 4;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  inline const ::std::string& protocol_version() const;
  inline void set_protocol_version(const ::std::string& value);
  inline void set_protocol_version(const char* value);
  inline void set_protocol_version(const char* value, size_t size);
  inline ::std::string* mutable_protocol_version();
  inline ::std::string* release_protocol_version();
  
  // @@protoc_insertion_point(class_scope:ccd.EventDeviceInfoChange)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::std::string* device_name_;
  ::std::string* protocol_version_;
  int change_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDeviceInfoChange* default_instance_;
};
// -------------------------------------------------------------------

class EventDeviceConnectionChange : public ::google::protobuf::Message {
 public:
  EventDeviceConnectionChange();
  virtual ~EventDeviceConnectionChange();
  
  EventDeviceConnectionChange(const EventDeviceConnectionChange& from);
  
  inline EventDeviceConnectionChange& operator=(const EventDeviceConnectionChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDeviceConnectionChange& default_instance();
  
  void Swap(EventDeviceConnectionChange* other);
  
  // implements Message ----------------------------------------------
  
  EventDeviceConnectionChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDeviceConnectionChange& from);
  void MergeFrom(const EventDeviceConnectionChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required .ccd.DeviceConnectionStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::ccd::DeviceConnectionStatus& status() const;
  inline ::ccd::DeviceConnectionStatus* mutable_status();
  inline ::ccd::DeviceConnectionStatus* release_status();
  
  // @@protoc_insertion_point(class_scope:ccd.EventDeviceConnectionChange)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::ccd::DeviceConnectionStatus* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDeviceConnectionChange* default_instance_;
};
// -------------------------------------------------------------------

class EventDatasetContentChange : public ::google::protobuf::Message {
 public:
  EventDatasetContentChange();
  virtual ~EventDatasetContentChange();
  
  EventDatasetContentChange(const EventDatasetContentChange& from);
  
  inline EventDatasetContentChange& operator=(const EventDatasetContentChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDatasetContentChange& default_instance();
  
  void Swap(EventDatasetContentChange* other);
  
  // implements Message ----------------------------------------------
  
  EventDatasetContentChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDatasetContentChange& from);
  void MergeFrom(const EventDatasetContentChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 dataset_id = 1;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventDatasetContentChange)
 private:
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDatasetContentChange* default_instance_;
};
// -------------------------------------------------------------------

class EventDatasetChange : public ::google::protobuf::Message {
 public:
  EventDatasetChange();
  virtual ~EventDatasetChange();
  
  EventDatasetChange(const EventDatasetChange& from);
  
  inline EventDatasetChange& operator=(const EventDatasetChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDatasetChange& default_instance();
  
  void Swap(EventDatasetChange* other);
  
  // implements Message ----------------------------------------------
  
  EventDatasetChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDatasetChange& from);
  void MergeFrom(const EventDatasetChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated fixed64 dataset_id = 1;
  inline int dataset_id_size() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id(int index) const;
  inline void set_dataset_id(int index, ::google::protobuf::uint64 value);
  inline void add_dataset_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      dataset_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_dataset_id();
  
  // @@protoc_insertion_point(class_scope:ccd.EventDatasetChange)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > dataset_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDatasetChange* default_instance_;
};
// -------------------------------------------------------------------

class PairingRequestAttribute : public ::google::protobuf::Message {
 public:
  PairingRequestAttribute();
  virtual ~PairingRequestAttribute();
  
  PairingRequestAttribute(const PairingRequestAttribute& from);
  
  inline PairingRequestAttribute& operator=(const PairingRequestAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PairingRequestAttribute& default_instance();
  
  void Swap(PairingRequestAttribute* other);
  
  // implements Message ----------------------------------------------
  
  PairingRequestAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PairingRequestAttribute& from);
  void MergeFrom(const PairingRequestAttribute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:ccd.PairingRequestAttribute)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PairingRequestAttribute* default_instance_;
};
// -------------------------------------------------------------------

class EventPairingRequest : public ::google::protobuf::Message {
 public:
  EventPairingRequest();
  virtual ~EventPairingRequest();
  
  EventPairingRequest(const EventPairingRequest& from);
  
  inline EventPairingRequest& operator=(const EventPairingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventPairingRequest& default_instance();
  
  void Swap(EventPairingRequest* other);
  
  // implements Message ----------------------------------------------
  
  EventPairingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventPairingRequest& from);
  void MergeFrom(const EventPairingRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 1;
  inline int pairing_attributes_size() const;
  inline void clear_pairing_attributes();
  static const int kPairingAttributesFieldNumber = 1;
  inline const ::ccd::PairingRequestAttribute& pairing_attributes(int index) const;
  inline ::ccd::PairingRequestAttribute* mutable_pairing_attributes(int index);
  inline ::ccd::PairingRequestAttribute* add_pairing_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >&
      pairing_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >*
      mutable_pairing_attributes();
  
  // required string transaction_id = 2;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 2;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const char* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  
  // @@protoc_insertion_point(class_scope:ccd.EventPairingRequest)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute > pairing_attributes_;
  ::std::string* transaction_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventPairingRequest* default_instance_;
};
// -------------------------------------------------------------------

class EventStorageNodeChange : public ::google::protobuf::Message {
 public:
  EventStorageNodeChange();
  virtual ~EventStorageNodeChange();
  
  EventStorageNodeChange(const EventStorageNodeChange& from);
  
  inline EventStorageNodeChange& operator=(const EventStorageNodeChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventStorageNodeChange& default_instance();
  
  void Swap(EventStorageNodeChange* other);
  
  // implements Message ----------------------------------------------
  
  EventStorageNodeChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventStorageNodeChange& from);
  void MergeFrom(const EventStorageNodeChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required .ccd.StorageNodeChangeType_t change_type = 2;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 2;
  inline ccd::StorageNodeChangeType_t change_type() const;
  inline void set_change_type(ccd::StorageNodeChangeType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventStorageNodeChange)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  int change_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventStorageNodeChange* default_instance_;
};
// -------------------------------------------------------------------

class EventUserLogin : public ::google::protobuf::Message {
 public:
  EventUserLogin();
  virtual ~EventUserLogin();
  
  EventUserLogin(const EventUserLogin& from);
  
  inline EventUserLogin& operator=(const EventUserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventUserLogin& default_instance();
  
  void Swap(EventUserLogin* other);
  
  // implements Message ----------------------------------------------
  
  EventUserLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventUserLogin& from);
  void MergeFrom(const EventUserLogin& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventUserLogin)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventUserLogin* default_instance_;
};
// -------------------------------------------------------------------

class EventUserLogout : public ::google::protobuf::Message {
 public:
  EventUserLogout();
  virtual ~EventUserLogout();
  
  EventUserLogout(const EventUserLogout& from);
  
  inline EventUserLogout& operator=(const EventUserLogout& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventUserLogout& default_instance();
  
  void Swap(EventUserLogout* other);
  
  // implements Message ----------------------------------------------
  
  EventUserLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventUserLogout& from);
  void MergeFrom(const EventUserLogout& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional .ccd.LogoutReason_t reason = 2 [default = LOGOUT_REASON_UNSPECIFIED];
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ccd::LogoutReason_t reason() const;
  inline void set_reason(ccd::LogoutReason_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventUserLogout)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_reason();
  inline void clear_has_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  int reason_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventUserLogout* default_instance_;
};
// -------------------------------------------------------------------

class EventDocSaveAndGoCompletion : public ::google::protobuf::Message {
 public:
  EventDocSaveAndGoCompletion();
  virtual ~EventDocSaveAndGoCompletion();
  
  EventDocSaveAndGoCompletion(const EventDocSaveAndGoCompletion& from);
  
  inline EventDocSaveAndGoCompletion& operator=(const EventDocSaveAndGoCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDocSaveAndGoCompletion& default_instance();
  
  void Swap(EventDocSaveAndGoCompletion* other);
  
  // implements Message ----------------------------------------------
  
  EventDocSaveAndGoCompletion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDocSaveAndGoCompletion& from);
  void MergeFrom(const EventDocSaveAndGoCompletion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.DocSaveAndGoChangeType change_type = 1;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  inline ccd::DocSaveAndGoChangeType change_type() const;
  inline void set_change_type(ccd::DocSaveAndGoChangeType value);
  
  // required string file_path_and_name = 3;
  inline bool has_file_path_and_name() const;
  inline void clear_file_path_and_name();
  static const int kFilePathAndNameFieldNumber = 3;
  inline const ::std::string& file_path_and_name() const;
  inline void set_file_path_and_name(const ::std::string& value);
  inline void set_file_path_and_name(const char* value);
  inline void set_file_path_and_name(const char* value, size_t size);
  inline ::std::string* mutable_file_path_and_name();
  inline ::std::string* release_file_path_and_name();
  
  // optional string new_file_path_and_name = 4;
  inline bool has_new_file_path_and_name() const;
  inline void clear_new_file_path_and_name();
  static const int kNewFilePathAndNameFieldNumber = 4;
  inline const ::std::string& new_file_path_and_name() const;
  inline void set_new_file_path_and_name(const ::std::string& value);
  inline void set_new_file_path_and_name(const char* value);
  inline void set_new_file_path_and_name(const char* value, size_t size);
  inline ::std::string* mutable_new_file_path_and_name();
  inline ::std::string* release_new_file_path_and_name();
  
  // optional fixed64 modify_time = 5;
  inline bool has_modify_time() const;
  inline void clear_modify_time();
  static const int kModifyTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 modify_time() const;
  inline void set_modify_time(::google::protobuf::uint64 value);
  
  // optional sint32 result = 10;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 10;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);
  
  // optional string docname = 11;
  inline bool has_docname() const;
  inline void clear_docname();
  static const int kDocnameFieldNumber = 11;
  inline const ::std::string& docname() const;
  inline void set_docname(const ::std::string& value);
  inline void set_docname(const char* value);
  inline void set_docname(const char* value, size_t size);
  inline ::std::string* mutable_docname();
  inline ::std::string* release_docname();
  
  // optional fixed64 comp_id = 12;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 12;
  inline ::google::protobuf::uint64 comp_id() const;
  inline void set_comp_id(::google::protobuf::uint64 value);
  
  // optional fixed64 revision = 13;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 13;
  inline ::google::protobuf::uint64 revision() const;
  inline void set_revision(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventDocSaveAndGoCompletion)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_file_path_and_name();
  inline void clear_has_file_path_and_name();
  inline void set_has_new_file_path_and_name();
  inline void clear_has_new_file_path_and_name();
  inline void set_has_modify_time();
  inline void clear_has_modify_time();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_docname();
  inline void clear_has_docname();
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_revision();
  inline void clear_has_revision();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* file_path_and_name_;
  ::std::string* new_file_path_and_name_;
  int change_type_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 modify_time_;
  ::std::string* docname_;
  ::google::protobuf::uint64 comp_id_;
  ::google::protobuf::uint64 revision_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDocSaveAndGoCompletion* default_instance_;
};
// -------------------------------------------------------------------

class EventDocSaveAndGoEngineStateChange : public ::google::protobuf::Message {
 public:
  EventDocSaveAndGoEngineStateChange();
  virtual ~EventDocSaveAndGoEngineStateChange();
  
  EventDocSaveAndGoEngineStateChange(const EventDocSaveAndGoEngineStateChange& from);
  
  inline EventDocSaveAndGoEngineStateChange& operator=(const EventDocSaveAndGoEngineStateChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDocSaveAndGoEngineStateChange& default_instance();
  
  void Swap(EventDocSaveAndGoEngineStateChange* other);
  
  // implements Message ----------------------------------------------
  
  EventDocSaveAndGoEngineStateChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDocSaveAndGoEngineStateChange& from);
  void MergeFrom(const EventDocSaveAndGoEngineStateChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool engine_started = 1;
  inline bool has_engine_started() const;
  inline void clear_engine_started();
  static const int kEngineStartedFieldNumber = 1;
  inline bool engine_started() const;
  inline void set_engine_started(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventDocSaveAndGoEngineStateChange)
 private:
  inline void set_has_engine_started();
  inline void clear_has_engine_started();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool engine_started_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDocSaveAndGoEngineStateChange* default_instance_;
};
// -------------------------------------------------------------------

class EventSWUpdateProgress : public ::google::protobuf::Message {
 public:
  EventSWUpdateProgress();
  virtual ~EventSWUpdateProgress();
  
  EventSWUpdateProgress(const EventSWUpdateProgress& from);
  
  inline EventSWUpdateProgress& operator=(const EventSWUpdateProgress& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventSWUpdateProgress& default_instance();
  
  void Swap(EventSWUpdateProgress* other);
  
  // implements Message ----------------------------------------------
  
  EventSWUpdateProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventSWUpdateProgress& from);
  void MergeFrom(const EventSWUpdateProgress& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);
  
  // required uint64 total_transfer_size = 2;
  inline bool has_total_transfer_size() const;
  inline void clear_total_transfer_size();
  static const int kTotalTransferSizeFieldNumber = 2;
  inline ::google::protobuf::uint64 total_transfer_size() const;
  inline void set_total_transfer_size(::google::protobuf::uint64 value);
  
  // required uint64 bytes_transferred_cnt = 3;
  inline bool has_bytes_transferred_cnt() const;
  inline void clear_bytes_transferred_cnt();
  static const int kBytesTransferredCntFieldNumber = 3;
  inline ::google::protobuf::uint64 bytes_transferred_cnt() const;
  inline void set_bytes_transferred_cnt(::google::protobuf::uint64 value);
  
  // required .ccd.SWUpdateDownloadState_t state = 4;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 4;
  inline ccd::SWUpdateDownloadState_t state() const;
  inline void set_state(ccd::SWUpdateDownloadState_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventSWUpdateProgress)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_total_transfer_size();
  inline void clear_has_total_transfer_size();
  inline void set_has_bytes_transferred_cnt();
  inline void clear_has_bytes_transferred_cnt();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 handle_;
  ::google::protobuf::uint64 total_transfer_size_;
  ::google::protobuf::uint64 bytes_transferred_cnt_;
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventSWUpdateProgress* default_instance_;
};
// -------------------------------------------------------------------

class EventIoacStatusChange : public ::google::protobuf::Message {
 public:
  EventIoacStatusChange();
  virtual ~EventIoacStatusChange();
  
  EventIoacStatusChange(const EventIoacStatusChange& from);
  
  inline EventIoacStatusChange& operator=(const EventIoacStatusChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventIoacStatusChange& default_instance();
  
  void Swap(EventIoacStatusChange* other);
  
  // implements Message ----------------------------------------------
  
  EventIoacStatusChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventIoacStatusChange& from);
  void MergeFrom(const EventIoacStatusChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.IoacStatusSummary_t status_summary = 1;
  inline bool has_status_summary() const;
  inline void clear_status_summary();
  static const int kStatusSummaryFieldNumber = 1;
  inline ccd::IoacStatusSummary_t status_summary() const;
  inline void set_status_summary(ccd::IoacStatusSummary_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventIoacStatusChange)
 private:
  inline void set_has_status_summary();
  inline void clear_has_status_summary();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int status_summary_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventIoacStatusChange* default_instance_;
};
// -------------------------------------------------------------------

class EventLanDevicesChange : public ::google::protobuf::Message {
 public:
  EventLanDevicesChange();
  virtual ~EventLanDevicesChange();
  
  EventLanDevicesChange(const EventLanDevicesChange& from);
  
  inline EventLanDevicesChange& operator=(const EventLanDevicesChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLanDevicesChange& default_instance();
  
  void Swap(EventLanDevicesChange* other);
  
  // implements Message ----------------------------------------------
  
  EventLanDevicesChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventLanDevicesChange& from);
  void MergeFrom(const EventLanDevicesChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventLanDevicesChange)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventLanDevicesChange* default_instance_;
};
// -------------------------------------------------------------------

class EventLanDevicesProbeRequest : public ::google::protobuf::Message {
 public:
  EventLanDevicesProbeRequest();
  virtual ~EventLanDevicesProbeRequest();
  
  EventLanDevicesProbeRequest(const EventLanDevicesProbeRequest& from);
  
  inline EventLanDevicesProbeRequest& operator=(const EventLanDevicesProbeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLanDevicesProbeRequest& default_instance();
  
  void Swap(EventLanDevicesProbeRequest* other);
  
  // implements Message ----------------------------------------------
  
  EventLanDevicesProbeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventLanDevicesProbeRequest& from);
  void MergeFrom(const EventLanDevicesProbeRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventLanDevicesProbeRequest)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventLanDevicesProbeRequest* default_instance_;
};
// -------------------------------------------------------------------

class EventPowerModeChange : public ::google::protobuf::Message {
 public:
  EventPowerModeChange();
  virtual ~EventPowerModeChange();
  
  EventPowerModeChange(const EventPowerModeChange& from);
  
  inline EventPowerModeChange& operator=(const EventPowerModeChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventPowerModeChange& default_instance();
  
  void Swap(EventPowerModeChange* other);
  
  // implements Message ----------------------------------------------
  
  EventPowerModeChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventPowerModeChange& from);
  void MergeFrom(const EventPowerModeChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.PowerMode_t power_mode = 1;
  inline bool has_power_mode() const;
  inline void clear_power_mode();
  static const int kPowerModeFieldNumber = 1;
  inline ccd::PowerMode_t power_mode() const;
  inline void set_power_mode(ccd::PowerMode_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventPowerModeChange)
 private:
  inline void set_has_power_mode();
  inline void clear_has_power_mode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int power_mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventPowerModeChange* default_instance_;
};
// -------------------------------------------------------------------

class EventRemoteSwUpdateMessage : public ::google::protobuf::Message {
 public:
  EventRemoteSwUpdateMessage();
  virtual ~EventRemoteSwUpdateMessage();
  
  EventRemoteSwUpdateMessage(const EventRemoteSwUpdateMessage& from);
  
  inline EventRemoteSwUpdateMessage& operator=(const EventRemoteSwUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventRemoteSwUpdateMessage& default_instance();
  
  void Swap(EventRemoteSwUpdateMessage* other);
  
  // implements Message ----------------------------------------------
  
  EventRemoteSwUpdateMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventRemoteSwUpdateMessage& from);
  void MergeFrom(const EventRemoteSwUpdateMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 source_device_id = 1;
  inline bool has_source_device_id() const;
  inline void clear_source_device_id();
  static const int kSourceDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 source_device_id() const;
  inline void set_source_device_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventRemoteSwUpdateMessage)
 private:
  inline void set_has_source_device_id();
  inline void clear_has_source_device_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 source_device_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventRemoteSwUpdateMessage* default_instance_;
};
// -------------------------------------------------------------------

class EventAsyncUploadCompletion : public ::google::protobuf::Message {
 public:
  EventAsyncUploadCompletion();
  virtual ~EventAsyncUploadCompletion();
  
  EventAsyncUploadCompletion(const EventAsyncUploadCompletion& from);
  
  inline EventAsyncUploadCompletion& operator=(const EventAsyncUploadCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventAsyncUploadCompletion& default_instance();
  
  void Swap(EventAsyncUploadCompletion* other);
  
  // implements Message ----------------------------------------------
  
  EventAsyncUploadCompletion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventAsyncUploadCompletion& from);
  void MergeFrom(const EventAsyncUploadCompletion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 transaction_id = 1;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 transaction_id() const;
  inline void set_transaction_id(::google::protobuf::uint64 value);
  
  // required fixed64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 handle = 3;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 3;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);
  
  // required fixed32 upload_status = 4;
  inline bool has_upload_status() const;
  inline void clear_upload_status();
  static const int kUploadStatusFieldNumber = 4;
  inline ::google::protobuf::uint32 upload_status() const;
  inline void set_upload_status(::google::protobuf::uint32 value);
  
  // required .ccd.AsyncUploadState_t state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ccd::AsyncUploadState_t state() const;
  inline void set_state(ccd::AsyncUploadState_t value);
  
  // optional sint32 error_code = 6;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 6;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventAsyncUploadCompletion)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_upload_status();
  inline void clear_has_upload_status();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 transaction_id_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 handle_;
  ::google::protobuf::uint32 upload_status_;
  int state_;
  ::google::protobuf::int32 error_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventAsyncUploadCompletion* default_instance_;
};
// -------------------------------------------------------------------

class EventSyncBackCompletion : public ::google::protobuf::Message {
 public:
  EventSyncBackCompletion();
  virtual ~EventSyncBackCompletion();
  
  EventSyncBackCompletion(const EventSyncBackCompletion& from);
  
  inline EventSyncBackCompletion& operator=(const EventSyncBackCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventSyncBackCompletion& default_instance();
  
  void Swap(EventSyncBackCompletion* other);
  
  // implements Message ----------------------------------------------
  
  EventSyncBackCompletion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventSyncBackCompletion& from);
  void MergeFrom(const EventSyncBackCompletion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required string component_name = 3;
  inline bool has_component_name() const;
  inline void clear_component_name();
  static const int kComponentNameFieldNumber = 3;
  inline const ::std::string& component_name() const;
  inline void set_component_name(const ::std::string& value);
  inline void set_component_name(const char* value);
  inline void set_component_name(const char* value, size_t size);
  inline ::std::string* mutable_component_name();
  inline ::std::string* release_component_name();
  
  // required fixed64 component_id = 4;
  inline bool has_component_id() const;
  inline void clear_component_id();
  static const int kComponentIdFieldNumber = 4;
  inline ::google::protobuf::uint64 component_id() const;
  inline void set_component_id(::google::protobuf::uint64 value);
  
  // required fixed64 revision = 5;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 5;
  inline ::google::protobuf::uint64 revision() const;
  inline void set_revision(::google::protobuf::uint64 value);
  
  // required string local_path = 6;
  inline bool has_local_path() const;
  inline void clear_local_path();
  static const int kLocalPathFieldNumber = 6;
  inline const ::std::string& local_path() const;
  inline void set_local_path(const ::std::string& value);
  inline void set_local_path(const char* value);
  inline void set_local_path(const char* value, size_t size);
  inline ::std::string* mutable_local_path();
  inline ::std::string* release_local_path();
  
  // @@protoc_insertion_point(class_scope:ccd.EventSyncBackCompletion)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_component_name();
  inline void clear_has_component_name();
  inline void set_has_component_id();
  inline void clear_has_component_id();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_local_path();
  inline void clear_has_local_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 dataset_id_;
  ::std::string* component_name_;
  ::google::protobuf::uint64 component_id_;
  ::google::protobuf::uint64 revision_;
  ::std::string* local_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventSyncBackCompletion* default_instance_;
};
// -------------------------------------------------------------------

class EventPicStreamDBUpdateComplete : public ::google::protobuf::Message {
 public:
  EventPicStreamDBUpdateComplete();
  virtual ~EventPicStreamDBUpdateComplete();
  
  EventPicStreamDBUpdateComplete(const EventPicStreamDBUpdateComplete& from);
  
  inline EventPicStreamDBUpdateComplete& operator=(const EventPicStreamDBUpdateComplete& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventPicStreamDBUpdateComplete& default_instance();
  
  void Swap(EventPicStreamDBUpdateComplete* other);
  
  // implements Message ----------------------------------------------
  
  EventPicStreamDBUpdateComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventPicStreamDBUpdateComplete& from);
  void MergeFrom(const EventPicStreamDBUpdateComplete& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 dataset_id = 1;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventPicStreamDBUpdateComplete)
 private:
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventPicStreamDBUpdateComplete* default_instance_;
};
// -------------------------------------------------------------------

class EventPicStreamStorageConservation : public ::google::protobuf::Message {
 public:
  EventPicStreamStorageConservation();
  virtual ~EventPicStreamStorageConservation();
  
  EventPicStreamStorageConservation(const EventPicStreamStorageConservation& from);
  
  inline EventPicStreamStorageConservation& operator=(const EventPicStreamStorageConservation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventPicStreamStorageConservation& default_instance();
  
  void Swap(EventPicStreamStorageConservation* other);
  
  // implements Message ----------------------------------------------
  
  EventPicStreamStorageConservation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventPicStreamStorageConservation& from);
  void MergeFrom(const EventPicStreamStorageConservation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool is_dropping_mode = 1;
  inline bool has_is_dropping_mode() const;
  inline void clear_is_dropping_mode();
  static const int kIsDroppingModeFieldNumber = 1;
  inline bool is_dropping_mode() const;
  inline void set_is_dropping_mode(bool value);
  
  // optional uint64 free_disk_size_bytes = 2;
  inline bool has_free_disk_size_bytes() const;
  inline void clear_free_disk_size_bytes();
  static const int kFreeDiskSizeBytesFieldNumber = 2;
  inline ::google::protobuf::uint64 free_disk_size_bytes() const;
  inline void set_free_disk_size_bytes(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.EventPicStreamStorageConservation)
 private:
  inline void set_has_is_dropping_mode();
  inline void clear_has_is_dropping_mode();
  inline void set_has_free_disk_size_bytes();
  inline void clear_has_free_disk_size_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 free_disk_size_bytes_;
  bool is_dropping_mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventPicStreamStorageConservation* default_instance_;
};
// -------------------------------------------------------------------

class EventDeviceCredentialsChange : public ::google::protobuf::Message {
 public:
  EventDeviceCredentialsChange();
  virtual ~EventDeviceCredentialsChange();
  
  EventDeviceCredentialsChange(const EventDeviceCredentialsChange& from);
  
  inline EventDeviceCredentialsChange& operator=(const EventDeviceCredentialsChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventDeviceCredentialsChange& default_instance();
  
  void Swap(EventDeviceCredentialsChange* other);
  
  // implements Message ----------------------------------------------
  
  EventDeviceCredentialsChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventDeviceCredentialsChange& from);
  void MergeFrom(const EventDeviceCredentialsChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.DeviceCredChangeType_t change_type = 1;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  inline ccd::DeviceCredChangeType_t change_type() const;
  inline void set_change_type(ccd::DeviceCredChangeType_t value);
  
  // required string local_file_root_path = 2;
  inline bool has_local_file_root_path() const;
  inline void clear_local_file_root_path();
  static const int kLocalFileRootPathFieldNumber = 2;
  inline const ::std::string& local_file_root_path() const;
  inline void set_local_file_root_path(const ::std::string& value);
  inline void set_local_file_root_path(const char* value);
  inline void set_local_file_root_path(const char* value, size_t size);
  inline ::std::string* mutable_local_file_root_path();
  inline ::std::string* release_local_file_root_path();
  
  // @@protoc_insertion_point(class_scope:ccd.EventDeviceCredentialsChange)
 private:
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_local_file_root_path();
  inline void clear_has_local_file_root_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* local_file_root_path_;
  int change_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventDeviceCredentialsChange* default_instance_;
};
// -------------------------------------------------------------------

class EventUserCredentialsChange : public ::google::protobuf::Message {
 public:
  EventUserCredentialsChange();
  virtual ~EventUserCredentialsChange();
  
  EventUserCredentialsChange(const EventUserCredentialsChange& from);
  
  inline EventUserCredentialsChange& operator=(const EventUserCredentialsChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventUserCredentialsChange& default_instance();
  
  void Swap(EventUserCredentialsChange* other);
  
  // implements Message ----------------------------------------------
  
  EventUserCredentialsChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventUserCredentialsChange& from);
  void MergeFrom(const EventUserCredentialsChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string local_file_path = 1;
  inline bool has_local_file_path() const;
  inline void clear_local_file_path();
  static const int kLocalFilePathFieldNumber = 1;
  inline const ::std::string& local_file_path() const;
  inline void set_local_file_path(const ::std::string& value);
  inline void set_local_file_path(const char* value);
  inline void set_local_file_path(const char* value, size_t size);
  inline ::std::string* mutable_local_file_path();
  inline ::std::string* release_local_file_path();
  
  // @@protoc_insertion_point(class_scope:ccd.EventUserCredentialsChange)
 private:
  inline void set_has_local_file_path();
  inline void clear_has_local_file_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* local_file_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventUserCredentialsChange* default_instance_;
};
// -------------------------------------------------------------------

class CcdiEvent : public ::google::protobuf::Message {
 public:
  CcdiEvent();
  virtual ~CcdiEvent();
  
  CcdiEvent(const CcdiEvent& from);
  
  inline CcdiEvent& operator=(const CcdiEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CcdiEvent& default_instance();
  
  void Swap(CcdiEvent* other);
  
  // implements Message ----------------------------------------------
  
  CcdiEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CcdiEvent& from);
  void MergeFrom(const CcdiEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ccd.EventSyncFeatureStatusChange sync_feature_status_change = 12;
  inline bool has_sync_feature_status_change() const;
  inline void clear_sync_feature_status_change();
  static const int kSyncFeatureStatusChangeFieldNumber = 12;
  inline const ::ccd::EventSyncFeatureStatusChange& sync_feature_status_change() const;
  inline ::ccd::EventSyncFeatureStatusChange* mutable_sync_feature_status_change();
  inline ::ccd::EventSyncFeatureStatusChange* release_sync_feature_status_change();
  
  // optional .ccd.EventDeviceInfoChange device_info_change = 9;
  inline bool has_device_info_change() const;
  inline void clear_device_info_change();
  static const int kDeviceInfoChangeFieldNumber = 9;
  inline const ::ccd::EventDeviceInfoChange& device_info_change() const;
  inline ::ccd::EventDeviceInfoChange* mutable_device_info_change();
  inline ::ccd::EventDeviceInfoChange* release_device_info_change();
  
  // optional .ccd.EventDeviceConnectionChange device_connection_change = 10;
  inline bool has_device_connection_change() const;
  inline void clear_device_connection_change();
  static const int kDeviceConnectionChangeFieldNumber = 10;
  inline const ::ccd::EventDeviceConnectionChange& device_connection_change() const;
  inline ::ccd::EventDeviceConnectionChange* mutable_device_connection_change();
  inline ::ccd::EventDeviceConnectionChange* release_device_connection_change();
  
  // optional .ccd.EventDatasetContentChange dataset_content_change = 18;
  inline bool has_dataset_content_change() const;
  inline void clear_dataset_content_change();
  static const int kDatasetContentChangeFieldNumber = 18;
  inline const ::ccd::EventDatasetContentChange& dataset_content_change() const;
  inline ::ccd::EventDatasetContentChange* mutable_dataset_content_change();
  inline ::ccd::EventDatasetContentChange* release_dataset_content_change();
  
  // optional .ccd.EventStorageNodeChange storage_node_change = 19;
  inline bool has_storage_node_change() const;
  inline void clear_storage_node_change();
  static const int kStorageNodeChangeFieldNumber = 19;
  inline const ::ccd::EventStorageNodeChange& storage_node_change() const;
  inline ::ccd::EventStorageNodeChange* mutable_storage_node_change();
  inline ::ccd::EventStorageNodeChange* release_storage_node_change();
  
  // optional .ccd.EventUserLogin user_login = 20;
  inline bool has_user_login() const;
  inline void clear_user_login();
  static const int kUserLoginFieldNumber = 20;
  inline const ::ccd::EventUserLogin& user_login() const;
  inline ::ccd::EventUserLogin* mutable_user_login();
  inline ::ccd::EventUserLogin* release_user_login();
  
  // optional .ccd.EventUserLogout user_logout = 21;
  inline bool has_user_logout() const;
  inline void clear_user_logout();
  static const int kUserLogoutFieldNumber = 21;
  inline const ::ccd::EventUserLogout& user_logout() const;
  inline ::ccd::EventUserLogout* mutable_user_logout();
  inline ::ccd::EventUserLogout* release_user_logout();
  
  // optional .ccd.EventDocSaveAndGoCompletion doc_save_and_go_completion = 30;
  inline bool has_doc_save_and_go_completion() const;
  inline void clear_doc_save_and_go_completion();
  static const int kDocSaveAndGoCompletionFieldNumber = 30;
  inline const ::ccd::EventDocSaveAndGoCompletion& doc_save_and_go_completion() const;
  inline ::ccd::EventDocSaveAndGoCompletion* mutable_doc_save_and_go_completion();
  inline ::ccd::EventDocSaveAndGoCompletion* release_doc_save_and_go_completion();
  
  // optional .ccd.EventDocSaveAndGoEngineStateChange doc_save_and_go_engine_state_change = 31;
  inline bool has_doc_save_and_go_engine_state_change() const;
  inline void clear_doc_save_and_go_engine_state_change();
  static const int kDocSaveAndGoEngineStateChangeFieldNumber = 31;
  inline const ::ccd::EventDocSaveAndGoEngineStateChange& doc_save_and_go_engine_state_change() const;
  inline ::ccd::EventDocSaveAndGoEngineStateChange* mutable_doc_save_and_go_engine_state_change();
  inline ::ccd::EventDocSaveAndGoEngineStateChange* release_doc_save_and_go_engine_state_change();
  
  // optional .ccd.EventSWUpdateProgress sw_update_progress = 8;
  inline bool has_sw_update_progress() const;
  inline void clear_sw_update_progress();
  static const int kSwUpdateProgressFieldNumber = 8;
  inline const ::ccd::EventSWUpdateProgress& sw_update_progress() const;
  inline ::ccd::EventSWUpdateProgress* mutable_sw_update_progress();
  inline ::ccd::EventSWUpdateProgress* release_sw_update_progress();
  
  // optional .ccd.EventIoacStatusChange ioac_status_change = 11;
  inline bool has_ioac_status_change() const;
  inline void clear_ioac_status_change();
  static const int kIoacStatusChangeFieldNumber = 11;
  inline const ::ccd::EventIoacStatusChange& ioac_status_change() const;
  inline ::ccd::EventIoacStatusChange* mutable_ioac_status_change();
  inline ::ccd::EventIoacStatusChange* release_ioac_status_change();
  
  // optional .ccd.EventLanDevicesChange lan_devices_change = 32;
  inline bool has_lan_devices_change() const;
  inline void clear_lan_devices_change();
  static const int kLanDevicesChangeFieldNumber = 32;
  inline const ::ccd::EventLanDevicesChange& lan_devices_change() const;
  inline ::ccd::EventLanDevicesChange* mutable_lan_devices_change();
  inline ::ccd::EventLanDevicesChange* release_lan_devices_change();
  
  // optional .ccd.EventLanDevicesProbeRequest lan_devices_probe_request = 33;
  inline bool has_lan_devices_probe_request() const;
  inline void clear_lan_devices_probe_request();
  static const int kLanDevicesProbeRequestFieldNumber = 33;
  inline const ::ccd::EventLanDevicesProbeRequest& lan_devices_probe_request() const;
  inline ::ccd::EventLanDevicesProbeRequest* mutable_lan_devices_probe_request();
  inline ::ccd::EventLanDevicesProbeRequest* release_lan_devices_probe_request();
  
  // optional .ccd.EventPowerModeChange power_mode_change = 34;
  inline bool has_power_mode_change() const;
  inline void clear_power_mode_change();
  static const int kPowerModeChangeFieldNumber = 34;
  inline const ::ccd::EventPowerModeChange& power_mode_change() const;
  inline ::ccd::EventPowerModeChange* mutable_power_mode_change();
  inline ::ccd::EventPowerModeChange* release_power_mode_change();
  
  // optional .ccd.EventRemoteSwUpdateMessage su_message = 36;
  inline bool has_su_message() const;
  inline void clear_su_message();
  static const int kSuMessageFieldNumber = 36;
  inline const ::ccd::EventRemoteSwUpdateMessage& su_message() const;
  inline ::ccd::EventRemoteSwUpdateMessage* mutable_su_message();
  inline ::ccd::EventRemoteSwUpdateMessage* release_su_message();
  
  // optional .ccd.EventAsyncUploadCompletion async_upload_completion = 37;
  inline bool has_async_upload_completion() const;
  inline void clear_async_upload_completion();
  static const int kAsyncUploadCompletionFieldNumber = 37;
  inline const ::ccd::EventAsyncUploadCompletion& async_upload_completion() const;
  inline ::ccd::EventAsyncUploadCompletion* mutable_async_upload_completion();
  inline ::ccd::EventAsyncUploadCompletion* release_async_upload_completion();
  
  // optional .ccd.EventDatasetChange dataset_change = 38;
  inline bool has_dataset_change() const;
  inline void clear_dataset_change();
  static const int kDatasetChangeFieldNumber = 38;
  inline const ::ccd::EventDatasetChange& dataset_change() const;
  inline ::ccd::EventDatasetChange* mutable_dataset_change();
  inline ::ccd::EventDatasetChange* release_dataset_change();
  
  // optional .ccd.EventSyncBackCompletion syncback_completion = 40;
  inline bool has_syncback_completion() const;
  inline void clear_syncback_completion();
  static const int kSyncbackCompletionFieldNumber = 40;
  inline const ::ccd::EventSyncBackCompletion& syncback_completion() const;
  inline ::ccd::EventSyncBackCompletion* mutable_syncback_completion();
  inline ::ccd::EventSyncBackCompletion* release_syncback_completion();
  
  // optional .ccd.EventPicStreamStorageConservation picstream_storage_conservation = 41;
  inline bool has_picstream_storage_conservation() const;
  inline void clear_picstream_storage_conservation();
  static const int kPicstreamStorageConservationFieldNumber = 41;
  inline const ::ccd::EventPicStreamStorageConservation& picstream_storage_conservation() const;
  inline ::ccd::EventPicStreamStorageConservation* mutable_picstream_storage_conservation();
  inline ::ccd::EventPicStreamStorageConservation* release_picstream_storage_conservation();
  
  // optional .ccd.EventPairingRequest pairing_request = 42;
  inline bool has_pairing_request() const;
  inline void clear_pairing_request();
  static const int kPairingRequestFieldNumber = 42;
  inline const ::ccd::EventPairingRequest& pairing_request() const;
  inline ::ccd::EventPairingRequest* mutable_pairing_request();
  inline ::ccd::EventPairingRequest* release_pairing_request();
  
  // optional .ccd.EventPicStreamDBUpdateComplete picstreamdb_updated = 43;
  inline bool has_picstreamdb_updated() const;
  inline void clear_picstreamdb_updated();
  static const int kPicstreamdbUpdatedFieldNumber = 43;
  inline const ::ccd::EventPicStreamDBUpdateComplete& picstreamdb_updated() const;
  inline ::ccd::EventPicStreamDBUpdateComplete* mutable_picstreamdb_updated();
  inline ::ccd::EventPicStreamDBUpdateComplete* release_picstreamdb_updated();
  
  // optional .ccd.EventSyncHistory sync_history = 44;
  inline bool has_sync_history() const;
  inline void clear_sync_history();
  static const int kSyncHistoryFieldNumber = 44;
  inline const ::ccd::EventSyncHistory& sync_history() const;
  inline ::ccd::EventSyncHistory* mutable_sync_history();
  inline ::ccd::EventSyncHistory* release_sync_history();
  
  // optional .ccd.EventDeviceCredentialsChange device_cred_change = 45;
  inline bool has_device_cred_change() const;
  inline void clear_device_cred_change();
  static const int kDeviceCredChangeFieldNumber = 45;
  inline const ::ccd::EventDeviceCredentialsChange& device_cred_change() const;
  inline ::ccd::EventDeviceCredentialsChange* mutable_device_cred_change();
  inline ::ccd::EventDeviceCredentialsChange* release_device_cred_change();
  
  // optional .ccd.EventUserCredentialsChange user_cred_change = 46;
  inline bool has_user_cred_change() const;
  inline void clear_user_cred_change();
  static const int kUserCredChangeFieldNumber = 46;
  inline const ::ccd::EventUserCredentialsChange& user_cred_change() const;
  inline ::ccd::EventUserCredentialsChange* mutable_user_cred_change();
  inline ::ccd::EventUserCredentialsChange* release_user_cred_change();
  
  // @@protoc_insertion_point(class_scope:ccd.CcdiEvent)
 private:
  inline void set_has_sync_feature_status_change();
  inline void clear_has_sync_feature_status_change();
  inline void set_has_device_info_change();
  inline void clear_has_device_info_change();
  inline void set_has_device_connection_change();
  inline void clear_has_device_connection_change();
  inline void set_has_dataset_content_change();
  inline void clear_has_dataset_content_change();
  inline void set_has_storage_node_change();
  inline void clear_has_storage_node_change();
  inline void set_has_user_login();
  inline void clear_has_user_login();
  inline void set_has_user_logout();
  inline void clear_has_user_logout();
  inline void set_has_doc_save_and_go_completion();
  inline void clear_has_doc_save_and_go_completion();
  inline void set_has_doc_save_and_go_engine_state_change();
  inline void clear_has_doc_save_and_go_engine_state_change();
  inline void set_has_sw_update_progress();
  inline void clear_has_sw_update_progress();
  inline void set_has_ioac_status_change();
  inline void clear_has_ioac_status_change();
  inline void set_has_lan_devices_change();
  inline void clear_has_lan_devices_change();
  inline void set_has_lan_devices_probe_request();
  inline void clear_has_lan_devices_probe_request();
  inline void set_has_power_mode_change();
  inline void clear_has_power_mode_change();
  inline void set_has_su_message();
  inline void clear_has_su_message();
  inline void set_has_async_upload_completion();
  inline void clear_has_async_upload_completion();
  inline void set_has_dataset_change();
  inline void clear_has_dataset_change();
  inline void set_has_syncback_completion();
  inline void clear_has_syncback_completion();
  inline void set_has_picstream_storage_conservation();
  inline void clear_has_picstream_storage_conservation();
  inline void set_has_pairing_request();
  inline void clear_has_pairing_request();
  inline void set_has_picstreamdb_updated();
  inline void clear_has_picstreamdb_updated();
  inline void set_has_sync_history();
  inline void clear_has_sync_history();
  inline void set_has_device_cred_change();
  inline void clear_has_device_cred_change();
  inline void set_has_user_cred_change();
  inline void clear_has_user_cred_change();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ccd::EventSyncFeatureStatusChange* sync_feature_status_change_;
  ::ccd::EventDeviceInfoChange* device_info_change_;
  ::ccd::EventDeviceConnectionChange* device_connection_change_;
  ::ccd::EventDatasetContentChange* dataset_content_change_;
  ::ccd::EventStorageNodeChange* storage_node_change_;
  ::ccd::EventUserLogin* user_login_;
  ::ccd::EventUserLogout* user_logout_;
  ::ccd::EventDocSaveAndGoCompletion* doc_save_and_go_completion_;
  ::ccd::EventDocSaveAndGoEngineStateChange* doc_save_and_go_engine_state_change_;
  ::ccd::EventSWUpdateProgress* sw_update_progress_;
  ::ccd::EventIoacStatusChange* ioac_status_change_;
  ::ccd::EventLanDevicesChange* lan_devices_change_;
  ::ccd::EventLanDevicesProbeRequest* lan_devices_probe_request_;
  ::ccd::EventPowerModeChange* power_mode_change_;
  ::ccd::EventRemoteSwUpdateMessage* su_message_;
  ::ccd::EventAsyncUploadCompletion* async_upload_completion_;
  ::ccd::EventDatasetChange* dataset_change_;
  ::ccd::EventSyncBackCompletion* syncback_completion_;
  ::ccd::EventPicStreamStorageConservation* picstream_storage_conservation_;
  ::ccd::EventPairingRequest* pairing_request_;
  ::ccd::EventPicStreamDBUpdateComplete* picstreamdb_updated_;
  ::ccd::EventSyncHistory* sync_history_;
  ::ccd::EventDeviceCredentialsChange* device_cred_change_;
  ::ccd::EventUserCredentialsChange* user_cred_change_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CcdiEvent* default_instance_;
};
// -------------------------------------------------------------------

class EventsDequeueOutput : public ::google::protobuf::Message {
 public:
  EventsDequeueOutput();
  virtual ~EventsDequeueOutput();
  
  EventsDequeueOutput(const EventsDequeueOutput& from);
  
  inline EventsDequeueOutput& operator=(const EventsDequeueOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventsDequeueOutput& default_instance();
  
  void Swap(EventsDequeueOutput* other);
  
  // implements Message ----------------------------------------------
  
  EventsDequeueOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventsDequeueOutput& from);
  void MergeFrom(const EventsDequeueOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.CcdiEvent events = 1;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 1;
  inline const ::ccd::CcdiEvent& events(int index) const;
  inline ::ccd::CcdiEvent* mutable_events(int index);
  inline ::ccd::CcdiEvent* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::CcdiEvent >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::CcdiEvent >*
      mutable_events();
  
  // @@protoc_insertion_point(class_scope:ccd.EventsDequeueOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::CcdiEvent > events_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventsDequeueOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetDatasetDirectoryEntriesInput : public ::google::protobuf::Message {
 public:
  GetDatasetDirectoryEntriesInput();
  virtual ~GetDatasetDirectoryEntriesInput();
  
  GetDatasetDirectoryEntriesInput(const GetDatasetDirectoryEntriesInput& from);
  
  inline GetDatasetDirectoryEntriesInput& operator=(const GetDatasetDirectoryEntriesInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatasetDirectoryEntriesInput& default_instance();
  
  void Swap(GetDatasetDirectoryEntriesInput* other);
  
  // implements Message ----------------------------------------------
  
  GetDatasetDirectoryEntriesInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDatasetDirectoryEntriesInput& from);
  void MergeFrom(const GetDatasetDirectoryEntriesInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required string directory_name = 3;
  inline bool has_directory_name() const;
  inline void clear_directory_name();
  static const int kDirectoryNameFieldNumber = 3;
  inline const ::std::string& directory_name() const;
  inline void set_directory_name(const ::std::string& value);
  inline void set_directory_name(const char* value);
  inline void set_directory_name(const char* value, size_t size);
  inline ::std::string* mutable_directory_name();
  inline ::std::string* release_directory_name();
  
  // @@protoc_insertion_point(class_scope:ccd.GetDatasetDirectoryEntriesInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_directory_name();
  inline void clear_has_directory_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 dataset_id_;
  ::std::string* directory_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetDatasetDirectoryEntriesInput* default_instance_;
};
// -------------------------------------------------------------------

class DatasetDirectoryEntry : public ::google::protobuf::Message {
 public:
  DatasetDirectoryEntry();
  virtual ~DatasetDirectoryEntry();
  
  DatasetDirectoryEntry(const DatasetDirectoryEntry& from);
  
  inline DatasetDirectoryEntry& operator=(const DatasetDirectoryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetDirectoryEntry& default_instance();
  
  void Swap(DatasetDirectoryEntry* other);
  
  // implements Message ----------------------------------------------
  
  DatasetDirectoryEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetDirectoryEntry& from);
  void MergeFrom(const DatasetDirectoryEntry& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required bool is_dir = 2;
  inline bool has_is_dir() const;
  inline void clear_is_dir();
  static const int kIsDirFieldNumber = 2;
  inline bool is_dir() const;
  inline void set_is_dir(bool value);
  
  // optional fixed64 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // optional string url = 4;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 4;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional fixed64 mtime = 5;
  inline bool has_mtime() const;
  inline void clear_mtime();
  static const int kMtimeFieldNumber = 5;
  inline ::google::protobuf::uint64 mtime() const;
  inline void set_mtime(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.DatasetDirectoryEntry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_is_dir();
  inline void clear_has_is_dir();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_mtime();
  inline void clear_has_mtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 size_;
  ::std::string* url_;
  ::google::protobuf::uint64 mtime_;
  bool is_dir_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DatasetDirectoryEntry* default_instance_;
};
// -------------------------------------------------------------------

class GetDatasetDirectoryEntriesOutput : public ::google::protobuf::Message {
 public:
  GetDatasetDirectoryEntriesOutput();
  virtual ~GetDatasetDirectoryEntriesOutput();
  
  GetDatasetDirectoryEntriesOutput(const GetDatasetDirectoryEntriesOutput& from);
  
  inline GetDatasetDirectoryEntriesOutput& operator=(const GetDatasetDirectoryEntriesOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatasetDirectoryEntriesOutput& default_instance();
  
  void Swap(GetDatasetDirectoryEntriesOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetDatasetDirectoryEntriesOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDatasetDirectoryEntriesOutput& from);
  void MergeFrom(const GetDatasetDirectoryEntriesOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.DatasetDirectoryEntry entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::ccd::DatasetDirectoryEntry& entries(int index) const;
  inline ::ccd::DatasetDirectoryEntry* mutable_entries(int index);
  inline ::ccd::DatasetDirectoryEntry* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::DatasetDirectoryEntry >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::DatasetDirectoryEntry >*
      mutable_entries();
  
  // @@protoc_insertion_point(class_scope:ccd.GetDatasetDirectoryEntriesOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::DatasetDirectoryEntry > entries_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetDatasetDirectoryEntriesOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetInfraHttpInfoInput : public ::google::protobuf::Message {
 public:
  GetInfraHttpInfoInput();
  virtual ~GetInfraHttpInfoInput();
  
  GetInfraHttpInfoInput(const GetInfraHttpInfoInput& from);
  
  inline GetInfraHttpInfoInput& operator=(const GetInfraHttpInfoInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfraHttpInfoInput& default_instance();
  
  void Swap(GetInfraHttpInfoInput* other);
  
  // implements Message ----------------------------------------------
  
  GetInfraHttpInfoInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInfraHttpInfoInput& from);
  void MergeFrom(const GetInfraHttpInfoInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required .ccd.InfraHttpService_t service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline ccd::InfraHttpService_t service() const;
  inline void set_service(ccd::InfraHttpService_t value);
  
  // required bool secure = 3 [default = true];
  inline bool has_secure() const;
  inline void clear_secure();
  static const int kSecureFieldNumber = 3;
  inline bool secure() const;
  inline void set_secure(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.GetInfraHttpInfoInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_secure();
  inline void clear_has_secure();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  int service_;
  bool secure_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetInfraHttpInfoInput* default_instance_;
};
// -------------------------------------------------------------------

class GetInfraHttpInfoOutput : public ::google::protobuf::Message {
 public:
  GetInfraHttpInfoOutput();
  virtual ~GetInfraHttpInfoOutput();
  
  GetInfraHttpInfoOutput(const GetInfraHttpInfoOutput& from);
  
  inline GetInfraHttpInfoOutput& operator=(const GetInfraHttpInfoOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInfraHttpInfoOutput& default_instance();
  
  void Swap(GetInfraHttpInfoOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetInfraHttpInfoOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInfraHttpInfoOutput& from);
  void MergeFrom(const GetInfraHttpInfoOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url_prefix = 1;
  inline bool has_url_prefix() const;
  inline void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 1;
  inline const ::std::string& url_prefix() const;
  inline void set_url_prefix(const ::std::string& value);
  inline void set_url_prefix(const char* value);
  inline void set_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_url_prefix();
  inline ::std::string* release_url_prefix();
  
  // optional string session_handle = 2;
  inline bool has_session_handle() const;
  inline void clear_session_handle();
  static const int kSessionHandleFieldNumber = 2;
  inline const ::std::string& session_handle() const;
  inline void set_session_handle(const ::std::string& value);
  inline void set_session_handle(const char* value);
  inline void set_session_handle(const char* value, size_t size);
  inline ::std::string* mutable_session_handle();
  inline ::std::string* release_session_handle();
  
  // optional string service_ticket = 3;
  inline bool has_service_ticket() const;
  inline void clear_service_ticket();
  static const int kServiceTicketFieldNumber = 3;
  inline const ::std::string& service_ticket() const;
  inline void set_service_ticket(const ::std::string& value);
  inline void set_service_ticket(const char* value);
  inline void set_service_ticket(const char* value, size_t size);
  inline ::std::string* mutable_service_ticket();
  inline ::std::string* release_service_ticket();
  
  // @@protoc_insertion_point(class_scope:ccd.GetInfraHttpInfoOutput)
 private:
  inline void set_has_url_prefix();
  inline void clear_has_url_prefix();
  inline void set_has_session_handle();
  inline void clear_has_session_handle();
  inline void set_has_service_ticket();
  inline void clear_has_service_ticket();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_prefix_;
  ::std::string* session_handle_;
  ::std::string* service_ticket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetInfraHttpInfoOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetLocalHttpInfoInput : public ::google::protobuf::Message {
 public:
  GetLocalHttpInfoInput();
  virtual ~GetLocalHttpInfoInput();
  
  GetLocalHttpInfoInput(const GetLocalHttpInfoInput& from);
  
  inline GetLocalHttpInfoInput& operator=(const GetLocalHttpInfoInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocalHttpInfoInput& default_instance();
  
  void Swap(GetLocalHttpInfoInput* other);
  
  // implements Message ----------------------------------------------
  
  GetLocalHttpInfoInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLocalHttpInfoInput& from);
  void MergeFrom(const GetLocalHttpInfoInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required .ccd.LocalHttpService_t service = 2;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 2;
  inline ccd::LocalHttpService_t service() const;
  inline void set_service(ccd::LocalHttpService_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.GetLocalHttpInfoInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_service();
  inline void clear_has_service();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  int service_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetLocalHttpInfoInput* default_instance_;
};
// -------------------------------------------------------------------

class GetLocalHttpInfoOutput : public ::google::protobuf::Message {
 public:
  GetLocalHttpInfoOutput();
  virtual ~GetLocalHttpInfoOutput();
  
  GetLocalHttpInfoOutput(const GetLocalHttpInfoOutput& from);
  
  inline GetLocalHttpInfoOutput& operator=(const GetLocalHttpInfoOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLocalHttpInfoOutput& default_instance();
  
  void Swap(GetLocalHttpInfoOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetLocalHttpInfoOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLocalHttpInfoOutput& from);
  void MergeFrom(const GetLocalHttpInfoOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url_prefix = 1;
  inline bool has_url_prefix() const;
  inline void clear_url_prefix();
  static const int kUrlPrefixFieldNumber = 1;
  inline const ::std::string& url_prefix() const;
  inline void set_url_prefix(const ::std::string& value);
  inline void set_url_prefix(const char* value);
  inline void set_url_prefix(const char* value, size_t size);
  inline ::std::string* mutable_url_prefix();
  inline ::std::string* release_url_prefix();
  
  // required string session_handle = 2;
  inline bool has_session_handle() const;
  inline void clear_session_handle();
  static const int kSessionHandleFieldNumber = 2;
  inline const ::std::string& session_handle() const;
  inline void set_session_handle(const ::std::string& value);
  inline void set_session_handle(const char* value);
  inline void set_session_handle(const char* value, size_t size);
  inline ::std::string* mutable_session_handle();
  inline ::std::string* release_session_handle();
  
  // required string service_ticket = 3;
  inline bool has_service_ticket() const;
  inline void clear_service_ticket();
  static const int kServiceTicketFieldNumber = 3;
  inline const ::std::string& service_ticket() const;
  inline void set_service_ticket(const ::std::string& value);
  inline void set_service_ticket(const char* value);
  inline void set_service_ticket(const char* value, size_t size);
  inline ::std::string* mutable_service_ticket();
  inline ::std::string* release_service_ticket();
  
  // @@protoc_insertion_point(class_scope:ccd.GetLocalHttpInfoOutput)
 private:
  inline void set_has_url_prefix();
  inline void clear_has_url_prefix();
  inline void set_has_session_handle();
  inline void clear_has_session_handle();
  inline void set_has_service_ticket();
  inline void clear_has_service_ticket();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_prefix_;
  ::std::string* session_handle_;
  ::std::string* service_ticket_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetLocalHttpInfoOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetPersonalCloudStateInput : public ::google::protobuf::Message {
 public:
  GetPersonalCloudStateInput();
  virtual ~GetPersonalCloudStateInput();
  
  GetPersonalCloudStateInput(const GetPersonalCloudStateInput& from);
  
  inline GetPersonalCloudStateInput& operator=(const GetPersonalCloudStateInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPersonalCloudStateInput& default_instance();
  
  void Swap(GetPersonalCloudStateInput* other);
  
  // implements Message ----------------------------------------------
  
  GetPersonalCloudStateInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPersonalCloudStateInput& from);
  void MergeFrom(const GetPersonalCloudStateInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool only_use_cache = 5 [default = false];
  inline bool has_only_use_cache() const;
  inline void clear_only_use_cache();
  static const int kOnlyUseCacheFieldNumber = 5;
  inline bool only_use_cache() const;
  inline void set_only_use_cache(bool value);
  
  // optional bool get_infra_storage_quota = 2 [default = false];
  inline bool has_get_infra_storage_quota() const;
  inline void clear_get_infra_storage_quota();
  static const int kGetInfraStorageQuotaFieldNumber = 2;
  inline bool get_infra_storage_quota() const;
  inline void set_get_infra_storage_quota(bool value);
  
  // optional bool list_storage_nodes = 3 [default = false];
  inline bool has_list_storage_nodes() const;
  inline void clear_list_storage_nodes();
  static const int kListStorageNodesFieldNumber = 3;
  inline bool list_storage_nodes() const;
  inline void set_list_storage_nodes(bool value);
  
  // repeated fixed64 get_device_connection_status = 4;
  inline int get_device_connection_status_size() const;
  inline void clear_get_device_connection_status();
  static const int kGetDeviceConnectionStatusFieldNumber = 4;
  inline ::google::protobuf::uint64 get_device_connection_status(int index) const;
  inline void set_get_device_connection_status(int index, ::google::protobuf::uint64 value);
  inline void add_get_device_connection_status(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      get_device_connection_status() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_get_device_connection_status();
  
  // @@protoc_insertion_point(class_scope:ccd.GetPersonalCloudStateInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_only_use_cache();
  inline void clear_has_only_use_cache();
  inline void set_has_get_infra_storage_quota();
  inline void clear_has_get_infra_storage_quota();
  inline void set_has_list_storage_nodes();
  inline void clear_has_list_storage_nodes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > get_device_connection_status_;
  bool only_use_cache_;
  bool get_infra_storage_quota_;
  bool list_storage_nodes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetPersonalCloudStateInput* default_instance_;
};
// -------------------------------------------------------------------

class DeviceConnectionStatus : public ::google::protobuf::Message {
 public:
  DeviceConnectionStatus();
  virtual ~DeviceConnectionStatus();
  
  DeviceConnectionStatus(const DeviceConnectionStatus& from);
  
  inline DeviceConnectionStatus& operator=(const DeviceConnectionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceConnectionStatus& default_instance();
  
  void Swap(DeviceConnectionStatus* other);
  
  // implements Message ----------------------------------------------
  
  DeviceConnectionStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceConnectionStatus& from);
  void MergeFrom(const DeviceConnectionStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.DeviceConnectionState_t state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ccd::DeviceConnectionState_t state() const;
  inline void set_state(ccd::DeviceConnectionState_t value);
  
  // optional uint64 standby_since = 2;
  inline bool has_standby_since() const;
  inline void clear_standby_since();
  static const int kStandbySinceFieldNumber = 2;
  inline ::google::protobuf::uint64 standby_since() const;
  inline void set_standby_since(::google::protobuf::uint64 value);
  
  // optional bool updating = 3 [default = false];
  inline bool has_updating() const;
  inline void clear_updating();
  static const int kUpdatingFieldNumber = 3;
  inline bool updating() const;
  inline void set_updating(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.DeviceConnectionStatus)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_standby_since();
  inline void clear_has_standby_since();
  inline void set_has_updating();
  inline void clear_has_updating();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 standby_since_;
  int state_;
  bool updating_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceConnectionStatus* default_instance_;
};
// -------------------------------------------------------------------

class StorageNodeInfo : public ::google::protobuf::Message {
 public:
  StorageNodeInfo();
  virtual ~StorageNodeInfo();
  
  StorageNodeInfo(const StorageNodeInfo& from);
  
  inline StorageNodeInfo& operator=(const StorageNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StorageNodeInfo& default_instance();
  
  void Swap(StorageNodeInfo* other);
  
  // implements Message ----------------------------------------------
  
  StorageNodeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StorageNodeInfo& from);
  void MergeFrom(const StorageNodeInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional string storage_name = 2;
  inline bool has_storage_name() const;
  inline void clear_storage_name();
  static const int kStorageNameFieldNumber = 2;
  inline const ::std::string& storage_name() const;
  inline void set_storage_name(const ::std::string& value);
  inline void set_storage_name(const char* value);
  inline void set_storage_name(const char* value, size_t size);
  inline ::std::string* mutable_storage_name();
  inline ::std::string* release_storage_name();
  
  // required .ccd.DeviceConnectionStatus status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline const ::ccd::DeviceConnectionStatus& status() const;
  inline ::ccd::DeviceConnectionStatus* mutable_status();
  inline ::ccd::DeviceConnectionStatus* release_status();
  
  // @@protoc_insertion_point(class_scope:ccd.StorageNodeInfo)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_storage_name();
  inline void clear_has_storage_name();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::std::string* storage_name_;
  ::ccd::DeviceConnectionStatus* status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static StorageNodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetPersonalCloudStateOutput : public ::google::protobuf::Message {
 public:
  GetPersonalCloudStateOutput();
  virtual ~GetPersonalCloudStateOutput();
  
  GetPersonalCloudStateOutput(const GetPersonalCloudStateOutput& from);
  
  inline GetPersonalCloudStateOutput& operator=(const GetPersonalCloudStateOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPersonalCloudStateOutput& default_instance();
  
  void Swap(GetPersonalCloudStateOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetPersonalCloudStateOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPersonalCloudStateOutput& from);
  void MergeFrom(const GetPersonalCloudStateOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 infra_storage_used_bytes = 1;
  inline bool has_infra_storage_used_bytes() const;
  inline void clear_infra_storage_used_bytes();
  static const int kInfraStorageUsedBytesFieldNumber = 1;
  inline ::google::protobuf::uint64 infra_storage_used_bytes() const;
  inline void set_infra_storage_used_bytes(::google::protobuf::uint64 value);
  
  // optional uint64 infra_storage_total_bytes = 2;
  inline bool has_infra_storage_total_bytes() const;
  inline void clear_infra_storage_total_bytes();
  static const int kInfraStorageTotalBytesFieldNumber = 2;
  inline ::google::protobuf::uint64 infra_storage_total_bytes() const;
  inline void set_infra_storage_total_bytes(::google::protobuf::uint64 value);
  
  // repeated .ccd.StorageNodeInfo storage_nodes = 3;
  inline int storage_nodes_size() const;
  inline void clear_storage_nodes();
  static const int kStorageNodesFieldNumber = 3;
  inline const ::ccd::StorageNodeInfo& storage_nodes(int index) const;
  inline ::ccd::StorageNodeInfo* mutable_storage_nodes(int index);
  inline ::ccd::StorageNodeInfo* add_storage_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::StorageNodeInfo >&
      storage_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::StorageNodeInfo >*
      mutable_storage_nodes();
  
  // repeated .ccd.DeviceConnectionStatus device_connection_status = 4;
  inline int device_connection_status_size() const;
  inline void clear_device_connection_status();
  static const int kDeviceConnectionStatusFieldNumber = 4;
  inline const ::ccd::DeviceConnectionStatus& device_connection_status(int index) const;
  inline ::ccd::DeviceConnectionStatus* mutable_device_connection_status(int index);
  inline ::ccd::DeviceConnectionStatus* add_device_connection_status();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::DeviceConnectionStatus >&
      device_connection_status() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::DeviceConnectionStatus >*
      mutable_device_connection_status();
  
  // @@protoc_insertion_point(class_scope:ccd.GetPersonalCloudStateOutput)
 private:
  inline void set_has_infra_storage_used_bytes();
  inline void clear_has_infra_storage_used_bytes();
  inline void set_has_infra_storage_total_bytes();
  inline void clear_has_infra_storage_total_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 infra_storage_used_bytes_;
  ::google::protobuf::uint64 infra_storage_total_bytes_;
  ::google::protobuf::RepeatedPtrField< ::ccd::StorageNodeInfo > storage_nodes_;
  ::google::protobuf::RepeatedPtrField< ::ccd::DeviceConnectionStatus > device_connection_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetPersonalCloudStateOutput* default_instance_;
};
// -------------------------------------------------------------------

class LookupAbsPathInput : public ::google::protobuf::Message {
 public:
  LookupAbsPathInput();
  virtual ~LookupAbsPathInput();
  
  LookupAbsPathInput(const LookupAbsPathInput& from);
  
  inline LookupAbsPathInput& operator=(const LookupAbsPathInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupAbsPathInput& default_instance();
  
  void Swap(LookupAbsPathInput* other);
  
  // implements Message ----------------------------------------------
  
  LookupAbsPathInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LookupAbsPathInput& from);
  void MergeFrom(const LookupAbsPathInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 dataset_id = 1;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required fixed64 component_id = 2;
  inline bool has_component_id() const;
  inline void clear_component_id();
  static const int kComponentIdFieldNumber = 2;
  inline ::google::protobuf::uint64 component_id() const;
  inline void set_component_id(::google::protobuf::uint64 value);
  
  // required uint64 revision = 3;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 3;
  inline ::google::protobuf::uint64 revision() const;
  inline void set_revision(::google::protobuf::uint64 value);
  
  // optional string dataset_rel_path = 7;
  inline bool has_dataset_rel_path() const;
  inline void clear_dataset_rel_path();
  static const int kDatasetRelPathFieldNumber = 7;
  inline const ::std::string& dataset_rel_path() const;
  inline void set_dataset_rel_path(const ::std::string& value);
  inline void set_dataset_rel_path(const char* value);
  inline void set_dataset_rel_path(const char* value, size_t size);
  inline ::std::string* mutable_dataset_rel_path();
  inline ::std::string* release_dataset_rel_path();
  
  // @@protoc_insertion_point(class_scope:ccd.LookupAbsPathInput)
 private:
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_component_id();
  inline void clear_has_component_id();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_dataset_rel_path();
  inline void clear_has_dataset_rel_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  ::google::protobuf::uint64 component_id_;
  ::google::protobuf::uint64 revision_;
  ::std::string* dataset_rel_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LookupAbsPathInput* default_instance_;
};
// -------------------------------------------------------------------

class EventSyncHistory : public ::google::protobuf::Message {
 public:
  EventSyncHistory();
  virtual ~EventSyncHistory();
  
  EventSyncHistory(const EventSyncHistory& from);
  
  inline EventSyncHistory& operator=(const EventSyncHistory& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventSyncHistory& default_instance();
  
  void Swap(EventSyncHistory* other);
  
  // implements Message ----------------------------------------------
  
  EventSyncHistory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventSyncHistory& from);
  void MergeFrom(const EventSyncHistory& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.SyncEventType_t type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ccd::SyncEventType_t type() const;
  inline void set_type(ccd::SyncEventType_t value);
  
  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // required .ccd.SyncFeature_t feature = 3;
  inline bool has_feature() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 3;
  inline ccd::SyncFeature_t feature() const;
  inline void set_feature(ccd::SyncFeature_t value);
  
  // required uint64 dataset_id = 4;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required uint64 event_time = 5;
  inline bool has_event_time() const;
  inline void clear_event_time();
  static const int kEventTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 event_time() const;
  inline void set_event_time(::google::protobuf::uint64 value);
  
  // optional string conflict_file_original_path = 15;
  inline bool has_conflict_file_original_path() const;
  inline void clear_conflict_file_original_path();
  static const int kConflictFileOriginalPathFieldNumber = 15;
  inline const ::std::string& conflict_file_original_path() const;
  inline void set_conflict_file_original_path(const ::std::string& value);
  inline void set_conflict_file_original_path(const char* value);
  inline void set_conflict_file_original_path(const char* value, size_t size);
  inline ::std::string* mutable_conflict_file_original_path();
  inline ::std::string* release_conflict_file_original_path();
  
  // @@protoc_insertion_point(class_scope:ccd.EventSyncHistory)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_feature();
  inline void clear_has_feature();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_event_time();
  inline void clear_has_event_time();
  inline void set_has_conflict_file_original_path();
  inline void clear_has_conflict_file_original_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* path_;
  int type_;
  int feature_;
  ::google::protobuf::uint64 dataset_id_;
  ::google::protobuf::uint64 event_time_;
  ::std::string* conflict_file_original_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EventSyncHistory* default_instance_;
};
// -------------------------------------------------------------------

class GetSyncStateInput : public ::google::protobuf::Message {
 public:
  GetSyncStateInput();
  virtual ~GetSyncStateInput();
  
  GetSyncStateInput(const GetSyncStateInput& from);
  
  inline GetSyncStateInput& operator=(const GetSyncStateInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSyncStateInput& default_instance();
  
  void Swap(GetSyncStateInput* other);
  
  // implements Message ----------------------------------------------
  
  GetSyncStateInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSyncStateInput& from);
  void MergeFrom(const GetSyncStateInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool only_use_cache = 6 [default = false];
  inline bool has_only_use_cache() const;
  inline void clear_only_use_cache();
  static const int kOnlyUseCacheFieldNumber = 6;
  inline bool only_use_cache() const;
  inline void set_only_use_cache(bool value);
  
  // optional bool get_device_name = 2 [default = false];
  inline bool has_get_device_name() const;
  inline void clear_get_device_name();
  static const int kGetDeviceNameFieldNumber = 2;
  inline bool get_device_name() const;
  inline void set_get_device_name(bool value);
  
  // optional bool get_is_camera_roll_upload_enabled = 7 [default = false];
  inline bool has_get_is_camera_roll_upload_enabled() const;
  inline void clear_get_is_camera_roll_upload_enabled();
  static const int kGetIsCameraRollUploadEnabledFieldNumber = 7;
  inline bool get_is_camera_roll_upload_enabled() const;
  inline void set_get_is_camera_roll_upload_enabled(bool value);
  
  // optional bool get_is_camera_roll_global_delete_enabled = 32 [default = true];
  inline bool has_get_is_camera_roll_global_delete_enabled() const;
  inline void clear_get_is_camera_roll_global_delete_enabled();
  static const int kGetIsCameraRollGlobalDeleteEnabledFieldNumber = 32;
  inline bool get_is_camera_roll_global_delete_enabled() const;
  inline void set_get_is_camera_roll_global_delete_enabled(bool value);
  
  // optional bool get_is_network_activity_enabled = 9 [default = false];
  inline bool has_get_is_network_activity_enabled() const;
  inline void clear_get_is_network_activity_enabled();
  static const int kGetIsNetworkActivityEnabledFieldNumber = 9;
  inline bool get_is_network_activity_enabled() const;
  inline void set_get_is_network_activity_enabled(bool value);
  
  // optional bool get_bandwidth_limits = 4 [default = false];
  inline bool has_get_bandwidth_limits() const;
  inline void clear_get_bandwidth_limits();
  static const int kGetBandwidthLimitsFieldNumber = 4;
  inline bool get_bandwidth_limits() const;
  inline void set_get_bandwidth_limits(bool value);
  
  // repeated string get_sync_states_for_paths = 5;
  inline int get_sync_states_for_paths_size() const;
  inline void clear_get_sync_states_for_paths();
  static const int kGetSyncStatesForPathsFieldNumber = 5;
  inline const ::std::string& get_sync_states_for_paths(int index) const;
  inline ::std::string* mutable_get_sync_states_for_paths(int index);
  inline void set_get_sync_states_for_paths(int index, const ::std::string& value);
  inline void set_get_sync_states_for_paths(int index, const char* value);
  inline void set_get_sync_states_for_paths(int index, const char* value, size_t size);
  inline ::std::string* add_get_sync_states_for_paths();
  inline void add_get_sync_states_for_paths(const ::std::string& value);
  inline void add_get_sync_states_for_paths(const char* value);
  inline void add_get_sync_states_for_paths(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& get_sync_states_for_paths() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_get_sync_states_for_paths();
  
  // repeated fixed64 get_sync_states_for_datasets = 8;
  inline int get_sync_states_for_datasets_size() const;
  inline void clear_get_sync_states_for_datasets();
  static const int kGetSyncStatesForDatasetsFieldNumber = 8;
  inline ::google::protobuf::uint64 get_sync_states_for_datasets(int index) const;
  inline void set_get_sync_states_for_datasets(int index, ::google::protobuf::uint64 value);
  inline void add_get_sync_states_for_datasets(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      get_sync_states_for_datasets() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_get_sync_states_for_datasets();
  
  // repeated .ccd.SyncFeature_t get_sync_states_for_features = 22;
  inline int get_sync_states_for_features_size() const;
  inline void clear_get_sync_states_for_features();
  static const int kGetSyncStatesForFeaturesFieldNumber = 22;
  inline ccd::SyncFeature_t get_sync_states_for_features(int index) const;
  inline void set_get_sync_states_for_features(int index, ccd::SyncFeature_t value);
  inline void add_get_sync_states_for_features(ccd::SyncFeature_t value);
  inline const ::google::protobuf::RepeatedField<int>& get_sync_states_for_features() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_get_sync_states_for_features();
  
  // optional bool get_background_data = 12;
  inline bool has_get_background_data() const;
  inline void clear_get_background_data();
  static const int kGetBackgroundDataFieldNumber = 12;
  inline bool get_background_data() const;
  inline void set_get_background_data(bool value);
  
  // optional bool get_auto_sync = 13;
  inline bool has_get_auto_sync() const;
  inline void clear_get_auto_sync();
  static const int kGetAutoSyncFieldNumber = 13;
  inline bool get_auto_sync() const;
  inline void set_get_auto_sync(bool value);
  
  // optional bool get_mobile_network_data = 14;
  inline bool has_get_mobile_network_data() const;
  inline void clear_get_mobile_network_data();
  static const int kGetMobileNetworkDataFieldNumber = 14;
  inline bool get_mobile_network_data() const;
  inline void set_get_mobile_network_data(bool value);
  
  // optional bool get_camera_roll_upload_dirs = 15;
  inline bool has_get_camera_roll_upload_dirs() const;
  inline void clear_get_camera_roll_upload_dirs();
  static const int kGetCameraRollUploadDirsFieldNumber = 15;
  inline bool get_camera_roll_upload_dirs() const;
  inline void set_get_camera_roll_upload_dirs(bool value);
  
  // optional bool get_camera_roll_download_dirs = 19;
  inline bool has_get_camera_roll_download_dirs() const;
  inline void clear_get_camera_roll_download_dirs();
  static const int kGetCameraRollDownloadDirsFieldNumber = 19;
  inline bool get_camera_roll_download_dirs() const;
  inline void set_get_camera_roll_download_dirs(bool value);
  
  // optional bool get_media_metadata_download_path = 16;
  inline bool has_get_media_metadata_download_path() const;
  inline void clear_get_media_metadata_download_path();
  static const int kGetMediaMetadataDownloadPathFieldNumber = 16;
  inline bool get_media_metadata_download_path() const;
  inline void set_get_media_metadata_download_path(bool value);
  
  // optional bool get_media_metadata_upload_path = 17;
  inline bool has_get_media_metadata_upload_path() const;
  inline void clear_get_media_metadata_upload_path();
  static const int kGetMediaMetadataUploadPathFieldNumber = 17;
  inline bool get_media_metadata_upload_path() const;
  inline void set_get_media_metadata_upload_path(bool value);
  
  // optional bool get_media_playlist_path = 18;
  inline bool has_get_media_playlist_path() const;
  inline void clear_get_media_playlist_path();
  static const int kGetMediaPlaylistPathFieldNumber = 18;
  inline bool get_media_playlist_path() const;
  inline void set_get_media_playlist_path(bool value);
  
  // optional bool get_notes_sync_settings = 21;
  inline bool has_get_notes_sync_settings() const;
  inline void clear_get_notes_sync_settings();
  static const int kGetNotesSyncSettingsFieldNumber = 21;
  inline bool get_notes_sync_settings() const;
  inline void set_get_notes_sync_settings(bool value);
  
  // optional bool get_notes_sync_path = 23;
  inline bool has_get_notes_sync_path() const;
  inline void clear_get_notes_sync_path();
  static const int kGetNotesSyncPathFieldNumber = 23;
  inline bool get_notes_sync_path() const;
  inline void set_get_notes_sync_path(bool value);
  
  // optional bool get_mm_thumb_download_path = 24;
  inline bool has_get_mm_thumb_download_path() const;
  inline void clear_get_mm_thumb_download_path();
  static const int kGetMmThumbDownloadPathFieldNumber = 24;
  inline bool get_mm_thumb_download_path() const;
  inline void set_get_mm_thumb_download_path(bool value);
  
  // optional bool get_mm_thumb_sync_enabled = 26;
  inline bool has_get_mm_thumb_sync_enabled() const;
  inline void clear_get_mm_thumb_sync_enabled();
  static const int kGetMmThumbSyncEnabledFieldNumber = 26;
  inline bool get_mm_thumb_sync_enabled() const;
  inline void set_get_mm_thumb_sync_enabled(bool value);
  
  // optional bool get_clouddoc_sync = 28;
  inline bool has_get_clouddoc_sync() const;
  inline void clear_get_clouddoc_sync();
  static const int kGetClouddocSyncFieldNumber = 28;
  inline bool get_clouddoc_sync() const;
  inline void set_get_clouddoc_sync(bool value);
  
  // optional .ccd.LookupAbsPathInput lookup_abs_path = 30;
  inline bool has_lookup_abs_path() const;
  inline void clear_lookup_abs_path();
  static const int kLookupAbsPathFieldNumber = 30;
  inline const ::ccd::LookupAbsPathInput& lookup_abs_path() const;
  inline ::ccd::LookupAbsPathInput* mutable_lookup_abs_path();
  inline ::ccd::LookupAbsPathInput* release_lookup_abs_path();
  
  // optional .ccd.SyncFeature_t get_sync_history_events_by_feature = 31;
  inline bool has_get_sync_history_events_by_feature() const;
  inline void clear_get_sync_history_events_by_feature();
  static const int kGetSyncHistoryEventsByFeatureFieldNumber = 31;
  inline ccd::SyncFeature_t get_sync_history_events_by_feature() const;
  inline void set_get_sync_history_events_by_feature(ccd::SyncFeature_t value);
  
  // optional uint32 get_sync_history_events_max_count = 34 [default = 0];
  inline bool has_get_sync_history_events_max_count() const;
  inline void clear_get_sync_history_events_max_count();
  static const int kGetSyncHistoryEventsMaxCountFieldNumber = 34;
  inline ::google::protobuf::uint32 get_sync_history_events_max_count() const;
  inline void set_get_sync_history_events_max_count(::google::protobuf::uint32 value);
  
  // optional bool get_syncbox_sync_settings = 33;
  inline bool has_get_syncbox_sync_settings() const;
  inline void clear_get_syncbox_sync_settings();
  static const int kGetSyncboxSyncSettingsFieldNumber = 33;
  inline bool get_syncbox_sync_settings() const;
  inline void set_get_syncbox_sync_settings(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.GetSyncStateInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_only_use_cache();
  inline void clear_has_only_use_cache();
  inline void set_has_get_device_name();
  inline void clear_has_get_device_name();
  inline void set_has_get_is_camera_roll_upload_enabled();
  inline void clear_has_get_is_camera_roll_upload_enabled();
  inline void set_has_get_is_camera_roll_global_delete_enabled();
  inline void clear_has_get_is_camera_roll_global_delete_enabled();
  inline void set_has_get_is_network_activity_enabled();
  inline void clear_has_get_is_network_activity_enabled();
  inline void set_has_get_bandwidth_limits();
  inline void clear_has_get_bandwidth_limits();
  inline void set_has_get_background_data();
  inline void clear_has_get_background_data();
  inline void set_has_get_auto_sync();
  inline void clear_has_get_auto_sync();
  inline void set_has_get_mobile_network_data();
  inline void clear_has_get_mobile_network_data();
  inline void set_has_get_camera_roll_upload_dirs();
  inline void clear_has_get_camera_roll_upload_dirs();
  inline void set_has_get_camera_roll_download_dirs();
  inline void clear_has_get_camera_roll_download_dirs();
  inline void set_has_get_media_metadata_download_path();
  inline void clear_has_get_media_metadata_download_path();
  inline void set_has_get_media_metadata_upload_path();
  inline void clear_has_get_media_metadata_upload_path();
  inline void set_has_get_media_playlist_path();
  inline void clear_has_get_media_playlist_path();
  inline void set_has_get_notes_sync_settings();
  inline void clear_has_get_notes_sync_settings();
  inline void set_has_get_notes_sync_path();
  inline void clear_has_get_notes_sync_path();
  inline void set_has_get_mm_thumb_download_path();
  inline void clear_has_get_mm_thumb_download_path();
  inline void set_has_get_mm_thumb_sync_enabled();
  inline void clear_has_get_mm_thumb_sync_enabled();
  inline void set_has_get_clouddoc_sync();
  inline void clear_has_get_clouddoc_sync();
  inline void set_has_lookup_abs_path();
  inline void clear_has_lookup_abs_path();
  inline void set_has_get_sync_history_events_by_feature();
  inline void clear_has_get_sync_history_events_by_feature();
  inline void set_has_get_sync_history_events_max_count();
  inline void clear_has_get_sync_history_events_max_count();
  inline void set_has_get_syncbox_sync_settings();
  inline void clear_has_get_syncbox_sync_settings();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  bool only_use_cache_;
  bool get_device_name_;
  bool get_is_camera_roll_upload_enabled_;
  bool get_is_camera_roll_global_delete_enabled_;
  bool get_is_network_activity_enabled_;
  bool get_bandwidth_limits_;
  bool get_background_data_;
  bool get_auto_sync_;
  ::google::protobuf::RepeatedPtrField< ::std::string> get_sync_states_for_paths_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > get_sync_states_for_datasets_;
  ::google::protobuf::RepeatedField<int> get_sync_states_for_features_;
  bool get_mobile_network_data_;
  bool get_camera_roll_upload_dirs_;
  bool get_camera_roll_download_dirs_;
  bool get_media_metadata_download_path_;
  bool get_media_metadata_upload_path_;
  bool get_media_playlist_path_;
  bool get_notes_sync_settings_;
  bool get_notes_sync_path_;
  bool get_mm_thumb_download_path_;
  bool get_mm_thumb_sync_enabled_;
  bool get_clouddoc_sync_;
  bool get_syncbox_sync_settings_;
  int get_sync_history_events_by_feature_;
  ::ccd::LookupAbsPathInput* lookup_abs_path_;
  ::google::protobuf::uint32 get_sync_history_events_max_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetSyncStateInput* default_instance_;
};
// -------------------------------------------------------------------

class ObjectSyncState : public ::google::protobuf::Message {
 public:
  ObjectSyncState();
  virtual ~ObjectSyncState();
  
  ObjectSyncState(const ObjectSyncState& from);
  
  inline ObjectSyncState& operator=(const ObjectSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectSyncState& default_instance();
  
  void Swap(ObjectSyncState* other);
  
  // implements Message ----------------------------------------------
  
  ObjectSyncState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectSyncState& from);
  void MergeFrom(const ObjectSyncState& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.SyncStateType_t state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ccd::SyncStateType_t state() const;
  inline void set_state(ccd::SyncStateType_t value);
  
  // optional fixed64 dataset_id = 2 [default = 0];
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // optional .ccd.SyncFeature_t sync_feature = 4;
  inline bool has_sync_feature() const;
  inline void clear_sync_feature();
  static const int kSyncFeatureFieldNumber = 4;
  inline ccd::SyncFeature_t sync_feature() const;
  inline void set_sync_feature(ccd::SyncFeature_t value);
  
  // optional bool is_sync_folder_root = 3 [default = false];
  inline bool has_is_sync_folder_root() const;
  inline void clear_is_sync_folder_root();
  static const int kIsSyncFolderRootFieldNumber = 3;
  inline bool is_sync_folder_root() const;
  inline void set_is_sync_folder_root(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.ObjectSyncState)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_sync_feature();
  inline void clear_has_sync_feature();
  inline void set_has_is_sync_folder_root();
  inline void clear_has_is_sync_folder_root();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  int state_;
  int sync_feature_;
  bool is_sync_folder_root_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ObjectSyncState* default_instance_;
};
// -------------------------------------------------------------------

class DatasetSyncStateSummary : public ::google::protobuf::Message {
 public:
  DatasetSyncStateSummary();
  virtual ~DatasetSyncStateSummary();
  
  DatasetSyncStateSummary(const DatasetSyncStateSummary& from);
  
  inline DatasetSyncStateSummary& operator=(const DatasetSyncStateSummary& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetSyncStateSummary& default_instance();
  
  void Swap(DatasetSyncStateSummary* other);
  
  // implements Message ----------------------------------------------
  
  DatasetSyncStateSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatasetSyncStateSummary& from);
  void MergeFrom(const DatasetSyncStateSummary& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ccd.DatasetSyncStateType_t status = 1 [default = CCD_SYNC_STATE_OUT_OF_SYNC];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ccd::DatasetSyncStateType_t status() const;
  inline void set_status(ccd::DatasetSyncStateType_t value);
  
  // optional uint32 pending_files_download = 2 [default = 0];
  inline bool has_pending_files_download() const;
  inline void clear_pending_files_download();
  static const int kPendingFilesDownloadFieldNumber = 2;
  inline ::google::protobuf::uint32 pending_files_download() const;
  inline void set_pending_files_download(::google::protobuf::uint32 value);
  
  // optional uint32 pending_files_upload = 3 [default = 0];
  inline bool has_pending_files_upload() const;
  inline void clear_pending_files_upload();
  static const int kPendingFilesUploadFieldNumber = 3;
  inline ::google::protobuf::uint32 pending_files_upload() const;
  inline void set_pending_files_upload(::google::protobuf::uint32 value);
  
  // optional uint32 total_files_downloaded = 4 [default = 0];
  inline bool has_total_files_downloaded() const;
  inline void clear_total_files_downloaded();
  static const int kTotalFilesDownloadedFieldNumber = 4;
  inline ::google::protobuf::uint32 total_files_downloaded() const;
  inline void set_total_files_downloaded(::google::protobuf::uint32 value);
  
  // optional uint32 total_files_uploaded = 5 [default = 0];
  inline bool has_total_files_uploaded() const;
  inline void clear_total_files_uploaded();
  static const int kTotalFilesUploadedFieldNumber = 5;
  inline ::google::protobuf::uint32 total_files_uploaded() const;
  inline void set_total_files_uploaded(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.DatasetSyncStateSummary)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_pending_files_download();
  inline void clear_has_pending_files_download();
  inline void set_has_pending_files_upload();
  inline void clear_has_pending_files_upload();
  inline void set_has_total_files_downloaded();
  inline void clear_has_total_files_downloaded();
  inline void set_has_total_files_uploaded();
  inline void clear_has_total_files_uploaded();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int status_;
  ::google::protobuf::uint32 pending_files_download_;
  ::google::protobuf::uint32 pending_files_upload_;
  ::google::protobuf::uint32 total_files_downloaded_;
  ::google::protobuf::uint32 total_files_uploaded_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DatasetSyncStateSummary* default_instance_;
};
// -------------------------------------------------------------------

class FeatureSyncStateSummary : public ::google::protobuf::Message {
 public:
  FeatureSyncStateSummary();
  virtual ~FeatureSyncStateSummary();
  
  FeatureSyncStateSummary(const FeatureSyncStateSummary& from);
  
  inline FeatureSyncStateSummary& operator=(const FeatureSyncStateSummary& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureSyncStateSummary& default_instance();
  
  void Swap(FeatureSyncStateSummary* other);
  
  // implements Message ----------------------------------------------
  
  FeatureSyncStateSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureSyncStateSummary& from);
  void MergeFrom(const FeatureSyncStateSummary& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ccd.FeatureSyncStateType_t status = 1 [default = CCD_FEATURE_STATE_OUT_OF_SYNC];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ccd::FeatureSyncStateType_t status() const;
  inline void set_status(ccd::FeatureSyncStateType_t value);
  
  // optional sint32 error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);
  
  // optional uint32 pending_files = 3 [default = 0];
  inline bool has_pending_files() const;
  inline void clear_pending_files();
  static const int kPendingFilesFieldNumber = 3;
  inline ::google::protobuf::uint32 pending_files() const;
  inline void set_pending_files(::google::protobuf::uint32 value);
  
  // optional uint32 failed_files = 4 [default = 0];
  inline bool has_failed_files() const;
  inline void clear_failed_files();
  static const int kFailedFilesFieldNumber = 4;
  inline ::google::protobuf::uint32 failed_files() const;
  inline void set_failed_files(::google::protobuf::uint32 value);
  
  // optional uint32 uploads_remaining = 5 [default = 0];
  inline bool has_uploads_remaining() const;
  inline void clear_uploads_remaining();
  static const int kUploadsRemainingFieldNumber = 5;
  inline ::google::protobuf::uint32 uploads_remaining() const;
  inline void set_uploads_remaining(::google::protobuf::uint32 value);
  
  // optional uint32 downloads_remaining = 6 [default = 0];
  inline bool has_downloads_remaining() const;
  inline void clear_downloads_remaining();
  static const int kDownloadsRemainingFieldNumber = 6;
  inline ::google::protobuf::uint32 downloads_remaining() const;
  inline void set_downloads_remaining(::google::protobuf::uint32 value);
  
  // optional bool remote_scan_pending = 7;
  inline bool has_remote_scan_pending() const;
  inline void clear_remote_scan_pending();
  static const int kRemoteScanPendingFieldNumber = 7;
  inline bool remote_scan_pending() const;
  inline void set_remote_scan_pending(bool value);
  
  // optional bool scan_in_progress = 8;
  inline bool has_scan_in_progress() const;
  inline void clear_scan_in_progress();
  static const int kScanInProgressFieldNumber = 8;
  inline bool scan_in_progress() const;
  inline void set_scan_in_progress(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.FeatureSyncStateSummary)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_pending_files();
  inline void clear_has_pending_files();
  inline void set_has_failed_files();
  inline void clear_has_failed_files();
  inline void set_has_uploads_remaining();
  inline void clear_has_uploads_remaining();
  inline void set_has_downloads_remaining();
  inline void clear_has_downloads_remaining();
  inline void set_has_remote_scan_pending();
  inline void clear_has_remote_scan_pending();
  inline void set_has_scan_in_progress();
  inline void clear_has_scan_in_progress();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int status_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::uint32 pending_files_;
  ::google::protobuf::uint32 failed_files_;
  ::google::protobuf::uint32 uploads_remaining_;
  ::google::protobuf::uint32 downloads_remaining_;
  bool remote_scan_pending_;
  bool scan_in_progress_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static FeatureSyncStateSummary* default_instance_;
};
// -------------------------------------------------------------------

class MediaMetadataThumbMigrateStatus : public ::google::protobuf::Message {
 public:
  MediaMetadataThumbMigrateStatus();
  virtual ~MediaMetadataThumbMigrateStatus();
  
  MediaMetadataThumbMigrateStatus(const MediaMetadataThumbMigrateStatus& from);
  
  inline MediaMetadataThumbMigrateStatus& operator=(const MediaMetadataThumbMigrateStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaMetadataThumbMigrateStatus& default_instance();
  
  void Swap(MediaMetadataThumbMigrateStatus* other);
  
  // implements Message ----------------------------------------------
  
  MediaMetadataThumbMigrateStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaMetadataThumbMigrateStatus& from);
  void MergeFrom(const MediaMetadataThumbMigrateStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string mm_src_path = 1;
  inline bool has_mm_src_path() const;
  inline void clear_mm_src_path();
  static const int kMmSrcPathFieldNumber = 1;
  inline const ::std::string& mm_src_path() const;
  inline void set_mm_src_path(const ::std::string& value);
  inline void set_mm_src_path(const char* value);
  inline void set_mm_src_path(const char* value, size_t size);
  inline ::std::string* mutable_mm_src_path();
  inline ::std::string* release_mm_src_path();
  
  // required string mm_dest_path = 2;
  inline bool has_mm_dest_path() const;
  inline void clear_mm_dest_path();
  static const int kMmDestPathFieldNumber = 2;
  inline const ::std::string& mm_dest_path() const;
  inline void set_mm_dest_path(const ::std::string& value);
  inline void set_mm_dest_path(const char* value);
  inline void set_mm_dest_path(const char* value, size_t size);
  inline ::std::string* mutable_mm_dest_path();
  inline ::std::string* release_mm_dest_path();
  
  // @@protoc_insertion_point(class_scope:ccd.MediaMetadataThumbMigrateStatus)
 private:
  inline void set_has_mm_src_path();
  inline void clear_has_mm_src_path();
  inline void set_has_mm_dest_path();
  inline void clear_has_mm_dest_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* mm_src_path_;
  ::std::string* mm_dest_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static MediaMetadataThumbMigrateStatus* default_instance_;
};
// -------------------------------------------------------------------

class SyncFeatureSettings : public ::google::protobuf::Message {
 public:
  SyncFeatureSettings();
  virtual ~SyncFeatureSettings();
  
  SyncFeatureSettings(const SyncFeatureSettings& from);
  
  inline SyncFeatureSettings& operator=(const SyncFeatureSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncFeatureSettings& default_instance();
  
  void Swap(SyncFeatureSettings* other);
  
  // implements Message ----------------------------------------------
  
  SyncFeatureSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncFeatureSettings& from);
  void MergeFrom(const SyncFeatureSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool sync_feature_enabled = 1;
  inline bool has_sync_feature_enabled() const;
  inline void clear_sync_feature_enabled();
  static const int kSyncFeatureEnabledFieldNumber = 1;
  inline bool sync_feature_enabled() const;
  inline void set_sync_feature_enabled(bool value);
  
  // optional string sync_feature_path = 2;
  inline bool has_sync_feature_path() const;
  inline void clear_sync_feature_path();
  static const int kSyncFeaturePathFieldNumber = 2;
  inline const ::std::string& sync_feature_path() const;
  inline void set_sync_feature_path(const ::std::string& value);
  inline void set_sync_feature_path(const char* value);
  inline void set_sync_feature_path(const char* value, size_t size);
  inline ::std::string* mutable_sync_feature_path();
  inline ::std::string* release_sync_feature_path();
  
  // optional bool is_archive_storage = 3 [default = false];
  inline bool has_is_archive_storage() const;
  inline void clear_is_archive_storage();
  static const int kIsArchiveStorageFieldNumber = 3;
  inline bool is_archive_storage() const;
  inline void set_is_archive_storage(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.SyncFeatureSettings)
 private:
  inline void set_has_sync_feature_enabled();
  inline void clear_has_sync_feature_enabled();
  inline void set_has_sync_feature_path();
  inline void clear_has_sync_feature_path();
  inline void set_has_is_archive_storage();
  inline void clear_has_is_archive_storage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* sync_feature_path_;
  bool sync_feature_enabled_;
  bool is_archive_storage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncFeatureSettings* default_instance_;
};
// -------------------------------------------------------------------

class LookupAbsPathOutput : public ::google::protobuf::Message {
 public:
  LookupAbsPathOutput();
  virtual ~LookupAbsPathOutput();
  
  LookupAbsPathOutput(const LookupAbsPathOutput& from);
  
  inline LookupAbsPathOutput& operator=(const LookupAbsPathOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LookupAbsPathOutput& default_instance();
  
  void Swap(LookupAbsPathOutput* other);
  
  // implements Message ----------------------------------------------
  
  LookupAbsPathOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LookupAbsPathOutput& from);
  void MergeFrom(const LookupAbsPathOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 err_code = 1;
  inline bool has_err_code() const;
  inline void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  inline ::google::protobuf::int32 err_code() const;
  inline void set_err_code(::google::protobuf::int32 value);
  
  // optional string absolute_path = 2;
  inline bool has_absolute_path() const;
  inline void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 2;
  inline const ::std::string& absolute_path() const;
  inline void set_absolute_path(const ::std::string& value);
  inline void set_absolute_path(const char* value);
  inline void set_absolute_path(const char* value, size_t size);
  inline ::std::string* mutable_absolute_path();
  inline ::std::string* release_absolute_path();
  
  // optional fixed64 local_modify_time = 3;
  inline bool has_local_modify_time() const;
  inline void clear_local_modify_time();
  static const int kLocalModifyTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 local_modify_time() const;
  inline void set_local_modify_time(::google::protobuf::uint64 value);
  
  // optional string hash = 4;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 4;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  
  // @@protoc_insertion_point(class_scope:ccd.LookupAbsPathOutput)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_local_modify_time();
  inline void clear_has_local_modify_time();
  inline void set_has_hash();
  inline void clear_has_hash();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* absolute_path_;
  ::google::protobuf::uint64 local_modify_time_;
  ::std::string* hash_;
  ::google::protobuf::int32 err_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LookupAbsPathOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetSyncStateOutput : public ::google::protobuf::Message {
 public:
  GetSyncStateOutput();
  virtual ~GetSyncStateOutput();
  
  GetSyncStateOutput(const GetSyncStateOutput& from);
  
  inline GetSyncStateOutput& operator=(const GetSyncStateOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSyncStateOutput& default_instance();
  
  void Swap(GetSyncStateOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetSyncStateOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSyncStateOutput& from);
  void MergeFrom(const GetSyncStateOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool is_device_linked = 1;
  inline bool has_is_device_linked() const;
  inline void clear_is_device_linked();
  static const int kIsDeviceLinkedFieldNumber = 1;
  inline bool is_device_linked() const;
  inline void set_is_device_linked(bool value);
  
  // required bool is_sync_agent_enabled = 2;
  inline bool has_is_sync_agent_enabled() const;
  inline void clear_is_sync_agent_enabled();
  static const int kIsSyncAgentEnabledFieldNumber = 2;
  inline bool is_sync_agent_enabled() const;
  inline void set_is_sync_agent_enabled(bool value);
  
  // optional string my_device_name = 3;
  inline bool has_my_device_name() const;
  inline void clear_my_device_name();
  static const int kMyDeviceNameFieldNumber = 3;
  inline const ::std::string& my_device_name() const;
  inline void set_my_device_name(const ::std::string& value);
  inline void set_my_device_name(const char* value);
  inline void set_my_device_name(const char* value, size_t size);
  inline ::std::string* mutable_my_device_name();
  inline ::std::string* release_my_device_name();
  
  // optional bool is_camera_roll_upload_enabled = 9;
  inline bool has_is_camera_roll_upload_enabled() const;
  inline void clear_is_camera_roll_upload_enabled();
  static const int kIsCameraRollUploadEnabledFieldNumber = 9;
  inline bool is_camera_roll_upload_enabled() const;
  inline void set_is_camera_roll_upload_enabled(bool value);
  
  // optional bool is_camera_roll_global_delete_enabled = 32;
  inline bool has_is_camera_roll_global_delete_enabled() const;
  inline void clear_is_camera_roll_global_delete_enabled();
  static const int kIsCameraRollGlobalDeleteEnabledFieldNumber = 32;
  inline bool is_camera_roll_global_delete_enabled() const;
  inline void set_is_camera_roll_global_delete_enabled(bool value);
  
  // optional bool is_network_activity_enabled = 11;
  inline bool has_is_network_activity_enabled() const;
  inline void clear_is_network_activity_enabled();
  static const int kIsNetworkActivityEnabledFieldNumber = 11;
  inline bool is_network_activity_enabled() const;
  inline void set_is_network_activity_enabled(bool value);
  
  // optional uint64 max_download_rate_bytes_sec = 4;
  inline bool has_max_download_rate_bytes_sec() const;
  inline void clear_max_download_rate_bytes_sec();
  static const int kMaxDownloadRateBytesSecFieldNumber = 4;
  inline ::google::protobuf::uint64 max_download_rate_bytes_sec() const;
  inline void set_max_download_rate_bytes_sec(::google::protobuf::uint64 value);
  
  // optional uint64 max_upload_rate_bytes_sec = 5;
  inline bool has_max_upload_rate_bytes_sec() const;
  inline void clear_max_upload_rate_bytes_sec();
  static const int kMaxUploadRateBytesSecFieldNumber = 5;
  inline ::google::protobuf::uint64 max_upload_rate_bytes_sec() const;
  inline void set_max_upload_rate_bytes_sec(::google::protobuf::uint64 value);
  
  // repeated .ccd.ObjectSyncState sync_states_for_paths = 6;
  inline int sync_states_for_paths_size() const;
  inline void clear_sync_states_for_paths();
  static const int kSyncStatesForPathsFieldNumber = 6;
  inline const ::ccd::ObjectSyncState& sync_states_for_paths(int index) const;
  inline ::ccd::ObjectSyncState* mutable_sync_states_for_paths(int index);
  inline ::ccd::ObjectSyncState* add_sync_states_for_paths();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::ObjectSyncState >&
      sync_states_for_paths() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::ObjectSyncState >*
      mutable_sync_states_for_paths();
  
  // repeated .ccd.DatasetSyncStateSummary dataset_sync_state_summary = 10;
  inline int dataset_sync_state_summary_size() const;
  inline void clear_dataset_sync_state_summary();
  static const int kDatasetSyncStateSummaryFieldNumber = 10;
  inline const ::ccd::DatasetSyncStateSummary& dataset_sync_state_summary(int index) const;
  inline ::ccd::DatasetSyncStateSummary* mutable_dataset_sync_state_summary(int index);
  inline ::ccd::DatasetSyncStateSummary* add_dataset_sync_state_summary();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::DatasetSyncStateSummary >&
      dataset_sync_state_summary() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::DatasetSyncStateSummary >*
      mutable_dataset_sync_state_summary();
  
  // repeated .ccd.FeatureSyncStateSummary feature_sync_state_summary = 22;
  inline int feature_sync_state_summary_size() const;
  inline void clear_feature_sync_state_summary();
  static const int kFeatureSyncStateSummaryFieldNumber = 22;
  inline const ::ccd::FeatureSyncStateSummary& feature_sync_state_summary(int index) const;
  inline ::ccd::FeatureSyncStateSummary* mutable_feature_sync_state_summary(int index);
  inline ::ccd::FeatureSyncStateSummary* add_feature_sync_state_summary();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::FeatureSyncStateSummary >&
      feature_sync_state_summary() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::FeatureSyncStateSummary >*
      mutable_feature_sync_state_summary();
  
  // optional bool background_data = 12;
  inline bool has_background_data() const;
  inline void clear_background_data();
  static const int kBackgroundDataFieldNumber = 12;
  inline bool background_data() const;
  inline void set_background_data(bool value);
  
  // optional bool auto_sync = 13;
  inline bool has_auto_sync() const;
  inline void clear_auto_sync();
  static const int kAutoSyncFieldNumber = 13;
  inline bool auto_sync() const;
  inline void set_auto_sync(bool value);
  
  // optional bool mobile_network_data = 14;
  inline bool has_mobile_network_data() const;
  inline void clear_mobile_network_data();
  static const int kMobileNetworkDataFieldNumber = 14;
  inline bool mobile_network_data() const;
  inline void set_mobile_network_data(bool value);
  
  // repeated string camera_roll_upload_dirs = 15;
  inline int camera_roll_upload_dirs_size() const;
  inline void clear_camera_roll_upload_dirs();
  static const int kCameraRollUploadDirsFieldNumber = 15;
  inline const ::std::string& camera_roll_upload_dirs(int index) const;
  inline ::std::string* mutable_camera_roll_upload_dirs(int index);
  inline void set_camera_roll_upload_dirs(int index, const ::std::string& value);
  inline void set_camera_roll_upload_dirs(int index, const char* value);
  inline void set_camera_roll_upload_dirs(int index, const char* value, size_t size);
  inline ::std::string* add_camera_roll_upload_dirs();
  inline void add_camera_roll_upload_dirs(const ::std::string& value);
  inline void add_camera_roll_upload_dirs(const char* value);
  inline void add_camera_roll_upload_dirs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& camera_roll_upload_dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_camera_roll_upload_dirs();
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_full_res_download_dirs = 19;
  inline int camera_roll_full_res_download_dirs_size() const;
  inline void clear_camera_roll_full_res_download_dirs();
  static const int kCameraRollFullResDownloadDirsFieldNumber = 19;
  inline const ::ccd::CameraRollDownloadDirSpec& camera_roll_full_res_download_dirs(int index) const;
  inline ::ccd::CameraRollDownloadDirSpec* mutable_camera_roll_full_res_download_dirs(int index);
  inline ::ccd::CameraRollDownloadDirSpec* add_camera_roll_full_res_download_dirs();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >&
      camera_roll_full_res_download_dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >*
      mutable_camera_roll_full_res_download_dirs();
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_low_res_download_dirs = 20;
  inline int camera_roll_low_res_download_dirs_size() const;
  inline void clear_camera_roll_low_res_download_dirs();
  static const int kCameraRollLowResDownloadDirsFieldNumber = 20;
  inline const ::ccd::CameraRollDownloadDirSpec& camera_roll_low_res_download_dirs(int index) const;
  inline ::ccd::CameraRollDownloadDirSpec* mutable_camera_roll_low_res_download_dirs(int index);
  inline ::ccd::CameraRollDownloadDirSpec* add_camera_roll_low_res_download_dirs();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >&
      camera_roll_low_res_download_dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >*
      mutable_camera_roll_low_res_download_dirs();
  
  // repeated .ccd.CameraRollDownloadDirSpec camera_roll_thumb_download_dirs = 31;
  inline int camera_roll_thumb_download_dirs_size() const;
  inline void clear_camera_roll_thumb_download_dirs();
  static const int kCameraRollThumbDownloadDirsFieldNumber = 31;
  inline const ::ccd::CameraRollDownloadDirSpec& camera_roll_thumb_download_dirs(int index) const;
  inline ::ccd::CameraRollDownloadDirSpec* mutable_camera_roll_thumb_download_dirs(int index);
  inline ::ccd::CameraRollDownloadDirSpec* add_camera_roll_thumb_download_dirs();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >&
      camera_roll_thumb_download_dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >*
      mutable_camera_roll_thumb_download_dirs();
  
  // optional string media_metadata_download_path = 16;
  inline bool has_media_metadata_download_path() const;
  inline void clear_media_metadata_download_path();
  static const int kMediaMetadataDownloadPathFieldNumber = 16;
  inline const ::std::string& media_metadata_download_path() const;
  inline void set_media_metadata_download_path(const ::std::string& value);
  inline void set_media_metadata_download_path(const char* value);
  inline void set_media_metadata_download_path(const char* value, size_t size);
  inline ::std::string* mutable_media_metadata_download_path();
  inline ::std::string* release_media_metadata_download_path();
  
  // optional string media_metadata_upload_path = 17;
  inline bool has_media_metadata_upload_path() const;
  inline void clear_media_metadata_upload_path();
  static const int kMediaMetadataUploadPathFieldNumber = 17;
  inline const ::std::string& media_metadata_upload_path() const;
  inline void set_media_metadata_upload_path(const ::std::string& value);
  inline void set_media_metadata_upload_path(const char* value);
  inline void set_media_metadata_upload_path(const char* value, size_t size);
  inline ::std::string* mutable_media_metadata_upload_path();
  inline ::std::string* release_media_metadata_upload_path();
  
  // optional string media_playlist_path = 18;
  inline bool has_media_playlist_path() const;
  inline void clear_media_playlist_path();
  static const int kMediaPlaylistPathFieldNumber = 18;
  inline const ::std::string& media_playlist_path() const;
  inline void set_media_playlist_path(const ::std::string& value);
  inline void set_media_playlist_path(const char* value);
  inline void set_media_playlist_path(const char* value, size_t size);
  inline ::std::string* mutable_media_playlist_path();
  inline ::std::string* release_media_playlist_path();
  
  // optional .ccd.SyncFeatureSettings notes_sync_settings = 21;
  inline bool has_notes_sync_settings() const;
  inline void clear_notes_sync_settings();
  static const int kNotesSyncSettingsFieldNumber = 21;
  inline const ::ccd::SyncFeatureSettings& notes_sync_settings() const;
  inline ::ccd::SyncFeatureSettings* mutable_notes_sync_settings();
  inline ::ccd::SyncFeatureSettings* release_notes_sync_settings();
  
  // optional string notes_sync_path = 23;
  inline bool has_notes_sync_path() const;
  inline void clear_notes_sync_path();
  static const int kNotesSyncPathFieldNumber = 23;
  inline const ::std::string& notes_sync_path() const;
  inline void set_notes_sync_path(const ::std::string& value);
  inline void set_notes_sync_path(const char* value);
  inline void set_notes_sync_path(const char* value, size_t size);
  inline ::std::string* mutable_notes_sync_path();
  inline ::std::string* release_notes_sync_path();
  
  // optional string mm_thumb_download_path = 24;
  inline bool has_mm_thumb_download_path() const;
  inline void clear_mm_thumb_download_path();
  static const int kMmThumbDownloadPathFieldNumber = 24;
  inline const ::std::string& mm_thumb_download_path() const;
  inline void set_mm_thumb_download_path(const ::std::string& value);
  inline void set_mm_thumb_download_path(const char* value);
  inline void set_mm_thumb_download_path(const char* value, size_t size);
  inline ::std::string* mutable_mm_thumb_download_path();
  inline ::std::string* release_mm_thumb_download_path();
  
  // optional .ccd.MediaMetadataThumbMigrateStatus mm_thumb_download_migrate_status = 25;
  inline bool has_mm_thumb_download_migrate_status() const;
  inline void clear_mm_thumb_download_migrate_status();
  static const int kMmThumbDownloadMigrateStatusFieldNumber = 25;
  inline const ::ccd::MediaMetadataThumbMigrateStatus& mm_thumb_download_migrate_status() const;
  inline ::ccd::MediaMetadataThumbMigrateStatus* mutable_mm_thumb_download_migrate_status();
  inline ::ccd::MediaMetadataThumbMigrateStatus* release_mm_thumb_download_migrate_status();
  
  // optional bool mm_thumb_sync_enabled = 26;
  inline bool has_mm_thumb_sync_enabled() const;
  inline void clear_mm_thumb_sync_enabled();
  static const int kMmThumbSyncEnabledFieldNumber = 26;
  inline bool mm_thumb_sync_enabled() const;
  inline void set_mm_thumb_sync_enabled(bool value);
  
  // optional bool clouddoc_sync = 28;
  inline bool has_clouddoc_sync() const;
  inline void clear_clouddoc_sync();
  static const int kClouddocSyncFieldNumber = 28;
  inline bool clouddoc_sync() const;
  inline void set_clouddoc_sync(bool value);
  
  // repeated .ccd.SyncFeature_t mm_thumb_sync_enabled_types = 29;
  inline int mm_thumb_sync_enabled_types_size() const;
  inline void clear_mm_thumb_sync_enabled_types();
  static const int kMmThumbSyncEnabledTypesFieldNumber = 29;
  inline ccd::SyncFeature_t mm_thumb_sync_enabled_types(int index) const;
  inline void set_mm_thumb_sync_enabled_types(int index, ccd::SyncFeature_t value);
  inline void add_mm_thumb_sync_enabled_types(ccd::SyncFeature_t value);
  inline const ::google::protobuf::RepeatedField<int>& mm_thumb_sync_enabled_types() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_mm_thumb_sync_enabled_types();
  
  // optional .ccd.LookupAbsPathOutput lookup_abs_path = 30;
  inline bool has_lookup_abs_path() const;
  inline void clear_lookup_abs_path();
  static const int kLookupAbsPathFieldNumber = 30;
  inline const ::ccd::LookupAbsPathOutput& lookup_abs_path() const;
  inline ::ccd::LookupAbsPathOutput* mutable_lookup_abs_path();
  inline ::ccd::LookupAbsPathOutput* release_lookup_abs_path();
  
  // repeated .ccd.EventSyncHistory sync_history_events = 34;
  inline int sync_history_events_size() const;
  inline void clear_sync_history_events();
  static const int kSyncHistoryEventsFieldNumber = 34;
  inline const ::ccd::EventSyncHistory& sync_history_events(int index) const;
  inline ::ccd::EventSyncHistory* mutable_sync_history_events(int index);
  inline ::ccd::EventSyncHistory* add_sync_history_events();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::EventSyncHistory >&
      sync_history_events() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::EventSyncHistory >*
      mutable_sync_history_events();
  
  // repeated .ccd.SyncFeatureSettings syncbox_sync_settings = 33;
  inline int syncbox_sync_settings_size() const;
  inline void clear_syncbox_sync_settings();
  static const int kSyncboxSyncSettingsFieldNumber = 33;
  inline const ::ccd::SyncFeatureSettings& syncbox_sync_settings(int index) const;
  inline ::ccd::SyncFeatureSettings* mutable_syncbox_sync_settings(int index);
  inline ::ccd::SyncFeatureSettings* add_syncbox_sync_settings();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::SyncFeatureSettings >&
      syncbox_sync_settings() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::SyncFeatureSettings >*
      mutable_syncbox_sync_settings();
  
  // @@protoc_insertion_point(class_scope:ccd.GetSyncStateOutput)
 private:
  inline void set_has_is_device_linked();
  inline void clear_has_is_device_linked();
  inline void set_has_is_sync_agent_enabled();
  inline void clear_has_is_sync_agent_enabled();
  inline void set_has_my_device_name();
  inline void clear_has_my_device_name();
  inline void set_has_is_camera_roll_upload_enabled();
  inline void clear_has_is_camera_roll_upload_enabled();
  inline void set_has_is_camera_roll_global_delete_enabled();
  inline void clear_has_is_camera_roll_global_delete_enabled();
  inline void set_has_is_network_activity_enabled();
  inline void clear_has_is_network_activity_enabled();
  inline void set_has_max_download_rate_bytes_sec();
  inline void clear_has_max_download_rate_bytes_sec();
  inline void set_has_max_upload_rate_bytes_sec();
  inline void clear_has_max_upload_rate_bytes_sec();
  inline void set_has_background_data();
  inline void clear_has_background_data();
  inline void set_has_auto_sync();
  inline void clear_has_auto_sync();
  inline void set_has_mobile_network_data();
  inline void clear_has_mobile_network_data();
  inline void set_has_media_metadata_download_path();
  inline void clear_has_media_metadata_download_path();
  inline void set_has_media_metadata_upload_path();
  inline void clear_has_media_metadata_upload_path();
  inline void set_has_media_playlist_path();
  inline void clear_has_media_playlist_path();
  inline void set_has_notes_sync_settings();
  inline void clear_has_notes_sync_settings();
  inline void set_has_notes_sync_path();
  inline void clear_has_notes_sync_path();
  inline void set_has_mm_thumb_download_path();
  inline void clear_has_mm_thumb_download_path();
  inline void set_has_mm_thumb_download_migrate_status();
  inline void clear_has_mm_thumb_download_migrate_status();
  inline void set_has_mm_thumb_sync_enabled();
  inline void clear_has_mm_thumb_sync_enabled();
  inline void set_has_clouddoc_sync();
  inline void clear_has_clouddoc_sync();
  inline void set_has_lookup_abs_path();
  inline void clear_has_lookup_abs_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* my_device_name_;
  ::google::protobuf::uint64 max_download_rate_bytes_sec_;
  bool is_device_linked_;
  bool is_sync_agent_enabled_;
  bool is_camera_roll_upload_enabled_;
  bool is_camera_roll_global_delete_enabled_;
  bool is_network_activity_enabled_;
  bool background_data_;
  bool auto_sync_;
  bool mobile_network_data_;
  ::google::protobuf::uint64 max_upload_rate_bytes_sec_;
  ::google::protobuf::RepeatedPtrField< ::ccd::ObjectSyncState > sync_states_for_paths_;
  ::google::protobuf::RepeatedPtrField< ::ccd::DatasetSyncStateSummary > dataset_sync_state_summary_;
  ::google::protobuf::RepeatedPtrField< ::ccd::FeatureSyncStateSummary > feature_sync_state_summary_;
  ::google::protobuf::RepeatedPtrField< ::std::string> camera_roll_upload_dirs_;
  ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec > camera_roll_full_res_download_dirs_;
  ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec > camera_roll_low_res_download_dirs_;
  ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec > camera_roll_thumb_download_dirs_;
  ::std::string* media_metadata_download_path_;
  ::std::string* media_metadata_upload_path_;
  ::std::string* media_playlist_path_;
  ::ccd::SyncFeatureSettings* notes_sync_settings_;
  ::std::string* notes_sync_path_;
  ::std::string* mm_thumb_download_path_;
  ::ccd::MediaMetadataThumbMigrateStatus* mm_thumb_download_migrate_status_;
  ::google::protobuf::RepeatedField<int> mm_thumb_sync_enabled_types_;
  ::ccd::LookupAbsPathOutput* lookup_abs_path_;
  ::google::protobuf::RepeatedPtrField< ::ccd::EventSyncHistory > sync_history_events_;
  ::google::protobuf::RepeatedPtrField< ::ccd::SyncFeatureSettings > syncbox_sync_settings_;
  bool mm_thumb_sync_enabled_;
  bool clouddoc_sync_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetSyncStateOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetSyncStateNotificationsInput : public ::google::protobuf::Message {
 public:
  GetSyncStateNotificationsInput();
  virtual ~GetSyncStateNotificationsInput();
  
  GetSyncStateNotificationsInput(const GetSyncStateNotificationsInput& from);
  
  inline GetSyncStateNotificationsInput& operator=(const GetSyncStateNotificationsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSyncStateNotificationsInput& default_instance();
  
  void Swap(GetSyncStateNotificationsInput* other);
  
  // implements Message ----------------------------------------------
  
  GetSyncStateNotificationsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSyncStateNotificationsInput& from);
  void MergeFrom(const GetSyncStateNotificationsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 max_count = 1;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 1;
  inline ::google::protobuf::uint32 max_count() const;
  inline void set_max_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.GetSyncStateNotificationsInput)
 private:
  inline void set_has_max_count();
  inline void clear_has_max_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 max_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetSyncStateNotificationsInput* default_instance_;
};
// -------------------------------------------------------------------

class SyncEventSyncComplete : public ::google::protobuf::Message {
 public:
  SyncEventSyncComplete();
  virtual ~SyncEventSyncComplete();
  
  SyncEventSyncComplete(const SyncEventSyncComplete& from);
  
  inline SyncEventSyncComplete& operator=(const SyncEventSyncComplete& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncEventSyncComplete& default_instance();
  
  void Swap(SyncEventSyncComplete* other);
  
  // implements Message ----------------------------------------------
  
  SyncEventSyncComplete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncEventSyncComplete& from);
  void MergeFrom(const SyncEventSyncComplete& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 num_downloaded = 1;
  inline bool has_num_downloaded() const;
  inline void clear_num_downloaded();
  static const int kNumDownloadedFieldNumber = 1;
  inline ::google::protobuf::uint32 num_downloaded() const;
  inline void set_num_downloaded(::google::protobuf::uint32 value);
  
  // required uint32 num_uploaded = 2;
  inline bool has_num_uploaded() const;
  inline void clear_num_uploaded();
  static const int kNumUploadedFieldNumber = 2;
  inline ::google::protobuf::uint32 num_uploaded() const;
  inline void set_num_uploaded(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.SyncEventSyncComplete)
 private:
  inline void set_has_num_downloaded();
  inline void clear_has_num_downloaded();
  inline void set_has_num_uploaded();
  inline void clear_has_num_uploaded();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 num_downloaded_;
  ::google::protobuf::uint32 num_uploaded_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncEventSyncComplete* default_instance_;
};
// -------------------------------------------------------------------

class SyncEventFileAdded : public ::google::protobuf::Message {
 public:
  SyncEventFileAdded();
  virtual ~SyncEventFileAdded();
  
  SyncEventFileAdded(const SyncEventFileAdded& from);
  
  inline SyncEventFileAdded& operator=(const SyncEventFileAdded& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncEventFileAdded& default_instance();
  
  void Swap(SyncEventFileAdded* other);
  
  // implements Message ----------------------------------------------
  
  SyncEventFileAdded* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncEventFileAdded& from);
  void MergeFrom(const SyncEventFileAdded& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 dataset_id = 1;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required string full_path = 2;
  inline bool has_full_path() const;
  inline void clear_full_path();
  static const int kFullPathFieldNumber = 2;
  inline const ::std::string& full_path() const;
  inline void set_full_path(const ::std::string& value);
  inline void set_full_path(const char* value);
  inline void set_full_path(const char* value, size_t size);
  inline ::std::string* mutable_full_path();
  inline ::std::string* release_full_path();
  
  // @@protoc_insertion_point(class_scope:ccd.SyncEventFileAdded)
 private:
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_full_path();
  inline void clear_has_full_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  ::std::string* full_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncEventFileAdded* default_instance_;
};
// -------------------------------------------------------------------

class SyncEventFileRemoved : public ::google::protobuf::Message {
 public:
  SyncEventFileRemoved();
  virtual ~SyncEventFileRemoved();
  
  SyncEventFileRemoved(const SyncEventFileRemoved& from);
  
  inline SyncEventFileRemoved& operator=(const SyncEventFileRemoved& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncEventFileRemoved& default_instance();
  
  void Swap(SyncEventFileRemoved* other);
  
  // implements Message ----------------------------------------------
  
  SyncEventFileRemoved* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncEventFileRemoved& from);
  void MergeFrom(const SyncEventFileRemoved& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 dataset_id = 1;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required string full_path = 2;
  inline bool has_full_path() const;
  inline void clear_full_path();
  static const int kFullPathFieldNumber = 2;
  inline const ::std::string& full_path() const;
  inline void set_full_path(const ::std::string& value);
  inline void set_full_path(const char* value);
  inline void set_full_path(const char* value, size_t size);
  inline ::std::string* mutable_full_path();
  inline ::std::string* release_full_path();
  
  // @@protoc_insertion_point(class_scope:ccd.SyncEventFileRemoved)
 private:
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_full_path();
  inline void clear_has_full_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  ::std::string* full_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncEventFileRemoved* default_instance_;
};
// -------------------------------------------------------------------

class SyncEventError : public ::google::protobuf::Message {
 public:
  SyncEventError();
  virtual ~SyncEventError();
  
  SyncEventError(const SyncEventError& from);
  
  inline SyncEventError& operator=(const SyncEventError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncEventError& default_instance();
  
  void Swap(SyncEventError* other);
  
  // implements Message ----------------------------------------------
  
  SyncEventError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncEventError& from);
  void MergeFrom(const SyncEventError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.SyncEventErrorType_t error_type = 1;
  inline bool has_error_type() const;
  inline void clear_error_type();
  static const int kErrorTypeFieldNumber = 1;
  inline ccd::SyncEventErrorType_t error_type() const;
  inline void set_error_type(ccd::SyncEventErrorType_t value);
  
  // optional fixed64 dataset_id = 3;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 3;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // optional string path = 4;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 4;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:ccd.SyncEventError)
 private:
  inline void set_has_error_type();
  inline void clear_has_error_type();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 dataset_id_;
  int error_type_;
  ::google::protobuf::uint32 count_;
  ::std::string* path_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncEventError* default_instance_;
};
// -------------------------------------------------------------------

class SyncEventFileStatus : public ::google::protobuf::Message {
 public:
  SyncEventFileStatus();
  virtual ~SyncEventFileStatus();
  
  SyncEventFileStatus(const SyncEventFileStatus& from);
  
  inline SyncEventFileStatus& operator=(const SyncEventFileStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncEventFileStatus& default_instance();
  
  void Swap(SyncEventFileStatus* other);
  
  // implements Message ----------------------------------------------
  
  SyncEventFileStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncEventFileStatus& from);
  void MergeFrom(const SyncEventFileStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string full_path = 1;
  inline bool has_full_path() const;
  inline void clear_full_path();
  static const int kFullPathFieldNumber = 1;
  inline const ::std::string& full_path() const;
  inline void set_full_path(const ::std::string& value);
  inline void set_full_path(const char* value);
  inline void set_full_path(const char* value, size_t size);
  inline ::std::string* mutable_full_path();
  inline ::std::string* release_full_path();
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required .ccd.SyncFileChangeType_t change_type = 3;
  inline bool has_change_type() const;
  inline void clear_change_type();
  static const int kChangeTypeFieldNumber = 3;
  inline ccd::SyncFileChangeType_t change_type() const;
  inline void set_change_type(ccd::SyncFileChangeType_t value);
  
  // optional bool is_starting = 4 [default = false];
  inline bool has_is_starting() const;
  inline void clear_is_starting();
  static const int kIsStartingFieldNumber = 4;
  inline bool is_starting() const;
  inline void set_is_starting(bool value);
  
  // optional bool is_finished = 5 [default = false];
  inline bool has_is_finished() const;
  inline void clear_is_finished();
  static const int kIsFinishedFieldNumber = 5;
  inline bool is_finished() const;
  inline void set_is_finished(bool value);
  
  // optional .ccd.SyncEventErrorType_t error = 6;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 6;
  inline ccd::SyncEventErrorType_t error() const;
  inline void set_error(ccd::SyncEventErrorType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.SyncEventFileStatus)
 private:
  inline void set_has_full_path();
  inline void clear_has_full_path();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_change_type();
  inline void clear_has_change_type();
  inline void set_has_is_starting();
  inline void clear_has_is_starting();
  inline void set_has_is_finished();
  inline void clear_has_is_finished();
  inline void set_has_error();
  inline void clear_has_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* full_path_;
  ::google::protobuf::uint64 dataset_id_;
  int change_type_;
  bool is_starting_;
  bool is_finished_;
  int error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncEventFileStatus* default_instance_;
};
// -------------------------------------------------------------------

class SyncStateNotification : public ::google::protobuf::Message {
 public:
  SyncStateNotification();
  virtual ~SyncStateNotification();
  
  SyncStateNotification(const SyncStateNotification& from);
  
  inline SyncStateNotification& operator=(const SyncStateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncStateNotification& default_instance();
  
  void Swap(SyncStateNotification* other);
  
  // implements Message ----------------------------------------------
  
  SyncStateNotification* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncStateNotification& from);
  void MergeFrom(const SyncStateNotification& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ccd.SyncEventSyncComplete sync_complete = 2;
  inline bool has_sync_complete() const;
  inline void clear_sync_complete();
  static const int kSyncCompleteFieldNumber = 2;
  inline const ::ccd::SyncEventSyncComplete& sync_complete() const;
  inline ::ccd::SyncEventSyncComplete* mutable_sync_complete();
  inline ::ccd::SyncEventSyncComplete* release_sync_complete();
  
  // optional .ccd.SyncEventFileAdded file_added = 3;
  inline bool has_file_added() const;
  inline void clear_file_added();
  static const int kFileAddedFieldNumber = 3;
  inline const ::ccd::SyncEventFileAdded& file_added() const;
  inline ::ccd::SyncEventFileAdded* mutable_file_added();
  inline ::ccd::SyncEventFileAdded* release_file_added();
  
  // optional .ccd.SyncEventFileRemoved file_removed = 4;
  inline bool has_file_removed() const;
  inline void clear_file_removed();
  static const int kFileRemovedFieldNumber = 4;
  inline const ::ccd::SyncEventFileRemoved& file_removed() const;
  inline ::ccd::SyncEventFileRemoved* mutable_file_removed();
  inline ::ccd::SyncEventFileRemoved* release_file_removed();
  
  // optional .ccd.SyncEventError error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline const ::ccd::SyncEventError& error() const;
  inline ::ccd::SyncEventError* mutable_error();
  inline ::ccd::SyncEventError* release_error();
  
  // optional .ccd.SyncEventFileStatus file_status = 6;
  inline bool has_file_status() const;
  inline void clear_file_status();
  static const int kFileStatusFieldNumber = 6;
  inline const ::ccd::SyncEventFileStatus& file_status() const;
  inline ::ccd::SyncEventFileStatus* mutable_file_status();
  inline ::ccd::SyncEventFileStatus* release_file_status();
  
  // @@protoc_insertion_point(class_scope:ccd.SyncStateNotification)
 private:
  inline void set_has_sync_complete();
  inline void clear_has_sync_complete();
  inline void set_has_file_added();
  inline void clear_has_file_added();
  inline void set_has_file_removed();
  inline void clear_has_file_removed();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_file_status();
  inline void clear_has_file_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ccd::SyncEventSyncComplete* sync_complete_;
  ::ccd::SyncEventFileAdded* file_added_;
  ::ccd::SyncEventFileRemoved* file_removed_;
  ::ccd::SyncEventError* error_;
  ::ccd::SyncEventFileStatus* file_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncStateNotification* default_instance_;
};
// -------------------------------------------------------------------

class GetSyncStateNotificationsOutput : public ::google::protobuf::Message {
 public:
  GetSyncStateNotificationsOutput();
  virtual ~GetSyncStateNotificationsOutput();
  
  GetSyncStateNotificationsOutput(const GetSyncStateNotificationsOutput& from);
  
  inline GetSyncStateNotificationsOutput& operator=(const GetSyncStateNotificationsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSyncStateNotificationsOutput& default_instance();
  
  void Swap(GetSyncStateNotificationsOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetSyncStateNotificationsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSyncStateNotificationsOutput& from);
  void MergeFrom(const GetSyncStateNotificationsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.SyncStateNotification notifications = 1;
  inline int notifications_size() const;
  inline void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  inline const ::ccd::SyncStateNotification& notifications(int index) const;
  inline ::ccd::SyncStateNotification* mutable_notifications(int index);
  inline ::ccd::SyncStateNotification* add_notifications();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::SyncStateNotification >&
      notifications() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::SyncStateNotification >*
      mutable_notifications();
  
  // @@protoc_insertion_point(class_scope:ccd.GetSyncStateNotificationsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::SyncStateNotification > notifications_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetSyncStateNotificationsOutput* default_instance_;
};
// -------------------------------------------------------------------

class LinkDeviceInput : public ::google::protobuf::Message {
 public:
  LinkDeviceInput();
  virtual ~LinkDeviceInput();
  
  LinkDeviceInput(const LinkDeviceInput& from);
  
  inline LinkDeviceInput& operator=(const LinkDeviceInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkDeviceInput& default_instance();
  
  void Swap(LinkDeviceInput* other);
  
  // implements Message ----------------------------------------------
  
  LinkDeviceInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkDeviceInput& from);
  void MergeFrom(const LinkDeviceInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional string device_name = 2;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 2;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // optional bool is_acer_device = 3 [default = false];
  inline bool has_is_acer_device() const;
  inline void clear_is_acer_device();
  static const int kIsAcerDeviceFieldNumber = 3;
  inline bool is_acer_device() const;
  inline void set_is_acer_device(bool value);
  
  // optional bool device_has_camera = 4 [default = false];
  inline bool has_device_has_camera() const;
  inline void clear_device_has_camera();
  static const int kDeviceHasCameraFieldNumber = 4;
  inline bool device_has_camera() const;
  inline void set_device_has_camera(bool value);
  
  // optional string device_class = 5;
  inline bool has_device_class() const;
  inline void clear_device_class();
  static const int kDeviceClassFieldNumber = 5;
  inline const ::std::string& device_class() const;
  inline void set_device_class(const ::std::string& value);
  inline void set_device_class(const char* value);
  inline void set_device_class(const char* value, size_t size);
  inline ::std::string* mutable_device_class();
  inline ::std::string* release_device_class();
  
  // optional string os_version = 6;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 6;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  
  // @@protoc_insertion_point(class_scope:ccd.LinkDeviceInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_is_acer_device();
  inline void clear_has_is_acer_device();
  inline void set_has_device_has_camera();
  inline void clear_has_device_has_camera();
  inline void set_has_device_class();
  inline void clear_has_device_class();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* device_name_;
  ::std::string* device_class_;
  ::std::string* os_version_;
  bool is_acer_device_;
  bool device_has_camera_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LinkDeviceInput* default_instance_;
};
// -------------------------------------------------------------------

class ListLinkedDevicesInput : public ::google::protobuf::Message {
 public:
  ListLinkedDevicesInput();
  virtual ~ListLinkedDevicesInput();
  
  ListLinkedDevicesInput(const ListLinkedDevicesInput& from);
  
  inline ListLinkedDevicesInput& operator=(const ListLinkedDevicesInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLinkedDevicesInput& default_instance();
  
  void Swap(ListLinkedDevicesInput* other);
  
  // implements Message ----------------------------------------------
  
  ListLinkedDevicesInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListLinkedDevicesInput& from);
  void MergeFrom(const ListLinkedDevicesInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool only_use_cache = 2 [default = false];
  inline bool has_only_use_cache() const;
  inline void clear_only_use_cache();
  static const int kOnlyUseCacheFieldNumber = 2;
  inline bool only_use_cache() const;
  inline void set_only_use_cache(bool value);
  
  // optional bool storage_nodes_only = 3 [default = false];
  inline bool has_storage_nodes_only() const;
  inline void clear_storage_nodes_only();
  static const int kStorageNodesOnlyFieldNumber = 3;
  inline bool storage_nodes_only() const;
  inline void set_storage_nodes_only(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.ListLinkedDevicesInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_only_use_cache();
  inline void clear_has_only_use_cache();
  inline void set_has_storage_nodes_only();
  inline void clear_has_storage_nodes_only();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  bool only_use_cache_;
  bool storage_nodes_only_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListLinkedDevicesInput* default_instance_;
};
// -------------------------------------------------------------------

class LinkedDeviceInfo : public ::google::protobuf::Message {
 public:
  LinkedDeviceInfo();
  virtual ~LinkedDeviceInfo();
  
  LinkedDeviceInfo(const LinkedDeviceInfo& from);
  
  inline LinkedDeviceInfo& operator=(const LinkedDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinkedDeviceInfo& default_instance();
  
  void Swap(LinkedDeviceInfo* other);
  
  // implements Message ----------------------------------------------
  
  LinkedDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinkedDeviceInfo& from);
  void MergeFrom(const LinkedDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required string device_name = 2;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 2;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // required bool is_storage_node = 3;
  inline bool has_is_storage_node() const;
  inline void clear_is_storage_node();
  static const int kIsStorageNodeFieldNumber = 3;
  inline bool is_storage_node() const;
  inline void set_is_storage_node(bool value);
  
  // required .ccd.DeviceConnectionStatus connection_status = 4;
  inline bool has_connection_status() const;
  inline void clear_connection_status();
  static const int kConnectionStatusFieldNumber = 4;
  inline const ::ccd::DeviceConnectionStatus& connection_status() const;
  inline ::ccd::DeviceConnectionStatus* mutable_connection_status();
  inline ::ccd::DeviceConnectionStatus* release_connection_status();
  
  // required string device_class = 5;
  inline bool has_device_class() const;
  inline void clear_device_class();
  static const int kDeviceClassFieldNumber = 5;
  inline const ::std::string& device_class() const;
  inline void set_device_class(const ::std::string& value);
  inline void set_device_class(const char* value);
  inline void set_device_class(const char* value, size_t size);
  inline ::std::string* mutable_device_class();
  inline ::std::string* release_device_class();
  
  // required bool is_acer = 6;
  inline bool has_is_acer() const;
  inline void clear_is_acer();
  static const int kIsAcerFieldNumber = 6;
  inline bool is_acer() const;
  inline void set_is_acer(bool value);
  
  // required bool has_camera = 7;
  inline bool has_has_camera() const;
  inline void clear_has_camera();
  static const int kHasCameraFieldNumber = 7;
  inline bool has_camera() const;
  inline void set_has_camera(bool value);
  
  // optional string os_version = 8;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 8;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  
  // optional bool feature_media_server_capable = 9;
  inline bool has_feature_media_server_capable() const;
  inline void clear_feature_media_server_capable();
  static const int kFeatureMediaServerCapableFieldNumber = 9;
  inline bool feature_media_server_capable() const;
  inline void set_feature_media_server_capable(bool value);
  
  // optional bool feature_virt_drive_capable = 10;
  inline bool has_feature_virt_drive_capable() const;
  inline void clear_feature_virt_drive_capable();
  static const int kFeatureVirtDriveCapableFieldNumber = 10;
  inline bool feature_virt_drive_capable() const;
  inline void set_feature_virt_drive_capable(bool value);
  
  // optional string protocol_version = 11;
  inline bool has_protocol_version() const;
  inline void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 11;
  inline const ::std::string& protocol_version() const;
  inline void set_protocol_version(const ::std::string& value);
  inline void set_protocol_version(const char* value);
  inline void set_protocol_version(const char* value, size_t size);
  inline ::std::string* mutable_protocol_version();
  inline ::std::string* release_protocol_version();
  
  // optional bool feature_remote_file_access_capable = 12;
  inline bool has_feature_remote_file_access_capable() const;
  inline void clear_feature_remote_file_access_capable();
  static const int kFeatureRemoteFileAccessCapableFieldNumber = 12;
  inline bool feature_remote_file_access_capable() const;
  inline void set_feature_remote_file_access_capable(bool value);
  
  // optional bool feature_fsdatasettype_capable = 13;
  inline bool has_feature_fsdatasettype_capable() const;
  inline void clear_feature_fsdatasettype_capable();
  static const int kFeatureFsdatasettypeCapableFieldNumber = 13;
  inline bool feature_fsdatasettype_capable() const;
  inline void set_feature_fsdatasettype_capable(bool value);
  
  // optional string build_info = 14;
  inline bool has_build_info() const;
  inline void clear_build_info();
  static const int kBuildInfoFieldNumber = 14;
  inline const ::std::string& build_info() const;
  inline void set_build_info(const ::std::string& value);
  inline void set_build_info(const char* value);
  inline void set_build_info(const char* value, size_t size);
  inline ::std::string* mutable_build_info();
  inline ::std::string* release_build_info();
  
  // optional string model_number = 15;
  inline bool has_model_number() const;
  inline void clear_model_number();
  static const int kModelNumberFieldNumber = 15;
  inline const ::std::string& model_number() const;
  inline void set_model_number(const ::std::string& value);
  inline void set_model_number(const char* value);
  inline void set_model_number(const char* value, size_t size);
  inline ::std::string* mutable_model_number();
  inline ::std::string* release_model_number();
  
  // optional bool feature_my_storage_server_capable = 16;
  inline bool has_feature_my_storage_server_capable() const;
  inline void clear_feature_my_storage_server_capable();
  static const int kFeatureMyStorageServerCapableFieldNumber = 16;
  inline bool feature_my_storage_server_capable() const;
  inline void set_feature_my_storage_server_capable(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.LinkedDeviceInfo)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_is_storage_node();
  inline void clear_has_is_storage_node();
  inline void set_has_connection_status();
  inline void clear_has_connection_status();
  inline void set_has_device_class();
  inline void clear_has_device_class();
  inline void set_has_is_acer();
  inline void clear_has_is_acer();
  inline void set_has_has_camera();
  inline void clear_has_has_camera();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_feature_media_server_capable();
  inline void clear_has_feature_media_server_capable();
  inline void set_has_feature_virt_drive_capable();
  inline void clear_has_feature_virt_drive_capable();
  inline void set_has_protocol_version();
  inline void clear_has_protocol_version();
  inline void set_has_feature_remote_file_access_capable();
  inline void clear_has_feature_remote_file_access_capable();
  inline void set_has_feature_fsdatasettype_capable();
  inline void clear_has_feature_fsdatasettype_capable();
  inline void set_has_build_info();
  inline void clear_has_build_info();
  inline void set_has_model_number();
  inline void clear_has_model_number();
  inline void set_has_feature_my_storage_server_capable();
  inline void clear_has_feature_my_storage_server_capable();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::std::string* device_name_;
  ::ccd::DeviceConnectionStatus* connection_status_;
  ::std::string* device_class_;
  ::std::string* os_version_;
  bool is_storage_node_;
  bool is_acer_;
  bool has_camera_;
  bool feature_media_server_capable_;
  bool feature_virt_drive_capable_;
  bool feature_remote_file_access_capable_;
  bool feature_fsdatasettype_capable_;
  bool feature_my_storage_server_capable_;
  ::std::string* protocol_version_;
  ::std::string* build_info_;
  ::std::string* model_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static LinkedDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class ListLinkedDevicesOutput : public ::google::protobuf::Message {
 public:
  ListLinkedDevicesOutput();
  virtual ~ListLinkedDevicesOutput();
  
  ListLinkedDevicesOutput(const ListLinkedDevicesOutput& from);
  
  inline ListLinkedDevicesOutput& operator=(const ListLinkedDevicesOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListLinkedDevicesOutput& default_instance();
  
  void Swap(ListLinkedDevicesOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListLinkedDevicesOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListLinkedDevicesOutput& from);
  void MergeFrom(const ListLinkedDevicesOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .vplex.vsDirectory.DeviceInfo linked_devices = 1;
  inline int linked_devices_size() const;
  inline void clear_linked_devices();
  static const int kLinkedDevicesFieldNumber = 1;
  inline const ::vplex::vsDirectory::DeviceInfo& linked_devices(int index) const;
  inline ::vplex::vsDirectory::DeviceInfo* mutable_linked_devices(int index);
  inline ::vplex::vsDirectory::DeviceInfo* add_linked_devices();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DeviceInfo >&
      linked_devices() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DeviceInfo >*
      mutable_linked_devices();
  
  // repeated .ccd.LinkedDeviceInfo devices = 2;
  inline int devices_size() const;
  inline void clear_devices();
  static const int kDevicesFieldNumber = 2;
  inline const ::ccd::LinkedDeviceInfo& devices(int index) const;
  inline ::ccd::LinkedDeviceInfo* mutable_devices(int index);
  inline ::ccd::LinkedDeviceInfo* add_devices();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::LinkedDeviceInfo >&
      devices() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::LinkedDeviceInfo >*
      mutable_devices();
  
  // @@protoc_insertion_point(class_scope:ccd.ListLinkedDevicesOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DeviceInfo > linked_devices_;
  ::google::protobuf::RepeatedPtrField< ::ccd::LinkedDeviceInfo > devices_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListLinkedDevicesOutput* default_instance_;
};
// -------------------------------------------------------------------

class ListOwnedDatasetsInput : public ::google::protobuf::Message {
 public:
  ListOwnedDatasetsInput();
  virtual ~ListOwnedDatasetsInput();
  
  ListOwnedDatasetsInput(const ListOwnedDatasetsInput& from);
  
  inline ListOwnedDatasetsInput& operator=(const ListOwnedDatasetsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOwnedDatasetsInput& default_instance();
  
  void Swap(ListOwnedDatasetsInput* other);
  
  // implements Message ----------------------------------------------
  
  ListOwnedDatasetsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListOwnedDatasetsInput& from);
  void MergeFrom(const ListOwnedDatasetsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool show_all_device_classes = 2 [default = false];
  inline bool has_show_all_device_classes() const;
  inline void clear_show_all_device_classes();
  static const int kShowAllDeviceClassesFieldNumber = 2;
  inline bool show_all_device_classes() const;
  inline void set_show_all_device_classes(bool value);
  
  // optional bool only_use_cache = 3 [default = false];
  inline bool has_only_use_cache() const;
  inline void clear_only_use_cache();
  static const int kOnlyUseCacheFieldNumber = 3;
  inline bool only_use_cache() const;
  inline void set_only_use_cache(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.ListOwnedDatasetsInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_show_all_device_classes();
  inline void clear_has_show_all_device_classes();
  inline void set_has_only_use_cache();
  inline void clear_has_only_use_cache();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  bool show_all_device_classes_;
  bool only_use_cache_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListOwnedDatasetsInput* default_instance_;
};
// -------------------------------------------------------------------

class ListOwnedDatasetsOutput : public ::google::protobuf::Message {
 public:
  ListOwnedDatasetsOutput();
  virtual ~ListOwnedDatasetsOutput();
  
  ListOwnedDatasetsOutput(const ListOwnedDatasetsOutput& from);
  
  inline ListOwnedDatasetsOutput& operator=(const ListOwnedDatasetsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOwnedDatasetsOutput& default_instance();
  
  void Swap(ListOwnedDatasetsOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListOwnedDatasetsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListOwnedDatasetsOutput& from);
  void MergeFrom(const ListOwnedDatasetsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  inline int dataset_details_size() const;
  inline void clear_dataset_details();
  static const int kDatasetDetailsFieldNumber = 1;
  inline const ::vplex::vsDirectory::DatasetDetail& dataset_details(int index) const;
  inline ::vplex::vsDirectory::DatasetDetail* mutable_dataset_details(int index);
  inline ::vplex::vsDirectory::DatasetDetail* add_dataset_details();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DatasetDetail >&
      dataset_details() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DatasetDetail >*
      mutable_dataset_details();
  
  // repeated bool created_by_this_device = 2;
  inline int created_by_this_device_size() const;
  inline void clear_created_by_this_device();
  static const int kCreatedByThisDeviceFieldNumber = 2;
  inline bool created_by_this_device(int index) const;
  inline void set_created_by_this_device(int index, bool value);
  inline void add_created_by_this_device(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      created_by_this_device() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_created_by_this_device();
  
  // @@protoc_insertion_point(class_scope:ccd.ListOwnedDatasetsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DatasetDetail > dataset_details_;
  ::google::protobuf::RepeatedField< bool > created_by_this_device_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListOwnedDatasetsOutput* default_instance_;
};
// -------------------------------------------------------------------

class ListUserStorageInput : public ::google::protobuf::Message {
 public:
  ListUserStorageInput();
  virtual ~ListUserStorageInput();
  
  ListUserStorageInput(const ListUserStorageInput& from);
  
  inline ListUserStorageInput& operator=(const ListUserStorageInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUserStorageInput& default_instance();
  
  void Swap(ListUserStorageInput* other);
  
  // implements Message ----------------------------------------------
  
  ListUserStorageInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListUserStorageInput& from);
  void MergeFrom(const ListUserStorageInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool only_use_cache = 2 [default = false];
  inline bool has_only_use_cache() const;
  inline void clear_only_use_cache();
  static const int kOnlyUseCacheFieldNumber = 2;
  inline bool only_use_cache() const;
  inline void set_only_use_cache(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.ListUserStorageInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_only_use_cache();
  inline void clear_has_only_use_cache();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  bool only_use_cache_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListUserStorageInput* default_instance_;
};
// -------------------------------------------------------------------

class ListUserStorageOutput : public ::google::protobuf::Message {
 public:
  ListUserStorageOutput();
  virtual ~ListUserStorageOutput();
  
  ListUserStorageOutput(const ListUserStorageOutput& from);
  
  inline ListUserStorageOutput& operator=(const ListUserStorageOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListUserStorageOutput& default_instance();
  
  void Swap(ListUserStorageOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListUserStorageOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListUserStorageOutput& from);
  void MergeFrom(const ListUserStorageOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .vplex.vsDirectory.UserStorage user_storage = 1;
  inline int user_storage_size() const;
  inline void clear_user_storage();
  static const int kUserStorageFieldNumber = 1;
  inline const ::vplex::vsDirectory::UserStorage& user_storage(int index) const;
  inline ::vplex::vsDirectory::UserStorage* mutable_user_storage(int index);
  inline ::vplex::vsDirectory::UserStorage* add_user_storage();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::UserStorage >&
      user_storage() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::UserStorage >*
      mutable_user_storage();
  
  // @@protoc_insertion_point(class_scope:ccd.ListUserStorageOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::UserStorage > user_storage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListUserStorageOutput* default_instance_;
};
// -------------------------------------------------------------------

class ListSyncSubscriptionsInput : public ::google::protobuf::Message {
 public:
  ListSyncSubscriptionsInput();
  virtual ~ListSyncSubscriptionsInput();
  
  ListSyncSubscriptionsInput(const ListSyncSubscriptionsInput& from);
  
  inline ListSyncSubscriptionsInput& operator=(const ListSyncSubscriptionsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSyncSubscriptionsInput& default_instance();
  
  void Swap(ListSyncSubscriptionsInput* other);
  
  // implements Message ----------------------------------------------
  
  ListSyncSubscriptionsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListSyncSubscriptionsInput& from);
  void MergeFrom(const ListSyncSubscriptionsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional fixed64 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional bool only_use_cache = 3 [default = false];
  inline bool has_only_use_cache() const;
  inline void clear_only_use_cache();
  static const int kOnlyUseCacheFieldNumber = 3;
  inline bool only_use_cache() const;
  inline void set_only_use_cache(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.ListSyncSubscriptionsInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_only_use_cache();
  inline void clear_has_only_use_cache();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_id_;
  bool only_use_cache_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListSyncSubscriptionsInput* default_instance_;
};
// -------------------------------------------------------------------

class SyncSubscriptionDetail : public ::google::protobuf::Message {
 public:
  SyncSubscriptionDetail();
  virtual ~SyncSubscriptionDetail();
  
  SyncSubscriptionDetail(const SyncSubscriptionDetail& from);
  
  inline SyncSubscriptionDetail& operator=(const SyncSubscriptionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncSubscriptionDetail& default_instance();
  
  void Swap(SyncSubscriptionDetail* other);
  
  // implements Message ----------------------------------------------
  
  SyncSubscriptionDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncSubscriptionDetail& from);
  void MergeFrom(const SyncSubscriptionDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vplex.vsDirectory.DatasetDetail dataset_details = 1;
  inline bool has_dataset_details() const;
  inline void clear_dataset_details();
  static const int kDatasetDetailsFieldNumber = 1;
  inline const ::vplex::vsDirectory::DatasetDetail& dataset_details() const;
  inline ::vplex::vsDirectory::DatasetDetail* mutable_dataset_details();
  inline ::vplex::vsDirectory::DatasetDetail* release_dataset_details();
  
  // optional string absolute_device_root = 2;
  inline bool has_absolute_device_root() const;
  inline void clear_absolute_device_root();
  static const int kAbsoluteDeviceRootFieldNumber = 2;
  inline const ::std::string& absolute_device_root() const;
  inline void set_absolute_device_root(const ::std::string& value);
  inline void set_absolute_device_root(const char* value);
  inline void set_absolute_device_root(const char* value, size_t size);
  inline ::std::string* mutable_absolute_device_root();
  inline ::std::string* release_absolute_device_root();
  
  // required string raw_device_root = 3;
  inline bool has_raw_device_root() const;
  inline void clear_raw_device_root();
  static const int kRawDeviceRootFieldNumber = 3;
  inline const ::std::string& raw_device_root() const;
  inline void set_raw_device_root(const ::std::string& value);
  inline void set_raw_device_root(const char* value);
  inline void set_raw_device_root(const char* value, size_t size);
  inline ::std::string* mutable_raw_device_root();
  inline ::std::string* release_raw_device_root();
  
  // optional string filter = 4;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 4;
  inline const ::std::string& filter() const;
  inline void set_filter(const ::std::string& value);
  inline void set_filter(const char* value);
  inline void set_filter(const char* value, size_t size);
  inline ::std::string* mutable_filter();
  inline ::std::string* release_filter();
  
  // required bool upload_ok = 5;
  inline bool has_upload_ok() const;
  inline void clear_upload_ok();
  static const int kUploadOkFieldNumber = 5;
  inline bool upload_ok() const;
  inline void set_upload_ok(bool value);
  
  // required bool download_ok = 6;
  inline bool has_download_ok() const;
  inline void clear_download_ok();
  static const int kDownloadOkFieldNumber = 6;
  inline bool download_ok() const;
  inline void set_download_ok(bool value);
  
  // required bool upload_delete_ok = 7;
  inline bool has_upload_delete_ok() const;
  inline void clear_upload_delete_ok();
  static const int kUploadDeleteOkFieldNumber = 7;
  inline bool upload_delete_ok() const;
  inline void set_upload_delete_ok(bool value);
  
  // required bool download_delete_ok = 8;
  inline bool has_download_delete_ok() const;
  inline void clear_download_delete_ok();
  static const int kDownloadDeleteOkFieldNumber = 8;
  inline bool download_delete_ok() const;
  inline void set_download_delete_ok(bool value);
  
  // required string dataset_root = 9;
  inline bool has_dataset_root() const;
  inline void clear_dataset_root();
  static const int kDatasetRootFieldNumber = 9;
  inline const ::std::string& dataset_root() const;
  inline void set_dataset_root(const ::std::string& value);
  inline void set_dataset_root(const char* value);
  inline void set_dataset_root(const char* value, size_t size);
  inline ::std::string* mutable_dataset_root();
  inline ::std::string* release_dataset_root();
  
  // required string dataset_location = 10;
  inline bool has_dataset_location() const;
  inline void clear_dataset_location();
  static const int kDatasetLocationFieldNumber = 10;
  inline const ::std::string& dataset_location() const;
  inline void set_dataset_location(const ::std::string& value);
  inline void set_dataset_location(const char* value);
  inline void set_dataset_location(const char* value, size_t size);
  inline ::std::string* mutable_dataset_location();
  inline ::std::string* release_dataset_location();
  
  // optional fixed64 max_size = 11;
  inline bool has_max_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 11;
  inline ::google::protobuf::uint64 max_size() const;
  inline void set_max_size(::google::protobuf::uint64 value);
  
  // optional fixed64 max_files = 12;
  inline bool has_max_files() const;
  inline void clear_max_files();
  static const int kMaxFilesFieldNumber = 12;
  inline ::google::protobuf::uint64 max_files() const;
  inline void set_max_files(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.SyncSubscriptionDetail)
 private:
  inline void set_has_dataset_details();
  inline void clear_has_dataset_details();
  inline void set_has_absolute_device_root();
  inline void clear_has_absolute_device_root();
  inline void set_has_raw_device_root();
  inline void clear_has_raw_device_root();
  inline void set_has_filter();
  inline void clear_has_filter();
  inline void set_has_upload_ok();
  inline void clear_has_upload_ok();
  inline void set_has_download_ok();
  inline void clear_has_download_ok();
  inline void set_has_upload_delete_ok();
  inline void clear_has_upload_delete_ok();
  inline void set_has_download_delete_ok();
  inline void clear_has_download_delete_ok();
  inline void set_has_dataset_root();
  inline void clear_has_dataset_root();
  inline void set_has_dataset_location();
  inline void clear_has_dataset_location();
  inline void set_has_max_size();
  inline void clear_has_max_size();
  inline void set_has_max_files();
  inline void clear_has_max_files();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vplex::vsDirectory::DatasetDetail* dataset_details_;
  ::std::string* absolute_device_root_;
  ::std::string* raw_device_root_;
  ::std::string* filter_;
  ::std::string* dataset_root_;
  ::std::string* dataset_location_;
  ::google::protobuf::uint64 max_size_;
  ::google::protobuf::uint64 max_files_;
  bool upload_ok_;
  bool download_ok_;
  bool upload_delete_ok_;
  bool download_delete_ok_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncSubscriptionDetail* default_instance_;
};
// -------------------------------------------------------------------

class ListSyncSubscriptionsOutput : public ::google::protobuf::Message {
 public:
  ListSyncSubscriptionsOutput();
  virtual ~ListSyncSubscriptionsOutput();
  
  ListSyncSubscriptionsOutput(const ListSyncSubscriptionsOutput& from);
  
  inline ListSyncSubscriptionsOutput& operator=(const ListSyncSubscriptionsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSyncSubscriptionsOutput& default_instance();
  
  void Swap(ListSyncSubscriptionsOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListSyncSubscriptionsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListSyncSubscriptionsOutput& from);
  void MergeFrom(const ListSyncSubscriptionsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .vplex.vsDirectory.Subscription subscriptions = 1;
  inline int subscriptions_size() const;
  inline void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  inline const ::vplex::vsDirectory::Subscription& subscriptions(int index) const;
  inline ::vplex::vsDirectory::Subscription* mutable_subscriptions(int index);
  inline ::vplex::vsDirectory::Subscription* add_subscriptions();
  inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::Subscription >&
      subscriptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::Subscription >*
      mutable_subscriptions();
  
  // repeated .ccd.SyncSubscriptionDetail subs = 2;
  inline int subs_size() const;
  inline void clear_subs();
  static const int kSubsFieldNumber = 2;
  inline const ::ccd::SyncSubscriptionDetail& subs(int index) const;
  inline ::ccd::SyncSubscriptionDetail* mutable_subs(int index);
  inline ::ccd::SyncSubscriptionDetail* add_subs();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::SyncSubscriptionDetail >&
      subs() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::SyncSubscriptionDetail >*
      mutable_subs();
  
  // @@protoc_insertion_point(class_scope:ccd.ListSyncSubscriptionsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::Subscription > subscriptions_;
  ::google::protobuf::RepeatedPtrField< ::ccd::SyncSubscriptionDetail > subs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListSyncSubscriptionsOutput* default_instance_;
};
// -------------------------------------------------------------------

class RemoteWakeupInput : public ::google::protobuf::Message {
 public:
  RemoteWakeupInput();
  virtual ~RemoteWakeupInput();
  
  RemoteWakeupInput(const RemoteWakeupInput& from);
  
  inline RemoteWakeupInput& operator=(const RemoteWakeupInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteWakeupInput& default_instance();
  
  void Swap(RemoteWakeupInput* other);
  
  // implements Message ----------------------------------------------
  
  RemoteWakeupInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteWakeupInput& from);
  void MergeFrom(const RemoteWakeupInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 device_to_wake = 2;
  inline bool has_device_to_wake() const;
  inline void clear_device_to_wake();
  static const int kDeviceToWakeFieldNumber = 2;
  inline ::google::protobuf::uint64 device_to_wake() const;
  inline void set_device_to_wake(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.RemoteWakeupInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_to_wake();
  inline void clear_has_device_to_wake();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_to_wake_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RemoteWakeupInput* default_instance_;
};
// -------------------------------------------------------------------

class RemoteSwUpdateMessageInput : public ::google::protobuf::Message {
 public:
  RemoteSwUpdateMessageInput();
  virtual ~RemoteSwUpdateMessageInput();
  
  RemoteSwUpdateMessageInput(const RemoteSwUpdateMessageInput& from);
  
  inline RemoteSwUpdateMessageInput& operator=(const RemoteSwUpdateMessageInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteSwUpdateMessageInput& default_instance();
  
  void Swap(RemoteSwUpdateMessageInput* other);
  
  // implements Message ----------------------------------------------
  
  RemoteSwUpdateMessageInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteSwUpdateMessageInput& from);
  void MergeFrom(const RemoteSwUpdateMessageInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 target_device_id = 2;
  inline bool has_target_device_id() const;
  inline void clear_target_device_id();
  static const int kTargetDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_device_id() const;
  inline void set_target_device_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.RemoteSwUpdateMessageInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_target_device_id();
  inline void clear_has_target_device_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 target_device_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RemoteSwUpdateMessageInput* default_instance_;
};
// -------------------------------------------------------------------

class RenameDatasetInput : public ::google::protobuf::Message {
 public:
  RenameDatasetInput();
  virtual ~RenameDatasetInput();
  
  RenameDatasetInput(const RenameDatasetInput& from);
  
  inline RenameDatasetInput& operator=(const RenameDatasetInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameDatasetInput& default_instance();
  
  void Swap(RenameDatasetInput* other);
  
  // implements Message ----------------------------------------------
  
  RenameDatasetInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameDatasetInput& from);
  void MergeFrom(const RenameDatasetInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // required string dataset_name = 3;
  inline bool has_dataset_name() const;
  inline void clear_dataset_name();
  static const int kDatasetNameFieldNumber = 3;
  inline const ::std::string& dataset_name() const;
  inline void set_dataset_name(const ::std::string& value);
  inline void set_dataset_name(const char* value);
  inline void set_dataset_name(const char* value, size_t size);
  inline ::std::string* mutable_dataset_name();
  inline ::std::string* release_dataset_name();
  
  // @@protoc_insertion_point(class_scope:ccd.RenameDatasetInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_dataset_name();
  inline void clear_has_dataset_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 dataset_id_;
  ::std::string* dataset_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RenameDatasetInput* default_instance_;
};
// -------------------------------------------------------------------

class PrivateMsaDataCommitInput : public ::google::protobuf::Message {
 public:
  PrivateMsaDataCommitInput();
  virtual ~PrivateMsaDataCommitInput();
  
  PrivateMsaDataCommitInput(const PrivateMsaDataCommitInput& from);
  
  inline PrivateMsaDataCommitInput& operator=(const PrivateMsaDataCommitInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrivateMsaDataCommitInput& default_instance();
  
  void Swap(PrivateMsaDataCommitInput* other);
  
  // implements Message ----------------------------------------------
  
  PrivateMsaDataCommitInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrivateMsaDataCommitInput& from);
  void MergeFrom(const PrivateMsaDataCommitInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional bool commit_start = 3;
  inline bool has_commit_start() const;
  inline void clear_commit_start();
  static const int kCommitStartFieldNumber = 3;
  inline bool commit_start() const;
  inline void set_commit_start(bool value);
  
  // optional bool commit_end = 4;
  inline bool has_commit_end() const;
  inline void clear_commit_end();
  static const int kCommitEndFieldNumber = 4;
  inline bool commit_end() const;
  inline void set_commit_end(bool value);
  
  // optional bool initialize = 5;
  inline bool has_initialize() const;
  inline void clear_initialize();
  static const int kInitializeFieldNumber = 5;
  inline bool initialize() const;
  inline void set_initialize(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.PrivateMsaDataCommitInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_commit_start();
  inline void clear_has_commit_start();
  inline void set_has_commit_end();
  inline void clear_has_commit_end();
  inline void set_has_initialize();
  inline void clear_has_initialize();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  bool commit_start_;
  bool commit_end_;
  bool initialize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PrivateMsaDataCommitInput* default_instance_;
};
// -------------------------------------------------------------------

class SyncOnceInput : public ::google::protobuf::Message {
 public:
  SyncOnceInput();
  virtual ~SyncOnceInput();
  
  SyncOnceInput(const SyncOnceInput& from);
  
  inline SyncOnceInput& operator=(const SyncOnceInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncOnceInput& default_instance();
  
  void Swap(SyncOnceInput* other);
  
  // implements Message ----------------------------------------------
  
  SyncOnceInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncOnceInput& from);
  void MergeFrom(const SyncOnceInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  
  // optional fixed64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.SyncOnceInput)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* app_id_;
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncOnceInput* default_instance_;
};
// -------------------------------------------------------------------

class SyncOnceOutput : public ::google::protobuf::Message {
 public:
  SyncOnceOutput();
  virtual ~SyncOnceOutput();
  
  SyncOnceOutput(const SyncOnceOutput& from);
  
  inline SyncOnceOutput& operator=(const SyncOnceOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncOnceOutput& default_instance();
  
  void Swap(SyncOnceOutput* other);
  
  // implements Message ----------------------------------------------
  
  SyncOnceOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncOnceOutput& from);
  void MergeFrom(const SyncOnceOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:ccd.SyncOnceOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncOnceOutput* default_instance_;
};
// -------------------------------------------------------------------

class UnlinkDeviceInput : public ::google::protobuf::Message {
 public:
  UnlinkDeviceInput();
  virtual ~UnlinkDeviceInput();
  
  UnlinkDeviceInput(const UnlinkDeviceInput& from);
  
  inline UnlinkDeviceInput& operator=(const UnlinkDeviceInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlinkDeviceInput& default_instance();
  
  void Swap(UnlinkDeviceInput* other);
  
  // implements Message ----------------------------------------------
  
  UnlinkDeviceInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlinkDeviceInput& from);
  void MergeFrom(const UnlinkDeviceInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional fixed64 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UnlinkDeviceInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UnlinkDeviceInput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAppStateInput : public ::google::protobuf::Message {
 public:
  UpdateAppStateInput();
  virtual ~UpdateAppStateInput();
  
  UpdateAppStateInput(const UpdateAppStateInput& from);
  
  inline UpdateAppStateInput& operator=(const UpdateAppStateInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAppStateInput& default_instance();
  
  void Swap(UpdateAppStateInput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateAppStateInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAppStateInput& from);
  void MergeFrom(const UpdateAppStateInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string app_id = 1;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  inline const ::std::string& app_id() const;
  inline void set_app_id(const ::std::string& value);
  inline void set_app_id(const char* value);
  inline void set_app_id(const char* value, size_t size);
  inline ::std::string* mutable_app_id();
  inline ::std::string* release_app_id();
  
  // optional .ccd.CcdApp_t app_type = 6 [default = CCD_APP_DEFAULT];
  inline bool has_app_type() const;
  inline void clear_app_type();
  static const int kAppTypeFieldNumber = 6;
  inline ccd::CcdApp_t app_type() const;
  inline void set_app_type(ccd::CcdApp_t value);
  
  // optional bool foreground_mode = 5;
  inline bool has_foreground_mode() const;
  inline void clear_foreground_mode();
  static const int kForegroundModeFieldNumber = 5;
  inline bool foreground_mode() const;
  inline void set_foreground_mode(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateAppStateInput)
 private:
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_app_type();
  inline void clear_has_app_type();
  inline void set_has_foreground_mode();
  inline void clear_has_foreground_mode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* app_id_;
  int app_type_;
  bool foreground_mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateAppStateInput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateAppStateOutput : public ::google::protobuf::Message {
 public:
  UpdateAppStateOutput();
  virtual ~UpdateAppStateOutput();
  
  UpdateAppStateOutput(const UpdateAppStateOutput& from);
  
  inline UpdateAppStateOutput& operator=(const UpdateAppStateOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateAppStateOutput& default_instance();
  
  void Swap(UpdateAppStateOutput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateAppStateOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateAppStateOutput& from);
  void MergeFrom(const UpdateAppStateOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 foreground_mode_err = 5;
  inline bool has_foreground_mode_err() const;
  inline void clear_foreground_mode_err();
  static const int kForegroundModeErrFieldNumber = 5;
  inline ::google::protobuf::int32 foreground_mode_err() const;
  inline void set_foreground_mode_err(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateAppStateOutput)
 private:
  inline void set_has_foreground_mode_err();
  inline void clear_has_foreground_mode_err();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 foreground_mode_err_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateAppStateOutput* default_instance_;
};
// -------------------------------------------------------------------

class CameraRollDownloadDirSpec : public ::google::protobuf::Message {
 public:
  CameraRollDownloadDirSpec();
  virtual ~CameraRollDownloadDirSpec();
  
  CameraRollDownloadDirSpec(const CameraRollDownloadDirSpec& from);
  
  inline CameraRollDownloadDirSpec& operator=(const CameraRollDownloadDirSpec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraRollDownloadDirSpec& default_instance();
  
  void Swap(CameraRollDownloadDirSpec* other);
  
  // implements Message ----------------------------------------------
  
  CameraRollDownloadDirSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraRollDownloadDirSpec& from);
  void MergeFrom(const CameraRollDownloadDirSpec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string dir = 1;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 1;
  inline const ::std::string& dir() const;
  inline void set_dir(const ::std::string& value);
  inline void set_dir(const char* value);
  inline void set_dir(const char* value, size_t size);
  inline ::std::string* mutable_dir();
  inline ::std::string* release_dir();
  
  // optional uint32 max_size = 7 [default = 0];
  inline bool has_max_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 max_size() const;
  inline void set_max_size(::google::protobuf::uint32 value);
  
  // optional uint32 max_files = 8 [default = 0];
  inline bool has_max_files() const;
  inline void clear_max_files();
  static const int kMaxFilesFieldNumber = 8;
  inline ::google::protobuf::uint32 max_files() const;
  inline void set_max_files(::google::protobuf::uint32 value);
  
  // optional uint32 preserve_free_disk_percentage = 9 [default = 0];
  inline bool has_preserve_free_disk_percentage() const;
  inline void clear_preserve_free_disk_percentage();
  static const int kPreserveFreeDiskPercentageFieldNumber = 9;
  inline ::google::protobuf::uint32 preserve_free_disk_percentage() const;
  inline void set_preserve_free_disk_percentage(::google::protobuf::uint32 value);
  
  // optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
  inline bool has_preserve_free_disk_size_bytes() const;
  inline void clear_preserve_free_disk_size_bytes();
  static const int kPreserveFreeDiskSizeBytesFieldNumber = 10;
  inline ::google::protobuf::uint64 preserve_free_disk_size_bytes() const;
  inline void set_preserve_free_disk_size_bytes(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.CameraRollDownloadDirSpec)
 private:
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_max_size();
  inline void clear_has_max_size();
  inline void set_has_max_files();
  inline void clear_has_max_files();
  inline void set_has_preserve_free_disk_percentage();
  inline void clear_has_preserve_free_disk_percentage();
  inline void set_has_preserve_free_disk_size_bytes();
  inline void clear_has_preserve_free_disk_size_bytes();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* dir_;
  ::google::protobuf::uint32 max_size_;
  ::google::protobuf::uint32 max_files_;
  ::google::protobuf::uint64 preserve_free_disk_size_bytes_;
  ::google::protobuf::uint32 preserve_free_disk_percentage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CameraRollDownloadDirSpec* default_instance_;
};
// -------------------------------------------------------------------

class MediaMetadataThumbMigrate : public ::google::protobuf::Message {
 public:
  MediaMetadataThumbMigrate();
  virtual ~MediaMetadataThumbMigrate();
  
  MediaMetadataThumbMigrate(const MediaMetadataThumbMigrate& from);
  
  inline MediaMetadataThumbMigrate& operator=(const MediaMetadataThumbMigrate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaMetadataThumbMigrate& default_instance();
  
  void Swap(MediaMetadataThumbMigrate* other);
  
  // implements Message ----------------------------------------------
  
  MediaMetadataThumbMigrate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaMetadataThumbMigrate& from);
  void MergeFrom(const MediaMetadataThumbMigrate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string mm_dest_dir = 1;
  inline bool has_mm_dest_dir() const;
  inline void clear_mm_dest_dir();
  static const int kMmDestDirFieldNumber = 1;
  inline const ::std::string& mm_dest_dir() const;
  inline void set_mm_dest_dir(const ::std::string& value);
  inline void set_mm_dest_dir(const char* value);
  inline void set_mm_dest_dir(const char* value, size_t size);
  inline ::std::string* mutable_mm_dest_dir();
  inline ::std::string* release_mm_dest_dir();
  
  // @@protoc_insertion_point(class_scope:ccd.MediaMetadataThumbMigrate)
 private:
  inline void set_has_mm_dest_dir();
  inline void clear_has_mm_dest_dir();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* mm_dest_dir_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static MediaMetadataThumbMigrate* default_instance_;
};
// -------------------------------------------------------------------

class SyncFeatureSettingsRequest : public ::google::protobuf::Message {
 public:
  SyncFeatureSettingsRequest();
  virtual ~SyncFeatureSettingsRequest();
  
  SyncFeatureSettingsRequest(const SyncFeatureSettingsRequest& from);
  
  inline SyncFeatureSettingsRequest& operator=(const SyncFeatureSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncFeatureSettingsRequest& default_instance();
  
  void Swap(SyncFeatureSettingsRequest* other);
  
  // implements Message ----------------------------------------------
  
  SyncFeatureSettingsRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncFeatureSettingsRequest& from);
  void MergeFrom(const SyncFeatureSettingsRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool enable_sync_feature = 1;
  inline bool has_enable_sync_feature() const;
  inline void clear_enable_sync_feature();
  static const int kEnableSyncFeatureFieldNumber = 1;
  inline bool enable_sync_feature() const;
  inline void set_enable_sync_feature(bool value);
  
  // optional string set_sync_feature_path = 2;
  inline bool has_set_sync_feature_path() const;
  inline void clear_set_sync_feature_path();
  static const int kSetSyncFeaturePathFieldNumber = 2;
  inline const ::std::string& set_sync_feature_path() const;
  inline void set_set_sync_feature_path(const ::std::string& value);
  inline void set_set_sync_feature_path(const char* value);
  inline void set_set_sync_feature_path(const char* value, size_t size);
  inline ::std::string* mutable_set_sync_feature_path();
  inline ::std::string* release_set_sync_feature_path();
  
  // optional bool is_archive_storage = 3 [default = false];
  inline bool has_is_archive_storage() const;
  inline void clear_is_archive_storage();
  static const int kIsArchiveStorageFieldNumber = 3;
  inline bool is_archive_storage() const;
  inline void set_is_archive_storage(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.SyncFeatureSettingsRequest)
 private:
  inline void set_has_enable_sync_feature();
  inline void clear_has_enable_sync_feature();
  inline void set_has_set_sync_feature_path();
  inline void clear_has_set_sync_feature_path();
  inline void set_has_is_archive_storage();
  inline void clear_has_is_archive_storage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* set_sync_feature_path_;
  bool enable_sync_feature_;
  bool is_archive_storage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SyncFeatureSettingsRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSyncSettingsInput : public ::google::protobuf::Message {
 public:
  UpdateSyncSettingsInput();
  virtual ~UpdateSyncSettingsInput();
  
  UpdateSyncSettingsInput(const UpdateSyncSettingsInput& from);
  
  inline UpdateSyncSettingsInput& operator=(const UpdateSyncSettingsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSyncSettingsInput& default_instance();
  
  void Swap(UpdateSyncSettingsInput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateSyncSettingsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSyncSettingsInput& from);
  void MergeFrom(const UpdateSyncSettingsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional string set_my_device_name = 2;
  inline bool has_set_my_device_name() const;
  inline void clear_set_my_device_name();
  static const int kSetMyDeviceNameFieldNumber = 2;
  inline const ::std::string& set_my_device_name() const;
  inline void set_set_my_device_name(const ::std::string& value);
  inline void set_set_my_device_name(const char* value);
  inline void set_set_my_device_name(const char* value, size_t size);
  inline ::std::string* mutable_set_my_device_name();
  inline ::std::string* release_set_my_device_name();
  
  // optional bool enable_camera_roll = 7;
  inline bool has_enable_camera_roll() const;
  inline void clear_enable_camera_roll();
  static const int kEnableCameraRollFieldNumber = 7;
  inline bool enable_camera_roll() const;
  inline void set_enable_camera_roll(bool value);
  
  // optional bool enable_network_activity = 8;
  inline bool has_enable_network_activity() const;
  inline void clear_enable_network_activity();
  static const int kEnableNetworkActivityFieldNumber = 8;
  inline bool enable_network_activity() const;
  inline void set_enable_network_activity(bool value);
  
  // optional uint64 set_max_download_rate_bytes_sec = 5;
  inline bool has_set_max_download_rate_bytes_sec() const;
  inline void clear_set_max_download_rate_bytes_sec();
  static const int kSetMaxDownloadRateBytesSecFieldNumber = 5;
  inline ::google::protobuf::uint64 set_max_download_rate_bytes_sec() const;
  inline void set_set_max_download_rate_bytes_sec(::google::protobuf::uint64 value);
  
  // optional uint64 set_max_upload_rate_bytes_sec = 6;
  inline bool has_set_max_upload_rate_bytes_sec() const;
  inline void clear_set_max_upload_rate_bytes_sec();
  static const int kSetMaxUploadRateBytesSecFieldNumber = 6;
  inline ::google::protobuf::uint64 set_max_upload_rate_bytes_sec() const;
  inline void set_set_max_upload_rate_bytes_sec(::google::protobuf::uint64 value);
  
  // optional bool background_data = 10;
  inline bool has_background_data() const;
  inline void clear_background_data();
  static const int kBackgroundDataFieldNumber = 10;
  inline bool background_data() const;
  inline void set_background_data(bool value);
  
  // optional bool auto_sync = 11;
  inline bool has_auto_sync() const;
  inline void clear_auto_sync();
  static const int kAutoSyncFieldNumber = 11;
  inline bool auto_sync() const;
  inline void set_auto_sync(bool value);
  
  // optional bool mobile_network_data = 12;
  inline bool has_mobile_network_data() const;
  inline void clear_mobile_network_data();
  static const int kMobileNetworkDataFieldNumber = 12;
  inline bool mobile_network_data() const;
  inline void set_mobile_network_data(bool value);
  
  // repeated string add_camera_roll_upload_dirs = 13;
  inline int add_camera_roll_upload_dirs_size() const;
  inline void clear_add_camera_roll_upload_dirs();
  static const int kAddCameraRollUploadDirsFieldNumber = 13;
  inline const ::std::string& add_camera_roll_upload_dirs(int index) const;
  inline ::std::string* mutable_add_camera_roll_upload_dirs(int index);
  inline void set_add_camera_roll_upload_dirs(int index, const ::std::string& value);
  inline void set_add_camera_roll_upload_dirs(int index, const char* value);
  inline void set_add_camera_roll_upload_dirs(int index, const char* value, size_t size);
  inline ::std::string* add_add_camera_roll_upload_dirs();
  inline void add_add_camera_roll_upload_dirs(const ::std::string& value);
  inline void add_add_camera_roll_upload_dirs(const char* value);
  inline void add_add_camera_roll_upload_dirs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& add_camera_roll_upload_dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_add_camera_roll_upload_dirs();
  
  // repeated string remove_camera_roll_upload_dirs = 14;
  inline int remove_camera_roll_upload_dirs_size() const;
  inline void clear_remove_camera_roll_upload_dirs();
  static const int kRemoveCameraRollUploadDirsFieldNumber = 14;
  inline const ::std::string& remove_camera_roll_upload_dirs(int index) const;
  inline ::std::string* mutable_remove_camera_roll_upload_dirs(int index);
  inline void set_remove_camera_roll_upload_dirs(int index, const ::std::string& value);
  inline void set_remove_camera_roll_upload_dirs(int index, const char* value);
  inline void set_remove_camera_roll_upload_dirs(int index, const char* value, size_t size);
  inline ::std::string* add_remove_camera_roll_upload_dirs();
  inline void add_remove_camera_roll_upload_dirs(const ::std::string& value);
  inline void add_remove_camera_roll_upload_dirs(const char* value);
  inline void add_remove_camera_roll_upload_dirs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_camera_roll_upload_dirs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_camera_roll_upload_dirs();
  
  // optional string trigger_camera_roll_upload_dir = 15;
  inline bool has_trigger_camera_roll_upload_dir() const;
  inline void clear_trigger_camera_roll_upload_dir();
  static const int kTriggerCameraRollUploadDirFieldNumber = 15;
  inline const ::std::string& trigger_camera_roll_upload_dir() const;
  inline void set_trigger_camera_roll_upload_dir(const ::std::string& value);
  inline void set_trigger_camera_roll_upload_dir(const char* value);
  inline void set_trigger_camera_roll_upload_dir(const char* value, size_t size);
  inline ::std::string* mutable_trigger_camera_roll_upload_dir();
  inline ::std::string* release_trigger_camera_roll_upload_dir();
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_full_res_download_dir = 18;
  inline bool has_add_camera_roll_full_res_download_dir() const;
  inline void clear_add_camera_roll_full_res_download_dir();
  static const int kAddCameraRollFullResDownloadDirFieldNumber = 18;
  inline const ::ccd::CameraRollDownloadDirSpec& add_camera_roll_full_res_download_dir() const;
  inline ::ccd::CameraRollDownloadDirSpec* mutable_add_camera_roll_full_res_download_dir();
  inline ::ccd::CameraRollDownloadDirSpec* release_add_camera_roll_full_res_download_dir();
  
  // optional string remove_camera_roll_full_res_download_dir = 19;
  inline bool has_remove_camera_roll_full_res_download_dir() const;
  inline void clear_remove_camera_roll_full_res_download_dir();
  static const int kRemoveCameraRollFullResDownloadDirFieldNumber = 19;
  inline const ::std::string& remove_camera_roll_full_res_download_dir() const;
  inline void set_remove_camera_roll_full_res_download_dir(const ::std::string& value);
  inline void set_remove_camera_roll_full_res_download_dir(const char* value);
  inline void set_remove_camera_roll_full_res_download_dir(const char* value, size_t size);
  inline ::std::string* mutable_remove_camera_roll_full_res_download_dir();
  inline ::std::string* release_remove_camera_roll_full_res_download_dir();
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_low_res_download_dir = 20;
  inline bool has_add_camera_roll_low_res_download_dir() const;
  inline void clear_add_camera_roll_low_res_download_dir();
  static const int kAddCameraRollLowResDownloadDirFieldNumber = 20;
  inline const ::ccd::CameraRollDownloadDirSpec& add_camera_roll_low_res_download_dir() const;
  inline ::ccd::CameraRollDownloadDirSpec* mutable_add_camera_roll_low_res_download_dir();
  inline ::ccd::CameraRollDownloadDirSpec* release_add_camera_roll_low_res_download_dir();
  
  // optional string remove_camera_roll_low_res_download_dir = 21;
  inline bool has_remove_camera_roll_low_res_download_dir() const;
  inline void clear_remove_camera_roll_low_res_download_dir();
  static const int kRemoveCameraRollLowResDownloadDirFieldNumber = 21;
  inline const ::std::string& remove_camera_roll_low_res_download_dir() const;
  inline void set_remove_camera_roll_low_res_download_dir(const ::std::string& value);
  inline void set_remove_camera_roll_low_res_download_dir(const char* value);
  inline void set_remove_camera_roll_low_res_download_dir(const char* value, size_t size);
  inline ::std::string* mutable_remove_camera_roll_low_res_download_dir();
  inline ::std::string* release_remove_camera_roll_low_res_download_dir();
  
  // optional .ccd.CameraRollDownloadDirSpec add_camera_roll_thumb_download_dir = 32;
  inline bool has_add_camera_roll_thumb_download_dir() const;
  inline void clear_add_camera_roll_thumb_download_dir();
  static const int kAddCameraRollThumbDownloadDirFieldNumber = 32;
  inline const ::ccd::CameraRollDownloadDirSpec& add_camera_roll_thumb_download_dir() const;
  inline ::ccd::CameraRollDownloadDirSpec* mutable_add_camera_roll_thumb_download_dir();
  inline ::ccd::CameraRollDownloadDirSpec* release_add_camera_roll_thumb_download_dir();
  
  // optional string remove_camera_roll_thumb_download_dir = 33;
  inline bool has_remove_camera_roll_thumb_download_dir() const;
  inline void clear_remove_camera_roll_thumb_download_dir();
  static const int kRemoveCameraRollThumbDownloadDirFieldNumber = 33;
  inline const ::std::string& remove_camera_roll_thumb_download_dir() const;
  inline void set_remove_camera_roll_thumb_download_dir(const ::std::string& value);
  inline void set_remove_camera_roll_thumb_download_dir(const char* value);
  inline void set_remove_camera_roll_thumb_download_dir(const char* value, size_t size);
  inline ::std::string* mutable_remove_camera_roll_thumb_download_dir();
  inline ::std::string* release_remove_camera_roll_thumb_download_dir();
  
  // optional string send_file_to_camera_roll = 22;
  inline bool has_send_file_to_camera_roll() const;
  inline void clear_send_file_to_camera_roll();
  static const int kSendFileToCameraRollFieldNumber = 22;
  inline const ::std::string& send_file_to_camera_roll() const;
  inline void set_send_file_to_camera_roll(const ::std::string& value);
  inline void set_send_file_to_camera_roll(const char* value);
  inline void set_send_file_to_camera_roll(const char* value, size_t size);
  inline ::std::string* mutable_send_file_to_camera_roll();
  inline ::std::string* release_send_file_to_camera_roll();
  
  // optional bool enable_global_delete = 34;
  inline bool has_enable_global_delete() const;
  inline void clear_enable_global_delete();
  static const int kEnableGlobalDeleteFieldNumber = 34;
  inline bool enable_global_delete() const;
  inline void set_enable_global_delete(bool value);
  
  // optional .ccd.SyncFeatureSettingsRequest configure_notes_sync = 26;
  inline bool has_configure_notes_sync() const;
  inline void clear_configure_notes_sync();
  static const int kConfigureNotesSyncFieldNumber = 26;
  inline const ::ccd::SyncFeatureSettingsRequest& configure_notes_sync() const;
  inline ::ccd::SyncFeatureSettingsRequest* mutable_configure_notes_sync();
  inline ::ccd::SyncFeatureSettingsRequest* release_configure_notes_sync();
  
  // optional bool enable_notes_sync = 27;
  inline bool has_enable_notes_sync() const;
  inline void clear_enable_notes_sync();
  static const int kEnableNotesSyncFieldNumber = 27;
  inline bool enable_notes_sync() const;
  inline void set_enable_notes_sync(bool value);
  
  // optional .ccd.MediaMetadataThumbMigrate migrate_mm_thumb_download_path = 28;
  inline bool has_migrate_mm_thumb_download_path() const;
  inline void clear_migrate_mm_thumb_download_path();
  static const int kMigrateMmThumbDownloadPathFieldNumber = 28;
  inline const ::ccd::MediaMetadataThumbMigrate& migrate_mm_thumb_download_path() const;
  inline ::ccd::MediaMetadataThumbMigrate* mutable_migrate_mm_thumb_download_path();
  inline ::ccd::MediaMetadataThumbMigrate* release_migrate_mm_thumb_download_path();
  
  // optional bool enable_mm_thumb_sync = 29;
  inline bool has_enable_mm_thumb_sync() const;
  inline void clear_enable_mm_thumb_sync();
  static const int kEnableMmThumbSyncFieldNumber = 29;
  inline bool enable_mm_thumb_sync() const;
  inline void set_enable_mm_thumb_sync(bool value);
  
  // optional bool enable_clouddoc_sync = 30;
  inline bool has_enable_clouddoc_sync() const;
  inline void clear_enable_clouddoc_sync();
  static const int kEnableClouddocSyncFieldNumber = 30;
  inline bool enable_clouddoc_sync() const;
  inline void set_enable_clouddoc_sync(bool value);
  
  // repeated .ccd.SyncFeature_t enable_mm_thumb_sync_types = 31;
  inline int enable_mm_thumb_sync_types_size() const;
  inline void clear_enable_mm_thumb_sync_types();
  static const int kEnableMmThumbSyncTypesFieldNumber = 31;
  inline ccd::SyncFeature_t enable_mm_thumb_sync_types(int index) const;
  inline void set_enable_mm_thumb_sync_types(int index, ccd::SyncFeature_t value);
  inline void add_enable_mm_thumb_sync_types(ccd::SyncFeature_t value);
  inline const ::google::protobuf::RepeatedField<int>& enable_mm_thumb_sync_types() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_enable_mm_thumb_sync_types();
  
  // optional .ccd.SyncFeatureSettingsRequest configure_syncbox_sync = 35;
  inline bool has_configure_syncbox_sync() const;
  inline void clear_configure_syncbox_sync();
  static const int kConfigureSyncboxSyncFieldNumber = 35;
  inline const ::ccd::SyncFeatureSettingsRequest& configure_syncbox_sync() const;
  inline ::ccd::SyncFeatureSettingsRequest* mutable_configure_syncbox_sync();
  inline ::ccd::SyncFeatureSettingsRequest* release_configure_syncbox_sync();
  
  // optional bool enable_shared_by_me = 36;
  inline bool has_enable_shared_by_me() const;
  inline void clear_enable_shared_by_me();
  static const int kEnableSharedByMeFieldNumber = 36;
  inline bool enable_shared_by_me() const;
  inline void set_enable_shared_by_me(bool value);
  
  // optional bool enable_shared_with_me = 37;
  inline bool has_enable_shared_with_me() const;
  inline void clear_enable_shared_with_me();
  static const int kEnableSharedWithMeFieldNumber = 37;
  inline bool enable_shared_with_me() const;
  inline void set_enable_shared_with_me(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateSyncSettingsInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_set_my_device_name();
  inline void clear_has_set_my_device_name();
  inline void set_has_enable_camera_roll();
  inline void clear_has_enable_camera_roll();
  inline void set_has_enable_network_activity();
  inline void clear_has_enable_network_activity();
  inline void set_has_set_max_download_rate_bytes_sec();
  inline void clear_has_set_max_download_rate_bytes_sec();
  inline void set_has_set_max_upload_rate_bytes_sec();
  inline void clear_has_set_max_upload_rate_bytes_sec();
  inline void set_has_background_data();
  inline void clear_has_background_data();
  inline void set_has_auto_sync();
  inline void clear_has_auto_sync();
  inline void set_has_mobile_network_data();
  inline void clear_has_mobile_network_data();
  inline void set_has_trigger_camera_roll_upload_dir();
  inline void clear_has_trigger_camera_roll_upload_dir();
  inline void set_has_add_camera_roll_full_res_download_dir();
  inline void clear_has_add_camera_roll_full_res_download_dir();
  inline void set_has_remove_camera_roll_full_res_download_dir();
  inline void clear_has_remove_camera_roll_full_res_download_dir();
  inline void set_has_add_camera_roll_low_res_download_dir();
  inline void clear_has_add_camera_roll_low_res_download_dir();
  inline void set_has_remove_camera_roll_low_res_download_dir();
  inline void clear_has_remove_camera_roll_low_res_download_dir();
  inline void set_has_add_camera_roll_thumb_download_dir();
  inline void clear_has_add_camera_roll_thumb_download_dir();
  inline void set_has_remove_camera_roll_thumb_download_dir();
  inline void clear_has_remove_camera_roll_thumb_download_dir();
  inline void set_has_send_file_to_camera_roll();
  inline void clear_has_send_file_to_camera_roll();
  inline void set_has_enable_global_delete();
  inline void clear_has_enable_global_delete();
  inline void set_has_configure_notes_sync();
  inline void clear_has_configure_notes_sync();
  inline void set_has_enable_notes_sync();
  inline void clear_has_enable_notes_sync();
  inline void set_has_migrate_mm_thumb_download_path();
  inline void clear_has_migrate_mm_thumb_download_path();
  inline void set_has_enable_mm_thumb_sync();
  inline void clear_has_enable_mm_thumb_sync();
  inline void set_has_enable_clouddoc_sync();
  inline void clear_has_enable_clouddoc_sync();
  inline void set_has_configure_syncbox_sync();
  inline void clear_has_configure_syncbox_sync();
  inline void set_has_enable_shared_by_me();
  inline void clear_has_enable_shared_by_me();
  inline void set_has_enable_shared_with_me();
  inline void clear_has_enable_shared_with_me();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* set_my_device_name_;
  ::google::protobuf::uint64 set_max_download_rate_bytes_sec_;
  ::google::protobuf::uint64 set_max_upload_rate_bytes_sec_;
  ::google::protobuf::RepeatedPtrField< ::std::string> add_camera_roll_upload_dirs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_camera_roll_upload_dirs_;
  ::std::string* trigger_camera_roll_upload_dir_;
  bool enable_camera_roll_;
  bool enable_network_activity_;
  bool background_data_;
  bool auto_sync_;
  bool mobile_network_data_;
  bool enable_global_delete_;
  bool enable_notes_sync_;
  bool enable_mm_thumb_sync_;
  ::ccd::CameraRollDownloadDirSpec* add_camera_roll_full_res_download_dir_;
  ::std::string* remove_camera_roll_full_res_download_dir_;
  ::ccd::CameraRollDownloadDirSpec* add_camera_roll_low_res_download_dir_;
  ::std::string* remove_camera_roll_low_res_download_dir_;
  ::ccd::CameraRollDownloadDirSpec* add_camera_roll_thumb_download_dir_;
  ::std::string* remove_camera_roll_thumb_download_dir_;
  ::std::string* send_file_to_camera_roll_;
  ::ccd::SyncFeatureSettingsRequest* configure_notes_sync_;
  ::ccd::MediaMetadataThumbMigrate* migrate_mm_thumb_download_path_;
  ::google::protobuf::RepeatedField<int> enable_mm_thumb_sync_types_;
  ::ccd::SyncFeatureSettingsRequest* configure_syncbox_sync_;
  bool enable_clouddoc_sync_;
  bool enable_shared_by_me_;
  bool enable_shared_with_me_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateSyncSettingsInput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSyncSettingsOutput : public ::google::protobuf::Message {
 public:
  UpdateSyncSettingsOutput();
  virtual ~UpdateSyncSettingsOutput();
  
  UpdateSyncSettingsOutput(const UpdateSyncSettingsOutput& from);
  
  inline UpdateSyncSettingsOutput& operator=(const UpdateSyncSettingsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSyncSettingsOutput& default_instance();
  
  void Swap(UpdateSyncSettingsOutput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateSyncSettingsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSyncSettingsOutput& from);
  void MergeFrom(const UpdateSyncSettingsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 set_my_device_name_err = 1;
  inline bool has_set_my_device_name_err() const;
  inline void clear_set_my_device_name_err();
  static const int kSetMyDeviceNameErrFieldNumber = 1;
  inline ::google::protobuf::int32 set_my_device_name_err() const;
  inline void set_set_my_device_name_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_camera_roll_err = 6;
  inline bool has_enable_camera_roll_err() const;
  inline void clear_enable_camera_roll_err();
  static const int kEnableCameraRollErrFieldNumber = 6;
  inline ::google::protobuf::int32 enable_camera_roll_err() const;
  inline void set_enable_camera_roll_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_global_delete_err = 34;
  inline bool has_enable_global_delete_err() const;
  inline void clear_enable_global_delete_err();
  static const int kEnableGlobalDeleteErrFieldNumber = 34;
  inline ::google::protobuf::int32 enable_global_delete_err() const;
  inline void set_enable_global_delete_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_network_activity_err = 7;
  inline bool has_enable_network_activity_err() const;
  inline void clear_enable_network_activity_err();
  static const int kEnableNetworkActivityErrFieldNumber = 7;
  inline ::google::protobuf::int32 enable_network_activity_err() const;
  inline void set_enable_network_activity_err(::google::protobuf::int32 value);
  
  // optional sint32 set_max_download_rate_err = 4;
  inline bool has_set_max_download_rate_err() const;
  inline void clear_set_max_download_rate_err();
  static const int kSetMaxDownloadRateErrFieldNumber = 4;
  inline ::google::protobuf::int32 set_max_download_rate_err() const;
  inline void set_set_max_download_rate_err(::google::protobuf::int32 value);
  
  // optional sint32 set_max_upload_rate_err = 5;
  inline bool has_set_max_upload_rate_err() const;
  inline void clear_set_max_upload_rate_err();
  static const int kSetMaxUploadRateErrFieldNumber = 5;
  inline ::google::protobuf::int32 set_max_upload_rate_err() const;
  inline void set_set_max_upload_rate_err(::google::protobuf::int32 value);
  
  // optional sint32 background_data_err = 10;
  inline bool has_background_data_err() const;
  inline void clear_background_data_err();
  static const int kBackgroundDataErrFieldNumber = 10;
  inline ::google::protobuf::int32 background_data_err() const;
  inline void set_background_data_err(::google::protobuf::int32 value);
  
  // optional sint32 auto_sync_err = 11;
  inline bool has_auto_sync_err() const;
  inline void clear_auto_sync_err();
  static const int kAutoSyncErrFieldNumber = 11;
  inline ::google::protobuf::int32 auto_sync_err() const;
  inline void set_auto_sync_err(::google::protobuf::int32 value);
  
  // optional sint32 mobile_network_data_err = 12;
  inline bool has_mobile_network_data_err() const;
  inline void clear_mobile_network_data_err();
  static const int kMobileNetworkDataErrFieldNumber = 12;
  inline ::google::protobuf::int32 mobile_network_data_err() const;
  inline void set_mobile_network_data_err(::google::protobuf::int32 value);
  
  // optional sint32 add_camera_roll_upload_dirs_err = 13;
  inline bool has_add_camera_roll_upload_dirs_err() const;
  inline void clear_add_camera_roll_upload_dirs_err();
  static const int kAddCameraRollUploadDirsErrFieldNumber = 13;
  inline ::google::protobuf::int32 add_camera_roll_upload_dirs_err() const;
  inline void set_add_camera_roll_upload_dirs_err(::google::protobuf::int32 value);
  
  // optional sint32 remove_camera_roll_upload_dirs_err = 14;
  inline bool has_remove_camera_roll_upload_dirs_err() const;
  inline void clear_remove_camera_roll_upload_dirs_err();
  static const int kRemoveCameraRollUploadDirsErrFieldNumber = 14;
  inline ::google::protobuf::int32 remove_camera_roll_upload_dirs_err() const;
  inline void set_remove_camera_roll_upload_dirs_err(::google::protobuf::int32 value);
  
  // optional sint32 trigger_camera_roll_upload_dir_err = 15;
  inline bool has_trigger_camera_roll_upload_dir_err() const;
  inline void clear_trigger_camera_roll_upload_dir_err();
  static const int kTriggerCameraRollUploadDirErrFieldNumber = 15;
  inline ::google::protobuf::int32 trigger_camera_roll_upload_dir_err() const;
  inline void set_trigger_camera_roll_upload_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 add_camera_roll_full_res_download_dir_err = 18;
  inline bool has_add_camera_roll_full_res_download_dir_err() const;
  inline void clear_add_camera_roll_full_res_download_dir_err();
  static const int kAddCameraRollFullResDownloadDirErrFieldNumber = 18;
  inline ::google::protobuf::int32 add_camera_roll_full_res_download_dir_err() const;
  inline void set_add_camera_roll_full_res_download_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 remove_camera_roll_full_res_download_dir_err = 19;
  inline bool has_remove_camera_roll_full_res_download_dir_err() const;
  inline void clear_remove_camera_roll_full_res_download_dir_err();
  static const int kRemoveCameraRollFullResDownloadDirErrFieldNumber = 19;
  inline ::google::protobuf::int32 remove_camera_roll_full_res_download_dir_err() const;
  inline void set_remove_camera_roll_full_res_download_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 add_camera_roll_low_res_download_dir_err = 20;
  inline bool has_add_camera_roll_low_res_download_dir_err() const;
  inline void clear_add_camera_roll_low_res_download_dir_err();
  static const int kAddCameraRollLowResDownloadDirErrFieldNumber = 20;
  inline ::google::protobuf::int32 add_camera_roll_low_res_download_dir_err() const;
  inline void set_add_camera_roll_low_res_download_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 remove_camera_roll_low_res_download_dir_err = 21;
  inline bool has_remove_camera_roll_low_res_download_dir_err() const;
  inline void clear_remove_camera_roll_low_res_download_dir_err();
  static const int kRemoveCameraRollLowResDownloadDirErrFieldNumber = 21;
  inline ::google::protobuf::int32 remove_camera_roll_low_res_download_dir_err() const;
  inline void set_remove_camera_roll_low_res_download_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 add_camera_roll_thumb_download_dir_err = 32;
  inline bool has_add_camera_roll_thumb_download_dir_err() const;
  inline void clear_add_camera_roll_thumb_download_dir_err();
  static const int kAddCameraRollThumbDownloadDirErrFieldNumber = 32;
  inline ::google::protobuf::int32 add_camera_roll_thumb_download_dir_err() const;
  inline void set_add_camera_roll_thumb_download_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 remove_camera_roll_thumb_download_dir_err = 33;
  inline bool has_remove_camera_roll_thumb_download_dir_err() const;
  inline void clear_remove_camera_roll_thumb_download_dir_err();
  static const int kRemoveCameraRollThumbDownloadDirErrFieldNumber = 33;
  inline ::google::protobuf::int32 remove_camera_roll_thumb_download_dir_err() const;
  inline void set_remove_camera_roll_thumb_download_dir_err(::google::protobuf::int32 value);
  
  // optional sint32 send_file_to_camera_roll_err = 22;
  inline bool has_send_file_to_camera_roll_err() const;
  inline void clear_send_file_to_camera_roll_err();
  static const int kSendFileToCameraRollErrFieldNumber = 22;
  inline ::google::protobuf::int32 send_file_to_camera_roll_err() const;
  inline void set_send_file_to_camera_roll_err(::google::protobuf::int32 value);
  
  // optional sint32 configure_notes_sync_err = 26;
  inline bool has_configure_notes_sync_err() const;
  inline void clear_configure_notes_sync_err();
  static const int kConfigureNotesSyncErrFieldNumber = 26;
  inline ::google::protobuf::int32 configure_notes_sync_err() const;
  inline void set_configure_notes_sync_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_notes_sync_err = 27;
  inline bool has_enable_notes_sync_err() const;
  inline void clear_enable_notes_sync_err();
  static const int kEnableNotesSyncErrFieldNumber = 27;
  inline ::google::protobuf::int32 enable_notes_sync_err() const;
  inline void set_enable_notes_sync_err(::google::protobuf::int32 value);
  
  // optional sint32 migrate_mm_thumb_download_path_err = 28;
  inline bool has_migrate_mm_thumb_download_path_err() const;
  inline void clear_migrate_mm_thumb_download_path_err();
  static const int kMigrateMmThumbDownloadPathErrFieldNumber = 28;
  inline ::google::protobuf::int32 migrate_mm_thumb_download_path_err() const;
  inline void set_migrate_mm_thumb_download_path_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_mm_thumb_sync_err = 29;
  inline bool has_enable_mm_thumb_sync_err() const;
  inline void clear_enable_mm_thumb_sync_err();
  static const int kEnableMmThumbSyncErrFieldNumber = 29;
  inline ::google::protobuf::int32 enable_mm_thumb_sync_err() const;
  inline void set_enable_mm_thumb_sync_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_clouddoc_sync_err = 30;
  inline bool has_enable_clouddoc_sync_err() const;
  inline void clear_enable_clouddoc_sync_err();
  static const int kEnableClouddocSyncErrFieldNumber = 30;
  inline ::google::protobuf::int32 enable_clouddoc_sync_err() const;
  inline void set_enable_clouddoc_sync_err(::google::protobuf::int32 value);
  
  // optional sint32 configure_syncbox_sync_err = 31;
  inline bool has_configure_syncbox_sync_err() const;
  inline void clear_configure_syncbox_sync_err();
  static const int kConfigureSyncboxSyncErrFieldNumber = 31;
  inline ::google::protobuf::int32 configure_syncbox_sync_err() const;
  inline void set_configure_syncbox_sync_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_shared_by_me_err = 35;
  inline bool has_enable_shared_by_me_err() const;
  inline void clear_enable_shared_by_me_err();
  static const int kEnableSharedByMeErrFieldNumber = 35;
  inline ::google::protobuf::int32 enable_shared_by_me_err() const;
  inline void set_enable_shared_by_me_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_shared_with_me_err = 36;
  inline bool has_enable_shared_with_me_err() const;
  inline void clear_enable_shared_with_me_err();
  static const int kEnableSharedWithMeErrFieldNumber = 36;
  inline ::google::protobuf::int32 enable_shared_with_me_err() const;
  inline void set_enable_shared_with_me_err(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateSyncSettingsOutput)
 private:
  inline void set_has_set_my_device_name_err();
  inline void clear_has_set_my_device_name_err();
  inline void set_has_enable_camera_roll_err();
  inline void clear_has_enable_camera_roll_err();
  inline void set_has_enable_global_delete_err();
  inline void clear_has_enable_global_delete_err();
  inline void set_has_enable_network_activity_err();
  inline void clear_has_enable_network_activity_err();
  inline void set_has_set_max_download_rate_err();
  inline void clear_has_set_max_download_rate_err();
  inline void set_has_set_max_upload_rate_err();
  inline void clear_has_set_max_upload_rate_err();
  inline void set_has_background_data_err();
  inline void clear_has_background_data_err();
  inline void set_has_auto_sync_err();
  inline void clear_has_auto_sync_err();
  inline void set_has_mobile_network_data_err();
  inline void clear_has_mobile_network_data_err();
  inline void set_has_add_camera_roll_upload_dirs_err();
  inline void clear_has_add_camera_roll_upload_dirs_err();
  inline void set_has_remove_camera_roll_upload_dirs_err();
  inline void clear_has_remove_camera_roll_upload_dirs_err();
  inline void set_has_trigger_camera_roll_upload_dir_err();
  inline void clear_has_trigger_camera_roll_upload_dir_err();
  inline void set_has_add_camera_roll_full_res_download_dir_err();
  inline void clear_has_add_camera_roll_full_res_download_dir_err();
  inline void set_has_remove_camera_roll_full_res_download_dir_err();
  inline void clear_has_remove_camera_roll_full_res_download_dir_err();
  inline void set_has_add_camera_roll_low_res_download_dir_err();
  inline void clear_has_add_camera_roll_low_res_download_dir_err();
  inline void set_has_remove_camera_roll_low_res_download_dir_err();
  inline void clear_has_remove_camera_roll_low_res_download_dir_err();
  inline void set_has_add_camera_roll_thumb_download_dir_err();
  inline void clear_has_add_camera_roll_thumb_download_dir_err();
  inline void set_has_remove_camera_roll_thumb_download_dir_err();
  inline void clear_has_remove_camera_roll_thumb_download_dir_err();
  inline void set_has_send_file_to_camera_roll_err();
  inline void clear_has_send_file_to_camera_roll_err();
  inline void set_has_configure_notes_sync_err();
  inline void clear_has_configure_notes_sync_err();
  inline void set_has_enable_notes_sync_err();
  inline void clear_has_enable_notes_sync_err();
  inline void set_has_migrate_mm_thumb_download_path_err();
  inline void clear_has_migrate_mm_thumb_download_path_err();
  inline void set_has_enable_mm_thumb_sync_err();
  inline void clear_has_enable_mm_thumb_sync_err();
  inline void set_has_enable_clouddoc_sync_err();
  inline void clear_has_enable_clouddoc_sync_err();
  inline void set_has_configure_syncbox_sync_err();
  inline void clear_has_configure_syncbox_sync_err();
  inline void set_has_enable_shared_by_me_err();
  inline void clear_has_enable_shared_by_me_err();
  inline void set_has_enable_shared_with_me_err();
  inline void clear_has_enable_shared_with_me_err();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 set_my_device_name_err_;
  ::google::protobuf::int32 enable_camera_roll_err_;
  ::google::protobuf::int32 enable_global_delete_err_;
  ::google::protobuf::int32 enable_network_activity_err_;
  ::google::protobuf::int32 set_max_download_rate_err_;
  ::google::protobuf::int32 set_max_upload_rate_err_;
  ::google::protobuf::int32 background_data_err_;
  ::google::protobuf::int32 auto_sync_err_;
  ::google::protobuf::int32 mobile_network_data_err_;
  ::google::protobuf::int32 add_camera_roll_upload_dirs_err_;
  ::google::protobuf::int32 remove_camera_roll_upload_dirs_err_;
  ::google::protobuf::int32 trigger_camera_roll_upload_dir_err_;
  ::google::protobuf::int32 add_camera_roll_full_res_download_dir_err_;
  ::google::protobuf::int32 remove_camera_roll_full_res_download_dir_err_;
  ::google::protobuf::int32 add_camera_roll_low_res_download_dir_err_;
  ::google::protobuf::int32 remove_camera_roll_low_res_download_dir_err_;
  ::google::protobuf::int32 add_camera_roll_thumb_download_dir_err_;
  ::google::protobuf::int32 remove_camera_roll_thumb_download_dir_err_;
  ::google::protobuf::int32 send_file_to_camera_roll_err_;
  ::google::protobuf::int32 configure_notes_sync_err_;
  ::google::protobuf::int32 enable_notes_sync_err_;
  ::google::protobuf::int32 migrate_mm_thumb_download_path_err_;
  ::google::protobuf::int32 enable_mm_thumb_sync_err_;
  ::google::protobuf::int32 enable_clouddoc_sync_err_;
  ::google::protobuf::int32 configure_syncbox_sync_err_;
  ::google::protobuf::int32 enable_shared_by_me_err_;
  ::google::protobuf::int32 enable_shared_with_me_err_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateSyncSettingsOutput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSyncSubscriptionInput : public ::google::protobuf::Message {
 public:
  UpdateSyncSubscriptionInput();
  virtual ~UpdateSyncSubscriptionInput();
  
  UpdateSyncSubscriptionInput(const UpdateSyncSubscriptionInput& from);
  
  inline UpdateSyncSubscriptionInput& operator=(const UpdateSyncSubscriptionInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSyncSubscriptionInput& default_instance();
  
  void Swap(UpdateSyncSubscriptionInput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateSyncSubscriptionInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSyncSubscriptionInput& from);
  void MergeFrom(const UpdateSyncSubscriptionInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 dataset_id = 2;
  inline bool has_dataset_id() const;
  inline void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dataset_id() const;
  inline void set_dataset_id(::google::protobuf::uint64 value);
  
  // optional fixed64 device_id = 3;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 3;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional string new_filter = 4;
  inline bool has_new_filter() const;
  inline void clear_new_filter();
  static const int kNewFilterFieldNumber = 4;
  inline const ::std::string& new_filter() const;
  inline void set_new_filter(const ::std::string& value);
  inline void set_new_filter(const char* value);
  inline void set_new_filter(const char* value, size_t size);
  inline ::std::string* mutable_new_filter();
  inline ::std::string* release_new_filter();
  
  // optional fixed64 max_size = 5;
  inline bool has_max_size() const;
  inline void clear_max_size();
  static const int kMaxSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 max_size() const;
  inline void set_max_size(::google::protobuf::uint64 value);
  
  // optional fixed64 max_files = 6;
  inline bool has_max_files() const;
  inline void clear_max_files();
  static const int kMaxFilesFieldNumber = 6;
  inline ::google::protobuf::uint64 max_files() const;
  inline void set_max_files(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateSyncSubscriptionInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_dataset_id();
  inline void clear_has_dataset_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_new_filter();
  inline void clear_has_new_filter();
  inline void set_has_max_size();
  inline void clear_has_max_size();
  inline void set_has_max_files();
  inline void clear_has_max_files();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 dataset_id_;
  ::google::protobuf::uint64 device_id_;
  ::std::string* new_filter_;
  ::google::protobuf::uint64 max_size_;
  ::google::protobuf::uint64 max_files_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateSyncSubscriptionInput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateCheckInput : public ::google::protobuf::Message {
 public:
  SWUpdateCheckInput();
  virtual ~SWUpdateCheckInput();
  
  SWUpdateCheckInput(const SWUpdateCheckInput& from);
  
  inline SWUpdateCheckInput& operator=(const SWUpdateCheckInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateCheckInput& default_instance();
  
  void Swap(SWUpdateCheckInput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateCheckInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateCheckInput& from);
  void MergeFrom(const SWUpdateCheckInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string app_guid = 1;
  inline bool has_app_guid() const;
  inline void clear_app_guid();
  static const int kAppGuidFieldNumber = 1;
  inline const ::std::string& app_guid() const;
  inline void set_app_guid(const ::std::string& value);
  inline void set_app_guid(const char* value);
  inline void set_app_guid(const char* value, size_t size);
  inline ::std::string* mutable_app_guid();
  inline ::std::string* release_app_guid();
  
  // required string app_version = 2;
  inline bool has_app_version() const;
  inline void clear_app_version();
  static const int kAppVersionFieldNumber = 2;
  inline const ::std::string& app_version() const;
  inline void set_app_version(const ::std::string& value);
  inline void set_app_version(const char* value);
  inline void set_app_version(const char* value, size_t size);
  inline ::std::string* mutable_app_version();
  inline ::std::string* release_app_version();
  
  // optional bool update_cache = 3;
  inline bool has_update_cache() const;
  inline void clear_update_cache();
  static const int kUpdateCacheFieldNumber = 3;
  inline bool update_cache() const;
  inline void set_update_cache(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateCheckInput)
 private:
  inline void set_has_app_guid();
  inline void clear_has_app_guid();
  inline void set_has_app_version();
  inline void clear_has_app_version();
  inline void set_has_update_cache();
  inline void clear_has_update_cache();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* app_guid_;
  ::std::string* app_version_;
  bool update_cache_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateCheckInput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateCheckOutput : public ::google::protobuf::Message {
 public:
  SWUpdateCheckOutput();
  virtual ~SWUpdateCheckOutput();
  
  SWUpdateCheckOutput(const SWUpdateCheckOutput& from);
  
  inline SWUpdateCheckOutput& operator=(const SWUpdateCheckOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateCheckOutput& default_instance();
  
  void Swap(SWUpdateCheckOutput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateCheckOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateCheckOutput& from);
  void MergeFrom(const SWUpdateCheckOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 update_mask = 1;
  inline bool has_update_mask() const;
  inline void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 1;
  inline ::google::protobuf::uint64 update_mask() const;
  inline void set_update_mask(::google::protobuf::uint64 value);
  
  // required string latest_app_version = 2;
  inline bool has_latest_app_version() const;
  inline void clear_latest_app_version();
  static const int kLatestAppVersionFieldNumber = 2;
  inline const ::std::string& latest_app_version() const;
  inline void set_latest_app_version(const ::std::string& value);
  inline void set_latest_app_version(const char* value);
  inline void set_latest_app_version(const char* value, size_t size);
  inline ::std::string* mutable_latest_app_version();
  inline ::std::string* release_latest_app_version();
  
  // required string latest_ccd_version = 3;
  inline bool has_latest_ccd_version() const;
  inline void clear_latest_ccd_version();
  static const int kLatestCcdVersionFieldNumber = 3;
  inline const ::std::string& latest_ccd_version() const;
  inline void set_latest_ccd_version(const ::std::string& value);
  inline void set_latest_ccd_version(const char* value);
  inline void set_latest_ccd_version(const char* value, size_t size);
  inline ::std::string* mutable_latest_ccd_version();
  inline ::std::string* release_latest_ccd_version();
  
  // required string change_log = 4;
  inline bool has_change_log() const;
  inline void clear_change_log();
  static const int kChangeLogFieldNumber = 4;
  inline const ::std::string& change_log() const;
  inline void set_change_log(const ::std::string& value);
  inline void set_change_log(const char* value);
  inline void set_change_log(const char* value, size_t size);
  inline ::std::string* mutable_change_log();
  inline ::std::string* release_change_log();
  
  // optional uint64 app_size = 5;
  inline bool has_app_size() const;
  inline void clear_app_size();
  static const int kAppSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 app_size() const;
  inline void set_app_size(::google::protobuf::uint64 value);
  
  // optional bool is_qa = 6;
  inline bool has_is_qa() const;
  inline void clear_is_qa();
  static const int kIsQaFieldNumber = 6;
  inline bool is_qa() const;
  inline void set_is_qa(bool value);
  
  // optional bool is_auto_update_disabled = 7;
  inline bool has_is_auto_update_disabled() const;
  inline void clear_is_auto_update_disabled();
  static const int kIsAutoUpdateDisabledFieldNumber = 7;
  inline bool is_auto_update_disabled() const;
  inline void set_is_auto_update_disabled(bool value);
  
  // optional bool is_infra_download = 8;
  inline bool has_is_infra_download() const;
  inline void clear_is_infra_download();
  static const int kIsInfraDownloadFieldNumber = 8;
  inline bool is_infra_download() const;
  inline void set_is_infra_download(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateCheckOutput)
 private:
  inline void set_has_update_mask();
  inline void clear_has_update_mask();
  inline void set_has_latest_app_version();
  inline void clear_has_latest_app_version();
  inline void set_has_latest_ccd_version();
  inline void clear_has_latest_ccd_version();
  inline void set_has_change_log();
  inline void clear_has_change_log();
  inline void set_has_app_size();
  inline void clear_has_app_size();
  inline void set_has_is_qa();
  inline void clear_has_is_qa();
  inline void set_has_is_auto_update_disabled();
  inline void clear_has_is_auto_update_disabled();
  inline void set_has_is_infra_download();
  inline void clear_has_is_infra_download();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 update_mask_;
  ::std::string* latest_app_version_;
  ::std::string* latest_ccd_version_;
  ::std::string* change_log_;
  ::google::protobuf::uint64 app_size_;
  bool is_qa_;
  bool is_auto_update_disabled_;
  bool is_infra_download_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateCheckOutput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateBeginDownloadInput : public ::google::protobuf::Message {
 public:
  SWUpdateBeginDownloadInput();
  virtual ~SWUpdateBeginDownloadInput();
  
  SWUpdateBeginDownloadInput(const SWUpdateBeginDownloadInput& from);
  
  inline SWUpdateBeginDownloadInput& operator=(const SWUpdateBeginDownloadInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateBeginDownloadInput& default_instance();
  
  void Swap(SWUpdateBeginDownloadInput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateBeginDownloadInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateBeginDownloadInput& from);
  void MergeFrom(const SWUpdateBeginDownloadInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string app_guid = 1;
  inline bool has_app_guid() const;
  inline void clear_app_guid();
  static const int kAppGuidFieldNumber = 1;
  inline const ::std::string& app_guid() const;
  inline void set_app_guid(const ::std::string& value);
  inline void set_app_guid(const char* value);
  inline void set_app_guid(const char* value, size_t size);
  inline ::std::string* mutable_app_guid();
  inline ::std::string* release_app_guid();
  
  // required string app_version = 2;
  inline bool has_app_version() const;
  inline void clear_app_version();
  static const int kAppVersionFieldNumber = 2;
  inline const ::std::string& app_version() const;
  inline void set_app_version(const ::std::string& value);
  inline void set_app_version(const char* value);
  inline void set_app_version(const char* value, size_t size);
  inline ::std::string* mutable_app_version();
  inline ::std::string* release_app_version();
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateBeginDownloadInput)
 private:
  inline void set_has_app_guid();
  inline void clear_has_app_guid();
  inline void set_has_app_version();
  inline void clear_has_app_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* app_guid_;
  ::std::string* app_version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateBeginDownloadInput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateBeginDownloadOutput : public ::google::protobuf::Message {
 public:
  SWUpdateBeginDownloadOutput();
  virtual ~SWUpdateBeginDownloadOutput();
  
  SWUpdateBeginDownloadOutput(const SWUpdateBeginDownloadOutput& from);
  
  inline SWUpdateBeginDownloadOutput& operator=(const SWUpdateBeginDownloadOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateBeginDownloadOutput& default_instance();
  
  void Swap(SWUpdateBeginDownloadOutput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateBeginDownloadOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateBeginDownloadOutput& from);
  void MergeFrom(const SWUpdateBeginDownloadOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateBeginDownloadOutput)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateBeginDownloadOutput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateGetDownloadProgressInput : public ::google::protobuf::Message {
 public:
  SWUpdateGetDownloadProgressInput();
  virtual ~SWUpdateGetDownloadProgressInput();
  
  SWUpdateGetDownloadProgressInput(const SWUpdateGetDownloadProgressInput& from);
  
  inline SWUpdateGetDownloadProgressInput& operator=(const SWUpdateGetDownloadProgressInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateGetDownloadProgressInput& default_instance();
  
  void Swap(SWUpdateGetDownloadProgressInput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateGetDownloadProgressInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateGetDownloadProgressInput& from);
  void MergeFrom(const SWUpdateGetDownloadProgressInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateGetDownloadProgressInput)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateGetDownloadProgressInput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateGetDownloadProgressOutput : public ::google::protobuf::Message {
 public:
  SWUpdateGetDownloadProgressOutput();
  virtual ~SWUpdateGetDownloadProgressOutput();
  
  SWUpdateGetDownloadProgressOutput(const SWUpdateGetDownloadProgressOutput& from);
  
  inline SWUpdateGetDownloadProgressOutput& operator=(const SWUpdateGetDownloadProgressOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateGetDownloadProgressOutput& default_instance();
  
  void Swap(SWUpdateGetDownloadProgressOutput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateGetDownloadProgressOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateGetDownloadProgressOutput& from);
  void MergeFrom(const SWUpdateGetDownloadProgressOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 total_transfer_size = 1;
  inline bool has_total_transfer_size() const;
  inline void clear_total_transfer_size();
  static const int kTotalTransferSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 total_transfer_size() const;
  inline void set_total_transfer_size(::google::protobuf::uint64 value);
  
  // required uint64 bytes_transferred_cnt = 2;
  inline bool has_bytes_transferred_cnt() const;
  inline void clear_bytes_transferred_cnt();
  static const int kBytesTransferredCntFieldNumber = 2;
  inline ::google::protobuf::uint64 bytes_transferred_cnt() const;
  inline void set_bytes_transferred_cnt(::google::protobuf::uint64 value);
  
  // required .ccd.SWUpdateDownloadState_t state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ccd::SWUpdateDownloadState_t state() const;
  inline void set_state(ccd::SWUpdateDownloadState_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateGetDownloadProgressOutput)
 private:
  inline void set_has_total_transfer_size();
  inline void clear_has_total_transfer_size();
  inline void set_has_bytes_transferred_cnt();
  inline void clear_has_bytes_transferred_cnt();
  inline void set_has_state();
  inline void clear_has_state();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 total_transfer_size_;
  ::google::protobuf::uint64 bytes_transferred_cnt_;
  int state_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateGetDownloadProgressOutput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateEndDownloadInput : public ::google::protobuf::Message {
 public:
  SWUpdateEndDownloadInput();
  virtual ~SWUpdateEndDownloadInput();
  
  SWUpdateEndDownloadInput(const SWUpdateEndDownloadInput& from);
  
  inline SWUpdateEndDownloadInput& operator=(const SWUpdateEndDownloadInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateEndDownloadInput& default_instance();
  
  void Swap(SWUpdateEndDownloadInput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateEndDownloadInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateEndDownloadInput& from);
  void MergeFrom(const SWUpdateEndDownloadInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);
  
  // required string file_location = 2;
  inline bool has_file_location() const;
  inline void clear_file_location();
  static const int kFileLocationFieldNumber = 2;
  inline const ::std::string& file_location() const;
  inline void set_file_location(const ::std::string& value);
  inline void set_file_location(const char* value);
  inline void set_file_location(const char* value, size_t size);
  inline ::std::string* mutable_file_location();
  inline ::std::string* release_file_location();
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateEndDownloadInput)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  inline void set_has_file_location();
  inline void clear_has_file_location();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 handle_;
  ::std::string* file_location_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateEndDownloadInput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateCancelDownloadInput : public ::google::protobuf::Message {
 public:
  SWUpdateCancelDownloadInput();
  virtual ~SWUpdateCancelDownloadInput();
  
  SWUpdateCancelDownloadInput(const SWUpdateCancelDownloadInput& from);
  
  inline SWUpdateCancelDownloadInput& operator=(const SWUpdateCancelDownloadInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateCancelDownloadInput& default_instance();
  
  void Swap(SWUpdateCancelDownloadInput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateCancelDownloadInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateCancelDownloadInput& from);
  void MergeFrom(const SWUpdateCancelDownloadInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 handle = 1;
  inline bool has_handle() const;
  inline void clear_handle();
  static const int kHandleFieldNumber = 1;
  inline ::google::protobuf::uint64 handle() const;
  inline void set_handle(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateCancelDownloadInput)
 private:
  inline void set_has_handle();
  inline void clear_has_handle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 handle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateCancelDownloadInput* default_instance_;
};
// -------------------------------------------------------------------

class SWUpdateSetCcdVersionInput : public ::google::protobuf::Message {
 public:
  SWUpdateSetCcdVersionInput();
  virtual ~SWUpdateSetCcdVersionInput();
  
  SWUpdateSetCcdVersionInput(const SWUpdateSetCcdVersionInput& from);
  
  inline SWUpdateSetCcdVersionInput& operator=(const SWUpdateSetCcdVersionInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SWUpdateSetCcdVersionInput& default_instance();
  
  void Swap(SWUpdateSetCcdVersionInput* other);
  
  // implements Message ----------------------------------------------
  
  SWUpdateSetCcdVersionInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SWUpdateSetCcdVersionInput& from);
  void MergeFrom(const SWUpdateSetCcdVersionInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string ccd_guid = 1;
  inline bool has_ccd_guid() const;
  inline void clear_ccd_guid();
  static const int kCcdGuidFieldNumber = 1;
  inline const ::std::string& ccd_guid() const;
  inline void set_ccd_guid(const ::std::string& value);
  inline void set_ccd_guid(const char* value);
  inline void set_ccd_guid(const char* value, size_t size);
  inline ::std::string* mutable_ccd_guid();
  inline ::std::string* release_ccd_guid();
  
  // required string ccd_version = 2;
  inline bool has_ccd_version() const;
  inline void clear_ccd_version();
  static const int kCcdVersionFieldNumber = 2;
  inline const ::std::string& ccd_version() const;
  inline void set_ccd_version(const ::std::string& value);
  inline void set_ccd_version(const char* value);
  inline void set_ccd_version(const char* value, size_t size);
  inline ::std::string* mutable_ccd_version();
  inline ::std::string* release_ccd_version();
  
  // @@protoc_insertion_point(class_scope:ccd.SWUpdateSetCcdVersionInput)
 private:
  inline void set_has_ccd_guid();
  inline void clear_has_ccd_guid();
  inline void set_has_ccd_version();
  inline void clear_has_ccd_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ccd_guid_;
  ::std::string* ccd_version_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SWUpdateSetCcdVersionInput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSystemStateInput : public ::google::protobuf::Message {
 public:
  UpdateSystemStateInput();
  virtual ~UpdateSystemStateInput();
  
  UpdateSystemStateInput(const UpdateSystemStateInput& from);
  
  inline UpdateSystemStateInput& operator=(const UpdateSystemStateInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSystemStateInput& default_instance();
  
  void Swap(UpdateSystemStateInput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateSystemStateInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSystemStateInput& from);
  void MergeFrom(const UpdateSystemStateInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool do_shutdown = 12 [default = false];
  inline bool has_do_shutdown() const;
  inline void clear_do_shutdown();
  static const int kDoShutdownFieldNumber = 12;
  inline bool do_shutdown() const;
  inline void set_do_shutdown(bool value);
  
  // optional bool report_network_connected = 13 [default = false];
  inline bool has_report_network_connected() const;
  inline void clear_report_network_connected();
  static const int kReportNetworkConnectedFieldNumber = 13;
  inline bool report_network_connected() const;
  inline void set_report_network_connected(bool value);
  
  // optional bool report_different_network = 23 [default = false];
  inline bool has_report_different_network() const;
  inline void clear_report_different_network();
  static const int kReportDifferentNetworkFieldNumber = 23;
  inline bool report_different_network() const;
  inline void set_report_different_network(bool value);
  
  // optional sint32 background_mode_interval_sec = 8;
  inline bool has_background_mode_interval_sec() const;
  inline void clear_background_mode_interval_sec();
  static const int kBackgroundModeIntervalSecFieldNumber = 8;
  inline ::google::protobuf::int32 background_mode_interval_sec() const;
  inline void set_background_mode_interval_sec(::google::protobuf::int32 value);
  
  // optional bool perform_background_tasks = 9 [default = false];
  inline bool has_perform_background_tasks() const;
  inline void clear_perform_background_tasks();
  static const int kPerformBackgroundTasksFieldNumber = 9;
  inline bool perform_background_tasks() const;
  inline void set_perform_background_tasks(bool value);
  
  // optional bool log_caches = 20 [default = false];
  inline bool has_log_caches() const;
  inline void clear_log_caches();
  static const int kLogCachesFieldNumber = 20;
  inline bool log_caches() const;
  inline void set_log_caches(bool value);
  
  // optional bool only_mobile_network_available = 21;
  inline bool has_only_mobile_network_available() const;
  inline void clear_only_mobile_network_available();
  static const int kOnlyMobileNetworkAvailableFieldNumber = 21;
  inline bool only_mobile_network_available() const;
  inline void set_only_mobile_network_available(bool value);
  
  // optional bool stream_power_mode = 22;
  inline bool has_stream_power_mode() const;
  inline void clear_stream_power_mode();
  static const int kStreamPowerModeFieldNumber = 22;
  inline bool stream_power_mode() const;
  inline void set_stream_power_mode(bool value);
  
  // optional bool enable_ioac = 24;
  inline bool has_enable_ioac() const;
  inline void clear_enable_ioac();
  static const int kEnableIoacFieldNumber = 24;
  inline bool enable_ioac() const;
  inline void set_enable_ioac(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateSystemStateInput)
 private:
  inline void set_has_do_shutdown();
  inline void clear_has_do_shutdown();
  inline void set_has_report_network_connected();
  inline void clear_has_report_network_connected();
  inline void set_has_report_different_network();
  inline void clear_has_report_different_network();
  inline void set_has_background_mode_interval_sec();
  inline void clear_has_background_mode_interval_sec();
  inline void set_has_perform_background_tasks();
  inline void clear_has_perform_background_tasks();
  inline void set_has_log_caches();
  inline void clear_has_log_caches();
  inline void set_has_only_mobile_network_available();
  inline void clear_has_only_mobile_network_available();
  inline void set_has_stream_power_mode();
  inline void clear_has_stream_power_mode();
  inline void set_has_enable_ioac();
  inline void clear_has_enable_ioac();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool do_shutdown_;
  bool report_network_connected_;
  bool report_different_network_;
  bool perform_background_tasks_;
  ::google::protobuf::int32 background_mode_interval_sec_;
  bool log_caches_;
  bool only_mobile_network_available_;
  bool stream_power_mode_;
  bool enable_ioac_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateSystemStateInput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSystemStateOutput : public ::google::protobuf::Message {
 public:
  UpdateSystemStateOutput();
  virtual ~UpdateSystemStateOutput();
  
  UpdateSystemStateOutput(const UpdateSystemStateOutput& from);
  
  inline UpdateSystemStateOutput& operator=(const UpdateSystemStateOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSystemStateOutput& default_instance();
  
  void Swap(UpdateSystemStateOutput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateSystemStateOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSystemStateOutput& from);
  void MergeFrom(const UpdateSystemStateOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 do_shutdown = 12;
  inline bool has_do_shutdown() const;
  inline void clear_do_shutdown();
  static const int kDoShutdownFieldNumber = 12;
  inline ::google::protobuf::int32 do_shutdown() const;
  inline void set_do_shutdown(::google::protobuf::int32 value);
  
  // optional sint32 background_mode_interval_err = 8;
  inline bool has_background_mode_interval_err() const;
  inline void clear_background_mode_interval_err();
  static const int kBackgroundModeIntervalErrFieldNumber = 8;
  inline ::google::protobuf::int32 background_mode_interval_err() const;
  inline void set_background_mode_interval_err(::google::protobuf::int32 value);
  
  // optional sint32 perform_background_tasks_err = 9;
  inline bool has_perform_background_tasks_err() const;
  inline void clear_perform_background_tasks_err();
  static const int kPerformBackgroundTasksErrFieldNumber = 9;
  inline ::google::protobuf::int32 perform_background_tasks_err() const;
  inline void set_perform_background_tasks_err(::google::protobuf::int32 value);
  
  // optional sint32 log_caches_err = 20;
  inline bool has_log_caches_err() const;
  inline void clear_log_caches_err();
  static const int kLogCachesErrFieldNumber = 20;
  inline ::google::protobuf::int32 log_caches_err() const;
  inline void set_log_caches_err(::google::protobuf::int32 value);
  
  // optional sint32 only_mobile_network_available_err = 21;
  inline bool has_only_mobile_network_available_err() const;
  inline void clear_only_mobile_network_available_err();
  static const int kOnlyMobileNetworkAvailableErrFieldNumber = 21;
  inline ::google::protobuf::int32 only_mobile_network_available_err() const;
  inline void set_only_mobile_network_available_err(::google::protobuf::int32 value);
  
  // optional sint32 stream_power_mode_err = 22;
  inline bool has_stream_power_mode_err() const;
  inline void clear_stream_power_mode_err();
  static const int kStreamPowerModeErrFieldNumber = 22;
  inline ::google::protobuf::int32 stream_power_mode_err() const;
  inline void set_stream_power_mode_err(::google::protobuf::int32 value);
  
  // optional sint32 enable_ioac_err = 24;
  inline bool has_enable_ioac_err() const;
  inline void clear_enable_ioac_err();
  static const int kEnableIoacErrFieldNumber = 24;
  inline ::google::protobuf::int32 enable_ioac_err() const;
  inline void set_enable_ioac_err(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateSystemStateOutput)
 private:
  inline void set_has_do_shutdown();
  inline void clear_has_do_shutdown();
  inline void set_has_background_mode_interval_err();
  inline void clear_has_background_mode_interval_err();
  inline void set_has_perform_background_tasks_err();
  inline void clear_has_perform_background_tasks_err();
  inline void set_has_log_caches_err();
  inline void clear_has_log_caches_err();
  inline void set_has_only_mobile_network_available_err();
  inline void clear_has_only_mobile_network_available_err();
  inline void set_has_stream_power_mode_err();
  inline void clear_has_stream_power_mode_err();
  inline void set_has_enable_ioac_err();
  inline void clear_has_enable_ioac_err();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 do_shutdown_;
  ::google::protobuf::int32 background_mode_interval_err_;
  ::google::protobuf::int32 perform_background_tasks_err_;
  ::google::protobuf::int32 log_caches_err_;
  ::google::protobuf::int32 only_mobile_network_available_err_;
  ::google::protobuf::int32 stream_power_mode_err_;
  ::google::protobuf::int32 enable_ioac_err_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateSystemStateOutput* default_instance_;
};
// -------------------------------------------------------------------

class BeginMetadataTransactionInput : public ::google::protobuf::Message {
 public:
  BeginMetadataTransactionInput();
  virtual ~BeginMetadataTransactionInput();
  
  BeginMetadataTransactionInput(const BeginMetadataTransactionInput& from);
  
  inline BeginMetadataTransactionInput& operator=(const BeginMetadataTransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginMetadataTransactionInput& default_instance();
  
  void Swap(BeginMetadataTransactionInput* other);
  
  // implements Message ----------------------------------------------
  
  BeginMetadataTransactionInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginMetadataTransactionInput& from);
  void MergeFrom(const BeginMetadataTransactionInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string collection_id = 1;
  inline bool has_collection_id() const;
  inline void clear_collection_id();
  static const int kCollectionIdFieldNumber = 1;
  inline const ::std::string& collection_id() const;
  inline void set_collection_id(const ::std::string& value);
  inline void set_collection_id(const char* value);
  inline void set_collection_id(const char* value, size_t size);
  inline ::std::string* mutable_collection_id();
  inline ::std::string* release_collection_id();
  
  // optional uint64 collection_timestamp = 2 [default = 0];
  inline bool has_collection_timestamp() const;
  inline void clear_collection_timestamp();
  static const int kCollectionTimestampFieldNumber = 2;
  inline ::google::protobuf::uint64 collection_timestamp() const;
  inline void set_collection_timestamp(::google::protobuf::uint64 value);
  
  // optional bool reset_collection = 3 [default = false];
  inline bool has_reset_collection() const;
  inline void clear_reset_collection();
  static const int kResetCollectionFieldNumber = 3;
  inline bool reset_collection() const;
  inline void set_reset_collection(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.BeginMetadataTransactionInput)
 private:
  inline void set_has_collection_id();
  inline void clear_has_collection_id();
  inline void set_has_collection_timestamp();
  inline void clear_has_collection_timestamp();
  inline void set_has_reset_collection();
  inline void clear_has_reset_collection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* collection_id_;
  ::google::protobuf::uint64 collection_timestamp_;
  bool reset_collection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static BeginMetadataTransactionInput* default_instance_;
};
// -------------------------------------------------------------------

class UpdateMetadataInput : public ::google::protobuf::Message {
 public:
  UpdateMetadataInput();
  virtual ~UpdateMetadataInput();
  
  UpdateMetadataInput(const UpdateMetadataInput& from);
  
  inline UpdateMetadataInput& operator=(const UpdateMetadataInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMetadataInput& default_instance();
  
  void Swap(UpdateMetadataInput* other);
  
  // implements Message ----------------------------------------------
  
  UpdateMetadataInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateMetadataInput& from);
  void MergeFrom(const UpdateMetadataInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .media_metadata.ContentDirectoryObject metadata = 1;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  inline const ::media_metadata::ContentDirectoryObject& metadata() const;
  inline ::media_metadata::ContentDirectoryObject* mutable_metadata();
  inline ::media_metadata::ContentDirectoryObject* release_metadata();
  
  // @@protoc_insertion_point(class_scope:ccd.UpdateMetadataInput)
 private:
  inline void set_has_metadata();
  inline void clear_has_metadata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::media_metadata::ContentDirectoryObject* metadata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UpdateMetadataInput* default_instance_;
};
// -------------------------------------------------------------------

class DeleteMetadataInput : public ::google::protobuf::Message {
 public:
  DeleteMetadataInput();
  virtual ~DeleteMetadataInput();
  
  DeleteMetadataInput(const DeleteMetadataInput& from);
  
  inline DeleteMetadataInput& operator=(const DeleteMetadataInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteMetadataInput& default_instance();
  
  void Swap(DeleteMetadataInput* other);
  
  // implements Message ----------------------------------------------
  
  DeleteMetadataInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteMetadataInput& from);
  void MergeFrom(const DeleteMetadataInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string object_id = 1;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 1;
  inline const ::std::string& object_id() const;
  inline void set_object_id(const ::std::string& value);
  inline void set_object_id(const char* value);
  inline void set_object_id(const char* value, size_t size);
  inline ::std::string* mutable_object_id();
  inline ::std::string* release_object_id();
  
  // @@protoc_insertion_point(class_scope:ccd.DeleteMetadataInput)
 private:
  inline void set_has_object_id();
  inline void clear_has_object_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* object_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DeleteMetadataInput* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCollectionInput : public ::google::protobuf::Message {
 public:
  DeleteCollectionInput();
  virtual ~DeleteCollectionInput();
  
  DeleteCollectionInput(const DeleteCollectionInput& from);
  
  inline DeleteCollectionInput& operator=(const DeleteCollectionInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCollectionInput& default_instance();
  
  void Swap(DeleteCollectionInput* other);
  
  // implements Message ----------------------------------------------
  
  DeleteCollectionInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCollectionInput& from);
  void MergeFrom(const DeleteCollectionInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string collection_id = 1;
  inline bool has_collection_id() const;
  inline void clear_collection_id();
  static const int kCollectionIdFieldNumber = 1;
  inline const ::std::string& collection_id() const;
  inline void set_collection_id(const ::std::string& value);
  inline void set_collection_id(const char* value);
  inline void set_collection_id(const char* value, size_t size);
  inline ::std::string* mutable_collection_id();
  inline ::std::string* release_collection_id();
  
  // @@protoc_insertion_point(class_scope:ccd.DeleteCollectionInput)
 private:
  inline void set_has_collection_id();
  inline void clear_has_collection_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* collection_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DeleteCollectionInput* default_instance_;
};
// -------------------------------------------------------------------

class GetCollectionDetailsInput : public ::google::protobuf::Message {
 public:
  GetCollectionDetailsInput();
  virtual ~GetCollectionDetailsInput();
  
  GetCollectionDetailsInput(const GetCollectionDetailsInput& from);
  
  inline GetCollectionDetailsInput& operator=(const GetCollectionDetailsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCollectionDetailsInput& default_instance();
  
  void Swap(GetCollectionDetailsInput* other);
  
  // implements Message ----------------------------------------------
  
  GetCollectionDetailsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCollectionDetailsInput& from);
  void MergeFrom(const GetCollectionDetailsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string collection_id = 1;
  inline bool has_collection_id() const;
  inline void clear_collection_id();
  static const int kCollectionIdFieldNumber = 1;
  inline const ::std::string& collection_id() const;
  inline void set_collection_id(const ::std::string& value);
  inline void set_collection_id(const char* value);
  inline void set_collection_id(const char* value, size_t size);
  inline ::std::string* mutable_collection_id();
  inline ::std::string* release_collection_id();
  
  // @@protoc_insertion_point(class_scope:ccd.GetCollectionDetailsInput)
 private:
  inline void set_has_collection_id();
  inline void clear_has_collection_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* collection_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetCollectionDetailsInput* default_instance_;
};
// -------------------------------------------------------------------

class GetCollectionDetailsOutput : public ::google::protobuf::Message {
 public:
  GetCollectionDetailsOutput();
  virtual ~GetCollectionDetailsOutput();
  
  GetCollectionDetailsOutput(const GetCollectionDetailsOutput& from);
  
  inline GetCollectionDetailsOutput& operator=(const GetCollectionDetailsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetCollectionDetailsOutput& default_instance();
  
  void Swap(GetCollectionDetailsOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetCollectionDetailsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetCollectionDetailsOutput& from);
  void MergeFrom(const GetCollectionDetailsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .media_metadata.ContentDirectoryObject metadata = 1;
  inline int metadata_size() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  inline const ::media_metadata::ContentDirectoryObject& metadata(int index) const;
  inline ::media_metadata::ContentDirectoryObject* mutable_metadata(int index);
  inline ::media_metadata::ContentDirectoryObject* add_metadata();
  inline const ::google::protobuf::RepeatedPtrField< ::media_metadata::ContentDirectoryObject >&
      metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::media_metadata::ContentDirectoryObject >*
      mutable_metadata();
  
  // @@protoc_insertion_point(class_scope:ccd.GetCollectionDetailsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::media_metadata::ContentDirectoryObject > metadata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetCollectionDetailsOutput* default_instance_;
};
// -------------------------------------------------------------------

class BeginCatalogInput : public ::google::protobuf::Message {
 public:
  BeginCatalogInput();
  virtual ~BeginCatalogInput();
  
  BeginCatalogInput(const BeginCatalogInput& from);
  
  inline BeginCatalogInput& operator=(const BeginCatalogInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginCatalogInput& default_instance();
  
  void Swap(BeginCatalogInput* other);
  
  // implements Message ----------------------------------------------
  
  BeginCatalogInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginCatalogInput& from);
  void MergeFrom(const BeginCatalogInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  inline bool has_catalog_type() const;
  inline void clear_catalog_type();
  static const int kCatalogTypeFieldNumber = 1;
  inline media_metadata::CatalogType_t catalog_type() const;
  inline void set_catalog_type(media_metadata::CatalogType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.BeginCatalogInput)
 private:
  inline void set_has_catalog_type();
  inline void clear_has_catalog_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int catalog_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static BeginCatalogInput* default_instance_;
};
// -------------------------------------------------------------------

class CommitCatalogInput : public ::google::protobuf::Message {
 public:
  CommitCatalogInput();
  virtual ~CommitCatalogInput();
  
  CommitCatalogInput(const CommitCatalogInput& from);
  
  inline CommitCatalogInput& operator=(const CommitCatalogInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitCatalogInput& default_instance();
  
  void Swap(CommitCatalogInput* other);
  
  // implements Message ----------------------------------------------
  
  CommitCatalogInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitCatalogInput& from);
  void MergeFrom(const CommitCatalogInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  inline bool has_catalog_type() const;
  inline void clear_catalog_type();
  static const int kCatalogTypeFieldNumber = 1;
  inline media_metadata::CatalogType_t catalog_type() const;
  inline void set_catalog_type(media_metadata::CatalogType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.CommitCatalogInput)
 private:
  inline void set_has_catalog_type();
  inline void clear_has_catalog_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int catalog_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CommitCatalogInput* default_instance_;
};
// -------------------------------------------------------------------

class EndCatalogInput : public ::google::protobuf::Message {
 public:
  EndCatalogInput();
  virtual ~EndCatalogInput();
  
  EndCatalogInput(const EndCatalogInput& from);
  
  inline EndCatalogInput& operator=(const EndCatalogInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EndCatalogInput& default_instance();
  
  void Swap(EndCatalogInput* other);
  
  // implements Message ----------------------------------------------
  
  EndCatalogInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndCatalogInput& from);
  void MergeFrom(const EndCatalogInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  inline bool has_catalog_type() const;
  inline void clear_catalog_type();
  static const int kCatalogTypeFieldNumber = 1;
  inline media_metadata::CatalogType_t catalog_type() const;
  inline void set_catalog_type(media_metadata::CatalogType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.EndCatalogInput)
 private:
  inline void set_has_catalog_type();
  inline void clear_has_catalog_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int catalog_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static EndCatalogInput* default_instance_;
};
// -------------------------------------------------------------------

class DeleteCatalogInput : public ::google::protobuf::Message {
 public:
  DeleteCatalogInput();
  virtual ~DeleteCatalogInput();
  
  DeleteCatalogInput(const DeleteCatalogInput& from);
  
  inline DeleteCatalogInput& operator=(const DeleteCatalogInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteCatalogInput& default_instance();
  
  void Swap(DeleteCatalogInput* other);
  
  // implements Message ----------------------------------------------
  
  DeleteCatalogInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteCatalogInput& from);
  void MergeFrom(const DeleteCatalogInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .media_metadata.CatalogType_t catalog_type = 1;
  inline bool has_catalog_type() const;
  inline void clear_catalog_type();
  static const int kCatalogTypeFieldNumber = 1;
  inline media_metadata::CatalogType_t catalog_type() const;
  inline void set_catalog_type(media_metadata::CatalogType_t value);
  
  // @@protoc_insertion_point(class_scope:ccd.DeleteCatalogInput)
 private:
  inline void set_has_catalog_type();
  inline void clear_has_catalog_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int catalog_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static DeleteCatalogInput* default_instance_;
};
// -------------------------------------------------------------------

class MSAGetContentURLInput : public ::google::protobuf::Message {
 public:
  MSAGetContentURLInput();
  virtual ~MSAGetContentURLInput();
  
  MSAGetContentURLInput(const MSAGetContentURLInput& from);
  
  inline MSAGetContentURLInput& operator=(const MSAGetContentURLInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSAGetContentURLInput& default_instance();
  
  void Swap(MSAGetContentURLInput* other);
  
  // implements Message ----------------------------------------------
  
  MSAGetContentURLInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSAGetContentURLInput& from);
  void MergeFrom(const MSAGetContentURLInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required .media_metadata.CatalogType_t catalog_type = 2;
  inline bool has_catalog_type() const;
  inline void clear_catalog_type();
  static const int kCatalogTypeFieldNumber = 2;
  inline media_metadata::CatalogType_t catalog_type() const;
  inline void set_catalog_type(media_metadata::CatalogType_t value);
  
  // required string collection_id = 3;
  inline bool has_collection_id() const;
  inline void clear_collection_id();
  static const int kCollectionIdFieldNumber = 3;
  inline const ::std::string& collection_id() const;
  inline void set_collection_id(const ::std::string& value);
  inline void set_collection_id(const char* value);
  inline void set_collection_id(const char* value, size_t size);
  inline ::std::string* mutable_collection_id();
  inline ::std::string* release_collection_id();
  
  // required string object_id = 4;
  inline bool has_object_id() const;
  inline void clear_object_id();
  static const int kObjectIdFieldNumber = 4;
  inline const ::std::string& object_id() const;
  inline void set_object_id(const ::std::string& value);
  inline void set_object_id(const char* value);
  inline void set_object_id(const char* value, size_t size);
  inline ::std::string* mutable_object_id();
  inline ::std::string* release_object_id();
  
  // optional bool is_thumb = 5 [default = false];
  inline bool has_is_thumb() const;
  inline void clear_is_thumb();
  static const int kIsThumbFieldNumber = 5;
  inline bool is_thumb() const;
  inline void set_is_thumb(bool value);
  
  // @@protoc_insertion_point(class_scope:ccd.MSAGetContentURLInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_catalog_type();
  inline void clear_has_catalog_type();
  inline void set_has_collection_id();
  inline void clear_has_collection_id();
  inline void set_has_object_id();
  inline void clear_has_object_id();
  inline void set_has_is_thumb();
  inline void clear_has_is_thumb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* collection_id_;
  int catalog_type_;
  bool is_thumb_;
  ::std::string* object_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static MSAGetContentURLInput* default_instance_;
};
// -------------------------------------------------------------------

class MSAGetContentURLOutput : public ::google::protobuf::Message {
 public:
  MSAGetContentURLOutput();
  virtual ~MSAGetContentURLOutput();
  
  MSAGetContentURLOutput(const MSAGetContentURLOutput& from);
  
  inline MSAGetContentURLOutput& operator=(const MSAGetContentURLOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MSAGetContentURLOutput& default_instance();
  
  void Swap(MSAGetContentURLOutput* other);
  
  // implements Message ----------------------------------------------
  
  MSAGetContentURLOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSAGetContentURLOutput& from);
  void MergeFrom(const MSAGetContentURLOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // @@protoc_insertion_point(class_scope:ccd.MSAGetContentURLOutput)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static MSAGetContentURLOutput* default_instance_;
};
// -------------------------------------------------------------------

class MCAQueryMetadataObjectsInput : public ::google::protobuf::Message {
 public:
  MCAQueryMetadataObjectsInput();
  virtual ~MCAQueryMetadataObjectsInput();
  
  MCAQueryMetadataObjectsInput(const MCAQueryMetadataObjectsInput& from);
  
  inline MCAQueryMetadataObjectsInput& operator=(const MCAQueryMetadataObjectsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MCAQueryMetadataObjectsInput& default_instance();
  
  void Swap(MCAQueryMetadataObjectsInput* other);
  
  // implements Message ----------------------------------------------
  
  MCAQueryMetadataObjectsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MCAQueryMetadataObjectsInput& from);
  void MergeFrom(const MCAQueryMetadataObjectsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 cloud_device_id = 1;
  inline bool has_cloud_device_id() const;
  inline void clear_cloud_device_id();
  static const int kCloudDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 cloud_device_id() const;
  inline void set_cloud_device_id(::google::protobuf::uint64 value);
  
  // required .media_metadata.DBFilterType_t filter_field = 2;
  inline bool has_filter_field() const;
  inline void clear_filter_field();
  static const int kFilterFieldFieldNumber = 2;
  inline media_metadata::DBFilterType_t filter_field() const;
  inline void set_filter_field(media_metadata::DBFilterType_t value);
  
  // optional string search_field = 3;
  inline bool has_search_field() const;
  inline void clear_search_field();
  static const int kSearchFieldFieldNumber = 3;
  inline const ::std::string& search_field() const;
  inline void set_search_field(const ::std::string& value);
  inline void set_search_field(const char* value);
  inline void set_search_field(const char* value, size_t size);
  inline ::std::string* mutable_search_field();
  inline ::std::string* release_search_field();
  
  // optional string sort_field = 4;
  inline bool has_sort_field() const;
  inline void clear_sort_field();
  static const int kSortFieldFieldNumber = 4;
  inline const ::std::string& sort_field() const;
  inline void set_sort_field(const ::std::string& value);
  inline void set_sort_field(const char* value);
  inline void set_sort_field(const char* value, size_t size);
  inline ::std::string* mutable_sort_field();
  inline ::std::string* release_sort_field();
  
  // @@protoc_insertion_point(class_scope:ccd.MCAQueryMetadataObjectsInput)
 private:
  inline void set_has_cloud_device_id();
  inline void clear_has_cloud_device_id();
  inline void set_has_filter_field();
  inline void clear_has_filter_field();
  inline void set_has_search_field();
  inline void clear_has_search_field();
  inline void set_has_sort_field();
  inline void clear_has_sort_field();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 cloud_device_id_;
  ::std::string* search_field_;
  ::std::string* sort_field_;
  int filter_field_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static MCAQueryMetadataObjectsInput* default_instance_;
};
// -------------------------------------------------------------------

class MCAQueryMetadataObjectsOutput : public ::google::protobuf::Message {
 public:
  MCAQueryMetadataObjectsOutput();
  virtual ~MCAQueryMetadataObjectsOutput();
  
  MCAQueryMetadataObjectsOutput(const MCAQueryMetadataObjectsOutput& from);
  
  inline MCAQueryMetadataObjectsOutput& operator=(const MCAQueryMetadataObjectsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MCAQueryMetadataObjectsOutput& default_instance();
  
  void Swap(MCAQueryMetadataObjectsOutput* other);
  
  // implements Message ----------------------------------------------
  
  MCAQueryMetadataObjectsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MCAQueryMetadataObjectsOutput& from);
  void MergeFrom(const MCAQueryMetadataObjectsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .media_metadata.MCAMetadataQueryObject content_objects = 1;
  inline int content_objects_size() const;
  inline void clear_content_objects();
  static const int kContentObjectsFieldNumber = 1;
  inline const ::media_metadata::MCAMetadataQueryObject& content_objects(int index) const;
  inline ::media_metadata::MCAMetadataQueryObject* mutable_content_objects(int index);
  inline ::media_metadata::MCAMetadataQueryObject* add_content_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::media_metadata::MCAMetadataQueryObject >&
      content_objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::media_metadata::MCAMetadataQueryObject >*
      mutable_content_objects();
  
  // @@protoc_insertion_point(class_scope:ccd.MCAQueryMetadataObjectsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::media_metadata::MCAMetadataQueryObject > content_objects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static MCAQueryMetadataObjectsOutput* default_instance_;
};
// -------------------------------------------------------------------

class RequestPairingInput : public ::google::protobuf::Message {
 public:
  RequestPairingInput();
  virtual ~RequestPairingInput();
  
  RequestPairingInput(const RequestPairingInput& from);
  
  inline RequestPairingInput& operator=(const RequestPairingInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPairingInput& default_instance();
  
  void Swap(RequestPairingInput* other);
  
  // implements Message ----------------------------------------------
  
  RequestPairingInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPairingInput& from);
  void MergeFrom(const RequestPairingInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string host_hwid = 1;
  inline bool has_host_hwid() const;
  inline void clear_host_hwid();
  static const int kHostHwidFieldNumber = 1;
  inline const ::std::string& host_hwid() const;
  inline void set_host_hwid(const ::std::string& value);
  inline void set_host_hwid(const char* value);
  inline void set_host_hwid(const char* value, size_t size);
  inline ::std::string* mutable_host_hwid();
  inline ::std::string* release_host_hwid();
  
  // optional fixed64 host_deviceid = 2;
  inline bool has_host_deviceid() const;
  inline void clear_host_deviceid();
  static const int kHostDeviceidFieldNumber = 2;
  inline ::google::protobuf::uint64 host_deviceid() const;
  inline void set_host_deviceid(::google::protobuf::uint64 value);
  
  // optional string pin = 3;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 3;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  
  // required string device_hwid = 4;
  inline bool has_device_hwid() const;
  inline void clear_device_hwid();
  static const int kDeviceHwidFieldNumber = 4;
  inline const ::std::string& device_hwid() const;
  inline void set_device_hwid(const ::std::string& value);
  inline void set_device_hwid(const char* value);
  inline void set_device_hwid(const char* value, size_t size);
  inline ::std::string* mutable_device_hwid();
  inline ::std::string* release_device_hwid();
  
  // repeated .ccd.PairingRequestAttribute pairing_attributes = 5;
  inline int pairing_attributes_size() const;
  inline void clear_pairing_attributes();
  static const int kPairingAttributesFieldNumber = 5;
  inline const ::ccd::PairingRequestAttribute& pairing_attributes(int index) const;
  inline ::ccd::PairingRequestAttribute* mutable_pairing_attributes(int index);
  inline ::ccd::PairingRequestAttribute* add_pairing_attributes();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >&
      pairing_attributes() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >*
      mutable_pairing_attributes();
  
  // @@protoc_insertion_point(class_scope:ccd.RequestPairingInput)
 private:
  inline void set_has_host_hwid();
  inline void clear_has_host_hwid();
  inline void set_has_host_deviceid();
  inline void clear_has_host_deviceid();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_device_hwid();
  inline void clear_has_device_hwid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_hwid_;
  ::google::protobuf::uint64 host_deviceid_;
  ::std::string* pin_;
  ::std::string* device_hwid_;
  ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute > pairing_attributes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RequestPairingInput* default_instance_;
};
// -------------------------------------------------------------------

class RequestPairingOutput : public ::google::protobuf::Message {
 public:
  RequestPairingOutput();
  virtual ~RequestPairingOutput();
  
  RequestPairingOutput(const RequestPairingOutput& from);
  
  inline RequestPairingOutput& operator=(const RequestPairingOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPairingOutput& default_instance();
  
  void Swap(RequestPairingOutput* other);
  
  // implements Message ----------------------------------------------
  
  RequestPairingOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPairingOutput& from);
  void MergeFrom(const RequestPairingOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pairing_token = 1;
  inline bool has_pairing_token() const;
  inline void clear_pairing_token();
  static const int kPairingTokenFieldNumber = 1;
  inline const ::std::string& pairing_token() const;
  inline void set_pairing_token(const ::std::string& value);
  inline void set_pairing_token(const char* value);
  inline void set_pairing_token(const char* value, size_t size);
  inline ::std::string* mutable_pairing_token();
  inline ::std::string* release_pairing_token();
  
  // @@protoc_insertion_point(class_scope:ccd.RequestPairingOutput)
 private:
  inline void set_has_pairing_token();
  inline void clear_has_pairing_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pairing_token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RequestPairingOutput* default_instance_;
};
// -------------------------------------------------------------------

class RespondToPairingRequestInput : public ::google::protobuf::Message {
 public:
  RespondToPairingRequestInput();
  virtual ~RespondToPairingRequestInput();
  
  RespondToPairingRequestInput(const RespondToPairingRequestInput& from);
  
  inline RespondToPairingRequestInput& operator=(const RespondToPairingRequestInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RespondToPairingRequestInput& default_instance();
  
  void Swap(RespondToPairingRequestInput* other);
  
  // implements Message ----------------------------------------------
  
  RespondToPairingRequestInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RespondToPairingRequestInput& from);
  void MergeFrom(const RespondToPairingRequestInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string transaction_id = 1;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 1;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const char* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  
  // required int32 accepted_pairing = 2;
  inline bool has_accepted_pairing() const;
  inline void clear_accepted_pairing();
  static const int kAcceptedPairingFieldNumber = 2;
  inline ::google::protobuf::int32 accepted_pairing() const;
  inline void set_accepted_pairing(::google::protobuf::int32 value);
  
  // required fixed64 user_id = 3;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.RespondToPairingRequestInput)
 private:
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();
  inline void set_has_accepted_pairing();
  inline void clear_has_accepted_pairing();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* transaction_id_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 accepted_pairing_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RespondToPairingRequestInput* default_instance_;
};
// -------------------------------------------------------------------

class RequestPairingPinInput : public ::google::protobuf::Message {
 public:
  RequestPairingPinInput();
  virtual ~RequestPairingPinInput();
  
  RequestPairingPinInput(const RequestPairingPinInput& from);
  
  inline RequestPairingPinInput& operator=(const RequestPairingPinInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPairingPinInput& default_instance();
  
  void Swap(RequestPairingPinInput* other);
  
  // implements Message ----------------------------------------------
  
  RequestPairingPinInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPairingPinInput& from);
  void MergeFrom(const RequestPairingPinInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 device_id = 1;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // required fixed64 user_id = 2;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.RequestPairingPinInput)
 private:
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 device_id_;
  ::google::protobuf::uint64 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RequestPairingPinInput* default_instance_;
};
// -------------------------------------------------------------------

class RequestPairingPinOutput : public ::google::protobuf::Message {
 public:
  RequestPairingPinOutput();
  virtual ~RequestPairingPinOutput();
  
  RequestPairingPinOutput(const RequestPairingPinOutput& from);
  
  inline RequestPairingPinOutput& operator=(const RequestPairingPinOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestPairingPinOutput& default_instance();
  
  void Swap(RequestPairingPinOutput* other);
  
  // implements Message ----------------------------------------------
  
  RequestPairingPinOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestPairingPinOutput& from);
  void MergeFrom(const RequestPairingPinOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pin = 1;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 1;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  
  // @@protoc_insertion_point(class_scope:ccd.RequestPairingPinOutput)
 private:
  inline void set_has_pin();
  inline void clear_has_pin();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pin_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RequestPairingPinOutput* default_instance_;
};
// -------------------------------------------------------------------

class GetPairingStatusInput : public ::google::protobuf::Message {
 public:
  GetPairingStatusInput();
  virtual ~GetPairingStatusInput();
  
  GetPairingStatusInput(const GetPairingStatusInput& from);
  
  inline GetPairingStatusInput& operator=(const GetPairingStatusInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPairingStatusInput& default_instance();
  
  void Swap(GetPairingStatusInput* other);
  
  // implements Message ----------------------------------------------
  
  GetPairingStatusInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPairingStatusInput& from);
  void MergeFrom(const GetPairingStatusInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string pairing_token = 1;
  inline bool has_pairing_token() const;
  inline void clear_pairing_token();
  static const int kPairingTokenFieldNumber = 1;
  inline const ::std::string& pairing_token() const;
  inline void set_pairing_token(const ::std::string& value);
  inline void set_pairing_token(const char* value);
  inline void set_pairing_token(const char* value, size_t size);
  inline ::std::string* mutable_pairing_token();
  inline ::std::string* release_pairing_token();
  
  // @@protoc_insertion_point(class_scope:ccd.GetPairingStatusInput)
 private:
  inline void set_has_pairing_token();
  inline void clear_has_pairing_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* pairing_token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetPairingStatusInput* default_instance_;
};
// -------------------------------------------------------------------

class GetPairingStatusOutput : public ::google::protobuf::Message {
 public:
  GetPairingStatusOutput();
  virtual ~GetPairingStatusOutput();
  
  GetPairingStatusOutput(const GetPairingStatusOutput& from);
  
  inline GetPairingStatusOutput& operator=(const GetPairingStatusOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPairingStatusOutput& default_instance();
  
  void Swap(GetPairingStatusOutput* other);
  
  // implements Message ----------------------------------------------
  
  GetPairingStatusOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPairingStatusOutput& from);
  void MergeFrom(const GetPairingStatusOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  
  // @@protoc_insertion_point(class_scope:ccd.GetPairingStatusOutput)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* status_;
  ::std::string* user_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static GetPairingStatusOutput* default_instance_;
};
// -------------------------------------------------------------------

class CCDIQueryPicStreamObjectsInput : public ::google::protobuf::Message {
 public:
  CCDIQueryPicStreamObjectsInput();
  virtual ~CCDIQueryPicStreamObjectsInput();
  
  CCDIQueryPicStreamObjectsInput(const CCDIQueryPicStreamObjectsInput& from);
  
  inline CCDIQueryPicStreamObjectsInput& operator=(const CCDIQueryPicStreamObjectsInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CCDIQueryPicStreamObjectsInput& default_instance();
  
  void Swap(CCDIQueryPicStreamObjectsInput* other);
  
  // implements Message ----------------------------------------------
  
  CCDIQueryPicStreamObjectsInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCDIQueryPicStreamObjectsInput& from);
  void MergeFrom(const CCDIQueryPicStreamObjectsInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ccd.PicStream_DBFilterType_t filter_field = 1;
  inline bool has_filter_field() const;
  inline void clear_filter_field();
  static const int kFilterFieldFieldNumber = 1;
  inline ccd::PicStream_DBFilterType_t filter_field() const;
  inline void set_filter_field(ccd::PicStream_DBFilterType_t value);
  
  // optional string search_field = 2;
  inline bool has_search_field() const;
  inline void clear_search_field();
  static const int kSearchFieldFieldNumber = 2;
  inline const ::std::string& search_field() const;
  inline void set_search_field(const ::std::string& value);
  inline void set_search_field(const char* value);
  inline void set_search_field(const char* value, size_t size);
  inline ::std::string* mutable_search_field();
  inline ::std::string* release_search_field();
  
  // optional string sort_field = 3;
  inline bool has_sort_field() const;
  inline void clear_sort_field();
  static const int kSortFieldFieldNumber = 3;
  inline const ::std::string& sort_field() const;
  inline void set_sort_field(const ::std::string& value);
  inline void set_sort_field(const char* value);
  inline void set_sort_field(const char* value, size_t size);
  inline ::std::string* mutable_sort_field();
  inline ::std::string* release_sort_field();
  
  // @@protoc_insertion_point(class_scope:ccd.CCDIQueryPicStreamObjectsInput)
 private:
  inline void set_has_filter_field();
  inline void clear_has_filter_field();
  inline void set_has_search_field();
  inline void clear_has_search_field();
  inline void set_has_sort_field();
  inline void clear_has_sort_field();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* search_field_;
  ::std::string* sort_field_;
  int filter_field_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CCDIQueryPicStreamObjectsInput* default_instance_;
};
// -------------------------------------------------------------------

class CCDIQueryPicStreamObjectsOutput : public ::google::protobuf::Message {
 public:
  CCDIQueryPicStreamObjectsOutput();
  virtual ~CCDIQueryPicStreamObjectsOutput();
  
  CCDIQueryPicStreamObjectsOutput(const CCDIQueryPicStreamObjectsOutput& from);
  
  inline CCDIQueryPicStreamObjectsOutput& operator=(const CCDIQueryPicStreamObjectsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CCDIQueryPicStreamObjectsOutput& default_instance();
  
  void Swap(CCDIQueryPicStreamObjectsOutput* other);
  
  // implements Message ----------------------------------------------
  
  CCDIQueryPicStreamObjectsOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CCDIQueryPicStreamObjectsOutput& from);
  void MergeFrom(const CCDIQueryPicStreamObjectsOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.PicStreamQueryObject content_objects = 1;
  inline int content_objects_size() const;
  inline void clear_content_objects();
  static const int kContentObjectsFieldNumber = 1;
  inline const ::ccd::PicStreamQueryObject& content_objects(int index) const;
  inline ::ccd::PicStreamQueryObject* mutable_content_objects(int index);
  inline ::ccd::PicStreamQueryObject* add_content_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::PicStreamQueryObject >&
      content_objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::PicStreamQueryObject >*
      mutable_content_objects();
  
  // @@protoc_insertion_point(class_scope:ccd.CCDIQueryPicStreamObjectsOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::PicStreamQueryObject > content_objects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static CCDIQueryPicStreamObjectsOutput* default_instance_;
};
// -------------------------------------------------------------------

class PicStreamQueryObject : public ::google::protobuf::Message {
 public:
  PicStreamQueryObject();
  virtual ~PicStreamQueryObject();
  
  PicStreamQueryObject(const PicStreamQueryObject& from);
  
  inline PicStreamQueryObject& operator=(const PicStreamQueryObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PicStreamQueryObject& default_instance();
  
  void Swap(PicStreamQueryObject* other);
  
  // implements Message ----------------------------------------------
  
  PicStreamQueryObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PicStreamQueryObject& from);
  void MergeFrom(const PicStreamQueryObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ccd.PicStreamContentDirectoryObject pcdo = 1;
  inline bool has_pcdo() const;
  inline void clear_pcdo();
  static const int kPcdoFieldNumber = 1;
  inline const ::ccd::PicStreamContentDirectoryObject& pcdo() const;
  inline ::ccd::PicStreamContentDirectoryObject* mutable_pcdo();
  inline ::ccd::PicStreamContentDirectoryObject* release_pcdo();
  
  // optional .ccd.PicStreamAlbumFields PicStream_album = 2;
  inline bool has_picstream_album() const;
  inline void clear_picstream_album();
  static const int kPicStreamAlbumFieldNumber = 2;
  inline const ::ccd::PicStreamAlbumFields& picstream_album() const;
  inline ::ccd::PicStreamAlbumFields* mutable_picstream_album();
  inline ::ccd::PicStreamAlbumFields* release_picstream_album();
  
  // optional string full_res_url = 3;
  inline bool has_full_res_url() const;
  inline void clear_full_res_url();
  static const int kFullResUrlFieldNumber = 3;
  inline const ::std::string& full_res_url() const;
  inline void set_full_res_url(const ::std::string& value);
  inline void set_full_res_url(const char* value);
  inline void set_full_res_url(const char* value, size_t size);
  inline ::std::string* mutable_full_res_url();
  inline ::std::string* release_full_res_url();
  
  // optional string low_res_url = 4;
  inline bool has_low_res_url() const;
  inline void clear_low_res_url();
  static const int kLowResUrlFieldNumber = 4;
  inline const ::std::string& low_res_url() const;
  inline void set_low_res_url(const ::std::string& value);
  inline void set_low_res_url(const char* value);
  inline void set_low_res_url(const char* value, size_t size);
  inline ::std::string* mutable_low_res_url();
  inline ::std::string* release_low_res_url();
  
  // optional string thumbnail_url = 5;
  inline bool has_thumbnail_url() const;
  inline void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 5;
  inline const ::std::string& thumbnail_url() const;
  inline void set_thumbnail_url(const ::std::string& value);
  inline void set_thumbnail_url(const char* value);
  inline void set_thumbnail_url(const char* value, size_t size);
  inline ::std::string* mutable_thumbnail_url();
  inline ::std::string* release_thumbnail_url();
  
  // @@protoc_insertion_point(class_scope:ccd.PicStreamQueryObject)
 private:
  inline void set_has_pcdo();
  inline void clear_has_pcdo();
  inline void set_has_picstream_album();
  inline void clear_has_picstream_album();
  inline void set_has_full_res_url();
  inline void clear_has_full_res_url();
  inline void set_has_low_res_url();
  inline void clear_has_low_res_url();
  inline void set_has_thumbnail_url();
  inline void clear_has_thumbnail_url();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ccd::PicStreamContentDirectoryObject* pcdo_;
  ::ccd::PicStreamAlbumFields* picstream_album_;
  ::std::string* full_res_url_;
  ::std::string* low_res_url_;
  ::std::string* thumbnail_url_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PicStreamQueryObject* default_instance_;
};
// -------------------------------------------------------------------

class PicStreamContentDirectoryObject : public ::google::protobuf::Message {
 public:
  PicStreamContentDirectoryObject();
  virtual ~PicStreamContentDirectoryObject();
  
  PicStreamContentDirectoryObject(const PicStreamContentDirectoryObject& from);
  
  inline PicStreamContentDirectoryObject& operator=(const PicStreamContentDirectoryObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PicStreamContentDirectoryObject& default_instance();
  
  void Swap(PicStreamContentDirectoryObject* other);
  
  // implements Message ----------------------------------------------
  
  PicStreamContentDirectoryObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PicStreamContentDirectoryObject& from);
  void MergeFrom(const PicStreamContentDirectoryObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string comp_id = 1;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 1;
  inline const ::std::string& comp_id() const;
  inline void set_comp_id(const ::std::string& value);
  inline void set_comp_id(const char* value);
  inline void set_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_comp_id();
  inline ::std::string* release_comp_id();
  
  // repeated string optional_fields = 2;
  inline int optional_fields_size() const;
  inline void clear_optional_fields();
  static const int kOptionalFieldsFieldNumber = 2;
  inline const ::std::string& optional_fields(int index) const;
  inline ::std::string* mutable_optional_fields(int index);
  inline void set_optional_fields(int index, const ::std::string& value);
  inline void set_optional_fields(int index, const char* value);
  inline void set_optional_fields(int index, const char* value, size_t size);
  inline ::std::string* add_optional_fields();
  inline void add_optional_fields(const ::std::string& value);
  inline void add_optional_fields(const char* value);
  inline void add_optional_fields(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& optional_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_optional_fields();
  
  // optional .ccd.PicStreamItemFields picstream_item = 3;
  inline bool has_picstream_item() const;
  inline void clear_picstream_item();
  static const int kPicstreamItemFieldNumber = 3;
  inline const ::ccd::PicStreamItemFields& picstream_item() const;
  inline ::ccd::PicStreamItemFields* mutable_picstream_item();
  inline ::ccd::PicStreamItemFields* release_picstream_item();
  
  // @@protoc_insertion_point(class_scope:ccd.PicStreamContentDirectoryObject)
 private:
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_picstream_item();
  inline void clear_has_picstream_item();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* comp_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> optional_fields_;
  ::ccd::PicStreamItemFields* picstream_item_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PicStreamContentDirectoryObject* default_instance_;
};
// -------------------------------------------------------------------

class PicStreamItemFields : public ::google::protobuf::Message {
 public:
  PicStreamItemFields();
  virtual ~PicStreamItemFields();
  
  PicStreamItemFields(const PicStreamItemFields& from);
  
  inline PicStreamItemFields& operator=(const PicStreamItemFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PicStreamItemFields& default_instance();
  
  void Swap(PicStreamItemFields* other);
  
  // implements Message ----------------------------------------------
  
  PicStreamItemFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PicStreamItemFields& from);
  void MergeFrom(const PicStreamItemFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline const ::std::string& identifier() const;
  inline void set_identifier(const ::std::string& value);
  inline void set_identifier(const char* value);
  inline void set_identifier(const char* value, size_t size);
  inline ::std::string* mutable_identifier();
  inline ::std::string* release_identifier();
  
  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  
  // required string album_name = 3;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 3;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // required uint64 date_time = 4;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 date_time() const;
  inline void set_date_time(::google::protobuf::uint64 value);
  
  // optional uint64 file_size = 5;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // required uint64 ori_deviceid = 6;
  inline bool has_ori_deviceid() const;
  inline void clear_ori_deviceid();
  static const int kOriDeviceidFieldNumber = 6;
  inline ::google::protobuf::uint64 ori_deviceid() const;
  inline void set_ori_deviceid(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.PicStreamItemFields)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_date_time();
  inline void clear_has_date_time();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  inline void set_has_ori_deviceid();
  inline void clear_has_ori_deviceid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* identifier_;
  ::std::string* title_;
  ::std::string* album_name_;
  ::google::protobuf::uint64 date_time_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::uint64 ori_deviceid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PicStreamItemFields* default_instance_;
};
// -------------------------------------------------------------------

class PicStreamAlbumFields : public ::google::protobuf::Message {
 public:
  PicStreamAlbumFields();
  virtual ~PicStreamAlbumFields();
  
  PicStreamAlbumFields(const PicStreamAlbumFields& from);
  
  inline PicStreamAlbumFields& operator=(const PicStreamAlbumFields& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PicStreamAlbumFields& default_instance();
  
  void Swap(PicStreamAlbumFields* other);
  
  // implements Message ----------------------------------------------
  
  PicStreamAlbumFields* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PicStreamAlbumFields& from);
  void MergeFrom(const PicStreamAlbumFields& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string album_name = 1;
  inline bool has_album_name() const;
  inline void clear_album_name();
  static const int kAlbumNameFieldNumber = 1;
  inline const ::std::string& album_name() const;
  inline void set_album_name(const ::std::string& value);
  inline void set_album_name(const char* value);
  inline void set_album_name(const char* value, size_t size);
  inline ::std::string* mutable_album_name();
  inline ::std::string* release_album_name();
  
  // required uint32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);
  
  // required uint64 item_total_size = 3;
  inline bool has_item_total_size() const;
  inline void clear_item_total_size();
  static const int kItemTotalSizeFieldNumber = 3;
  inline ::google::protobuf::uint64 item_total_size() const;
  inline void set_item_total_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.PicStreamAlbumFields)
 private:
  inline void set_has_album_name();
  inline void clear_has_album_name();
  inline void set_has_item_count();
  inline void clear_has_item_count();
  inline void set_has_item_total_size();
  inline void clear_has_item_total_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* album_name_;
  ::google::protobuf::uint64 item_total_size_;
  ::google::protobuf::uint32 item_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static PicStreamAlbumFields* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesStoreFileInput : public ::google::protobuf::Message {
 public:
  SharedFilesStoreFileInput();
  virtual ~SharedFilesStoreFileInput();
  
  SharedFilesStoreFileInput(const SharedFilesStoreFileInput& from);
  
  inline SharedFilesStoreFileInput& operator=(const SharedFilesStoreFileInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesStoreFileInput& default_instance();
  
  void Swap(SharedFilesStoreFileInput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesStoreFileInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesStoreFileInput& from);
  void MergeFrom(const SharedFilesStoreFileInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string abs_file_path = 2;
  inline bool has_abs_file_path() const;
  inline void clear_abs_file_path();
  static const int kAbsFilePathFieldNumber = 2;
  inline const ::std::string& abs_file_path() const;
  inline void set_abs_file_path(const ::std::string& value);
  inline void set_abs_file_path(const char* value);
  inline void set_abs_file_path(const char* value, size_t size);
  inline ::std::string* mutable_abs_file_path();
  inline ::std::string* release_abs_file_path();
  
  // optional string opaque_metadata = 3;
  inline bool has_opaque_metadata() const;
  inline void clear_opaque_metadata();
  static const int kOpaqueMetadataFieldNumber = 3;
  inline const ::std::string& opaque_metadata() const;
  inline void set_opaque_metadata(const ::std::string& value);
  inline void set_opaque_metadata(const char* value);
  inline void set_opaque_metadata(const char* value, size_t size);
  inline ::std::string* mutable_opaque_metadata();
  inline ::std::string* release_opaque_metadata();
  
  // optional string abs_preview_path = 4;
  inline bool has_abs_preview_path() const;
  inline void clear_abs_preview_path();
  static const int kAbsPreviewPathFieldNumber = 4;
  inline const ::std::string& abs_preview_path() const;
  inline void set_abs_preview_path(const ::std::string& value);
  inline void set_abs_preview_path(const char* value);
  inline void set_abs_preview_path(const char* value, size_t size);
  inline ::std::string* mutable_abs_preview_path();
  inline ::std::string* release_abs_preview_path();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesStoreFileInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_abs_file_path();
  inline void clear_has_abs_file_path();
  inline void set_has_opaque_metadata();
  inline void clear_has_opaque_metadata();
  inline void set_has_abs_preview_path();
  inline void clear_has_abs_preview_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* abs_file_path_;
  ::std::string* opaque_metadata_;
  ::std::string* abs_preview_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesStoreFileInput* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesStoreFileOutput : public ::google::protobuf::Message {
 public:
  SharedFilesStoreFileOutput();
  virtual ~SharedFilesStoreFileOutput();
  
  SharedFilesStoreFileOutput(const SharedFilesStoreFileOutput& from);
  
  inline SharedFilesStoreFileOutput& operator=(const SharedFilesStoreFileOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesStoreFileOutput& default_instance();
  
  void Swap(SharedFilesStoreFileOutput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesStoreFileOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesStoreFileOutput& from);
  void MergeFrom(const SharedFilesStoreFileOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional fixed64 comp_id = 1;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 1;
  inline ::google::protobuf::uint64 comp_id() const;
  inline void set_comp_id(::google::protobuf::uint64 value);
  
  // optional string stored_name = 2;
  inline bool has_stored_name() const;
  inline void clear_stored_name();
  static const int kStoredNameFieldNumber = 2;
  inline const ::std::string& stored_name() const;
  inline void set_stored_name(const ::std::string& value);
  inline void set_stored_name(const char* value);
  inline void set_stored_name(const char* value, size_t size);
  inline ::std::string* mutable_stored_name();
  inline ::std::string* release_stored_name();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesStoreFileOutput)
 private:
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_stored_name();
  inline void clear_has_stored_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 comp_id_;
  ::std::string* stored_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesStoreFileOutput* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesShareFileInput : public ::google::protobuf::Message {
 public:
  SharedFilesShareFileInput();
  virtual ~SharedFilesShareFileInput();
  
  SharedFilesShareFileInput(const SharedFilesShareFileInput& from);
  
  inline SharedFilesShareFileInput& operator=(const SharedFilesShareFileInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesShareFileInput& default_instance();
  
  void Swap(SharedFilesShareFileInput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesShareFileInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesShareFileInput& from);
  void MergeFrom(const SharedFilesShareFileInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 comp_id = 2;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 2;
  inline ::google::protobuf::uint64 comp_id() const;
  inline void set_comp_id(::google::protobuf::uint64 value);
  
  // optional string stored_name = 3;
  inline bool has_stored_name() const;
  inline void clear_stored_name();
  static const int kStoredNameFieldNumber = 3;
  inline const ::std::string& stored_name() const;
  inline void set_stored_name(const ::std::string& value);
  inline void set_stored_name(const char* value);
  inline void set_stored_name(const char* value, size_t size);
  inline ::std::string* mutable_stored_name();
  inline ::std::string* release_stored_name();
  
  // repeated string recipient_emails = 4;
  inline int recipient_emails_size() const;
  inline void clear_recipient_emails();
  static const int kRecipientEmailsFieldNumber = 4;
  inline const ::std::string& recipient_emails(int index) const;
  inline ::std::string* mutable_recipient_emails(int index);
  inline void set_recipient_emails(int index, const ::std::string& value);
  inline void set_recipient_emails(int index, const char* value);
  inline void set_recipient_emails(int index, const char* value, size_t size);
  inline ::std::string* add_recipient_emails();
  inline void add_recipient_emails(const ::std::string& value);
  inline void add_recipient_emails(const char* value);
  inline void add_recipient_emails(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recipient_emails() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recipient_emails();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesShareFileInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_stored_name();
  inline void clear_has_stored_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 comp_id_;
  ::std::string* stored_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recipient_emails_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesShareFileInput* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesUnshareFileInput : public ::google::protobuf::Message {
 public:
  SharedFilesUnshareFileInput();
  virtual ~SharedFilesUnshareFileInput();
  
  SharedFilesUnshareFileInput(const SharedFilesUnshareFileInput& from);
  
  inline SharedFilesUnshareFileInput& operator=(const SharedFilesUnshareFileInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesUnshareFileInput& default_instance();
  
  void Swap(SharedFilesUnshareFileInput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesUnshareFileInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesUnshareFileInput& from);
  void MergeFrom(const SharedFilesUnshareFileInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 comp_id = 2;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 2;
  inline ::google::protobuf::uint64 comp_id() const;
  inline void set_comp_id(::google::protobuf::uint64 value);
  
  // optional string stored_name = 3;
  inline bool has_stored_name() const;
  inline void clear_stored_name();
  static const int kStoredNameFieldNumber = 3;
  inline const ::std::string& stored_name() const;
  inline void set_stored_name(const ::std::string& value);
  inline void set_stored_name(const char* value);
  inline void set_stored_name(const char* value, size_t size);
  inline ::std::string* mutable_stored_name();
  inline ::std::string* release_stored_name();
  
  // repeated string recipient_emails = 4;
  inline int recipient_emails_size() const;
  inline void clear_recipient_emails();
  static const int kRecipientEmailsFieldNumber = 4;
  inline const ::std::string& recipient_emails(int index) const;
  inline ::std::string* mutable_recipient_emails(int index);
  inline void set_recipient_emails(int index, const ::std::string& value);
  inline void set_recipient_emails(int index, const char* value);
  inline void set_recipient_emails(int index, const char* value, size_t size);
  inline ::std::string* add_recipient_emails();
  inline void add_recipient_emails(const ::std::string& value);
  inline void add_recipient_emails(const char* value);
  inline void add_recipient_emails(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recipient_emails() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recipient_emails();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesUnshareFileInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_stored_name();
  inline void clear_has_stored_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 comp_id_;
  ::std::string* stored_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recipient_emails_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesUnshareFileInput* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesDeleteSharedFileInput : public ::google::protobuf::Message {
 public:
  SharedFilesDeleteSharedFileInput();
  virtual ~SharedFilesDeleteSharedFileInput();
  
  SharedFilesDeleteSharedFileInput(const SharedFilesDeleteSharedFileInput& from);
  
  inline SharedFilesDeleteSharedFileInput& operator=(const SharedFilesDeleteSharedFileInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesDeleteSharedFileInput& default_instance();
  
  void Swap(SharedFilesDeleteSharedFileInput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesDeleteSharedFileInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesDeleteSharedFileInput& from);
  void MergeFrom(const SharedFilesDeleteSharedFileInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required fixed64 comp_id = 2;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 2;
  inline ::google::protobuf::uint64 comp_id() const;
  inline void set_comp_id(::google::protobuf::uint64 value);
  
  // optional string stored_name = 3;
  inline bool has_stored_name() const;
  inline void clear_stored_name();
  static const int kStoredNameFieldNumber = 3;
  inline const ::std::string& stored_name() const;
  inline void set_stored_name(const ::std::string& value);
  inline void set_stored_name(const char* value);
  inline void set_stored_name(const char* value, size_t size);
  inline ::std::string* mutable_stored_name();
  inline ::std::string* release_stored_name();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesDeleteSharedFileInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_stored_name();
  inline void clear_has_stored_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 comp_id_;
  ::std::string* stored_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesDeleteSharedFileInput* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesQueryInput : public ::google::protobuf::Message {
 public:
  SharedFilesQueryInput();
  virtual ~SharedFilesQueryInput();
  
  SharedFilesQueryInput(const SharedFilesQueryInput& from);
  
  inline SharedFilesQueryInput& operator=(const SharedFilesQueryInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesQueryInput& default_instance();
  
  void Swap(SharedFilesQueryInput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesQueryInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesQueryInput& from);
  void MergeFrom(const SharedFilesQueryInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required .ccd.SyncFeature_t sync_feature = 2;
  inline bool has_sync_feature() const;
  inline void clear_sync_feature();
  static const int kSyncFeatureFieldNumber = 2;
  inline ccd::SyncFeature_t sync_feature() const;
  inline void set_sync_feature(ccd::SyncFeature_t value);
  
  // optional string search_field = 3;
  inline bool has_search_field() const;
  inline void clear_search_field();
  static const int kSearchFieldFieldNumber = 3;
  inline const ::std::string& search_field() const;
  inline void set_search_field(const ::std::string& value);
  inline void set_search_field(const char* value);
  inline void set_search_field(const char* value, size_t size);
  inline ::std::string* mutable_search_field();
  inline ::std::string* release_search_field();
  
  // optional string sort_field = 4;
  inline bool has_sort_field() const;
  inline void clear_sort_field();
  static const int kSortFieldFieldNumber = 4;
  inline const ::std::string& sort_field() const;
  inline void set_sort_field(const ::std::string& value);
  inline void set_sort_field(const char* value);
  inline void set_sort_field(const char* value, size_t size);
  inline ::std::string* mutable_sort_field();
  inline ::std::string* release_sort_field();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesQueryInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sync_feature();
  inline void clear_has_sync_feature();
  inline void set_has_search_field();
  inline void clear_has_search_field();
  inline void set_has_sort_field();
  inline void clear_has_sort_field();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* search_field_;
  ::std::string* sort_field_;
  int sync_feature_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesQueryInput* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesQueryObject : public ::google::protobuf::Message {
 public:
  SharedFilesQueryObject();
  virtual ~SharedFilesQueryObject();
  
  SharedFilesQueryObject(const SharedFilesQueryObject& from);
  
  inline SharedFilesQueryObject& operator=(const SharedFilesQueryObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesQueryObject& default_instance();
  
  void Swap(SharedFilesQueryObject* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesQueryObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesQueryObject& from);
  void MergeFrom(const SharedFilesQueryObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 comp_id = 1;
  inline bool has_comp_id() const;
  inline void clear_comp_id();
  static const int kCompIdFieldNumber = 1;
  inline ::google::protobuf::uint64 comp_id() const;
  inline void set_comp_id(::google::protobuf::uint64 value);
  
  // optional fixed64 revision = 2;
  inline bool has_revision() const;
  inline void clear_revision();
  static const int kRevisionFieldNumber = 2;
  inline ::google::protobuf::uint64 revision() const;
  inline void set_revision(::google::protobuf::uint64 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string content_url = 4;
  inline bool has_content_url() const;
  inline void clear_content_url();
  static const int kContentUrlFieldNumber = 4;
  inline const ::std::string& content_url() const;
  inline void set_content_url(const ::std::string& value);
  inline void set_content_url(const char* value);
  inline void set_content_url(const char* value, size_t size);
  inline ::std::string* mutable_content_url();
  inline ::std::string* release_content_url();
  
  // optional string preview_url = 5;
  inline bool has_preview_url() const;
  inline void clear_preview_url();
  static const int kPreviewUrlFieldNumber = 5;
  inline const ::std::string& preview_url() const;
  inline void set_preview_url(const ::std::string& value);
  inline void set_preview_url(const char* value);
  inline void set_preview_url(const char* value, size_t size);
  inline ::std::string* mutable_preview_url();
  inline ::std::string* release_preview_url();
  
  // optional string opaque_metadata = 6;
  inline bool has_opaque_metadata() const;
  inline void clear_opaque_metadata();
  static const int kOpaqueMetadataFieldNumber = 6;
  inline const ::std::string& opaque_metadata() const;
  inline void set_opaque_metadata(const ::std::string& value);
  inline void set_opaque_metadata(const char* value);
  inline void set_opaque_metadata(const char* value, size_t size);
  inline ::std::string* mutable_opaque_metadata();
  inline ::std::string* release_opaque_metadata();
  
  // repeated string recipient_list = 7;
  inline int recipient_list_size() const;
  inline void clear_recipient_list();
  static const int kRecipientListFieldNumber = 7;
  inline const ::std::string& recipient_list(int index) const;
  inline ::std::string* mutable_recipient_list(int index);
  inline void set_recipient_list(int index, const ::std::string& value);
  inline void set_recipient_list(int index, const char* value);
  inline void set_recipient_list(int index, const char* value, size_t size);
  inline ::std::string* add_recipient_list();
  inline void add_recipient_list(const ::std::string& value);
  inline void add_recipient_list(const char* value);
  inline void add_recipient_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& recipient_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recipient_list();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesQueryObject)
 private:
  inline void set_has_comp_id();
  inline void clear_has_comp_id();
  inline void set_has_revision();
  inline void clear_has_revision();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_content_url();
  inline void clear_has_content_url();
  inline void set_has_preview_url();
  inline void clear_has_preview_url();
  inline void set_has_opaque_metadata();
  inline void clear_has_opaque_metadata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 comp_id_;
  ::google::protobuf::uint64 revision_;
  ::std::string* name_;
  ::std::string* content_url_;
  ::std::string* preview_url_;
  ::std::string* opaque_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recipient_list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesQueryObject* default_instance_;
};
// -------------------------------------------------------------------

class SharedFilesQueryOutput : public ::google::protobuf::Message {
 public:
  SharedFilesQueryOutput();
  virtual ~SharedFilesQueryOutput();
  
  SharedFilesQueryOutput(const SharedFilesQueryOutput& from);
  
  inline SharedFilesQueryOutput& operator=(const SharedFilesQueryOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SharedFilesQueryOutput& default_instance();
  
  void Swap(SharedFilesQueryOutput* other);
  
  // implements Message ----------------------------------------------
  
  SharedFilesQueryOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SharedFilesQueryOutput& from);
  void MergeFrom(const SharedFilesQueryOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.SharedFilesQueryObject query_objects = 1;
  inline int query_objects_size() const;
  inline void clear_query_objects();
  static const int kQueryObjectsFieldNumber = 1;
  inline const ::ccd::SharedFilesQueryObject& query_objects(int index) const;
  inline ::ccd::SharedFilesQueryObject* mutable_query_objects(int index);
  inline ::ccd::SharedFilesQueryObject* add_query_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::SharedFilesQueryObject >&
      query_objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::SharedFilesQueryObject >*
      mutable_query_objects();
  
  // @@protoc_insertion_point(class_scope:ccd.SharedFilesQueryOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::SharedFilesQueryObject > query_objects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static SharedFilesQueryOutput* default_instance_;
};
// -------------------------------------------------------------------

class RemoteExecutableInfo : public ::google::protobuf::Message {
 public:
  RemoteExecutableInfo();
  virtual ~RemoteExecutableInfo();
  
  RemoteExecutableInfo(const RemoteExecutableInfo& from);
  
  inline RemoteExecutableInfo& operator=(const RemoteExecutableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteExecutableInfo& default_instance();
  
  void Swap(RemoteExecutableInfo* other);
  
  // implements Message ----------------------------------------------
  
  RemoteExecutableInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteExecutableInfo& from);
  void MergeFrom(const RemoteExecutableInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string absolute_path = 2;
  inline bool has_absolute_path() const;
  inline void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 2;
  inline const ::std::string& absolute_path() const;
  inline void set_absolute_path(const ::std::string& value);
  inline void set_absolute_path(const char* value);
  inline void set_absolute_path(const char* value, size_t size);
  inline ::std::string* mutable_absolute_path();
  inline ::std::string* release_absolute_path();
  
  // required fixed64 version_num = 3;
  inline bool has_version_num() const;
  inline void clear_version_num();
  static const int kVersionNumFieldNumber = 3;
  inline ::google::protobuf::uint64 version_num() const;
  inline void set_version_num(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ccd.RemoteExecutableInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_version_num();
  inline void clear_has_version_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* absolute_path_;
  ::google::protobuf::uint64 version_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RemoteExecutableInfo* default_instance_;
};
// -------------------------------------------------------------------

class RegisterRemoteExecutableInput : public ::google::protobuf::Message {
 public:
  RegisterRemoteExecutableInput();
  virtual ~RegisterRemoteExecutableInput();
  
  RegisterRemoteExecutableInput(const RegisterRemoteExecutableInput& from);
  
  inline RegisterRemoteExecutableInput& operator=(const RegisterRemoteExecutableInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRemoteExecutableInput& default_instance();
  
  void Swap(RegisterRemoteExecutableInput* other);
  
  // implements Message ----------------------------------------------
  
  RegisterRemoteExecutableInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRemoteExecutableInput& from);
  void MergeFrom(const RegisterRemoteExecutableInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string app_key = 2;
  inline bool has_app_key() const;
  inline void clear_app_key();
  static const int kAppKeyFieldNumber = 2;
  inline const ::std::string& app_key() const;
  inline void set_app_key(const ::std::string& value);
  inline void set_app_key(const char* value);
  inline void set_app_key(const char* value, size_t size);
  inline ::std::string* mutable_app_key();
  inline ::std::string* release_app_key();
  
  // required .ccd.RemoteExecutableInfo remote_executable_info = 3;
  inline bool has_remote_executable_info() const;
  inline void clear_remote_executable_info();
  static const int kRemoteExecutableInfoFieldNumber = 3;
  inline const ::ccd::RemoteExecutableInfo& remote_executable_info() const;
  inline ::ccd::RemoteExecutableInfo* mutable_remote_executable_info();
  inline ::ccd::RemoteExecutableInfo* release_remote_executable_info();
  
  // @@protoc_insertion_point(class_scope:ccd.RegisterRemoteExecutableInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_key();
  inline void clear_has_app_key();
  inline void set_has_remote_executable_info();
  inline void clear_has_remote_executable_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* app_key_;
  ::ccd::RemoteExecutableInfo* remote_executable_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static RegisterRemoteExecutableInput* default_instance_;
};
// -------------------------------------------------------------------

class UnregisterRemoteExecutableInput : public ::google::protobuf::Message {
 public:
  UnregisterRemoteExecutableInput();
  virtual ~UnregisterRemoteExecutableInput();
  
  UnregisterRemoteExecutableInput(const UnregisterRemoteExecutableInput& from);
  
  inline UnregisterRemoteExecutableInput& operator=(const UnregisterRemoteExecutableInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnregisterRemoteExecutableInput& default_instance();
  
  void Swap(UnregisterRemoteExecutableInput* other);
  
  // implements Message ----------------------------------------------
  
  UnregisterRemoteExecutableInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnregisterRemoteExecutableInput& from);
  void MergeFrom(const UnregisterRemoteExecutableInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string app_key = 2;
  inline bool has_app_key() const;
  inline void clear_app_key();
  static const int kAppKeyFieldNumber = 2;
  inline const ::std::string& app_key() const;
  inline void set_app_key(const ::std::string& value);
  inline void set_app_key(const char* value);
  inline void set_app_key(const char* value, size_t size);
  inline ::std::string* mutable_app_key();
  inline ::std::string* release_app_key();
  
  // required string remote_executable_name = 3;
  inline bool has_remote_executable_name() const;
  inline void clear_remote_executable_name();
  static const int kRemoteExecutableNameFieldNumber = 3;
  inline const ::std::string& remote_executable_name() const;
  inline void set_remote_executable_name(const ::std::string& value);
  inline void set_remote_executable_name(const char* value);
  inline void set_remote_executable_name(const char* value, size_t size);
  inline ::std::string* mutable_remote_executable_name();
  inline ::std::string* release_remote_executable_name();
  
  // @@protoc_insertion_point(class_scope:ccd.UnregisterRemoteExecutableInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_key();
  inline void clear_has_app_key();
  inline void set_has_remote_executable_name();
  inline void clear_has_remote_executable_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* app_key_;
  ::std::string* remote_executable_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static UnregisterRemoteExecutableInput* default_instance_;
};
// -------------------------------------------------------------------

class ListRegisteredRemoteExecutablesInput : public ::google::protobuf::Message {
 public:
  ListRegisteredRemoteExecutablesInput();
  virtual ~ListRegisteredRemoteExecutablesInput();
  
  ListRegisteredRemoteExecutablesInput(const ListRegisteredRemoteExecutablesInput& from);
  
  inline ListRegisteredRemoteExecutablesInput& operator=(const ListRegisteredRemoteExecutablesInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRegisteredRemoteExecutablesInput& default_instance();
  
  void Swap(ListRegisteredRemoteExecutablesInput* other);
  
  // implements Message ----------------------------------------------
  
  ListRegisteredRemoteExecutablesInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRegisteredRemoteExecutablesInput& from);
  void MergeFrom(const ListRegisteredRemoteExecutablesInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // required string app_key = 2;
  inline bool has_app_key() const;
  inline void clear_app_key();
  static const int kAppKeyFieldNumber = 2;
  inline const ::std::string& app_key() const;
  inline void set_app_key(const ::std::string& value);
  inline void set_app_key(const char* value);
  inline void set_app_key(const char* value, size_t size);
  inline ::std::string* mutable_app_key();
  inline ::std::string* release_app_key();
  
  // @@protoc_insertion_point(class_scope:ccd.ListRegisteredRemoteExecutablesInput)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_app_key();
  inline void clear_has_app_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::std::string* app_key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListRegisteredRemoteExecutablesInput* default_instance_;
};
// -------------------------------------------------------------------

class ListRegisteredRemoteExecutablesOutput : public ::google::protobuf::Message {
 public:
  ListRegisteredRemoteExecutablesOutput();
  virtual ~ListRegisteredRemoteExecutablesOutput();
  
  ListRegisteredRemoteExecutablesOutput(const ListRegisteredRemoteExecutablesOutput& from);
  
  inline ListRegisteredRemoteExecutablesOutput& operator=(const ListRegisteredRemoteExecutablesOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRegisteredRemoteExecutablesOutput& default_instance();
  
  void Swap(ListRegisteredRemoteExecutablesOutput* other);
  
  // implements Message ----------------------------------------------
  
  ListRegisteredRemoteExecutablesOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRegisteredRemoteExecutablesOutput& from);
  void MergeFrom(const ListRegisteredRemoteExecutablesOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ccd.RemoteExecutableInfo registered_remote_executables = 1;
  inline int registered_remote_executables_size() const;
  inline void clear_registered_remote_executables();
  static const int kRegisteredRemoteExecutablesFieldNumber = 1;
  inline const ::ccd::RemoteExecutableInfo& registered_remote_executables(int index) const;
  inline ::ccd::RemoteExecutableInfo* mutable_registered_remote_executables(int index);
  inline ::ccd::RemoteExecutableInfo* add_registered_remote_executables();
  inline const ::google::protobuf::RepeatedPtrField< ::ccd::RemoteExecutableInfo >&
      registered_remote_executables() const;
  inline ::google::protobuf::RepeatedPtrField< ::ccd::RemoteExecutableInfo >*
      mutable_registered_remote_executables();
  
  // @@protoc_insertion_point(class_scope:ccd.ListRegisteredRemoteExecutablesOutput)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ccd::RemoteExecutableInfo > registered_remote_executables_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_ccdi_5frpc_2eproto();
  friend void protobuf_AssignDesc_ccdi_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ccdi_5frpc_2eproto();
  
  void InitAsDefaultInstance();
  static ListRegisteredRemoteExecutablesOutput* default_instance_;
};
// ===================================================================


// ===================================================================

// NoParamRequest

// -------------------------------------------------------------------

// PlayerIndexRequest

// required int32 player_index = 1;
inline bool PlayerIndexRequest::has_player_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerIndexRequest::set_has_player_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerIndexRequest::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerIndexRequest::clear_player_index() {
  player_index_ = 0;
  clear_has_player_index();
}
inline ::google::protobuf::int32 PlayerIndexRequest::player_index() const {
  return player_index_;
}
inline void PlayerIndexRequest::set_player_index(::google::protobuf::int32 value) {
  set_has_player_index();
  player_index_ = value;
}

// -------------------------------------------------------------------

// UserIdRequest

// required fixed64 user_id = 1;
inline bool UserIdRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserIdRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserIdRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserIdRequest::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UserIdRequest::user_id() const {
  return user_id_;
}
inline void UserIdRequest::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// NoParamResponse

// -------------------------------------------------------------------

// CurrentPlayer

// required fixed64 user_id = 1;
inline bool CurrentPlayer::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentPlayer::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrentPlayer::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrentPlayer::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 CurrentPlayer::user_id() const {
  return user_id_;
}
inline void CurrentPlayer::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string username = 2;
inline bool CurrentPlayer::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrentPlayer::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurrentPlayer::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurrentPlayer::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& CurrentPlayer::username() const {
  return *username_;
}
inline void CurrentPlayer::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CurrentPlayer::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CurrentPlayer::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurrentPlayer::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* CurrentPlayer::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string account_id = 4;
inline bool CurrentPlayer::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CurrentPlayer::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CurrentPlayer::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CurrentPlayer::clear_account_id() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    account_id_->clear();
  }
  clear_has_account_id();
}
inline const ::std::string& CurrentPlayer::account_id() const {
  return *account_id_;
}
inline void CurrentPlayer::set_account_id(const ::std::string& value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void CurrentPlayer::set_account_id(const char* value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void CurrentPlayer::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurrentPlayer::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  return account_id_;
}
inline ::std::string* CurrentPlayer::release_account_id() {
  clear_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_id_;
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool has_elevated_privileges = 5 [default = false];
inline bool CurrentPlayer::has_has_elevated_privileges() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CurrentPlayer::set_has_has_elevated_privileges() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CurrentPlayer::clear_has_has_elevated_privileges() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CurrentPlayer::clear_has_elevated_privileges() {
  has_elevated_privileges_ = false;
  clear_has_has_elevated_privileges();
}
inline bool CurrentPlayer::has_elevated_privileges() const {
  return has_elevated_privileges_;
}
inline void CurrentPlayer::set_has_elevated_privileges(bool value) {
  set_has_has_elevated_privileges();
  has_elevated_privileges_ = value;
}

// -------------------------------------------------------------------

// CurrentPlayers

// repeated .ccd.CurrentPlayer players = 1;
inline int CurrentPlayers::players_size() const {
  return players_.size();
}
inline void CurrentPlayers::clear_players() {
  players_.Clear();
}
inline const ::ccd::CurrentPlayer& CurrentPlayers::players(int index) const {
  return players_.Get(index);
}
inline ::ccd::CurrentPlayer* CurrentPlayers::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::ccd::CurrentPlayer* CurrentPlayers::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::CurrentPlayer >&
CurrentPlayers::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::CurrentPlayer >*
CurrentPlayers::mutable_players() {
  return &players_;
}

// -------------------------------------------------------------------

// DiskInfo

// required uint64 total_size_bytes = 1;
inline bool DiskInfo::has_total_size_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DiskInfo::set_has_total_size_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DiskInfo::clear_has_total_size_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DiskInfo::clear_total_size_bytes() {
  total_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_total_size_bytes();
}
inline ::google::protobuf::uint64 DiskInfo::total_size_bytes() const {
  return total_size_bytes_;
}
inline void DiskInfo::set_total_size_bytes(::google::protobuf::uint64 value) {
  set_has_total_size_bytes();
  total_size_bytes_ = value;
}

// required uint64 free_space_bytes = 2;
inline bool DiskInfo::has_free_space_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DiskInfo::set_has_free_space_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DiskInfo::clear_has_free_space_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DiskInfo::clear_free_space_bytes() {
  free_space_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_free_space_bytes();
}
inline ::google::protobuf::uint64 DiskInfo::free_space_bytes() const {
  return free_space_bytes_;
}
inline void DiskInfo::set_free_space_bytes(::google::protobuf::uint64 value) {
  set_has_free_space_bytes();
  free_space_bytes_ = value;
}

// optional uint64 available_inodes = 3;
inline bool DiskInfo::has_available_inodes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DiskInfo::set_has_available_inodes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DiskInfo::clear_has_available_inodes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DiskInfo::clear_available_inodes() {
  available_inodes_ = GOOGLE_ULONGLONG(0);
  clear_has_available_inodes();
}
inline ::google::protobuf::uint64 DiskInfo::available_inodes() const {
  return available_inodes_;
}
inline void DiskInfo::set_available_inodes(::google::protobuf::uint64 value) {
  set_has_available_inodes();
  available_inodes_ = value;
}

// -------------------------------------------------------------------

// NetworkInfo

// optional uint32 proxy_agent_port = 1;
inline bool NetworkInfo::has_proxy_agent_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkInfo::set_has_proxy_agent_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetworkInfo::clear_has_proxy_agent_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetworkInfo::clear_proxy_agent_port() {
  proxy_agent_port_ = 0u;
  clear_has_proxy_agent_port();
}
inline ::google::protobuf::uint32 NetworkInfo::proxy_agent_port() const {
  return proxy_agent_port_;
}
inline void NetworkInfo::set_proxy_agent_port(::google::protobuf::uint32 value) {
  set_has_proxy_agent_port();
  proxy_agent_port_ = value;
}

// optional uint32 media_server_port = 2;
inline bool NetworkInfo::has_media_server_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkInfo::set_has_media_server_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetworkInfo::clear_has_media_server_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetworkInfo::clear_media_server_port() {
  media_server_port_ = 0u;
  clear_has_media_server_port();
}
inline ::google::protobuf::uint32 NetworkInfo::media_server_port() const {
  return media_server_port_;
}
inline void NetworkInfo::set_media_server_port(::google::protobuf::uint32 value) {
  set_has_media_server_port();
  media_server_port_ = value;
}

// optional uint32 virtual_drive_port = 3;
inline bool NetworkInfo::has_virtual_drive_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkInfo::set_has_virtual_drive_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetworkInfo::clear_has_virtual_drive_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetworkInfo::clear_virtual_drive_port() {
  virtual_drive_port_ = 0u;
  clear_has_virtual_drive_port();
}
inline ::google::protobuf::uint32 NetworkInfo::virtual_drive_port() const {
  return virtual_drive_port_;
}
inline void NetworkInfo::set_virtual_drive_port(::google::protobuf::uint32 value) {
  set_has_virtual_drive_port();
  virtual_drive_port_ = value;
}

// optional uint32 tunnel_service_port = 4;
inline bool NetworkInfo::has_tunnel_service_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetworkInfo::set_has_tunnel_service_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetworkInfo::clear_has_tunnel_service_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetworkInfo::clear_tunnel_service_port() {
  tunnel_service_port_ = 0u;
  clear_has_tunnel_service_port();
}
inline ::google::protobuf::uint32 NetworkInfo::tunnel_service_port() const {
  return tunnel_service_port_;
}
inline void NetworkInfo::set_tunnel_service_port(::google::protobuf::uint32 value) {
  set_has_tunnel_service_port();
  tunnel_service_port_ = value;
}

// optional uint32 ext_tunnel_service_port = 5;
inline bool NetworkInfo::has_ext_tunnel_service_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetworkInfo::set_has_ext_tunnel_service_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetworkInfo::clear_has_ext_tunnel_service_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetworkInfo::clear_ext_tunnel_service_port() {
  ext_tunnel_service_port_ = 0u;
  clear_has_ext_tunnel_service_port();
}
inline ::google::protobuf::uint32 NetworkInfo::ext_tunnel_service_port() const {
  return ext_tunnel_service_port_;
}
inline void NetworkInfo::set_ext_tunnel_service_port(::google::protobuf::uint32 value) {
  set_has_ext_tunnel_service_port();
  ext_tunnel_service_port_ = value;
}

// -------------------------------------------------------------------

// IoacAdapterWarnings

// optional bool magic_packet_not_supported = 16;
inline bool IoacAdapterWarnings::has_magic_packet_not_supported() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IoacAdapterWarnings::set_has_magic_packet_not_supported() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IoacAdapterWarnings::clear_has_magic_packet_not_supported() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IoacAdapterWarnings::clear_magic_packet_not_supported() {
  magic_packet_not_supported_ = false;
  clear_has_magic_packet_not_supported();
}
inline bool IoacAdapterWarnings::magic_packet_not_supported() const {
  return magic_packet_not_supported_;
}
inline void IoacAdapterWarnings::set_magic_packet_not_supported(bool value) {
  set_has_magic_packet_not_supported();
  magic_packet_not_supported_ = value;
}

// optional bool offload_arp_not_supported = 17;
inline bool IoacAdapterWarnings::has_offload_arp_not_supported() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IoacAdapterWarnings::set_has_offload_arp_not_supported() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IoacAdapterWarnings::clear_has_offload_arp_not_supported() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IoacAdapterWarnings::clear_offload_arp_not_supported() {
  offload_arp_not_supported_ = false;
  clear_has_offload_arp_not_supported();
}
inline bool IoacAdapterWarnings::offload_arp_not_supported() const {
  return offload_arp_not_supported_;
}
inline void IoacAdapterWarnings::set_offload_arp_not_supported(bool value) {
  set_has_offload_arp_not_supported();
  offload_arp_not_supported_ = value;
}

// optional bool offload_ns_not_supported = 18;
inline bool IoacAdapterWarnings::has_offload_ns_not_supported() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IoacAdapterWarnings::set_has_offload_ns_not_supported() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IoacAdapterWarnings::clear_has_offload_ns_not_supported() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IoacAdapterWarnings::clear_offload_ns_not_supported() {
  offload_ns_not_supported_ = false;
  clear_has_offload_ns_not_supported();
}
inline bool IoacAdapterWarnings::offload_ns_not_supported() const {
  return offload_ns_not_supported_;
}
inline void IoacAdapterWarnings::set_offload_ns_not_supported(bool value) {
  set_has_offload_ns_not_supported();
  offload_ns_not_supported_ = value;
}

// optional bool offload_80211_rsn_rekey_not_supported = 19;
inline bool IoacAdapterWarnings::has_offload_80211_rsn_rekey_not_supported() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IoacAdapterWarnings::set_has_offload_80211_rsn_rekey_not_supported() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IoacAdapterWarnings::clear_has_offload_80211_rsn_rekey_not_supported() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IoacAdapterWarnings::clear_offload_80211_rsn_rekey_not_supported() {
  offload_80211_rsn_rekey_not_supported_ = false;
  clear_has_offload_80211_rsn_rekey_not_supported();
}
inline bool IoacAdapterWarnings::offload_80211_rsn_rekey_not_supported() const {
  return offload_80211_rsn_rekey_not_supported_;
}
inline void IoacAdapterWarnings::set_offload_80211_rsn_rekey_not_supported(bool value) {
  set_has_offload_80211_rsn_rekey_not_supported();
  offload_80211_rsn_rekey_not_supported_ = value;
}

// optional bool offload_arp_failed = 20;
inline bool IoacAdapterWarnings::has_offload_arp_failed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IoacAdapterWarnings::set_has_offload_arp_failed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IoacAdapterWarnings::clear_has_offload_arp_failed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IoacAdapterWarnings::clear_offload_arp_failed() {
  offload_arp_failed_ = false;
  clear_has_offload_arp_failed();
}
inline bool IoacAdapterWarnings::offload_arp_failed() const {
  return offload_arp_failed_;
}
inline void IoacAdapterWarnings::set_offload_arp_failed(bool value) {
  set_has_offload_arp_failed();
  offload_arp_failed_ = value;
}

// optional bool enable_keepalive_failed = 21;
inline bool IoacAdapterWarnings::has_enable_keepalive_failed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IoacAdapterWarnings::set_has_enable_keepalive_failed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IoacAdapterWarnings::clear_has_enable_keepalive_failed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IoacAdapterWarnings::clear_enable_keepalive_failed() {
  enable_keepalive_failed_ = false;
  clear_has_enable_keepalive_failed();
}
inline bool IoacAdapterWarnings::enable_keepalive_failed() const {
  return enable_keepalive_failed_;
}
inline void IoacAdapterWarnings::set_enable_keepalive_failed(bool value) {
  set_has_enable_keepalive_failed();
  enable_keepalive_failed_ = value;
}

// -------------------------------------------------------------------

// IoacAdapterStatus

// required string guid = 1;
inline bool IoacAdapterStatus::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IoacAdapterStatus::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IoacAdapterStatus::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IoacAdapterStatus::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& IoacAdapterStatus::guid() const {
  return *guid_;
}
inline void IoacAdapterStatus::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void IoacAdapterStatus::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void IoacAdapterStatus::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IoacAdapterStatus::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* IoacAdapterStatus::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.IoacStatusSummary_t summary = 4;
inline bool IoacAdapterStatus::has_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IoacAdapterStatus::set_has_summary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IoacAdapterStatus::clear_has_summary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IoacAdapterStatus::clear_summary() {
  summary_ = 1;
  clear_has_summary();
}
inline ccd::IoacStatusSummary_t IoacAdapterStatus::summary() const {
  return static_cast< ccd::IoacStatusSummary_t >(summary_);
}
inline void IoacAdapterStatus::set_summary(ccd::IoacStatusSummary_t value) {
  GOOGLE_DCHECK(ccd::IoacStatusSummary_t_IsValid(value));
  set_has_summary();
  summary_ = value;
}

// optional .ccd.IoacAdapterWarnings warnings = 5;
inline bool IoacAdapterStatus::has_warnings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IoacAdapterStatus::set_has_warnings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IoacAdapterStatus::clear_has_warnings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IoacAdapterStatus::clear_warnings() {
  if (warnings_ != NULL) warnings_->::ccd::IoacAdapterWarnings::Clear();
  clear_has_warnings();
}
inline const ::ccd::IoacAdapterWarnings& IoacAdapterStatus::warnings() const {
  return warnings_ != NULL ? *warnings_ : *default_instance_->warnings_;
}
inline ::ccd::IoacAdapterWarnings* IoacAdapterStatus::mutable_warnings() {
  set_has_warnings();
  if (warnings_ == NULL) warnings_ = new ::ccd::IoacAdapterWarnings;
  return warnings_;
}
inline ::ccd::IoacAdapterWarnings* IoacAdapterStatus::release_warnings() {
  clear_has_warnings();
  ::ccd::IoacAdapterWarnings* temp = warnings_;
  warnings_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// IoacOverallStatus

// required .ccd.IoacStatusSummary_t summary = 1;
inline bool IoacOverallStatus::has_summary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IoacOverallStatus::set_has_summary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IoacOverallStatus::clear_has_summary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IoacOverallStatus::clear_summary() {
  summary_ = 1;
  clear_has_summary();
}
inline ccd::IoacStatusSummary_t IoacOverallStatus::summary() const {
  return static_cast< ccd::IoacStatusSummary_t >(summary_);
}
inline void IoacOverallStatus::set_summary(ccd::IoacStatusSummary_t value) {
  GOOGLE_DCHECK(ccd::IoacStatusSummary_t_IsValid(value));
  set_has_summary();
  summary_ = value;
}

// repeated .ccd.IoacAdapterStatus adapters = 2;
inline int IoacOverallStatus::adapters_size() const {
  return adapters_.size();
}
inline void IoacOverallStatus::clear_adapters() {
  adapters_.Clear();
}
inline const ::ccd::IoacAdapterStatus& IoacOverallStatus::adapters(int index) const {
  return adapters_.Get(index);
}
inline ::ccd::IoacAdapterStatus* IoacOverallStatus::mutable_adapters(int index) {
  return adapters_.Mutable(index);
}
inline ::ccd::IoacAdapterStatus* IoacOverallStatus::add_adapters() {
  return adapters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::IoacAdapterStatus >&
IoacOverallStatus::adapters() const {
  return adapters_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::IoacAdapterStatus >*
IoacOverallStatus::mutable_adapters() {
  return &adapters_;
}

// optional bool warn_sleep_not_supported = 16;
inline bool IoacOverallStatus::has_warn_sleep_not_supported() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IoacOverallStatus::set_has_warn_sleep_not_supported() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IoacOverallStatus::clear_has_warn_sleep_not_supported() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IoacOverallStatus::clear_warn_sleep_not_supported() {
  warn_sleep_not_supported_ = false;
  clear_has_warn_sleep_not_supported();
}
inline bool IoacOverallStatus::warn_sleep_not_supported() const {
  return warn_sleep_not_supported_;
}
inline void IoacOverallStatus::set_warn_sleep_not_supported(bool value) {
  set_has_warn_sleep_not_supported();
  warn_sleep_not_supported_ = value;
}

// -------------------------------------------------------------------

// GetSystemStateInput

// optional bool get_device_id = 4 [default = false];
inline bool GetSystemStateInput::has_get_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemStateInput::set_has_get_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemStateInput::clear_has_get_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemStateInput::clear_get_device_id() {
  get_device_id_ = false;
  clear_has_get_device_id();
}
inline bool GetSystemStateInput::get_device_id() const {
  return get_device_id_;
}
inline void GetSystemStateInput::set_get_device_id(bool value) {
  set_has_get_device_id();
  get_device_id_ = value;
}

// optional bool get_players = 2 [default = false];
inline bool GetSystemStateInput::has_get_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSystemStateInput::set_has_get_players() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSystemStateInput::clear_has_get_players() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSystemStateInput::clear_get_players() {
  get_players_ = false;
  clear_has_get_players();
}
inline bool GetSystemStateInput::get_players() const {
  return get_players_;
}
inline void GetSystemStateInput::set_get_players(bool value) {
  set_has_get_players();
  get_players_ = value;
}

// optional bool get_users = 10 [default = false];
inline bool GetSystemStateInput::has_get_users() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSystemStateInput::set_has_get_users() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSystemStateInput::clear_has_get_users() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSystemStateInput::clear_get_users() {
  get_users_ = false;
  clear_has_get_users();
}
inline bool GetSystemStateInput::get_users() const {
  return get_users_;
}
inline void GetSystemStateInput::set_get_users(bool value) {
  set_has_get_users();
  get_users_ = value;
}

// optional bool get_logged_out_users = 13 [default = false];
inline bool GetSystemStateInput::has_get_logged_out_users() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetSystemStateInput::set_has_get_logged_out_users() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetSystemStateInput::clear_has_get_logged_out_users() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetSystemStateInput::clear_get_logged_out_users() {
  get_logged_out_users_ = false;
  clear_has_get_logged_out_users();
}
inline bool GetSystemStateInput::get_logged_out_users() const {
  return get_logged_out_users_;
}
inline void GetSystemStateInput::set_get_logged_out_users(bool value) {
  set_has_get_logged_out_users();
  get_logged_out_users_ = value;
}

// optional bool get_disk_info = 5 [default = false];
inline bool GetSystemStateInput::has_get_disk_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetSystemStateInput::set_has_get_disk_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetSystemStateInput::clear_has_get_disk_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetSystemStateInput::clear_get_disk_info() {
  get_disk_info_ = false;
  clear_has_get_disk_info();
}
inline bool GetSystemStateInput::get_disk_info() const {
  return get_disk_info_;
}
inline void GetSystemStateInput::set_get_disk_info(bool value) {
  set_has_get_disk_info();
  get_disk_info_ = value;
}

// optional bool get_device_locale = 8 [default = false];
inline bool GetSystemStateInput::has_get_device_locale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetSystemStateInput::set_has_get_device_locale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetSystemStateInput::clear_has_get_device_locale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetSystemStateInput::clear_get_device_locale() {
  get_device_locale_ = false;
  clear_has_get_device_locale();
}
inline bool GetSystemStateInput::get_device_locale() const {
  return get_device_locale_;
}
inline void GetSystemStateInput::set_get_device_locale(bool value) {
  set_has_get_device_locale();
  get_device_locale_ = value;
}

// optional bool get_network_info = 9 [default = false];
inline bool GetSystemStateInput::has_get_network_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetSystemStateInput::set_has_get_network_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetSystemStateInput::clear_has_get_network_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetSystemStateInput::clear_get_network_info() {
  get_network_info_ = false;
  clear_has_get_network_info();
}
inline bool GetSystemStateInput::get_network_info() const {
  return get_network_info_;
}
inline void GetSystemStateInput::set_get_network_info(bool value) {
  set_has_get_network_info();
  get_network_info_ = value;
}

// optional bool get_ioac_status = 11 [default = false];
inline bool GetSystemStateInput::has_get_ioac_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetSystemStateInput::set_has_get_ioac_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetSystemStateInput::clear_has_get_ioac_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetSystemStateInput::clear_get_ioac_status() {
  get_ioac_status_ = false;
  clear_has_get_ioac_status();
}
inline bool GetSystemStateInput::get_ioac_status() const {
  return get_ioac_status_;
}
inline void GetSystemStateInput::set_get_ioac_status(bool value) {
  set_has_get_ioac_status();
  get_ioac_status_ = value;
}

// optional bool get_enable_ioac = 14 [default = false];
inline bool GetSystemStateInput::has_get_enable_ioac() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetSystemStateInput::set_has_get_enable_ioac() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetSystemStateInput::clear_has_get_enable_ioac() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetSystemStateInput::clear_get_enable_ioac() {
  get_enable_ioac_ = false;
  clear_has_get_enable_ioac();
}
inline bool GetSystemStateInput::get_enable_ioac() const {
  return get_enable_ioac_;
}
inline void GetSystemStateInput::set_get_enable_ioac(bool value) {
  set_has_get_enable_ioac();
  get_enable_ioac_ = value;
}

// optional bool get_ioac_already_in_use = 15 [default = false];
inline bool GetSystemStateInput::has_get_ioac_already_in_use() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetSystemStateInput::set_has_get_ioac_already_in_use() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetSystemStateInput::clear_has_get_ioac_already_in_use() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetSystemStateInput::clear_get_ioac_already_in_use() {
  get_ioac_already_in_use_ = false;
  clear_has_get_ioac_already_in_use();
}
inline bool GetSystemStateInput::get_ioac_already_in_use() const {
  return get_ioac_already_in_use_;
}
inline void GetSystemStateInput::set_get_ioac_already_in_use(bool value) {
  set_has_get_ioac_already_in_use();
  get_ioac_already_in_use_ = value;
}

// optional bool get_background_mode_interval_sec = 12;
inline bool GetSystemStateInput::has_get_background_mode_interval_sec() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetSystemStateInput::set_has_get_background_mode_interval_sec() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetSystemStateInput::clear_has_get_background_mode_interval_sec() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetSystemStateInput::clear_get_background_mode_interval_sec() {
  get_background_mode_interval_sec_ = false;
  clear_has_get_background_mode_interval_sec();
}
inline bool GetSystemStateInput::get_background_mode_interval_sec() const {
  return get_background_mode_interval_sec_;
}
inline void GetSystemStateInput::set_get_background_mode_interval_sec(bool value) {
  set_has_get_background_mode_interval_sec();
  get_background_mode_interval_sec_ = value;
}

// optional bool get_only_mobile_network_available = 21;
inline bool GetSystemStateInput::has_get_only_mobile_network_available() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetSystemStateInput::set_has_get_only_mobile_network_available() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetSystemStateInput::clear_has_get_only_mobile_network_available() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetSystemStateInput::clear_get_only_mobile_network_available() {
  get_only_mobile_network_available_ = false;
  clear_has_get_only_mobile_network_available();
}
inline bool GetSystemStateInput::get_only_mobile_network_available() const {
  return get_only_mobile_network_available_;
}
inline void GetSystemStateInput::set_get_only_mobile_network_available(bool value) {
  set_has_get_only_mobile_network_available();
  get_only_mobile_network_available_ = value;
}

// optional bool get_stream_power_mode = 22;
inline bool GetSystemStateInput::has_get_stream_power_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetSystemStateInput::set_has_get_stream_power_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetSystemStateInput::clear_has_get_stream_power_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetSystemStateInput::clear_get_stream_power_mode() {
  get_stream_power_mode_ = false;
  clear_has_get_stream_power_mode();
}
inline bool GetSystemStateInput::get_stream_power_mode() const {
  return get_stream_power_mode_;
}
inline void GetSystemStateInput::set_get_stream_power_mode(bool value) {
  set_has_get_stream_power_mode();
  get_stream_power_mode_ = value;
}

// optional bool get_power_mode = 23;
inline bool GetSystemStateInput::has_get_power_mode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetSystemStateInput::set_has_get_power_mode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetSystemStateInput::clear_has_get_power_mode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetSystemStateInput::clear_get_power_mode() {
  get_power_mode_ = false;
  clear_has_get_power_mode();
}
inline bool GetSystemStateInput::get_power_mode() const {
  return get_power_mode_;
}
inline void GetSystemStateInput::set_get_power_mode(bool value) {
  set_has_get_power_mode();
  get_power_mode_ = value;
}

// optional bool get_pd_instance_id = 24;
inline bool GetSystemStateInput::has_get_pd_instance_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GetSystemStateInput::set_has_get_pd_instance_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GetSystemStateInput::clear_has_get_pd_instance_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GetSystemStateInput::clear_get_pd_instance_id() {
  get_pd_instance_id_ = false;
  clear_has_get_pd_instance_id();
}
inline bool GetSystemStateInput::get_pd_instance_id() const {
  return get_pd_instance_id_;
}
inline void GetSystemStateInput::set_get_pd_instance_id(bool value) {
  set_has_get_pd_instance_id();
  get_pd_instance_id_ = value;
}

// -------------------------------------------------------------------

// PowerStatus

// required .ccd.PowerMode_t power_mode = 1;
inline bool PowerStatus::has_power_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PowerStatus::set_has_power_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PowerStatus::clear_has_power_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PowerStatus::clear_power_mode() {
  power_mode_ = 1;
  clear_has_power_mode();
}
inline ccd::PowerMode_t PowerStatus::power_mode() const {
  return static_cast< ccd::PowerMode_t >(power_mode_);
}
inline void PowerStatus::set_power_mode(ccd::PowerMode_t value) {
  GOOGLE_DCHECK(ccd::PowerMode_t_IsValid(value));
  set_has_power_mode();
  power_mode_ = value;
}

// -------------------------------------------------------------------

// CurrentUser

// required fixed64 user_id = 1;
inline bool CurrentUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrentUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrentUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrentUser::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 CurrentUser::user_id() const {
  return user_id_;
}
inline void CurrentUser::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string username = 2;
inline bool CurrentUser::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrentUser::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurrentUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurrentUser::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& CurrentUser::username() const {
  return *username_;
}
inline void CurrentUser::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CurrentUser::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void CurrentUser::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CurrentUser::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* CurrentUser::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LoggedOutUser

// required fixed64 user_id = 1;
inline bool LoggedOutUser::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoggedOutUser::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoggedOutUser::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoggedOutUser::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LoggedOutUser::user_id() const {
  return user_id_;
}
inline void LoggedOutUser::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string username = 2;
inline bool LoggedOutUser::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoggedOutUser::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoggedOutUser::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoggedOutUser::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoggedOutUser::username() const {
  return *username_;
}
inline void LoggedOutUser::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoggedOutUser::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoggedOutUser::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoggedOutUser::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoggedOutUser::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .ccd.LogoutReason_t reason = 3;
inline bool LoggedOutUser::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoggedOutUser::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoggedOutUser::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoggedOutUser::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ccd::LogoutReason_t LoggedOutUser::reason() const {
  return static_cast< ccd::LogoutReason_t >(reason_);
}
inline void LoggedOutUser::set_reason(ccd::LogoutReason_t value) {
  GOOGLE_DCHECK(ccd::LogoutReason_t_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// GetSystemStateOutput

// optional fixed64 device_id = 4;
inline bool GetSystemStateOutput::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSystemStateOutput::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSystemStateOutput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSystemStateOutput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 GetSystemStateOutput::device_id() const {
  return device_id_;
}
inline void GetSystemStateOutput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional .ccd.CurrentPlayers players = 2;
inline bool GetSystemStateOutput::has_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSystemStateOutput::set_has_players() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSystemStateOutput::clear_has_players() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSystemStateOutput::clear_players() {
  if (players_ != NULL) players_->::ccd::CurrentPlayers::Clear();
  clear_has_players();
}
inline const ::ccd::CurrentPlayers& GetSystemStateOutput::players() const {
  return players_ != NULL ? *players_ : *default_instance_->players_;
}
inline ::ccd::CurrentPlayers* GetSystemStateOutput::mutable_players() {
  set_has_players();
  if (players_ == NULL) players_ = new ::ccd::CurrentPlayers;
  return players_;
}
inline ::ccd::CurrentPlayers* GetSystemStateOutput::release_players() {
  clear_has_players();
  ::ccd::CurrentPlayers* temp = players_;
  players_ = NULL;
  return temp;
}

// repeated .ccd.CurrentUser users = 10;
inline int GetSystemStateOutput::users_size() const {
  return users_.size();
}
inline void GetSystemStateOutput::clear_users() {
  users_.Clear();
}
inline const ::ccd::CurrentUser& GetSystemStateOutput::users(int index) const {
  return users_.Get(index);
}
inline ::ccd::CurrentUser* GetSystemStateOutput::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::ccd::CurrentUser* GetSystemStateOutput::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::CurrentUser >&
GetSystemStateOutput::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::CurrentUser >*
GetSystemStateOutput::mutable_users() {
  return &users_;
}

// repeated .ccd.LoggedOutUser logged_out_users = 13;
inline int GetSystemStateOutput::logged_out_users_size() const {
  return logged_out_users_.size();
}
inline void GetSystemStateOutput::clear_logged_out_users() {
  logged_out_users_.Clear();
}
inline const ::ccd::LoggedOutUser& GetSystemStateOutput::logged_out_users(int index) const {
  return logged_out_users_.Get(index);
}
inline ::ccd::LoggedOutUser* GetSystemStateOutput::mutable_logged_out_users(int index) {
  return logged_out_users_.Mutable(index);
}
inline ::ccd::LoggedOutUser* GetSystemStateOutput::add_logged_out_users() {
  return logged_out_users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::LoggedOutUser >&
GetSystemStateOutput::logged_out_users() const {
  return logged_out_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::LoggedOutUser >*
GetSystemStateOutput::mutable_logged_out_users() {
  return &logged_out_users_;
}

// optional .ccd.DiskInfo disk_info = 5;
inline bool GetSystemStateOutput::has_disk_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetSystemStateOutput::set_has_disk_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetSystemStateOutput::clear_has_disk_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetSystemStateOutput::clear_disk_info() {
  if (disk_info_ != NULL) disk_info_->::ccd::DiskInfo::Clear();
  clear_has_disk_info();
}
inline const ::ccd::DiskInfo& GetSystemStateOutput::disk_info() const {
  return disk_info_ != NULL ? *disk_info_ : *default_instance_->disk_info_;
}
inline ::ccd::DiskInfo* GetSystemStateOutput::mutable_disk_info() {
  set_has_disk_info();
  if (disk_info_ == NULL) disk_info_ = new ::ccd::DiskInfo;
  return disk_info_;
}
inline ::ccd::DiskInfo* GetSystemStateOutput::release_disk_info() {
  clear_has_disk_info();
  ::ccd::DiskInfo* temp = disk_info_;
  disk_info_ = NULL;
  return temp;
}

// optional string device_locale = 8;
inline bool GetSystemStateOutput::has_device_locale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetSystemStateOutput::set_has_device_locale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetSystemStateOutput::clear_has_device_locale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetSystemStateOutput::clear_device_locale() {
  if (device_locale_ != &::google::protobuf::internal::kEmptyString) {
    device_locale_->clear();
  }
  clear_has_device_locale();
}
inline const ::std::string& GetSystemStateOutput::device_locale() const {
  return *device_locale_;
}
inline void GetSystemStateOutput::set_device_locale(const ::std::string& value) {
  set_has_device_locale();
  if (device_locale_ == &::google::protobuf::internal::kEmptyString) {
    device_locale_ = new ::std::string;
  }
  device_locale_->assign(value);
}
inline void GetSystemStateOutput::set_device_locale(const char* value) {
  set_has_device_locale();
  if (device_locale_ == &::google::protobuf::internal::kEmptyString) {
    device_locale_ = new ::std::string;
  }
  device_locale_->assign(value);
}
inline void GetSystemStateOutput::set_device_locale(const char* value, size_t size) {
  set_has_device_locale();
  if (device_locale_ == &::google::protobuf::internal::kEmptyString) {
    device_locale_ = new ::std::string;
  }
  device_locale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemStateOutput::mutable_device_locale() {
  set_has_device_locale();
  if (device_locale_ == &::google::protobuf::internal::kEmptyString) {
    device_locale_ = new ::std::string;
  }
  return device_locale_;
}
inline ::std::string* GetSystemStateOutput::release_device_locale() {
  clear_has_device_locale();
  if (device_locale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_locale_;
    device_locale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.NetworkInfo network_info = 9;
inline bool GetSystemStateOutput::has_network_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetSystemStateOutput::set_has_network_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetSystemStateOutput::clear_has_network_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetSystemStateOutput::clear_network_info() {
  if (network_info_ != NULL) network_info_->::ccd::NetworkInfo::Clear();
  clear_has_network_info();
}
inline const ::ccd::NetworkInfo& GetSystemStateOutput::network_info() const {
  return network_info_ != NULL ? *network_info_ : *default_instance_->network_info_;
}
inline ::ccd::NetworkInfo* GetSystemStateOutput::mutable_network_info() {
  set_has_network_info();
  if (network_info_ == NULL) network_info_ = new ::ccd::NetworkInfo;
  return network_info_;
}
inline ::ccd::NetworkInfo* GetSystemStateOutput::release_network_info() {
  clear_has_network_info();
  ::ccd::NetworkInfo* temp = network_info_;
  network_info_ = NULL;
  return temp;
}

// optional .ccd.IoacOverallStatus ioac_status = 11;
inline bool GetSystemStateOutput::has_ioac_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetSystemStateOutput::set_has_ioac_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetSystemStateOutput::clear_has_ioac_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetSystemStateOutput::clear_ioac_status() {
  if (ioac_status_ != NULL) ioac_status_->::ccd::IoacOverallStatus::Clear();
  clear_has_ioac_status();
}
inline const ::ccd::IoacOverallStatus& GetSystemStateOutput::ioac_status() const {
  return ioac_status_ != NULL ? *ioac_status_ : *default_instance_->ioac_status_;
}
inline ::ccd::IoacOverallStatus* GetSystemStateOutput::mutable_ioac_status() {
  set_has_ioac_status();
  if (ioac_status_ == NULL) ioac_status_ = new ::ccd::IoacOverallStatus;
  return ioac_status_;
}
inline ::ccd::IoacOverallStatus* GetSystemStateOutput::release_ioac_status() {
  clear_has_ioac_status();
  ::ccd::IoacOverallStatus* temp = ioac_status_;
  ioac_status_ = NULL;
  return temp;
}

// optional sint32 background_mode_interval_sec = 12;
inline bool GetSystemStateOutput::has_background_mode_interval_sec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetSystemStateOutput::set_has_background_mode_interval_sec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetSystemStateOutput::clear_has_background_mode_interval_sec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetSystemStateOutput::clear_background_mode_interval_sec() {
  background_mode_interval_sec_ = 0;
  clear_has_background_mode_interval_sec();
}
inline ::google::protobuf::int32 GetSystemStateOutput::background_mode_interval_sec() const {
  return background_mode_interval_sec_;
}
inline void GetSystemStateOutput::set_background_mode_interval_sec(::google::protobuf::int32 value) {
  set_has_background_mode_interval_sec();
  background_mode_interval_sec_ = value;
}

// optional bool only_mobile_network_available = 21;
inline bool GetSystemStateOutput::has_only_mobile_network_available() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GetSystemStateOutput::set_has_only_mobile_network_available() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GetSystemStateOutput::clear_has_only_mobile_network_available() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GetSystemStateOutput::clear_only_mobile_network_available() {
  only_mobile_network_available_ = false;
  clear_has_only_mobile_network_available();
}
inline bool GetSystemStateOutput::only_mobile_network_available() const {
  return only_mobile_network_available_;
}
inline void GetSystemStateOutput::set_only_mobile_network_available(bool value) {
  set_has_only_mobile_network_available();
  only_mobile_network_available_ = value;
}

// optional bool enable_ioac = 14;
inline bool GetSystemStateOutput::has_enable_ioac() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetSystemStateOutput::set_has_enable_ioac() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetSystemStateOutput::clear_has_enable_ioac() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetSystemStateOutput::clear_enable_ioac() {
  enable_ioac_ = false;
  clear_has_enable_ioac();
}
inline bool GetSystemStateOutput::enable_ioac() const {
  return enable_ioac_;
}
inline void GetSystemStateOutput::set_enable_ioac(bool value) {
  set_has_enable_ioac();
  enable_ioac_ = value;
}

// optional bool ioac_already_in_use = 15;
inline bool GetSystemStateOutput::has_ioac_already_in_use() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetSystemStateOutput::set_has_ioac_already_in_use() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetSystemStateOutput::clear_has_ioac_already_in_use() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetSystemStateOutput::clear_ioac_already_in_use() {
  ioac_already_in_use_ = false;
  clear_has_ioac_already_in_use();
}
inline bool GetSystemStateOutput::ioac_already_in_use() const {
  return ioac_already_in_use_;
}
inline void GetSystemStateOutput::set_ioac_already_in_use(bool value) {
  set_has_ioac_already_in_use();
  ioac_already_in_use_ = value;
}

// optional bool stream_power_mode = 22;
inline bool GetSystemStateOutput::has_stream_power_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetSystemStateOutput::set_has_stream_power_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetSystemStateOutput::clear_has_stream_power_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetSystemStateOutput::clear_stream_power_mode() {
  stream_power_mode_ = false;
  clear_has_stream_power_mode();
}
inline bool GetSystemStateOutput::stream_power_mode() const {
  return stream_power_mode_;
}
inline void GetSystemStateOutput::set_stream_power_mode(bool value) {
  set_has_stream_power_mode();
  stream_power_mode_ = value;
}

// optional .ccd.PowerStatus power_mode_status = 23;
inline bool GetSystemStateOutput::has_power_mode_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetSystemStateOutput::set_has_power_mode_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetSystemStateOutput::clear_has_power_mode_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetSystemStateOutput::clear_power_mode_status() {
  if (power_mode_status_ != NULL) power_mode_status_->::ccd::PowerStatus::Clear();
  clear_has_power_mode_status();
}
inline const ::ccd::PowerStatus& GetSystemStateOutput::power_mode_status() const {
  return power_mode_status_ != NULL ? *power_mode_status_ : *default_instance_->power_mode_status_;
}
inline ::ccd::PowerStatus* GetSystemStateOutput::mutable_power_mode_status() {
  set_has_power_mode_status();
  if (power_mode_status_ == NULL) power_mode_status_ = new ::ccd::PowerStatus;
  return power_mode_status_;
}
inline ::ccd::PowerStatus* GetSystemStateOutput::release_power_mode_status() {
  clear_has_power_mode_status();
  ::ccd::PowerStatus* temp = power_mode_status_;
  power_mode_status_ = NULL;
  return temp;
}

// optional string pd_instance_id = 24;
inline bool GetSystemStateOutput::has_pd_instance_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GetSystemStateOutput::set_has_pd_instance_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GetSystemStateOutput::clear_has_pd_instance_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GetSystemStateOutput::clear_pd_instance_id() {
  if (pd_instance_id_ != &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_->clear();
  }
  clear_has_pd_instance_id();
}
inline const ::std::string& GetSystemStateOutput::pd_instance_id() const {
  return *pd_instance_id_;
}
inline void GetSystemStateOutput::set_pd_instance_id(const ::std::string& value) {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  pd_instance_id_->assign(value);
}
inline void GetSystemStateOutput::set_pd_instance_id(const char* value) {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  pd_instance_id_->assign(value);
}
inline void GetSystemStateOutput::set_pd_instance_id(const char* value, size_t size) {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  pd_instance_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSystemStateOutput::mutable_pd_instance_id() {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  return pd_instance_id_;
}
inline ::std::string* GetSystemStateOutput::release_pd_instance_id() {
  clear_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pd_instance_id_;
    pd_instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 pd_instance_id_num = 25;
inline bool GetSystemStateOutput::has_pd_instance_id_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GetSystemStateOutput::set_has_pd_instance_id_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GetSystemStateOutput::clear_has_pd_instance_id_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GetSystemStateOutput::clear_pd_instance_id_num() {
  pd_instance_id_num_ = 0u;
  clear_has_pd_instance_id_num();
}
inline ::google::protobuf::uint32 GetSystemStateOutput::pd_instance_id_num() const {
  return pd_instance_id_num_;
}
inline void GetSystemStateOutput::set_pd_instance_id_num(::google::protobuf::uint32 value) {
  set_has_pd_instance_id_num();
  pd_instance_id_num_ = value;
}

// -------------------------------------------------------------------

// LoginInput

// optional int32 player_index = 1 [default = 0];
inline bool LoginInput::has_player_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginInput::set_has_player_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginInput::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginInput::clear_player_index() {
  player_index_ = 0;
  clear_has_player_index();
}
inline ::google::protobuf::int32 LoginInput::player_index() const {
  return player_index_;
}
inline void LoginInput::set_player_index(::google::protobuf::int32 value) {
  set_has_player_index();
  player_index_ = value;
}

// required string user_name = 2;
inline bool LoginInput::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginInput::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginInput::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginInput::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& LoginInput::user_name() const {
  return *user_name_;
}
inline void LoginInput::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginInput::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void LoginInput::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInput::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* LoginInput::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 3;
inline bool LoginInput::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginInput::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginInput::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginInput::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginInput::password() const {
  return *password_;
}
inline void LoginInput::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginInput::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginInput::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInput::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginInput::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pairing_token = 15;
inline bool LoginInput::has_pairing_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginInput::set_has_pairing_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginInput::clear_has_pairing_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginInput::clear_pairing_token() {
  if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
    pairing_token_->clear();
  }
  clear_has_pairing_token();
}
inline const ::std::string& LoginInput::pairing_token() const {
  return *pairing_token_;
}
inline void LoginInput::set_pairing_token(const ::std::string& value) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(value);
}
inline void LoginInput::set_pairing_token(const char* value) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(value);
}
inline void LoginInput::set_pairing_token(const char* value, size_t size) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginInput::mutable_pairing_token() {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  return pairing_token_;
}
inline ::std::string* LoginInput::release_pairing_token() {
  clear_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pairing_token_;
    pairing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool ac_eula_agreed = 14;
inline bool LoginInput::has_ac_eula_agreed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginInput::set_has_ac_eula_agreed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginInput::clear_has_ac_eula_agreed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginInput::clear_ac_eula_agreed() {
  ac_eula_agreed_ = false;
  clear_has_ac_eula_agreed();
}
inline bool LoginInput::ac_eula_agreed() const {
  return ac_eula_agreed_;
}
inline void LoginInput::set_ac_eula_agreed(bool value) {
  set_has_ac_eula_agreed();
  ac_eula_agreed_ = value;
}

// optional bool skip_if_already_correct = 5 [default = true];
inline bool LoginInput::has_skip_if_already_correct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginInput::set_has_skip_if_already_correct() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginInput::clear_has_skip_if_already_correct() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginInput::clear_skip_if_already_correct() {
  skip_if_already_correct_ = true;
  clear_has_skip_if_already_correct();
}
inline bool LoginInput::skip_if_already_correct() const {
  return skip_if_already_correct_;
}
inline void LoginInput::set_skip_if_already_correct(bool value) {
  set_has_skip_if_already_correct();
  skip_if_already_correct_ = value;
}

// -------------------------------------------------------------------

// LoginOutput

// required fixed64 user_id = 1;
inline bool LoginOutput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginOutput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginOutput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginOutput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LoginOutput::user_id() const {
  return user_id_;
}
inline void LoginOutput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// LogoutInput

// optional int32 player_index = 1;
inline bool LogoutInput::has_player_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutInput::set_has_player_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutInput::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutInput::clear_player_index() {
  player_index_ = 0;
  clear_has_player_index();
}
inline ::google::protobuf::int32 LogoutInput::player_index() const {
  return player_index_;
}
inline void LogoutInput::set_player_index(::google::protobuf::int32 value) {
  set_has_player_index();
  player_index_ = value;
}

// optional fixed64 local_user_id = 2;
inline bool LogoutInput::has_local_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutInput::set_has_local_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutInput::clear_has_local_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutInput::clear_local_user_id() {
  local_user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_local_user_id();
}
inline ::google::protobuf::uint64 LogoutInput::local_user_id() const {
  return local_user_id_;
}
inline void LogoutInput::set_local_user_id(::google::protobuf::uint64 value) {
  set_has_local_user_id();
  local_user_id_ = value;
}

// optional bool warn_if_no_user = 9 [default = true];
inline bool LogoutInput::has_warn_if_no_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogoutInput::set_has_warn_if_no_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogoutInput::clear_has_warn_if_no_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogoutInput::clear_warn_if_no_user() {
  warn_if_no_user_ = true;
  clear_has_warn_if_no_user();
}
inline bool LogoutInput::warn_if_no_user() const {
  return warn_if_no_user_;
}
inline void LogoutInput::set_warn_if_no_user(bool value) {
  set_has_warn_if_no_user();
  warn_if_no_user_ = value;
}

// -------------------------------------------------------------------

// InfraHttpRequestInput

// optional fixed64 user_id = 1;
inline bool InfraHttpRequestInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfraHttpRequestInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfraHttpRequestInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfraHttpRequestInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 InfraHttpRequestInput::user_id() const {
  return user_id_;
}
inline void InfraHttpRequestInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .ccd.InfraHttpService_t service = 2;
inline bool InfraHttpRequestInput::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfraHttpRequestInput::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfraHttpRequestInput::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfraHttpRequestInput::clear_service() {
  service_ = 1;
  clear_has_service();
}
inline ccd::InfraHttpService_t InfraHttpRequestInput::service() const {
  return static_cast< ccd::InfraHttpService_t >(service_);
}
inline void InfraHttpRequestInput::set_service(ccd::InfraHttpService_t value) {
  GOOGLE_DCHECK(ccd::InfraHttpService_t_IsValid(value));
  set_has_service();
  service_ = value;
}

// required bool secure = 3 [default = true];
inline bool InfraHttpRequestInput::has_secure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InfraHttpRequestInput::set_has_secure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InfraHttpRequestInput::clear_has_secure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InfraHttpRequestInput::clear_secure() {
  secure_ = true;
  clear_has_secure();
}
inline bool InfraHttpRequestInput::secure() const {
  return secure_;
}
inline void InfraHttpRequestInput::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
}

// optional .ccd.InfraHttpRequestMethod_t method = 4 [default = INFRA_HTTP_METHOD_GET];
inline bool InfraHttpRequestInput::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InfraHttpRequestInput::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InfraHttpRequestInput::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InfraHttpRequestInput::clear_method() {
  method_ = 1;
  clear_has_method();
}
inline ccd::InfraHttpRequestMethod_t InfraHttpRequestInput::method() const {
  return static_cast< ccd::InfraHttpRequestMethod_t >(method_);
}
inline void InfraHttpRequestInput::set_method(ccd::InfraHttpRequestMethod_t value) {
  GOOGLE_DCHECK(ccd::InfraHttpRequestMethod_t_IsValid(value));
  set_has_method();
  method_ = value;
}

// required string url_suffix = 5;
inline bool InfraHttpRequestInput::has_url_suffix() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InfraHttpRequestInput::set_has_url_suffix() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InfraHttpRequestInput::clear_has_url_suffix() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InfraHttpRequestInput::clear_url_suffix() {
  if (url_suffix_ != &::google::protobuf::internal::kEmptyString) {
    url_suffix_->clear();
  }
  clear_has_url_suffix();
}
inline const ::std::string& InfraHttpRequestInput::url_suffix() const {
  return *url_suffix_;
}
inline void InfraHttpRequestInput::set_url_suffix(const ::std::string& value) {
  set_has_url_suffix();
  if (url_suffix_ == &::google::protobuf::internal::kEmptyString) {
    url_suffix_ = new ::std::string;
  }
  url_suffix_->assign(value);
}
inline void InfraHttpRequestInput::set_url_suffix(const char* value) {
  set_has_url_suffix();
  if (url_suffix_ == &::google::protobuf::internal::kEmptyString) {
    url_suffix_ = new ::std::string;
  }
  url_suffix_->assign(value);
}
inline void InfraHttpRequestInput::set_url_suffix(const char* value, size_t size) {
  set_has_url_suffix();
  if (url_suffix_ == &::google::protobuf::internal::kEmptyString) {
    url_suffix_ = new ::std::string;
  }
  url_suffix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InfraHttpRequestInput::mutable_url_suffix() {
  set_has_url_suffix();
  if (url_suffix_ == &::google::protobuf::internal::kEmptyString) {
    url_suffix_ = new ::std::string;
  }
  return url_suffix_;
}
inline ::std::string* InfraHttpRequestInput::release_url_suffix() {
  clear_has_url_suffix();
  if (url_suffix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_suffix_;
    url_suffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string post_data = 6;
inline bool InfraHttpRequestInput::has_post_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InfraHttpRequestInput::set_has_post_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InfraHttpRequestInput::clear_has_post_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InfraHttpRequestInput::clear_post_data() {
  if (post_data_ != &::google::protobuf::internal::kEmptyString) {
    post_data_->clear();
  }
  clear_has_post_data();
}
inline const ::std::string& InfraHttpRequestInput::post_data() const {
  return *post_data_;
}
inline void InfraHttpRequestInput::set_post_data(const ::std::string& value) {
  set_has_post_data();
  if (post_data_ == &::google::protobuf::internal::kEmptyString) {
    post_data_ = new ::std::string;
  }
  post_data_->assign(value);
}
inline void InfraHttpRequestInput::set_post_data(const char* value) {
  set_has_post_data();
  if (post_data_ == &::google::protobuf::internal::kEmptyString) {
    post_data_ = new ::std::string;
  }
  post_data_->assign(value);
}
inline void InfraHttpRequestInput::set_post_data(const char* value, size_t size) {
  set_has_post_data();
  if (post_data_ == &::google::protobuf::internal::kEmptyString) {
    post_data_ = new ::std::string;
  }
  post_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InfraHttpRequestInput::mutable_post_data() {
  set_has_post_data();
  if (post_data_ == &::google::protobuf::internal::kEmptyString) {
    post_data_ = new ::std::string;
  }
  return post_data_;
}
inline ::std::string* InfraHttpRequestInput::release_post_data() {
  clear_has_post_data();
  if (post_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = post_data_;
    post_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool privileged_operation = 7 [default = false];
inline bool InfraHttpRequestInput::has_privileged_operation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InfraHttpRequestInput::set_has_privileged_operation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InfraHttpRequestInput::clear_has_privileged_operation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InfraHttpRequestInput::clear_privileged_operation() {
  privileged_operation_ = false;
  clear_has_privileged_operation();
}
inline bool InfraHttpRequestInput::privileged_operation() const {
  return privileged_operation_;
}
inline void InfraHttpRequestInput::set_privileged_operation(bool value) {
  set_has_privileged_operation();
  privileged_operation_ = value;
}

// -------------------------------------------------------------------

// InfraHttpRequestOutput

// required int32 response_code = 1;
inline bool InfraHttpRequestOutput::has_response_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfraHttpRequestOutput::set_has_response_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfraHttpRequestOutput::clear_has_response_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfraHttpRequestOutput::clear_response_code() {
  response_code_ = 0;
  clear_has_response_code();
}
inline ::google::protobuf::int32 InfraHttpRequestOutput::response_code() const {
  return response_code_;
}
inline void InfraHttpRequestOutput::set_response_code(::google::protobuf::int32 value) {
  set_has_response_code();
  response_code_ = value;
}

// optional string http_response = 2;
inline bool InfraHttpRequestOutput::has_http_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InfraHttpRequestOutput::set_has_http_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InfraHttpRequestOutput::clear_has_http_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InfraHttpRequestOutput::clear_http_response() {
  if (http_response_ != &::google::protobuf::internal::kEmptyString) {
    http_response_->clear();
  }
  clear_has_http_response();
}
inline const ::std::string& InfraHttpRequestOutput::http_response() const {
  return *http_response_;
}
inline void InfraHttpRequestOutput::set_http_response(const ::std::string& value) {
  set_has_http_response();
  if (http_response_ == &::google::protobuf::internal::kEmptyString) {
    http_response_ = new ::std::string;
  }
  http_response_->assign(value);
}
inline void InfraHttpRequestOutput::set_http_response(const char* value) {
  set_has_http_response();
  if (http_response_ == &::google::protobuf::internal::kEmptyString) {
    http_response_ = new ::std::string;
  }
  http_response_->assign(value);
}
inline void InfraHttpRequestOutput::set_http_response(const char* value, size_t size) {
  set_has_http_response();
  if (http_response_ == &::google::protobuf::internal::kEmptyString) {
    http_response_ = new ::std::string;
  }
  http_response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InfraHttpRequestOutput::mutable_http_response() {
  set_has_http_response();
  if (http_response_ == &::google::protobuf::internal::kEmptyString) {
    http_response_ = new ::std::string;
  }
  return http_response_;
}
inline ::std::string* InfraHttpRequestOutput::release_http_response() {
  clear_has_http_response();
  if (http_response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = http_response_;
    http_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RegisterStorageNodeInput

// required fixed64 user_id = 1;
inline bool RegisterStorageNodeInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterStorageNodeInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterStorageNodeInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterStorageNodeInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RegisterStorageNodeInput::user_id() const {
  return user_id_;
}
inline void RegisterStorageNodeInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// UnregisterStorageNodeInput

// required fixed64 user_id = 1;
inline bool UnregisterStorageNodeInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnregisterStorageNodeInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnregisterStorageNodeInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnregisterStorageNodeInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UnregisterStorageNodeInput::user_id() const {
  return user_id_;
}
inline void UnregisterStorageNodeInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional fixed64 device_id = 2;
inline bool UnregisterStorageNodeInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnregisterStorageNodeInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnregisterStorageNodeInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnregisterStorageNodeInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 UnregisterStorageNodeInput::device_id() const {
  return device_id_;
}
inline void UnregisterStorageNodeInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// -------------------------------------------------------------------

// RemoteFileAccessControlDirSpec

// optional string dir = 1;
inline bool RemoteFileAccessControlDirSpec::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteFileAccessControlDirSpec::set_has_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteFileAccessControlDirSpec::clear_has_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteFileAccessControlDirSpec::clear_dir() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    dir_->clear();
  }
  clear_has_dir();
}
inline const ::std::string& RemoteFileAccessControlDirSpec::dir() const {
  return *dir_;
}
inline void RemoteFileAccessControlDirSpec::set_dir(const ::std::string& value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void RemoteFileAccessControlDirSpec::set_dir(const char* value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void RemoteFileAccessControlDirSpec::set_dir(const char* value, size_t size) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoteFileAccessControlDirSpec::mutable_dir() {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  return dir_;
}
inline ::std::string* RemoteFileAccessControlDirSpec::release_dir() {
  clear_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dir_;
    dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 2;
inline bool RemoteFileAccessControlDirSpec::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteFileAccessControlDirSpec::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteFileAccessControlDirSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteFileAccessControlDirSpec::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RemoteFileAccessControlDirSpec::name() const {
  return *name_;
}
inline void RemoteFileAccessControlDirSpec::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RemoteFileAccessControlDirSpec::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RemoteFileAccessControlDirSpec::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoteFileAccessControlDirSpec::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RemoteFileAccessControlDirSpec::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_user = 3;
inline bool RemoteFileAccessControlDirSpec::has_is_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteFileAccessControlDirSpec::set_has_is_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteFileAccessControlDirSpec::clear_has_is_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteFileAccessControlDirSpec::clear_is_user() {
  is_user_ = false;
  clear_has_is_user();
}
inline bool RemoteFileAccessControlDirSpec::is_user() const {
  return is_user_;
}
inline void RemoteFileAccessControlDirSpec::set_is_user(bool value) {
  set_has_is_user();
  is_user_ = value;
}

// required bool is_allowed = 4;
inline bool RemoteFileAccessControlDirSpec::has_is_allowed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RemoteFileAccessControlDirSpec::set_has_is_allowed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RemoteFileAccessControlDirSpec::clear_has_is_allowed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RemoteFileAccessControlDirSpec::clear_is_allowed() {
  is_allowed_ = false;
  clear_has_is_allowed();
}
inline bool RemoteFileAccessControlDirSpec::is_allowed() const {
  return is_allowed_;
}
inline void RemoteFileAccessControlDirSpec::set_is_allowed(bool value) {
  set_has_is_allowed();
  is_allowed_ = value;
}

// -------------------------------------------------------------------

// RemoteFileAccessControlDirs

// repeated .ccd.RemoteFileAccessControlDirSpec dirs = 1;
inline int RemoteFileAccessControlDirs::dirs_size() const {
  return dirs_.size();
}
inline void RemoteFileAccessControlDirs::clear_dirs() {
  dirs_.Clear();
}
inline const ::ccd::RemoteFileAccessControlDirSpec& RemoteFileAccessControlDirs::dirs(int index) const {
  return dirs_.Get(index);
}
inline ::ccd::RemoteFileAccessControlDirSpec* RemoteFileAccessControlDirs::mutable_dirs(int index) {
  return dirs_.Mutable(index);
}
inline ::ccd::RemoteFileAccessControlDirSpec* RemoteFileAccessControlDirs::add_dirs() {
  return dirs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::RemoteFileAccessControlDirSpec >&
RemoteFileAccessControlDirs::dirs() const {
  return dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::RemoteFileAccessControlDirSpec >*
RemoteFileAccessControlDirs::mutable_dirs() {
  return &dirs_;
}

// -------------------------------------------------------------------

// UpdateStorageNodeInput

// required fixed64 user_id = 1;
inline bool UpdateStorageNodeInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateStorageNodeInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateStorageNodeInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateStorageNodeInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UpdateStorageNodeInput::user_id() const {
  return user_id_;
}
inline void UpdateStorageNodeInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional fixed64 device_id = 2;
inline bool UpdateStorageNodeInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateStorageNodeInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateStorageNodeInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateStorageNodeInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 UpdateStorageNodeInput::device_id() const {
  return device_id_;
}
inline void UpdateStorageNodeInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional bool feature_media_server_enabled = 3;
inline bool UpdateStorageNodeInput::has_feature_media_server_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateStorageNodeInput::set_has_feature_media_server_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateStorageNodeInput::clear_has_feature_media_server_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateStorageNodeInput::clear_feature_media_server_enabled() {
  feature_media_server_enabled_ = false;
  clear_has_feature_media_server_enabled();
}
inline bool UpdateStorageNodeInput::feature_media_server_enabled() const {
  return feature_media_server_enabled_;
}
inline void UpdateStorageNodeInput::set_feature_media_server_enabled(bool value) {
  set_has_feature_media_server_enabled();
  feature_media_server_enabled_ = value;
}

// optional bool feature_virt_drive_enabled = 4;
inline bool UpdateStorageNodeInput::has_feature_virt_drive_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateStorageNodeInput::set_has_feature_virt_drive_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateStorageNodeInput::clear_has_feature_virt_drive_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateStorageNodeInput::clear_feature_virt_drive_enabled() {
  feature_virt_drive_enabled_ = false;
  clear_has_feature_virt_drive_enabled();
}
inline bool UpdateStorageNodeInput::feature_virt_drive_enabled() const {
  return feature_virt_drive_enabled_;
}
inline void UpdateStorageNodeInput::set_feature_virt_drive_enabled(bool value) {
  set_has_feature_virt_drive_enabled();
  feature_virt_drive_enabled_ = value;
}

// optional bool feature_remote_file_access_enabled = 5;
inline bool UpdateStorageNodeInput::has_feature_remote_file_access_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateStorageNodeInput::set_has_feature_remote_file_access_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateStorageNodeInput::clear_has_feature_remote_file_access_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateStorageNodeInput::clear_feature_remote_file_access_enabled() {
  feature_remote_file_access_enabled_ = false;
  clear_has_feature_remote_file_access_enabled();
}
inline bool UpdateStorageNodeInput::feature_remote_file_access_enabled() const {
  return feature_remote_file_access_enabled_;
}
inline void UpdateStorageNodeInput::set_feature_remote_file_access_enabled(bool value) {
  set_has_feature_remote_file_access_enabled();
  feature_remote_file_access_enabled_ = value;
}

// optional bool feature_my_storage_server_enabled = 8;
inline bool UpdateStorageNodeInput::has_feature_my_storage_server_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateStorageNodeInput::set_has_feature_my_storage_server_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateStorageNodeInput::clear_has_feature_my_storage_server_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateStorageNodeInput::clear_feature_my_storage_server_enabled() {
  feature_my_storage_server_enabled_ = false;
  clear_has_feature_my_storage_server_enabled();
}
inline bool UpdateStorageNodeInput::feature_my_storage_server_enabled() const {
  return feature_my_storage_server_enabled_;
}
inline void UpdateStorageNodeInput::set_feature_my_storage_server_enabled(bool value) {
  set_has_feature_my_storage_server_enabled();
  feature_my_storage_server_enabled_ = value;
}

// optional .ccd.RemoteFileAccessControlDirSpec add_remotefile_access_control_dir = 6;
inline bool UpdateStorageNodeInput::has_add_remotefile_access_control_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateStorageNodeInput::set_has_add_remotefile_access_control_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateStorageNodeInput::clear_has_add_remotefile_access_control_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateStorageNodeInput::clear_add_remotefile_access_control_dir() {
  if (add_remotefile_access_control_dir_ != NULL) add_remotefile_access_control_dir_->::ccd::RemoteFileAccessControlDirSpec::Clear();
  clear_has_add_remotefile_access_control_dir();
}
inline const ::ccd::RemoteFileAccessControlDirSpec& UpdateStorageNodeInput::add_remotefile_access_control_dir() const {
  return add_remotefile_access_control_dir_ != NULL ? *add_remotefile_access_control_dir_ : *default_instance_->add_remotefile_access_control_dir_;
}
inline ::ccd::RemoteFileAccessControlDirSpec* UpdateStorageNodeInput::mutable_add_remotefile_access_control_dir() {
  set_has_add_remotefile_access_control_dir();
  if (add_remotefile_access_control_dir_ == NULL) add_remotefile_access_control_dir_ = new ::ccd::RemoteFileAccessControlDirSpec;
  return add_remotefile_access_control_dir_;
}
inline ::ccd::RemoteFileAccessControlDirSpec* UpdateStorageNodeInput::release_add_remotefile_access_control_dir() {
  clear_has_add_remotefile_access_control_dir();
  ::ccd::RemoteFileAccessControlDirSpec* temp = add_remotefile_access_control_dir_;
  add_remotefile_access_control_dir_ = NULL;
  return temp;
}

// optional .ccd.RemoteFileAccessControlDirSpec remove_remotefile_access_control_dir = 7;
inline bool UpdateStorageNodeInput::has_remove_remotefile_access_control_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdateStorageNodeInput::set_has_remove_remotefile_access_control_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpdateStorageNodeInput::clear_has_remove_remotefile_access_control_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpdateStorageNodeInput::clear_remove_remotefile_access_control_dir() {
  if (remove_remotefile_access_control_dir_ != NULL) remove_remotefile_access_control_dir_->::ccd::RemoteFileAccessControlDirSpec::Clear();
  clear_has_remove_remotefile_access_control_dir();
}
inline const ::ccd::RemoteFileAccessControlDirSpec& UpdateStorageNodeInput::remove_remotefile_access_control_dir() const {
  return remove_remotefile_access_control_dir_ != NULL ? *remove_remotefile_access_control_dir_ : *default_instance_->remove_remotefile_access_control_dir_;
}
inline ::ccd::RemoteFileAccessControlDirSpec* UpdateStorageNodeInput::mutable_remove_remotefile_access_control_dir() {
  set_has_remove_remotefile_access_control_dir();
  if (remove_remotefile_access_control_dir_ == NULL) remove_remotefile_access_control_dir_ = new ::ccd::RemoteFileAccessControlDirSpec;
  return remove_remotefile_access_control_dir_;
}
inline ::ccd::RemoteFileAccessControlDirSpec* UpdateStorageNodeInput::release_remove_remotefile_access_control_dir() {
  clear_has_remove_remotefile_access_control_dir();
  ::ccd::RemoteFileAccessControlDirSpec* temp = remove_remotefile_access_control_dir_;
  remove_remotefile_access_control_dir_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// LanDeviceRouteInfo

// required .ccd.LanInterfaceType_t type = 1;
inline bool LanDeviceRouteInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanDeviceRouteInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanDeviceRouteInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanDeviceRouteInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ccd::LanInterfaceType_t LanDeviceRouteInfo::type() const {
  return static_cast< ccd::LanInterfaceType_t >(type_);
}
inline void LanDeviceRouteInfo::set_type(ccd::LanInterfaceType_t value) {
  GOOGLE_DCHECK(ccd::LanInterfaceType_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string ip_v4_address = 2;
inline bool LanDeviceRouteInfo::has_ip_v4_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanDeviceRouteInfo::set_has_ip_v4_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanDeviceRouteInfo::clear_has_ip_v4_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanDeviceRouteInfo::clear_ip_v4_address() {
  if (ip_v4_address_ != &::google::protobuf::internal::kEmptyString) {
    ip_v4_address_->clear();
  }
  clear_has_ip_v4_address();
}
inline const ::std::string& LanDeviceRouteInfo::ip_v4_address() const {
  return *ip_v4_address_;
}
inline void LanDeviceRouteInfo::set_ip_v4_address(const ::std::string& value) {
  set_has_ip_v4_address();
  if (ip_v4_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v4_address_ = new ::std::string;
  }
  ip_v4_address_->assign(value);
}
inline void LanDeviceRouteInfo::set_ip_v4_address(const char* value) {
  set_has_ip_v4_address();
  if (ip_v4_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v4_address_ = new ::std::string;
  }
  ip_v4_address_->assign(value);
}
inline void LanDeviceRouteInfo::set_ip_v4_address(const char* value, size_t size) {
  set_has_ip_v4_address();
  if (ip_v4_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v4_address_ = new ::std::string;
  }
  ip_v4_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanDeviceRouteInfo::mutable_ip_v4_address() {
  set_has_ip_v4_address();
  if (ip_v4_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v4_address_ = new ::std::string;
  }
  return ip_v4_address_;
}
inline ::std::string* LanDeviceRouteInfo::release_ip_v4_address() {
  clear_has_ip_v4_address();
  if (ip_v4_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_v4_address_;
    ip_v4_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip_v6_address = 3;
inline bool LanDeviceRouteInfo::has_ip_v6_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanDeviceRouteInfo::set_has_ip_v6_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanDeviceRouteInfo::clear_has_ip_v6_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanDeviceRouteInfo::clear_ip_v6_address() {
  if (ip_v6_address_ != &::google::protobuf::internal::kEmptyString) {
    ip_v6_address_->clear();
  }
  clear_has_ip_v6_address();
}
inline const ::std::string& LanDeviceRouteInfo::ip_v6_address() const {
  return *ip_v6_address_;
}
inline void LanDeviceRouteInfo::set_ip_v6_address(const ::std::string& value) {
  set_has_ip_v6_address();
  if (ip_v6_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_address_ = new ::std::string;
  }
  ip_v6_address_->assign(value);
}
inline void LanDeviceRouteInfo::set_ip_v6_address(const char* value) {
  set_has_ip_v6_address();
  if (ip_v6_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_address_ = new ::std::string;
  }
  ip_v6_address_->assign(value);
}
inline void LanDeviceRouteInfo::set_ip_v6_address(const char* value, size_t size) {
  set_has_ip_v6_address();
  if (ip_v6_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_address_ = new ::std::string;
  }
  ip_v6_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanDeviceRouteInfo::mutable_ip_v6_address() {
  set_has_ip_v6_address();
  if (ip_v6_address_ == &::google::protobuf::internal::kEmptyString) {
    ip_v6_address_ = new ::std::string;
  }
  return ip_v6_address_;
}
inline ::std::string* LanDeviceRouteInfo::release_ip_v6_address() {
  clear_has_ip_v6_address();
  if (ip_v6_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_v6_address_;
    ip_v6_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 media_server_port = 4;
inline bool LanDeviceRouteInfo::has_media_server_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LanDeviceRouteInfo::set_has_media_server_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LanDeviceRouteInfo::clear_has_media_server_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LanDeviceRouteInfo::clear_media_server_port() {
  media_server_port_ = 0u;
  clear_has_media_server_port();
}
inline ::google::protobuf::uint32 LanDeviceRouteInfo::media_server_port() const {
  return media_server_port_;
}
inline void LanDeviceRouteInfo::set_media_server_port(::google::protobuf::uint32 value) {
  set_has_media_server_port();
  media_server_port_ = value;
}

// optional uint32 virtual_drive_port = 5;
inline bool LanDeviceRouteInfo::has_virtual_drive_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LanDeviceRouteInfo::set_has_virtual_drive_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LanDeviceRouteInfo::clear_has_virtual_drive_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LanDeviceRouteInfo::clear_virtual_drive_port() {
  virtual_drive_port_ = 0u;
  clear_has_virtual_drive_port();
}
inline ::google::protobuf::uint32 LanDeviceRouteInfo::virtual_drive_port() const {
  return virtual_drive_port_;
}
inline void LanDeviceRouteInfo::set_virtual_drive_port(::google::protobuf::uint32 value) {
  set_has_virtual_drive_port();
  virtual_drive_port_ = value;
}

// optional uint32 web_front_port = 6;
inline bool LanDeviceRouteInfo::has_web_front_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LanDeviceRouteInfo::set_has_web_front_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LanDeviceRouteInfo::clear_has_web_front_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LanDeviceRouteInfo::clear_web_front_port() {
  web_front_port_ = 0u;
  clear_has_web_front_port();
}
inline ::google::protobuf::uint32 LanDeviceRouteInfo::web_front_port() const {
  return web_front_port_;
}
inline void LanDeviceRouteInfo::set_web_front_port(::google::protobuf::uint32 value) {
  set_has_web_front_port();
  web_front_port_ = value;
}

// optional uint32 tunnel_service_port = 7;
inline bool LanDeviceRouteInfo::has_tunnel_service_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LanDeviceRouteInfo::set_has_tunnel_service_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LanDeviceRouteInfo::clear_has_tunnel_service_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LanDeviceRouteInfo::clear_tunnel_service_port() {
  tunnel_service_port_ = 0u;
  clear_has_tunnel_service_port();
}
inline ::google::protobuf::uint32 LanDeviceRouteInfo::tunnel_service_port() const {
  return tunnel_service_port_;
}
inline void LanDeviceRouteInfo::set_tunnel_service_port(::google::protobuf::uint32 value) {
  set_has_tunnel_service_port();
  tunnel_service_port_ = value;
}

// optional uint32 ext_tunnel_service_port = 8;
inline bool LanDeviceRouteInfo::has_ext_tunnel_service_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LanDeviceRouteInfo::set_has_ext_tunnel_service_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LanDeviceRouteInfo::clear_has_ext_tunnel_service_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LanDeviceRouteInfo::clear_ext_tunnel_service_port() {
  ext_tunnel_service_port_ = 0u;
  clear_has_ext_tunnel_service_port();
}
inline ::google::protobuf::uint32 LanDeviceRouteInfo::ext_tunnel_service_port() const {
  return ext_tunnel_service_port_;
}
inline void LanDeviceRouteInfo::set_ext_tunnel_service_port(::google::protobuf::uint32 value) {
  set_has_ext_tunnel_service_port();
  ext_tunnel_service_port_ = value;
}

// -------------------------------------------------------------------

// LanDeviceInfo

// required .ccd.LanDeviceType_t type = 1;
inline bool LanDeviceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanDeviceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanDeviceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LanDeviceInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ccd::LanDeviceType_t LanDeviceInfo::type() const {
  return static_cast< ccd::LanDeviceType_t >(type_);
}
inline void LanDeviceInfo::set_type(ccd::LanDeviceType_t value) {
  GOOGLE_DCHECK(ccd::LanDeviceType_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string uuid = 2;
inline bool LanDeviceInfo::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanDeviceInfo::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanDeviceInfo::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanDeviceInfo::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& LanDeviceInfo::uuid() const {
  return *uuid_;
}
inline void LanDeviceInfo::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LanDeviceInfo::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void LanDeviceInfo::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanDeviceInfo::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* LanDeviceInfo::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string device_name = 3;
inline bool LanDeviceInfo::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanDeviceInfo::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanDeviceInfo::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanDeviceInfo::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& LanDeviceInfo::device_name() const {
  return *device_name_;
}
inline void LanDeviceInfo::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void LanDeviceInfo::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void LanDeviceInfo::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanDeviceInfo::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* LanDeviceInfo::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 device_id = 4;
inline bool LanDeviceInfo::has_device_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LanDeviceInfo::set_has_device_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LanDeviceInfo::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LanDeviceInfo::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 LanDeviceInfo::device_id() const {
  return device_id_;
}
inline void LanDeviceInfo::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required .ccd.LanDeviceRouteInfo route_info = 5;
inline bool LanDeviceInfo::has_route_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LanDeviceInfo::set_has_route_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LanDeviceInfo::clear_has_route_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LanDeviceInfo::clear_route_info() {
  if (route_info_ != NULL) route_info_->::ccd::LanDeviceRouteInfo::Clear();
  clear_has_route_info();
}
inline const ::ccd::LanDeviceRouteInfo& LanDeviceInfo::route_info() const {
  return route_info_ != NULL ? *route_info_ : *default_instance_->route_info_;
}
inline ::ccd::LanDeviceRouteInfo* LanDeviceInfo::mutable_route_info() {
  set_has_route_info();
  if (route_info_ == NULL) route_info_ = new ::ccd::LanDeviceRouteInfo;
  return route_info_;
}
inline ::ccd::LanDeviceRouteInfo* LanDeviceInfo::release_route_info() {
  clear_has_route_info();
  ::ccd::LanDeviceRouteInfo* temp = route_info_;
  route_info_ = NULL;
  return temp;
}

// optional uint32 notifications = 6;
inline bool LanDeviceInfo::has_notifications() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LanDeviceInfo::set_has_notifications() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LanDeviceInfo::clear_has_notifications() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LanDeviceInfo::clear_notifications() {
  notifications_ = 0u;
  clear_has_notifications();
}
inline ::google::protobuf::uint32 LanDeviceInfo::notifications() const {
  return notifications_;
}
inline void LanDeviceInfo::set_notifications(::google::protobuf::uint32 value) {
  set_has_notifications();
  notifications_ = value;
}

// optional fixed64 user_id = 7;
inline bool LanDeviceInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LanDeviceInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LanDeviceInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LanDeviceInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LanDeviceInfo::user_id() const {
  return user_id_;
}
inline void LanDeviceInfo::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string pd_instance_id = 8;
inline bool LanDeviceInfo::has_pd_instance_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LanDeviceInfo::set_has_pd_instance_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LanDeviceInfo::clear_has_pd_instance_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LanDeviceInfo::clear_pd_instance_id() {
  if (pd_instance_id_ != &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_->clear();
  }
  clear_has_pd_instance_id();
}
inline const ::std::string& LanDeviceInfo::pd_instance_id() const {
  return *pd_instance_id_;
}
inline void LanDeviceInfo::set_pd_instance_id(const ::std::string& value) {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  pd_instance_id_->assign(value);
}
inline void LanDeviceInfo::set_pd_instance_id(const char* value) {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  pd_instance_id_->assign(value);
}
inline void LanDeviceInfo::set_pd_instance_id(const char* value, size_t size) {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  pd_instance_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LanDeviceInfo::mutable_pd_instance_id() {
  set_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    pd_instance_id_ = new ::std::string;
  }
  return pd_instance_id_;
}
inline ::std::string* LanDeviceInfo::release_pd_instance_id() {
  clear_has_pd_instance_id();
  if (pd_instance_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pd_instance_id_;
    pd_instance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 pd_instance_id_num = 9;
inline bool LanDeviceInfo::has_pd_instance_id_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LanDeviceInfo::set_has_pd_instance_id_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LanDeviceInfo::clear_has_pd_instance_id_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LanDeviceInfo::clear_pd_instance_id_num() {
  pd_instance_id_num_ = 0u;
  clear_has_pd_instance_id_num();
}
inline ::google::protobuf::uint32 LanDeviceInfo::pd_instance_id_num() const {
  return pd_instance_id_num_;
}
inline void LanDeviceInfo::set_pd_instance_id_num(::google::protobuf::uint32 value) {
  set_has_pd_instance_id_num();
  pd_instance_id_num_ = value;
}

// -------------------------------------------------------------------

// ReportLanDevicesInput

// repeated .ccd.LanDeviceInfo infos = 1;
inline int ReportLanDevicesInput::infos_size() const {
  return infos_.size();
}
inline void ReportLanDevicesInput::clear_infos() {
  infos_.Clear();
}
inline const ::ccd::LanDeviceInfo& ReportLanDevicesInput::infos(int index) const {
  return infos_.Get(index);
}
inline ::ccd::LanDeviceInfo* ReportLanDevicesInput::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::ccd::LanDeviceInfo* ReportLanDevicesInput::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >&
ReportLanDevicesInput::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >*
ReportLanDevicesInput::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// ListLanDevicesInput

// optional fixed64 user_id = 1;
inline bool ListLanDevicesInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListLanDevicesInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListLanDevicesInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListLanDevicesInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ListLanDevicesInput::user_id() const {
  return user_id_;
}
inline void ListLanDevicesInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool include_unregistered = 2;
inline bool ListLanDevicesInput::has_include_unregistered() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListLanDevicesInput::set_has_include_unregistered() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListLanDevicesInput::clear_has_include_unregistered() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListLanDevicesInput::clear_include_unregistered() {
  include_unregistered_ = false;
  clear_has_include_unregistered();
}
inline bool ListLanDevicesInput::include_unregistered() const {
  return include_unregistered_;
}
inline void ListLanDevicesInput::set_include_unregistered(bool value) {
  set_has_include_unregistered();
  include_unregistered_ = value;
}

// optional bool include_registered_but_not_linked = 3;
inline bool ListLanDevicesInput::has_include_registered_but_not_linked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListLanDevicesInput::set_has_include_registered_but_not_linked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListLanDevicesInput::clear_has_include_registered_but_not_linked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListLanDevicesInput::clear_include_registered_but_not_linked() {
  include_registered_but_not_linked_ = false;
  clear_has_include_registered_but_not_linked();
}
inline bool ListLanDevicesInput::include_registered_but_not_linked() const {
  return include_registered_but_not_linked_;
}
inline void ListLanDevicesInput::set_include_registered_but_not_linked(bool value) {
  set_has_include_registered_but_not_linked();
  include_registered_but_not_linked_ = value;
}

// optional bool include_linked = 4;
inline bool ListLanDevicesInput::has_include_linked() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListLanDevicesInput::set_has_include_linked() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListLanDevicesInput::clear_has_include_linked() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListLanDevicesInput::clear_include_linked() {
  include_linked_ = false;
  clear_has_include_linked();
}
inline bool ListLanDevicesInput::include_linked() const {
  return include_linked_;
}
inline void ListLanDevicesInput::set_include_linked(bool value) {
  set_has_include_linked();
  include_linked_ = value;
}

// -------------------------------------------------------------------

// ListLanDevicesOutput

// repeated .ccd.LanDeviceInfo infos = 1;
inline int ListLanDevicesOutput::infos_size() const {
  return infos_.size();
}
inline void ListLanDevicesOutput::clear_infos() {
  infos_.Clear();
}
inline const ::ccd::LanDeviceInfo& ListLanDevicesOutput::infos(int index) const {
  return infos_.Get(index);
}
inline ::ccd::LanDeviceInfo* ListLanDevicesOutput::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::ccd::LanDeviceInfo* ListLanDevicesOutput::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >&
ListLanDevicesOutput::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::LanDeviceInfo >*
ListLanDevicesOutput::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// DatasetItem

// required fixed64 user_id = 1;
inline bool DatasetItem::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetItem::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetItem::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetItem::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 DatasetItem::user_id() const {
  return user_id_;
}
inline void DatasetItem::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 dataset_id = 2;
inline bool DatasetItem::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetItem::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetItem::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetItem::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 DatasetItem::dataset_id() const {
  return dataset_id_;
}
inline void DatasetItem::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// -------------------------------------------------------------------

// ListStorageNodeDatasetsOutput

// repeated .ccd.DatasetItem datasets = 1;
inline int ListStorageNodeDatasetsOutput::datasets_size() const {
  return datasets_.size();
}
inline void ListStorageNodeDatasetsOutput::clear_datasets() {
  datasets_.Clear();
}
inline const ::ccd::DatasetItem& ListStorageNodeDatasetsOutput::datasets(int index) const {
  return datasets_.Get(index);
}
inline ::ccd::DatasetItem* ListStorageNodeDatasetsOutput::mutable_datasets(int index) {
  return datasets_.Mutable(index);
}
inline ::ccd::DatasetItem* ListStorageNodeDatasetsOutput::add_datasets() {
  return datasets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::DatasetItem >&
ListStorageNodeDatasetsOutput::datasets() const {
  return datasets_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::DatasetItem >*
ListStorageNodeDatasetsOutput::mutable_datasets() {
  return &datasets_;
}

// -------------------------------------------------------------------

// TrusteeItem

// required string sid = 1;
inline bool TrusteeItem::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrusteeItem::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrusteeItem::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrusteeItem::clear_sid() {
  if (sid_ != &::google::protobuf::internal::kEmptyString) {
    sid_->clear();
  }
  clear_has_sid();
}
inline const ::std::string& TrusteeItem::sid() const {
  return *sid_;
}
inline void TrusteeItem::set_sid(const ::std::string& value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void TrusteeItem::set_sid(const char* value) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(value);
}
inline void TrusteeItem::set_sid(const char* value, size_t size) {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  sid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrusteeItem::mutable_sid() {
  set_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    sid_ = new ::std::string;
  }
  return sid_;
}
inline ::std::string* TrusteeItem::release_sid() {
  clear_has_sid();
  if (sid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sid_;
    sid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 attr = 2;
inline bool TrusteeItem::has_attr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrusteeItem::set_has_attr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrusteeItem::clear_has_attr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrusteeItem::clear_attr() {
  attr_ = GOOGLE_ULONGLONG(0);
  clear_has_attr();
}
inline ::google::protobuf::uint64 TrusteeItem::attr() const {
  return attr_;
}
inline void TrusteeItem::set_attr(::google::protobuf::uint64 value) {
  set_has_attr();
  attr_ = value;
}

// -------------------------------------------------------------------

// CCDWin32StartParams

// repeated .ccd.TrusteeItem trustees = 1;
inline int CCDWin32StartParams::trustees_size() const {
  return trustees_.size();
}
inline void CCDWin32StartParams::clear_trustees() {
  trustees_.Clear();
}
inline const ::ccd::TrusteeItem& CCDWin32StartParams::trustees(int index) const {
  return trustees_.Get(index);
}
inline ::ccd::TrusteeItem* CCDWin32StartParams::mutable_trustees(int index) {
  return trustees_.Mutable(index);
}
inline ::ccd::TrusteeItem* CCDWin32StartParams::add_trustees() {
  return trustees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::TrusteeItem >&
CCDWin32StartParams::trustees() const {
  return trustees_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::TrusteeItem >*
CCDWin32StartParams::mutable_trustees() {
  return &trustees_;
}

// -------------------------------------------------------------------

// AddDatasetInput

// required fixed64 user_id = 1;
inline bool AddDatasetInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddDatasetInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddDatasetInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddDatasetInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 AddDatasetInput::user_id() const {
  return user_id_;
}
inline void AddDatasetInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string dataset_name = 2;
inline bool AddDatasetInput::has_dataset_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddDatasetInput::set_has_dataset_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddDatasetInput::clear_has_dataset_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddDatasetInput::clear_dataset_name() {
  if (dataset_name_ != &::google::protobuf::internal::kEmptyString) {
    dataset_name_->clear();
  }
  clear_has_dataset_name();
}
inline const ::std::string& AddDatasetInput::dataset_name() const {
  return *dataset_name_;
}
inline void AddDatasetInput::set_dataset_name(const ::std::string& value) {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  dataset_name_->assign(value);
}
inline void AddDatasetInput::set_dataset_name(const char* value) {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  dataset_name_->assign(value);
}
inline void AddDatasetInput::set_dataset_name(const char* value, size_t size) {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  dataset_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddDatasetInput::mutable_dataset_name() {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  return dataset_name_;
}
inline ::std::string* AddDatasetInput::release_dataset_name() {
  clear_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_name_;
    dataset_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .ccd.NewDatasetType_t dataset_type = 3;
inline bool AddDatasetInput::has_dataset_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddDatasetInput::set_has_dataset_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddDatasetInput::clear_has_dataset_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddDatasetInput::clear_dataset_type() {
  dataset_type_ = 1;
  clear_has_dataset_type();
}
inline ccd::NewDatasetType_t AddDatasetInput::dataset_type() const {
  return static_cast< ccd::NewDatasetType_t >(dataset_type_);
}
inline void AddDatasetInput::set_dataset_type(ccd::NewDatasetType_t value) {
  GOOGLE_DCHECK(ccd::NewDatasetType_t_IsValid(value));
  set_has_dataset_type();
  dataset_type_ = value;
}

// -------------------------------------------------------------------

// AddDatasetOutput

// required fixed64 dataset_id = 1;
inline bool AddDatasetOutput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddDatasetOutput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddDatasetOutput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddDatasetOutput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 AddDatasetOutput::dataset_id() const {
  return dataset_id_;
}
inline void AddDatasetOutput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// -------------------------------------------------------------------

// AddSyncSubscriptionInput

// required fixed64 user_id = 1;
inline bool AddSyncSubscriptionInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddSyncSubscriptionInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddSyncSubscriptionInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 AddSyncSubscriptionInput::user_id() const {
  return user_id_;
}
inline void AddSyncSubscriptionInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional fixed64 device_id = 2;
inline bool AddSyncSubscriptionInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddSyncSubscriptionInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddSyncSubscriptionInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 AddSyncSubscriptionInput::device_id() const {
  return device_id_;
}
inline void AddSyncSubscriptionInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required fixed64 dataset_id = 3;
inline bool AddSyncSubscriptionInput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddSyncSubscriptionInput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddSyncSubscriptionInput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 AddSyncSubscriptionInput::dataset_id() const {
  return dataset_id_;
}
inline void AddSyncSubscriptionInput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required .ccd.SyncSubscriptionType_t subscription_type = 4;
inline bool AddSyncSubscriptionInput::has_subscription_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_subscription_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddSyncSubscriptionInput::clear_has_subscription_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddSyncSubscriptionInput::clear_subscription_type() {
  subscription_type_ = 1;
  clear_has_subscription_type();
}
inline ccd::SyncSubscriptionType_t AddSyncSubscriptionInput::subscription_type() const {
  return static_cast< ccd::SyncSubscriptionType_t >(subscription_type_);
}
inline void AddSyncSubscriptionInput::set_subscription_type(ccd::SyncSubscriptionType_t value) {
  GOOGLE_DCHECK(ccd::SyncSubscriptionType_t_IsValid(value));
  set_has_subscription_type();
  subscription_type_ = value;
}

// optional string device_root = 5;
inline bool AddSyncSubscriptionInput::has_device_root() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_device_root() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddSyncSubscriptionInput::clear_has_device_root() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddSyncSubscriptionInput::clear_device_root() {
  if (device_root_ != &::google::protobuf::internal::kEmptyString) {
    device_root_->clear();
  }
  clear_has_device_root();
}
inline const ::std::string& AddSyncSubscriptionInput::device_root() const {
  return *device_root_;
}
inline void AddSyncSubscriptionInput::set_device_root(const ::std::string& value) {
  set_has_device_root();
  if (device_root_ == &::google::protobuf::internal::kEmptyString) {
    device_root_ = new ::std::string;
  }
  device_root_->assign(value);
}
inline void AddSyncSubscriptionInput::set_device_root(const char* value) {
  set_has_device_root();
  if (device_root_ == &::google::protobuf::internal::kEmptyString) {
    device_root_ = new ::std::string;
  }
  device_root_->assign(value);
}
inline void AddSyncSubscriptionInput::set_device_root(const char* value, size_t size) {
  set_has_device_root();
  if (device_root_ == &::google::protobuf::internal::kEmptyString) {
    device_root_ = new ::std::string;
  }
  device_root_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddSyncSubscriptionInput::mutable_device_root() {
  set_has_device_root();
  if (device_root_ == &::google::protobuf::internal::kEmptyString) {
    device_root_ = new ::std::string;
  }
  return device_root_;
}
inline ::std::string* AddSyncSubscriptionInput::release_device_root() {
  clear_has_device_root();
  if (device_root_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_root_;
    device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string filter = 6;
inline bool AddSyncSubscriptionInput::has_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddSyncSubscriptionInput::clear_has_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddSyncSubscriptionInput::clear_filter() {
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    filter_->clear();
  }
  clear_has_filter();
}
inline const ::std::string& AddSyncSubscriptionInput::filter() const {
  return *filter_;
}
inline void AddSyncSubscriptionInput::set_filter(const ::std::string& value) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
}
inline void AddSyncSubscriptionInput::set_filter(const char* value) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
}
inline void AddSyncSubscriptionInput::set_filter(const char* value, size_t size) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddSyncSubscriptionInput::mutable_filter() {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  return filter_;
}
inline ::std::string* AddSyncSubscriptionInput::release_filter() {
  clear_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filter_;
    filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 max_size = 7;
inline bool AddSyncSubscriptionInput::has_max_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_max_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddSyncSubscriptionInput::clear_has_max_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddSyncSubscriptionInput::clear_max_size() {
  max_size_ = GOOGLE_ULONGLONG(0);
  clear_has_max_size();
}
inline ::google::protobuf::uint64 AddSyncSubscriptionInput::max_size() const {
  return max_size_;
}
inline void AddSyncSubscriptionInput::set_max_size(::google::protobuf::uint64 value) {
  set_has_max_size();
  max_size_ = value;
}

// optional fixed64 max_files = 8;
inline bool AddSyncSubscriptionInput::has_max_files() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AddSyncSubscriptionInput::set_has_max_files() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AddSyncSubscriptionInput::clear_has_max_files() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AddSyncSubscriptionInput::clear_max_files() {
  max_files_ = GOOGLE_ULONGLONG(0);
  clear_has_max_files();
}
inline ::google::protobuf::uint64 AddSyncSubscriptionInput::max_files() const {
  return max_files_;
}
inline void AddSyncSubscriptionInput::set_max_files(::google::protobuf::uint64 value) {
  set_has_max_files();
  max_files_ = value;
}

// -------------------------------------------------------------------

// DeleteDatasetInput

// required fixed64 user_id = 1;
inline bool DeleteDatasetInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteDatasetInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteDatasetInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteDatasetInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 DeleteDatasetInput::user_id() const {
  return user_id_;
}
inline void DeleteDatasetInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 dataset_id = 2;
inline bool DeleteDatasetInput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteDatasetInput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteDatasetInput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteDatasetInput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 DeleteDatasetInput::dataset_id() const {
  return dataset_id_;
}
inline void DeleteDatasetInput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// -------------------------------------------------------------------

// DeleteSyncSubscriptionsInput

// required fixed64 user_id = 1;
inline bool DeleteSyncSubscriptionsInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSyncSubscriptionsInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSyncSubscriptionsInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSyncSubscriptionsInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 DeleteSyncSubscriptionsInput::user_id() const {
  return user_id_;
}
inline void DeleteSyncSubscriptionsInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// repeated fixed64 dataset_ids = 2;
inline int DeleteSyncSubscriptionsInput::dataset_ids_size() const {
  return dataset_ids_.size();
}
inline void DeleteSyncSubscriptionsInput::clear_dataset_ids() {
  dataset_ids_.Clear();
}
inline ::google::protobuf::uint64 DeleteSyncSubscriptionsInput::dataset_ids(int index) const {
  return dataset_ids_.Get(index);
}
inline void DeleteSyncSubscriptionsInput::set_dataset_ids(int index, ::google::protobuf::uint64 value) {
  dataset_ids_.Set(index, value);
}
inline void DeleteSyncSubscriptionsInput::add_dataset_ids(::google::protobuf::uint64 value) {
  dataset_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DeleteSyncSubscriptionsInput::dataset_ids() const {
  return dataset_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DeleteSyncSubscriptionsInput::mutable_dataset_ids() {
  return &dataset_ids_;
}

// optional fixed64 device_id = 3;
inline bool DeleteSyncSubscriptionsInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteSyncSubscriptionsInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeleteSyncSubscriptionsInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeleteSyncSubscriptionsInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 DeleteSyncSubscriptionsInput::device_id() const {
  return device_id_;
}
inline void DeleteSyncSubscriptionsInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// -------------------------------------------------------------------

// EventsCreateQueueInput

// -------------------------------------------------------------------

// EventsCreateQueueOutput

// required fixed64 queue_handle = 1;
inline bool EventsCreateQueueOutput::has_queue_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventsCreateQueueOutput::set_has_queue_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventsCreateQueueOutput::clear_has_queue_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventsCreateQueueOutput::clear_queue_handle() {
  queue_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_queue_handle();
}
inline ::google::protobuf::uint64 EventsCreateQueueOutput::queue_handle() const {
  return queue_handle_;
}
inline void EventsCreateQueueOutput::set_queue_handle(::google::protobuf::uint64 value) {
  set_has_queue_handle();
  queue_handle_ = value;
}

// -------------------------------------------------------------------

// EventsDestroyQueueInput

// required fixed64 queue_handle = 1;
inline bool EventsDestroyQueueInput::has_queue_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventsDestroyQueueInput::set_has_queue_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventsDestroyQueueInput::clear_has_queue_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventsDestroyQueueInput::clear_queue_handle() {
  queue_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_queue_handle();
}
inline ::google::protobuf::uint64 EventsDestroyQueueInput::queue_handle() const {
  return queue_handle_;
}
inline void EventsDestroyQueueInput::set_queue_handle(::google::protobuf::uint64 value) {
  set_has_queue_handle();
  queue_handle_ = value;
}

// -------------------------------------------------------------------

// EventsDequeueInput

// required fixed64 queue_handle = 1;
inline bool EventsDequeueInput::has_queue_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventsDequeueInput::set_has_queue_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventsDequeueInput::clear_has_queue_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventsDequeueInput::clear_queue_handle() {
  queue_handle_ = GOOGLE_ULONGLONG(0);
  clear_has_queue_handle();
}
inline ::google::protobuf::uint64 EventsDequeueInput::queue_handle() const {
  return queue_handle_;
}
inline void EventsDequeueInput::set_queue_handle(::google::protobuf::uint64 value) {
  set_has_queue_handle();
  queue_handle_ = value;
}

// optional uint32 max_count = 2;
inline bool EventsDequeueInput::has_max_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventsDequeueInput::set_has_max_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventsDequeueInput::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventsDequeueInput::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 EventsDequeueInput::max_count() const {
  return max_count_;
}
inline void EventsDequeueInput::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
}

// optional int32 timeout = 3 [default = 0];
inline bool EventsDequeueInput::has_timeout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventsDequeueInput::set_has_timeout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventsDequeueInput::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventsDequeueInput::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 EventsDequeueInput::timeout() const {
  return timeout_;
}
inline void EventsDequeueInput::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// EventSyncFeatureStatusChange

// required .ccd.SyncFeature_t feature = 1;
inline bool EventSyncFeatureStatusChange::has_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventSyncFeatureStatusChange::set_has_feature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventSyncFeatureStatusChange::clear_has_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventSyncFeatureStatusChange::clear_feature() {
  feature_ = 1;
  clear_has_feature();
}
inline ccd::SyncFeature_t EventSyncFeatureStatusChange::feature() const {
  return static_cast< ccd::SyncFeature_t >(feature_);
}
inline void EventSyncFeatureStatusChange::set_feature(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  set_has_feature();
  feature_ = value;
}

// required .ccd.FeatureSyncStateSummary status = 2;
inline bool EventSyncFeatureStatusChange::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventSyncFeatureStatusChange::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventSyncFeatureStatusChange::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventSyncFeatureStatusChange::clear_status() {
  if (status_ != NULL) status_->::ccd::FeatureSyncStateSummary::Clear();
  clear_has_status();
}
inline const ::ccd::FeatureSyncStateSummary& EventSyncFeatureStatusChange::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ccd::FeatureSyncStateSummary* EventSyncFeatureStatusChange::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ccd::FeatureSyncStateSummary;
  return status_;
}
inline ::ccd::FeatureSyncStateSummary* EventSyncFeatureStatusChange::release_status() {
  clear_has_status();
  ::ccd::FeatureSyncStateSummary* temp = status_;
  status_ = NULL;
  return temp;
}

// optional fixed64 device_id = 8;
inline bool EventSyncFeatureStatusChange::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventSyncFeatureStatusChange::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventSyncFeatureStatusChange::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventSyncFeatureStatusChange::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 EventSyncFeatureStatusChange::device_id() const {
  return device_id_;
}
inline void EventSyncFeatureStatusChange::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// -------------------------------------------------------------------

// EventDeviceInfoChange

// required fixed64 device_id = 1;
inline bool EventDeviceInfoChange::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventDeviceInfoChange::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventDeviceInfoChange::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventDeviceInfoChange::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 EventDeviceInfoChange::device_id() const {
  return device_id_;
}
inline void EventDeviceInfoChange::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required .ccd.DeviceInfoChangeType_t change_type = 2;
inline bool EventDeviceInfoChange::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventDeviceInfoChange::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventDeviceInfoChange::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventDeviceInfoChange::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ccd::DeviceInfoChangeType_t EventDeviceInfoChange::change_type() const {
  return static_cast< ccd::DeviceInfoChangeType_t >(change_type_);
}
inline void EventDeviceInfoChange::set_change_type(ccd::DeviceInfoChangeType_t value) {
  GOOGLE_DCHECK(ccd::DeviceInfoChangeType_t_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// optional string device_name = 3;
inline bool EventDeviceInfoChange::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventDeviceInfoChange::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventDeviceInfoChange::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventDeviceInfoChange::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& EventDeviceInfoChange::device_name() const {
  return *device_name_;
}
inline void EventDeviceInfoChange::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void EventDeviceInfoChange::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void EventDeviceInfoChange::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventDeviceInfoChange::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* EventDeviceInfoChange::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string protocol_version = 4;
inline bool EventDeviceInfoChange::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventDeviceInfoChange::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventDeviceInfoChange::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventDeviceInfoChange::clear_protocol_version() {
  if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
    protocol_version_->clear();
  }
  clear_has_protocol_version();
}
inline const ::std::string& EventDeviceInfoChange::protocol_version() const {
  return *protocol_version_;
}
inline void EventDeviceInfoChange::set_protocol_version(const ::std::string& value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
}
inline void EventDeviceInfoChange::set_protocol_version(const char* value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
}
inline void EventDeviceInfoChange::set_protocol_version(const char* value, size_t size) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventDeviceInfoChange::mutable_protocol_version() {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  return protocol_version_;
}
inline ::std::string* EventDeviceInfoChange::release_protocol_version() {
  clear_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = protocol_version_;
    protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EventDeviceConnectionChange

// required fixed64 device_id = 1;
inline bool EventDeviceConnectionChange::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventDeviceConnectionChange::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventDeviceConnectionChange::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventDeviceConnectionChange::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 EventDeviceConnectionChange::device_id() const {
  return device_id_;
}
inline void EventDeviceConnectionChange::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required .ccd.DeviceConnectionStatus status = 2;
inline bool EventDeviceConnectionChange::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventDeviceConnectionChange::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventDeviceConnectionChange::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventDeviceConnectionChange::clear_status() {
  if (status_ != NULL) status_->::ccd::DeviceConnectionStatus::Clear();
  clear_has_status();
}
inline const ::ccd::DeviceConnectionStatus& EventDeviceConnectionChange::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ccd::DeviceConnectionStatus* EventDeviceConnectionChange::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ccd::DeviceConnectionStatus;
  return status_;
}
inline ::ccd::DeviceConnectionStatus* EventDeviceConnectionChange::release_status() {
  clear_has_status();
  ::ccd::DeviceConnectionStatus* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EventDatasetContentChange

// required fixed64 dataset_id = 1;
inline bool EventDatasetContentChange::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventDatasetContentChange::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventDatasetContentChange::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventDatasetContentChange::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 EventDatasetContentChange::dataset_id() const {
  return dataset_id_;
}
inline void EventDatasetContentChange::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// -------------------------------------------------------------------

// EventDatasetChange

// repeated fixed64 dataset_id = 1;
inline int EventDatasetChange::dataset_id_size() const {
  return dataset_id_.size();
}
inline void EventDatasetChange::clear_dataset_id() {
  dataset_id_.Clear();
}
inline ::google::protobuf::uint64 EventDatasetChange::dataset_id(int index) const {
  return dataset_id_.Get(index);
}
inline void EventDatasetChange::set_dataset_id(int index, ::google::protobuf::uint64 value) {
  dataset_id_.Set(index, value);
}
inline void EventDatasetChange::add_dataset_id(::google::protobuf::uint64 value) {
  dataset_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
EventDatasetChange::dataset_id() const {
  return dataset_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
EventDatasetChange::mutable_dataset_id() {
  return &dataset_id_;
}

// -------------------------------------------------------------------

// PairingRequestAttribute

// required string key = 1;
inline bool PairingRequestAttribute::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PairingRequestAttribute::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PairingRequestAttribute::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PairingRequestAttribute::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PairingRequestAttribute::key() const {
  return *key_;
}
inline void PairingRequestAttribute::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PairingRequestAttribute::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PairingRequestAttribute::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PairingRequestAttribute::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PairingRequestAttribute::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool PairingRequestAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PairingRequestAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PairingRequestAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PairingRequestAttribute::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PairingRequestAttribute::value() const {
  return *value_;
}
inline void PairingRequestAttribute::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PairingRequestAttribute::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PairingRequestAttribute::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PairingRequestAttribute::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PairingRequestAttribute::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EventPairingRequest

// repeated .ccd.PairingRequestAttribute pairing_attributes = 1;
inline int EventPairingRequest::pairing_attributes_size() const {
  return pairing_attributes_.size();
}
inline void EventPairingRequest::clear_pairing_attributes() {
  pairing_attributes_.Clear();
}
inline const ::ccd::PairingRequestAttribute& EventPairingRequest::pairing_attributes(int index) const {
  return pairing_attributes_.Get(index);
}
inline ::ccd::PairingRequestAttribute* EventPairingRequest::mutable_pairing_attributes(int index) {
  return pairing_attributes_.Mutable(index);
}
inline ::ccd::PairingRequestAttribute* EventPairingRequest::add_pairing_attributes() {
  return pairing_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >&
EventPairingRequest::pairing_attributes() const {
  return pairing_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >*
EventPairingRequest::mutable_pairing_attributes() {
  return &pairing_attributes_;
}

// required string transaction_id = 2;
inline bool EventPairingRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventPairingRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventPairingRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventPairingRequest::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& EventPairingRequest::transaction_id() const {
  return *transaction_id_;
}
inline void EventPairingRequest::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void EventPairingRequest::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void EventPairingRequest::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventPairingRequest::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* EventPairingRequest::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EventStorageNodeChange

// required fixed64 device_id = 1;
inline bool EventStorageNodeChange::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventStorageNodeChange::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventStorageNodeChange::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventStorageNodeChange::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 EventStorageNodeChange::device_id() const {
  return device_id_;
}
inline void EventStorageNodeChange::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required .ccd.StorageNodeChangeType_t change_type = 2;
inline bool EventStorageNodeChange::has_change_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventStorageNodeChange::set_has_change_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventStorageNodeChange::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventStorageNodeChange::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ccd::StorageNodeChangeType_t EventStorageNodeChange::change_type() const {
  return static_cast< ccd::StorageNodeChangeType_t >(change_type_);
}
inline void EventStorageNodeChange::set_change_type(ccd::StorageNodeChangeType_t value) {
  GOOGLE_DCHECK(ccd::StorageNodeChangeType_t_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// -------------------------------------------------------------------

// EventUserLogin

// required fixed64 user_id = 1;
inline bool EventUserLogin::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventUserLogin::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventUserLogin::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventUserLogin::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 EventUserLogin::user_id() const {
  return user_id_;
}
inline void EventUserLogin::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// EventUserLogout

// required fixed64 user_id = 1;
inline bool EventUserLogout::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventUserLogout::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventUserLogout::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventUserLogout::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 EventUserLogout::user_id() const {
  return user_id_;
}
inline void EventUserLogout::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .ccd.LogoutReason_t reason = 2 [default = LOGOUT_REASON_UNSPECIFIED];
inline bool EventUserLogout::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventUserLogout::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventUserLogout::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventUserLogout::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ccd::LogoutReason_t EventUserLogout::reason() const {
  return static_cast< ccd::LogoutReason_t >(reason_);
}
inline void EventUserLogout::set_reason(ccd::LogoutReason_t value) {
  GOOGLE_DCHECK(ccd::LogoutReason_t_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// EventDocSaveAndGoCompletion

// required .ccd.DocSaveAndGoChangeType change_type = 1;
inline bool EventDocSaveAndGoCompletion::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventDocSaveAndGoCompletion::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventDocSaveAndGoCompletion::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ccd::DocSaveAndGoChangeType EventDocSaveAndGoCompletion::change_type() const {
  return static_cast< ccd::DocSaveAndGoChangeType >(change_type_);
}
inline void EventDocSaveAndGoCompletion::set_change_type(ccd::DocSaveAndGoChangeType value) {
  GOOGLE_DCHECK(ccd::DocSaveAndGoChangeType_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// required string file_path_and_name = 3;
inline bool EventDocSaveAndGoCompletion::has_file_path_and_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_file_path_and_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventDocSaveAndGoCompletion::clear_has_file_path_and_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventDocSaveAndGoCompletion::clear_file_path_and_name() {
  if (file_path_and_name_ != &::google::protobuf::internal::kEmptyString) {
    file_path_and_name_->clear();
  }
  clear_has_file_path_and_name();
}
inline const ::std::string& EventDocSaveAndGoCompletion::file_path_and_name() const {
  return *file_path_and_name_;
}
inline void EventDocSaveAndGoCompletion::set_file_path_and_name(const ::std::string& value) {
  set_has_file_path_and_name();
  if (file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    file_path_and_name_ = new ::std::string;
  }
  file_path_and_name_->assign(value);
}
inline void EventDocSaveAndGoCompletion::set_file_path_and_name(const char* value) {
  set_has_file_path_and_name();
  if (file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    file_path_and_name_ = new ::std::string;
  }
  file_path_and_name_->assign(value);
}
inline void EventDocSaveAndGoCompletion::set_file_path_and_name(const char* value, size_t size) {
  set_has_file_path_and_name();
  if (file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    file_path_and_name_ = new ::std::string;
  }
  file_path_and_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventDocSaveAndGoCompletion::mutable_file_path_and_name() {
  set_has_file_path_and_name();
  if (file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    file_path_and_name_ = new ::std::string;
  }
  return file_path_and_name_;
}
inline ::std::string* EventDocSaveAndGoCompletion::release_file_path_and_name() {
  clear_has_file_path_and_name();
  if (file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_path_and_name_;
    file_path_and_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string new_file_path_and_name = 4;
inline bool EventDocSaveAndGoCompletion::has_new_file_path_and_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_new_file_path_and_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventDocSaveAndGoCompletion::clear_has_new_file_path_and_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventDocSaveAndGoCompletion::clear_new_file_path_and_name() {
  if (new_file_path_and_name_ != &::google::protobuf::internal::kEmptyString) {
    new_file_path_and_name_->clear();
  }
  clear_has_new_file_path_and_name();
}
inline const ::std::string& EventDocSaveAndGoCompletion::new_file_path_and_name() const {
  return *new_file_path_and_name_;
}
inline void EventDocSaveAndGoCompletion::set_new_file_path_and_name(const ::std::string& value) {
  set_has_new_file_path_and_name();
  if (new_file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    new_file_path_and_name_ = new ::std::string;
  }
  new_file_path_and_name_->assign(value);
}
inline void EventDocSaveAndGoCompletion::set_new_file_path_and_name(const char* value) {
  set_has_new_file_path_and_name();
  if (new_file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    new_file_path_and_name_ = new ::std::string;
  }
  new_file_path_and_name_->assign(value);
}
inline void EventDocSaveAndGoCompletion::set_new_file_path_and_name(const char* value, size_t size) {
  set_has_new_file_path_and_name();
  if (new_file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    new_file_path_and_name_ = new ::std::string;
  }
  new_file_path_and_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventDocSaveAndGoCompletion::mutable_new_file_path_and_name() {
  set_has_new_file_path_and_name();
  if (new_file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    new_file_path_and_name_ = new ::std::string;
  }
  return new_file_path_and_name_;
}
inline ::std::string* EventDocSaveAndGoCompletion::release_new_file_path_and_name() {
  clear_has_new_file_path_and_name();
  if (new_file_path_and_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_file_path_and_name_;
    new_file_path_and_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 modify_time = 5;
inline bool EventDocSaveAndGoCompletion::has_modify_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_modify_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventDocSaveAndGoCompletion::clear_has_modify_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventDocSaveAndGoCompletion::clear_modify_time() {
  modify_time_ = GOOGLE_ULONGLONG(0);
  clear_has_modify_time();
}
inline ::google::protobuf::uint64 EventDocSaveAndGoCompletion::modify_time() const {
  return modify_time_;
}
inline void EventDocSaveAndGoCompletion::set_modify_time(::google::protobuf::uint64 value) {
  set_has_modify_time();
  modify_time_ = value;
}

// optional sint32 result = 10;
inline bool EventDocSaveAndGoCompletion::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventDocSaveAndGoCompletion::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventDocSaveAndGoCompletion::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 EventDocSaveAndGoCompletion::result() const {
  return result_;
}
inline void EventDocSaveAndGoCompletion::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string docname = 11;
inline bool EventDocSaveAndGoCompletion::has_docname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_docname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventDocSaveAndGoCompletion::clear_has_docname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventDocSaveAndGoCompletion::clear_docname() {
  if (docname_ != &::google::protobuf::internal::kEmptyString) {
    docname_->clear();
  }
  clear_has_docname();
}
inline const ::std::string& EventDocSaveAndGoCompletion::docname() const {
  return *docname_;
}
inline void EventDocSaveAndGoCompletion::set_docname(const ::std::string& value) {
  set_has_docname();
  if (docname_ == &::google::protobuf::internal::kEmptyString) {
    docname_ = new ::std::string;
  }
  docname_->assign(value);
}
inline void EventDocSaveAndGoCompletion::set_docname(const char* value) {
  set_has_docname();
  if (docname_ == &::google::protobuf::internal::kEmptyString) {
    docname_ = new ::std::string;
  }
  docname_->assign(value);
}
inline void EventDocSaveAndGoCompletion::set_docname(const char* value, size_t size) {
  set_has_docname();
  if (docname_ == &::google::protobuf::internal::kEmptyString) {
    docname_ = new ::std::string;
  }
  docname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventDocSaveAndGoCompletion::mutable_docname() {
  set_has_docname();
  if (docname_ == &::google::protobuf::internal::kEmptyString) {
    docname_ = new ::std::string;
  }
  return docname_;
}
inline ::std::string* EventDocSaveAndGoCompletion::release_docname() {
  clear_has_docname();
  if (docname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = docname_;
    docname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 comp_id = 12;
inline bool EventDocSaveAndGoCompletion::has_comp_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_comp_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EventDocSaveAndGoCompletion::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EventDocSaveAndGoCompletion::clear_comp_id() {
  comp_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comp_id();
}
inline ::google::protobuf::uint64 EventDocSaveAndGoCompletion::comp_id() const {
  return comp_id_;
}
inline void EventDocSaveAndGoCompletion::set_comp_id(::google::protobuf::uint64 value) {
  set_has_comp_id();
  comp_id_ = value;
}

// optional fixed64 revision = 13;
inline bool EventDocSaveAndGoCompletion::has_revision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EventDocSaveAndGoCompletion::set_has_revision() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EventDocSaveAndGoCompletion::clear_has_revision() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EventDocSaveAndGoCompletion::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 EventDocSaveAndGoCompletion::revision() const {
  return revision_;
}
inline void EventDocSaveAndGoCompletion::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
}

// -------------------------------------------------------------------

// EventDocSaveAndGoEngineStateChange

// required bool engine_started = 1;
inline bool EventDocSaveAndGoEngineStateChange::has_engine_started() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventDocSaveAndGoEngineStateChange::set_has_engine_started() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventDocSaveAndGoEngineStateChange::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventDocSaveAndGoEngineStateChange::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
inline bool EventDocSaveAndGoEngineStateChange::engine_started() const {
  return engine_started_;
}
inline void EventDocSaveAndGoEngineStateChange::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
}

// -------------------------------------------------------------------

// EventSWUpdateProgress

// required uint64 handle = 1;
inline bool EventSWUpdateProgress::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventSWUpdateProgress::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventSWUpdateProgress::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventSWUpdateProgress::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 EventSWUpdateProgress::handle() const {
  return handle_;
}
inline void EventSWUpdateProgress::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
}

// required uint64 total_transfer_size = 2;
inline bool EventSWUpdateProgress::has_total_transfer_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventSWUpdateProgress::set_has_total_transfer_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventSWUpdateProgress::clear_has_total_transfer_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventSWUpdateProgress::clear_total_transfer_size() {
  total_transfer_size_ = GOOGLE_ULONGLONG(0);
  clear_has_total_transfer_size();
}
inline ::google::protobuf::uint64 EventSWUpdateProgress::total_transfer_size() const {
  return total_transfer_size_;
}
inline void EventSWUpdateProgress::set_total_transfer_size(::google::protobuf::uint64 value) {
  set_has_total_transfer_size();
  total_transfer_size_ = value;
}

// required uint64 bytes_transferred_cnt = 3;
inline bool EventSWUpdateProgress::has_bytes_transferred_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventSWUpdateProgress::set_has_bytes_transferred_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventSWUpdateProgress::clear_has_bytes_transferred_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventSWUpdateProgress::clear_bytes_transferred_cnt() {
  bytes_transferred_cnt_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_transferred_cnt();
}
inline ::google::protobuf::uint64 EventSWUpdateProgress::bytes_transferred_cnt() const {
  return bytes_transferred_cnt_;
}
inline void EventSWUpdateProgress::set_bytes_transferred_cnt(::google::protobuf::uint64 value) {
  set_has_bytes_transferred_cnt();
  bytes_transferred_cnt_ = value;
}

// required .ccd.SWUpdateDownloadState_t state = 4;
inline bool EventSWUpdateProgress::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventSWUpdateProgress::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventSWUpdateProgress::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventSWUpdateProgress::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ccd::SWUpdateDownloadState_t EventSWUpdateProgress::state() const {
  return static_cast< ccd::SWUpdateDownloadState_t >(state_);
}
inline void EventSWUpdateProgress::set_state(ccd::SWUpdateDownloadState_t value) {
  GOOGLE_DCHECK(ccd::SWUpdateDownloadState_t_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// EventIoacStatusChange

// required .ccd.IoacStatusSummary_t status_summary = 1;
inline bool EventIoacStatusChange::has_status_summary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventIoacStatusChange::set_has_status_summary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventIoacStatusChange::clear_has_status_summary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventIoacStatusChange::clear_status_summary() {
  status_summary_ = 1;
  clear_has_status_summary();
}
inline ccd::IoacStatusSummary_t EventIoacStatusChange::status_summary() const {
  return static_cast< ccd::IoacStatusSummary_t >(status_summary_);
}
inline void EventIoacStatusChange::set_status_summary(ccd::IoacStatusSummary_t value) {
  GOOGLE_DCHECK(ccd::IoacStatusSummary_t_IsValid(value));
  set_has_status_summary();
  status_summary_ = value;
}

// -------------------------------------------------------------------

// EventLanDevicesChange

// required fixed64 timestamp = 1;
inline bool EventLanDevicesChange::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLanDevicesChange::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventLanDevicesChange::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventLanDevicesChange::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 EventLanDevicesChange::timestamp() const {
  return timestamp_;
}
inline void EventLanDevicesChange::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// EventLanDevicesProbeRequest

// required fixed64 timestamp = 1;
inline bool EventLanDevicesProbeRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLanDevicesProbeRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventLanDevicesProbeRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventLanDevicesProbeRequest::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 EventLanDevicesProbeRequest::timestamp() const {
  return timestamp_;
}
inline void EventLanDevicesProbeRequest::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// -------------------------------------------------------------------

// EventPowerModeChange

// required .ccd.PowerMode_t power_mode = 1;
inline bool EventPowerModeChange::has_power_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventPowerModeChange::set_has_power_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventPowerModeChange::clear_has_power_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventPowerModeChange::clear_power_mode() {
  power_mode_ = 1;
  clear_has_power_mode();
}
inline ccd::PowerMode_t EventPowerModeChange::power_mode() const {
  return static_cast< ccd::PowerMode_t >(power_mode_);
}
inline void EventPowerModeChange::set_power_mode(ccd::PowerMode_t value) {
  GOOGLE_DCHECK(ccd::PowerMode_t_IsValid(value));
  set_has_power_mode();
  power_mode_ = value;
}

// -------------------------------------------------------------------

// EventRemoteSwUpdateMessage

// required fixed64 source_device_id = 1;
inline bool EventRemoteSwUpdateMessage::has_source_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventRemoteSwUpdateMessage::set_has_source_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventRemoteSwUpdateMessage::clear_has_source_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventRemoteSwUpdateMessage::clear_source_device_id() {
  source_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_source_device_id();
}
inline ::google::protobuf::uint64 EventRemoteSwUpdateMessage::source_device_id() const {
  return source_device_id_;
}
inline void EventRemoteSwUpdateMessage::set_source_device_id(::google::protobuf::uint64 value) {
  set_has_source_device_id();
  source_device_id_ = value;
}

// -------------------------------------------------------------------

// EventAsyncUploadCompletion

// required fixed64 transaction_id = 1;
inline bool EventAsyncUploadCompletion::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventAsyncUploadCompletion::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventAsyncUploadCompletion::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventAsyncUploadCompletion::clear_transaction_id() {
  transaction_id_ = GOOGLE_ULONGLONG(0);
  clear_has_transaction_id();
}
inline ::google::protobuf::uint64 EventAsyncUploadCompletion::transaction_id() const {
  return transaction_id_;
}
inline void EventAsyncUploadCompletion::set_transaction_id(::google::protobuf::uint64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
}

// required fixed64 user_id = 2;
inline bool EventAsyncUploadCompletion::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventAsyncUploadCompletion::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventAsyncUploadCompletion::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventAsyncUploadCompletion::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 EventAsyncUploadCompletion::user_id() const {
  return user_id_;
}
inline void EventAsyncUploadCompletion::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 handle = 3;
inline bool EventAsyncUploadCompletion::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventAsyncUploadCompletion::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventAsyncUploadCompletion::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventAsyncUploadCompletion::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 EventAsyncUploadCompletion::handle() const {
  return handle_;
}
inline void EventAsyncUploadCompletion::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
}

// required fixed32 upload_status = 4;
inline bool EventAsyncUploadCompletion::has_upload_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventAsyncUploadCompletion::set_has_upload_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventAsyncUploadCompletion::clear_has_upload_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventAsyncUploadCompletion::clear_upload_status() {
  upload_status_ = 0u;
  clear_has_upload_status();
}
inline ::google::protobuf::uint32 EventAsyncUploadCompletion::upload_status() const {
  return upload_status_;
}
inline void EventAsyncUploadCompletion::set_upload_status(::google::protobuf::uint32 value) {
  set_has_upload_status();
  upload_status_ = value;
}

// required .ccd.AsyncUploadState_t state = 5;
inline bool EventAsyncUploadCompletion::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventAsyncUploadCompletion::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventAsyncUploadCompletion::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventAsyncUploadCompletion::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ccd::AsyncUploadState_t EventAsyncUploadCompletion::state() const {
  return static_cast< ccd::AsyncUploadState_t >(state_);
}
inline void EventAsyncUploadCompletion::set_state(ccd::AsyncUploadState_t value) {
  GOOGLE_DCHECK(ccd::AsyncUploadState_t_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional sint32 error_code = 6;
inline bool EventAsyncUploadCompletion::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventAsyncUploadCompletion::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventAsyncUploadCompletion::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventAsyncUploadCompletion::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 EventAsyncUploadCompletion::error_code() const {
  return error_code_;
}
inline void EventAsyncUploadCompletion::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// EventSyncBackCompletion

// required fixed64 user_id = 1;
inline bool EventSyncBackCompletion::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventSyncBackCompletion::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventSyncBackCompletion::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventSyncBackCompletion::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 EventSyncBackCompletion::user_id() const {
  return user_id_;
}
inline void EventSyncBackCompletion::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 dataset_id = 2;
inline bool EventSyncBackCompletion::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventSyncBackCompletion::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventSyncBackCompletion::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventSyncBackCompletion::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 EventSyncBackCompletion::dataset_id() const {
  return dataset_id_;
}
inline void EventSyncBackCompletion::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required string component_name = 3;
inline bool EventSyncBackCompletion::has_component_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventSyncBackCompletion::set_has_component_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventSyncBackCompletion::clear_has_component_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventSyncBackCompletion::clear_component_name() {
  if (component_name_ != &::google::protobuf::internal::kEmptyString) {
    component_name_->clear();
  }
  clear_has_component_name();
}
inline const ::std::string& EventSyncBackCompletion::component_name() const {
  return *component_name_;
}
inline void EventSyncBackCompletion::set_component_name(const ::std::string& value) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(value);
}
inline void EventSyncBackCompletion::set_component_name(const char* value) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(value);
}
inline void EventSyncBackCompletion::set_component_name(const char* value, size_t size) {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  component_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventSyncBackCompletion::mutable_component_name() {
  set_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    component_name_ = new ::std::string;
  }
  return component_name_;
}
inline ::std::string* EventSyncBackCompletion::release_component_name() {
  clear_has_component_name();
  if (component_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = component_name_;
    component_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 component_id = 4;
inline bool EventSyncBackCompletion::has_component_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventSyncBackCompletion::set_has_component_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventSyncBackCompletion::clear_has_component_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventSyncBackCompletion::clear_component_id() {
  component_id_ = GOOGLE_ULONGLONG(0);
  clear_has_component_id();
}
inline ::google::protobuf::uint64 EventSyncBackCompletion::component_id() const {
  return component_id_;
}
inline void EventSyncBackCompletion::set_component_id(::google::protobuf::uint64 value) {
  set_has_component_id();
  component_id_ = value;
}

// required fixed64 revision = 5;
inline bool EventSyncBackCompletion::has_revision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventSyncBackCompletion::set_has_revision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventSyncBackCompletion::clear_has_revision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventSyncBackCompletion::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 EventSyncBackCompletion::revision() const {
  return revision_;
}
inline void EventSyncBackCompletion::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
}

// required string local_path = 6;
inline bool EventSyncBackCompletion::has_local_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventSyncBackCompletion::set_has_local_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventSyncBackCompletion::clear_has_local_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventSyncBackCompletion::clear_local_path() {
  if (local_path_ != &::google::protobuf::internal::kEmptyString) {
    local_path_->clear();
  }
  clear_has_local_path();
}
inline const ::std::string& EventSyncBackCompletion::local_path() const {
  return *local_path_;
}
inline void EventSyncBackCompletion::set_local_path(const ::std::string& value) {
  set_has_local_path();
  if (local_path_ == &::google::protobuf::internal::kEmptyString) {
    local_path_ = new ::std::string;
  }
  local_path_->assign(value);
}
inline void EventSyncBackCompletion::set_local_path(const char* value) {
  set_has_local_path();
  if (local_path_ == &::google::protobuf::internal::kEmptyString) {
    local_path_ = new ::std::string;
  }
  local_path_->assign(value);
}
inline void EventSyncBackCompletion::set_local_path(const char* value, size_t size) {
  set_has_local_path();
  if (local_path_ == &::google::protobuf::internal::kEmptyString) {
    local_path_ = new ::std::string;
  }
  local_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventSyncBackCompletion::mutable_local_path() {
  set_has_local_path();
  if (local_path_ == &::google::protobuf::internal::kEmptyString) {
    local_path_ = new ::std::string;
  }
  return local_path_;
}
inline ::std::string* EventSyncBackCompletion::release_local_path() {
  clear_has_local_path();
  if (local_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_path_;
    local_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EventPicStreamDBUpdateComplete

// required fixed64 dataset_id = 1;
inline bool EventPicStreamDBUpdateComplete::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventPicStreamDBUpdateComplete::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventPicStreamDBUpdateComplete::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventPicStreamDBUpdateComplete::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 EventPicStreamDBUpdateComplete::dataset_id() const {
  return dataset_id_;
}
inline void EventPicStreamDBUpdateComplete::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// -------------------------------------------------------------------

// EventPicStreamStorageConservation

// required bool is_dropping_mode = 1;
inline bool EventPicStreamStorageConservation::has_is_dropping_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventPicStreamStorageConservation::set_has_is_dropping_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventPicStreamStorageConservation::clear_has_is_dropping_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventPicStreamStorageConservation::clear_is_dropping_mode() {
  is_dropping_mode_ = false;
  clear_has_is_dropping_mode();
}
inline bool EventPicStreamStorageConservation::is_dropping_mode() const {
  return is_dropping_mode_;
}
inline void EventPicStreamStorageConservation::set_is_dropping_mode(bool value) {
  set_has_is_dropping_mode();
  is_dropping_mode_ = value;
}

// optional uint64 free_disk_size_bytes = 2;
inline bool EventPicStreamStorageConservation::has_free_disk_size_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventPicStreamStorageConservation::set_has_free_disk_size_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventPicStreamStorageConservation::clear_has_free_disk_size_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventPicStreamStorageConservation::clear_free_disk_size_bytes() {
  free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_free_disk_size_bytes();
}
inline ::google::protobuf::uint64 EventPicStreamStorageConservation::free_disk_size_bytes() const {
  return free_disk_size_bytes_;
}
inline void EventPicStreamStorageConservation::set_free_disk_size_bytes(::google::protobuf::uint64 value) {
  set_has_free_disk_size_bytes();
  free_disk_size_bytes_ = value;
}

// -------------------------------------------------------------------

// EventDeviceCredentialsChange

// required .ccd.DeviceCredChangeType_t change_type = 1;
inline bool EventDeviceCredentialsChange::has_change_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventDeviceCredentialsChange::set_has_change_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventDeviceCredentialsChange::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventDeviceCredentialsChange::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ccd::DeviceCredChangeType_t EventDeviceCredentialsChange::change_type() const {
  return static_cast< ccd::DeviceCredChangeType_t >(change_type_);
}
inline void EventDeviceCredentialsChange::set_change_type(ccd::DeviceCredChangeType_t value) {
  GOOGLE_DCHECK(ccd::DeviceCredChangeType_t_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// required string local_file_root_path = 2;
inline bool EventDeviceCredentialsChange::has_local_file_root_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventDeviceCredentialsChange::set_has_local_file_root_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventDeviceCredentialsChange::clear_has_local_file_root_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventDeviceCredentialsChange::clear_local_file_root_path() {
  if (local_file_root_path_ != &::google::protobuf::internal::kEmptyString) {
    local_file_root_path_->clear();
  }
  clear_has_local_file_root_path();
}
inline const ::std::string& EventDeviceCredentialsChange::local_file_root_path() const {
  return *local_file_root_path_;
}
inline void EventDeviceCredentialsChange::set_local_file_root_path(const ::std::string& value) {
  set_has_local_file_root_path();
  if (local_file_root_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_root_path_ = new ::std::string;
  }
  local_file_root_path_->assign(value);
}
inline void EventDeviceCredentialsChange::set_local_file_root_path(const char* value) {
  set_has_local_file_root_path();
  if (local_file_root_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_root_path_ = new ::std::string;
  }
  local_file_root_path_->assign(value);
}
inline void EventDeviceCredentialsChange::set_local_file_root_path(const char* value, size_t size) {
  set_has_local_file_root_path();
  if (local_file_root_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_root_path_ = new ::std::string;
  }
  local_file_root_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventDeviceCredentialsChange::mutable_local_file_root_path() {
  set_has_local_file_root_path();
  if (local_file_root_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_root_path_ = new ::std::string;
  }
  return local_file_root_path_;
}
inline ::std::string* EventDeviceCredentialsChange::release_local_file_root_path() {
  clear_has_local_file_root_path();
  if (local_file_root_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_file_root_path_;
    local_file_root_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EventUserCredentialsChange

// required string local_file_path = 1;
inline bool EventUserCredentialsChange::has_local_file_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventUserCredentialsChange::set_has_local_file_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventUserCredentialsChange::clear_has_local_file_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventUserCredentialsChange::clear_local_file_path() {
  if (local_file_path_ != &::google::protobuf::internal::kEmptyString) {
    local_file_path_->clear();
  }
  clear_has_local_file_path();
}
inline const ::std::string& EventUserCredentialsChange::local_file_path() const {
  return *local_file_path_;
}
inline void EventUserCredentialsChange::set_local_file_path(const ::std::string& value) {
  set_has_local_file_path();
  if (local_file_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_path_ = new ::std::string;
  }
  local_file_path_->assign(value);
}
inline void EventUserCredentialsChange::set_local_file_path(const char* value) {
  set_has_local_file_path();
  if (local_file_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_path_ = new ::std::string;
  }
  local_file_path_->assign(value);
}
inline void EventUserCredentialsChange::set_local_file_path(const char* value, size_t size) {
  set_has_local_file_path();
  if (local_file_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_path_ = new ::std::string;
  }
  local_file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventUserCredentialsChange::mutable_local_file_path() {
  set_has_local_file_path();
  if (local_file_path_ == &::google::protobuf::internal::kEmptyString) {
    local_file_path_ = new ::std::string;
  }
  return local_file_path_;
}
inline ::std::string* EventUserCredentialsChange::release_local_file_path() {
  clear_has_local_file_path();
  if (local_file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = local_file_path_;
    local_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CcdiEvent

// optional .ccd.EventSyncFeatureStatusChange sync_feature_status_change = 12;
inline bool CcdiEvent::has_sync_feature_status_change() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CcdiEvent::set_has_sync_feature_status_change() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CcdiEvent::clear_has_sync_feature_status_change() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CcdiEvent::clear_sync_feature_status_change() {
  if (sync_feature_status_change_ != NULL) sync_feature_status_change_->::ccd::EventSyncFeatureStatusChange::Clear();
  clear_has_sync_feature_status_change();
}
inline const ::ccd::EventSyncFeatureStatusChange& CcdiEvent::sync_feature_status_change() const {
  return sync_feature_status_change_ != NULL ? *sync_feature_status_change_ : *default_instance_->sync_feature_status_change_;
}
inline ::ccd::EventSyncFeatureStatusChange* CcdiEvent::mutable_sync_feature_status_change() {
  set_has_sync_feature_status_change();
  if (sync_feature_status_change_ == NULL) sync_feature_status_change_ = new ::ccd::EventSyncFeatureStatusChange;
  return sync_feature_status_change_;
}
inline ::ccd::EventSyncFeatureStatusChange* CcdiEvent::release_sync_feature_status_change() {
  clear_has_sync_feature_status_change();
  ::ccd::EventSyncFeatureStatusChange* temp = sync_feature_status_change_;
  sync_feature_status_change_ = NULL;
  return temp;
}

// optional .ccd.EventDeviceInfoChange device_info_change = 9;
inline bool CcdiEvent::has_device_info_change() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CcdiEvent::set_has_device_info_change() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CcdiEvent::clear_has_device_info_change() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CcdiEvent::clear_device_info_change() {
  if (device_info_change_ != NULL) device_info_change_->::ccd::EventDeviceInfoChange::Clear();
  clear_has_device_info_change();
}
inline const ::ccd::EventDeviceInfoChange& CcdiEvent::device_info_change() const {
  return device_info_change_ != NULL ? *device_info_change_ : *default_instance_->device_info_change_;
}
inline ::ccd::EventDeviceInfoChange* CcdiEvent::mutable_device_info_change() {
  set_has_device_info_change();
  if (device_info_change_ == NULL) device_info_change_ = new ::ccd::EventDeviceInfoChange;
  return device_info_change_;
}
inline ::ccd::EventDeviceInfoChange* CcdiEvent::release_device_info_change() {
  clear_has_device_info_change();
  ::ccd::EventDeviceInfoChange* temp = device_info_change_;
  device_info_change_ = NULL;
  return temp;
}

// optional .ccd.EventDeviceConnectionChange device_connection_change = 10;
inline bool CcdiEvent::has_device_connection_change() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CcdiEvent::set_has_device_connection_change() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CcdiEvent::clear_has_device_connection_change() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CcdiEvent::clear_device_connection_change() {
  if (device_connection_change_ != NULL) device_connection_change_->::ccd::EventDeviceConnectionChange::Clear();
  clear_has_device_connection_change();
}
inline const ::ccd::EventDeviceConnectionChange& CcdiEvent::device_connection_change() const {
  return device_connection_change_ != NULL ? *device_connection_change_ : *default_instance_->device_connection_change_;
}
inline ::ccd::EventDeviceConnectionChange* CcdiEvent::mutable_device_connection_change() {
  set_has_device_connection_change();
  if (device_connection_change_ == NULL) device_connection_change_ = new ::ccd::EventDeviceConnectionChange;
  return device_connection_change_;
}
inline ::ccd::EventDeviceConnectionChange* CcdiEvent::release_device_connection_change() {
  clear_has_device_connection_change();
  ::ccd::EventDeviceConnectionChange* temp = device_connection_change_;
  device_connection_change_ = NULL;
  return temp;
}

// optional .ccd.EventDatasetContentChange dataset_content_change = 18;
inline bool CcdiEvent::has_dataset_content_change() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CcdiEvent::set_has_dataset_content_change() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CcdiEvent::clear_has_dataset_content_change() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CcdiEvent::clear_dataset_content_change() {
  if (dataset_content_change_ != NULL) dataset_content_change_->::ccd::EventDatasetContentChange::Clear();
  clear_has_dataset_content_change();
}
inline const ::ccd::EventDatasetContentChange& CcdiEvent::dataset_content_change() const {
  return dataset_content_change_ != NULL ? *dataset_content_change_ : *default_instance_->dataset_content_change_;
}
inline ::ccd::EventDatasetContentChange* CcdiEvent::mutable_dataset_content_change() {
  set_has_dataset_content_change();
  if (dataset_content_change_ == NULL) dataset_content_change_ = new ::ccd::EventDatasetContentChange;
  return dataset_content_change_;
}
inline ::ccd::EventDatasetContentChange* CcdiEvent::release_dataset_content_change() {
  clear_has_dataset_content_change();
  ::ccd::EventDatasetContentChange* temp = dataset_content_change_;
  dataset_content_change_ = NULL;
  return temp;
}

// optional .ccd.EventStorageNodeChange storage_node_change = 19;
inline bool CcdiEvent::has_storage_node_change() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CcdiEvent::set_has_storage_node_change() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CcdiEvent::clear_has_storage_node_change() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CcdiEvent::clear_storage_node_change() {
  if (storage_node_change_ != NULL) storage_node_change_->::ccd::EventStorageNodeChange::Clear();
  clear_has_storage_node_change();
}
inline const ::ccd::EventStorageNodeChange& CcdiEvent::storage_node_change() const {
  return storage_node_change_ != NULL ? *storage_node_change_ : *default_instance_->storage_node_change_;
}
inline ::ccd::EventStorageNodeChange* CcdiEvent::mutable_storage_node_change() {
  set_has_storage_node_change();
  if (storage_node_change_ == NULL) storage_node_change_ = new ::ccd::EventStorageNodeChange;
  return storage_node_change_;
}
inline ::ccd::EventStorageNodeChange* CcdiEvent::release_storage_node_change() {
  clear_has_storage_node_change();
  ::ccd::EventStorageNodeChange* temp = storage_node_change_;
  storage_node_change_ = NULL;
  return temp;
}

// optional .ccd.EventUserLogin user_login = 20;
inline bool CcdiEvent::has_user_login() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CcdiEvent::set_has_user_login() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CcdiEvent::clear_has_user_login() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CcdiEvent::clear_user_login() {
  if (user_login_ != NULL) user_login_->::ccd::EventUserLogin::Clear();
  clear_has_user_login();
}
inline const ::ccd::EventUserLogin& CcdiEvent::user_login() const {
  return user_login_ != NULL ? *user_login_ : *default_instance_->user_login_;
}
inline ::ccd::EventUserLogin* CcdiEvent::mutable_user_login() {
  set_has_user_login();
  if (user_login_ == NULL) user_login_ = new ::ccd::EventUserLogin;
  return user_login_;
}
inline ::ccd::EventUserLogin* CcdiEvent::release_user_login() {
  clear_has_user_login();
  ::ccd::EventUserLogin* temp = user_login_;
  user_login_ = NULL;
  return temp;
}

// optional .ccd.EventUserLogout user_logout = 21;
inline bool CcdiEvent::has_user_logout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CcdiEvent::set_has_user_logout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CcdiEvent::clear_has_user_logout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CcdiEvent::clear_user_logout() {
  if (user_logout_ != NULL) user_logout_->::ccd::EventUserLogout::Clear();
  clear_has_user_logout();
}
inline const ::ccd::EventUserLogout& CcdiEvent::user_logout() const {
  return user_logout_ != NULL ? *user_logout_ : *default_instance_->user_logout_;
}
inline ::ccd::EventUserLogout* CcdiEvent::mutable_user_logout() {
  set_has_user_logout();
  if (user_logout_ == NULL) user_logout_ = new ::ccd::EventUserLogout;
  return user_logout_;
}
inline ::ccd::EventUserLogout* CcdiEvent::release_user_logout() {
  clear_has_user_logout();
  ::ccd::EventUserLogout* temp = user_logout_;
  user_logout_ = NULL;
  return temp;
}

// optional .ccd.EventDocSaveAndGoCompletion doc_save_and_go_completion = 30;
inline bool CcdiEvent::has_doc_save_and_go_completion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CcdiEvent::set_has_doc_save_and_go_completion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CcdiEvent::clear_has_doc_save_and_go_completion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CcdiEvent::clear_doc_save_and_go_completion() {
  if (doc_save_and_go_completion_ != NULL) doc_save_and_go_completion_->::ccd::EventDocSaveAndGoCompletion::Clear();
  clear_has_doc_save_and_go_completion();
}
inline const ::ccd::EventDocSaveAndGoCompletion& CcdiEvent::doc_save_and_go_completion() const {
  return doc_save_and_go_completion_ != NULL ? *doc_save_and_go_completion_ : *default_instance_->doc_save_and_go_completion_;
}
inline ::ccd::EventDocSaveAndGoCompletion* CcdiEvent::mutable_doc_save_and_go_completion() {
  set_has_doc_save_and_go_completion();
  if (doc_save_and_go_completion_ == NULL) doc_save_and_go_completion_ = new ::ccd::EventDocSaveAndGoCompletion;
  return doc_save_and_go_completion_;
}
inline ::ccd::EventDocSaveAndGoCompletion* CcdiEvent::release_doc_save_and_go_completion() {
  clear_has_doc_save_and_go_completion();
  ::ccd::EventDocSaveAndGoCompletion* temp = doc_save_and_go_completion_;
  doc_save_and_go_completion_ = NULL;
  return temp;
}

// optional .ccd.EventDocSaveAndGoEngineStateChange doc_save_and_go_engine_state_change = 31;
inline bool CcdiEvent::has_doc_save_and_go_engine_state_change() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CcdiEvent::set_has_doc_save_and_go_engine_state_change() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CcdiEvent::clear_has_doc_save_and_go_engine_state_change() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CcdiEvent::clear_doc_save_and_go_engine_state_change() {
  if (doc_save_and_go_engine_state_change_ != NULL) doc_save_and_go_engine_state_change_->::ccd::EventDocSaveAndGoEngineStateChange::Clear();
  clear_has_doc_save_and_go_engine_state_change();
}
inline const ::ccd::EventDocSaveAndGoEngineStateChange& CcdiEvent::doc_save_and_go_engine_state_change() const {
  return doc_save_and_go_engine_state_change_ != NULL ? *doc_save_and_go_engine_state_change_ : *default_instance_->doc_save_and_go_engine_state_change_;
}
inline ::ccd::EventDocSaveAndGoEngineStateChange* CcdiEvent::mutable_doc_save_and_go_engine_state_change() {
  set_has_doc_save_and_go_engine_state_change();
  if (doc_save_and_go_engine_state_change_ == NULL) doc_save_and_go_engine_state_change_ = new ::ccd::EventDocSaveAndGoEngineStateChange;
  return doc_save_and_go_engine_state_change_;
}
inline ::ccd::EventDocSaveAndGoEngineStateChange* CcdiEvent::release_doc_save_and_go_engine_state_change() {
  clear_has_doc_save_and_go_engine_state_change();
  ::ccd::EventDocSaveAndGoEngineStateChange* temp = doc_save_and_go_engine_state_change_;
  doc_save_and_go_engine_state_change_ = NULL;
  return temp;
}

// optional .ccd.EventSWUpdateProgress sw_update_progress = 8;
inline bool CcdiEvent::has_sw_update_progress() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CcdiEvent::set_has_sw_update_progress() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CcdiEvent::clear_has_sw_update_progress() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CcdiEvent::clear_sw_update_progress() {
  if (sw_update_progress_ != NULL) sw_update_progress_->::ccd::EventSWUpdateProgress::Clear();
  clear_has_sw_update_progress();
}
inline const ::ccd::EventSWUpdateProgress& CcdiEvent::sw_update_progress() const {
  return sw_update_progress_ != NULL ? *sw_update_progress_ : *default_instance_->sw_update_progress_;
}
inline ::ccd::EventSWUpdateProgress* CcdiEvent::mutable_sw_update_progress() {
  set_has_sw_update_progress();
  if (sw_update_progress_ == NULL) sw_update_progress_ = new ::ccd::EventSWUpdateProgress;
  return sw_update_progress_;
}
inline ::ccd::EventSWUpdateProgress* CcdiEvent::release_sw_update_progress() {
  clear_has_sw_update_progress();
  ::ccd::EventSWUpdateProgress* temp = sw_update_progress_;
  sw_update_progress_ = NULL;
  return temp;
}

// optional .ccd.EventIoacStatusChange ioac_status_change = 11;
inline bool CcdiEvent::has_ioac_status_change() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CcdiEvent::set_has_ioac_status_change() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CcdiEvent::clear_has_ioac_status_change() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CcdiEvent::clear_ioac_status_change() {
  if (ioac_status_change_ != NULL) ioac_status_change_->::ccd::EventIoacStatusChange::Clear();
  clear_has_ioac_status_change();
}
inline const ::ccd::EventIoacStatusChange& CcdiEvent::ioac_status_change() const {
  return ioac_status_change_ != NULL ? *ioac_status_change_ : *default_instance_->ioac_status_change_;
}
inline ::ccd::EventIoacStatusChange* CcdiEvent::mutable_ioac_status_change() {
  set_has_ioac_status_change();
  if (ioac_status_change_ == NULL) ioac_status_change_ = new ::ccd::EventIoacStatusChange;
  return ioac_status_change_;
}
inline ::ccd::EventIoacStatusChange* CcdiEvent::release_ioac_status_change() {
  clear_has_ioac_status_change();
  ::ccd::EventIoacStatusChange* temp = ioac_status_change_;
  ioac_status_change_ = NULL;
  return temp;
}

// optional .ccd.EventLanDevicesChange lan_devices_change = 32;
inline bool CcdiEvent::has_lan_devices_change() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CcdiEvent::set_has_lan_devices_change() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CcdiEvent::clear_has_lan_devices_change() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CcdiEvent::clear_lan_devices_change() {
  if (lan_devices_change_ != NULL) lan_devices_change_->::ccd::EventLanDevicesChange::Clear();
  clear_has_lan_devices_change();
}
inline const ::ccd::EventLanDevicesChange& CcdiEvent::lan_devices_change() const {
  return lan_devices_change_ != NULL ? *lan_devices_change_ : *default_instance_->lan_devices_change_;
}
inline ::ccd::EventLanDevicesChange* CcdiEvent::mutable_lan_devices_change() {
  set_has_lan_devices_change();
  if (lan_devices_change_ == NULL) lan_devices_change_ = new ::ccd::EventLanDevicesChange;
  return lan_devices_change_;
}
inline ::ccd::EventLanDevicesChange* CcdiEvent::release_lan_devices_change() {
  clear_has_lan_devices_change();
  ::ccd::EventLanDevicesChange* temp = lan_devices_change_;
  lan_devices_change_ = NULL;
  return temp;
}

// optional .ccd.EventLanDevicesProbeRequest lan_devices_probe_request = 33;
inline bool CcdiEvent::has_lan_devices_probe_request() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CcdiEvent::set_has_lan_devices_probe_request() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CcdiEvent::clear_has_lan_devices_probe_request() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CcdiEvent::clear_lan_devices_probe_request() {
  if (lan_devices_probe_request_ != NULL) lan_devices_probe_request_->::ccd::EventLanDevicesProbeRequest::Clear();
  clear_has_lan_devices_probe_request();
}
inline const ::ccd::EventLanDevicesProbeRequest& CcdiEvent::lan_devices_probe_request() const {
  return lan_devices_probe_request_ != NULL ? *lan_devices_probe_request_ : *default_instance_->lan_devices_probe_request_;
}
inline ::ccd::EventLanDevicesProbeRequest* CcdiEvent::mutable_lan_devices_probe_request() {
  set_has_lan_devices_probe_request();
  if (lan_devices_probe_request_ == NULL) lan_devices_probe_request_ = new ::ccd::EventLanDevicesProbeRequest;
  return lan_devices_probe_request_;
}
inline ::ccd::EventLanDevicesProbeRequest* CcdiEvent::release_lan_devices_probe_request() {
  clear_has_lan_devices_probe_request();
  ::ccd::EventLanDevicesProbeRequest* temp = lan_devices_probe_request_;
  lan_devices_probe_request_ = NULL;
  return temp;
}

// optional .ccd.EventPowerModeChange power_mode_change = 34;
inline bool CcdiEvent::has_power_mode_change() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CcdiEvent::set_has_power_mode_change() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CcdiEvent::clear_has_power_mode_change() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CcdiEvent::clear_power_mode_change() {
  if (power_mode_change_ != NULL) power_mode_change_->::ccd::EventPowerModeChange::Clear();
  clear_has_power_mode_change();
}
inline const ::ccd::EventPowerModeChange& CcdiEvent::power_mode_change() const {
  return power_mode_change_ != NULL ? *power_mode_change_ : *default_instance_->power_mode_change_;
}
inline ::ccd::EventPowerModeChange* CcdiEvent::mutable_power_mode_change() {
  set_has_power_mode_change();
  if (power_mode_change_ == NULL) power_mode_change_ = new ::ccd::EventPowerModeChange;
  return power_mode_change_;
}
inline ::ccd::EventPowerModeChange* CcdiEvent::release_power_mode_change() {
  clear_has_power_mode_change();
  ::ccd::EventPowerModeChange* temp = power_mode_change_;
  power_mode_change_ = NULL;
  return temp;
}

// optional .ccd.EventRemoteSwUpdateMessage su_message = 36;
inline bool CcdiEvent::has_su_message() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CcdiEvent::set_has_su_message() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CcdiEvent::clear_has_su_message() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CcdiEvent::clear_su_message() {
  if (su_message_ != NULL) su_message_->::ccd::EventRemoteSwUpdateMessage::Clear();
  clear_has_su_message();
}
inline const ::ccd::EventRemoteSwUpdateMessage& CcdiEvent::su_message() const {
  return su_message_ != NULL ? *su_message_ : *default_instance_->su_message_;
}
inline ::ccd::EventRemoteSwUpdateMessage* CcdiEvent::mutable_su_message() {
  set_has_su_message();
  if (su_message_ == NULL) su_message_ = new ::ccd::EventRemoteSwUpdateMessage;
  return su_message_;
}
inline ::ccd::EventRemoteSwUpdateMessage* CcdiEvent::release_su_message() {
  clear_has_su_message();
  ::ccd::EventRemoteSwUpdateMessage* temp = su_message_;
  su_message_ = NULL;
  return temp;
}

// optional .ccd.EventAsyncUploadCompletion async_upload_completion = 37;
inline bool CcdiEvent::has_async_upload_completion() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CcdiEvent::set_has_async_upload_completion() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CcdiEvent::clear_has_async_upload_completion() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CcdiEvent::clear_async_upload_completion() {
  if (async_upload_completion_ != NULL) async_upload_completion_->::ccd::EventAsyncUploadCompletion::Clear();
  clear_has_async_upload_completion();
}
inline const ::ccd::EventAsyncUploadCompletion& CcdiEvent::async_upload_completion() const {
  return async_upload_completion_ != NULL ? *async_upload_completion_ : *default_instance_->async_upload_completion_;
}
inline ::ccd::EventAsyncUploadCompletion* CcdiEvent::mutable_async_upload_completion() {
  set_has_async_upload_completion();
  if (async_upload_completion_ == NULL) async_upload_completion_ = new ::ccd::EventAsyncUploadCompletion;
  return async_upload_completion_;
}
inline ::ccd::EventAsyncUploadCompletion* CcdiEvent::release_async_upload_completion() {
  clear_has_async_upload_completion();
  ::ccd::EventAsyncUploadCompletion* temp = async_upload_completion_;
  async_upload_completion_ = NULL;
  return temp;
}

// optional .ccd.EventDatasetChange dataset_change = 38;
inline bool CcdiEvent::has_dataset_change() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CcdiEvent::set_has_dataset_change() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CcdiEvent::clear_has_dataset_change() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CcdiEvent::clear_dataset_change() {
  if (dataset_change_ != NULL) dataset_change_->::ccd::EventDatasetChange::Clear();
  clear_has_dataset_change();
}
inline const ::ccd::EventDatasetChange& CcdiEvent::dataset_change() const {
  return dataset_change_ != NULL ? *dataset_change_ : *default_instance_->dataset_change_;
}
inline ::ccd::EventDatasetChange* CcdiEvent::mutable_dataset_change() {
  set_has_dataset_change();
  if (dataset_change_ == NULL) dataset_change_ = new ::ccd::EventDatasetChange;
  return dataset_change_;
}
inline ::ccd::EventDatasetChange* CcdiEvent::release_dataset_change() {
  clear_has_dataset_change();
  ::ccd::EventDatasetChange* temp = dataset_change_;
  dataset_change_ = NULL;
  return temp;
}

// optional .ccd.EventSyncBackCompletion syncback_completion = 40;
inline bool CcdiEvent::has_syncback_completion() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CcdiEvent::set_has_syncback_completion() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CcdiEvent::clear_has_syncback_completion() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CcdiEvent::clear_syncback_completion() {
  if (syncback_completion_ != NULL) syncback_completion_->::ccd::EventSyncBackCompletion::Clear();
  clear_has_syncback_completion();
}
inline const ::ccd::EventSyncBackCompletion& CcdiEvent::syncback_completion() const {
  return syncback_completion_ != NULL ? *syncback_completion_ : *default_instance_->syncback_completion_;
}
inline ::ccd::EventSyncBackCompletion* CcdiEvent::mutable_syncback_completion() {
  set_has_syncback_completion();
  if (syncback_completion_ == NULL) syncback_completion_ = new ::ccd::EventSyncBackCompletion;
  return syncback_completion_;
}
inline ::ccd::EventSyncBackCompletion* CcdiEvent::release_syncback_completion() {
  clear_has_syncback_completion();
  ::ccd::EventSyncBackCompletion* temp = syncback_completion_;
  syncback_completion_ = NULL;
  return temp;
}

// optional .ccd.EventPicStreamStorageConservation picstream_storage_conservation = 41;
inline bool CcdiEvent::has_picstream_storage_conservation() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CcdiEvent::set_has_picstream_storage_conservation() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CcdiEvent::clear_has_picstream_storage_conservation() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CcdiEvent::clear_picstream_storage_conservation() {
  if (picstream_storage_conservation_ != NULL) picstream_storage_conservation_->::ccd::EventPicStreamStorageConservation::Clear();
  clear_has_picstream_storage_conservation();
}
inline const ::ccd::EventPicStreamStorageConservation& CcdiEvent::picstream_storage_conservation() const {
  return picstream_storage_conservation_ != NULL ? *picstream_storage_conservation_ : *default_instance_->picstream_storage_conservation_;
}
inline ::ccd::EventPicStreamStorageConservation* CcdiEvent::mutable_picstream_storage_conservation() {
  set_has_picstream_storage_conservation();
  if (picstream_storage_conservation_ == NULL) picstream_storage_conservation_ = new ::ccd::EventPicStreamStorageConservation;
  return picstream_storage_conservation_;
}
inline ::ccd::EventPicStreamStorageConservation* CcdiEvent::release_picstream_storage_conservation() {
  clear_has_picstream_storage_conservation();
  ::ccd::EventPicStreamStorageConservation* temp = picstream_storage_conservation_;
  picstream_storage_conservation_ = NULL;
  return temp;
}

// optional .ccd.EventPairingRequest pairing_request = 42;
inline bool CcdiEvent::has_pairing_request() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CcdiEvent::set_has_pairing_request() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CcdiEvent::clear_has_pairing_request() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CcdiEvent::clear_pairing_request() {
  if (pairing_request_ != NULL) pairing_request_->::ccd::EventPairingRequest::Clear();
  clear_has_pairing_request();
}
inline const ::ccd::EventPairingRequest& CcdiEvent::pairing_request() const {
  return pairing_request_ != NULL ? *pairing_request_ : *default_instance_->pairing_request_;
}
inline ::ccd::EventPairingRequest* CcdiEvent::mutable_pairing_request() {
  set_has_pairing_request();
  if (pairing_request_ == NULL) pairing_request_ = new ::ccd::EventPairingRequest;
  return pairing_request_;
}
inline ::ccd::EventPairingRequest* CcdiEvent::release_pairing_request() {
  clear_has_pairing_request();
  ::ccd::EventPairingRequest* temp = pairing_request_;
  pairing_request_ = NULL;
  return temp;
}

// optional .ccd.EventPicStreamDBUpdateComplete picstreamdb_updated = 43;
inline bool CcdiEvent::has_picstreamdb_updated() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CcdiEvent::set_has_picstreamdb_updated() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CcdiEvent::clear_has_picstreamdb_updated() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CcdiEvent::clear_picstreamdb_updated() {
  if (picstreamdb_updated_ != NULL) picstreamdb_updated_->::ccd::EventPicStreamDBUpdateComplete::Clear();
  clear_has_picstreamdb_updated();
}
inline const ::ccd::EventPicStreamDBUpdateComplete& CcdiEvent::picstreamdb_updated() const {
  return picstreamdb_updated_ != NULL ? *picstreamdb_updated_ : *default_instance_->picstreamdb_updated_;
}
inline ::ccd::EventPicStreamDBUpdateComplete* CcdiEvent::mutable_picstreamdb_updated() {
  set_has_picstreamdb_updated();
  if (picstreamdb_updated_ == NULL) picstreamdb_updated_ = new ::ccd::EventPicStreamDBUpdateComplete;
  return picstreamdb_updated_;
}
inline ::ccd::EventPicStreamDBUpdateComplete* CcdiEvent::release_picstreamdb_updated() {
  clear_has_picstreamdb_updated();
  ::ccd::EventPicStreamDBUpdateComplete* temp = picstreamdb_updated_;
  picstreamdb_updated_ = NULL;
  return temp;
}

// optional .ccd.EventSyncHistory sync_history = 44;
inline bool CcdiEvent::has_sync_history() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CcdiEvent::set_has_sync_history() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CcdiEvent::clear_has_sync_history() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CcdiEvent::clear_sync_history() {
  if (sync_history_ != NULL) sync_history_->::ccd::EventSyncHistory::Clear();
  clear_has_sync_history();
}
inline const ::ccd::EventSyncHistory& CcdiEvent::sync_history() const {
  return sync_history_ != NULL ? *sync_history_ : *default_instance_->sync_history_;
}
inline ::ccd::EventSyncHistory* CcdiEvent::mutable_sync_history() {
  set_has_sync_history();
  if (sync_history_ == NULL) sync_history_ = new ::ccd::EventSyncHistory;
  return sync_history_;
}
inline ::ccd::EventSyncHistory* CcdiEvent::release_sync_history() {
  clear_has_sync_history();
  ::ccd::EventSyncHistory* temp = sync_history_;
  sync_history_ = NULL;
  return temp;
}

// optional .ccd.EventDeviceCredentialsChange device_cred_change = 45;
inline bool CcdiEvent::has_device_cred_change() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CcdiEvent::set_has_device_cred_change() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CcdiEvent::clear_has_device_cred_change() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CcdiEvent::clear_device_cred_change() {
  if (device_cred_change_ != NULL) device_cred_change_->::ccd::EventDeviceCredentialsChange::Clear();
  clear_has_device_cred_change();
}
inline const ::ccd::EventDeviceCredentialsChange& CcdiEvent::device_cred_change() const {
  return device_cred_change_ != NULL ? *device_cred_change_ : *default_instance_->device_cred_change_;
}
inline ::ccd::EventDeviceCredentialsChange* CcdiEvent::mutable_device_cred_change() {
  set_has_device_cred_change();
  if (device_cred_change_ == NULL) device_cred_change_ = new ::ccd::EventDeviceCredentialsChange;
  return device_cred_change_;
}
inline ::ccd::EventDeviceCredentialsChange* CcdiEvent::release_device_cred_change() {
  clear_has_device_cred_change();
  ::ccd::EventDeviceCredentialsChange* temp = device_cred_change_;
  device_cred_change_ = NULL;
  return temp;
}

// optional .ccd.EventUserCredentialsChange user_cred_change = 46;
inline bool CcdiEvent::has_user_cred_change() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CcdiEvent::set_has_user_cred_change() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CcdiEvent::clear_has_user_cred_change() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CcdiEvent::clear_user_cred_change() {
  if (user_cred_change_ != NULL) user_cred_change_->::ccd::EventUserCredentialsChange::Clear();
  clear_has_user_cred_change();
}
inline const ::ccd::EventUserCredentialsChange& CcdiEvent::user_cred_change() const {
  return user_cred_change_ != NULL ? *user_cred_change_ : *default_instance_->user_cred_change_;
}
inline ::ccd::EventUserCredentialsChange* CcdiEvent::mutable_user_cred_change() {
  set_has_user_cred_change();
  if (user_cred_change_ == NULL) user_cred_change_ = new ::ccd::EventUserCredentialsChange;
  return user_cred_change_;
}
inline ::ccd::EventUserCredentialsChange* CcdiEvent::release_user_cred_change() {
  clear_has_user_cred_change();
  ::ccd::EventUserCredentialsChange* temp = user_cred_change_;
  user_cred_change_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// EventsDequeueOutput

// repeated .ccd.CcdiEvent events = 1;
inline int EventsDequeueOutput::events_size() const {
  return events_.size();
}
inline void EventsDequeueOutput::clear_events() {
  events_.Clear();
}
inline const ::ccd::CcdiEvent& EventsDequeueOutput::events(int index) const {
  return events_.Get(index);
}
inline ::ccd::CcdiEvent* EventsDequeueOutput::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::ccd::CcdiEvent* EventsDequeueOutput::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::CcdiEvent >&
EventsDequeueOutput::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::CcdiEvent >*
EventsDequeueOutput::mutable_events() {
  return &events_;
}

// -------------------------------------------------------------------

// GetDatasetDirectoryEntriesInput

// required fixed64 user_id = 1;
inline bool GetDatasetDirectoryEntriesInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDatasetDirectoryEntriesInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDatasetDirectoryEntriesInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDatasetDirectoryEntriesInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 GetDatasetDirectoryEntriesInput::user_id() const {
  return user_id_;
}
inline void GetDatasetDirectoryEntriesInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 dataset_id = 2;
inline bool GetDatasetDirectoryEntriesInput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetDatasetDirectoryEntriesInput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetDatasetDirectoryEntriesInput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetDatasetDirectoryEntriesInput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 GetDatasetDirectoryEntriesInput::dataset_id() const {
  return dataset_id_;
}
inline void GetDatasetDirectoryEntriesInput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required string directory_name = 3;
inline bool GetDatasetDirectoryEntriesInput::has_directory_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetDatasetDirectoryEntriesInput::set_has_directory_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetDatasetDirectoryEntriesInput::clear_has_directory_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetDatasetDirectoryEntriesInput::clear_directory_name() {
  if (directory_name_ != &::google::protobuf::internal::kEmptyString) {
    directory_name_->clear();
  }
  clear_has_directory_name();
}
inline const ::std::string& GetDatasetDirectoryEntriesInput::directory_name() const {
  return *directory_name_;
}
inline void GetDatasetDirectoryEntriesInput::set_directory_name(const ::std::string& value) {
  set_has_directory_name();
  if (directory_name_ == &::google::protobuf::internal::kEmptyString) {
    directory_name_ = new ::std::string;
  }
  directory_name_->assign(value);
}
inline void GetDatasetDirectoryEntriesInput::set_directory_name(const char* value) {
  set_has_directory_name();
  if (directory_name_ == &::google::protobuf::internal::kEmptyString) {
    directory_name_ = new ::std::string;
  }
  directory_name_->assign(value);
}
inline void GetDatasetDirectoryEntriesInput::set_directory_name(const char* value, size_t size) {
  set_has_directory_name();
  if (directory_name_ == &::google::protobuf::internal::kEmptyString) {
    directory_name_ = new ::std::string;
  }
  directory_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetDatasetDirectoryEntriesInput::mutable_directory_name() {
  set_has_directory_name();
  if (directory_name_ == &::google::protobuf::internal::kEmptyString) {
    directory_name_ = new ::std::string;
  }
  return directory_name_;
}
inline ::std::string* GetDatasetDirectoryEntriesInput::release_directory_name() {
  clear_has_directory_name();
  if (directory_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = directory_name_;
    directory_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DatasetDirectoryEntry

// required string name = 1;
inline bool DatasetDirectoryEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetDirectoryEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetDirectoryEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetDirectoryEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DatasetDirectoryEntry::name() const {
  return *name_;
}
inline void DatasetDirectoryEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DatasetDirectoryEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DatasetDirectoryEntry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatasetDirectoryEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DatasetDirectoryEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_dir = 2;
inline bool DatasetDirectoryEntry::has_is_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetDirectoryEntry::set_has_is_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetDirectoryEntry::clear_has_is_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetDirectoryEntry::clear_is_dir() {
  is_dir_ = false;
  clear_has_is_dir();
}
inline bool DatasetDirectoryEntry::is_dir() const {
  return is_dir_;
}
inline void DatasetDirectoryEntry::set_is_dir(bool value) {
  set_has_is_dir();
  is_dir_ = value;
}

// optional fixed64 size = 3;
inline bool DatasetDirectoryEntry::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetDirectoryEntry::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetDirectoryEntry::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetDirectoryEntry::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DatasetDirectoryEntry::size() const {
  return size_;
}
inline void DatasetDirectoryEntry::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional string url = 4;
inline bool DatasetDirectoryEntry::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatasetDirectoryEntry::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatasetDirectoryEntry::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatasetDirectoryEntry::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& DatasetDirectoryEntry::url() const {
  return *url_;
}
inline void DatasetDirectoryEntry::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void DatasetDirectoryEntry::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void DatasetDirectoryEntry::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatasetDirectoryEntry::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* DatasetDirectoryEntry::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 mtime = 5;
inline bool DatasetDirectoryEntry::has_mtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatasetDirectoryEntry::set_has_mtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatasetDirectoryEntry::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatasetDirectoryEntry::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
  clear_has_mtime();
}
inline ::google::protobuf::uint64 DatasetDirectoryEntry::mtime() const {
  return mtime_;
}
inline void DatasetDirectoryEntry::set_mtime(::google::protobuf::uint64 value) {
  set_has_mtime();
  mtime_ = value;
}

// -------------------------------------------------------------------

// GetDatasetDirectoryEntriesOutput

// repeated .ccd.DatasetDirectoryEntry entries = 1;
inline int GetDatasetDirectoryEntriesOutput::entries_size() const {
  return entries_.size();
}
inline void GetDatasetDirectoryEntriesOutput::clear_entries() {
  entries_.Clear();
}
inline const ::ccd::DatasetDirectoryEntry& GetDatasetDirectoryEntriesOutput::entries(int index) const {
  return entries_.Get(index);
}
inline ::ccd::DatasetDirectoryEntry* GetDatasetDirectoryEntriesOutput::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::ccd::DatasetDirectoryEntry* GetDatasetDirectoryEntriesOutput::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::DatasetDirectoryEntry >&
GetDatasetDirectoryEntriesOutput::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::DatasetDirectoryEntry >*
GetDatasetDirectoryEntriesOutput::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// GetInfraHttpInfoInput

// optional fixed64 user_id = 1;
inline bool GetInfraHttpInfoInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetInfraHttpInfoInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetInfraHttpInfoInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetInfraHttpInfoInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 GetInfraHttpInfoInput::user_id() const {
  return user_id_;
}
inline void GetInfraHttpInfoInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .ccd.InfraHttpService_t service = 2;
inline bool GetInfraHttpInfoInput::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetInfraHttpInfoInput::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetInfraHttpInfoInput::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetInfraHttpInfoInput::clear_service() {
  service_ = 1;
  clear_has_service();
}
inline ccd::InfraHttpService_t GetInfraHttpInfoInput::service() const {
  return static_cast< ccd::InfraHttpService_t >(service_);
}
inline void GetInfraHttpInfoInput::set_service(ccd::InfraHttpService_t value) {
  GOOGLE_DCHECK(ccd::InfraHttpService_t_IsValid(value));
  set_has_service();
  service_ = value;
}

// required bool secure = 3 [default = true];
inline bool GetInfraHttpInfoInput::has_secure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetInfraHttpInfoInput::set_has_secure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetInfraHttpInfoInput::clear_has_secure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetInfraHttpInfoInput::clear_secure() {
  secure_ = true;
  clear_has_secure();
}
inline bool GetInfraHttpInfoInput::secure() const {
  return secure_;
}
inline void GetInfraHttpInfoInput::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
}

// -------------------------------------------------------------------

// GetInfraHttpInfoOutput

// required string url_prefix = 1;
inline bool GetInfraHttpInfoOutput::has_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetInfraHttpInfoOutput::set_has_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetInfraHttpInfoOutput::clear_has_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetInfraHttpInfoOutput::clear_url_prefix() {
  if (url_prefix_ != &::google::protobuf::internal::kEmptyString) {
    url_prefix_->clear();
  }
  clear_has_url_prefix();
}
inline const ::std::string& GetInfraHttpInfoOutput::url_prefix() const {
  return *url_prefix_;
}
inline void GetInfraHttpInfoOutput::set_url_prefix(const ::std::string& value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
}
inline void GetInfraHttpInfoOutput::set_url_prefix(const char* value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
}
inline void GetInfraHttpInfoOutput::set_url_prefix(const char* value, size_t size) {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInfraHttpInfoOutput::mutable_url_prefix() {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  return url_prefix_;
}
inline ::std::string* GetInfraHttpInfoOutput::release_url_prefix() {
  clear_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_prefix_;
    url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string session_handle = 2;
inline bool GetInfraHttpInfoOutput::has_session_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetInfraHttpInfoOutput::set_has_session_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetInfraHttpInfoOutput::clear_has_session_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetInfraHttpInfoOutput::clear_session_handle() {
  if (session_handle_ != &::google::protobuf::internal::kEmptyString) {
    session_handle_->clear();
  }
  clear_has_session_handle();
}
inline const ::std::string& GetInfraHttpInfoOutput::session_handle() const {
  return *session_handle_;
}
inline void GetInfraHttpInfoOutput::set_session_handle(const ::std::string& value) {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  session_handle_->assign(value);
}
inline void GetInfraHttpInfoOutput::set_session_handle(const char* value) {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  session_handle_->assign(value);
}
inline void GetInfraHttpInfoOutput::set_session_handle(const char* value, size_t size) {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  session_handle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInfraHttpInfoOutput::mutable_session_handle() {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  return session_handle_;
}
inline ::std::string* GetInfraHttpInfoOutput::release_session_handle() {
  clear_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_handle_;
    session_handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string service_ticket = 3;
inline bool GetInfraHttpInfoOutput::has_service_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetInfraHttpInfoOutput::set_has_service_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetInfraHttpInfoOutput::clear_has_service_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetInfraHttpInfoOutput::clear_service_ticket() {
  if (service_ticket_ != &::google::protobuf::internal::kEmptyString) {
    service_ticket_->clear();
  }
  clear_has_service_ticket();
}
inline const ::std::string& GetInfraHttpInfoOutput::service_ticket() const {
  return *service_ticket_;
}
inline void GetInfraHttpInfoOutput::set_service_ticket(const ::std::string& value) {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  service_ticket_->assign(value);
}
inline void GetInfraHttpInfoOutput::set_service_ticket(const char* value) {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  service_ticket_->assign(value);
}
inline void GetInfraHttpInfoOutput::set_service_ticket(const char* value, size_t size) {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  service_ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetInfraHttpInfoOutput::mutable_service_ticket() {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  return service_ticket_;
}
inline ::std::string* GetInfraHttpInfoOutput::release_service_ticket() {
  clear_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_ticket_;
    service_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetLocalHttpInfoInput

// required fixed64 user_id = 1;
inline bool GetLocalHttpInfoInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLocalHttpInfoInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLocalHttpInfoInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLocalHttpInfoInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 GetLocalHttpInfoInput::user_id() const {
  return user_id_;
}
inline void GetLocalHttpInfoInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .ccd.LocalHttpService_t service = 2;
inline bool GetLocalHttpInfoInput::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLocalHttpInfoInput::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLocalHttpInfoInput::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLocalHttpInfoInput::clear_service() {
  service_ = 1;
  clear_has_service();
}
inline ccd::LocalHttpService_t GetLocalHttpInfoInput::service() const {
  return static_cast< ccd::LocalHttpService_t >(service_);
}
inline void GetLocalHttpInfoInput::set_service(ccd::LocalHttpService_t value) {
  GOOGLE_DCHECK(ccd::LocalHttpService_t_IsValid(value));
  set_has_service();
  service_ = value;
}

// -------------------------------------------------------------------

// GetLocalHttpInfoOutput

// required string url_prefix = 1;
inline bool GetLocalHttpInfoOutput::has_url_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLocalHttpInfoOutput::set_has_url_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLocalHttpInfoOutput::clear_has_url_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLocalHttpInfoOutput::clear_url_prefix() {
  if (url_prefix_ != &::google::protobuf::internal::kEmptyString) {
    url_prefix_->clear();
  }
  clear_has_url_prefix();
}
inline const ::std::string& GetLocalHttpInfoOutput::url_prefix() const {
  return *url_prefix_;
}
inline void GetLocalHttpInfoOutput::set_url_prefix(const ::std::string& value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
}
inline void GetLocalHttpInfoOutput::set_url_prefix(const char* value) {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(value);
}
inline void GetLocalHttpInfoOutput::set_url_prefix(const char* value, size_t size) {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  url_prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLocalHttpInfoOutput::mutable_url_prefix() {
  set_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    url_prefix_ = new ::std::string;
  }
  return url_prefix_;
}
inline ::std::string* GetLocalHttpInfoOutput::release_url_prefix() {
  clear_has_url_prefix();
  if (url_prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_prefix_;
    url_prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string session_handle = 2;
inline bool GetLocalHttpInfoOutput::has_session_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLocalHttpInfoOutput::set_has_session_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLocalHttpInfoOutput::clear_has_session_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLocalHttpInfoOutput::clear_session_handle() {
  if (session_handle_ != &::google::protobuf::internal::kEmptyString) {
    session_handle_->clear();
  }
  clear_has_session_handle();
}
inline const ::std::string& GetLocalHttpInfoOutput::session_handle() const {
  return *session_handle_;
}
inline void GetLocalHttpInfoOutput::set_session_handle(const ::std::string& value) {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  session_handle_->assign(value);
}
inline void GetLocalHttpInfoOutput::set_session_handle(const char* value) {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  session_handle_->assign(value);
}
inline void GetLocalHttpInfoOutput::set_session_handle(const char* value, size_t size) {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  session_handle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLocalHttpInfoOutput::mutable_session_handle() {
  set_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    session_handle_ = new ::std::string;
  }
  return session_handle_;
}
inline ::std::string* GetLocalHttpInfoOutput::release_session_handle() {
  clear_has_session_handle();
  if (session_handle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_handle_;
    session_handle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string service_ticket = 3;
inline bool GetLocalHttpInfoOutput::has_service_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLocalHttpInfoOutput::set_has_service_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLocalHttpInfoOutput::clear_has_service_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLocalHttpInfoOutput::clear_service_ticket() {
  if (service_ticket_ != &::google::protobuf::internal::kEmptyString) {
    service_ticket_->clear();
  }
  clear_has_service_ticket();
}
inline const ::std::string& GetLocalHttpInfoOutput::service_ticket() const {
  return *service_ticket_;
}
inline void GetLocalHttpInfoOutput::set_service_ticket(const ::std::string& value) {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  service_ticket_->assign(value);
}
inline void GetLocalHttpInfoOutput::set_service_ticket(const char* value) {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  service_ticket_->assign(value);
}
inline void GetLocalHttpInfoOutput::set_service_ticket(const char* value, size_t size) {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  service_ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLocalHttpInfoOutput::mutable_service_ticket() {
  set_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    service_ticket_ = new ::std::string;
  }
  return service_ticket_;
}
inline ::std::string* GetLocalHttpInfoOutput::release_service_ticket() {
  clear_has_service_ticket();
  if (service_ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_ticket_;
    service_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetPersonalCloudStateInput

// required fixed64 user_id = 1;
inline bool GetPersonalCloudStateInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPersonalCloudStateInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPersonalCloudStateInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPersonalCloudStateInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 GetPersonalCloudStateInput::user_id() const {
  return user_id_;
}
inline void GetPersonalCloudStateInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool only_use_cache = 5 [default = false];
inline bool GetPersonalCloudStateInput::has_only_use_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPersonalCloudStateInput::set_has_only_use_cache() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPersonalCloudStateInput::clear_has_only_use_cache() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPersonalCloudStateInput::clear_only_use_cache() {
  only_use_cache_ = false;
  clear_has_only_use_cache();
}
inline bool GetPersonalCloudStateInput::only_use_cache() const {
  return only_use_cache_;
}
inline void GetPersonalCloudStateInput::set_only_use_cache(bool value) {
  set_has_only_use_cache();
  only_use_cache_ = value;
}

// optional bool get_infra_storage_quota = 2 [default = false];
inline bool GetPersonalCloudStateInput::has_get_infra_storage_quota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetPersonalCloudStateInput::set_has_get_infra_storage_quota() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetPersonalCloudStateInput::clear_has_get_infra_storage_quota() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetPersonalCloudStateInput::clear_get_infra_storage_quota() {
  get_infra_storage_quota_ = false;
  clear_has_get_infra_storage_quota();
}
inline bool GetPersonalCloudStateInput::get_infra_storage_quota() const {
  return get_infra_storage_quota_;
}
inline void GetPersonalCloudStateInput::set_get_infra_storage_quota(bool value) {
  set_has_get_infra_storage_quota();
  get_infra_storage_quota_ = value;
}

// optional bool list_storage_nodes = 3 [default = false];
inline bool GetPersonalCloudStateInput::has_list_storage_nodes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetPersonalCloudStateInput::set_has_list_storage_nodes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetPersonalCloudStateInput::clear_has_list_storage_nodes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetPersonalCloudStateInput::clear_list_storage_nodes() {
  list_storage_nodes_ = false;
  clear_has_list_storage_nodes();
}
inline bool GetPersonalCloudStateInput::list_storage_nodes() const {
  return list_storage_nodes_;
}
inline void GetPersonalCloudStateInput::set_list_storage_nodes(bool value) {
  set_has_list_storage_nodes();
  list_storage_nodes_ = value;
}

// repeated fixed64 get_device_connection_status = 4;
inline int GetPersonalCloudStateInput::get_device_connection_status_size() const {
  return get_device_connection_status_.size();
}
inline void GetPersonalCloudStateInput::clear_get_device_connection_status() {
  get_device_connection_status_.Clear();
}
inline ::google::protobuf::uint64 GetPersonalCloudStateInput::get_device_connection_status(int index) const {
  return get_device_connection_status_.Get(index);
}
inline void GetPersonalCloudStateInput::set_get_device_connection_status(int index, ::google::protobuf::uint64 value) {
  get_device_connection_status_.Set(index, value);
}
inline void GetPersonalCloudStateInput::add_get_device_connection_status(::google::protobuf::uint64 value) {
  get_device_connection_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GetPersonalCloudStateInput::get_device_connection_status() const {
  return get_device_connection_status_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GetPersonalCloudStateInput::mutable_get_device_connection_status() {
  return &get_device_connection_status_;
}

// -------------------------------------------------------------------

// DeviceConnectionStatus

// required .ccd.DeviceConnectionState_t state = 1;
inline bool DeviceConnectionStatus::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceConnectionStatus::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceConnectionStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceConnectionStatus::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ccd::DeviceConnectionState_t DeviceConnectionStatus::state() const {
  return static_cast< ccd::DeviceConnectionState_t >(state_);
}
inline void DeviceConnectionStatus::set_state(ccd::DeviceConnectionState_t value) {
  GOOGLE_DCHECK(ccd::DeviceConnectionState_t_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint64 standby_since = 2;
inline bool DeviceConnectionStatus::has_standby_since() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceConnectionStatus::set_has_standby_since() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceConnectionStatus::clear_has_standby_since() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceConnectionStatus::clear_standby_since() {
  standby_since_ = GOOGLE_ULONGLONG(0);
  clear_has_standby_since();
}
inline ::google::protobuf::uint64 DeviceConnectionStatus::standby_since() const {
  return standby_since_;
}
inline void DeviceConnectionStatus::set_standby_since(::google::protobuf::uint64 value) {
  set_has_standby_since();
  standby_since_ = value;
}

// optional bool updating = 3 [default = false];
inline bool DeviceConnectionStatus::has_updating() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceConnectionStatus::set_has_updating() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceConnectionStatus::clear_has_updating() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceConnectionStatus::clear_updating() {
  updating_ = false;
  clear_has_updating();
}
inline bool DeviceConnectionStatus::updating() const {
  return updating_;
}
inline void DeviceConnectionStatus::set_updating(bool value) {
  set_has_updating();
  updating_ = value;
}

// -------------------------------------------------------------------

// StorageNodeInfo

// required fixed64 device_id = 1;
inline bool StorageNodeInfo::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StorageNodeInfo::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StorageNodeInfo::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StorageNodeInfo::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 StorageNodeInfo::device_id() const {
  return device_id_;
}
inline void StorageNodeInfo::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional string storage_name = 2;
inline bool StorageNodeInfo::has_storage_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StorageNodeInfo::set_has_storage_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StorageNodeInfo::clear_has_storage_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StorageNodeInfo::clear_storage_name() {
  if (storage_name_ != &::google::protobuf::internal::kEmptyString) {
    storage_name_->clear();
  }
  clear_has_storage_name();
}
inline const ::std::string& StorageNodeInfo::storage_name() const {
  return *storage_name_;
}
inline void StorageNodeInfo::set_storage_name(const ::std::string& value) {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  storage_name_->assign(value);
}
inline void StorageNodeInfo::set_storage_name(const char* value) {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  storage_name_->assign(value);
}
inline void StorageNodeInfo::set_storage_name(const char* value, size_t size) {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  storage_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StorageNodeInfo::mutable_storage_name() {
  set_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    storage_name_ = new ::std::string;
  }
  return storage_name_;
}
inline ::std::string* StorageNodeInfo::release_storage_name() {
  clear_has_storage_name();
  if (storage_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = storage_name_;
    storage_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .ccd.DeviceConnectionStatus status = 3;
inline bool StorageNodeInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StorageNodeInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StorageNodeInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StorageNodeInfo::clear_status() {
  if (status_ != NULL) status_->::ccd::DeviceConnectionStatus::Clear();
  clear_has_status();
}
inline const ::ccd::DeviceConnectionStatus& StorageNodeInfo::status() const {
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::ccd::DeviceConnectionStatus* StorageNodeInfo::mutable_status() {
  set_has_status();
  if (status_ == NULL) status_ = new ::ccd::DeviceConnectionStatus;
  return status_;
}
inline ::ccd::DeviceConnectionStatus* StorageNodeInfo::release_status() {
  clear_has_status();
  ::ccd::DeviceConnectionStatus* temp = status_;
  status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GetPersonalCloudStateOutput

// optional uint64 infra_storage_used_bytes = 1;
inline bool GetPersonalCloudStateOutput::has_infra_storage_used_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPersonalCloudStateOutput::set_has_infra_storage_used_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPersonalCloudStateOutput::clear_has_infra_storage_used_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPersonalCloudStateOutput::clear_infra_storage_used_bytes() {
  infra_storage_used_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_infra_storage_used_bytes();
}
inline ::google::protobuf::uint64 GetPersonalCloudStateOutput::infra_storage_used_bytes() const {
  return infra_storage_used_bytes_;
}
inline void GetPersonalCloudStateOutput::set_infra_storage_used_bytes(::google::protobuf::uint64 value) {
  set_has_infra_storage_used_bytes();
  infra_storage_used_bytes_ = value;
}

// optional uint64 infra_storage_total_bytes = 2;
inline bool GetPersonalCloudStateOutput::has_infra_storage_total_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPersonalCloudStateOutput::set_has_infra_storage_total_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPersonalCloudStateOutput::clear_has_infra_storage_total_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPersonalCloudStateOutput::clear_infra_storage_total_bytes() {
  infra_storage_total_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_infra_storage_total_bytes();
}
inline ::google::protobuf::uint64 GetPersonalCloudStateOutput::infra_storage_total_bytes() const {
  return infra_storage_total_bytes_;
}
inline void GetPersonalCloudStateOutput::set_infra_storage_total_bytes(::google::protobuf::uint64 value) {
  set_has_infra_storage_total_bytes();
  infra_storage_total_bytes_ = value;
}

// repeated .ccd.StorageNodeInfo storage_nodes = 3;
inline int GetPersonalCloudStateOutput::storage_nodes_size() const {
  return storage_nodes_.size();
}
inline void GetPersonalCloudStateOutput::clear_storage_nodes() {
  storage_nodes_.Clear();
}
inline const ::ccd::StorageNodeInfo& GetPersonalCloudStateOutput::storage_nodes(int index) const {
  return storage_nodes_.Get(index);
}
inline ::ccd::StorageNodeInfo* GetPersonalCloudStateOutput::mutable_storage_nodes(int index) {
  return storage_nodes_.Mutable(index);
}
inline ::ccd::StorageNodeInfo* GetPersonalCloudStateOutput::add_storage_nodes() {
  return storage_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::StorageNodeInfo >&
GetPersonalCloudStateOutput::storage_nodes() const {
  return storage_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::StorageNodeInfo >*
GetPersonalCloudStateOutput::mutable_storage_nodes() {
  return &storage_nodes_;
}

// repeated .ccd.DeviceConnectionStatus device_connection_status = 4;
inline int GetPersonalCloudStateOutput::device_connection_status_size() const {
  return device_connection_status_.size();
}
inline void GetPersonalCloudStateOutput::clear_device_connection_status() {
  device_connection_status_.Clear();
}
inline const ::ccd::DeviceConnectionStatus& GetPersonalCloudStateOutput::device_connection_status(int index) const {
  return device_connection_status_.Get(index);
}
inline ::ccd::DeviceConnectionStatus* GetPersonalCloudStateOutput::mutable_device_connection_status(int index) {
  return device_connection_status_.Mutable(index);
}
inline ::ccd::DeviceConnectionStatus* GetPersonalCloudStateOutput::add_device_connection_status() {
  return device_connection_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::DeviceConnectionStatus >&
GetPersonalCloudStateOutput::device_connection_status() const {
  return device_connection_status_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::DeviceConnectionStatus >*
GetPersonalCloudStateOutput::mutable_device_connection_status() {
  return &device_connection_status_;
}

// -------------------------------------------------------------------

// LookupAbsPathInput

// required fixed64 dataset_id = 1;
inline bool LookupAbsPathInput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LookupAbsPathInput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LookupAbsPathInput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LookupAbsPathInput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 LookupAbsPathInput::dataset_id() const {
  return dataset_id_;
}
inline void LookupAbsPathInput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required fixed64 component_id = 2;
inline bool LookupAbsPathInput::has_component_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LookupAbsPathInput::set_has_component_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LookupAbsPathInput::clear_has_component_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LookupAbsPathInput::clear_component_id() {
  component_id_ = GOOGLE_ULONGLONG(0);
  clear_has_component_id();
}
inline ::google::protobuf::uint64 LookupAbsPathInput::component_id() const {
  return component_id_;
}
inline void LookupAbsPathInput::set_component_id(::google::protobuf::uint64 value) {
  set_has_component_id();
  component_id_ = value;
}

// required uint64 revision = 3;
inline bool LookupAbsPathInput::has_revision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LookupAbsPathInput::set_has_revision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LookupAbsPathInput::clear_has_revision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LookupAbsPathInput::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 LookupAbsPathInput::revision() const {
  return revision_;
}
inline void LookupAbsPathInput::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
}

// optional string dataset_rel_path = 7;
inline bool LookupAbsPathInput::has_dataset_rel_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LookupAbsPathInput::set_has_dataset_rel_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LookupAbsPathInput::clear_has_dataset_rel_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LookupAbsPathInput::clear_dataset_rel_path() {
  if (dataset_rel_path_ != &::google::protobuf::internal::kEmptyString) {
    dataset_rel_path_->clear();
  }
  clear_has_dataset_rel_path();
}
inline const ::std::string& LookupAbsPathInput::dataset_rel_path() const {
  return *dataset_rel_path_;
}
inline void LookupAbsPathInput::set_dataset_rel_path(const ::std::string& value) {
  set_has_dataset_rel_path();
  if (dataset_rel_path_ == &::google::protobuf::internal::kEmptyString) {
    dataset_rel_path_ = new ::std::string;
  }
  dataset_rel_path_->assign(value);
}
inline void LookupAbsPathInput::set_dataset_rel_path(const char* value) {
  set_has_dataset_rel_path();
  if (dataset_rel_path_ == &::google::protobuf::internal::kEmptyString) {
    dataset_rel_path_ = new ::std::string;
  }
  dataset_rel_path_->assign(value);
}
inline void LookupAbsPathInput::set_dataset_rel_path(const char* value, size_t size) {
  set_has_dataset_rel_path();
  if (dataset_rel_path_ == &::google::protobuf::internal::kEmptyString) {
    dataset_rel_path_ = new ::std::string;
  }
  dataset_rel_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LookupAbsPathInput::mutable_dataset_rel_path() {
  set_has_dataset_rel_path();
  if (dataset_rel_path_ == &::google::protobuf::internal::kEmptyString) {
    dataset_rel_path_ = new ::std::string;
  }
  return dataset_rel_path_;
}
inline ::std::string* LookupAbsPathInput::release_dataset_rel_path() {
  clear_has_dataset_rel_path();
  if (dataset_rel_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_rel_path_;
    dataset_rel_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EventSyncHistory

// required .ccd.SyncEventType_t type = 1;
inline bool EventSyncHistory::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventSyncHistory::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventSyncHistory::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventSyncHistory::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ccd::SyncEventType_t EventSyncHistory::type() const {
  return static_cast< ccd::SyncEventType_t >(type_);
}
inline void EventSyncHistory::set_type(ccd::SyncEventType_t value) {
  GOOGLE_DCHECK(ccd::SyncEventType_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string path = 2;
inline bool EventSyncHistory::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventSyncHistory::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventSyncHistory::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventSyncHistory::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& EventSyncHistory::path() const {
  return *path_;
}
inline void EventSyncHistory::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void EventSyncHistory::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void EventSyncHistory::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventSyncHistory::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* EventSyncHistory::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .ccd.SyncFeature_t feature = 3;
inline bool EventSyncHistory::has_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventSyncHistory::set_has_feature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventSyncHistory::clear_has_feature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventSyncHistory::clear_feature() {
  feature_ = 1;
  clear_has_feature();
}
inline ccd::SyncFeature_t EventSyncHistory::feature() const {
  return static_cast< ccd::SyncFeature_t >(feature_);
}
inline void EventSyncHistory::set_feature(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  set_has_feature();
  feature_ = value;
}

// required uint64 dataset_id = 4;
inline bool EventSyncHistory::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventSyncHistory::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventSyncHistory::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventSyncHistory::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 EventSyncHistory::dataset_id() const {
  return dataset_id_;
}
inline void EventSyncHistory::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required uint64 event_time = 5;
inline bool EventSyncHistory::has_event_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EventSyncHistory::set_has_event_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EventSyncHistory::clear_has_event_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EventSyncHistory::clear_event_time() {
  event_time_ = GOOGLE_ULONGLONG(0);
  clear_has_event_time();
}
inline ::google::protobuf::uint64 EventSyncHistory::event_time() const {
  return event_time_;
}
inline void EventSyncHistory::set_event_time(::google::protobuf::uint64 value) {
  set_has_event_time();
  event_time_ = value;
}

// optional string conflict_file_original_path = 15;
inline bool EventSyncHistory::has_conflict_file_original_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EventSyncHistory::set_has_conflict_file_original_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EventSyncHistory::clear_has_conflict_file_original_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EventSyncHistory::clear_conflict_file_original_path() {
  if (conflict_file_original_path_ != &::google::protobuf::internal::kEmptyString) {
    conflict_file_original_path_->clear();
  }
  clear_has_conflict_file_original_path();
}
inline const ::std::string& EventSyncHistory::conflict_file_original_path() const {
  return *conflict_file_original_path_;
}
inline void EventSyncHistory::set_conflict_file_original_path(const ::std::string& value) {
  set_has_conflict_file_original_path();
  if (conflict_file_original_path_ == &::google::protobuf::internal::kEmptyString) {
    conflict_file_original_path_ = new ::std::string;
  }
  conflict_file_original_path_->assign(value);
}
inline void EventSyncHistory::set_conflict_file_original_path(const char* value) {
  set_has_conflict_file_original_path();
  if (conflict_file_original_path_ == &::google::protobuf::internal::kEmptyString) {
    conflict_file_original_path_ = new ::std::string;
  }
  conflict_file_original_path_->assign(value);
}
inline void EventSyncHistory::set_conflict_file_original_path(const char* value, size_t size) {
  set_has_conflict_file_original_path();
  if (conflict_file_original_path_ == &::google::protobuf::internal::kEmptyString) {
    conflict_file_original_path_ = new ::std::string;
  }
  conflict_file_original_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventSyncHistory::mutable_conflict_file_original_path() {
  set_has_conflict_file_original_path();
  if (conflict_file_original_path_ == &::google::protobuf::internal::kEmptyString) {
    conflict_file_original_path_ = new ::std::string;
  }
  return conflict_file_original_path_;
}
inline ::std::string* EventSyncHistory::release_conflict_file_original_path() {
  clear_has_conflict_file_original_path();
  if (conflict_file_original_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = conflict_file_original_path_;
    conflict_file_original_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetSyncStateInput

// optional fixed64 user_id = 1;
inline bool GetSyncStateInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSyncStateInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSyncStateInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSyncStateInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 GetSyncStateInput::user_id() const {
  return user_id_;
}
inline void GetSyncStateInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool only_use_cache = 6 [default = false];
inline bool GetSyncStateInput::has_only_use_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSyncStateInput::set_has_only_use_cache() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSyncStateInput::clear_has_only_use_cache() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSyncStateInput::clear_only_use_cache() {
  only_use_cache_ = false;
  clear_has_only_use_cache();
}
inline bool GetSyncStateInput::only_use_cache() const {
  return only_use_cache_;
}
inline void GetSyncStateInput::set_only_use_cache(bool value) {
  set_has_only_use_cache();
  only_use_cache_ = value;
}

// optional bool get_device_name = 2 [default = false];
inline bool GetSyncStateInput::has_get_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSyncStateInput::set_has_get_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSyncStateInput::clear_has_get_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSyncStateInput::clear_get_device_name() {
  get_device_name_ = false;
  clear_has_get_device_name();
}
inline bool GetSyncStateInput::get_device_name() const {
  return get_device_name_;
}
inline void GetSyncStateInput::set_get_device_name(bool value) {
  set_has_get_device_name();
  get_device_name_ = value;
}

// optional bool get_is_camera_roll_upload_enabled = 7 [default = false];
inline bool GetSyncStateInput::has_get_is_camera_roll_upload_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetSyncStateInput::set_has_get_is_camera_roll_upload_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetSyncStateInput::clear_has_get_is_camera_roll_upload_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetSyncStateInput::clear_get_is_camera_roll_upload_enabled() {
  get_is_camera_roll_upload_enabled_ = false;
  clear_has_get_is_camera_roll_upload_enabled();
}
inline bool GetSyncStateInput::get_is_camera_roll_upload_enabled() const {
  return get_is_camera_roll_upload_enabled_;
}
inline void GetSyncStateInput::set_get_is_camera_roll_upload_enabled(bool value) {
  set_has_get_is_camera_roll_upload_enabled();
  get_is_camera_roll_upload_enabled_ = value;
}

// optional bool get_is_camera_roll_global_delete_enabled = 32 [default = true];
inline bool GetSyncStateInput::has_get_is_camera_roll_global_delete_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetSyncStateInput::set_has_get_is_camera_roll_global_delete_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetSyncStateInput::clear_has_get_is_camera_roll_global_delete_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetSyncStateInput::clear_get_is_camera_roll_global_delete_enabled() {
  get_is_camera_roll_global_delete_enabled_ = true;
  clear_has_get_is_camera_roll_global_delete_enabled();
}
inline bool GetSyncStateInput::get_is_camera_roll_global_delete_enabled() const {
  return get_is_camera_roll_global_delete_enabled_;
}
inline void GetSyncStateInput::set_get_is_camera_roll_global_delete_enabled(bool value) {
  set_has_get_is_camera_roll_global_delete_enabled();
  get_is_camera_roll_global_delete_enabled_ = value;
}

// optional bool get_is_network_activity_enabled = 9 [default = false];
inline bool GetSyncStateInput::has_get_is_network_activity_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetSyncStateInput::set_has_get_is_network_activity_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetSyncStateInput::clear_has_get_is_network_activity_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetSyncStateInput::clear_get_is_network_activity_enabled() {
  get_is_network_activity_enabled_ = false;
  clear_has_get_is_network_activity_enabled();
}
inline bool GetSyncStateInput::get_is_network_activity_enabled() const {
  return get_is_network_activity_enabled_;
}
inline void GetSyncStateInput::set_get_is_network_activity_enabled(bool value) {
  set_has_get_is_network_activity_enabled();
  get_is_network_activity_enabled_ = value;
}

// optional bool get_bandwidth_limits = 4 [default = false];
inline bool GetSyncStateInput::has_get_bandwidth_limits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetSyncStateInput::set_has_get_bandwidth_limits() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetSyncStateInput::clear_has_get_bandwidth_limits() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetSyncStateInput::clear_get_bandwidth_limits() {
  get_bandwidth_limits_ = false;
  clear_has_get_bandwidth_limits();
}
inline bool GetSyncStateInput::get_bandwidth_limits() const {
  return get_bandwidth_limits_;
}
inline void GetSyncStateInput::set_get_bandwidth_limits(bool value) {
  set_has_get_bandwidth_limits();
  get_bandwidth_limits_ = value;
}

// repeated string get_sync_states_for_paths = 5;
inline int GetSyncStateInput::get_sync_states_for_paths_size() const {
  return get_sync_states_for_paths_.size();
}
inline void GetSyncStateInput::clear_get_sync_states_for_paths() {
  get_sync_states_for_paths_.Clear();
}
inline const ::std::string& GetSyncStateInput::get_sync_states_for_paths(int index) const {
  return get_sync_states_for_paths_.Get(index);
}
inline ::std::string* GetSyncStateInput::mutable_get_sync_states_for_paths(int index) {
  return get_sync_states_for_paths_.Mutable(index);
}
inline void GetSyncStateInput::set_get_sync_states_for_paths(int index, const ::std::string& value) {
  get_sync_states_for_paths_.Mutable(index)->assign(value);
}
inline void GetSyncStateInput::set_get_sync_states_for_paths(int index, const char* value) {
  get_sync_states_for_paths_.Mutable(index)->assign(value);
}
inline void GetSyncStateInput::set_get_sync_states_for_paths(int index, const char* value, size_t size) {
  get_sync_states_for_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateInput::add_get_sync_states_for_paths() {
  return get_sync_states_for_paths_.Add();
}
inline void GetSyncStateInput::add_get_sync_states_for_paths(const ::std::string& value) {
  get_sync_states_for_paths_.Add()->assign(value);
}
inline void GetSyncStateInput::add_get_sync_states_for_paths(const char* value) {
  get_sync_states_for_paths_.Add()->assign(value);
}
inline void GetSyncStateInput::add_get_sync_states_for_paths(const char* value, size_t size) {
  get_sync_states_for_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSyncStateInput::get_sync_states_for_paths() const {
  return get_sync_states_for_paths_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSyncStateInput::mutable_get_sync_states_for_paths() {
  return &get_sync_states_for_paths_;
}

// repeated fixed64 get_sync_states_for_datasets = 8;
inline int GetSyncStateInput::get_sync_states_for_datasets_size() const {
  return get_sync_states_for_datasets_.size();
}
inline void GetSyncStateInput::clear_get_sync_states_for_datasets() {
  get_sync_states_for_datasets_.Clear();
}
inline ::google::protobuf::uint64 GetSyncStateInput::get_sync_states_for_datasets(int index) const {
  return get_sync_states_for_datasets_.Get(index);
}
inline void GetSyncStateInput::set_get_sync_states_for_datasets(int index, ::google::protobuf::uint64 value) {
  get_sync_states_for_datasets_.Set(index, value);
}
inline void GetSyncStateInput::add_get_sync_states_for_datasets(::google::protobuf::uint64 value) {
  get_sync_states_for_datasets_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
GetSyncStateInput::get_sync_states_for_datasets() const {
  return get_sync_states_for_datasets_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
GetSyncStateInput::mutable_get_sync_states_for_datasets() {
  return &get_sync_states_for_datasets_;
}

// repeated .ccd.SyncFeature_t get_sync_states_for_features = 22;
inline int GetSyncStateInput::get_sync_states_for_features_size() const {
  return get_sync_states_for_features_.size();
}
inline void GetSyncStateInput::clear_get_sync_states_for_features() {
  get_sync_states_for_features_.Clear();
}
inline ccd::SyncFeature_t GetSyncStateInput::get_sync_states_for_features(int index) const {
  return static_cast< ccd::SyncFeature_t >(get_sync_states_for_features_.Get(index));
}
inline void GetSyncStateInput::set_get_sync_states_for_features(int index, ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  get_sync_states_for_features_.Set(index, value);
}
inline void GetSyncStateInput::add_get_sync_states_for_features(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  get_sync_states_for_features_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
GetSyncStateInput::get_sync_states_for_features() const {
  return get_sync_states_for_features_;
}
inline ::google::protobuf::RepeatedField<int>*
GetSyncStateInput::mutable_get_sync_states_for_features() {
  return &get_sync_states_for_features_;
}

// optional bool get_background_data = 12;
inline bool GetSyncStateInput::has_get_background_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GetSyncStateInput::set_has_get_background_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GetSyncStateInput::clear_has_get_background_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GetSyncStateInput::clear_get_background_data() {
  get_background_data_ = false;
  clear_has_get_background_data();
}
inline bool GetSyncStateInput::get_background_data() const {
  return get_background_data_;
}
inline void GetSyncStateInput::set_get_background_data(bool value) {
  set_has_get_background_data();
  get_background_data_ = value;
}

// optional bool get_auto_sync = 13;
inline bool GetSyncStateInput::has_get_auto_sync() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetSyncStateInput::set_has_get_auto_sync() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetSyncStateInput::clear_has_get_auto_sync() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetSyncStateInput::clear_get_auto_sync() {
  get_auto_sync_ = false;
  clear_has_get_auto_sync();
}
inline bool GetSyncStateInput::get_auto_sync() const {
  return get_auto_sync_;
}
inline void GetSyncStateInput::set_get_auto_sync(bool value) {
  set_has_get_auto_sync();
  get_auto_sync_ = value;
}

// optional bool get_mobile_network_data = 14;
inline bool GetSyncStateInput::has_get_mobile_network_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetSyncStateInput::set_has_get_mobile_network_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetSyncStateInput::clear_has_get_mobile_network_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetSyncStateInput::clear_get_mobile_network_data() {
  get_mobile_network_data_ = false;
  clear_has_get_mobile_network_data();
}
inline bool GetSyncStateInput::get_mobile_network_data() const {
  return get_mobile_network_data_;
}
inline void GetSyncStateInput::set_get_mobile_network_data(bool value) {
  set_has_get_mobile_network_data();
  get_mobile_network_data_ = value;
}

// optional bool get_camera_roll_upload_dirs = 15;
inline bool GetSyncStateInput::has_get_camera_roll_upload_dirs() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetSyncStateInput::set_has_get_camera_roll_upload_dirs() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetSyncStateInput::clear_has_get_camera_roll_upload_dirs() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetSyncStateInput::clear_get_camera_roll_upload_dirs() {
  get_camera_roll_upload_dirs_ = false;
  clear_has_get_camera_roll_upload_dirs();
}
inline bool GetSyncStateInput::get_camera_roll_upload_dirs() const {
  return get_camera_roll_upload_dirs_;
}
inline void GetSyncStateInput::set_get_camera_roll_upload_dirs(bool value) {
  set_has_get_camera_roll_upload_dirs();
  get_camera_roll_upload_dirs_ = value;
}

// optional bool get_camera_roll_download_dirs = 19;
inline bool GetSyncStateInput::has_get_camera_roll_download_dirs() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GetSyncStateInput::set_has_get_camera_roll_download_dirs() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GetSyncStateInput::clear_has_get_camera_roll_download_dirs() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GetSyncStateInput::clear_get_camera_roll_download_dirs() {
  get_camera_roll_download_dirs_ = false;
  clear_has_get_camera_roll_download_dirs();
}
inline bool GetSyncStateInput::get_camera_roll_download_dirs() const {
  return get_camera_roll_download_dirs_;
}
inline void GetSyncStateInput::set_get_camera_roll_download_dirs(bool value) {
  set_has_get_camera_roll_download_dirs();
  get_camera_roll_download_dirs_ = value;
}

// optional bool get_media_metadata_download_path = 16;
inline bool GetSyncStateInput::has_get_media_metadata_download_path() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GetSyncStateInput::set_has_get_media_metadata_download_path() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GetSyncStateInput::clear_has_get_media_metadata_download_path() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GetSyncStateInput::clear_get_media_metadata_download_path() {
  get_media_metadata_download_path_ = false;
  clear_has_get_media_metadata_download_path();
}
inline bool GetSyncStateInput::get_media_metadata_download_path() const {
  return get_media_metadata_download_path_;
}
inline void GetSyncStateInput::set_get_media_metadata_download_path(bool value) {
  set_has_get_media_metadata_download_path();
  get_media_metadata_download_path_ = value;
}

// optional bool get_media_metadata_upload_path = 17;
inline bool GetSyncStateInput::has_get_media_metadata_upload_path() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GetSyncStateInput::set_has_get_media_metadata_upload_path() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GetSyncStateInput::clear_has_get_media_metadata_upload_path() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GetSyncStateInput::clear_get_media_metadata_upload_path() {
  get_media_metadata_upload_path_ = false;
  clear_has_get_media_metadata_upload_path();
}
inline bool GetSyncStateInput::get_media_metadata_upload_path() const {
  return get_media_metadata_upload_path_;
}
inline void GetSyncStateInput::set_get_media_metadata_upload_path(bool value) {
  set_has_get_media_metadata_upload_path();
  get_media_metadata_upload_path_ = value;
}

// optional bool get_media_playlist_path = 18;
inline bool GetSyncStateInput::has_get_media_playlist_path() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GetSyncStateInput::set_has_get_media_playlist_path() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GetSyncStateInput::clear_has_get_media_playlist_path() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GetSyncStateInput::clear_get_media_playlist_path() {
  get_media_playlist_path_ = false;
  clear_has_get_media_playlist_path();
}
inline bool GetSyncStateInput::get_media_playlist_path() const {
  return get_media_playlist_path_;
}
inline void GetSyncStateInput::set_get_media_playlist_path(bool value) {
  set_has_get_media_playlist_path();
  get_media_playlist_path_ = value;
}

// optional bool get_notes_sync_settings = 21;
inline bool GetSyncStateInput::has_get_notes_sync_settings() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GetSyncStateInput::set_has_get_notes_sync_settings() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GetSyncStateInput::clear_has_get_notes_sync_settings() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GetSyncStateInput::clear_get_notes_sync_settings() {
  get_notes_sync_settings_ = false;
  clear_has_get_notes_sync_settings();
}
inline bool GetSyncStateInput::get_notes_sync_settings() const {
  return get_notes_sync_settings_;
}
inline void GetSyncStateInput::set_get_notes_sync_settings(bool value) {
  set_has_get_notes_sync_settings();
  get_notes_sync_settings_ = value;
}

// optional bool get_notes_sync_path = 23;
inline bool GetSyncStateInput::has_get_notes_sync_path() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GetSyncStateInput::set_has_get_notes_sync_path() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GetSyncStateInput::clear_has_get_notes_sync_path() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GetSyncStateInput::clear_get_notes_sync_path() {
  get_notes_sync_path_ = false;
  clear_has_get_notes_sync_path();
}
inline bool GetSyncStateInput::get_notes_sync_path() const {
  return get_notes_sync_path_;
}
inline void GetSyncStateInput::set_get_notes_sync_path(bool value) {
  set_has_get_notes_sync_path();
  get_notes_sync_path_ = value;
}

// optional bool get_mm_thumb_download_path = 24;
inline bool GetSyncStateInput::has_get_mm_thumb_download_path() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GetSyncStateInput::set_has_get_mm_thumb_download_path() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GetSyncStateInput::clear_has_get_mm_thumb_download_path() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GetSyncStateInput::clear_get_mm_thumb_download_path() {
  get_mm_thumb_download_path_ = false;
  clear_has_get_mm_thumb_download_path();
}
inline bool GetSyncStateInput::get_mm_thumb_download_path() const {
  return get_mm_thumb_download_path_;
}
inline void GetSyncStateInput::set_get_mm_thumb_download_path(bool value) {
  set_has_get_mm_thumb_download_path();
  get_mm_thumb_download_path_ = value;
}

// optional bool get_mm_thumb_sync_enabled = 26;
inline bool GetSyncStateInput::has_get_mm_thumb_sync_enabled() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GetSyncStateInput::set_has_get_mm_thumb_sync_enabled() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GetSyncStateInput::clear_has_get_mm_thumb_sync_enabled() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GetSyncStateInput::clear_get_mm_thumb_sync_enabled() {
  get_mm_thumb_sync_enabled_ = false;
  clear_has_get_mm_thumb_sync_enabled();
}
inline bool GetSyncStateInput::get_mm_thumb_sync_enabled() const {
  return get_mm_thumb_sync_enabled_;
}
inline void GetSyncStateInput::set_get_mm_thumb_sync_enabled(bool value) {
  set_has_get_mm_thumb_sync_enabled();
  get_mm_thumb_sync_enabled_ = value;
}

// optional bool get_clouddoc_sync = 28;
inline bool GetSyncStateInput::has_get_clouddoc_sync() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GetSyncStateInput::set_has_get_clouddoc_sync() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GetSyncStateInput::clear_has_get_clouddoc_sync() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GetSyncStateInput::clear_get_clouddoc_sync() {
  get_clouddoc_sync_ = false;
  clear_has_get_clouddoc_sync();
}
inline bool GetSyncStateInput::get_clouddoc_sync() const {
  return get_clouddoc_sync_;
}
inline void GetSyncStateInput::set_get_clouddoc_sync(bool value) {
  set_has_get_clouddoc_sync();
  get_clouddoc_sync_ = value;
}

// optional .ccd.LookupAbsPathInput lookup_abs_path = 30;
inline bool GetSyncStateInput::has_lookup_abs_path() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GetSyncStateInput::set_has_lookup_abs_path() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GetSyncStateInput::clear_has_lookup_abs_path() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GetSyncStateInput::clear_lookup_abs_path() {
  if (lookup_abs_path_ != NULL) lookup_abs_path_->::ccd::LookupAbsPathInput::Clear();
  clear_has_lookup_abs_path();
}
inline const ::ccd::LookupAbsPathInput& GetSyncStateInput::lookup_abs_path() const {
  return lookup_abs_path_ != NULL ? *lookup_abs_path_ : *default_instance_->lookup_abs_path_;
}
inline ::ccd::LookupAbsPathInput* GetSyncStateInput::mutable_lookup_abs_path() {
  set_has_lookup_abs_path();
  if (lookup_abs_path_ == NULL) lookup_abs_path_ = new ::ccd::LookupAbsPathInput;
  return lookup_abs_path_;
}
inline ::ccd::LookupAbsPathInput* GetSyncStateInput::release_lookup_abs_path() {
  clear_has_lookup_abs_path();
  ::ccd::LookupAbsPathInput* temp = lookup_abs_path_;
  lookup_abs_path_ = NULL;
  return temp;
}

// optional .ccd.SyncFeature_t get_sync_history_events_by_feature = 31;
inline bool GetSyncStateInput::has_get_sync_history_events_by_feature() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GetSyncStateInput::set_has_get_sync_history_events_by_feature() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GetSyncStateInput::clear_has_get_sync_history_events_by_feature() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GetSyncStateInput::clear_get_sync_history_events_by_feature() {
  get_sync_history_events_by_feature_ = 1;
  clear_has_get_sync_history_events_by_feature();
}
inline ccd::SyncFeature_t GetSyncStateInput::get_sync_history_events_by_feature() const {
  return static_cast< ccd::SyncFeature_t >(get_sync_history_events_by_feature_);
}
inline void GetSyncStateInput::set_get_sync_history_events_by_feature(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  set_has_get_sync_history_events_by_feature();
  get_sync_history_events_by_feature_ = value;
}

// optional uint32 get_sync_history_events_max_count = 34 [default = 0];
inline bool GetSyncStateInput::has_get_sync_history_events_max_count() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GetSyncStateInput::set_has_get_sync_history_events_max_count() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GetSyncStateInput::clear_has_get_sync_history_events_max_count() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GetSyncStateInput::clear_get_sync_history_events_max_count() {
  get_sync_history_events_max_count_ = 0u;
  clear_has_get_sync_history_events_max_count();
}
inline ::google::protobuf::uint32 GetSyncStateInput::get_sync_history_events_max_count() const {
  return get_sync_history_events_max_count_;
}
inline void GetSyncStateInput::set_get_sync_history_events_max_count(::google::protobuf::uint32 value) {
  set_has_get_sync_history_events_max_count();
  get_sync_history_events_max_count_ = value;
}

// optional bool get_syncbox_sync_settings = 33;
inline bool GetSyncStateInput::has_get_syncbox_sync_settings() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GetSyncStateInput::set_has_get_syncbox_sync_settings() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GetSyncStateInput::clear_has_get_syncbox_sync_settings() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GetSyncStateInput::clear_get_syncbox_sync_settings() {
  get_syncbox_sync_settings_ = false;
  clear_has_get_syncbox_sync_settings();
}
inline bool GetSyncStateInput::get_syncbox_sync_settings() const {
  return get_syncbox_sync_settings_;
}
inline void GetSyncStateInput::set_get_syncbox_sync_settings(bool value) {
  set_has_get_syncbox_sync_settings();
  get_syncbox_sync_settings_ = value;
}

// -------------------------------------------------------------------

// ObjectSyncState

// required .ccd.SyncStateType_t state = 1;
inline bool ObjectSyncState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectSyncState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectSyncState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectSyncState::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ccd::SyncStateType_t ObjectSyncState::state() const {
  return static_cast< ccd::SyncStateType_t >(state_);
}
inline void ObjectSyncState::set_state(ccd::SyncStateType_t value) {
  GOOGLE_DCHECK(ccd::SyncStateType_t_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional fixed64 dataset_id = 2 [default = 0];
inline bool ObjectSyncState::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectSyncState::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectSyncState::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjectSyncState::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 ObjectSyncState::dataset_id() const {
  return dataset_id_;
}
inline void ObjectSyncState::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// optional .ccd.SyncFeature_t sync_feature = 4;
inline bool ObjectSyncState::has_sync_feature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectSyncState::set_has_sync_feature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectSyncState::clear_has_sync_feature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectSyncState::clear_sync_feature() {
  sync_feature_ = 1;
  clear_has_sync_feature();
}
inline ccd::SyncFeature_t ObjectSyncState::sync_feature() const {
  return static_cast< ccd::SyncFeature_t >(sync_feature_);
}
inline void ObjectSyncState::set_sync_feature(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  set_has_sync_feature();
  sync_feature_ = value;
}

// optional bool is_sync_folder_root = 3 [default = false];
inline bool ObjectSyncState::has_is_sync_folder_root() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectSyncState::set_has_is_sync_folder_root() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectSyncState::clear_has_is_sync_folder_root() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectSyncState::clear_is_sync_folder_root() {
  is_sync_folder_root_ = false;
  clear_has_is_sync_folder_root();
}
inline bool ObjectSyncState::is_sync_folder_root() const {
  return is_sync_folder_root_;
}
inline void ObjectSyncState::set_is_sync_folder_root(bool value) {
  set_has_is_sync_folder_root();
  is_sync_folder_root_ = value;
}

// -------------------------------------------------------------------

// DatasetSyncStateSummary

// optional .ccd.DatasetSyncStateType_t status = 1 [default = CCD_SYNC_STATE_OUT_OF_SYNC];
inline bool DatasetSyncStateSummary::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetSyncStateSummary::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetSyncStateSummary::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetSyncStateSummary::clear_status() {
  status_ = 3;
  clear_has_status();
}
inline ccd::DatasetSyncStateType_t DatasetSyncStateSummary::status() const {
  return static_cast< ccd::DatasetSyncStateType_t >(status_);
}
inline void DatasetSyncStateSummary::set_status(ccd::DatasetSyncStateType_t value) {
  GOOGLE_DCHECK(ccd::DatasetSyncStateType_t_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional uint32 pending_files_download = 2 [default = 0];
inline bool DatasetSyncStateSummary::has_pending_files_download() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetSyncStateSummary::set_has_pending_files_download() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetSyncStateSummary::clear_has_pending_files_download() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetSyncStateSummary::clear_pending_files_download() {
  pending_files_download_ = 0u;
  clear_has_pending_files_download();
}
inline ::google::protobuf::uint32 DatasetSyncStateSummary::pending_files_download() const {
  return pending_files_download_;
}
inline void DatasetSyncStateSummary::set_pending_files_download(::google::protobuf::uint32 value) {
  set_has_pending_files_download();
  pending_files_download_ = value;
}

// optional uint32 pending_files_upload = 3 [default = 0];
inline bool DatasetSyncStateSummary::has_pending_files_upload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetSyncStateSummary::set_has_pending_files_upload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetSyncStateSummary::clear_has_pending_files_upload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetSyncStateSummary::clear_pending_files_upload() {
  pending_files_upload_ = 0u;
  clear_has_pending_files_upload();
}
inline ::google::protobuf::uint32 DatasetSyncStateSummary::pending_files_upload() const {
  return pending_files_upload_;
}
inline void DatasetSyncStateSummary::set_pending_files_upload(::google::protobuf::uint32 value) {
  set_has_pending_files_upload();
  pending_files_upload_ = value;
}

// optional uint32 total_files_downloaded = 4 [default = 0];
inline bool DatasetSyncStateSummary::has_total_files_downloaded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatasetSyncStateSummary::set_has_total_files_downloaded() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatasetSyncStateSummary::clear_has_total_files_downloaded() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatasetSyncStateSummary::clear_total_files_downloaded() {
  total_files_downloaded_ = 0u;
  clear_has_total_files_downloaded();
}
inline ::google::protobuf::uint32 DatasetSyncStateSummary::total_files_downloaded() const {
  return total_files_downloaded_;
}
inline void DatasetSyncStateSummary::set_total_files_downloaded(::google::protobuf::uint32 value) {
  set_has_total_files_downloaded();
  total_files_downloaded_ = value;
}

// optional uint32 total_files_uploaded = 5 [default = 0];
inline bool DatasetSyncStateSummary::has_total_files_uploaded() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatasetSyncStateSummary::set_has_total_files_uploaded() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatasetSyncStateSummary::clear_has_total_files_uploaded() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatasetSyncStateSummary::clear_total_files_uploaded() {
  total_files_uploaded_ = 0u;
  clear_has_total_files_uploaded();
}
inline ::google::protobuf::uint32 DatasetSyncStateSummary::total_files_uploaded() const {
  return total_files_uploaded_;
}
inline void DatasetSyncStateSummary::set_total_files_uploaded(::google::protobuf::uint32 value) {
  set_has_total_files_uploaded();
  total_files_uploaded_ = value;
}

// -------------------------------------------------------------------

// FeatureSyncStateSummary

// optional .ccd.FeatureSyncStateType_t status = 1 [default = CCD_FEATURE_STATE_OUT_OF_SYNC];
inline bool FeatureSyncStateSummary::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureSyncStateSummary::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureSyncStateSummary::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureSyncStateSummary::clear_status() {
  status_ = 3;
  clear_has_status();
}
inline ccd::FeatureSyncStateType_t FeatureSyncStateSummary::status() const {
  return static_cast< ccd::FeatureSyncStateType_t >(status_);
}
inline void FeatureSyncStateSummary::set_status(ccd::FeatureSyncStateType_t value) {
  GOOGLE_DCHECK(ccd::FeatureSyncStateType_t_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional sint32 error = 2;
inline bool FeatureSyncStateSummary::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureSyncStateSummary::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureSyncStateSummary::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureSyncStateSummary::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 FeatureSyncStateSummary::error() const {
  return error_;
}
inline void FeatureSyncStateSummary::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
}

// optional uint32 pending_files = 3 [default = 0];
inline bool FeatureSyncStateSummary::has_pending_files() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureSyncStateSummary::set_has_pending_files() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureSyncStateSummary::clear_has_pending_files() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureSyncStateSummary::clear_pending_files() {
  pending_files_ = 0u;
  clear_has_pending_files();
}
inline ::google::protobuf::uint32 FeatureSyncStateSummary::pending_files() const {
  return pending_files_;
}
inline void FeatureSyncStateSummary::set_pending_files(::google::protobuf::uint32 value) {
  set_has_pending_files();
  pending_files_ = value;
}

// optional uint32 failed_files = 4 [default = 0];
inline bool FeatureSyncStateSummary::has_failed_files() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FeatureSyncStateSummary::set_has_failed_files() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FeatureSyncStateSummary::clear_has_failed_files() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FeatureSyncStateSummary::clear_failed_files() {
  failed_files_ = 0u;
  clear_has_failed_files();
}
inline ::google::protobuf::uint32 FeatureSyncStateSummary::failed_files() const {
  return failed_files_;
}
inline void FeatureSyncStateSummary::set_failed_files(::google::protobuf::uint32 value) {
  set_has_failed_files();
  failed_files_ = value;
}

// optional uint32 uploads_remaining = 5 [default = 0];
inline bool FeatureSyncStateSummary::has_uploads_remaining() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FeatureSyncStateSummary::set_has_uploads_remaining() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FeatureSyncStateSummary::clear_has_uploads_remaining() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FeatureSyncStateSummary::clear_uploads_remaining() {
  uploads_remaining_ = 0u;
  clear_has_uploads_remaining();
}
inline ::google::protobuf::uint32 FeatureSyncStateSummary::uploads_remaining() const {
  return uploads_remaining_;
}
inline void FeatureSyncStateSummary::set_uploads_remaining(::google::protobuf::uint32 value) {
  set_has_uploads_remaining();
  uploads_remaining_ = value;
}

// optional uint32 downloads_remaining = 6 [default = 0];
inline bool FeatureSyncStateSummary::has_downloads_remaining() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FeatureSyncStateSummary::set_has_downloads_remaining() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FeatureSyncStateSummary::clear_has_downloads_remaining() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FeatureSyncStateSummary::clear_downloads_remaining() {
  downloads_remaining_ = 0u;
  clear_has_downloads_remaining();
}
inline ::google::protobuf::uint32 FeatureSyncStateSummary::downloads_remaining() const {
  return downloads_remaining_;
}
inline void FeatureSyncStateSummary::set_downloads_remaining(::google::protobuf::uint32 value) {
  set_has_downloads_remaining();
  downloads_remaining_ = value;
}

// optional bool remote_scan_pending = 7;
inline bool FeatureSyncStateSummary::has_remote_scan_pending() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FeatureSyncStateSummary::set_has_remote_scan_pending() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FeatureSyncStateSummary::clear_has_remote_scan_pending() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FeatureSyncStateSummary::clear_remote_scan_pending() {
  remote_scan_pending_ = false;
  clear_has_remote_scan_pending();
}
inline bool FeatureSyncStateSummary::remote_scan_pending() const {
  return remote_scan_pending_;
}
inline void FeatureSyncStateSummary::set_remote_scan_pending(bool value) {
  set_has_remote_scan_pending();
  remote_scan_pending_ = value;
}

// optional bool scan_in_progress = 8;
inline bool FeatureSyncStateSummary::has_scan_in_progress() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FeatureSyncStateSummary::set_has_scan_in_progress() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FeatureSyncStateSummary::clear_has_scan_in_progress() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FeatureSyncStateSummary::clear_scan_in_progress() {
  scan_in_progress_ = false;
  clear_has_scan_in_progress();
}
inline bool FeatureSyncStateSummary::scan_in_progress() const {
  return scan_in_progress_;
}
inline void FeatureSyncStateSummary::set_scan_in_progress(bool value) {
  set_has_scan_in_progress();
  scan_in_progress_ = value;
}

// -------------------------------------------------------------------

// MediaMetadataThumbMigrateStatus

// required string mm_src_path = 1;
inline bool MediaMetadataThumbMigrateStatus::has_mm_src_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaMetadataThumbMigrateStatus::set_has_mm_src_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaMetadataThumbMigrateStatus::clear_has_mm_src_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaMetadataThumbMigrateStatus::clear_mm_src_path() {
  if (mm_src_path_ != &::google::protobuf::internal::kEmptyString) {
    mm_src_path_->clear();
  }
  clear_has_mm_src_path();
}
inline const ::std::string& MediaMetadataThumbMigrateStatus::mm_src_path() const {
  return *mm_src_path_;
}
inline void MediaMetadataThumbMigrateStatus::set_mm_src_path(const ::std::string& value) {
  set_has_mm_src_path();
  if (mm_src_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_src_path_ = new ::std::string;
  }
  mm_src_path_->assign(value);
}
inline void MediaMetadataThumbMigrateStatus::set_mm_src_path(const char* value) {
  set_has_mm_src_path();
  if (mm_src_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_src_path_ = new ::std::string;
  }
  mm_src_path_->assign(value);
}
inline void MediaMetadataThumbMigrateStatus::set_mm_src_path(const char* value, size_t size) {
  set_has_mm_src_path();
  if (mm_src_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_src_path_ = new ::std::string;
  }
  mm_src_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMetadataThumbMigrateStatus::mutable_mm_src_path() {
  set_has_mm_src_path();
  if (mm_src_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_src_path_ = new ::std::string;
  }
  return mm_src_path_;
}
inline ::std::string* MediaMetadataThumbMigrateStatus::release_mm_src_path() {
  clear_has_mm_src_path();
  if (mm_src_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mm_src_path_;
    mm_src_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string mm_dest_path = 2;
inline bool MediaMetadataThumbMigrateStatus::has_mm_dest_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MediaMetadataThumbMigrateStatus::set_has_mm_dest_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MediaMetadataThumbMigrateStatus::clear_has_mm_dest_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MediaMetadataThumbMigrateStatus::clear_mm_dest_path() {
  if (mm_dest_path_ != &::google::protobuf::internal::kEmptyString) {
    mm_dest_path_->clear();
  }
  clear_has_mm_dest_path();
}
inline const ::std::string& MediaMetadataThumbMigrateStatus::mm_dest_path() const {
  return *mm_dest_path_;
}
inline void MediaMetadataThumbMigrateStatus::set_mm_dest_path(const ::std::string& value) {
  set_has_mm_dest_path();
  if (mm_dest_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_path_ = new ::std::string;
  }
  mm_dest_path_->assign(value);
}
inline void MediaMetadataThumbMigrateStatus::set_mm_dest_path(const char* value) {
  set_has_mm_dest_path();
  if (mm_dest_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_path_ = new ::std::string;
  }
  mm_dest_path_->assign(value);
}
inline void MediaMetadataThumbMigrateStatus::set_mm_dest_path(const char* value, size_t size) {
  set_has_mm_dest_path();
  if (mm_dest_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_path_ = new ::std::string;
  }
  mm_dest_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMetadataThumbMigrateStatus::mutable_mm_dest_path() {
  set_has_mm_dest_path();
  if (mm_dest_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_path_ = new ::std::string;
  }
  return mm_dest_path_;
}
inline ::std::string* MediaMetadataThumbMigrateStatus::release_mm_dest_path() {
  clear_has_mm_dest_path();
  if (mm_dest_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mm_dest_path_;
    mm_dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SyncFeatureSettings

// required bool sync_feature_enabled = 1;
inline bool SyncFeatureSettings::has_sync_feature_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncFeatureSettings::set_has_sync_feature_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncFeatureSettings::clear_has_sync_feature_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncFeatureSettings::clear_sync_feature_enabled() {
  sync_feature_enabled_ = false;
  clear_has_sync_feature_enabled();
}
inline bool SyncFeatureSettings::sync_feature_enabled() const {
  return sync_feature_enabled_;
}
inline void SyncFeatureSettings::set_sync_feature_enabled(bool value) {
  set_has_sync_feature_enabled();
  sync_feature_enabled_ = value;
}

// optional string sync_feature_path = 2;
inline bool SyncFeatureSettings::has_sync_feature_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncFeatureSettings::set_has_sync_feature_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncFeatureSettings::clear_has_sync_feature_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncFeatureSettings::clear_sync_feature_path() {
  if (sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
    sync_feature_path_->clear();
  }
  clear_has_sync_feature_path();
}
inline const ::std::string& SyncFeatureSettings::sync_feature_path() const {
  return *sync_feature_path_;
}
inline void SyncFeatureSettings::set_sync_feature_path(const ::std::string& value) {
  set_has_sync_feature_path();
  if (sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    sync_feature_path_ = new ::std::string;
  }
  sync_feature_path_->assign(value);
}
inline void SyncFeatureSettings::set_sync_feature_path(const char* value) {
  set_has_sync_feature_path();
  if (sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    sync_feature_path_ = new ::std::string;
  }
  sync_feature_path_->assign(value);
}
inline void SyncFeatureSettings::set_sync_feature_path(const char* value, size_t size) {
  set_has_sync_feature_path();
  if (sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    sync_feature_path_ = new ::std::string;
  }
  sync_feature_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncFeatureSettings::mutable_sync_feature_path() {
  set_has_sync_feature_path();
  if (sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    sync_feature_path_ = new ::std::string;
  }
  return sync_feature_path_;
}
inline ::std::string* SyncFeatureSettings::release_sync_feature_path() {
  clear_has_sync_feature_path();
  if (sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sync_feature_path_;
    sync_feature_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_archive_storage = 3 [default = false];
inline bool SyncFeatureSettings::has_is_archive_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncFeatureSettings::set_has_is_archive_storage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncFeatureSettings::clear_has_is_archive_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncFeatureSettings::clear_is_archive_storage() {
  is_archive_storage_ = false;
  clear_has_is_archive_storage();
}
inline bool SyncFeatureSettings::is_archive_storage() const {
  return is_archive_storage_;
}
inline void SyncFeatureSettings::set_is_archive_storage(bool value) {
  set_has_is_archive_storage();
  is_archive_storage_ = value;
}

// -------------------------------------------------------------------

// LookupAbsPathOutput

// required int32 err_code = 1;
inline bool LookupAbsPathOutput::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LookupAbsPathOutput::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LookupAbsPathOutput::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LookupAbsPathOutput::clear_err_code() {
  err_code_ = 0;
  clear_has_err_code();
}
inline ::google::protobuf::int32 LookupAbsPathOutput::err_code() const {
  return err_code_;
}
inline void LookupAbsPathOutput::set_err_code(::google::protobuf::int32 value) {
  set_has_err_code();
  err_code_ = value;
}

// optional string absolute_path = 2;
inline bool LookupAbsPathOutput::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LookupAbsPathOutput::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LookupAbsPathOutput::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LookupAbsPathOutput::clear_absolute_path() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    absolute_path_->clear();
  }
  clear_has_absolute_path();
}
inline const ::std::string& LookupAbsPathOutput::absolute_path() const {
  return *absolute_path_;
}
inline void LookupAbsPathOutput::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void LookupAbsPathOutput::set_absolute_path(const char* value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void LookupAbsPathOutput::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LookupAbsPathOutput::mutable_absolute_path() {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  return absolute_path_;
}
inline ::std::string* LookupAbsPathOutput::release_absolute_path() {
  clear_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_path_;
    absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 local_modify_time = 3;
inline bool LookupAbsPathOutput::has_local_modify_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LookupAbsPathOutput::set_has_local_modify_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LookupAbsPathOutput::clear_has_local_modify_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LookupAbsPathOutput::clear_local_modify_time() {
  local_modify_time_ = GOOGLE_ULONGLONG(0);
  clear_has_local_modify_time();
}
inline ::google::protobuf::uint64 LookupAbsPathOutput::local_modify_time() const {
  return local_modify_time_;
}
inline void LookupAbsPathOutput::set_local_modify_time(::google::protobuf::uint64 value) {
  set_has_local_modify_time();
  local_modify_time_ = value;
}

// optional string hash = 4;
inline bool LookupAbsPathOutput::has_hash() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LookupAbsPathOutput::set_has_hash() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LookupAbsPathOutput::clear_has_hash() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LookupAbsPathOutput::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& LookupAbsPathOutput::hash() const {
  return *hash_;
}
inline void LookupAbsPathOutput::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void LookupAbsPathOutput::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void LookupAbsPathOutput::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LookupAbsPathOutput::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* LookupAbsPathOutput::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetSyncStateOutput

// required bool is_device_linked = 1;
inline bool GetSyncStateOutput::has_is_device_linked() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSyncStateOutput::set_has_is_device_linked() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSyncStateOutput::clear_has_is_device_linked() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSyncStateOutput::clear_is_device_linked() {
  is_device_linked_ = false;
  clear_has_is_device_linked();
}
inline bool GetSyncStateOutput::is_device_linked() const {
  return is_device_linked_;
}
inline void GetSyncStateOutput::set_is_device_linked(bool value) {
  set_has_is_device_linked();
  is_device_linked_ = value;
}

// required bool is_sync_agent_enabled = 2;
inline bool GetSyncStateOutput::has_is_sync_agent_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSyncStateOutput::set_has_is_sync_agent_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSyncStateOutput::clear_has_is_sync_agent_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSyncStateOutput::clear_is_sync_agent_enabled() {
  is_sync_agent_enabled_ = false;
  clear_has_is_sync_agent_enabled();
}
inline bool GetSyncStateOutput::is_sync_agent_enabled() const {
  return is_sync_agent_enabled_;
}
inline void GetSyncStateOutput::set_is_sync_agent_enabled(bool value) {
  set_has_is_sync_agent_enabled();
  is_sync_agent_enabled_ = value;
}

// optional string my_device_name = 3;
inline bool GetSyncStateOutput::has_my_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSyncStateOutput::set_has_my_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSyncStateOutput::clear_has_my_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSyncStateOutput::clear_my_device_name() {
  if (my_device_name_ != &::google::protobuf::internal::kEmptyString) {
    my_device_name_->clear();
  }
  clear_has_my_device_name();
}
inline const ::std::string& GetSyncStateOutput::my_device_name() const {
  return *my_device_name_;
}
inline void GetSyncStateOutput::set_my_device_name(const ::std::string& value) {
  set_has_my_device_name();
  if (my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    my_device_name_ = new ::std::string;
  }
  my_device_name_->assign(value);
}
inline void GetSyncStateOutput::set_my_device_name(const char* value) {
  set_has_my_device_name();
  if (my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    my_device_name_ = new ::std::string;
  }
  my_device_name_->assign(value);
}
inline void GetSyncStateOutput::set_my_device_name(const char* value, size_t size) {
  set_has_my_device_name();
  if (my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    my_device_name_ = new ::std::string;
  }
  my_device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::mutable_my_device_name() {
  set_has_my_device_name();
  if (my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    my_device_name_ = new ::std::string;
  }
  return my_device_name_;
}
inline ::std::string* GetSyncStateOutput::release_my_device_name() {
  clear_has_my_device_name();
  if (my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = my_device_name_;
    my_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_camera_roll_upload_enabled = 9;
inline bool GetSyncStateOutput::has_is_camera_roll_upload_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetSyncStateOutput::set_has_is_camera_roll_upload_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetSyncStateOutput::clear_has_is_camera_roll_upload_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetSyncStateOutput::clear_is_camera_roll_upload_enabled() {
  is_camera_roll_upload_enabled_ = false;
  clear_has_is_camera_roll_upload_enabled();
}
inline bool GetSyncStateOutput::is_camera_roll_upload_enabled() const {
  return is_camera_roll_upload_enabled_;
}
inline void GetSyncStateOutput::set_is_camera_roll_upload_enabled(bool value) {
  set_has_is_camera_roll_upload_enabled();
  is_camera_roll_upload_enabled_ = value;
}

// optional bool is_camera_roll_global_delete_enabled = 32;
inline bool GetSyncStateOutput::has_is_camera_roll_global_delete_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetSyncStateOutput::set_has_is_camera_roll_global_delete_enabled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetSyncStateOutput::clear_has_is_camera_roll_global_delete_enabled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetSyncStateOutput::clear_is_camera_roll_global_delete_enabled() {
  is_camera_roll_global_delete_enabled_ = false;
  clear_has_is_camera_roll_global_delete_enabled();
}
inline bool GetSyncStateOutput::is_camera_roll_global_delete_enabled() const {
  return is_camera_roll_global_delete_enabled_;
}
inline void GetSyncStateOutput::set_is_camera_roll_global_delete_enabled(bool value) {
  set_has_is_camera_roll_global_delete_enabled();
  is_camera_roll_global_delete_enabled_ = value;
}

// optional bool is_network_activity_enabled = 11;
inline bool GetSyncStateOutput::has_is_network_activity_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetSyncStateOutput::set_has_is_network_activity_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetSyncStateOutput::clear_has_is_network_activity_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetSyncStateOutput::clear_is_network_activity_enabled() {
  is_network_activity_enabled_ = false;
  clear_has_is_network_activity_enabled();
}
inline bool GetSyncStateOutput::is_network_activity_enabled() const {
  return is_network_activity_enabled_;
}
inline void GetSyncStateOutput::set_is_network_activity_enabled(bool value) {
  set_has_is_network_activity_enabled();
  is_network_activity_enabled_ = value;
}

// optional uint64 max_download_rate_bytes_sec = 4;
inline bool GetSyncStateOutput::has_max_download_rate_bytes_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetSyncStateOutput::set_has_max_download_rate_bytes_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetSyncStateOutput::clear_has_max_download_rate_bytes_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetSyncStateOutput::clear_max_download_rate_bytes_sec() {
  max_download_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_max_download_rate_bytes_sec();
}
inline ::google::protobuf::uint64 GetSyncStateOutput::max_download_rate_bytes_sec() const {
  return max_download_rate_bytes_sec_;
}
inline void GetSyncStateOutput::set_max_download_rate_bytes_sec(::google::protobuf::uint64 value) {
  set_has_max_download_rate_bytes_sec();
  max_download_rate_bytes_sec_ = value;
}

// optional uint64 max_upload_rate_bytes_sec = 5;
inline bool GetSyncStateOutput::has_max_upload_rate_bytes_sec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetSyncStateOutput::set_has_max_upload_rate_bytes_sec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetSyncStateOutput::clear_has_max_upload_rate_bytes_sec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetSyncStateOutput::clear_max_upload_rate_bytes_sec() {
  max_upload_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_max_upload_rate_bytes_sec();
}
inline ::google::protobuf::uint64 GetSyncStateOutput::max_upload_rate_bytes_sec() const {
  return max_upload_rate_bytes_sec_;
}
inline void GetSyncStateOutput::set_max_upload_rate_bytes_sec(::google::protobuf::uint64 value) {
  set_has_max_upload_rate_bytes_sec();
  max_upload_rate_bytes_sec_ = value;
}

// repeated .ccd.ObjectSyncState sync_states_for_paths = 6;
inline int GetSyncStateOutput::sync_states_for_paths_size() const {
  return sync_states_for_paths_.size();
}
inline void GetSyncStateOutput::clear_sync_states_for_paths() {
  sync_states_for_paths_.Clear();
}
inline const ::ccd::ObjectSyncState& GetSyncStateOutput::sync_states_for_paths(int index) const {
  return sync_states_for_paths_.Get(index);
}
inline ::ccd::ObjectSyncState* GetSyncStateOutput::mutable_sync_states_for_paths(int index) {
  return sync_states_for_paths_.Mutable(index);
}
inline ::ccd::ObjectSyncState* GetSyncStateOutput::add_sync_states_for_paths() {
  return sync_states_for_paths_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::ObjectSyncState >&
GetSyncStateOutput::sync_states_for_paths() const {
  return sync_states_for_paths_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::ObjectSyncState >*
GetSyncStateOutput::mutable_sync_states_for_paths() {
  return &sync_states_for_paths_;
}

// repeated .ccd.DatasetSyncStateSummary dataset_sync_state_summary = 10;
inline int GetSyncStateOutput::dataset_sync_state_summary_size() const {
  return dataset_sync_state_summary_.size();
}
inline void GetSyncStateOutput::clear_dataset_sync_state_summary() {
  dataset_sync_state_summary_.Clear();
}
inline const ::ccd::DatasetSyncStateSummary& GetSyncStateOutput::dataset_sync_state_summary(int index) const {
  return dataset_sync_state_summary_.Get(index);
}
inline ::ccd::DatasetSyncStateSummary* GetSyncStateOutput::mutable_dataset_sync_state_summary(int index) {
  return dataset_sync_state_summary_.Mutable(index);
}
inline ::ccd::DatasetSyncStateSummary* GetSyncStateOutput::add_dataset_sync_state_summary() {
  return dataset_sync_state_summary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::DatasetSyncStateSummary >&
GetSyncStateOutput::dataset_sync_state_summary() const {
  return dataset_sync_state_summary_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::DatasetSyncStateSummary >*
GetSyncStateOutput::mutable_dataset_sync_state_summary() {
  return &dataset_sync_state_summary_;
}

// repeated .ccd.FeatureSyncStateSummary feature_sync_state_summary = 22;
inline int GetSyncStateOutput::feature_sync_state_summary_size() const {
  return feature_sync_state_summary_.size();
}
inline void GetSyncStateOutput::clear_feature_sync_state_summary() {
  feature_sync_state_summary_.Clear();
}
inline const ::ccd::FeatureSyncStateSummary& GetSyncStateOutput::feature_sync_state_summary(int index) const {
  return feature_sync_state_summary_.Get(index);
}
inline ::ccd::FeatureSyncStateSummary* GetSyncStateOutput::mutable_feature_sync_state_summary(int index) {
  return feature_sync_state_summary_.Mutable(index);
}
inline ::ccd::FeatureSyncStateSummary* GetSyncStateOutput::add_feature_sync_state_summary() {
  return feature_sync_state_summary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::FeatureSyncStateSummary >&
GetSyncStateOutput::feature_sync_state_summary() const {
  return feature_sync_state_summary_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::FeatureSyncStateSummary >*
GetSyncStateOutput::mutable_feature_sync_state_summary() {
  return &feature_sync_state_summary_;
}

// optional bool background_data = 12;
inline bool GetSyncStateOutput::has_background_data() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GetSyncStateOutput::set_has_background_data() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GetSyncStateOutput::clear_has_background_data() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GetSyncStateOutput::clear_background_data() {
  background_data_ = false;
  clear_has_background_data();
}
inline bool GetSyncStateOutput::background_data() const {
  return background_data_;
}
inline void GetSyncStateOutput::set_background_data(bool value) {
  set_has_background_data();
  background_data_ = value;
}

// optional bool auto_sync = 13;
inline bool GetSyncStateOutput::has_auto_sync() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GetSyncStateOutput::set_has_auto_sync() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GetSyncStateOutput::clear_has_auto_sync() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GetSyncStateOutput::clear_auto_sync() {
  auto_sync_ = false;
  clear_has_auto_sync();
}
inline bool GetSyncStateOutput::auto_sync() const {
  return auto_sync_;
}
inline void GetSyncStateOutput::set_auto_sync(bool value) {
  set_has_auto_sync();
  auto_sync_ = value;
}

// optional bool mobile_network_data = 14;
inline bool GetSyncStateOutput::has_mobile_network_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GetSyncStateOutput::set_has_mobile_network_data() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GetSyncStateOutput::clear_has_mobile_network_data() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GetSyncStateOutput::clear_mobile_network_data() {
  mobile_network_data_ = false;
  clear_has_mobile_network_data();
}
inline bool GetSyncStateOutput::mobile_network_data() const {
  return mobile_network_data_;
}
inline void GetSyncStateOutput::set_mobile_network_data(bool value) {
  set_has_mobile_network_data();
  mobile_network_data_ = value;
}

// repeated string camera_roll_upload_dirs = 15;
inline int GetSyncStateOutput::camera_roll_upload_dirs_size() const {
  return camera_roll_upload_dirs_.size();
}
inline void GetSyncStateOutput::clear_camera_roll_upload_dirs() {
  camera_roll_upload_dirs_.Clear();
}
inline const ::std::string& GetSyncStateOutput::camera_roll_upload_dirs(int index) const {
  return camera_roll_upload_dirs_.Get(index);
}
inline ::std::string* GetSyncStateOutput::mutable_camera_roll_upload_dirs(int index) {
  return camera_roll_upload_dirs_.Mutable(index);
}
inline void GetSyncStateOutput::set_camera_roll_upload_dirs(int index, const ::std::string& value) {
  camera_roll_upload_dirs_.Mutable(index)->assign(value);
}
inline void GetSyncStateOutput::set_camera_roll_upload_dirs(int index, const char* value) {
  camera_roll_upload_dirs_.Mutable(index)->assign(value);
}
inline void GetSyncStateOutput::set_camera_roll_upload_dirs(int index, const char* value, size_t size) {
  camera_roll_upload_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::add_camera_roll_upload_dirs() {
  return camera_roll_upload_dirs_.Add();
}
inline void GetSyncStateOutput::add_camera_roll_upload_dirs(const ::std::string& value) {
  camera_roll_upload_dirs_.Add()->assign(value);
}
inline void GetSyncStateOutput::add_camera_roll_upload_dirs(const char* value) {
  camera_roll_upload_dirs_.Add()->assign(value);
}
inline void GetSyncStateOutput::add_camera_roll_upload_dirs(const char* value, size_t size) {
  camera_roll_upload_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetSyncStateOutput::camera_roll_upload_dirs() const {
  return camera_roll_upload_dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetSyncStateOutput::mutable_camera_roll_upload_dirs() {
  return &camera_roll_upload_dirs_;
}

// repeated .ccd.CameraRollDownloadDirSpec camera_roll_full_res_download_dirs = 19;
inline int GetSyncStateOutput::camera_roll_full_res_download_dirs_size() const {
  return camera_roll_full_res_download_dirs_.size();
}
inline void GetSyncStateOutput::clear_camera_roll_full_res_download_dirs() {
  camera_roll_full_res_download_dirs_.Clear();
}
inline const ::ccd::CameraRollDownloadDirSpec& GetSyncStateOutput::camera_roll_full_res_download_dirs(int index) const {
  return camera_roll_full_res_download_dirs_.Get(index);
}
inline ::ccd::CameraRollDownloadDirSpec* GetSyncStateOutput::mutable_camera_roll_full_res_download_dirs(int index) {
  return camera_roll_full_res_download_dirs_.Mutable(index);
}
inline ::ccd::CameraRollDownloadDirSpec* GetSyncStateOutput::add_camera_roll_full_res_download_dirs() {
  return camera_roll_full_res_download_dirs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >&
GetSyncStateOutput::camera_roll_full_res_download_dirs() const {
  return camera_roll_full_res_download_dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >*
GetSyncStateOutput::mutable_camera_roll_full_res_download_dirs() {
  return &camera_roll_full_res_download_dirs_;
}

// repeated .ccd.CameraRollDownloadDirSpec camera_roll_low_res_download_dirs = 20;
inline int GetSyncStateOutput::camera_roll_low_res_download_dirs_size() const {
  return camera_roll_low_res_download_dirs_.size();
}
inline void GetSyncStateOutput::clear_camera_roll_low_res_download_dirs() {
  camera_roll_low_res_download_dirs_.Clear();
}
inline const ::ccd::CameraRollDownloadDirSpec& GetSyncStateOutput::camera_roll_low_res_download_dirs(int index) const {
  return camera_roll_low_res_download_dirs_.Get(index);
}
inline ::ccd::CameraRollDownloadDirSpec* GetSyncStateOutput::mutable_camera_roll_low_res_download_dirs(int index) {
  return camera_roll_low_res_download_dirs_.Mutable(index);
}
inline ::ccd::CameraRollDownloadDirSpec* GetSyncStateOutput::add_camera_roll_low_res_download_dirs() {
  return camera_roll_low_res_download_dirs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >&
GetSyncStateOutput::camera_roll_low_res_download_dirs() const {
  return camera_roll_low_res_download_dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >*
GetSyncStateOutput::mutable_camera_roll_low_res_download_dirs() {
  return &camera_roll_low_res_download_dirs_;
}

// repeated .ccd.CameraRollDownloadDirSpec camera_roll_thumb_download_dirs = 31;
inline int GetSyncStateOutput::camera_roll_thumb_download_dirs_size() const {
  return camera_roll_thumb_download_dirs_.size();
}
inline void GetSyncStateOutput::clear_camera_roll_thumb_download_dirs() {
  camera_roll_thumb_download_dirs_.Clear();
}
inline const ::ccd::CameraRollDownloadDirSpec& GetSyncStateOutput::camera_roll_thumb_download_dirs(int index) const {
  return camera_roll_thumb_download_dirs_.Get(index);
}
inline ::ccd::CameraRollDownloadDirSpec* GetSyncStateOutput::mutable_camera_roll_thumb_download_dirs(int index) {
  return camera_roll_thumb_download_dirs_.Mutable(index);
}
inline ::ccd::CameraRollDownloadDirSpec* GetSyncStateOutput::add_camera_roll_thumb_download_dirs() {
  return camera_roll_thumb_download_dirs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >&
GetSyncStateOutput::camera_roll_thumb_download_dirs() const {
  return camera_roll_thumb_download_dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::CameraRollDownloadDirSpec >*
GetSyncStateOutput::mutable_camera_roll_thumb_download_dirs() {
  return &camera_roll_thumb_download_dirs_;
}

// optional string media_metadata_download_path = 16;
inline bool GetSyncStateOutput::has_media_metadata_download_path() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GetSyncStateOutput::set_has_media_metadata_download_path() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GetSyncStateOutput::clear_has_media_metadata_download_path() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GetSyncStateOutput::clear_media_metadata_download_path() {
  if (media_metadata_download_path_ != &::google::protobuf::internal::kEmptyString) {
    media_metadata_download_path_->clear();
  }
  clear_has_media_metadata_download_path();
}
inline const ::std::string& GetSyncStateOutput::media_metadata_download_path() const {
  return *media_metadata_download_path_;
}
inline void GetSyncStateOutput::set_media_metadata_download_path(const ::std::string& value) {
  set_has_media_metadata_download_path();
  if (media_metadata_download_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_download_path_ = new ::std::string;
  }
  media_metadata_download_path_->assign(value);
}
inline void GetSyncStateOutput::set_media_metadata_download_path(const char* value) {
  set_has_media_metadata_download_path();
  if (media_metadata_download_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_download_path_ = new ::std::string;
  }
  media_metadata_download_path_->assign(value);
}
inline void GetSyncStateOutput::set_media_metadata_download_path(const char* value, size_t size) {
  set_has_media_metadata_download_path();
  if (media_metadata_download_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_download_path_ = new ::std::string;
  }
  media_metadata_download_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::mutable_media_metadata_download_path() {
  set_has_media_metadata_download_path();
  if (media_metadata_download_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_download_path_ = new ::std::string;
  }
  return media_metadata_download_path_;
}
inline ::std::string* GetSyncStateOutput::release_media_metadata_download_path() {
  clear_has_media_metadata_download_path();
  if (media_metadata_download_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = media_metadata_download_path_;
    media_metadata_download_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string media_metadata_upload_path = 17;
inline bool GetSyncStateOutput::has_media_metadata_upload_path() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GetSyncStateOutput::set_has_media_metadata_upload_path() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GetSyncStateOutput::clear_has_media_metadata_upload_path() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GetSyncStateOutput::clear_media_metadata_upload_path() {
  if (media_metadata_upload_path_ != &::google::protobuf::internal::kEmptyString) {
    media_metadata_upload_path_->clear();
  }
  clear_has_media_metadata_upload_path();
}
inline const ::std::string& GetSyncStateOutput::media_metadata_upload_path() const {
  return *media_metadata_upload_path_;
}
inline void GetSyncStateOutput::set_media_metadata_upload_path(const ::std::string& value) {
  set_has_media_metadata_upload_path();
  if (media_metadata_upload_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_upload_path_ = new ::std::string;
  }
  media_metadata_upload_path_->assign(value);
}
inline void GetSyncStateOutput::set_media_metadata_upload_path(const char* value) {
  set_has_media_metadata_upload_path();
  if (media_metadata_upload_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_upload_path_ = new ::std::string;
  }
  media_metadata_upload_path_->assign(value);
}
inline void GetSyncStateOutput::set_media_metadata_upload_path(const char* value, size_t size) {
  set_has_media_metadata_upload_path();
  if (media_metadata_upload_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_upload_path_ = new ::std::string;
  }
  media_metadata_upload_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::mutable_media_metadata_upload_path() {
  set_has_media_metadata_upload_path();
  if (media_metadata_upload_path_ == &::google::protobuf::internal::kEmptyString) {
    media_metadata_upload_path_ = new ::std::string;
  }
  return media_metadata_upload_path_;
}
inline ::std::string* GetSyncStateOutput::release_media_metadata_upload_path() {
  clear_has_media_metadata_upload_path();
  if (media_metadata_upload_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = media_metadata_upload_path_;
    media_metadata_upload_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string media_playlist_path = 18;
inline bool GetSyncStateOutput::has_media_playlist_path() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GetSyncStateOutput::set_has_media_playlist_path() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GetSyncStateOutput::clear_has_media_playlist_path() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GetSyncStateOutput::clear_media_playlist_path() {
  if (media_playlist_path_ != &::google::protobuf::internal::kEmptyString) {
    media_playlist_path_->clear();
  }
  clear_has_media_playlist_path();
}
inline const ::std::string& GetSyncStateOutput::media_playlist_path() const {
  return *media_playlist_path_;
}
inline void GetSyncStateOutput::set_media_playlist_path(const ::std::string& value) {
  set_has_media_playlist_path();
  if (media_playlist_path_ == &::google::protobuf::internal::kEmptyString) {
    media_playlist_path_ = new ::std::string;
  }
  media_playlist_path_->assign(value);
}
inline void GetSyncStateOutput::set_media_playlist_path(const char* value) {
  set_has_media_playlist_path();
  if (media_playlist_path_ == &::google::protobuf::internal::kEmptyString) {
    media_playlist_path_ = new ::std::string;
  }
  media_playlist_path_->assign(value);
}
inline void GetSyncStateOutput::set_media_playlist_path(const char* value, size_t size) {
  set_has_media_playlist_path();
  if (media_playlist_path_ == &::google::protobuf::internal::kEmptyString) {
    media_playlist_path_ = new ::std::string;
  }
  media_playlist_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::mutable_media_playlist_path() {
  set_has_media_playlist_path();
  if (media_playlist_path_ == &::google::protobuf::internal::kEmptyString) {
    media_playlist_path_ = new ::std::string;
  }
  return media_playlist_path_;
}
inline ::std::string* GetSyncStateOutput::release_media_playlist_path() {
  clear_has_media_playlist_path();
  if (media_playlist_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = media_playlist_path_;
    media_playlist_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.SyncFeatureSettings notes_sync_settings = 21;
inline bool GetSyncStateOutput::has_notes_sync_settings() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GetSyncStateOutput::set_has_notes_sync_settings() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GetSyncStateOutput::clear_has_notes_sync_settings() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GetSyncStateOutput::clear_notes_sync_settings() {
  if (notes_sync_settings_ != NULL) notes_sync_settings_->::ccd::SyncFeatureSettings::Clear();
  clear_has_notes_sync_settings();
}
inline const ::ccd::SyncFeatureSettings& GetSyncStateOutput::notes_sync_settings() const {
  return notes_sync_settings_ != NULL ? *notes_sync_settings_ : *default_instance_->notes_sync_settings_;
}
inline ::ccd::SyncFeatureSettings* GetSyncStateOutput::mutable_notes_sync_settings() {
  set_has_notes_sync_settings();
  if (notes_sync_settings_ == NULL) notes_sync_settings_ = new ::ccd::SyncFeatureSettings;
  return notes_sync_settings_;
}
inline ::ccd::SyncFeatureSettings* GetSyncStateOutput::release_notes_sync_settings() {
  clear_has_notes_sync_settings();
  ::ccd::SyncFeatureSettings* temp = notes_sync_settings_;
  notes_sync_settings_ = NULL;
  return temp;
}

// optional string notes_sync_path = 23;
inline bool GetSyncStateOutput::has_notes_sync_path() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GetSyncStateOutput::set_has_notes_sync_path() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GetSyncStateOutput::clear_has_notes_sync_path() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GetSyncStateOutput::clear_notes_sync_path() {
  if (notes_sync_path_ != &::google::protobuf::internal::kEmptyString) {
    notes_sync_path_->clear();
  }
  clear_has_notes_sync_path();
}
inline const ::std::string& GetSyncStateOutput::notes_sync_path() const {
  return *notes_sync_path_;
}
inline void GetSyncStateOutput::set_notes_sync_path(const ::std::string& value) {
  set_has_notes_sync_path();
  if (notes_sync_path_ == &::google::protobuf::internal::kEmptyString) {
    notes_sync_path_ = new ::std::string;
  }
  notes_sync_path_->assign(value);
}
inline void GetSyncStateOutput::set_notes_sync_path(const char* value) {
  set_has_notes_sync_path();
  if (notes_sync_path_ == &::google::protobuf::internal::kEmptyString) {
    notes_sync_path_ = new ::std::string;
  }
  notes_sync_path_->assign(value);
}
inline void GetSyncStateOutput::set_notes_sync_path(const char* value, size_t size) {
  set_has_notes_sync_path();
  if (notes_sync_path_ == &::google::protobuf::internal::kEmptyString) {
    notes_sync_path_ = new ::std::string;
  }
  notes_sync_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::mutable_notes_sync_path() {
  set_has_notes_sync_path();
  if (notes_sync_path_ == &::google::protobuf::internal::kEmptyString) {
    notes_sync_path_ = new ::std::string;
  }
  return notes_sync_path_;
}
inline ::std::string* GetSyncStateOutput::release_notes_sync_path() {
  clear_has_notes_sync_path();
  if (notes_sync_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notes_sync_path_;
    notes_sync_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mm_thumb_download_path = 24;
inline bool GetSyncStateOutput::has_mm_thumb_download_path() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GetSyncStateOutput::set_has_mm_thumb_download_path() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GetSyncStateOutput::clear_has_mm_thumb_download_path() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GetSyncStateOutput::clear_mm_thumb_download_path() {
  if (mm_thumb_download_path_ != &::google::protobuf::internal::kEmptyString) {
    mm_thumb_download_path_->clear();
  }
  clear_has_mm_thumb_download_path();
}
inline const ::std::string& GetSyncStateOutput::mm_thumb_download_path() const {
  return *mm_thumb_download_path_;
}
inline void GetSyncStateOutput::set_mm_thumb_download_path(const ::std::string& value) {
  set_has_mm_thumb_download_path();
  if (mm_thumb_download_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_thumb_download_path_ = new ::std::string;
  }
  mm_thumb_download_path_->assign(value);
}
inline void GetSyncStateOutput::set_mm_thumb_download_path(const char* value) {
  set_has_mm_thumb_download_path();
  if (mm_thumb_download_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_thumb_download_path_ = new ::std::string;
  }
  mm_thumb_download_path_->assign(value);
}
inline void GetSyncStateOutput::set_mm_thumb_download_path(const char* value, size_t size) {
  set_has_mm_thumb_download_path();
  if (mm_thumb_download_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_thumb_download_path_ = new ::std::string;
  }
  mm_thumb_download_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSyncStateOutput::mutable_mm_thumb_download_path() {
  set_has_mm_thumb_download_path();
  if (mm_thumb_download_path_ == &::google::protobuf::internal::kEmptyString) {
    mm_thumb_download_path_ = new ::std::string;
  }
  return mm_thumb_download_path_;
}
inline ::std::string* GetSyncStateOutput::release_mm_thumb_download_path() {
  clear_has_mm_thumb_download_path();
  if (mm_thumb_download_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mm_thumb_download_path_;
    mm_thumb_download_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.MediaMetadataThumbMigrateStatus mm_thumb_download_migrate_status = 25;
inline bool GetSyncStateOutput::has_mm_thumb_download_migrate_status() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GetSyncStateOutput::set_has_mm_thumb_download_migrate_status() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GetSyncStateOutput::clear_has_mm_thumb_download_migrate_status() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GetSyncStateOutput::clear_mm_thumb_download_migrate_status() {
  if (mm_thumb_download_migrate_status_ != NULL) mm_thumb_download_migrate_status_->::ccd::MediaMetadataThumbMigrateStatus::Clear();
  clear_has_mm_thumb_download_migrate_status();
}
inline const ::ccd::MediaMetadataThumbMigrateStatus& GetSyncStateOutput::mm_thumb_download_migrate_status() const {
  return mm_thumb_download_migrate_status_ != NULL ? *mm_thumb_download_migrate_status_ : *default_instance_->mm_thumb_download_migrate_status_;
}
inline ::ccd::MediaMetadataThumbMigrateStatus* GetSyncStateOutput::mutable_mm_thumb_download_migrate_status() {
  set_has_mm_thumb_download_migrate_status();
  if (mm_thumb_download_migrate_status_ == NULL) mm_thumb_download_migrate_status_ = new ::ccd::MediaMetadataThumbMigrateStatus;
  return mm_thumb_download_migrate_status_;
}
inline ::ccd::MediaMetadataThumbMigrateStatus* GetSyncStateOutput::release_mm_thumb_download_migrate_status() {
  clear_has_mm_thumb_download_migrate_status();
  ::ccd::MediaMetadataThumbMigrateStatus* temp = mm_thumb_download_migrate_status_;
  mm_thumb_download_migrate_status_ = NULL;
  return temp;
}

// optional bool mm_thumb_sync_enabled = 26;
inline bool GetSyncStateOutput::has_mm_thumb_sync_enabled() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GetSyncStateOutput::set_has_mm_thumb_sync_enabled() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GetSyncStateOutput::clear_has_mm_thumb_sync_enabled() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GetSyncStateOutput::clear_mm_thumb_sync_enabled() {
  mm_thumb_sync_enabled_ = false;
  clear_has_mm_thumb_sync_enabled();
}
inline bool GetSyncStateOutput::mm_thumb_sync_enabled() const {
  return mm_thumb_sync_enabled_;
}
inline void GetSyncStateOutput::set_mm_thumb_sync_enabled(bool value) {
  set_has_mm_thumb_sync_enabled();
  mm_thumb_sync_enabled_ = value;
}

// optional bool clouddoc_sync = 28;
inline bool GetSyncStateOutput::has_clouddoc_sync() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GetSyncStateOutput::set_has_clouddoc_sync() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GetSyncStateOutput::clear_has_clouddoc_sync() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GetSyncStateOutput::clear_clouddoc_sync() {
  clouddoc_sync_ = false;
  clear_has_clouddoc_sync();
}
inline bool GetSyncStateOutput::clouddoc_sync() const {
  return clouddoc_sync_;
}
inline void GetSyncStateOutput::set_clouddoc_sync(bool value) {
  set_has_clouddoc_sync();
  clouddoc_sync_ = value;
}

// repeated .ccd.SyncFeature_t mm_thumb_sync_enabled_types = 29;
inline int GetSyncStateOutput::mm_thumb_sync_enabled_types_size() const {
  return mm_thumb_sync_enabled_types_.size();
}
inline void GetSyncStateOutput::clear_mm_thumb_sync_enabled_types() {
  mm_thumb_sync_enabled_types_.Clear();
}
inline ccd::SyncFeature_t GetSyncStateOutput::mm_thumb_sync_enabled_types(int index) const {
  return static_cast< ccd::SyncFeature_t >(mm_thumb_sync_enabled_types_.Get(index));
}
inline void GetSyncStateOutput::set_mm_thumb_sync_enabled_types(int index, ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  mm_thumb_sync_enabled_types_.Set(index, value);
}
inline void GetSyncStateOutput::add_mm_thumb_sync_enabled_types(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  mm_thumb_sync_enabled_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
GetSyncStateOutput::mm_thumb_sync_enabled_types() const {
  return mm_thumb_sync_enabled_types_;
}
inline ::google::protobuf::RepeatedField<int>*
GetSyncStateOutput::mutable_mm_thumb_sync_enabled_types() {
  return &mm_thumb_sync_enabled_types_;
}

// optional .ccd.LookupAbsPathOutput lookup_abs_path = 30;
inline bool GetSyncStateOutput::has_lookup_abs_path() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GetSyncStateOutput::set_has_lookup_abs_path() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GetSyncStateOutput::clear_has_lookup_abs_path() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GetSyncStateOutput::clear_lookup_abs_path() {
  if (lookup_abs_path_ != NULL) lookup_abs_path_->::ccd::LookupAbsPathOutput::Clear();
  clear_has_lookup_abs_path();
}
inline const ::ccd::LookupAbsPathOutput& GetSyncStateOutput::lookup_abs_path() const {
  return lookup_abs_path_ != NULL ? *lookup_abs_path_ : *default_instance_->lookup_abs_path_;
}
inline ::ccd::LookupAbsPathOutput* GetSyncStateOutput::mutable_lookup_abs_path() {
  set_has_lookup_abs_path();
  if (lookup_abs_path_ == NULL) lookup_abs_path_ = new ::ccd::LookupAbsPathOutput;
  return lookup_abs_path_;
}
inline ::ccd::LookupAbsPathOutput* GetSyncStateOutput::release_lookup_abs_path() {
  clear_has_lookup_abs_path();
  ::ccd::LookupAbsPathOutput* temp = lookup_abs_path_;
  lookup_abs_path_ = NULL;
  return temp;
}

// repeated .ccd.EventSyncHistory sync_history_events = 34;
inline int GetSyncStateOutput::sync_history_events_size() const {
  return sync_history_events_.size();
}
inline void GetSyncStateOutput::clear_sync_history_events() {
  sync_history_events_.Clear();
}
inline const ::ccd::EventSyncHistory& GetSyncStateOutput::sync_history_events(int index) const {
  return sync_history_events_.Get(index);
}
inline ::ccd::EventSyncHistory* GetSyncStateOutput::mutable_sync_history_events(int index) {
  return sync_history_events_.Mutable(index);
}
inline ::ccd::EventSyncHistory* GetSyncStateOutput::add_sync_history_events() {
  return sync_history_events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::EventSyncHistory >&
GetSyncStateOutput::sync_history_events() const {
  return sync_history_events_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::EventSyncHistory >*
GetSyncStateOutput::mutable_sync_history_events() {
  return &sync_history_events_;
}

// repeated .ccd.SyncFeatureSettings syncbox_sync_settings = 33;
inline int GetSyncStateOutput::syncbox_sync_settings_size() const {
  return syncbox_sync_settings_.size();
}
inline void GetSyncStateOutput::clear_syncbox_sync_settings() {
  syncbox_sync_settings_.Clear();
}
inline const ::ccd::SyncFeatureSettings& GetSyncStateOutput::syncbox_sync_settings(int index) const {
  return syncbox_sync_settings_.Get(index);
}
inline ::ccd::SyncFeatureSettings* GetSyncStateOutput::mutable_syncbox_sync_settings(int index) {
  return syncbox_sync_settings_.Mutable(index);
}
inline ::ccd::SyncFeatureSettings* GetSyncStateOutput::add_syncbox_sync_settings() {
  return syncbox_sync_settings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::SyncFeatureSettings >&
GetSyncStateOutput::syncbox_sync_settings() const {
  return syncbox_sync_settings_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::SyncFeatureSettings >*
GetSyncStateOutput::mutable_syncbox_sync_settings() {
  return &syncbox_sync_settings_;
}

// -------------------------------------------------------------------

// GetSyncStateNotificationsInput

// optional uint32 max_count = 1;
inline bool GetSyncStateNotificationsInput::has_max_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSyncStateNotificationsInput::set_has_max_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSyncStateNotificationsInput::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSyncStateNotificationsInput::clear_max_count() {
  max_count_ = 0u;
  clear_has_max_count();
}
inline ::google::protobuf::uint32 GetSyncStateNotificationsInput::max_count() const {
  return max_count_;
}
inline void GetSyncStateNotificationsInput::set_max_count(::google::protobuf::uint32 value) {
  set_has_max_count();
  max_count_ = value;
}

// -------------------------------------------------------------------

// SyncEventSyncComplete

// required uint32 num_downloaded = 1;
inline bool SyncEventSyncComplete::has_num_downloaded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncEventSyncComplete::set_has_num_downloaded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncEventSyncComplete::clear_has_num_downloaded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncEventSyncComplete::clear_num_downloaded() {
  num_downloaded_ = 0u;
  clear_has_num_downloaded();
}
inline ::google::protobuf::uint32 SyncEventSyncComplete::num_downloaded() const {
  return num_downloaded_;
}
inline void SyncEventSyncComplete::set_num_downloaded(::google::protobuf::uint32 value) {
  set_has_num_downloaded();
  num_downloaded_ = value;
}

// required uint32 num_uploaded = 2;
inline bool SyncEventSyncComplete::has_num_uploaded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncEventSyncComplete::set_has_num_uploaded() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncEventSyncComplete::clear_has_num_uploaded() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncEventSyncComplete::clear_num_uploaded() {
  num_uploaded_ = 0u;
  clear_has_num_uploaded();
}
inline ::google::protobuf::uint32 SyncEventSyncComplete::num_uploaded() const {
  return num_uploaded_;
}
inline void SyncEventSyncComplete::set_num_uploaded(::google::protobuf::uint32 value) {
  set_has_num_uploaded();
  num_uploaded_ = value;
}

// -------------------------------------------------------------------

// SyncEventFileAdded

// required fixed64 dataset_id = 1;
inline bool SyncEventFileAdded::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncEventFileAdded::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncEventFileAdded::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncEventFileAdded::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 SyncEventFileAdded::dataset_id() const {
  return dataset_id_;
}
inline void SyncEventFileAdded::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required string full_path = 2;
inline bool SyncEventFileAdded::has_full_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncEventFileAdded::set_has_full_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncEventFileAdded::clear_has_full_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncEventFileAdded::clear_full_path() {
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    full_path_->clear();
  }
  clear_has_full_path();
}
inline const ::std::string& SyncEventFileAdded::full_path() const {
  return *full_path_;
}
inline void SyncEventFileAdded::set_full_path(const ::std::string& value) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void SyncEventFileAdded::set_full_path(const char* value) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void SyncEventFileAdded::set_full_path(const char* value, size_t size) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncEventFileAdded::mutable_full_path() {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  return full_path_;
}
inline ::std::string* SyncEventFileAdded::release_full_path() {
  clear_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_path_;
    full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SyncEventFileRemoved

// required fixed64 dataset_id = 1;
inline bool SyncEventFileRemoved::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncEventFileRemoved::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncEventFileRemoved::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncEventFileRemoved::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 SyncEventFileRemoved::dataset_id() const {
  return dataset_id_;
}
inline void SyncEventFileRemoved::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required string full_path = 2;
inline bool SyncEventFileRemoved::has_full_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncEventFileRemoved::set_has_full_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncEventFileRemoved::clear_has_full_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncEventFileRemoved::clear_full_path() {
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    full_path_->clear();
  }
  clear_has_full_path();
}
inline const ::std::string& SyncEventFileRemoved::full_path() const {
  return *full_path_;
}
inline void SyncEventFileRemoved::set_full_path(const ::std::string& value) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void SyncEventFileRemoved::set_full_path(const char* value) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void SyncEventFileRemoved::set_full_path(const char* value, size_t size) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncEventFileRemoved::mutable_full_path() {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  return full_path_;
}
inline ::std::string* SyncEventFileRemoved::release_full_path() {
  clear_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_path_;
    full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SyncEventError

// required .ccd.SyncEventErrorType_t error_type = 1;
inline bool SyncEventError::has_error_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncEventError::set_has_error_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncEventError::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncEventError::clear_error_type() {
  error_type_ = 1;
  clear_has_error_type();
}
inline ccd::SyncEventErrorType_t SyncEventError::error_type() const {
  return static_cast< ccd::SyncEventErrorType_t >(error_type_);
}
inline void SyncEventError::set_error_type(ccd::SyncEventErrorType_t value) {
  GOOGLE_DCHECK(ccd::SyncEventErrorType_t_IsValid(value));
  set_has_error_type();
  error_type_ = value;
}

// optional fixed64 dataset_id = 3;
inline bool SyncEventError::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncEventError::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncEventError::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncEventError::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 SyncEventError::dataset_id() const {
  return dataset_id_;
}
inline void SyncEventError::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// optional string path = 4;
inline bool SyncEventError::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncEventError::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncEventError::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncEventError::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& SyncEventError::path() const {
  return *path_;
}
inline void SyncEventError::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SyncEventError::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SyncEventError::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncEventError::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* SyncEventError::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 count = 5;
inline bool SyncEventError::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncEventError::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncEventError::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncEventError::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 SyncEventError::count() const {
  return count_;
}
inline void SyncEventError::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional string name = 6;
inline bool SyncEventError::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncEventError::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncEventError::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncEventError::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SyncEventError::name() const {
  return *name_;
}
inline void SyncEventError::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SyncEventError::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SyncEventError::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncEventError::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SyncEventError::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SyncEventFileStatus

// required string full_path = 1;
inline bool SyncEventFileStatus::has_full_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncEventFileStatus::set_has_full_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncEventFileStatus::clear_has_full_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncEventFileStatus::clear_full_path() {
  if (full_path_ != &::google::protobuf::internal::kEmptyString) {
    full_path_->clear();
  }
  clear_has_full_path();
}
inline const ::std::string& SyncEventFileStatus::full_path() const {
  return *full_path_;
}
inline void SyncEventFileStatus::set_full_path(const ::std::string& value) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void SyncEventFileStatus::set_full_path(const char* value) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(value);
}
inline void SyncEventFileStatus::set_full_path(const char* value, size_t size) {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  full_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncEventFileStatus::mutable_full_path() {
  set_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    full_path_ = new ::std::string;
  }
  return full_path_;
}
inline ::std::string* SyncEventFileStatus::release_full_path() {
  clear_has_full_path();
  if (full_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_path_;
    full_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 dataset_id = 2;
inline bool SyncEventFileStatus::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncEventFileStatus::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncEventFileStatus::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncEventFileStatus::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 SyncEventFileStatus::dataset_id() const {
  return dataset_id_;
}
inline void SyncEventFileStatus::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required .ccd.SyncFileChangeType_t change_type = 3;
inline bool SyncEventFileStatus::has_change_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncEventFileStatus::set_has_change_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncEventFileStatus::clear_has_change_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncEventFileStatus::clear_change_type() {
  change_type_ = 1;
  clear_has_change_type();
}
inline ccd::SyncFileChangeType_t SyncEventFileStatus::change_type() const {
  return static_cast< ccd::SyncFileChangeType_t >(change_type_);
}
inline void SyncEventFileStatus::set_change_type(ccd::SyncFileChangeType_t value) {
  GOOGLE_DCHECK(ccd::SyncFileChangeType_t_IsValid(value));
  set_has_change_type();
  change_type_ = value;
}

// optional bool is_starting = 4 [default = false];
inline bool SyncEventFileStatus::has_is_starting() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncEventFileStatus::set_has_is_starting() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncEventFileStatus::clear_has_is_starting() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncEventFileStatus::clear_is_starting() {
  is_starting_ = false;
  clear_has_is_starting();
}
inline bool SyncEventFileStatus::is_starting() const {
  return is_starting_;
}
inline void SyncEventFileStatus::set_is_starting(bool value) {
  set_has_is_starting();
  is_starting_ = value;
}

// optional bool is_finished = 5 [default = false];
inline bool SyncEventFileStatus::has_is_finished() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncEventFileStatus::set_has_is_finished() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncEventFileStatus::clear_has_is_finished() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncEventFileStatus::clear_is_finished() {
  is_finished_ = false;
  clear_has_is_finished();
}
inline bool SyncEventFileStatus::is_finished() const {
  return is_finished_;
}
inline void SyncEventFileStatus::set_is_finished(bool value) {
  set_has_is_finished();
  is_finished_ = value;
}

// optional .ccd.SyncEventErrorType_t error = 6;
inline bool SyncEventFileStatus::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncEventFileStatus::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncEventFileStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncEventFileStatus::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ccd::SyncEventErrorType_t SyncEventFileStatus::error() const {
  return static_cast< ccd::SyncEventErrorType_t >(error_);
}
inline void SyncEventFileStatus::set_error(ccd::SyncEventErrorType_t value) {
  GOOGLE_DCHECK(ccd::SyncEventErrorType_t_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// SyncStateNotification

// optional .ccd.SyncEventSyncComplete sync_complete = 2;
inline bool SyncStateNotification::has_sync_complete() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncStateNotification::set_has_sync_complete() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncStateNotification::clear_has_sync_complete() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncStateNotification::clear_sync_complete() {
  if (sync_complete_ != NULL) sync_complete_->::ccd::SyncEventSyncComplete::Clear();
  clear_has_sync_complete();
}
inline const ::ccd::SyncEventSyncComplete& SyncStateNotification::sync_complete() const {
  return sync_complete_ != NULL ? *sync_complete_ : *default_instance_->sync_complete_;
}
inline ::ccd::SyncEventSyncComplete* SyncStateNotification::mutable_sync_complete() {
  set_has_sync_complete();
  if (sync_complete_ == NULL) sync_complete_ = new ::ccd::SyncEventSyncComplete;
  return sync_complete_;
}
inline ::ccd::SyncEventSyncComplete* SyncStateNotification::release_sync_complete() {
  clear_has_sync_complete();
  ::ccd::SyncEventSyncComplete* temp = sync_complete_;
  sync_complete_ = NULL;
  return temp;
}

// optional .ccd.SyncEventFileAdded file_added = 3;
inline bool SyncStateNotification::has_file_added() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncStateNotification::set_has_file_added() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncStateNotification::clear_has_file_added() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncStateNotification::clear_file_added() {
  if (file_added_ != NULL) file_added_->::ccd::SyncEventFileAdded::Clear();
  clear_has_file_added();
}
inline const ::ccd::SyncEventFileAdded& SyncStateNotification::file_added() const {
  return file_added_ != NULL ? *file_added_ : *default_instance_->file_added_;
}
inline ::ccd::SyncEventFileAdded* SyncStateNotification::mutable_file_added() {
  set_has_file_added();
  if (file_added_ == NULL) file_added_ = new ::ccd::SyncEventFileAdded;
  return file_added_;
}
inline ::ccd::SyncEventFileAdded* SyncStateNotification::release_file_added() {
  clear_has_file_added();
  ::ccd::SyncEventFileAdded* temp = file_added_;
  file_added_ = NULL;
  return temp;
}

// optional .ccd.SyncEventFileRemoved file_removed = 4;
inline bool SyncStateNotification::has_file_removed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncStateNotification::set_has_file_removed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncStateNotification::clear_has_file_removed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncStateNotification::clear_file_removed() {
  if (file_removed_ != NULL) file_removed_->::ccd::SyncEventFileRemoved::Clear();
  clear_has_file_removed();
}
inline const ::ccd::SyncEventFileRemoved& SyncStateNotification::file_removed() const {
  return file_removed_ != NULL ? *file_removed_ : *default_instance_->file_removed_;
}
inline ::ccd::SyncEventFileRemoved* SyncStateNotification::mutable_file_removed() {
  set_has_file_removed();
  if (file_removed_ == NULL) file_removed_ = new ::ccd::SyncEventFileRemoved;
  return file_removed_;
}
inline ::ccd::SyncEventFileRemoved* SyncStateNotification::release_file_removed() {
  clear_has_file_removed();
  ::ccd::SyncEventFileRemoved* temp = file_removed_;
  file_removed_ = NULL;
  return temp;
}

// optional .ccd.SyncEventError error = 5;
inline bool SyncStateNotification::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncStateNotification::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncStateNotification::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncStateNotification::clear_error() {
  if (error_ != NULL) error_->::ccd::SyncEventError::Clear();
  clear_has_error();
}
inline const ::ccd::SyncEventError& SyncStateNotification::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::ccd::SyncEventError* SyncStateNotification::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::ccd::SyncEventError;
  return error_;
}
inline ::ccd::SyncEventError* SyncStateNotification::release_error() {
  clear_has_error();
  ::ccd::SyncEventError* temp = error_;
  error_ = NULL;
  return temp;
}

// optional .ccd.SyncEventFileStatus file_status = 6;
inline bool SyncStateNotification::has_file_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncStateNotification::set_has_file_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncStateNotification::clear_has_file_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncStateNotification::clear_file_status() {
  if (file_status_ != NULL) file_status_->::ccd::SyncEventFileStatus::Clear();
  clear_has_file_status();
}
inline const ::ccd::SyncEventFileStatus& SyncStateNotification::file_status() const {
  return file_status_ != NULL ? *file_status_ : *default_instance_->file_status_;
}
inline ::ccd::SyncEventFileStatus* SyncStateNotification::mutable_file_status() {
  set_has_file_status();
  if (file_status_ == NULL) file_status_ = new ::ccd::SyncEventFileStatus;
  return file_status_;
}
inline ::ccd::SyncEventFileStatus* SyncStateNotification::release_file_status() {
  clear_has_file_status();
  ::ccd::SyncEventFileStatus* temp = file_status_;
  file_status_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// GetSyncStateNotificationsOutput

// repeated .ccd.SyncStateNotification notifications = 1;
inline int GetSyncStateNotificationsOutput::notifications_size() const {
  return notifications_.size();
}
inline void GetSyncStateNotificationsOutput::clear_notifications() {
  notifications_.Clear();
}
inline const ::ccd::SyncStateNotification& GetSyncStateNotificationsOutput::notifications(int index) const {
  return notifications_.Get(index);
}
inline ::ccd::SyncStateNotification* GetSyncStateNotificationsOutput::mutable_notifications(int index) {
  return notifications_.Mutable(index);
}
inline ::ccd::SyncStateNotification* GetSyncStateNotificationsOutput::add_notifications() {
  return notifications_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::SyncStateNotification >&
GetSyncStateNotificationsOutput::notifications() const {
  return notifications_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::SyncStateNotification >*
GetSyncStateNotificationsOutput::mutable_notifications() {
  return &notifications_;
}

// -------------------------------------------------------------------

// LinkDeviceInput

// required fixed64 user_id = 1;
inline bool LinkDeviceInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkDeviceInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkDeviceInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkDeviceInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 LinkDeviceInput::user_id() const {
  return user_id_;
}
inline void LinkDeviceInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string device_name = 2;
inline bool LinkDeviceInput::has_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkDeviceInput::set_has_device_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinkDeviceInput::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinkDeviceInput::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& LinkDeviceInput::device_name() const {
  return *device_name_;
}
inline void LinkDeviceInput::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void LinkDeviceInput::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void LinkDeviceInput::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkDeviceInput::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* LinkDeviceInput::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_acer_device = 3 [default = false];
inline bool LinkDeviceInput::has_is_acer_device() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinkDeviceInput::set_has_is_acer_device() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinkDeviceInput::clear_has_is_acer_device() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinkDeviceInput::clear_is_acer_device() {
  is_acer_device_ = false;
  clear_has_is_acer_device();
}
inline bool LinkDeviceInput::is_acer_device() const {
  return is_acer_device_;
}
inline void LinkDeviceInput::set_is_acer_device(bool value) {
  set_has_is_acer_device();
  is_acer_device_ = value;
}

// optional bool device_has_camera = 4 [default = false];
inline bool LinkDeviceInput::has_device_has_camera() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LinkDeviceInput::set_has_device_has_camera() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LinkDeviceInput::clear_has_device_has_camera() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LinkDeviceInput::clear_device_has_camera() {
  device_has_camera_ = false;
  clear_has_device_has_camera();
}
inline bool LinkDeviceInput::device_has_camera() const {
  return device_has_camera_;
}
inline void LinkDeviceInput::set_device_has_camera(bool value) {
  set_has_device_has_camera();
  device_has_camera_ = value;
}

// optional string device_class = 5;
inline bool LinkDeviceInput::has_device_class() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LinkDeviceInput::set_has_device_class() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LinkDeviceInput::clear_has_device_class() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LinkDeviceInput::clear_device_class() {
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    device_class_->clear();
  }
  clear_has_device_class();
}
inline const ::std::string& LinkDeviceInput::device_class() const {
  return *device_class_;
}
inline void LinkDeviceInput::set_device_class(const ::std::string& value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void LinkDeviceInput::set_device_class(const char* value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void LinkDeviceInput::set_device_class(const char* value, size_t size) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkDeviceInput::mutable_device_class() {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  return device_class_;
}
inline ::std::string* LinkDeviceInput::release_device_class() {
  clear_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_class_;
    device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string os_version = 6;
inline bool LinkDeviceInput::has_os_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LinkDeviceInput::set_has_os_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LinkDeviceInput::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LinkDeviceInput::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& LinkDeviceInput::os_version() const {
  return *os_version_;
}
inline void LinkDeviceInput::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void LinkDeviceInput::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void LinkDeviceInput::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkDeviceInput::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* LinkDeviceInput::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListLinkedDevicesInput

// required fixed64 user_id = 1;
inline bool ListLinkedDevicesInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListLinkedDevicesInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListLinkedDevicesInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListLinkedDevicesInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ListLinkedDevicesInput::user_id() const {
  return user_id_;
}
inline void ListLinkedDevicesInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool only_use_cache = 2 [default = false];
inline bool ListLinkedDevicesInput::has_only_use_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListLinkedDevicesInput::set_has_only_use_cache() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListLinkedDevicesInput::clear_has_only_use_cache() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListLinkedDevicesInput::clear_only_use_cache() {
  only_use_cache_ = false;
  clear_has_only_use_cache();
}
inline bool ListLinkedDevicesInput::only_use_cache() const {
  return only_use_cache_;
}
inline void ListLinkedDevicesInput::set_only_use_cache(bool value) {
  set_has_only_use_cache();
  only_use_cache_ = value;
}

// optional bool storage_nodes_only = 3 [default = false];
inline bool ListLinkedDevicesInput::has_storage_nodes_only() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListLinkedDevicesInput::set_has_storage_nodes_only() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListLinkedDevicesInput::clear_has_storage_nodes_only() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListLinkedDevicesInput::clear_storage_nodes_only() {
  storage_nodes_only_ = false;
  clear_has_storage_nodes_only();
}
inline bool ListLinkedDevicesInput::storage_nodes_only() const {
  return storage_nodes_only_;
}
inline void ListLinkedDevicesInput::set_storage_nodes_only(bool value) {
  set_has_storage_nodes_only();
  storage_nodes_only_ = value;
}

// -------------------------------------------------------------------

// LinkedDeviceInfo

// required fixed64 device_id = 1;
inline bool LinkedDeviceInfo::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LinkedDeviceInfo::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LinkedDeviceInfo::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LinkedDeviceInfo::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 LinkedDeviceInfo::device_id() const {
  return device_id_;
}
inline void LinkedDeviceInfo::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required string device_name = 2;
inline bool LinkedDeviceInfo::has_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LinkedDeviceInfo::set_has_device_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LinkedDeviceInfo::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LinkedDeviceInfo::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& LinkedDeviceInfo::device_name() const {
  return *device_name_;
}
inline void LinkedDeviceInfo::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void LinkedDeviceInfo::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void LinkedDeviceInfo::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkedDeviceInfo::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* LinkedDeviceInfo::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_storage_node = 3;
inline bool LinkedDeviceInfo::has_is_storage_node() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LinkedDeviceInfo::set_has_is_storage_node() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LinkedDeviceInfo::clear_has_is_storage_node() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LinkedDeviceInfo::clear_is_storage_node() {
  is_storage_node_ = false;
  clear_has_is_storage_node();
}
inline bool LinkedDeviceInfo::is_storage_node() const {
  return is_storage_node_;
}
inline void LinkedDeviceInfo::set_is_storage_node(bool value) {
  set_has_is_storage_node();
  is_storage_node_ = value;
}

// required .ccd.DeviceConnectionStatus connection_status = 4;
inline bool LinkedDeviceInfo::has_connection_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LinkedDeviceInfo::set_has_connection_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LinkedDeviceInfo::clear_has_connection_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LinkedDeviceInfo::clear_connection_status() {
  if (connection_status_ != NULL) connection_status_->::ccd::DeviceConnectionStatus::Clear();
  clear_has_connection_status();
}
inline const ::ccd::DeviceConnectionStatus& LinkedDeviceInfo::connection_status() const {
  return connection_status_ != NULL ? *connection_status_ : *default_instance_->connection_status_;
}
inline ::ccd::DeviceConnectionStatus* LinkedDeviceInfo::mutable_connection_status() {
  set_has_connection_status();
  if (connection_status_ == NULL) connection_status_ = new ::ccd::DeviceConnectionStatus;
  return connection_status_;
}
inline ::ccd::DeviceConnectionStatus* LinkedDeviceInfo::release_connection_status() {
  clear_has_connection_status();
  ::ccd::DeviceConnectionStatus* temp = connection_status_;
  connection_status_ = NULL;
  return temp;
}

// required string device_class = 5;
inline bool LinkedDeviceInfo::has_device_class() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LinkedDeviceInfo::set_has_device_class() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LinkedDeviceInfo::clear_has_device_class() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LinkedDeviceInfo::clear_device_class() {
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    device_class_->clear();
  }
  clear_has_device_class();
}
inline const ::std::string& LinkedDeviceInfo::device_class() const {
  return *device_class_;
}
inline void LinkedDeviceInfo::set_device_class(const ::std::string& value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void LinkedDeviceInfo::set_device_class(const char* value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void LinkedDeviceInfo::set_device_class(const char* value, size_t size) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkedDeviceInfo::mutable_device_class() {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  return device_class_;
}
inline ::std::string* LinkedDeviceInfo::release_device_class() {
  clear_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_class_;
    device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_acer = 6;
inline bool LinkedDeviceInfo::has_is_acer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LinkedDeviceInfo::set_has_is_acer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LinkedDeviceInfo::clear_has_is_acer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LinkedDeviceInfo::clear_is_acer() {
  is_acer_ = false;
  clear_has_is_acer();
}
inline bool LinkedDeviceInfo::is_acer() const {
  return is_acer_;
}
inline void LinkedDeviceInfo::set_is_acer(bool value) {
  set_has_is_acer();
  is_acer_ = value;
}

// required bool has_camera = 7;
inline bool LinkedDeviceInfo::has_has_camera() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LinkedDeviceInfo::set_has_has_camera() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LinkedDeviceInfo::clear_has_has_camera() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LinkedDeviceInfo::clear_has_camera() {
  has_camera_ = false;
  clear_has_has_camera();
}
inline bool LinkedDeviceInfo::has_camera() const {
  return has_camera_;
}
inline void LinkedDeviceInfo::set_has_camera(bool value) {
  set_has_has_camera();
  has_camera_ = value;
}

// optional string os_version = 8;
inline bool LinkedDeviceInfo::has_os_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LinkedDeviceInfo::set_has_os_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LinkedDeviceInfo::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LinkedDeviceInfo::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& LinkedDeviceInfo::os_version() const {
  return *os_version_;
}
inline void LinkedDeviceInfo::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void LinkedDeviceInfo::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void LinkedDeviceInfo::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkedDeviceInfo::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* LinkedDeviceInfo::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool feature_media_server_capable = 9;
inline bool LinkedDeviceInfo::has_feature_media_server_capable() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LinkedDeviceInfo::set_has_feature_media_server_capable() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LinkedDeviceInfo::clear_has_feature_media_server_capable() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LinkedDeviceInfo::clear_feature_media_server_capable() {
  feature_media_server_capable_ = false;
  clear_has_feature_media_server_capable();
}
inline bool LinkedDeviceInfo::feature_media_server_capable() const {
  return feature_media_server_capable_;
}
inline void LinkedDeviceInfo::set_feature_media_server_capable(bool value) {
  set_has_feature_media_server_capable();
  feature_media_server_capable_ = value;
}

// optional bool feature_virt_drive_capable = 10;
inline bool LinkedDeviceInfo::has_feature_virt_drive_capable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LinkedDeviceInfo::set_has_feature_virt_drive_capable() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LinkedDeviceInfo::clear_has_feature_virt_drive_capable() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LinkedDeviceInfo::clear_feature_virt_drive_capable() {
  feature_virt_drive_capable_ = false;
  clear_has_feature_virt_drive_capable();
}
inline bool LinkedDeviceInfo::feature_virt_drive_capable() const {
  return feature_virt_drive_capable_;
}
inline void LinkedDeviceInfo::set_feature_virt_drive_capable(bool value) {
  set_has_feature_virt_drive_capable();
  feature_virt_drive_capable_ = value;
}

// optional string protocol_version = 11;
inline bool LinkedDeviceInfo::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LinkedDeviceInfo::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LinkedDeviceInfo::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LinkedDeviceInfo::clear_protocol_version() {
  if (protocol_version_ != &::google::protobuf::internal::kEmptyString) {
    protocol_version_->clear();
  }
  clear_has_protocol_version();
}
inline const ::std::string& LinkedDeviceInfo::protocol_version() const {
  return *protocol_version_;
}
inline void LinkedDeviceInfo::set_protocol_version(const ::std::string& value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
}
inline void LinkedDeviceInfo::set_protocol_version(const char* value) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(value);
}
inline void LinkedDeviceInfo::set_protocol_version(const char* value, size_t size) {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  protocol_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkedDeviceInfo::mutable_protocol_version() {
  set_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    protocol_version_ = new ::std::string;
  }
  return protocol_version_;
}
inline ::std::string* LinkedDeviceInfo::release_protocol_version() {
  clear_has_protocol_version();
  if (protocol_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = protocol_version_;
    protocol_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool feature_remote_file_access_capable = 12;
inline bool LinkedDeviceInfo::has_feature_remote_file_access_capable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LinkedDeviceInfo::set_has_feature_remote_file_access_capable() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LinkedDeviceInfo::clear_has_feature_remote_file_access_capable() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LinkedDeviceInfo::clear_feature_remote_file_access_capable() {
  feature_remote_file_access_capable_ = false;
  clear_has_feature_remote_file_access_capable();
}
inline bool LinkedDeviceInfo::feature_remote_file_access_capable() const {
  return feature_remote_file_access_capable_;
}
inline void LinkedDeviceInfo::set_feature_remote_file_access_capable(bool value) {
  set_has_feature_remote_file_access_capable();
  feature_remote_file_access_capable_ = value;
}

// optional bool feature_fsdatasettype_capable = 13;
inline bool LinkedDeviceInfo::has_feature_fsdatasettype_capable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LinkedDeviceInfo::set_has_feature_fsdatasettype_capable() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LinkedDeviceInfo::clear_has_feature_fsdatasettype_capable() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LinkedDeviceInfo::clear_feature_fsdatasettype_capable() {
  feature_fsdatasettype_capable_ = false;
  clear_has_feature_fsdatasettype_capable();
}
inline bool LinkedDeviceInfo::feature_fsdatasettype_capable() const {
  return feature_fsdatasettype_capable_;
}
inline void LinkedDeviceInfo::set_feature_fsdatasettype_capable(bool value) {
  set_has_feature_fsdatasettype_capable();
  feature_fsdatasettype_capable_ = value;
}

// optional string build_info = 14;
inline bool LinkedDeviceInfo::has_build_info() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LinkedDeviceInfo::set_has_build_info() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LinkedDeviceInfo::clear_has_build_info() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LinkedDeviceInfo::clear_build_info() {
  if (build_info_ != &::google::protobuf::internal::kEmptyString) {
    build_info_->clear();
  }
  clear_has_build_info();
}
inline const ::std::string& LinkedDeviceInfo::build_info() const {
  return *build_info_;
}
inline void LinkedDeviceInfo::set_build_info(const ::std::string& value) {
  set_has_build_info();
  if (build_info_ == &::google::protobuf::internal::kEmptyString) {
    build_info_ = new ::std::string;
  }
  build_info_->assign(value);
}
inline void LinkedDeviceInfo::set_build_info(const char* value) {
  set_has_build_info();
  if (build_info_ == &::google::protobuf::internal::kEmptyString) {
    build_info_ = new ::std::string;
  }
  build_info_->assign(value);
}
inline void LinkedDeviceInfo::set_build_info(const char* value, size_t size) {
  set_has_build_info();
  if (build_info_ == &::google::protobuf::internal::kEmptyString) {
    build_info_ = new ::std::string;
  }
  build_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkedDeviceInfo::mutable_build_info() {
  set_has_build_info();
  if (build_info_ == &::google::protobuf::internal::kEmptyString) {
    build_info_ = new ::std::string;
  }
  return build_info_;
}
inline ::std::string* LinkedDeviceInfo::release_build_info() {
  clear_has_build_info();
  if (build_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = build_info_;
    build_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string model_number = 15;
inline bool LinkedDeviceInfo::has_model_number() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LinkedDeviceInfo::set_has_model_number() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LinkedDeviceInfo::clear_has_model_number() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LinkedDeviceInfo::clear_model_number() {
  if (model_number_ != &::google::protobuf::internal::kEmptyString) {
    model_number_->clear();
  }
  clear_has_model_number();
}
inline const ::std::string& LinkedDeviceInfo::model_number() const {
  return *model_number_;
}
inline void LinkedDeviceInfo::set_model_number(const ::std::string& value) {
  set_has_model_number();
  if (model_number_ == &::google::protobuf::internal::kEmptyString) {
    model_number_ = new ::std::string;
  }
  model_number_->assign(value);
}
inline void LinkedDeviceInfo::set_model_number(const char* value) {
  set_has_model_number();
  if (model_number_ == &::google::protobuf::internal::kEmptyString) {
    model_number_ = new ::std::string;
  }
  model_number_->assign(value);
}
inline void LinkedDeviceInfo::set_model_number(const char* value, size_t size) {
  set_has_model_number();
  if (model_number_ == &::google::protobuf::internal::kEmptyString) {
    model_number_ = new ::std::string;
  }
  model_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkedDeviceInfo::mutable_model_number() {
  set_has_model_number();
  if (model_number_ == &::google::protobuf::internal::kEmptyString) {
    model_number_ = new ::std::string;
  }
  return model_number_;
}
inline ::std::string* LinkedDeviceInfo::release_model_number() {
  clear_has_model_number();
  if (model_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_number_;
    model_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool feature_my_storage_server_capable = 16;
inline bool LinkedDeviceInfo::has_feature_my_storage_server_capable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LinkedDeviceInfo::set_has_feature_my_storage_server_capable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LinkedDeviceInfo::clear_has_feature_my_storage_server_capable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LinkedDeviceInfo::clear_feature_my_storage_server_capable() {
  feature_my_storage_server_capable_ = false;
  clear_has_feature_my_storage_server_capable();
}
inline bool LinkedDeviceInfo::feature_my_storage_server_capable() const {
  return feature_my_storage_server_capable_;
}
inline void LinkedDeviceInfo::set_feature_my_storage_server_capable(bool value) {
  set_has_feature_my_storage_server_capable();
  feature_my_storage_server_capable_ = value;
}

// -------------------------------------------------------------------

// ListLinkedDevicesOutput

// repeated .vplex.vsDirectory.DeviceInfo linked_devices = 1;
inline int ListLinkedDevicesOutput::linked_devices_size() const {
  return linked_devices_.size();
}
inline void ListLinkedDevicesOutput::clear_linked_devices() {
  linked_devices_.Clear();
}
inline const ::vplex::vsDirectory::DeviceInfo& ListLinkedDevicesOutput::linked_devices(int index) const {
  return linked_devices_.Get(index);
}
inline ::vplex::vsDirectory::DeviceInfo* ListLinkedDevicesOutput::mutable_linked_devices(int index) {
  return linked_devices_.Mutable(index);
}
inline ::vplex::vsDirectory::DeviceInfo* ListLinkedDevicesOutput::add_linked_devices() {
  return linked_devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DeviceInfo >&
ListLinkedDevicesOutput::linked_devices() const {
  return linked_devices_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DeviceInfo >*
ListLinkedDevicesOutput::mutable_linked_devices() {
  return &linked_devices_;
}

// repeated .ccd.LinkedDeviceInfo devices = 2;
inline int ListLinkedDevicesOutput::devices_size() const {
  return devices_.size();
}
inline void ListLinkedDevicesOutput::clear_devices() {
  devices_.Clear();
}
inline const ::ccd::LinkedDeviceInfo& ListLinkedDevicesOutput::devices(int index) const {
  return devices_.Get(index);
}
inline ::ccd::LinkedDeviceInfo* ListLinkedDevicesOutput::mutable_devices(int index) {
  return devices_.Mutable(index);
}
inline ::ccd::LinkedDeviceInfo* ListLinkedDevicesOutput::add_devices() {
  return devices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::LinkedDeviceInfo >&
ListLinkedDevicesOutput::devices() const {
  return devices_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::LinkedDeviceInfo >*
ListLinkedDevicesOutput::mutable_devices() {
  return &devices_;
}

// -------------------------------------------------------------------

// ListOwnedDatasetsInput

// required fixed64 user_id = 1;
inline bool ListOwnedDatasetsInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListOwnedDatasetsInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListOwnedDatasetsInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListOwnedDatasetsInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ListOwnedDatasetsInput::user_id() const {
  return user_id_;
}
inline void ListOwnedDatasetsInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool show_all_device_classes = 2 [default = false];
inline bool ListOwnedDatasetsInput::has_show_all_device_classes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListOwnedDatasetsInput::set_has_show_all_device_classes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListOwnedDatasetsInput::clear_has_show_all_device_classes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListOwnedDatasetsInput::clear_show_all_device_classes() {
  show_all_device_classes_ = false;
  clear_has_show_all_device_classes();
}
inline bool ListOwnedDatasetsInput::show_all_device_classes() const {
  return show_all_device_classes_;
}
inline void ListOwnedDatasetsInput::set_show_all_device_classes(bool value) {
  set_has_show_all_device_classes();
  show_all_device_classes_ = value;
}

// optional bool only_use_cache = 3 [default = false];
inline bool ListOwnedDatasetsInput::has_only_use_cache() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListOwnedDatasetsInput::set_has_only_use_cache() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListOwnedDatasetsInput::clear_has_only_use_cache() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListOwnedDatasetsInput::clear_only_use_cache() {
  only_use_cache_ = false;
  clear_has_only_use_cache();
}
inline bool ListOwnedDatasetsInput::only_use_cache() const {
  return only_use_cache_;
}
inline void ListOwnedDatasetsInput::set_only_use_cache(bool value) {
  set_has_only_use_cache();
  only_use_cache_ = value;
}

// -------------------------------------------------------------------

// ListOwnedDatasetsOutput

// repeated .vplex.vsDirectory.DatasetDetail dataset_details = 1;
inline int ListOwnedDatasetsOutput::dataset_details_size() const {
  return dataset_details_.size();
}
inline void ListOwnedDatasetsOutput::clear_dataset_details() {
  dataset_details_.Clear();
}
inline const ::vplex::vsDirectory::DatasetDetail& ListOwnedDatasetsOutput::dataset_details(int index) const {
  return dataset_details_.Get(index);
}
inline ::vplex::vsDirectory::DatasetDetail* ListOwnedDatasetsOutput::mutable_dataset_details(int index) {
  return dataset_details_.Mutable(index);
}
inline ::vplex::vsDirectory::DatasetDetail* ListOwnedDatasetsOutput::add_dataset_details() {
  return dataset_details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DatasetDetail >&
ListOwnedDatasetsOutput::dataset_details() const {
  return dataset_details_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::DatasetDetail >*
ListOwnedDatasetsOutput::mutable_dataset_details() {
  return &dataset_details_;
}

// repeated bool created_by_this_device = 2;
inline int ListOwnedDatasetsOutput::created_by_this_device_size() const {
  return created_by_this_device_.size();
}
inline void ListOwnedDatasetsOutput::clear_created_by_this_device() {
  created_by_this_device_.Clear();
}
inline bool ListOwnedDatasetsOutput::created_by_this_device(int index) const {
  return created_by_this_device_.Get(index);
}
inline void ListOwnedDatasetsOutput::set_created_by_this_device(int index, bool value) {
  created_by_this_device_.Set(index, value);
}
inline void ListOwnedDatasetsOutput::add_created_by_this_device(bool value) {
  created_by_this_device_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ListOwnedDatasetsOutput::created_by_this_device() const {
  return created_by_this_device_;
}
inline ::google::protobuf::RepeatedField< bool >*
ListOwnedDatasetsOutput::mutable_created_by_this_device() {
  return &created_by_this_device_;
}

// -------------------------------------------------------------------

// ListUserStorageInput

// required fixed64 user_id = 1;
inline bool ListUserStorageInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListUserStorageInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListUserStorageInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListUserStorageInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ListUserStorageInput::user_id() const {
  return user_id_;
}
inline void ListUserStorageInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool only_use_cache = 2 [default = false];
inline bool ListUserStorageInput::has_only_use_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListUserStorageInput::set_has_only_use_cache() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListUserStorageInput::clear_has_only_use_cache() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListUserStorageInput::clear_only_use_cache() {
  only_use_cache_ = false;
  clear_has_only_use_cache();
}
inline bool ListUserStorageInput::only_use_cache() const {
  return only_use_cache_;
}
inline void ListUserStorageInput::set_only_use_cache(bool value) {
  set_has_only_use_cache();
  only_use_cache_ = value;
}

// -------------------------------------------------------------------

// ListUserStorageOutput

// repeated .vplex.vsDirectory.UserStorage user_storage = 1;
inline int ListUserStorageOutput::user_storage_size() const {
  return user_storage_.size();
}
inline void ListUserStorageOutput::clear_user_storage() {
  user_storage_.Clear();
}
inline const ::vplex::vsDirectory::UserStorage& ListUserStorageOutput::user_storage(int index) const {
  return user_storage_.Get(index);
}
inline ::vplex::vsDirectory::UserStorage* ListUserStorageOutput::mutable_user_storage(int index) {
  return user_storage_.Mutable(index);
}
inline ::vplex::vsDirectory::UserStorage* ListUserStorageOutput::add_user_storage() {
  return user_storage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::UserStorage >&
ListUserStorageOutput::user_storage() const {
  return user_storage_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::UserStorage >*
ListUserStorageOutput::mutable_user_storage() {
  return &user_storage_;
}

// -------------------------------------------------------------------

// ListSyncSubscriptionsInput

// optional fixed64 user_id = 1;
inline bool ListSyncSubscriptionsInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListSyncSubscriptionsInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListSyncSubscriptionsInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListSyncSubscriptionsInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ListSyncSubscriptionsInput::user_id() const {
  return user_id_;
}
inline void ListSyncSubscriptionsInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional fixed64 device_id = 2;
inline bool ListSyncSubscriptionsInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListSyncSubscriptionsInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListSyncSubscriptionsInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListSyncSubscriptionsInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 ListSyncSubscriptionsInput::device_id() const {
  return device_id_;
}
inline void ListSyncSubscriptionsInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional bool only_use_cache = 3 [default = false];
inline bool ListSyncSubscriptionsInput::has_only_use_cache() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListSyncSubscriptionsInput::set_has_only_use_cache() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListSyncSubscriptionsInput::clear_has_only_use_cache() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListSyncSubscriptionsInput::clear_only_use_cache() {
  only_use_cache_ = false;
  clear_has_only_use_cache();
}
inline bool ListSyncSubscriptionsInput::only_use_cache() const {
  return only_use_cache_;
}
inline void ListSyncSubscriptionsInput::set_only_use_cache(bool value) {
  set_has_only_use_cache();
  only_use_cache_ = value;
}

// -------------------------------------------------------------------

// SyncSubscriptionDetail

// required .vplex.vsDirectory.DatasetDetail dataset_details = 1;
inline bool SyncSubscriptionDetail::has_dataset_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncSubscriptionDetail::set_has_dataset_details() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncSubscriptionDetail::clear_has_dataset_details() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncSubscriptionDetail::clear_dataset_details() {
  if (dataset_details_ != NULL) dataset_details_->::vplex::vsDirectory::DatasetDetail::Clear();
  clear_has_dataset_details();
}
inline const ::vplex::vsDirectory::DatasetDetail& SyncSubscriptionDetail::dataset_details() const {
  return dataset_details_ != NULL ? *dataset_details_ : *default_instance_->dataset_details_;
}
inline ::vplex::vsDirectory::DatasetDetail* SyncSubscriptionDetail::mutable_dataset_details() {
  set_has_dataset_details();
  if (dataset_details_ == NULL) dataset_details_ = new ::vplex::vsDirectory::DatasetDetail;
  return dataset_details_;
}
inline ::vplex::vsDirectory::DatasetDetail* SyncSubscriptionDetail::release_dataset_details() {
  clear_has_dataset_details();
  ::vplex::vsDirectory::DatasetDetail* temp = dataset_details_;
  dataset_details_ = NULL;
  return temp;
}

// optional string absolute_device_root = 2;
inline bool SyncSubscriptionDetail::has_absolute_device_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncSubscriptionDetail::set_has_absolute_device_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncSubscriptionDetail::clear_has_absolute_device_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncSubscriptionDetail::clear_absolute_device_root() {
  if (absolute_device_root_ != &::google::protobuf::internal::kEmptyString) {
    absolute_device_root_->clear();
  }
  clear_has_absolute_device_root();
}
inline const ::std::string& SyncSubscriptionDetail::absolute_device_root() const {
  return *absolute_device_root_;
}
inline void SyncSubscriptionDetail::set_absolute_device_root(const ::std::string& value) {
  set_has_absolute_device_root();
  if (absolute_device_root_ == &::google::protobuf::internal::kEmptyString) {
    absolute_device_root_ = new ::std::string;
  }
  absolute_device_root_->assign(value);
}
inline void SyncSubscriptionDetail::set_absolute_device_root(const char* value) {
  set_has_absolute_device_root();
  if (absolute_device_root_ == &::google::protobuf::internal::kEmptyString) {
    absolute_device_root_ = new ::std::string;
  }
  absolute_device_root_->assign(value);
}
inline void SyncSubscriptionDetail::set_absolute_device_root(const char* value, size_t size) {
  set_has_absolute_device_root();
  if (absolute_device_root_ == &::google::protobuf::internal::kEmptyString) {
    absolute_device_root_ = new ::std::string;
  }
  absolute_device_root_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncSubscriptionDetail::mutable_absolute_device_root() {
  set_has_absolute_device_root();
  if (absolute_device_root_ == &::google::protobuf::internal::kEmptyString) {
    absolute_device_root_ = new ::std::string;
  }
  return absolute_device_root_;
}
inline ::std::string* SyncSubscriptionDetail::release_absolute_device_root() {
  clear_has_absolute_device_root();
  if (absolute_device_root_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_device_root_;
    absolute_device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string raw_device_root = 3;
inline bool SyncSubscriptionDetail::has_raw_device_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncSubscriptionDetail::set_has_raw_device_root() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncSubscriptionDetail::clear_has_raw_device_root() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncSubscriptionDetail::clear_raw_device_root() {
  if (raw_device_root_ != &::google::protobuf::internal::kEmptyString) {
    raw_device_root_->clear();
  }
  clear_has_raw_device_root();
}
inline const ::std::string& SyncSubscriptionDetail::raw_device_root() const {
  return *raw_device_root_;
}
inline void SyncSubscriptionDetail::set_raw_device_root(const ::std::string& value) {
  set_has_raw_device_root();
  if (raw_device_root_ == &::google::protobuf::internal::kEmptyString) {
    raw_device_root_ = new ::std::string;
  }
  raw_device_root_->assign(value);
}
inline void SyncSubscriptionDetail::set_raw_device_root(const char* value) {
  set_has_raw_device_root();
  if (raw_device_root_ == &::google::protobuf::internal::kEmptyString) {
    raw_device_root_ = new ::std::string;
  }
  raw_device_root_->assign(value);
}
inline void SyncSubscriptionDetail::set_raw_device_root(const char* value, size_t size) {
  set_has_raw_device_root();
  if (raw_device_root_ == &::google::protobuf::internal::kEmptyString) {
    raw_device_root_ = new ::std::string;
  }
  raw_device_root_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncSubscriptionDetail::mutable_raw_device_root() {
  set_has_raw_device_root();
  if (raw_device_root_ == &::google::protobuf::internal::kEmptyString) {
    raw_device_root_ = new ::std::string;
  }
  return raw_device_root_;
}
inline ::std::string* SyncSubscriptionDetail::release_raw_device_root() {
  clear_has_raw_device_root();
  if (raw_device_root_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_device_root_;
    raw_device_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string filter = 4;
inline bool SyncSubscriptionDetail::has_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncSubscriptionDetail::set_has_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncSubscriptionDetail::clear_has_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncSubscriptionDetail::clear_filter() {
  if (filter_ != &::google::protobuf::internal::kEmptyString) {
    filter_->clear();
  }
  clear_has_filter();
}
inline const ::std::string& SyncSubscriptionDetail::filter() const {
  return *filter_;
}
inline void SyncSubscriptionDetail::set_filter(const ::std::string& value) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
}
inline void SyncSubscriptionDetail::set_filter(const char* value) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  filter_->assign(value);
}
inline void SyncSubscriptionDetail::set_filter(const char* value, size_t size) {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncSubscriptionDetail::mutable_filter() {
  set_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    filter_ = new ::std::string;
  }
  return filter_;
}
inline ::std::string* SyncSubscriptionDetail::release_filter() {
  clear_has_filter();
  if (filter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filter_;
    filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool upload_ok = 5;
inline bool SyncSubscriptionDetail::has_upload_ok() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SyncSubscriptionDetail::set_has_upload_ok() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SyncSubscriptionDetail::clear_has_upload_ok() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SyncSubscriptionDetail::clear_upload_ok() {
  upload_ok_ = false;
  clear_has_upload_ok();
}
inline bool SyncSubscriptionDetail::upload_ok() const {
  return upload_ok_;
}
inline void SyncSubscriptionDetail::set_upload_ok(bool value) {
  set_has_upload_ok();
  upload_ok_ = value;
}

// required bool download_ok = 6;
inline bool SyncSubscriptionDetail::has_download_ok() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SyncSubscriptionDetail::set_has_download_ok() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SyncSubscriptionDetail::clear_has_download_ok() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SyncSubscriptionDetail::clear_download_ok() {
  download_ok_ = false;
  clear_has_download_ok();
}
inline bool SyncSubscriptionDetail::download_ok() const {
  return download_ok_;
}
inline void SyncSubscriptionDetail::set_download_ok(bool value) {
  set_has_download_ok();
  download_ok_ = value;
}

// required bool upload_delete_ok = 7;
inline bool SyncSubscriptionDetail::has_upload_delete_ok() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SyncSubscriptionDetail::set_has_upload_delete_ok() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SyncSubscriptionDetail::clear_has_upload_delete_ok() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SyncSubscriptionDetail::clear_upload_delete_ok() {
  upload_delete_ok_ = false;
  clear_has_upload_delete_ok();
}
inline bool SyncSubscriptionDetail::upload_delete_ok() const {
  return upload_delete_ok_;
}
inline void SyncSubscriptionDetail::set_upload_delete_ok(bool value) {
  set_has_upload_delete_ok();
  upload_delete_ok_ = value;
}

// required bool download_delete_ok = 8;
inline bool SyncSubscriptionDetail::has_download_delete_ok() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SyncSubscriptionDetail::set_has_download_delete_ok() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SyncSubscriptionDetail::clear_has_download_delete_ok() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SyncSubscriptionDetail::clear_download_delete_ok() {
  download_delete_ok_ = false;
  clear_has_download_delete_ok();
}
inline bool SyncSubscriptionDetail::download_delete_ok() const {
  return download_delete_ok_;
}
inline void SyncSubscriptionDetail::set_download_delete_ok(bool value) {
  set_has_download_delete_ok();
  download_delete_ok_ = value;
}

// required string dataset_root = 9;
inline bool SyncSubscriptionDetail::has_dataset_root() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SyncSubscriptionDetail::set_has_dataset_root() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SyncSubscriptionDetail::clear_has_dataset_root() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SyncSubscriptionDetail::clear_dataset_root() {
  if (dataset_root_ != &::google::protobuf::internal::kEmptyString) {
    dataset_root_->clear();
  }
  clear_has_dataset_root();
}
inline const ::std::string& SyncSubscriptionDetail::dataset_root() const {
  return *dataset_root_;
}
inline void SyncSubscriptionDetail::set_dataset_root(const ::std::string& value) {
  set_has_dataset_root();
  if (dataset_root_ == &::google::protobuf::internal::kEmptyString) {
    dataset_root_ = new ::std::string;
  }
  dataset_root_->assign(value);
}
inline void SyncSubscriptionDetail::set_dataset_root(const char* value) {
  set_has_dataset_root();
  if (dataset_root_ == &::google::protobuf::internal::kEmptyString) {
    dataset_root_ = new ::std::string;
  }
  dataset_root_->assign(value);
}
inline void SyncSubscriptionDetail::set_dataset_root(const char* value, size_t size) {
  set_has_dataset_root();
  if (dataset_root_ == &::google::protobuf::internal::kEmptyString) {
    dataset_root_ = new ::std::string;
  }
  dataset_root_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncSubscriptionDetail::mutable_dataset_root() {
  set_has_dataset_root();
  if (dataset_root_ == &::google::protobuf::internal::kEmptyString) {
    dataset_root_ = new ::std::string;
  }
  return dataset_root_;
}
inline ::std::string* SyncSubscriptionDetail::release_dataset_root() {
  clear_has_dataset_root();
  if (dataset_root_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_root_;
    dataset_root_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string dataset_location = 10;
inline bool SyncSubscriptionDetail::has_dataset_location() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SyncSubscriptionDetail::set_has_dataset_location() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SyncSubscriptionDetail::clear_has_dataset_location() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SyncSubscriptionDetail::clear_dataset_location() {
  if (dataset_location_ != &::google::protobuf::internal::kEmptyString) {
    dataset_location_->clear();
  }
  clear_has_dataset_location();
}
inline const ::std::string& SyncSubscriptionDetail::dataset_location() const {
  return *dataset_location_;
}
inline void SyncSubscriptionDetail::set_dataset_location(const ::std::string& value) {
  set_has_dataset_location();
  if (dataset_location_ == &::google::protobuf::internal::kEmptyString) {
    dataset_location_ = new ::std::string;
  }
  dataset_location_->assign(value);
}
inline void SyncSubscriptionDetail::set_dataset_location(const char* value) {
  set_has_dataset_location();
  if (dataset_location_ == &::google::protobuf::internal::kEmptyString) {
    dataset_location_ = new ::std::string;
  }
  dataset_location_->assign(value);
}
inline void SyncSubscriptionDetail::set_dataset_location(const char* value, size_t size) {
  set_has_dataset_location();
  if (dataset_location_ == &::google::protobuf::internal::kEmptyString) {
    dataset_location_ = new ::std::string;
  }
  dataset_location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncSubscriptionDetail::mutable_dataset_location() {
  set_has_dataset_location();
  if (dataset_location_ == &::google::protobuf::internal::kEmptyString) {
    dataset_location_ = new ::std::string;
  }
  return dataset_location_;
}
inline ::std::string* SyncSubscriptionDetail::release_dataset_location() {
  clear_has_dataset_location();
  if (dataset_location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_location_;
    dataset_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 max_size = 11;
inline bool SyncSubscriptionDetail::has_max_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SyncSubscriptionDetail::set_has_max_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SyncSubscriptionDetail::clear_has_max_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SyncSubscriptionDetail::clear_max_size() {
  max_size_ = GOOGLE_ULONGLONG(0);
  clear_has_max_size();
}
inline ::google::protobuf::uint64 SyncSubscriptionDetail::max_size() const {
  return max_size_;
}
inline void SyncSubscriptionDetail::set_max_size(::google::protobuf::uint64 value) {
  set_has_max_size();
  max_size_ = value;
}

// optional fixed64 max_files = 12;
inline bool SyncSubscriptionDetail::has_max_files() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SyncSubscriptionDetail::set_has_max_files() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SyncSubscriptionDetail::clear_has_max_files() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SyncSubscriptionDetail::clear_max_files() {
  max_files_ = GOOGLE_ULONGLONG(0);
  clear_has_max_files();
}
inline ::google::protobuf::uint64 SyncSubscriptionDetail::max_files() const {
  return max_files_;
}
inline void SyncSubscriptionDetail::set_max_files(::google::protobuf::uint64 value) {
  set_has_max_files();
  max_files_ = value;
}

// -------------------------------------------------------------------

// ListSyncSubscriptionsOutput

// repeated .vplex.vsDirectory.Subscription subscriptions = 1;
inline int ListSyncSubscriptionsOutput::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListSyncSubscriptionsOutput::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::vplex::vsDirectory::Subscription& ListSyncSubscriptionsOutput::subscriptions(int index) const {
  return subscriptions_.Get(index);
}
inline ::vplex::vsDirectory::Subscription* ListSyncSubscriptionsOutput::mutable_subscriptions(int index) {
  return subscriptions_.Mutable(index);
}
inline ::vplex::vsDirectory::Subscription* ListSyncSubscriptionsOutput::add_subscriptions() {
  return subscriptions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::Subscription >&
ListSyncSubscriptionsOutput::subscriptions() const {
  return subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::vplex::vsDirectory::Subscription >*
ListSyncSubscriptionsOutput::mutable_subscriptions() {
  return &subscriptions_;
}

// repeated .ccd.SyncSubscriptionDetail subs = 2;
inline int ListSyncSubscriptionsOutput::subs_size() const {
  return subs_.size();
}
inline void ListSyncSubscriptionsOutput::clear_subs() {
  subs_.Clear();
}
inline const ::ccd::SyncSubscriptionDetail& ListSyncSubscriptionsOutput::subs(int index) const {
  return subs_.Get(index);
}
inline ::ccd::SyncSubscriptionDetail* ListSyncSubscriptionsOutput::mutable_subs(int index) {
  return subs_.Mutable(index);
}
inline ::ccd::SyncSubscriptionDetail* ListSyncSubscriptionsOutput::add_subs() {
  return subs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::SyncSubscriptionDetail >&
ListSyncSubscriptionsOutput::subs() const {
  return subs_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::SyncSubscriptionDetail >*
ListSyncSubscriptionsOutput::mutable_subs() {
  return &subs_;
}

// -------------------------------------------------------------------

// RemoteWakeupInput

// required fixed64 user_id = 1;
inline bool RemoteWakeupInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteWakeupInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteWakeupInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteWakeupInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RemoteWakeupInput::user_id() const {
  return user_id_;
}
inline void RemoteWakeupInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 device_to_wake = 2;
inline bool RemoteWakeupInput::has_device_to_wake() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteWakeupInput::set_has_device_to_wake() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteWakeupInput::clear_has_device_to_wake() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteWakeupInput::clear_device_to_wake() {
  device_to_wake_ = GOOGLE_ULONGLONG(0);
  clear_has_device_to_wake();
}
inline ::google::protobuf::uint64 RemoteWakeupInput::device_to_wake() const {
  return device_to_wake_;
}
inline void RemoteWakeupInput::set_device_to_wake(::google::protobuf::uint64 value) {
  set_has_device_to_wake();
  device_to_wake_ = value;
}

// -------------------------------------------------------------------

// RemoteSwUpdateMessageInput

// required fixed64 user_id = 1;
inline bool RemoteSwUpdateMessageInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteSwUpdateMessageInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteSwUpdateMessageInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteSwUpdateMessageInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RemoteSwUpdateMessageInput::user_id() const {
  return user_id_;
}
inline void RemoteSwUpdateMessageInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 target_device_id = 2;
inline bool RemoteSwUpdateMessageInput::has_target_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteSwUpdateMessageInput::set_has_target_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteSwUpdateMessageInput::clear_has_target_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteSwUpdateMessageInput::clear_target_device_id() {
  target_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_target_device_id();
}
inline ::google::protobuf::uint64 RemoteSwUpdateMessageInput::target_device_id() const {
  return target_device_id_;
}
inline void RemoteSwUpdateMessageInput::set_target_device_id(::google::protobuf::uint64 value) {
  set_has_target_device_id();
  target_device_id_ = value;
}

// -------------------------------------------------------------------

// RenameDatasetInput

// required fixed64 user_id = 1;
inline bool RenameDatasetInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RenameDatasetInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RenameDatasetInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RenameDatasetInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RenameDatasetInput::user_id() const {
  return user_id_;
}
inline void RenameDatasetInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 dataset_id = 2;
inline bool RenameDatasetInput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RenameDatasetInput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RenameDatasetInput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RenameDatasetInput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 RenameDatasetInput::dataset_id() const {
  return dataset_id_;
}
inline void RenameDatasetInput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// required string dataset_name = 3;
inline bool RenameDatasetInput::has_dataset_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RenameDatasetInput::set_has_dataset_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RenameDatasetInput::clear_has_dataset_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RenameDatasetInput::clear_dataset_name() {
  if (dataset_name_ != &::google::protobuf::internal::kEmptyString) {
    dataset_name_->clear();
  }
  clear_has_dataset_name();
}
inline const ::std::string& RenameDatasetInput::dataset_name() const {
  return *dataset_name_;
}
inline void RenameDatasetInput::set_dataset_name(const ::std::string& value) {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  dataset_name_->assign(value);
}
inline void RenameDatasetInput::set_dataset_name(const char* value) {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  dataset_name_->assign(value);
}
inline void RenameDatasetInput::set_dataset_name(const char* value, size_t size) {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  dataset_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenameDatasetInput::mutable_dataset_name() {
  set_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    dataset_name_ = new ::std::string;
  }
  return dataset_name_;
}
inline ::std::string* RenameDatasetInput::release_dataset_name() {
  clear_has_dataset_name();
  if (dataset_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataset_name_;
    dataset_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrivateMsaDataCommitInput

// required fixed64 user_id = 1;
inline bool PrivateMsaDataCommitInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrivateMsaDataCommitInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrivateMsaDataCommitInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrivateMsaDataCommitInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 PrivateMsaDataCommitInput::user_id() const {
  return user_id_;
}
inline void PrivateMsaDataCommitInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool commit_start = 3;
inline bool PrivateMsaDataCommitInput::has_commit_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrivateMsaDataCommitInput::set_has_commit_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrivateMsaDataCommitInput::clear_has_commit_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrivateMsaDataCommitInput::clear_commit_start() {
  commit_start_ = false;
  clear_has_commit_start();
}
inline bool PrivateMsaDataCommitInput::commit_start() const {
  return commit_start_;
}
inline void PrivateMsaDataCommitInput::set_commit_start(bool value) {
  set_has_commit_start();
  commit_start_ = value;
}

// optional bool commit_end = 4;
inline bool PrivateMsaDataCommitInput::has_commit_end() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrivateMsaDataCommitInput::set_has_commit_end() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrivateMsaDataCommitInput::clear_has_commit_end() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrivateMsaDataCommitInput::clear_commit_end() {
  commit_end_ = false;
  clear_has_commit_end();
}
inline bool PrivateMsaDataCommitInput::commit_end() const {
  return commit_end_;
}
inline void PrivateMsaDataCommitInput::set_commit_end(bool value) {
  set_has_commit_end();
  commit_end_ = value;
}

// optional bool initialize = 5;
inline bool PrivateMsaDataCommitInput::has_initialize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrivateMsaDataCommitInput::set_has_initialize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrivateMsaDataCommitInput::clear_has_initialize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrivateMsaDataCommitInput::clear_initialize() {
  initialize_ = false;
  clear_has_initialize();
}
inline bool PrivateMsaDataCommitInput::initialize() const {
  return initialize_;
}
inline void PrivateMsaDataCommitInput::set_initialize(bool value) {
  set_has_initialize();
  initialize_ = value;
}

// -------------------------------------------------------------------

// SyncOnceInput

// required string app_id = 1;
inline bool SyncOnceInput::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncOnceInput::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncOnceInput::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncOnceInput::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& SyncOnceInput::app_id() const {
  return *app_id_;
}
inline void SyncOnceInput::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void SyncOnceInput::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void SyncOnceInput::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncOnceInput::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* SyncOnceInput::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 user_id = 2;
inline bool SyncOnceInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncOnceInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncOnceInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncOnceInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SyncOnceInput::user_id() const {
  return user_id_;
}
inline void SyncOnceInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// SyncOnceOutput

// -------------------------------------------------------------------

// UnlinkDeviceInput

// required fixed64 user_id = 1;
inline bool UnlinkDeviceInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlinkDeviceInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlinkDeviceInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlinkDeviceInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UnlinkDeviceInput::user_id() const {
  return user_id_;
}
inline void UnlinkDeviceInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional fixed64 device_id = 2;
inline bool UnlinkDeviceInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlinkDeviceInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlinkDeviceInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlinkDeviceInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 UnlinkDeviceInput::device_id() const {
  return device_id_;
}
inline void UnlinkDeviceInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// -------------------------------------------------------------------

// UpdateAppStateInput

// required string app_id = 1;
inline bool UpdateAppStateInput::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAppStateInput::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAppStateInput::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAppStateInput::clear_app_id() {
  if (app_id_ != &::google::protobuf::internal::kEmptyString) {
    app_id_->clear();
  }
  clear_has_app_id();
}
inline const ::std::string& UpdateAppStateInput::app_id() const {
  return *app_id_;
}
inline void UpdateAppStateInput::set_app_id(const ::std::string& value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void UpdateAppStateInput::set_app_id(const char* value) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(value);
}
inline void UpdateAppStateInput::set_app_id(const char* value, size_t size) {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  app_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateAppStateInput::mutable_app_id() {
  set_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    app_id_ = new ::std::string;
  }
  return app_id_;
}
inline ::std::string* UpdateAppStateInput::release_app_id() {
  clear_has_app_id();
  if (app_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_id_;
    app_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.CcdApp_t app_type = 6 [default = CCD_APP_DEFAULT];
inline bool UpdateAppStateInput::has_app_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateAppStateInput::set_has_app_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateAppStateInput::clear_has_app_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateAppStateInput::clear_app_type() {
  app_type_ = 0;
  clear_has_app_type();
}
inline ccd::CcdApp_t UpdateAppStateInput::app_type() const {
  return static_cast< ccd::CcdApp_t >(app_type_);
}
inline void UpdateAppStateInput::set_app_type(ccd::CcdApp_t value) {
  GOOGLE_DCHECK(ccd::CcdApp_t_IsValid(value));
  set_has_app_type();
  app_type_ = value;
}

// optional bool foreground_mode = 5;
inline bool UpdateAppStateInput::has_foreground_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateAppStateInput::set_has_foreground_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateAppStateInput::clear_has_foreground_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateAppStateInput::clear_foreground_mode() {
  foreground_mode_ = false;
  clear_has_foreground_mode();
}
inline bool UpdateAppStateInput::foreground_mode() const {
  return foreground_mode_;
}
inline void UpdateAppStateInput::set_foreground_mode(bool value) {
  set_has_foreground_mode();
  foreground_mode_ = value;
}

// -------------------------------------------------------------------

// UpdateAppStateOutput

// optional sint32 foreground_mode_err = 5;
inline bool UpdateAppStateOutput::has_foreground_mode_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateAppStateOutput::set_has_foreground_mode_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateAppStateOutput::clear_has_foreground_mode_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateAppStateOutput::clear_foreground_mode_err() {
  foreground_mode_err_ = 0;
  clear_has_foreground_mode_err();
}
inline ::google::protobuf::int32 UpdateAppStateOutput::foreground_mode_err() const {
  return foreground_mode_err_;
}
inline void UpdateAppStateOutput::set_foreground_mode_err(::google::protobuf::int32 value) {
  set_has_foreground_mode_err();
  foreground_mode_err_ = value;
}

// -------------------------------------------------------------------

// CameraRollDownloadDirSpec

// required string dir = 1;
inline bool CameraRollDownloadDirSpec::has_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraRollDownloadDirSpec::set_has_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraRollDownloadDirSpec::clear_has_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraRollDownloadDirSpec::clear_dir() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    dir_->clear();
  }
  clear_has_dir();
}
inline const ::std::string& CameraRollDownloadDirSpec::dir() const {
  return *dir_;
}
inline void CameraRollDownloadDirSpec::set_dir(const ::std::string& value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void CameraRollDownloadDirSpec::set_dir(const char* value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void CameraRollDownloadDirSpec::set_dir(const char* value, size_t size) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CameraRollDownloadDirSpec::mutable_dir() {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  return dir_;
}
inline ::std::string* CameraRollDownloadDirSpec::release_dir() {
  clear_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dir_;
    dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 max_size = 7 [default = 0];
inline bool CameraRollDownloadDirSpec::has_max_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraRollDownloadDirSpec::set_has_max_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraRollDownloadDirSpec::clear_has_max_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraRollDownloadDirSpec::clear_max_size() {
  max_size_ = 0u;
  clear_has_max_size();
}
inline ::google::protobuf::uint32 CameraRollDownloadDirSpec::max_size() const {
  return max_size_;
}
inline void CameraRollDownloadDirSpec::set_max_size(::google::protobuf::uint32 value) {
  set_has_max_size();
  max_size_ = value;
}

// optional uint32 max_files = 8 [default = 0];
inline bool CameraRollDownloadDirSpec::has_max_files() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraRollDownloadDirSpec::set_has_max_files() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraRollDownloadDirSpec::clear_has_max_files() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraRollDownloadDirSpec::clear_max_files() {
  max_files_ = 0u;
  clear_has_max_files();
}
inline ::google::protobuf::uint32 CameraRollDownloadDirSpec::max_files() const {
  return max_files_;
}
inline void CameraRollDownloadDirSpec::set_max_files(::google::protobuf::uint32 value) {
  set_has_max_files();
  max_files_ = value;
}

// optional uint32 preserve_free_disk_percentage = 9 [default = 0];
inline bool CameraRollDownloadDirSpec::has_preserve_free_disk_percentage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraRollDownloadDirSpec::set_has_preserve_free_disk_percentage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraRollDownloadDirSpec::clear_has_preserve_free_disk_percentage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraRollDownloadDirSpec::clear_preserve_free_disk_percentage() {
  preserve_free_disk_percentage_ = 0u;
  clear_has_preserve_free_disk_percentage();
}
inline ::google::protobuf::uint32 CameraRollDownloadDirSpec::preserve_free_disk_percentage() const {
  return preserve_free_disk_percentage_;
}
inline void CameraRollDownloadDirSpec::set_preserve_free_disk_percentage(::google::protobuf::uint32 value) {
  set_has_preserve_free_disk_percentage();
  preserve_free_disk_percentage_ = value;
}

// optional uint64 preserve_free_disk_size_bytes = 10 [default = 0];
inline bool CameraRollDownloadDirSpec::has_preserve_free_disk_size_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraRollDownloadDirSpec::set_has_preserve_free_disk_size_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraRollDownloadDirSpec::clear_has_preserve_free_disk_size_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraRollDownloadDirSpec::clear_preserve_free_disk_size_bytes() {
  preserve_free_disk_size_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_preserve_free_disk_size_bytes();
}
inline ::google::protobuf::uint64 CameraRollDownloadDirSpec::preserve_free_disk_size_bytes() const {
  return preserve_free_disk_size_bytes_;
}
inline void CameraRollDownloadDirSpec::set_preserve_free_disk_size_bytes(::google::protobuf::uint64 value) {
  set_has_preserve_free_disk_size_bytes();
  preserve_free_disk_size_bytes_ = value;
}

// -------------------------------------------------------------------

// MediaMetadataThumbMigrate

// optional string mm_dest_dir = 1;
inline bool MediaMetadataThumbMigrate::has_mm_dest_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MediaMetadataThumbMigrate::set_has_mm_dest_dir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MediaMetadataThumbMigrate::clear_has_mm_dest_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MediaMetadataThumbMigrate::clear_mm_dest_dir() {
  if (mm_dest_dir_ != &::google::protobuf::internal::kEmptyString) {
    mm_dest_dir_->clear();
  }
  clear_has_mm_dest_dir();
}
inline const ::std::string& MediaMetadataThumbMigrate::mm_dest_dir() const {
  return *mm_dest_dir_;
}
inline void MediaMetadataThumbMigrate::set_mm_dest_dir(const ::std::string& value) {
  set_has_mm_dest_dir();
  if (mm_dest_dir_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_dir_ = new ::std::string;
  }
  mm_dest_dir_->assign(value);
}
inline void MediaMetadataThumbMigrate::set_mm_dest_dir(const char* value) {
  set_has_mm_dest_dir();
  if (mm_dest_dir_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_dir_ = new ::std::string;
  }
  mm_dest_dir_->assign(value);
}
inline void MediaMetadataThumbMigrate::set_mm_dest_dir(const char* value, size_t size) {
  set_has_mm_dest_dir();
  if (mm_dest_dir_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_dir_ = new ::std::string;
  }
  mm_dest_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MediaMetadataThumbMigrate::mutable_mm_dest_dir() {
  set_has_mm_dest_dir();
  if (mm_dest_dir_ == &::google::protobuf::internal::kEmptyString) {
    mm_dest_dir_ = new ::std::string;
  }
  return mm_dest_dir_;
}
inline ::std::string* MediaMetadataThumbMigrate::release_mm_dest_dir() {
  clear_has_mm_dest_dir();
  if (mm_dest_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mm_dest_dir_;
    mm_dest_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SyncFeatureSettingsRequest

// required bool enable_sync_feature = 1;
inline bool SyncFeatureSettingsRequest::has_enable_sync_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncFeatureSettingsRequest::set_has_enable_sync_feature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncFeatureSettingsRequest::clear_has_enable_sync_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncFeatureSettingsRequest::clear_enable_sync_feature() {
  enable_sync_feature_ = false;
  clear_has_enable_sync_feature();
}
inline bool SyncFeatureSettingsRequest::enable_sync_feature() const {
  return enable_sync_feature_;
}
inline void SyncFeatureSettingsRequest::set_enable_sync_feature(bool value) {
  set_has_enable_sync_feature();
  enable_sync_feature_ = value;
}

// optional string set_sync_feature_path = 2;
inline bool SyncFeatureSettingsRequest::has_set_sync_feature_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncFeatureSettingsRequest::set_has_set_sync_feature_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncFeatureSettingsRequest::clear_has_set_sync_feature_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncFeatureSettingsRequest::clear_set_sync_feature_path() {
  if (set_sync_feature_path_ != &::google::protobuf::internal::kEmptyString) {
    set_sync_feature_path_->clear();
  }
  clear_has_set_sync_feature_path();
}
inline const ::std::string& SyncFeatureSettingsRequest::set_sync_feature_path() const {
  return *set_sync_feature_path_;
}
inline void SyncFeatureSettingsRequest::set_set_sync_feature_path(const ::std::string& value) {
  set_has_set_sync_feature_path();
  if (set_sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    set_sync_feature_path_ = new ::std::string;
  }
  set_sync_feature_path_->assign(value);
}
inline void SyncFeatureSettingsRequest::set_set_sync_feature_path(const char* value) {
  set_has_set_sync_feature_path();
  if (set_sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    set_sync_feature_path_ = new ::std::string;
  }
  set_sync_feature_path_->assign(value);
}
inline void SyncFeatureSettingsRequest::set_set_sync_feature_path(const char* value, size_t size) {
  set_has_set_sync_feature_path();
  if (set_sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    set_sync_feature_path_ = new ::std::string;
  }
  set_sync_feature_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncFeatureSettingsRequest::mutable_set_sync_feature_path() {
  set_has_set_sync_feature_path();
  if (set_sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    set_sync_feature_path_ = new ::std::string;
  }
  return set_sync_feature_path_;
}
inline ::std::string* SyncFeatureSettingsRequest::release_set_sync_feature_path() {
  clear_has_set_sync_feature_path();
  if (set_sync_feature_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = set_sync_feature_path_;
    set_sync_feature_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_archive_storage = 3 [default = false];
inline bool SyncFeatureSettingsRequest::has_is_archive_storage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncFeatureSettingsRequest::set_has_is_archive_storage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncFeatureSettingsRequest::clear_has_is_archive_storage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncFeatureSettingsRequest::clear_is_archive_storage() {
  is_archive_storage_ = false;
  clear_has_is_archive_storage();
}
inline bool SyncFeatureSettingsRequest::is_archive_storage() const {
  return is_archive_storage_;
}
inline void SyncFeatureSettingsRequest::set_is_archive_storage(bool value) {
  set_has_is_archive_storage();
  is_archive_storage_ = value;
}

// -------------------------------------------------------------------

// UpdateSyncSettingsInput

// required fixed64 user_id = 1;
inline bool UpdateSyncSettingsInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSyncSettingsInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSyncSettingsInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UpdateSyncSettingsInput::user_id() const {
  return user_id_;
}
inline void UpdateSyncSettingsInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string set_my_device_name = 2;
inline bool UpdateSyncSettingsInput::has_set_my_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_set_my_device_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSyncSettingsInput::clear_has_set_my_device_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSyncSettingsInput::clear_set_my_device_name() {
  if (set_my_device_name_ != &::google::protobuf::internal::kEmptyString) {
    set_my_device_name_->clear();
  }
  clear_has_set_my_device_name();
}
inline const ::std::string& UpdateSyncSettingsInput::set_my_device_name() const {
  return *set_my_device_name_;
}
inline void UpdateSyncSettingsInput::set_set_my_device_name(const ::std::string& value) {
  set_has_set_my_device_name();
  if (set_my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    set_my_device_name_ = new ::std::string;
  }
  set_my_device_name_->assign(value);
}
inline void UpdateSyncSettingsInput::set_set_my_device_name(const char* value) {
  set_has_set_my_device_name();
  if (set_my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    set_my_device_name_ = new ::std::string;
  }
  set_my_device_name_->assign(value);
}
inline void UpdateSyncSettingsInput::set_set_my_device_name(const char* value, size_t size) {
  set_has_set_my_device_name();
  if (set_my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    set_my_device_name_ = new ::std::string;
  }
  set_my_device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_set_my_device_name() {
  set_has_set_my_device_name();
  if (set_my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    set_my_device_name_ = new ::std::string;
  }
  return set_my_device_name_;
}
inline ::std::string* UpdateSyncSettingsInput::release_set_my_device_name() {
  clear_has_set_my_device_name();
  if (set_my_device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = set_my_device_name_;
    set_my_device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool enable_camera_roll = 7;
inline bool UpdateSyncSettingsInput::has_enable_camera_roll() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_camera_roll() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_camera_roll() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateSyncSettingsInput::clear_enable_camera_roll() {
  enable_camera_roll_ = false;
  clear_has_enable_camera_roll();
}
inline bool UpdateSyncSettingsInput::enable_camera_roll() const {
  return enable_camera_roll_;
}
inline void UpdateSyncSettingsInput::set_enable_camera_roll(bool value) {
  set_has_enable_camera_roll();
  enable_camera_roll_ = value;
}

// optional bool enable_network_activity = 8;
inline bool UpdateSyncSettingsInput::has_enable_network_activity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_network_activity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_network_activity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateSyncSettingsInput::clear_enable_network_activity() {
  enable_network_activity_ = false;
  clear_has_enable_network_activity();
}
inline bool UpdateSyncSettingsInput::enable_network_activity() const {
  return enable_network_activity_;
}
inline void UpdateSyncSettingsInput::set_enable_network_activity(bool value) {
  set_has_enable_network_activity();
  enable_network_activity_ = value;
}

// optional uint64 set_max_download_rate_bytes_sec = 5;
inline bool UpdateSyncSettingsInput::has_set_max_download_rate_bytes_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_set_max_download_rate_bytes_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateSyncSettingsInput::clear_has_set_max_download_rate_bytes_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateSyncSettingsInput::clear_set_max_download_rate_bytes_sec() {
  set_max_download_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_set_max_download_rate_bytes_sec();
}
inline ::google::protobuf::uint64 UpdateSyncSettingsInput::set_max_download_rate_bytes_sec() const {
  return set_max_download_rate_bytes_sec_;
}
inline void UpdateSyncSettingsInput::set_set_max_download_rate_bytes_sec(::google::protobuf::uint64 value) {
  set_has_set_max_download_rate_bytes_sec();
  set_max_download_rate_bytes_sec_ = value;
}

// optional uint64 set_max_upload_rate_bytes_sec = 6;
inline bool UpdateSyncSettingsInput::has_set_max_upload_rate_bytes_sec() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_set_max_upload_rate_bytes_sec() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateSyncSettingsInput::clear_has_set_max_upload_rate_bytes_sec() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateSyncSettingsInput::clear_set_max_upload_rate_bytes_sec() {
  set_max_upload_rate_bytes_sec_ = GOOGLE_ULONGLONG(0);
  clear_has_set_max_upload_rate_bytes_sec();
}
inline ::google::protobuf::uint64 UpdateSyncSettingsInput::set_max_upload_rate_bytes_sec() const {
  return set_max_upload_rate_bytes_sec_;
}
inline void UpdateSyncSettingsInput::set_set_max_upload_rate_bytes_sec(::google::protobuf::uint64 value) {
  set_has_set_max_upload_rate_bytes_sec();
  set_max_upload_rate_bytes_sec_ = value;
}

// optional bool background_data = 10;
inline bool UpdateSyncSettingsInput::has_background_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_background_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateSyncSettingsInput::clear_has_background_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateSyncSettingsInput::clear_background_data() {
  background_data_ = false;
  clear_has_background_data();
}
inline bool UpdateSyncSettingsInput::background_data() const {
  return background_data_;
}
inline void UpdateSyncSettingsInput::set_background_data(bool value) {
  set_has_background_data();
  background_data_ = value;
}

// optional bool auto_sync = 11;
inline bool UpdateSyncSettingsInput::has_auto_sync() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_auto_sync() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpdateSyncSettingsInput::clear_has_auto_sync() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpdateSyncSettingsInput::clear_auto_sync() {
  auto_sync_ = false;
  clear_has_auto_sync();
}
inline bool UpdateSyncSettingsInput::auto_sync() const {
  return auto_sync_;
}
inline void UpdateSyncSettingsInput::set_auto_sync(bool value) {
  set_has_auto_sync();
  auto_sync_ = value;
}

// optional bool mobile_network_data = 12;
inline bool UpdateSyncSettingsInput::has_mobile_network_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_mobile_network_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpdateSyncSettingsInput::clear_has_mobile_network_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpdateSyncSettingsInput::clear_mobile_network_data() {
  mobile_network_data_ = false;
  clear_has_mobile_network_data();
}
inline bool UpdateSyncSettingsInput::mobile_network_data() const {
  return mobile_network_data_;
}
inline void UpdateSyncSettingsInput::set_mobile_network_data(bool value) {
  set_has_mobile_network_data();
  mobile_network_data_ = value;
}

// repeated string add_camera_roll_upload_dirs = 13;
inline int UpdateSyncSettingsInput::add_camera_roll_upload_dirs_size() const {
  return add_camera_roll_upload_dirs_.size();
}
inline void UpdateSyncSettingsInput::clear_add_camera_roll_upload_dirs() {
  add_camera_roll_upload_dirs_.Clear();
}
inline const ::std::string& UpdateSyncSettingsInput::add_camera_roll_upload_dirs(int index) const {
  return add_camera_roll_upload_dirs_.Get(index);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_add_camera_roll_upload_dirs(int index) {
  return add_camera_roll_upload_dirs_.Mutable(index);
}
inline void UpdateSyncSettingsInput::set_add_camera_roll_upload_dirs(int index, const ::std::string& value) {
  add_camera_roll_upload_dirs_.Mutable(index)->assign(value);
}
inline void UpdateSyncSettingsInput::set_add_camera_roll_upload_dirs(int index, const char* value) {
  add_camera_roll_upload_dirs_.Mutable(index)->assign(value);
}
inline void UpdateSyncSettingsInput::set_add_camera_roll_upload_dirs(int index, const char* value, size_t size) {
  add_camera_roll_upload_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::add_add_camera_roll_upload_dirs() {
  return add_camera_roll_upload_dirs_.Add();
}
inline void UpdateSyncSettingsInput::add_add_camera_roll_upload_dirs(const ::std::string& value) {
  add_camera_roll_upload_dirs_.Add()->assign(value);
}
inline void UpdateSyncSettingsInput::add_add_camera_roll_upload_dirs(const char* value) {
  add_camera_roll_upload_dirs_.Add()->assign(value);
}
inline void UpdateSyncSettingsInput::add_add_camera_roll_upload_dirs(const char* value, size_t size) {
  add_camera_roll_upload_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateSyncSettingsInput::add_camera_roll_upload_dirs() const {
  return add_camera_roll_upload_dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateSyncSettingsInput::mutable_add_camera_roll_upload_dirs() {
  return &add_camera_roll_upload_dirs_;
}

// repeated string remove_camera_roll_upload_dirs = 14;
inline int UpdateSyncSettingsInput::remove_camera_roll_upload_dirs_size() const {
  return remove_camera_roll_upload_dirs_.size();
}
inline void UpdateSyncSettingsInput::clear_remove_camera_roll_upload_dirs() {
  remove_camera_roll_upload_dirs_.Clear();
}
inline const ::std::string& UpdateSyncSettingsInput::remove_camera_roll_upload_dirs(int index) const {
  return remove_camera_roll_upload_dirs_.Get(index);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_remove_camera_roll_upload_dirs(int index) {
  return remove_camera_roll_upload_dirs_.Mutable(index);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_upload_dirs(int index, const ::std::string& value) {
  remove_camera_roll_upload_dirs_.Mutable(index)->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_upload_dirs(int index, const char* value) {
  remove_camera_roll_upload_dirs_.Mutable(index)->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_upload_dirs(int index, const char* value, size_t size) {
  remove_camera_roll_upload_dirs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::add_remove_camera_roll_upload_dirs() {
  return remove_camera_roll_upload_dirs_.Add();
}
inline void UpdateSyncSettingsInput::add_remove_camera_roll_upload_dirs(const ::std::string& value) {
  remove_camera_roll_upload_dirs_.Add()->assign(value);
}
inline void UpdateSyncSettingsInput::add_remove_camera_roll_upload_dirs(const char* value) {
  remove_camera_roll_upload_dirs_.Add()->assign(value);
}
inline void UpdateSyncSettingsInput::add_remove_camera_roll_upload_dirs(const char* value, size_t size) {
  remove_camera_roll_upload_dirs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateSyncSettingsInput::remove_camera_roll_upload_dirs() const {
  return remove_camera_roll_upload_dirs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateSyncSettingsInput::mutable_remove_camera_roll_upload_dirs() {
  return &remove_camera_roll_upload_dirs_;
}

// optional string trigger_camera_roll_upload_dir = 15;
inline bool UpdateSyncSettingsInput::has_trigger_camera_roll_upload_dir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_trigger_camera_roll_upload_dir() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UpdateSyncSettingsInput::clear_has_trigger_camera_roll_upload_dir() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UpdateSyncSettingsInput::clear_trigger_camera_roll_upload_dir() {
  if (trigger_camera_roll_upload_dir_ != &::google::protobuf::internal::kEmptyString) {
    trigger_camera_roll_upload_dir_->clear();
  }
  clear_has_trigger_camera_roll_upload_dir();
}
inline const ::std::string& UpdateSyncSettingsInput::trigger_camera_roll_upload_dir() const {
  return *trigger_camera_roll_upload_dir_;
}
inline void UpdateSyncSettingsInput::set_trigger_camera_roll_upload_dir(const ::std::string& value) {
  set_has_trigger_camera_roll_upload_dir();
  if (trigger_camera_roll_upload_dir_ == &::google::protobuf::internal::kEmptyString) {
    trigger_camera_roll_upload_dir_ = new ::std::string;
  }
  trigger_camera_roll_upload_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_trigger_camera_roll_upload_dir(const char* value) {
  set_has_trigger_camera_roll_upload_dir();
  if (trigger_camera_roll_upload_dir_ == &::google::protobuf::internal::kEmptyString) {
    trigger_camera_roll_upload_dir_ = new ::std::string;
  }
  trigger_camera_roll_upload_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_trigger_camera_roll_upload_dir(const char* value, size_t size) {
  set_has_trigger_camera_roll_upload_dir();
  if (trigger_camera_roll_upload_dir_ == &::google::protobuf::internal::kEmptyString) {
    trigger_camera_roll_upload_dir_ = new ::std::string;
  }
  trigger_camera_roll_upload_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_trigger_camera_roll_upload_dir() {
  set_has_trigger_camera_roll_upload_dir();
  if (trigger_camera_roll_upload_dir_ == &::google::protobuf::internal::kEmptyString) {
    trigger_camera_roll_upload_dir_ = new ::std::string;
  }
  return trigger_camera_roll_upload_dir_;
}
inline ::std::string* UpdateSyncSettingsInput::release_trigger_camera_roll_upload_dir() {
  clear_has_trigger_camera_roll_upload_dir();
  if (trigger_camera_roll_upload_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trigger_camera_roll_upload_dir_;
    trigger_camera_roll_upload_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.CameraRollDownloadDirSpec add_camera_roll_full_res_download_dir = 18;
inline bool UpdateSyncSettingsInput::has_add_camera_roll_full_res_download_dir() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_add_camera_roll_full_res_download_dir() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UpdateSyncSettingsInput::clear_has_add_camera_roll_full_res_download_dir() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UpdateSyncSettingsInput::clear_add_camera_roll_full_res_download_dir() {
  if (add_camera_roll_full_res_download_dir_ != NULL) add_camera_roll_full_res_download_dir_->::ccd::CameraRollDownloadDirSpec::Clear();
  clear_has_add_camera_roll_full_res_download_dir();
}
inline const ::ccd::CameraRollDownloadDirSpec& UpdateSyncSettingsInput::add_camera_roll_full_res_download_dir() const {
  return add_camera_roll_full_res_download_dir_ != NULL ? *add_camera_roll_full_res_download_dir_ : *default_instance_->add_camera_roll_full_res_download_dir_;
}
inline ::ccd::CameraRollDownloadDirSpec* UpdateSyncSettingsInput::mutable_add_camera_roll_full_res_download_dir() {
  set_has_add_camera_roll_full_res_download_dir();
  if (add_camera_roll_full_res_download_dir_ == NULL) add_camera_roll_full_res_download_dir_ = new ::ccd::CameraRollDownloadDirSpec;
  return add_camera_roll_full_res_download_dir_;
}
inline ::ccd::CameraRollDownloadDirSpec* UpdateSyncSettingsInput::release_add_camera_roll_full_res_download_dir() {
  clear_has_add_camera_roll_full_res_download_dir();
  ::ccd::CameraRollDownloadDirSpec* temp = add_camera_roll_full_res_download_dir_;
  add_camera_roll_full_res_download_dir_ = NULL;
  return temp;
}

// optional string remove_camera_roll_full_res_download_dir = 19;
inline bool UpdateSyncSettingsInput::has_remove_camera_roll_full_res_download_dir() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_remove_camera_roll_full_res_download_dir() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UpdateSyncSettingsInput::clear_has_remove_camera_roll_full_res_download_dir() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UpdateSyncSettingsInput::clear_remove_camera_roll_full_res_download_dir() {
  if (remove_camera_roll_full_res_download_dir_ != &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_full_res_download_dir_->clear();
  }
  clear_has_remove_camera_roll_full_res_download_dir();
}
inline const ::std::string& UpdateSyncSettingsInput::remove_camera_roll_full_res_download_dir() const {
  return *remove_camera_roll_full_res_download_dir_;
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_full_res_download_dir(const ::std::string& value) {
  set_has_remove_camera_roll_full_res_download_dir();
  if (remove_camera_roll_full_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_full_res_download_dir_ = new ::std::string;
  }
  remove_camera_roll_full_res_download_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_full_res_download_dir(const char* value) {
  set_has_remove_camera_roll_full_res_download_dir();
  if (remove_camera_roll_full_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_full_res_download_dir_ = new ::std::string;
  }
  remove_camera_roll_full_res_download_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_full_res_download_dir(const char* value, size_t size) {
  set_has_remove_camera_roll_full_res_download_dir();
  if (remove_camera_roll_full_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_full_res_download_dir_ = new ::std::string;
  }
  remove_camera_roll_full_res_download_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_remove_camera_roll_full_res_download_dir() {
  set_has_remove_camera_roll_full_res_download_dir();
  if (remove_camera_roll_full_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_full_res_download_dir_ = new ::std::string;
  }
  return remove_camera_roll_full_res_download_dir_;
}
inline ::std::string* UpdateSyncSettingsInput::release_remove_camera_roll_full_res_download_dir() {
  clear_has_remove_camera_roll_full_res_download_dir();
  if (remove_camera_roll_full_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remove_camera_roll_full_res_download_dir_;
    remove_camera_roll_full_res_download_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.CameraRollDownloadDirSpec add_camera_roll_low_res_download_dir = 20;
inline bool UpdateSyncSettingsInput::has_add_camera_roll_low_res_download_dir() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_add_camera_roll_low_res_download_dir() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UpdateSyncSettingsInput::clear_has_add_camera_roll_low_res_download_dir() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UpdateSyncSettingsInput::clear_add_camera_roll_low_res_download_dir() {
  if (add_camera_roll_low_res_download_dir_ != NULL) add_camera_roll_low_res_download_dir_->::ccd::CameraRollDownloadDirSpec::Clear();
  clear_has_add_camera_roll_low_res_download_dir();
}
inline const ::ccd::CameraRollDownloadDirSpec& UpdateSyncSettingsInput::add_camera_roll_low_res_download_dir() const {
  return add_camera_roll_low_res_download_dir_ != NULL ? *add_camera_roll_low_res_download_dir_ : *default_instance_->add_camera_roll_low_res_download_dir_;
}
inline ::ccd::CameraRollDownloadDirSpec* UpdateSyncSettingsInput::mutable_add_camera_roll_low_res_download_dir() {
  set_has_add_camera_roll_low_res_download_dir();
  if (add_camera_roll_low_res_download_dir_ == NULL) add_camera_roll_low_res_download_dir_ = new ::ccd::CameraRollDownloadDirSpec;
  return add_camera_roll_low_res_download_dir_;
}
inline ::ccd::CameraRollDownloadDirSpec* UpdateSyncSettingsInput::release_add_camera_roll_low_res_download_dir() {
  clear_has_add_camera_roll_low_res_download_dir();
  ::ccd::CameraRollDownloadDirSpec* temp = add_camera_roll_low_res_download_dir_;
  add_camera_roll_low_res_download_dir_ = NULL;
  return temp;
}

// optional string remove_camera_roll_low_res_download_dir = 21;
inline bool UpdateSyncSettingsInput::has_remove_camera_roll_low_res_download_dir() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_remove_camera_roll_low_res_download_dir() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UpdateSyncSettingsInput::clear_has_remove_camera_roll_low_res_download_dir() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UpdateSyncSettingsInput::clear_remove_camera_roll_low_res_download_dir() {
  if (remove_camera_roll_low_res_download_dir_ != &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_low_res_download_dir_->clear();
  }
  clear_has_remove_camera_roll_low_res_download_dir();
}
inline const ::std::string& UpdateSyncSettingsInput::remove_camera_roll_low_res_download_dir() const {
  return *remove_camera_roll_low_res_download_dir_;
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_low_res_download_dir(const ::std::string& value) {
  set_has_remove_camera_roll_low_res_download_dir();
  if (remove_camera_roll_low_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_low_res_download_dir_ = new ::std::string;
  }
  remove_camera_roll_low_res_download_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_low_res_download_dir(const char* value) {
  set_has_remove_camera_roll_low_res_download_dir();
  if (remove_camera_roll_low_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_low_res_download_dir_ = new ::std::string;
  }
  remove_camera_roll_low_res_download_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_low_res_download_dir(const char* value, size_t size) {
  set_has_remove_camera_roll_low_res_download_dir();
  if (remove_camera_roll_low_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_low_res_download_dir_ = new ::std::string;
  }
  remove_camera_roll_low_res_download_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_remove_camera_roll_low_res_download_dir() {
  set_has_remove_camera_roll_low_res_download_dir();
  if (remove_camera_roll_low_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_low_res_download_dir_ = new ::std::string;
  }
  return remove_camera_roll_low_res_download_dir_;
}
inline ::std::string* UpdateSyncSettingsInput::release_remove_camera_roll_low_res_download_dir() {
  clear_has_remove_camera_roll_low_res_download_dir();
  if (remove_camera_roll_low_res_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remove_camera_roll_low_res_download_dir_;
    remove_camera_roll_low_res_download_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ccd.CameraRollDownloadDirSpec add_camera_roll_thumb_download_dir = 32;
inline bool UpdateSyncSettingsInput::has_add_camera_roll_thumb_download_dir() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_add_camera_roll_thumb_download_dir() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UpdateSyncSettingsInput::clear_has_add_camera_roll_thumb_download_dir() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UpdateSyncSettingsInput::clear_add_camera_roll_thumb_download_dir() {
  if (add_camera_roll_thumb_download_dir_ != NULL) add_camera_roll_thumb_download_dir_->::ccd::CameraRollDownloadDirSpec::Clear();
  clear_has_add_camera_roll_thumb_download_dir();
}
inline const ::ccd::CameraRollDownloadDirSpec& UpdateSyncSettingsInput::add_camera_roll_thumb_download_dir() const {
  return add_camera_roll_thumb_download_dir_ != NULL ? *add_camera_roll_thumb_download_dir_ : *default_instance_->add_camera_roll_thumb_download_dir_;
}
inline ::ccd::CameraRollDownloadDirSpec* UpdateSyncSettingsInput::mutable_add_camera_roll_thumb_download_dir() {
  set_has_add_camera_roll_thumb_download_dir();
  if (add_camera_roll_thumb_download_dir_ == NULL) add_camera_roll_thumb_download_dir_ = new ::ccd::CameraRollDownloadDirSpec;
  return add_camera_roll_thumb_download_dir_;
}
inline ::ccd::CameraRollDownloadDirSpec* UpdateSyncSettingsInput::release_add_camera_roll_thumb_download_dir() {
  clear_has_add_camera_roll_thumb_download_dir();
  ::ccd::CameraRollDownloadDirSpec* temp = add_camera_roll_thumb_download_dir_;
  add_camera_roll_thumb_download_dir_ = NULL;
  return temp;
}

// optional string remove_camera_roll_thumb_download_dir = 33;
inline bool UpdateSyncSettingsInput::has_remove_camera_roll_thumb_download_dir() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_remove_camera_roll_thumb_download_dir() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UpdateSyncSettingsInput::clear_has_remove_camera_roll_thumb_download_dir() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UpdateSyncSettingsInput::clear_remove_camera_roll_thumb_download_dir() {
  if (remove_camera_roll_thumb_download_dir_ != &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_thumb_download_dir_->clear();
  }
  clear_has_remove_camera_roll_thumb_download_dir();
}
inline const ::std::string& UpdateSyncSettingsInput::remove_camera_roll_thumb_download_dir() const {
  return *remove_camera_roll_thumb_download_dir_;
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_thumb_download_dir(const ::std::string& value) {
  set_has_remove_camera_roll_thumb_download_dir();
  if (remove_camera_roll_thumb_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_thumb_download_dir_ = new ::std::string;
  }
  remove_camera_roll_thumb_download_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_thumb_download_dir(const char* value) {
  set_has_remove_camera_roll_thumb_download_dir();
  if (remove_camera_roll_thumb_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_thumb_download_dir_ = new ::std::string;
  }
  remove_camera_roll_thumb_download_dir_->assign(value);
}
inline void UpdateSyncSettingsInput::set_remove_camera_roll_thumb_download_dir(const char* value, size_t size) {
  set_has_remove_camera_roll_thumb_download_dir();
  if (remove_camera_roll_thumb_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_thumb_download_dir_ = new ::std::string;
  }
  remove_camera_roll_thumb_download_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_remove_camera_roll_thumb_download_dir() {
  set_has_remove_camera_roll_thumb_download_dir();
  if (remove_camera_roll_thumb_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    remove_camera_roll_thumb_download_dir_ = new ::std::string;
  }
  return remove_camera_roll_thumb_download_dir_;
}
inline ::std::string* UpdateSyncSettingsInput::release_remove_camera_roll_thumb_download_dir() {
  clear_has_remove_camera_roll_thumb_download_dir();
  if (remove_camera_roll_thumb_download_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remove_camera_roll_thumb_download_dir_;
    remove_camera_roll_thumb_download_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string send_file_to_camera_roll = 22;
inline bool UpdateSyncSettingsInput::has_send_file_to_camera_roll() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_send_file_to_camera_roll() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UpdateSyncSettingsInput::clear_has_send_file_to_camera_roll() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UpdateSyncSettingsInput::clear_send_file_to_camera_roll() {
  if (send_file_to_camera_roll_ != &::google::protobuf::internal::kEmptyString) {
    send_file_to_camera_roll_->clear();
  }
  clear_has_send_file_to_camera_roll();
}
inline const ::std::string& UpdateSyncSettingsInput::send_file_to_camera_roll() const {
  return *send_file_to_camera_roll_;
}
inline void UpdateSyncSettingsInput::set_send_file_to_camera_roll(const ::std::string& value) {
  set_has_send_file_to_camera_roll();
  if (send_file_to_camera_roll_ == &::google::protobuf::internal::kEmptyString) {
    send_file_to_camera_roll_ = new ::std::string;
  }
  send_file_to_camera_roll_->assign(value);
}
inline void UpdateSyncSettingsInput::set_send_file_to_camera_roll(const char* value) {
  set_has_send_file_to_camera_roll();
  if (send_file_to_camera_roll_ == &::google::protobuf::internal::kEmptyString) {
    send_file_to_camera_roll_ = new ::std::string;
  }
  send_file_to_camera_roll_->assign(value);
}
inline void UpdateSyncSettingsInput::set_send_file_to_camera_roll(const char* value, size_t size) {
  set_has_send_file_to_camera_roll();
  if (send_file_to_camera_roll_ == &::google::protobuf::internal::kEmptyString) {
    send_file_to_camera_roll_ = new ::std::string;
  }
  send_file_to_camera_roll_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSettingsInput::mutable_send_file_to_camera_roll() {
  set_has_send_file_to_camera_roll();
  if (send_file_to_camera_roll_ == &::google::protobuf::internal::kEmptyString) {
    send_file_to_camera_roll_ = new ::std::string;
  }
  return send_file_to_camera_roll_;
}
inline ::std::string* UpdateSyncSettingsInput::release_send_file_to_camera_roll() {
  clear_has_send_file_to_camera_roll();
  if (send_file_to_camera_roll_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = send_file_to_camera_roll_;
    send_file_to_camera_roll_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool enable_global_delete = 34;
inline bool UpdateSyncSettingsInput::has_enable_global_delete() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_global_delete() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_global_delete() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UpdateSyncSettingsInput::clear_enable_global_delete() {
  enable_global_delete_ = false;
  clear_has_enable_global_delete();
}
inline bool UpdateSyncSettingsInput::enable_global_delete() const {
  return enable_global_delete_;
}
inline void UpdateSyncSettingsInput::set_enable_global_delete(bool value) {
  set_has_enable_global_delete();
  enable_global_delete_ = value;
}

// optional .ccd.SyncFeatureSettingsRequest configure_notes_sync = 26;
inline bool UpdateSyncSettingsInput::has_configure_notes_sync() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_configure_notes_sync() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UpdateSyncSettingsInput::clear_has_configure_notes_sync() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UpdateSyncSettingsInput::clear_configure_notes_sync() {
  if (configure_notes_sync_ != NULL) configure_notes_sync_->::ccd::SyncFeatureSettingsRequest::Clear();
  clear_has_configure_notes_sync();
}
inline const ::ccd::SyncFeatureSettingsRequest& UpdateSyncSettingsInput::configure_notes_sync() const {
  return configure_notes_sync_ != NULL ? *configure_notes_sync_ : *default_instance_->configure_notes_sync_;
}
inline ::ccd::SyncFeatureSettingsRequest* UpdateSyncSettingsInput::mutable_configure_notes_sync() {
  set_has_configure_notes_sync();
  if (configure_notes_sync_ == NULL) configure_notes_sync_ = new ::ccd::SyncFeatureSettingsRequest;
  return configure_notes_sync_;
}
inline ::ccd::SyncFeatureSettingsRequest* UpdateSyncSettingsInput::release_configure_notes_sync() {
  clear_has_configure_notes_sync();
  ::ccd::SyncFeatureSettingsRequest* temp = configure_notes_sync_;
  configure_notes_sync_ = NULL;
  return temp;
}

// optional bool enable_notes_sync = 27;
inline bool UpdateSyncSettingsInput::has_enable_notes_sync() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_notes_sync() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_notes_sync() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UpdateSyncSettingsInput::clear_enable_notes_sync() {
  enable_notes_sync_ = false;
  clear_has_enable_notes_sync();
}
inline bool UpdateSyncSettingsInput::enable_notes_sync() const {
  return enable_notes_sync_;
}
inline void UpdateSyncSettingsInput::set_enable_notes_sync(bool value) {
  set_has_enable_notes_sync();
  enable_notes_sync_ = value;
}

// optional .ccd.MediaMetadataThumbMigrate migrate_mm_thumb_download_path = 28;
inline bool UpdateSyncSettingsInput::has_migrate_mm_thumb_download_path() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_migrate_mm_thumb_download_path() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UpdateSyncSettingsInput::clear_has_migrate_mm_thumb_download_path() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UpdateSyncSettingsInput::clear_migrate_mm_thumb_download_path() {
  if (migrate_mm_thumb_download_path_ != NULL) migrate_mm_thumb_download_path_->::ccd::MediaMetadataThumbMigrate::Clear();
  clear_has_migrate_mm_thumb_download_path();
}
inline const ::ccd::MediaMetadataThumbMigrate& UpdateSyncSettingsInput::migrate_mm_thumb_download_path() const {
  return migrate_mm_thumb_download_path_ != NULL ? *migrate_mm_thumb_download_path_ : *default_instance_->migrate_mm_thumb_download_path_;
}
inline ::ccd::MediaMetadataThumbMigrate* UpdateSyncSettingsInput::mutable_migrate_mm_thumb_download_path() {
  set_has_migrate_mm_thumb_download_path();
  if (migrate_mm_thumb_download_path_ == NULL) migrate_mm_thumb_download_path_ = new ::ccd::MediaMetadataThumbMigrate;
  return migrate_mm_thumb_download_path_;
}
inline ::ccd::MediaMetadataThumbMigrate* UpdateSyncSettingsInput::release_migrate_mm_thumb_download_path() {
  clear_has_migrate_mm_thumb_download_path();
  ::ccd::MediaMetadataThumbMigrate* temp = migrate_mm_thumb_download_path_;
  migrate_mm_thumb_download_path_ = NULL;
  return temp;
}

// optional bool enable_mm_thumb_sync = 29;
inline bool UpdateSyncSettingsInput::has_enable_mm_thumb_sync() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_mm_thumb_sync() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_mm_thumb_sync() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UpdateSyncSettingsInput::clear_enable_mm_thumb_sync() {
  enable_mm_thumb_sync_ = false;
  clear_has_enable_mm_thumb_sync();
}
inline bool UpdateSyncSettingsInput::enable_mm_thumb_sync() const {
  return enable_mm_thumb_sync_;
}
inline void UpdateSyncSettingsInput::set_enable_mm_thumb_sync(bool value) {
  set_has_enable_mm_thumb_sync();
  enable_mm_thumb_sync_ = value;
}

// optional bool enable_clouddoc_sync = 30;
inline bool UpdateSyncSettingsInput::has_enable_clouddoc_sync() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_clouddoc_sync() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_clouddoc_sync() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UpdateSyncSettingsInput::clear_enable_clouddoc_sync() {
  enable_clouddoc_sync_ = false;
  clear_has_enable_clouddoc_sync();
}
inline bool UpdateSyncSettingsInput::enable_clouddoc_sync() const {
  return enable_clouddoc_sync_;
}
inline void UpdateSyncSettingsInput::set_enable_clouddoc_sync(bool value) {
  set_has_enable_clouddoc_sync();
  enable_clouddoc_sync_ = value;
}

// repeated .ccd.SyncFeature_t enable_mm_thumb_sync_types = 31;
inline int UpdateSyncSettingsInput::enable_mm_thumb_sync_types_size() const {
  return enable_mm_thumb_sync_types_.size();
}
inline void UpdateSyncSettingsInput::clear_enable_mm_thumb_sync_types() {
  enable_mm_thumb_sync_types_.Clear();
}
inline ccd::SyncFeature_t UpdateSyncSettingsInput::enable_mm_thumb_sync_types(int index) const {
  return static_cast< ccd::SyncFeature_t >(enable_mm_thumb_sync_types_.Get(index));
}
inline void UpdateSyncSettingsInput::set_enable_mm_thumb_sync_types(int index, ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  enable_mm_thumb_sync_types_.Set(index, value);
}
inline void UpdateSyncSettingsInput::add_enable_mm_thumb_sync_types(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  enable_mm_thumb_sync_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
UpdateSyncSettingsInput::enable_mm_thumb_sync_types() const {
  return enable_mm_thumb_sync_types_;
}
inline ::google::protobuf::RepeatedField<int>*
UpdateSyncSettingsInput::mutable_enable_mm_thumb_sync_types() {
  return &enable_mm_thumb_sync_types_;
}

// optional .ccd.SyncFeatureSettingsRequest configure_syncbox_sync = 35;
inline bool UpdateSyncSettingsInput::has_configure_syncbox_sync() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_configure_syncbox_sync() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UpdateSyncSettingsInput::clear_has_configure_syncbox_sync() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UpdateSyncSettingsInput::clear_configure_syncbox_sync() {
  if (configure_syncbox_sync_ != NULL) configure_syncbox_sync_->::ccd::SyncFeatureSettingsRequest::Clear();
  clear_has_configure_syncbox_sync();
}
inline const ::ccd::SyncFeatureSettingsRequest& UpdateSyncSettingsInput::configure_syncbox_sync() const {
  return configure_syncbox_sync_ != NULL ? *configure_syncbox_sync_ : *default_instance_->configure_syncbox_sync_;
}
inline ::ccd::SyncFeatureSettingsRequest* UpdateSyncSettingsInput::mutable_configure_syncbox_sync() {
  set_has_configure_syncbox_sync();
  if (configure_syncbox_sync_ == NULL) configure_syncbox_sync_ = new ::ccd::SyncFeatureSettingsRequest;
  return configure_syncbox_sync_;
}
inline ::ccd::SyncFeatureSettingsRequest* UpdateSyncSettingsInput::release_configure_syncbox_sync() {
  clear_has_configure_syncbox_sync();
  ::ccd::SyncFeatureSettingsRequest* temp = configure_syncbox_sync_;
  configure_syncbox_sync_ = NULL;
  return temp;
}

// optional bool enable_shared_by_me = 36;
inline bool UpdateSyncSettingsInput::has_enable_shared_by_me() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_shared_by_me() {
  _has_bits_[0] |= 0x08000000u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_shared_by_me() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void UpdateSyncSettingsInput::clear_enable_shared_by_me() {
  enable_shared_by_me_ = false;
  clear_has_enable_shared_by_me();
}
inline bool UpdateSyncSettingsInput::enable_shared_by_me() const {
  return enable_shared_by_me_;
}
inline void UpdateSyncSettingsInput::set_enable_shared_by_me(bool value) {
  set_has_enable_shared_by_me();
  enable_shared_by_me_ = value;
}

// optional bool enable_shared_with_me = 37;
inline bool UpdateSyncSettingsInput::has_enable_shared_with_me() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void UpdateSyncSettingsInput::set_has_enable_shared_with_me() {
  _has_bits_[0] |= 0x10000000u;
}
inline void UpdateSyncSettingsInput::clear_has_enable_shared_with_me() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void UpdateSyncSettingsInput::clear_enable_shared_with_me() {
  enable_shared_with_me_ = false;
  clear_has_enable_shared_with_me();
}
inline bool UpdateSyncSettingsInput::enable_shared_with_me() const {
  return enable_shared_with_me_;
}
inline void UpdateSyncSettingsInput::set_enable_shared_with_me(bool value) {
  set_has_enable_shared_with_me();
  enable_shared_with_me_ = value;
}

// -------------------------------------------------------------------

// UpdateSyncSettingsOutput

// optional sint32 set_my_device_name_err = 1;
inline bool UpdateSyncSettingsOutput::has_set_my_device_name_err() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_set_my_device_name_err() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSyncSettingsOutput::clear_has_set_my_device_name_err() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSyncSettingsOutput::clear_set_my_device_name_err() {
  set_my_device_name_err_ = 0;
  clear_has_set_my_device_name_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::set_my_device_name_err() const {
  return set_my_device_name_err_;
}
inline void UpdateSyncSettingsOutput::set_set_my_device_name_err(::google::protobuf::int32 value) {
  set_has_set_my_device_name_err();
  set_my_device_name_err_ = value;
}

// optional sint32 enable_camera_roll_err = 6;
inline bool UpdateSyncSettingsOutput::has_enable_camera_roll_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_camera_roll_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_camera_roll_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSyncSettingsOutput::clear_enable_camera_roll_err() {
  enable_camera_roll_err_ = 0;
  clear_has_enable_camera_roll_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_camera_roll_err() const {
  return enable_camera_roll_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_camera_roll_err(::google::protobuf::int32 value) {
  set_has_enable_camera_roll_err();
  enable_camera_roll_err_ = value;
}

// optional sint32 enable_global_delete_err = 34;
inline bool UpdateSyncSettingsOutput::has_enable_global_delete_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_global_delete_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_global_delete_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateSyncSettingsOutput::clear_enable_global_delete_err() {
  enable_global_delete_err_ = 0;
  clear_has_enable_global_delete_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_global_delete_err() const {
  return enable_global_delete_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_global_delete_err(::google::protobuf::int32 value) {
  set_has_enable_global_delete_err();
  enable_global_delete_err_ = value;
}

// optional sint32 enable_network_activity_err = 7;
inline bool UpdateSyncSettingsOutput::has_enable_network_activity_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_network_activity_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_network_activity_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateSyncSettingsOutput::clear_enable_network_activity_err() {
  enable_network_activity_err_ = 0;
  clear_has_enable_network_activity_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_network_activity_err() const {
  return enable_network_activity_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_network_activity_err(::google::protobuf::int32 value) {
  set_has_enable_network_activity_err();
  enable_network_activity_err_ = value;
}

// optional sint32 set_max_download_rate_err = 4;
inline bool UpdateSyncSettingsOutput::has_set_max_download_rate_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_set_max_download_rate_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateSyncSettingsOutput::clear_has_set_max_download_rate_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateSyncSettingsOutput::clear_set_max_download_rate_err() {
  set_max_download_rate_err_ = 0;
  clear_has_set_max_download_rate_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::set_max_download_rate_err() const {
  return set_max_download_rate_err_;
}
inline void UpdateSyncSettingsOutput::set_set_max_download_rate_err(::google::protobuf::int32 value) {
  set_has_set_max_download_rate_err();
  set_max_download_rate_err_ = value;
}

// optional sint32 set_max_upload_rate_err = 5;
inline bool UpdateSyncSettingsOutput::has_set_max_upload_rate_err() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_set_max_upload_rate_err() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateSyncSettingsOutput::clear_has_set_max_upload_rate_err() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateSyncSettingsOutput::clear_set_max_upload_rate_err() {
  set_max_upload_rate_err_ = 0;
  clear_has_set_max_upload_rate_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::set_max_upload_rate_err() const {
  return set_max_upload_rate_err_;
}
inline void UpdateSyncSettingsOutput::set_set_max_upload_rate_err(::google::protobuf::int32 value) {
  set_has_set_max_upload_rate_err();
  set_max_upload_rate_err_ = value;
}

// optional sint32 background_data_err = 10;
inline bool UpdateSyncSettingsOutput::has_background_data_err() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_background_data_err() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateSyncSettingsOutput::clear_has_background_data_err() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateSyncSettingsOutput::clear_background_data_err() {
  background_data_err_ = 0;
  clear_has_background_data_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::background_data_err() const {
  return background_data_err_;
}
inline void UpdateSyncSettingsOutput::set_background_data_err(::google::protobuf::int32 value) {
  set_has_background_data_err();
  background_data_err_ = value;
}

// optional sint32 auto_sync_err = 11;
inline bool UpdateSyncSettingsOutput::has_auto_sync_err() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_auto_sync_err() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpdateSyncSettingsOutput::clear_has_auto_sync_err() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpdateSyncSettingsOutput::clear_auto_sync_err() {
  auto_sync_err_ = 0;
  clear_has_auto_sync_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::auto_sync_err() const {
  return auto_sync_err_;
}
inline void UpdateSyncSettingsOutput::set_auto_sync_err(::google::protobuf::int32 value) {
  set_has_auto_sync_err();
  auto_sync_err_ = value;
}

// optional sint32 mobile_network_data_err = 12;
inline bool UpdateSyncSettingsOutput::has_mobile_network_data_err() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_mobile_network_data_err() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpdateSyncSettingsOutput::clear_has_mobile_network_data_err() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpdateSyncSettingsOutput::clear_mobile_network_data_err() {
  mobile_network_data_err_ = 0;
  clear_has_mobile_network_data_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::mobile_network_data_err() const {
  return mobile_network_data_err_;
}
inline void UpdateSyncSettingsOutput::set_mobile_network_data_err(::google::protobuf::int32 value) {
  set_has_mobile_network_data_err();
  mobile_network_data_err_ = value;
}

// optional sint32 add_camera_roll_upload_dirs_err = 13;
inline bool UpdateSyncSettingsOutput::has_add_camera_roll_upload_dirs_err() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_add_camera_roll_upload_dirs_err() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UpdateSyncSettingsOutput::clear_has_add_camera_roll_upload_dirs_err() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UpdateSyncSettingsOutput::clear_add_camera_roll_upload_dirs_err() {
  add_camera_roll_upload_dirs_err_ = 0;
  clear_has_add_camera_roll_upload_dirs_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::add_camera_roll_upload_dirs_err() const {
  return add_camera_roll_upload_dirs_err_;
}
inline void UpdateSyncSettingsOutput::set_add_camera_roll_upload_dirs_err(::google::protobuf::int32 value) {
  set_has_add_camera_roll_upload_dirs_err();
  add_camera_roll_upload_dirs_err_ = value;
}

// optional sint32 remove_camera_roll_upload_dirs_err = 14;
inline bool UpdateSyncSettingsOutput::has_remove_camera_roll_upload_dirs_err() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_remove_camera_roll_upload_dirs_err() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UpdateSyncSettingsOutput::clear_has_remove_camera_roll_upload_dirs_err() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UpdateSyncSettingsOutput::clear_remove_camera_roll_upload_dirs_err() {
  remove_camera_roll_upload_dirs_err_ = 0;
  clear_has_remove_camera_roll_upload_dirs_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::remove_camera_roll_upload_dirs_err() const {
  return remove_camera_roll_upload_dirs_err_;
}
inline void UpdateSyncSettingsOutput::set_remove_camera_roll_upload_dirs_err(::google::protobuf::int32 value) {
  set_has_remove_camera_roll_upload_dirs_err();
  remove_camera_roll_upload_dirs_err_ = value;
}

// optional sint32 trigger_camera_roll_upload_dir_err = 15;
inline bool UpdateSyncSettingsOutput::has_trigger_camera_roll_upload_dir_err() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_trigger_camera_roll_upload_dir_err() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UpdateSyncSettingsOutput::clear_has_trigger_camera_roll_upload_dir_err() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UpdateSyncSettingsOutput::clear_trigger_camera_roll_upload_dir_err() {
  trigger_camera_roll_upload_dir_err_ = 0;
  clear_has_trigger_camera_roll_upload_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::trigger_camera_roll_upload_dir_err() const {
  return trigger_camera_roll_upload_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_trigger_camera_roll_upload_dir_err(::google::protobuf::int32 value) {
  set_has_trigger_camera_roll_upload_dir_err();
  trigger_camera_roll_upload_dir_err_ = value;
}

// optional sint32 add_camera_roll_full_res_download_dir_err = 18;
inline bool UpdateSyncSettingsOutput::has_add_camera_roll_full_res_download_dir_err() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_add_camera_roll_full_res_download_dir_err() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UpdateSyncSettingsOutput::clear_has_add_camera_roll_full_res_download_dir_err() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UpdateSyncSettingsOutput::clear_add_camera_roll_full_res_download_dir_err() {
  add_camera_roll_full_res_download_dir_err_ = 0;
  clear_has_add_camera_roll_full_res_download_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::add_camera_roll_full_res_download_dir_err() const {
  return add_camera_roll_full_res_download_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_add_camera_roll_full_res_download_dir_err(::google::protobuf::int32 value) {
  set_has_add_camera_roll_full_res_download_dir_err();
  add_camera_roll_full_res_download_dir_err_ = value;
}

// optional sint32 remove_camera_roll_full_res_download_dir_err = 19;
inline bool UpdateSyncSettingsOutput::has_remove_camera_roll_full_res_download_dir_err() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_remove_camera_roll_full_res_download_dir_err() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UpdateSyncSettingsOutput::clear_has_remove_camera_roll_full_res_download_dir_err() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UpdateSyncSettingsOutput::clear_remove_camera_roll_full_res_download_dir_err() {
  remove_camera_roll_full_res_download_dir_err_ = 0;
  clear_has_remove_camera_roll_full_res_download_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::remove_camera_roll_full_res_download_dir_err() const {
  return remove_camera_roll_full_res_download_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_remove_camera_roll_full_res_download_dir_err(::google::protobuf::int32 value) {
  set_has_remove_camera_roll_full_res_download_dir_err();
  remove_camera_roll_full_res_download_dir_err_ = value;
}

// optional sint32 add_camera_roll_low_res_download_dir_err = 20;
inline bool UpdateSyncSettingsOutput::has_add_camera_roll_low_res_download_dir_err() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_add_camera_roll_low_res_download_dir_err() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UpdateSyncSettingsOutput::clear_has_add_camera_roll_low_res_download_dir_err() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UpdateSyncSettingsOutput::clear_add_camera_roll_low_res_download_dir_err() {
  add_camera_roll_low_res_download_dir_err_ = 0;
  clear_has_add_camera_roll_low_res_download_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::add_camera_roll_low_res_download_dir_err() const {
  return add_camera_roll_low_res_download_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_add_camera_roll_low_res_download_dir_err(::google::protobuf::int32 value) {
  set_has_add_camera_roll_low_res_download_dir_err();
  add_camera_roll_low_res_download_dir_err_ = value;
}

// optional sint32 remove_camera_roll_low_res_download_dir_err = 21;
inline bool UpdateSyncSettingsOutput::has_remove_camera_roll_low_res_download_dir_err() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_remove_camera_roll_low_res_download_dir_err() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UpdateSyncSettingsOutput::clear_has_remove_camera_roll_low_res_download_dir_err() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UpdateSyncSettingsOutput::clear_remove_camera_roll_low_res_download_dir_err() {
  remove_camera_roll_low_res_download_dir_err_ = 0;
  clear_has_remove_camera_roll_low_res_download_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::remove_camera_roll_low_res_download_dir_err() const {
  return remove_camera_roll_low_res_download_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_remove_camera_roll_low_res_download_dir_err(::google::protobuf::int32 value) {
  set_has_remove_camera_roll_low_res_download_dir_err();
  remove_camera_roll_low_res_download_dir_err_ = value;
}

// optional sint32 add_camera_roll_thumb_download_dir_err = 32;
inline bool UpdateSyncSettingsOutput::has_add_camera_roll_thumb_download_dir_err() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_add_camera_roll_thumb_download_dir_err() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UpdateSyncSettingsOutput::clear_has_add_camera_roll_thumb_download_dir_err() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UpdateSyncSettingsOutput::clear_add_camera_roll_thumb_download_dir_err() {
  add_camera_roll_thumb_download_dir_err_ = 0;
  clear_has_add_camera_roll_thumb_download_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::add_camera_roll_thumb_download_dir_err() const {
  return add_camera_roll_thumb_download_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_add_camera_roll_thumb_download_dir_err(::google::protobuf::int32 value) {
  set_has_add_camera_roll_thumb_download_dir_err();
  add_camera_roll_thumb_download_dir_err_ = value;
}

// optional sint32 remove_camera_roll_thumb_download_dir_err = 33;
inline bool UpdateSyncSettingsOutput::has_remove_camera_roll_thumb_download_dir_err() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_remove_camera_roll_thumb_download_dir_err() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UpdateSyncSettingsOutput::clear_has_remove_camera_roll_thumb_download_dir_err() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UpdateSyncSettingsOutput::clear_remove_camera_roll_thumb_download_dir_err() {
  remove_camera_roll_thumb_download_dir_err_ = 0;
  clear_has_remove_camera_roll_thumb_download_dir_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::remove_camera_roll_thumb_download_dir_err() const {
  return remove_camera_roll_thumb_download_dir_err_;
}
inline void UpdateSyncSettingsOutput::set_remove_camera_roll_thumb_download_dir_err(::google::protobuf::int32 value) {
  set_has_remove_camera_roll_thumb_download_dir_err();
  remove_camera_roll_thumb_download_dir_err_ = value;
}

// optional sint32 send_file_to_camera_roll_err = 22;
inline bool UpdateSyncSettingsOutput::has_send_file_to_camera_roll_err() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_send_file_to_camera_roll_err() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UpdateSyncSettingsOutput::clear_has_send_file_to_camera_roll_err() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UpdateSyncSettingsOutput::clear_send_file_to_camera_roll_err() {
  send_file_to_camera_roll_err_ = 0;
  clear_has_send_file_to_camera_roll_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::send_file_to_camera_roll_err() const {
  return send_file_to_camera_roll_err_;
}
inline void UpdateSyncSettingsOutput::set_send_file_to_camera_roll_err(::google::protobuf::int32 value) {
  set_has_send_file_to_camera_roll_err();
  send_file_to_camera_roll_err_ = value;
}

// optional sint32 configure_notes_sync_err = 26;
inline bool UpdateSyncSettingsOutput::has_configure_notes_sync_err() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_configure_notes_sync_err() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UpdateSyncSettingsOutput::clear_has_configure_notes_sync_err() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UpdateSyncSettingsOutput::clear_configure_notes_sync_err() {
  configure_notes_sync_err_ = 0;
  clear_has_configure_notes_sync_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::configure_notes_sync_err() const {
  return configure_notes_sync_err_;
}
inline void UpdateSyncSettingsOutput::set_configure_notes_sync_err(::google::protobuf::int32 value) {
  set_has_configure_notes_sync_err();
  configure_notes_sync_err_ = value;
}

// optional sint32 enable_notes_sync_err = 27;
inline bool UpdateSyncSettingsOutput::has_enable_notes_sync_err() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_notes_sync_err() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_notes_sync_err() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UpdateSyncSettingsOutput::clear_enable_notes_sync_err() {
  enable_notes_sync_err_ = 0;
  clear_has_enable_notes_sync_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_notes_sync_err() const {
  return enable_notes_sync_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_notes_sync_err(::google::protobuf::int32 value) {
  set_has_enable_notes_sync_err();
  enable_notes_sync_err_ = value;
}

// optional sint32 migrate_mm_thumb_download_path_err = 28;
inline bool UpdateSyncSettingsOutput::has_migrate_mm_thumb_download_path_err() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_migrate_mm_thumb_download_path_err() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UpdateSyncSettingsOutput::clear_has_migrate_mm_thumb_download_path_err() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UpdateSyncSettingsOutput::clear_migrate_mm_thumb_download_path_err() {
  migrate_mm_thumb_download_path_err_ = 0;
  clear_has_migrate_mm_thumb_download_path_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::migrate_mm_thumb_download_path_err() const {
  return migrate_mm_thumb_download_path_err_;
}
inline void UpdateSyncSettingsOutput::set_migrate_mm_thumb_download_path_err(::google::protobuf::int32 value) {
  set_has_migrate_mm_thumb_download_path_err();
  migrate_mm_thumb_download_path_err_ = value;
}

// optional sint32 enable_mm_thumb_sync_err = 29;
inline bool UpdateSyncSettingsOutput::has_enable_mm_thumb_sync_err() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_mm_thumb_sync_err() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_mm_thumb_sync_err() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UpdateSyncSettingsOutput::clear_enable_mm_thumb_sync_err() {
  enable_mm_thumb_sync_err_ = 0;
  clear_has_enable_mm_thumb_sync_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_mm_thumb_sync_err() const {
  return enable_mm_thumb_sync_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_mm_thumb_sync_err(::google::protobuf::int32 value) {
  set_has_enable_mm_thumb_sync_err();
  enable_mm_thumb_sync_err_ = value;
}

// optional sint32 enable_clouddoc_sync_err = 30;
inline bool UpdateSyncSettingsOutput::has_enable_clouddoc_sync_err() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_clouddoc_sync_err() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_clouddoc_sync_err() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UpdateSyncSettingsOutput::clear_enable_clouddoc_sync_err() {
  enable_clouddoc_sync_err_ = 0;
  clear_has_enable_clouddoc_sync_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_clouddoc_sync_err() const {
  return enable_clouddoc_sync_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_clouddoc_sync_err(::google::protobuf::int32 value) {
  set_has_enable_clouddoc_sync_err();
  enable_clouddoc_sync_err_ = value;
}

// optional sint32 configure_syncbox_sync_err = 31;
inline bool UpdateSyncSettingsOutput::has_configure_syncbox_sync_err() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_configure_syncbox_sync_err() {
  _has_bits_[0] |= 0x01000000u;
}
inline void UpdateSyncSettingsOutput::clear_has_configure_syncbox_sync_err() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void UpdateSyncSettingsOutput::clear_configure_syncbox_sync_err() {
  configure_syncbox_sync_err_ = 0;
  clear_has_configure_syncbox_sync_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::configure_syncbox_sync_err() const {
  return configure_syncbox_sync_err_;
}
inline void UpdateSyncSettingsOutput::set_configure_syncbox_sync_err(::google::protobuf::int32 value) {
  set_has_configure_syncbox_sync_err();
  configure_syncbox_sync_err_ = value;
}

// optional sint32 enable_shared_by_me_err = 35;
inline bool UpdateSyncSettingsOutput::has_enable_shared_by_me_err() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_shared_by_me_err() {
  _has_bits_[0] |= 0x02000000u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_shared_by_me_err() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void UpdateSyncSettingsOutput::clear_enable_shared_by_me_err() {
  enable_shared_by_me_err_ = 0;
  clear_has_enable_shared_by_me_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_shared_by_me_err() const {
  return enable_shared_by_me_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_shared_by_me_err(::google::protobuf::int32 value) {
  set_has_enable_shared_by_me_err();
  enable_shared_by_me_err_ = value;
}

// optional sint32 enable_shared_with_me_err = 36;
inline bool UpdateSyncSettingsOutput::has_enable_shared_with_me_err() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void UpdateSyncSettingsOutput::set_has_enable_shared_with_me_err() {
  _has_bits_[0] |= 0x04000000u;
}
inline void UpdateSyncSettingsOutput::clear_has_enable_shared_with_me_err() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void UpdateSyncSettingsOutput::clear_enable_shared_with_me_err() {
  enable_shared_with_me_err_ = 0;
  clear_has_enable_shared_with_me_err();
}
inline ::google::protobuf::int32 UpdateSyncSettingsOutput::enable_shared_with_me_err() const {
  return enable_shared_with_me_err_;
}
inline void UpdateSyncSettingsOutput::set_enable_shared_with_me_err(::google::protobuf::int32 value) {
  set_has_enable_shared_with_me_err();
  enable_shared_with_me_err_ = value;
}

// -------------------------------------------------------------------

// UpdateSyncSubscriptionInput

// required fixed64 user_id = 1;
inline bool UpdateSyncSubscriptionInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSyncSubscriptionInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSyncSubscriptionInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSyncSubscriptionInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UpdateSyncSubscriptionInput::user_id() const {
  return user_id_;
}
inline void UpdateSyncSubscriptionInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 dataset_id = 2;
inline bool UpdateSyncSubscriptionInput::has_dataset_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSyncSubscriptionInput::set_has_dataset_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSyncSubscriptionInput::clear_has_dataset_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSyncSubscriptionInput::clear_dataset_id() {
  dataset_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dataset_id();
}
inline ::google::protobuf::uint64 UpdateSyncSubscriptionInput::dataset_id() const {
  return dataset_id_;
}
inline void UpdateSyncSubscriptionInput::set_dataset_id(::google::protobuf::uint64 value) {
  set_has_dataset_id();
  dataset_id_ = value;
}

// optional fixed64 device_id = 3;
inline bool UpdateSyncSubscriptionInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateSyncSubscriptionInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateSyncSubscriptionInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateSyncSubscriptionInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 UpdateSyncSubscriptionInput::device_id() const {
  return device_id_;
}
inline void UpdateSyncSubscriptionInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional string new_filter = 4;
inline bool UpdateSyncSubscriptionInput::has_new_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateSyncSubscriptionInput::set_has_new_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateSyncSubscriptionInput::clear_has_new_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateSyncSubscriptionInput::clear_new_filter() {
  if (new_filter_ != &::google::protobuf::internal::kEmptyString) {
    new_filter_->clear();
  }
  clear_has_new_filter();
}
inline const ::std::string& UpdateSyncSubscriptionInput::new_filter() const {
  return *new_filter_;
}
inline void UpdateSyncSubscriptionInput::set_new_filter(const ::std::string& value) {
  set_has_new_filter();
  if (new_filter_ == &::google::protobuf::internal::kEmptyString) {
    new_filter_ = new ::std::string;
  }
  new_filter_->assign(value);
}
inline void UpdateSyncSubscriptionInput::set_new_filter(const char* value) {
  set_has_new_filter();
  if (new_filter_ == &::google::protobuf::internal::kEmptyString) {
    new_filter_ = new ::std::string;
  }
  new_filter_->assign(value);
}
inline void UpdateSyncSubscriptionInput::set_new_filter(const char* value, size_t size) {
  set_has_new_filter();
  if (new_filter_ == &::google::protobuf::internal::kEmptyString) {
    new_filter_ = new ::std::string;
  }
  new_filter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateSyncSubscriptionInput::mutable_new_filter() {
  set_has_new_filter();
  if (new_filter_ == &::google::protobuf::internal::kEmptyString) {
    new_filter_ = new ::std::string;
  }
  return new_filter_;
}
inline ::std::string* UpdateSyncSubscriptionInput::release_new_filter() {
  clear_has_new_filter();
  if (new_filter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_filter_;
    new_filter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 max_size = 5;
inline bool UpdateSyncSubscriptionInput::has_max_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateSyncSubscriptionInput::set_has_max_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateSyncSubscriptionInput::clear_has_max_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateSyncSubscriptionInput::clear_max_size() {
  max_size_ = GOOGLE_ULONGLONG(0);
  clear_has_max_size();
}
inline ::google::protobuf::uint64 UpdateSyncSubscriptionInput::max_size() const {
  return max_size_;
}
inline void UpdateSyncSubscriptionInput::set_max_size(::google::protobuf::uint64 value) {
  set_has_max_size();
  max_size_ = value;
}

// optional fixed64 max_files = 6;
inline bool UpdateSyncSubscriptionInput::has_max_files() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateSyncSubscriptionInput::set_has_max_files() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateSyncSubscriptionInput::clear_has_max_files() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateSyncSubscriptionInput::clear_max_files() {
  max_files_ = GOOGLE_ULONGLONG(0);
  clear_has_max_files();
}
inline ::google::protobuf::uint64 UpdateSyncSubscriptionInput::max_files() const {
  return max_files_;
}
inline void UpdateSyncSubscriptionInput::set_max_files(::google::protobuf::uint64 value) {
  set_has_max_files();
  max_files_ = value;
}

// -------------------------------------------------------------------

// SWUpdateCheckInput

// required string app_guid = 1;
inline bool SWUpdateCheckInput::has_app_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateCheckInput::set_has_app_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateCheckInput::clear_has_app_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateCheckInput::clear_app_guid() {
  if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
    app_guid_->clear();
  }
  clear_has_app_guid();
}
inline const ::std::string& SWUpdateCheckInput::app_guid() const {
  return *app_guid_;
}
inline void SWUpdateCheckInput::set_app_guid(const ::std::string& value) {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  app_guid_->assign(value);
}
inline void SWUpdateCheckInput::set_app_guid(const char* value) {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  app_guid_->assign(value);
}
inline void SWUpdateCheckInput::set_app_guid(const char* value, size_t size) {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  app_guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateCheckInput::mutable_app_guid() {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  return app_guid_;
}
inline ::std::string* SWUpdateCheckInput::release_app_guid() {
  clear_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_guid_;
    app_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string app_version = 2;
inline bool SWUpdateCheckInput::has_app_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWUpdateCheckInput::set_has_app_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWUpdateCheckInput::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWUpdateCheckInput::clear_app_version() {
  if (app_version_ != &::google::protobuf::internal::kEmptyString) {
    app_version_->clear();
  }
  clear_has_app_version();
}
inline const ::std::string& SWUpdateCheckInput::app_version() const {
  return *app_version_;
}
inline void SWUpdateCheckInput::set_app_version(const ::std::string& value) {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  app_version_->assign(value);
}
inline void SWUpdateCheckInput::set_app_version(const char* value) {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  app_version_->assign(value);
}
inline void SWUpdateCheckInput::set_app_version(const char* value, size_t size) {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  app_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateCheckInput::mutable_app_version() {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  return app_version_;
}
inline ::std::string* SWUpdateCheckInput::release_app_version() {
  clear_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_version_;
    app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool update_cache = 3;
inline bool SWUpdateCheckInput::has_update_cache() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SWUpdateCheckInput::set_has_update_cache() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SWUpdateCheckInput::clear_has_update_cache() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SWUpdateCheckInput::clear_update_cache() {
  update_cache_ = false;
  clear_has_update_cache();
}
inline bool SWUpdateCheckInput::update_cache() const {
  return update_cache_;
}
inline void SWUpdateCheckInput::set_update_cache(bool value) {
  set_has_update_cache();
  update_cache_ = value;
}

// -------------------------------------------------------------------

// SWUpdateCheckOutput

// required uint64 update_mask = 1;
inline bool SWUpdateCheckOutput::has_update_mask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateCheckOutput::set_has_update_mask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateCheckOutput::clear_has_update_mask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateCheckOutput::clear_update_mask() {
  update_mask_ = GOOGLE_ULONGLONG(0);
  clear_has_update_mask();
}
inline ::google::protobuf::uint64 SWUpdateCheckOutput::update_mask() const {
  return update_mask_;
}
inline void SWUpdateCheckOutput::set_update_mask(::google::protobuf::uint64 value) {
  set_has_update_mask();
  update_mask_ = value;
}

// required string latest_app_version = 2;
inline bool SWUpdateCheckOutput::has_latest_app_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWUpdateCheckOutput::set_has_latest_app_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWUpdateCheckOutput::clear_has_latest_app_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWUpdateCheckOutput::clear_latest_app_version() {
  if (latest_app_version_ != &::google::protobuf::internal::kEmptyString) {
    latest_app_version_->clear();
  }
  clear_has_latest_app_version();
}
inline const ::std::string& SWUpdateCheckOutput::latest_app_version() const {
  return *latest_app_version_;
}
inline void SWUpdateCheckOutput::set_latest_app_version(const ::std::string& value) {
  set_has_latest_app_version();
  if (latest_app_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_app_version_ = new ::std::string;
  }
  latest_app_version_->assign(value);
}
inline void SWUpdateCheckOutput::set_latest_app_version(const char* value) {
  set_has_latest_app_version();
  if (latest_app_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_app_version_ = new ::std::string;
  }
  latest_app_version_->assign(value);
}
inline void SWUpdateCheckOutput::set_latest_app_version(const char* value, size_t size) {
  set_has_latest_app_version();
  if (latest_app_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_app_version_ = new ::std::string;
  }
  latest_app_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateCheckOutput::mutable_latest_app_version() {
  set_has_latest_app_version();
  if (latest_app_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_app_version_ = new ::std::string;
  }
  return latest_app_version_;
}
inline ::std::string* SWUpdateCheckOutput::release_latest_app_version() {
  clear_has_latest_app_version();
  if (latest_app_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latest_app_version_;
    latest_app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string latest_ccd_version = 3;
inline bool SWUpdateCheckOutput::has_latest_ccd_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SWUpdateCheckOutput::set_has_latest_ccd_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SWUpdateCheckOutput::clear_has_latest_ccd_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SWUpdateCheckOutput::clear_latest_ccd_version() {
  if (latest_ccd_version_ != &::google::protobuf::internal::kEmptyString) {
    latest_ccd_version_->clear();
  }
  clear_has_latest_ccd_version();
}
inline const ::std::string& SWUpdateCheckOutput::latest_ccd_version() const {
  return *latest_ccd_version_;
}
inline void SWUpdateCheckOutput::set_latest_ccd_version(const ::std::string& value) {
  set_has_latest_ccd_version();
  if (latest_ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_ccd_version_ = new ::std::string;
  }
  latest_ccd_version_->assign(value);
}
inline void SWUpdateCheckOutput::set_latest_ccd_version(const char* value) {
  set_has_latest_ccd_version();
  if (latest_ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_ccd_version_ = new ::std::string;
  }
  latest_ccd_version_->assign(value);
}
inline void SWUpdateCheckOutput::set_latest_ccd_version(const char* value, size_t size) {
  set_has_latest_ccd_version();
  if (latest_ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_ccd_version_ = new ::std::string;
  }
  latest_ccd_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateCheckOutput::mutable_latest_ccd_version() {
  set_has_latest_ccd_version();
  if (latest_ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    latest_ccd_version_ = new ::std::string;
  }
  return latest_ccd_version_;
}
inline ::std::string* SWUpdateCheckOutput::release_latest_ccd_version() {
  clear_has_latest_ccd_version();
  if (latest_ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = latest_ccd_version_;
    latest_ccd_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string change_log = 4;
inline bool SWUpdateCheckOutput::has_change_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SWUpdateCheckOutput::set_has_change_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SWUpdateCheckOutput::clear_has_change_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SWUpdateCheckOutput::clear_change_log() {
  if (change_log_ != &::google::protobuf::internal::kEmptyString) {
    change_log_->clear();
  }
  clear_has_change_log();
}
inline const ::std::string& SWUpdateCheckOutput::change_log() const {
  return *change_log_;
}
inline void SWUpdateCheckOutput::set_change_log(const ::std::string& value) {
  set_has_change_log();
  if (change_log_ == &::google::protobuf::internal::kEmptyString) {
    change_log_ = new ::std::string;
  }
  change_log_->assign(value);
}
inline void SWUpdateCheckOutput::set_change_log(const char* value) {
  set_has_change_log();
  if (change_log_ == &::google::protobuf::internal::kEmptyString) {
    change_log_ = new ::std::string;
  }
  change_log_->assign(value);
}
inline void SWUpdateCheckOutput::set_change_log(const char* value, size_t size) {
  set_has_change_log();
  if (change_log_ == &::google::protobuf::internal::kEmptyString) {
    change_log_ = new ::std::string;
  }
  change_log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateCheckOutput::mutable_change_log() {
  set_has_change_log();
  if (change_log_ == &::google::protobuf::internal::kEmptyString) {
    change_log_ = new ::std::string;
  }
  return change_log_;
}
inline ::std::string* SWUpdateCheckOutput::release_change_log() {
  clear_has_change_log();
  if (change_log_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = change_log_;
    change_log_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 app_size = 5;
inline bool SWUpdateCheckOutput::has_app_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SWUpdateCheckOutput::set_has_app_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SWUpdateCheckOutput::clear_has_app_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SWUpdateCheckOutput::clear_app_size() {
  app_size_ = GOOGLE_ULONGLONG(0);
  clear_has_app_size();
}
inline ::google::protobuf::uint64 SWUpdateCheckOutput::app_size() const {
  return app_size_;
}
inline void SWUpdateCheckOutput::set_app_size(::google::protobuf::uint64 value) {
  set_has_app_size();
  app_size_ = value;
}

// optional bool is_qa = 6;
inline bool SWUpdateCheckOutput::has_is_qa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SWUpdateCheckOutput::set_has_is_qa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SWUpdateCheckOutput::clear_has_is_qa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SWUpdateCheckOutput::clear_is_qa() {
  is_qa_ = false;
  clear_has_is_qa();
}
inline bool SWUpdateCheckOutput::is_qa() const {
  return is_qa_;
}
inline void SWUpdateCheckOutput::set_is_qa(bool value) {
  set_has_is_qa();
  is_qa_ = value;
}

// optional bool is_auto_update_disabled = 7;
inline bool SWUpdateCheckOutput::has_is_auto_update_disabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SWUpdateCheckOutput::set_has_is_auto_update_disabled() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SWUpdateCheckOutput::clear_has_is_auto_update_disabled() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SWUpdateCheckOutput::clear_is_auto_update_disabled() {
  is_auto_update_disabled_ = false;
  clear_has_is_auto_update_disabled();
}
inline bool SWUpdateCheckOutput::is_auto_update_disabled() const {
  return is_auto_update_disabled_;
}
inline void SWUpdateCheckOutput::set_is_auto_update_disabled(bool value) {
  set_has_is_auto_update_disabled();
  is_auto_update_disabled_ = value;
}

// optional bool is_infra_download = 8;
inline bool SWUpdateCheckOutput::has_is_infra_download() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SWUpdateCheckOutput::set_has_is_infra_download() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SWUpdateCheckOutput::clear_has_is_infra_download() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SWUpdateCheckOutput::clear_is_infra_download() {
  is_infra_download_ = false;
  clear_has_is_infra_download();
}
inline bool SWUpdateCheckOutput::is_infra_download() const {
  return is_infra_download_;
}
inline void SWUpdateCheckOutput::set_is_infra_download(bool value) {
  set_has_is_infra_download();
  is_infra_download_ = value;
}

// -------------------------------------------------------------------

// SWUpdateBeginDownloadInput

// required string app_guid = 1;
inline bool SWUpdateBeginDownloadInput::has_app_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateBeginDownloadInput::set_has_app_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateBeginDownloadInput::clear_has_app_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateBeginDownloadInput::clear_app_guid() {
  if (app_guid_ != &::google::protobuf::internal::kEmptyString) {
    app_guid_->clear();
  }
  clear_has_app_guid();
}
inline const ::std::string& SWUpdateBeginDownloadInput::app_guid() const {
  return *app_guid_;
}
inline void SWUpdateBeginDownloadInput::set_app_guid(const ::std::string& value) {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  app_guid_->assign(value);
}
inline void SWUpdateBeginDownloadInput::set_app_guid(const char* value) {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  app_guid_->assign(value);
}
inline void SWUpdateBeginDownloadInput::set_app_guid(const char* value, size_t size) {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  app_guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateBeginDownloadInput::mutable_app_guid() {
  set_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    app_guid_ = new ::std::string;
  }
  return app_guid_;
}
inline ::std::string* SWUpdateBeginDownloadInput::release_app_guid() {
  clear_has_app_guid();
  if (app_guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_guid_;
    app_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string app_version = 2;
inline bool SWUpdateBeginDownloadInput::has_app_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWUpdateBeginDownloadInput::set_has_app_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWUpdateBeginDownloadInput::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWUpdateBeginDownloadInput::clear_app_version() {
  if (app_version_ != &::google::protobuf::internal::kEmptyString) {
    app_version_->clear();
  }
  clear_has_app_version();
}
inline const ::std::string& SWUpdateBeginDownloadInput::app_version() const {
  return *app_version_;
}
inline void SWUpdateBeginDownloadInput::set_app_version(const ::std::string& value) {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  app_version_->assign(value);
}
inline void SWUpdateBeginDownloadInput::set_app_version(const char* value) {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  app_version_->assign(value);
}
inline void SWUpdateBeginDownloadInput::set_app_version(const char* value, size_t size) {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  app_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateBeginDownloadInput::mutable_app_version() {
  set_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    app_version_ = new ::std::string;
  }
  return app_version_;
}
inline ::std::string* SWUpdateBeginDownloadInput::release_app_version() {
  clear_has_app_version();
  if (app_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_version_;
    app_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SWUpdateBeginDownloadOutput

// required uint64 handle = 1;
inline bool SWUpdateBeginDownloadOutput::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateBeginDownloadOutput::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateBeginDownloadOutput::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateBeginDownloadOutput::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 SWUpdateBeginDownloadOutput::handle() const {
  return handle_;
}
inline void SWUpdateBeginDownloadOutput::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
}

// -------------------------------------------------------------------

// SWUpdateGetDownloadProgressInput

// required uint64 handle = 1;
inline bool SWUpdateGetDownloadProgressInput::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateGetDownloadProgressInput::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateGetDownloadProgressInput::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateGetDownloadProgressInput::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 SWUpdateGetDownloadProgressInput::handle() const {
  return handle_;
}
inline void SWUpdateGetDownloadProgressInput::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
}

// -------------------------------------------------------------------

// SWUpdateGetDownloadProgressOutput

// required uint64 total_transfer_size = 1;
inline bool SWUpdateGetDownloadProgressOutput::has_total_transfer_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateGetDownloadProgressOutput::set_has_total_transfer_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateGetDownloadProgressOutput::clear_has_total_transfer_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateGetDownloadProgressOutput::clear_total_transfer_size() {
  total_transfer_size_ = GOOGLE_ULONGLONG(0);
  clear_has_total_transfer_size();
}
inline ::google::protobuf::uint64 SWUpdateGetDownloadProgressOutput::total_transfer_size() const {
  return total_transfer_size_;
}
inline void SWUpdateGetDownloadProgressOutput::set_total_transfer_size(::google::protobuf::uint64 value) {
  set_has_total_transfer_size();
  total_transfer_size_ = value;
}

// required uint64 bytes_transferred_cnt = 2;
inline bool SWUpdateGetDownloadProgressOutput::has_bytes_transferred_cnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWUpdateGetDownloadProgressOutput::set_has_bytes_transferred_cnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWUpdateGetDownloadProgressOutput::clear_has_bytes_transferred_cnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWUpdateGetDownloadProgressOutput::clear_bytes_transferred_cnt() {
  bytes_transferred_cnt_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_transferred_cnt();
}
inline ::google::protobuf::uint64 SWUpdateGetDownloadProgressOutput::bytes_transferred_cnt() const {
  return bytes_transferred_cnt_;
}
inline void SWUpdateGetDownloadProgressOutput::set_bytes_transferred_cnt(::google::protobuf::uint64 value) {
  set_has_bytes_transferred_cnt();
  bytes_transferred_cnt_ = value;
}

// required .ccd.SWUpdateDownloadState_t state = 3;
inline bool SWUpdateGetDownloadProgressOutput::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SWUpdateGetDownloadProgressOutput::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SWUpdateGetDownloadProgressOutput::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SWUpdateGetDownloadProgressOutput::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ccd::SWUpdateDownloadState_t SWUpdateGetDownloadProgressOutput::state() const {
  return static_cast< ccd::SWUpdateDownloadState_t >(state_);
}
inline void SWUpdateGetDownloadProgressOutput::set_state(ccd::SWUpdateDownloadState_t value) {
  GOOGLE_DCHECK(ccd::SWUpdateDownloadState_t_IsValid(value));
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// SWUpdateEndDownloadInput

// required uint64 handle = 1;
inline bool SWUpdateEndDownloadInput::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateEndDownloadInput::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateEndDownloadInput::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateEndDownloadInput::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 SWUpdateEndDownloadInput::handle() const {
  return handle_;
}
inline void SWUpdateEndDownloadInput::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
}

// required string file_location = 2;
inline bool SWUpdateEndDownloadInput::has_file_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWUpdateEndDownloadInput::set_has_file_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWUpdateEndDownloadInput::clear_has_file_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWUpdateEndDownloadInput::clear_file_location() {
  if (file_location_ != &::google::protobuf::internal::kEmptyString) {
    file_location_->clear();
  }
  clear_has_file_location();
}
inline const ::std::string& SWUpdateEndDownloadInput::file_location() const {
  return *file_location_;
}
inline void SWUpdateEndDownloadInput::set_file_location(const ::std::string& value) {
  set_has_file_location();
  if (file_location_ == &::google::protobuf::internal::kEmptyString) {
    file_location_ = new ::std::string;
  }
  file_location_->assign(value);
}
inline void SWUpdateEndDownloadInput::set_file_location(const char* value) {
  set_has_file_location();
  if (file_location_ == &::google::protobuf::internal::kEmptyString) {
    file_location_ = new ::std::string;
  }
  file_location_->assign(value);
}
inline void SWUpdateEndDownloadInput::set_file_location(const char* value, size_t size) {
  set_has_file_location();
  if (file_location_ == &::google::protobuf::internal::kEmptyString) {
    file_location_ = new ::std::string;
  }
  file_location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateEndDownloadInput::mutable_file_location() {
  set_has_file_location();
  if (file_location_ == &::google::protobuf::internal::kEmptyString) {
    file_location_ = new ::std::string;
  }
  return file_location_;
}
inline ::std::string* SWUpdateEndDownloadInput::release_file_location() {
  clear_has_file_location();
  if (file_location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_location_;
    file_location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SWUpdateCancelDownloadInput

// required uint64 handle = 1;
inline bool SWUpdateCancelDownloadInput::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateCancelDownloadInput::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateCancelDownloadInput::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateCancelDownloadInput::clear_handle() {
  handle_ = GOOGLE_ULONGLONG(0);
  clear_has_handle();
}
inline ::google::protobuf::uint64 SWUpdateCancelDownloadInput::handle() const {
  return handle_;
}
inline void SWUpdateCancelDownloadInput::set_handle(::google::protobuf::uint64 value) {
  set_has_handle();
  handle_ = value;
}

// -------------------------------------------------------------------

// SWUpdateSetCcdVersionInput

// required string ccd_guid = 1;
inline bool SWUpdateSetCcdVersionInput::has_ccd_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SWUpdateSetCcdVersionInput::set_has_ccd_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SWUpdateSetCcdVersionInput::clear_has_ccd_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SWUpdateSetCcdVersionInput::clear_ccd_guid() {
  if (ccd_guid_ != &::google::protobuf::internal::kEmptyString) {
    ccd_guid_->clear();
  }
  clear_has_ccd_guid();
}
inline const ::std::string& SWUpdateSetCcdVersionInput::ccd_guid() const {
  return *ccd_guid_;
}
inline void SWUpdateSetCcdVersionInput::set_ccd_guid(const ::std::string& value) {
  set_has_ccd_guid();
  if (ccd_guid_ == &::google::protobuf::internal::kEmptyString) {
    ccd_guid_ = new ::std::string;
  }
  ccd_guid_->assign(value);
}
inline void SWUpdateSetCcdVersionInput::set_ccd_guid(const char* value) {
  set_has_ccd_guid();
  if (ccd_guid_ == &::google::protobuf::internal::kEmptyString) {
    ccd_guid_ = new ::std::string;
  }
  ccd_guid_->assign(value);
}
inline void SWUpdateSetCcdVersionInput::set_ccd_guid(const char* value, size_t size) {
  set_has_ccd_guid();
  if (ccd_guid_ == &::google::protobuf::internal::kEmptyString) {
    ccd_guid_ = new ::std::string;
  }
  ccd_guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateSetCcdVersionInput::mutable_ccd_guid() {
  set_has_ccd_guid();
  if (ccd_guid_ == &::google::protobuf::internal::kEmptyString) {
    ccd_guid_ = new ::std::string;
  }
  return ccd_guid_;
}
inline ::std::string* SWUpdateSetCcdVersionInput::release_ccd_guid() {
  clear_has_ccd_guid();
  if (ccd_guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccd_guid_;
    ccd_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string ccd_version = 2;
inline bool SWUpdateSetCcdVersionInput::has_ccd_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SWUpdateSetCcdVersionInput::set_has_ccd_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SWUpdateSetCcdVersionInput::clear_has_ccd_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SWUpdateSetCcdVersionInput::clear_ccd_version() {
  if (ccd_version_ != &::google::protobuf::internal::kEmptyString) {
    ccd_version_->clear();
  }
  clear_has_ccd_version();
}
inline const ::std::string& SWUpdateSetCcdVersionInput::ccd_version() const {
  return *ccd_version_;
}
inline void SWUpdateSetCcdVersionInput::set_ccd_version(const ::std::string& value) {
  set_has_ccd_version();
  if (ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    ccd_version_ = new ::std::string;
  }
  ccd_version_->assign(value);
}
inline void SWUpdateSetCcdVersionInput::set_ccd_version(const char* value) {
  set_has_ccd_version();
  if (ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    ccd_version_ = new ::std::string;
  }
  ccd_version_->assign(value);
}
inline void SWUpdateSetCcdVersionInput::set_ccd_version(const char* value, size_t size) {
  set_has_ccd_version();
  if (ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    ccd_version_ = new ::std::string;
  }
  ccd_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SWUpdateSetCcdVersionInput::mutable_ccd_version() {
  set_has_ccd_version();
  if (ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    ccd_version_ = new ::std::string;
  }
  return ccd_version_;
}
inline ::std::string* SWUpdateSetCcdVersionInput::release_ccd_version() {
  clear_has_ccd_version();
  if (ccd_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ccd_version_;
    ccd_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UpdateSystemStateInput

// optional bool do_shutdown = 12 [default = false];
inline bool UpdateSystemStateInput::has_do_shutdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSystemStateInput::set_has_do_shutdown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSystemStateInput::clear_has_do_shutdown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSystemStateInput::clear_do_shutdown() {
  do_shutdown_ = false;
  clear_has_do_shutdown();
}
inline bool UpdateSystemStateInput::do_shutdown() const {
  return do_shutdown_;
}
inline void UpdateSystemStateInput::set_do_shutdown(bool value) {
  set_has_do_shutdown();
  do_shutdown_ = value;
}

// optional bool report_network_connected = 13 [default = false];
inline bool UpdateSystemStateInput::has_report_network_connected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSystemStateInput::set_has_report_network_connected() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSystemStateInput::clear_has_report_network_connected() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSystemStateInput::clear_report_network_connected() {
  report_network_connected_ = false;
  clear_has_report_network_connected();
}
inline bool UpdateSystemStateInput::report_network_connected() const {
  return report_network_connected_;
}
inline void UpdateSystemStateInput::set_report_network_connected(bool value) {
  set_has_report_network_connected();
  report_network_connected_ = value;
}

// optional bool report_different_network = 23 [default = false];
inline bool UpdateSystemStateInput::has_report_different_network() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateSystemStateInput::set_has_report_different_network() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateSystemStateInput::clear_has_report_different_network() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateSystemStateInput::clear_report_different_network() {
  report_different_network_ = false;
  clear_has_report_different_network();
}
inline bool UpdateSystemStateInput::report_different_network() const {
  return report_different_network_;
}
inline void UpdateSystemStateInput::set_report_different_network(bool value) {
  set_has_report_different_network();
  report_different_network_ = value;
}

// optional sint32 background_mode_interval_sec = 8;
inline bool UpdateSystemStateInput::has_background_mode_interval_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateSystemStateInput::set_has_background_mode_interval_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateSystemStateInput::clear_has_background_mode_interval_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateSystemStateInput::clear_background_mode_interval_sec() {
  background_mode_interval_sec_ = 0;
  clear_has_background_mode_interval_sec();
}
inline ::google::protobuf::int32 UpdateSystemStateInput::background_mode_interval_sec() const {
  return background_mode_interval_sec_;
}
inline void UpdateSystemStateInput::set_background_mode_interval_sec(::google::protobuf::int32 value) {
  set_has_background_mode_interval_sec();
  background_mode_interval_sec_ = value;
}

// optional bool perform_background_tasks = 9 [default = false];
inline bool UpdateSystemStateInput::has_perform_background_tasks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateSystemStateInput::set_has_perform_background_tasks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateSystemStateInput::clear_has_perform_background_tasks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateSystemStateInput::clear_perform_background_tasks() {
  perform_background_tasks_ = false;
  clear_has_perform_background_tasks();
}
inline bool UpdateSystemStateInput::perform_background_tasks() const {
  return perform_background_tasks_;
}
inline void UpdateSystemStateInput::set_perform_background_tasks(bool value) {
  set_has_perform_background_tasks();
  perform_background_tasks_ = value;
}

// optional bool log_caches = 20 [default = false];
inline bool UpdateSystemStateInput::has_log_caches() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateSystemStateInput::set_has_log_caches() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateSystemStateInput::clear_has_log_caches() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateSystemStateInput::clear_log_caches() {
  log_caches_ = false;
  clear_has_log_caches();
}
inline bool UpdateSystemStateInput::log_caches() const {
  return log_caches_;
}
inline void UpdateSystemStateInput::set_log_caches(bool value) {
  set_has_log_caches();
  log_caches_ = value;
}

// optional bool only_mobile_network_available = 21;
inline bool UpdateSystemStateInput::has_only_mobile_network_available() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateSystemStateInput::set_has_only_mobile_network_available() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateSystemStateInput::clear_has_only_mobile_network_available() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateSystemStateInput::clear_only_mobile_network_available() {
  only_mobile_network_available_ = false;
  clear_has_only_mobile_network_available();
}
inline bool UpdateSystemStateInput::only_mobile_network_available() const {
  return only_mobile_network_available_;
}
inline void UpdateSystemStateInput::set_only_mobile_network_available(bool value) {
  set_has_only_mobile_network_available();
  only_mobile_network_available_ = value;
}

// optional bool stream_power_mode = 22;
inline bool UpdateSystemStateInput::has_stream_power_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UpdateSystemStateInput::set_has_stream_power_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UpdateSystemStateInput::clear_has_stream_power_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UpdateSystemStateInput::clear_stream_power_mode() {
  stream_power_mode_ = false;
  clear_has_stream_power_mode();
}
inline bool UpdateSystemStateInput::stream_power_mode() const {
  return stream_power_mode_;
}
inline void UpdateSystemStateInput::set_stream_power_mode(bool value) {
  set_has_stream_power_mode();
  stream_power_mode_ = value;
}

// optional bool enable_ioac = 24;
inline bool UpdateSystemStateInput::has_enable_ioac() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpdateSystemStateInput::set_has_enable_ioac() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpdateSystemStateInput::clear_has_enable_ioac() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpdateSystemStateInput::clear_enable_ioac() {
  enable_ioac_ = false;
  clear_has_enable_ioac();
}
inline bool UpdateSystemStateInput::enable_ioac() const {
  return enable_ioac_;
}
inline void UpdateSystemStateInput::set_enable_ioac(bool value) {
  set_has_enable_ioac();
  enable_ioac_ = value;
}

// -------------------------------------------------------------------

// UpdateSystemStateOutput

// optional sint32 do_shutdown = 12;
inline bool UpdateSystemStateOutput::has_do_shutdown() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSystemStateOutput::set_has_do_shutdown() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSystemStateOutput::clear_has_do_shutdown() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSystemStateOutput::clear_do_shutdown() {
  do_shutdown_ = 0;
  clear_has_do_shutdown();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::do_shutdown() const {
  return do_shutdown_;
}
inline void UpdateSystemStateOutput::set_do_shutdown(::google::protobuf::int32 value) {
  set_has_do_shutdown();
  do_shutdown_ = value;
}

// optional sint32 background_mode_interval_err = 8;
inline bool UpdateSystemStateOutput::has_background_mode_interval_err() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSystemStateOutput::set_has_background_mode_interval_err() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSystemStateOutput::clear_has_background_mode_interval_err() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSystemStateOutput::clear_background_mode_interval_err() {
  background_mode_interval_err_ = 0;
  clear_has_background_mode_interval_err();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::background_mode_interval_err() const {
  return background_mode_interval_err_;
}
inline void UpdateSystemStateOutput::set_background_mode_interval_err(::google::protobuf::int32 value) {
  set_has_background_mode_interval_err();
  background_mode_interval_err_ = value;
}

// optional sint32 perform_background_tasks_err = 9;
inline bool UpdateSystemStateOutput::has_perform_background_tasks_err() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateSystemStateOutput::set_has_perform_background_tasks_err() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateSystemStateOutput::clear_has_perform_background_tasks_err() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateSystemStateOutput::clear_perform_background_tasks_err() {
  perform_background_tasks_err_ = 0;
  clear_has_perform_background_tasks_err();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::perform_background_tasks_err() const {
  return perform_background_tasks_err_;
}
inline void UpdateSystemStateOutput::set_perform_background_tasks_err(::google::protobuf::int32 value) {
  set_has_perform_background_tasks_err();
  perform_background_tasks_err_ = value;
}

// optional sint32 log_caches_err = 20;
inline bool UpdateSystemStateOutput::has_log_caches_err() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateSystemStateOutput::set_has_log_caches_err() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateSystemStateOutput::clear_has_log_caches_err() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateSystemStateOutput::clear_log_caches_err() {
  log_caches_err_ = 0;
  clear_has_log_caches_err();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::log_caches_err() const {
  return log_caches_err_;
}
inline void UpdateSystemStateOutput::set_log_caches_err(::google::protobuf::int32 value) {
  set_has_log_caches_err();
  log_caches_err_ = value;
}

// optional sint32 only_mobile_network_available_err = 21;
inline bool UpdateSystemStateOutput::has_only_mobile_network_available_err() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateSystemStateOutput::set_has_only_mobile_network_available_err() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateSystemStateOutput::clear_has_only_mobile_network_available_err() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateSystemStateOutput::clear_only_mobile_network_available_err() {
  only_mobile_network_available_err_ = 0;
  clear_has_only_mobile_network_available_err();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::only_mobile_network_available_err() const {
  return only_mobile_network_available_err_;
}
inline void UpdateSystemStateOutput::set_only_mobile_network_available_err(::google::protobuf::int32 value) {
  set_has_only_mobile_network_available_err();
  only_mobile_network_available_err_ = value;
}

// optional sint32 stream_power_mode_err = 22;
inline bool UpdateSystemStateOutput::has_stream_power_mode_err() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpdateSystemStateOutput::set_has_stream_power_mode_err() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpdateSystemStateOutput::clear_has_stream_power_mode_err() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpdateSystemStateOutput::clear_stream_power_mode_err() {
  stream_power_mode_err_ = 0;
  clear_has_stream_power_mode_err();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::stream_power_mode_err() const {
  return stream_power_mode_err_;
}
inline void UpdateSystemStateOutput::set_stream_power_mode_err(::google::protobuf::int32 value) {
  set_has_stream_power_mode_err();
  stream_power_mode_err_ = value;
}

// optional sint32 enable_ioac_err = 24;
inline bool UpdateSystemStateOutput::has_enable_ioac_err() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpdateSystemStateOutput::set_has_enable_ioac_err() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpdateSystemStateOutput::clear_has_enable_ioac_err() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpdateSystemStateOutput::clear_enable_ioac_err() {
  enable_ioac_err_ = 0;
  clear_has_enable_ioac_err();
}
inline ::google::protobuf::int32 UpdateSystemStateOutput::enable_ioac_err() const {
  return enable_ioac_err_;
}
inline void UpdateSystemStateOutput::set_enable_ioac_err(::google::protobuf::int32 value) {
  set_has_enable_ioac_err();
  enable_ioac_err_ = value;
}

// -------------------------------------------------------------------

// BeginMetadataTransactionInput

// required string collection_id = 1;
inline bool BeginMetadataTransactionInput::has_collection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginMetadataTransactionInput::set_has_collection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginMetadataTransactionInput::clear_has_collection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginMetadataTransactionInput::clear_collection_id() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    collection_id_->clear();
  }
  clear_has_collection_id();
}
inline const ::std::string& BeginMetadataTransactionInput::collection_id() const {
  return *collection_id_;
}
inline void BeginMetadataTransactionInput::set_collection_id(const ::std::string& value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void BeginMetadataTransactionInput::set_collection_id(const char* value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void BeginMetadataTransactionInput::set_collection_id(const char* value, size_t size) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BeginMetadataTransactionInput::mutable_collection_id() {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  return collection_id_;
}
inline ::std::string* BeginMetadataTransactionInput::release_collection_id() {
  clear_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collection_id_;
    collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 collection_timestamp = 2 [default = 0];
inline bool BeginMetadataTransactionInput::has_collection_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginMetadataTransactionInput::set_has_collection_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginMetadataTransactionInput::clear_has_collection_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginMetadataTransactionInput::clear_collection_timestamp() {
  collection_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_collection_timestamp();
}
inline ::google::protobuf::uint64 BeginMetadataTransactionInput::collection_timestamp() const {
  return collection_timestamp_;
}
inline void BeginMetadataTransactionInput::set_collection_timestamp(::google::protobuf::uint64 value) {
  set_has_collection_timestamp();
  collection_timestamp_ = value;
}

// optional bool reset_collection = 3 [default = false];
inline bool BeginMetadataTransactionInput::has_reset_collection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginMetadataTransactionInput::set_has_reset_collection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginMetadataTransactionInput::clear_has_reset_collection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginMetadataTransactionInput::clear_reset_collection() {
  reset_collection_ = false;
  clear_has_reset_collection();
}
inline bool BeginMetadataTransactionInput::reset_collection() const {
  return reset_collection_;
}
inline void BeginMetadataTransactionInput::set_reset_collection(bool value) {
  set_has_reset_collection();
  reset_collection_ = value;
}

// -------------------------------------------------------------------

// UpdateMetadataInput

// required .media_metadata.ContentDirectoryObject metadata = 1;
inline bool UpdateMetadataInput::has_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateMetadataInput::set_has_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateMetadataInput::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateMetadataInput::clear_metadata() {
  if (metadata_ != NULL) metadata_->::media_metadata::ContentDirectoryObject::Clear();
  clear_has_metadata();
}
inline const ::media_metadata::ContentDirectoryObject& UpdateMetadataInput::metadata() const {
  return metadata_ != NULL ? *metadata_ : *default_instance_->metadata_;
}
inline ::media_metadata::ContentDirectoryObject* UpdateMetadataInput::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) metadata_ = new ::media_metadata::ContentDirectoryObject;
  return metadata_;
}
inline ::media_metadata::ContentDirectoryObject* UpdateMetadataInput::release_metadata() {
  clear_has_metadata();
  ::media_metadata::ContentDirectoryObject* temp = metadata_;
  metadata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// DeleteMetadataInput

// required string object_id = 1;
inline bool DeleteMetadataInput::has_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteMetadataInput::set_has_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteMetadataInput::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteMetadataInput::clear_object_id() {
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    object_id_->clear();
  }
  clear_has_object_id();
}
inline const ::std::string& DeleteMetadataInput::object_id() const {
  return *object_id_;
}
inline void DeleteMetadataInput::set_object_id(const ::std::string& value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void DeleteMetadataInput::set_object_id(const char* value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void DeleteMetadataInput::set_object_id(const char* value, size_t size) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteMetadataInput::mutable_object_id() {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  return object_id_;
}
inline ::std::string* DeleteMetadataInput::release_object_id() {
  clear_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_id_;
    object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DeleteCollectionInput

// required string collection_id = 1;
inline bool DeleteCollectionInput::has_collection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCollectionInput::set_has_collection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCollectionInput::clear_has_collection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCollectionInput::clear_collection_id() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    collection_id_->clear();
  }
  clear_has_collection_id();
}
inline const ::std::string& DeleteCollectionInput::collection_id() const {
  return *collection_id_;
}
inline void DeleteCollectionInput::set_collection_id(const ::std::string& value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void DeleteCollectionInput::set_collection_id(const char* value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void DeleteCollectionInput::set_collection_id(const char* value, size_t size) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteCollectionInput::mutable_collection_id() {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  return collection_id_;
}
inline ::std::string* DeleteCollectionInput::release_collection_id() {
  clear_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collection_id_;
    collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetCollectionDetailsInput

// required string collection_id = 1;
inline bool GetCollectionDetailsInput::has_collection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetCollectionDetailsInput::set_has_collection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetCollectionDetailsInput::clear_has_collection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetCollectionDetailsInput::clear_collection_id() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    collection_id_->clear();
  }
  clear_has_collection_id();
}
inline const ::std::string& GetCollectionDetailsInput::collection_id() const {
  return *collection_id_;
}
inline void GetCollectionDetailsInput::set_collection_id(const ::std::string& value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void GetCollectionDetailsInput::set_collection_id(const char* value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void GetCollectionDetailsInput::set_collection_id(const char* value, size_t size) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetCollectionDetailsInput::mutable_collection_id() {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  return collection_id_;
}
inline ::std::string* GetCollectionDetailsInput::release_collection_id() {
  clear_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collection_id_;
    collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetCollectionDetailsOutput

// repeated .media_metadata.ContentDirectoryObject metadata = 1;
inline int GetCollectionDetailsOutput::metadata_size() const {
  return metadata_.size();
}
inline void GetCollectionDetailsOutput::clear_metadata() {
  metadata_.Clear();
}
inline const ::media_metadata::ContentDirectoryObject& GetCollectionDetailsOutput::metadata(int index) const {
  return metadata_.Get(index);
}
inline ::media_metadata::ContentDirectoryObject* GetCollectionDetailsOutput::mutable_metadata(int index) {
  return metadata_.Mutable(index);
}
inline ::media_metadata::ContentDirectoryObject* GetCollectionDetailsOutput::add_metadata() {
  return metadata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::media_metadata::ContentDirectoryObject >&
GetCollectionDetailsOutput::metadata() const {
  return metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::media_metadata::ContentDirectoryObject >*
GetCollectionDetailsOutput::mutable_metadata() {
  return &metadata_;
}

// -------------------------------------------------------------------

// BeginCatalogInput

// optional .media_metadata.CatalogType_t catalog_type = 1;
inline bool BeginCatalogInput::has_catalog_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginCatalogInput::set_has_catalog_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginCatalogInput::clear_has_catalog_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginCatalogInput::clear_catalog_type() {
  catalog_type_ = 1;
  clear_has_catalog_type();
}
inline media_metadata::CatalogType_t BeginCatalogInput::catalog_type() const {
  return static_cast< media_metadata::CatalogType_t >(catalog_type_);
}
inline void BeginCatalogInput::set_catalog_type(media_metadata::CatalogType_t value) {
  GOOGLE_DCHECK(media_metadata::CatalogType_t_IsValid(value));
  set_has_catalog_type();
  catalog_type_ = value;
}

// -------------------------------------------------------------------

// CommitCatalogInput

// optional .media_metadata.CatalogType_t catalog_type = 1;
inline bool CommitCatalogInput::has_catalog_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitCatalogInput::set_has_catalog_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitCatalogInput::clear_has_catalog_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitCatalogInput::clear_catalog_type() {
  catalog_type_ = 1;
  clear_has_catalog_type();
}
inline media_metadata::CatalogType_t CommitCatalogInput::catalog_type() const {
  return static_cast< media_metadata::CatalogType_t >(catalog_type_);
}
inline void CommitCatalogInput::set_catalog_type(media_metadata::CatalogType_t value) {
  GOOGLE_DCHECK(media_metadata::CatalogType_t_IsValid(value));
  set_has_catalog_type();
  catalog_type_ = value;
}

// -------------------------------------------------------------------

// EndCatalogInput

// optional .media_metadata.CatalogType_t catalog_type = 1;
inline bool EndCatalogInput::has_catalog_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndCatalogInput::set_has_catalog_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndCatalogInput::clear_has_catalog_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndCatalogInput::clear_catalog_type() {
  catalog_type_ = 1;
  clear_has_catalog_type();
}
inline media_metadata::CatalogType_t EndCatalogInput::catalog_type() const {
  return static_cast< media_metadata::CatalogType_t >(catalog_type_);
}
inline void EndCatalogInput::set_catalog_type(media_metadata::CatalogType_t value) {
  GOOGLE_DCHECK(media_metadata::CatalogType_t_IsValid(value));
  set_has_catalog_type();
  catalog_type_ = value;
}

// -------------------------------------------------------------------

// DeleteCatalogInput

// optional .media_metadata.CatalogType_t catalog_type = 1;
inline bool DeleteCatalogInput::has_catalog_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteCatalogInput::set_has_catalog_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteCatalogInput::clear_has_catalog_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteCatalogInput::clear_catalog_type() {
  catalog_type_ = 1;
  clear_has_catalog_type();
}
inline media_metadata::CatalogType_t DeleteCatalogInput::catalog_type() const {
  return static_cast< media_metadata::CatalogType_t >(catalog_type_);
}
inline void DeleteCatalogInput::set_catalog_type(media_metadata::CatalogType_t value) {
  GOOGLE_DCHECK(media_metadata::CatalogType_t_IsValid(value));
  set_has_catalog_type();
  catalog_type_ = value;
}

// -------------------------------------------------------------------

// MSAGetContentURLInput

// required fixed64 user_id = 1;
inline bool MSAGetContentURLInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSAGetContentURLInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSAGetContentURLInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSAGetContentURLInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 MSAGetContentURLInput::user_id() const {
  return user_id_;
}
inline void MSAGetContentURLInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .media_metadata.CatalogType_t catalog_type = 2;
inline bool MSAGetContentURLInput::has_catalog_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSAGetContentURLInput::set_has_catalog_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSAGetContentURLInput::clear_has_catalog_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSAGetContentURLInput::clear_catalog_type() {
  catalog_type_ = 1;
  clear_has_catalog_type();
}
inline media_metadata::CatalogType_t MSAGetContentURLInput::catalog_type() const {
  return static_cast< media_metadata::CatalogType_t >(catalog_type_);
}
inline void MSAGetContentURLInput::set_catalog_type(media_metadata::CatalogType_t value) {
  GOOGLE_DCHECK(media_metadata::CatalogType_t_IsValid(value));
  set_has_catalog_type();
  catalog_type_ = value;
}

// required string collection_id = 3;
inline bool MSAGetContentURLInput::has_collection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSAGetContentURLInput::set_has_collection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSAGetContentURLInput::clear_has_collection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSAGetContentURLInput::clear_collection_id() {
  if (collection_id_ != &::google::protobuf::internal::kEmptyString) {
    collection_id_->clear();
  }
  clear_has_collection_id();
}
inline const ::std::string& MSAGetContentURLInput::collection_id() const {
  return *collection_id_;
}
inline void MSAGetContentURLInput::set_collection_id(const ::std::string& value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void MSAGetContentURLInput::set_collection_id(const char* value) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(value);
}
inline void MSAGetContentURLInput::set_collection_id(const char* value, size_t size) {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  collection_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSAGetContentURLInput::mutable_collection_id() {
  set_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    collection_id_ = new ::std::string;
  }
  return collection_id_;
}
inline ::std::string* MSAGetContentURLInput::release_collection_id() {
  clear_has_collection_id();
  if (collection_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = collection_id_;
    collection_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string object_id = 4;
inline bool MSAGetContentURLInput::has_object_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSAGetContentURLInput::set_has_object_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSAGetContentURLInput::clear_has_object_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSAGetContentURLInput::clear_object_id() {
  if (object_id_ != &::google::protobuf::internal::kEmptyString) {
    object_id_->clear();
  }
  clear_has_object_id();
}
inline const ::std::string& MSAGetContentURLInput::object_id() const {
  return *object_id_;
}
inline void MSAGetContentURLInput::set_object_id(const ::std::string& value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void MSAGetContentURLInput::set_object_id(const char* value) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(value);
}
inline void MSAGetContentURLInput::set_object_id(const char* value, size_t size) {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  object_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSAGetContentURLInput::mutable_object_id() {
  set_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    object_id_ = new ::std::string;
  }
  return object_id_;
}
inline ::std::string* MSAGetContentURLInput::release_object_id() {
  clear_has_object_id();
  if (object_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_id_;
    object_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_thumb = 5 [default = false];
inline bool MSAGetContentURLInput::has_is_thumb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSAGetContentURLInput::set_has_is_thumb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSAGetContentURLInput::clear_has_is_thumb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSAGetContentURLInput::clear_is_thumb() {
  is_thumb_ = false;
  clear_has_is_thumb();
}
inline bool MSAGetContentURLInput::is_thumb() const {
  return is_thumb_;
}
inline void MSAGetContentURLInput::set_is_thumb(bool value) {
  set_has_is_thumb();
  is_thumb_ = value;
}

// -------------------------------------------------------------------

// MSAGetContentURLOutput

// required string url = 1;
inline bool MSAGetContentURLOutput::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSAGetContentURLOutput::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSAGetContentURLOutput::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSAGetContentURLOutput::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& MSAGetContentURLOutput::url() const {
  return *url_;
}
inline void MSAGetContentURLOutput::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void MSAGetContentURLOutput::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void MSAGetContentURLOutput::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSAGetContentURLOutput::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* MSAGetContentURLOutput::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MCAQueryMetadataObjectsInput

// required fixed64 cloud_device_id = 1;
inline bool MCAQueryMetadataObjectsInput::has_cloud_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MCAQueryMetadataObjectsInput::set_has_cloud_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MCAQueryMetadataObjectsInput::clear_has_cloud_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MCAQueryMetadataObjectsInput::clear_cloud_device_id() {
  cloud_device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_cloud_device_id();
}
inline ::google::protobuf::uint64 MCAQueryMetadataObjectsInput::cloud_device_id() const {
  return cloud_device_id_;
}
inline void MCAQueryMetadataObjectsInput::set_cloud_device_id(::google::protobuf::uint64 value) {
  set_has_cloud_device_id();
  cloud_device_id_ = value;
}

// required .media_metadata.DBFilterType_t filter_field = 2;
inline bool MCAQueryMetadataObjectsInput::has_filter_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MCAQueryMetadataObjectsInput::set_has_filter_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MCAQueryMetadataObjectsInput::clear_has_filter_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MCAQueryMetadataObjectsInput::clear_filter_field() {
  filter_field_ = 1;
  clear_has_filter_field();
}
inline media_metadata::DBFilterType_t MCAQueryMetadataObjectsInput::filter_field() const {
  return static_cast< media_metadata::DBFilterType_t >(filter_field_);
}
inline void MCAQueryMetadataObjectsInput::set_filter_field(media_metadata::DBFilterType_t value) {
  GOOGLE_DCHECK(media_metadata::DBFilterType_t_IsValid(value));
  set_has_filter_field();
  filter_field_ = value;
}

// optional string search_field = 3;
inline bool MCAQueryMetadataObjectsInput::has_search_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MCAQueryMetadataObjectsInput::set_has_search_field() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MCAQueryMetadataObjectsInput::clear_has_search_field() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MCAQueryMetadataObjectsInput::clear_search_field() {
  if (search_field_ != &::google::protobuf::internal::kEmptyString) {
    search_field_->clear();
  }
  clear_has_search_field();
}
inline const ::std::string& MCAQueryMetadataObjectsInput::search_field() const {
  return *search_field_;
}
inline void MCAQueryMetadataObjectsInput::set_search_field(const ::std::string& value) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(value);
}
inline void MCAQueryMetadataObjectsInput::set_search_field(const char* value) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(value);
}
inline void MCAQueryMetadataObjectsInput::set_search_field(const char* value, size_t size) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCAQueryMetadataObjectsInput::mutable_search_field() {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  return search_field_;
}
inline ::std::string* MCAQueryMetadataObjectsInput::release_search_field() {
  clear_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_field_;
    search_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sort_field = 4;
inline bool MCAQueryMetadataObjectsInput::has_sort_field() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MCAQueryMetadataObjectsInput::set_has_sort_field() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MCAQueryMetadataObjectsInput::clear_has_sort_field() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MCAQueryMetadataObjectsInput::clear_sort_field() {
  if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
    sort_field_->clear();
  }
  clear_has_sort_field();
}
inline const ::std::string& MCAQueryMetadataObjectsInput::sort_field() const {
  return *sort_field_;
}
inline void MCAQueryMetadataObjectsInput::set_sort_field(const ::std::string& value) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(value);
}
inline void MCAQueryMetadataObjectsInput::set_sort_field(const char* value) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(value);
}
inline void MCAQueryMetadataObjectsInput::set_sort_field(const char* value, size_t size) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MCAQueryMetadataObjectsInput::mutable_sort_field() {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  return sort_field_;
}
inline ::std::string* MCAQueryMetadataObjectsInput::release_sort_field() {
  clear_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sort_field_;
    sort_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MCAQueryMetadataObjectsOutput

// repeated .media_metadata.MCAMetadataQueryObject content_objects = 1;
inline int MCAQueryMetadataObjectsOutput::content_objects_size() const {
  return content_objects_.size();
}
inline void MCAQueryMetadataObjectsOutput::clear_content_objects() {
  content_objects_.Clear();
}
inline const ::media_metadata::MCAMetadataQueryObject& MCAQueryMetadataObjectsOutput::content_objects(int index) const {
  return content_objects_.Get(index);
}
inline ::media_metadata::MCAMetadataQueryObject* MCAQueryMetadataObjectsOutput::mutable_content_objects(int index) {
  return content_objects_.Mutable(index);
}
inline ::media_metadata::MCAMetadataQueryObject* MCAQueryMetadataObjectsOutput::add_content_objects() {
  return content_objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::media_metadata::MCAMetadataQueryObject >&
MCAQueryMetadataObjectsOutput::content_objects() const {
  return content_objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::media_metadata::MCAMetadataQueryObject >*
MCAQueryMetadataObjectsOutput::mutable_content_objects() {
  return &content_objects_;
}

// -------------------------------------------------------------------

// RequestPairingInput

// optional string host_hwid = 1;
inline bool RequestPairingInput::has_host_hwid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPairingInput::set_has_host_hwid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPairingInput::clear_has_host_hwid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPairingInput::clear_host_hwid() {
  if (host_hwid_ != &::google::protobuf::internal::kEmptyString) {
    host_hwid_->clear();
  }
  clear_has_host_hwid();
}
inline const ::std::string& RequestPairingInput::host_hwid() const {
  return *host_hwid_;
}
inline void RequestPairingInput::set_host_hwid(const ::std::string& value) {
  set_has_host_hwid();
  if (host_hwid_ == &::google::protobuf::internal::kEmptyString) {
    host_hwid_ = new ::std::string;
  }
  host_hwid_->assign(value);
}
inline void RequestPairingInput::set_host_hwid(const char* value) {
  set_has_host_hwid();
  if (host_hwid_ == &::google::protobuf::internal::kEmptyString) {
    host_hwid_ = new ::std::string;
  }
  host_hwid_->assign(value);
}
inline void RequestPairingInput::set_host_hwid(const char* value, size_t size) {
  set_has_host_hwid();
  if (host_hwid_ == &::google::protobuf::internal::kEmptyString) {
    host_hwid_ = new ::std::string;
  }
  host_hwid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPairingInput::mutable_host_hwid() {
  set_has_host_hwid();
  if (host_hwid_ == &::google::protobuf::internal::kEmptyString) {
    host_hwid_ = new ::std::string;
  }
  return host_hwid_;
}
inline ::std::string* RequestPairingInput::release_host_hwid() {
  clear_has_host_hwid();
  if (host_hwid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_hwid_;
    host_hwid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 host_deviceid = 2;
inline bool RequestPairingInput::has_host_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestPairingInput::set_has_host_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestPairingInput::clear_has_host_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestPairingInput::clear_host_deviceid() {
  host_deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_host_deviceid();
}
inline ::google::protobuf::uint64 RequestPairingInput::host_deviceid() const {
  return host_deviceid_;
}
inline void RequestPairingInput::set_host_deviceid(::google::protobuf::uint64 value) {
  set_has_host_deviceid();
  host_deviceid_ = value;
}

// optional string pin = 3;
inline bool RequestPairingInput::has_pin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestPairingInput::set_has_pin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestPairingInput::clear_has_pin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestPairingInput::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& RequestPairingInput::pin() const {
  return *pin_;
}
inline void RequestPairingInput::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void RequestPairingInput::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void RequestPairingInput::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPairingInput::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* RequestPairingInput::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string device_hwid = 4;
inline bool RequestPairingInput::has_device_hwid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestPairingInput::set_has_device_hwid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestPairingInput::clear_has_device_hwid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestPairingInput::clear_device_hwid() {
  if (device_hwid_ != &::google::protobuf::internal::kEmptyString) {
    device_hwid_->clear();
  }
  clear_has_device_hwid();
}
inline const ::std::string& RequestPairingInput::device_hwid() const {
  return *device_hwid_;
}
inline void RequestPairingInput::set_device_hwid(const ::std::string& value) {
  set_has_device_hwid();
  if (device_hwid_ == &::google::protobuf::internal::kEmptyString) {
    device_hwid_ = new ::std::string;
  }
  device_hwid_->assign(value);
}
inline void RequestPairingInput::set_device_hwid(const char* value) {
  set_has_device_hwid();
  if (device_hwid_ == &::google::protobuf::internal::kEmptyString) {
    device_hwid_ = new ::std::string;
  }
  device_hwid_->assign(value);
}
inline void RequestPairingInput::set_device_hwid(const char* value, size_t size) {
  set_has_device_hwid();
  if (device_hwid_ == &::google::protobuf::internal::kEmptyString) {
    device_hwid_ = new ::std::string;
  }
  device_hwid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPairingInput::mutable_device_hwid() {
  set_has_device_hwid();
  if (device_hwid_ == &::google::protobuf::internal::kEmptyString) {
    device_hwid_ = new ::std::string;
  }
  return device_hwid_;
}
inline ::std::string* RequestPairingInput::release_device_hwid() {
  clear_has_device_hwid();
  if (device_hwid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_hwid_;
    device_hwid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ccd.PairingRequestAttribute pairing_attributes = 5;
inline int RequestPairingInput::pairing_attributes_size() const {
  return pairing_attributes_.size();
}
inline void RequestPairingInput::clear_pairing_attributes() {
  pairing_attributes_.Clear();
}
inline const ::ccd::PairingRequestAttribute& RequestPairingInput::pairing_attributes(int index) const {
  return pairing_attributes_.Get(index);
}
inline ::ccd::PairingRequestAttribute* RequestPairingInput::mutable_pairing_attributes(int index) {
  return pairing_attributes_.Mutable(index);
}
inline ::ccd::PairingRequestAttribute* RequestPairingInput::add_pairing_attributes() {
  return pairing_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >&
RequestPairingInput::pairing_attributes() const {
  return pairing_attributes_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::PairingRequestAttribute >*
RequestPairingInput::mutable_pairing_attributes() {
  return &pairing_attributes_;
}

// -------------------------------------------------------------------

// RequestPairingOutput

// required string pairing_token = 1;
inline bool RequestPairingOutput::has_pairing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPairingOutput::set_has_pairing_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPairingOutput::clear_has_pairing_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPairingOutput::clear_pairing_token() {
  if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
    pairing_token_->clear();
  }
  clear_has_pairing_token();
}
inline const ::std::string& RequestPairingOutput::pairing_token() const {
  return *pairing_token_;
}
inline void RequestPairingOutput::set_pairing_token(const ::std::string& value) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(value);
}
inline void RequestPairingOutput::set_pairing_token(const char* value) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(value);
}
inline void RequestPairingOutput::set_pairing_token(const char* value, size_t size) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPairingOutput::mutable_pairing_token() {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  return pairing_token_;
}
inline ::std::string* RequestPairingOutput::release_pairing_token() {
  clear_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pairing_token_;
    pairing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RespondToPairingRequestInput

// required string transaction_id = 1;
inline bool RespondToPairingRequestInput::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RespondToPairingRequestInput::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RespondToPairingRequestInput::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RespondToPairingRequestInput::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& RespondToPairingRequestInput::transaction_id() const {
  return *transaction_id_;
}
inline void RespondToPairingRequestInput::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void RespondToPairingRequestInput::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void RespondToPairingRequestInput::set_transaction_id(const char* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RespondToPairingRequestInput::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* RespondToPairingRequestInput::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 accepted_pairing = 2;
inline bool RespondToPairingRequestInput::has_accepted_pairing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RespondToPairingRequestInput::set_has_accepted_pairing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RespondToPairingRequestInput::clear_has_accepted_pairing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RespondToPairingRequestInput::clear_accepted_pairing() {
  accepted_pairing_ = 0;
  clear_has_accepted_pairing();
}
inline ::google::protobuf::int32 RespondToPairingRequestInput::accepted_pairing() const {
  return accepted_pairing_;
}
inline void RespondToPairingRequestInput::set_accepted_pairing(::google::protobuf::int32 value) {
  set_has_accepted_pairing();
  accepted_pairing_ = value;
}

// required fixed64 user_id = 3;
inline bool RespondToPairingRequestInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RespondToPairingRequestInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RespondToPairingRequestInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RespondToPairingRequestInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RespondToPairingRequestInput::user_id() const {
  return user_id_;
}
inline void RespondToPairingRequestInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// RequestPairingPinInput

// required fixed64 device_id = 1;
inline bool RequestPairingPinInput::has_device_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPairingPinInput::set_has_device_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPairingPinInput::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPairingPinInput::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 RequestPairingPinInput::device_id() const {
  return device_id_;
}
inline void RequestPairingPinInput::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// required fixed64 user_id = 2;
inline bool RequestPairingPinInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestPairingPinInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestPairingPinInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestPairingPinInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RequestPairingPinInput::user_id() const {
  return user_id_;
}
inline void RequestPairingPinInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// RequestPairingPinOutput

// required string pin = 1;
inline bool RequestPairingPinOutput::has_pin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestPairingPinOutput::set_has_pin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestPairingPinOutput::clear_has_pin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestPairingPinOutput::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& RequestPairingPinOutput::pin() const {
  return *pin_;
}
inline void RequestPairingPinOutput::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void RequestPairingPinOutput::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void RequestPairingPinOutput::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestPairingPinOutput::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* RequestPairingPinOutput::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetPairingStatusInput

// required string pairing_token = 1;
inline bool GetPairingStatusInput::has_pairing_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPairingStatusInput::set_has_pairing_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPairingStatusInput::clear_has_pairing_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPairingStatusInput::clear_pairing_token() {
  if (pairing_token_ != &::google::protobuf::internal::kEmptyString) {
    pairing_token_->clear();
  }
  clear_has_pairing_token();
}
inline const ::std::string& GetPairingStatusInput::pairing_token() const {
  return *pairing_token_;
}
inline void GetPairingStatusInput::set_pairing_token(const ::std::string& value) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(value);
}
inline void GetPairingStatusInput::set_pairing_token(const char* value) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(value);
}
inline void GetPairingStatusInput::set_pairing_token(const char* value, size_t size) {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  pairing_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPairingStatusInput::mutable_pairing_token() {
  set_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    pairing_token_ = new ::std::string;
  }
  return pairing_token_;
}
inline ::std::string* GetPairingStatusInput::release_pairing_token() {
  clear_has_pairing_token();
  if (pairing_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pairing_token_;
    pairing_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// GetPairingStatusOutput

// required string status = 1;
inline bool GetPairingStatusOutput::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPairingStatusOutput::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPairingStatusOutput::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPairingStatusOutput::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& GetPairingStatusOutput::status() const {
  return *status_;
}
inline void GetPairingStatusOutput::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void GetPairingStatusOutput::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void GetPairingStatusOutput::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPairingStatusOutput::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* GetPairingStatusOutput::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_name = 2;
inline bool GetPairingStatusOutput::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetPairingStatusOutput::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetPairingStatusOutput::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetPairingStatusOutput::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& GetPairingStatusOutput::user_name() const {
  return *user_name_;
}
inline void GetPairingStatusOutput::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void GetPairingStatusOutput::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void GetPairingStatusOutput::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPairingStatusOutput::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* GetPairingStatusOutput::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CCDIQueryPicStreamObjectsInput

// required .ccd.PicStream_DBFilterType_t filter_field = 1;
inline bool CCDIQueryPicStreamObjectsInput::has_filter_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCDIQueryPicStreamObjectsInput::set_has_filter_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCDIQueryPicStreamObjectsInput::clear_has_filter_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCDIQueryPicStreamObjectsInput::clear_filter_field() {
  filter_field_ = 1;
  clear_has_filter_field();
}
inline ccd::PicStream_DBFilterType_t CCDIQueryPicStreamObjectsInput::filter_field() const {
  return static_cast< ccd::PicStream_DBFilterType_t >(filter_field_);
}
inline void CCDIQueryPicStreamObjectsInput::set_filter_field(ccd::PicStream_DBFilterType_t value) {
  GOOGLE_DCHECK(ccd::PicStream_DBFilterType_t_IsValid(value));
  set_has_filter_field();
  filter_field_ = value;
}

// optional string search_field = 2;
inline bool CCDIQueryPicStreamObjectsInput::has_search_field() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCDIQueryPicStreamObjectsInput::set_has_search_field() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCDIQueryPicStreamObjectsInput::clear_has_search_field() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCDIQueryPicStreamObjectsInput::clear_search_field() {
  if (search_field_ != &::google::protobuf::internal::kEmptyString) {
    search_field_->clear();
  }
  clear_has_search_field();
}
inline const ::std::string& CCDIQueryPicStreamObjectsInput::search_field() const {
  return *search_field_;
}
inline void CCDIQueryPicStreamObjectsInput::set_search_field(const ::std::string& value) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(value);
}
inline void CCDIQueryPicStreamObjectsInput::set_search_field(const char* value) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(value);
}
inline void CCDIQueryPicStreamObjectsInput::set_search_field(const char* value, size_t size) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDIQueryPicStreamObjectsInput::mutable_search_field() {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  return search_field_;
}
inline ::std::string* CCDIQueryPicStreamObjectsInput::release_search_field() {
  clear_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_field_;
    search_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sort_field = 3;
inline bool CCDIQueryPicStreamObjectsInput::has_sort_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCDIQueryPicStreamObjectsInput::set_has_sort_field() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCDIQueryPicStreamObjectsInput::clear_has_sort_field() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCDIQueryPicStreamObjectsInput::clear_sort_field() {
  if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
    sort_field_->clear();
  }
  clear_has_sort_field();
}
inline const ::std::string& CCDIQueryPicStreamObjectsInput::sort_field() const {
  return *sort_field_;
}
inline void CCDIQueryPicStreamObjectsInput::set_sort_field(const ::std::string& value) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(value);
}
inline void CCDIQueryPicStreamObjectsInput::set_sort_field(const char* value) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(value);
}
inline void CCDIQueryPicStreamObjectsInput::set_sort_field(const char* value, size_t size) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CCDIQueryPicStreamObjectsInput::mutable_sort_field() {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  return sort_field_;
}
inline ::std::string* CCDIQueryPicStreamObjectsInput::release_sort_field() {
  clear_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sort_field_;
    sort_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CCDIQueryPicStreamObjectsOutput

// repeated .ccd.PicStreamQueryObject content_objects = 1;
inline int CCDIQueryPicStreamObjectsOutput::content_objects_size() const {
  return content_objects_.size();
}
inline void CCDIQueryPicStreamObjectsOutput::clear_content_objects() {
  content_objects_.Clear();
}
inline const ::ccd::PicStreamQueryObject& CCDIQueryPicStreamObjectsOutput::content_objects(int index) const {
  return content_objects_.Get(index);
}
inline ::ccd::PicStreamQueryObject* CCDIQueryPicStreamObjectsOutput::mutable_content_objects(int index) {
  return content_objects_.Mutable(index);
}
inline ::ccd::PicStreamQueryObject* CCDIQueryPicStreamObjectsOutput::add_content_objects() {
  return content_objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::PicStreamQueryObject >&
CCDIQueryPicStreamObjectsOutput::content_objects() const {
  return content_objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::PicStreamQueryObject >*
CCDIQueryPicStreamObjectsOutput::mutable_content_objects() {
  return &content_objects_;
}

// -------------------------------------------------------------------

// PicStreamQueryObject

// optional .ccd.PicStreamContentDirectoryObject pcdo = 1;
inline bool PicStreamQueryObject::has_pcdo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PicStreamQueryObject::set_has_pcdo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PicStreamQueryObject::clear_has_pcdo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PicStreamQueryObject::clear_pcdo() {
  if (pcdo_ != NULL) pcdo_->::ccd::PicStreamContentDirectoryObject::Clear();
  clear_has_pcdo();
}
inline const ::ccd::PicStreamContentDirectoryObject& PicStreamQueryObject::pcdo() const {
  return pcdo_ != NULL ? *pcdo_ : *default_instance_->pcdo_;
}
inline ::ccd::PicStreamContentDirectoryObject* PicStreamQueryObject::mutable_pcdo() {
  set_has_pcdo();
  if (pcdo_ == NULL) pcdo_ = new ::ccd::PicStreamContentDirectoryObject;
  return pcdo_;
}
inline ::ccd::PicStreamContentDirectoryObject* PicStreamQueryObject::release_pcdo() {
  clear_has_pcdo();
  ::ccd::PicStreamContentDirectoryObject* temp = pcdo_;
  pcdo_ = NULL;
  return temp;
}

// optional .ccd.PicStreamAlbumFields PicStream_album = 2;
inline bool PicStreamQueryObject::has_picstream_album() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PicStreamQueryObject::set_has_picstream_album() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PicStreamQueryObject::clear_has_picstream_album() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PicStreamQueryObject::clear_picstream_album() {
  if (picstream_album_ != NULL) picstream_album_->::ccd::PicStreamAlbumFields::Clear();
  clear_has_picstream_album();
}
inline const ::ccd::PicStreamAlbumFields& PicStreamQueryObject::picstream_album() const {
  return picstream_album_ != NULL ? *picstream_album_ : *default_instance_->picstream_album_;
}
inline ::ccd::PicStreamAlbumFields* PicStreamQueryObject::mutable_picstream_album() {
  set_has_picstream_album();
  if (picstream_album_ == NULL) picstream_album_ = new ::ccd::PicStreamAlbumFields;
  return picstream_album_;
}
inline ::ccd::PicStreamAlbumFields* PicStreamQueryObject::release_picstream_album() {
  clear_has_picstream_album();
  ::ccd::PicStreamAlbumFields* temp = picstream_album_;
  picstream_album_ = NULL;
  return temp;
}

// optional string full_res_url = 3;
inline bool PicStreamQueryObject::has_full_res_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PicStreamQueryObject::set_has_full_res_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PicStreamQueryObject::clear_has_full_res_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PicStreamQueryObject::clear_full_res_url() {
  if (full_res_url_ != &::google::protobuf::internal::kEmptyString) {
    full_res_url_->clear();
  }
  clear_has_full_res_url();
}
inline const ::std::string& PicStreamQueryObject::full_res_url() const {
  return *full_res_url_;
}
inline void PicStreamQueryObject::set_full_res_url(const ::std::string& value) {
  set_has_full_res_url();
  if (full_res_url_ == &::google::protobuf::internal::kEmptyString) {
    full_res_url_ = new ::std::string;
  }
  full_res_url_->assign(value);
}
inline void PicStreamQueryObject::set_full_res_url(const char* value) {
  set_has_full_res_url();
  if (full_res_url_ == &::google::protobuf::internal::kEmptyString) {
    full_res_url_ = new ::std::string;
  }
  full_res_url_->assign(value);
}
inline void PicStreamQueryObject::set_full_res_url(const char* value, size_t size) {
  set_has_full_res_url();
  if (full_res_url_ == &::google::protobuf::internal::kEmptyString) {
    full_res_url_ = new ::std::string;
  }
  full_res_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamQueryObject::mutable_full_res_url() {
  set_has_full_res_url();
  if (full_res_url_ == &::google::protobuf::internal::kEmptyString) {
    full_res_url_ = new ::std::string;
  }
  return full_res_url_;
}
inline ::std::string* PicStreamQueryObject::release_full_res_url() {
  clear_has_full_res_url();
  if (full_res_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = full_res_url_;
    full_res_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string low_res_url = 4;
inline bool PicStreamQueryObject::has_low_res_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PicStreamQueryObject::set_has_low_res_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PicStreamQueryObject::clear_has_low_res_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PicStreamQueryObject::clear_low_res_url() {
  if (low_res_url_ != &::google::protobuf::internal::kEmptyString) {
    low_res_url_->clear();
  }
  clear_has_low_res_url();
}
inline const ::std::string& PicStreamQueryObject::low_res_url() const {
  return *low_res_url_;
}
inline void PicStreamQueryObject::set_low_res_url(const ::std::string& value) {
  set_has_low_res_url();
  if (low_res_url_ == &::google::protobuf::internal::kEmptyString) {
    low_res_url_ = new ::std::string;
  }
  low_res_url_->assign(value);
}
inline void PicStreamQueryObject::set_low_res_url(const char* value) {
  set_has_low_res_url();
  if (low_res_url_ == &::google::protobuf::internal::kEmptyString) {
    low_res_url_ = new ::std::string;
  }
  low_res_url_->assign(value);
}
inline void PicStreamQueryObject::set_low_res_url(const char* value, size_t size) {
  set_has_low_res_url();
  if (low_res_url_ == &::google::protobuf::internal::kEmptyString) {
    low_res_url_ = new ::std::string;
  }
  low_res_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamQueryObject::mutable_low_res_url() {
  set_has_low_res_url();
  if (low_res_url_ == &::google::protobuf::internal::kEmptyString) {
    low_res_url_ = new ::std::string;
  }
  return low_res_url_;
}
inline ::std::string* PicStreamQueryObject::release_low_res_url() {
  clear_has_low_res_url();
  if (low_res_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = low_res_url_;
    low_res_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string thumbnail_url = 5;
inline bool PicStreamQueryObject::has_thumbnail_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PicStreamQueryObject::set_has_thumbnail_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PicStreamQueryObject::clear_has_thumbnail_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PicStreamQueryObject::clear_thumbnail_url() {
  if (thumbnail_url_ != &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_->clear();
  }
  clear_has_thumbnail_url();
}
inline const ::std::string& PicStreamQueryObject::thumbnail_url() const {
  return *thumbnail_url_;
}
inline void PicStreamQueryObject::set_thumbnail_url(const ::std::string& value) {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  thumbnail_url_->assign(value);
}
inline void PicStreamQueryObject::set_thumbnail_url(const char* value) {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  thumbnail_url_->assign(value);
}
inline void PicStreamQueryObject::set_thumbnail_url(const char* value, size_t size) {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  thumbnail_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamQueryObject::mutable_thumbnail_url() {
  set_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    thumbnail_url_ = new ::std::string;
  }
  return thumbnail_url_;
}
inline ::std::string* PicStreamQueryObject::release_thumbnail_url() {
  clear_has_thumbnail_url();
  if (thumbnail_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = thumbnail_url_;
    thumbnail_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PicStreamContentDirectoryObject

// required string comp_id = 1;
inline bool PicStreamContentDirectoryObject::has_comp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PicStreamContentDirectoryObject::set_has_comp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PicStreamContentDirectoryObject::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PicStreamContentDirectoryObject::clear_comp_id() {
  if (comp_id_ != &::google::protobuf::internal::kEmptyString) {
    comp_id_->clear();
  }
  clear_has_comp_id();
}
inline const ::std::string& PicStreamContentDirectoryObject::comp_id() const {
  return *comp_id_;
}
inline void PicStreamContentDirectoryObject::set_comp_id(const ::std::string& value) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(value);
}
inline void PicStreamContentDirectoryObject::set_comp_id(const char* value) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(value);
}
inline void PicStreamContentDirectoryObject::set_comp_id(const char* value, size_t size) {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  comp_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamContentDirectoryObject::mutable_comp_id() {
  set_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    comp_id_ = new ::std::string;
  }
  return comp_id_;
}
inline ::std::string* PicStreamContentDirectoryObject::release_comp_id() {
  clear_has_comp_id();
  if (comp_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comp_id_;
    comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string optional_fields = 2;
inline int PicStreamContentDirectoryObject::optional_fields_size() const {
  return optional_fields_.size();
}
inline void PicStreamContentDirectoryObject::clear_optional_fields() {
  optional_fields_.Clear();
}
inline const ::std::string& PicStreamContentDirectoryObject::optional_fields(int index) const {
  return optional_fields_.Get(index);
}
inline ::std::string* PicStreamContentDirectoryObject::mutable_optional_fields(int index) {
  return optional_fields_.Mutable(index);
}
inline void PicStreamContentDirectoryObject::set_optional_fields(int index, const ::std::string& value) {
  optional_fields_.Mutable(index)->assign(value);
}
inline void PicStreamContentDirectoryObject::set_optional_fields(int index, const char* value) {
  optional_fields_.Mutable(index)->assign(value);
}
inline void PicStreamContentDirectoryObject::set_optional_fields(int index, const char* value, size_t size) {
  optional_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamContentDirectoryObject::add_optional_fields() {
  return optional_fields_.Add();
}
inline void PicStreamContentDirectoryObject::add_optional_fields(const ::std::string& value) {
  optional_fields_.Add()->assign(value);
}
inline void PicStreamContentDirectoryObject::add_optional_fields(const char* value) {
  optional_fields_.Add()->assign(value);
}
inline void PicStreamContentDirectoryObject::add_optional_fields(const char* value, size_t size) {
  optional_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PicStreamContentDirectoryObject::optional_fields() const {
  return optional_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PicStreamContentDirectoryObject::mutable_optional_fields() {
  return &optional_fields_;
}

// optional .ccd.PicStreamItemFields picstream_item = 3;
inline bool PicStreamContentDirectoryObject::has_picstream_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PicStreamContentDirectoryObject::set_has_picstream_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PicStreamContentDirectoryObject::clear_has_picstream_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PicStreamContentDirectoryObject::clear_picstream_item() {
  if (picstream_item_ != NULL) picstream_item_->::ccd::PicStreamItemFields::Clear();
  clear_has_picstream_item();
}
inline const ::ccd::PicStreamItemFields& PicStreamContentDirectoryObject::picstream_item() const {
  return picstream_item_ != NULL ? *picstream_item_ : *default_instance_->picstream_item_;
}
inline ::ccd::PicStreamItemFields* PicStreamContentDirectoryObject::mutable_picstream_item() {
  set_has_picstream_item();
  if (picstream_item_ == NULL) picstream_item_ = new ::ccd::PicStreamItemFields;
  return picstream_item_;
}
inline ::ccd::PicStreamItemFields* PicStreamContentDirectoryObject::release_picstream_item() {
  clear_has_picstream_item();
  ::ccd::PicStreamItemFields* temp = picstream_item_;
  picstream_item_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PicStreamItemFields

// required string identifier = 1;
inline bool PicStreamItemFields::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PicStreamItemFields::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PicStreamItemFields::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PicStreamItemFields::clear_identifier() {
  if (identifier_ != &::google::protobuf::internal::kEmptyString) {
    identifier_->clear();
  }
  clear_has_identifier();
}
inline const ::std::string& PicStreamItemFields::identifier() const {
  return *identifier_;
}
inline void PicStreamItemFields::set_identifier(const ::std::string& value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void PicStreamItemFields::set_identifier(const char* value) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(value);
}
inline void PicStreamItemFields::set_identifier(const char* value, size_t size) {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  identifier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamItemFields::mutable_identifier() {
  set_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    identifier_ = new ::std::string;
  }
  return identifier_;
}
inline ::std::string* PicStreamItemFields::release_identifier() {
  clear_has_identifier();
  if (identifier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identifier_;
    identifier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string title = 2;
inline bool PicStreamItemFields::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PicStreamItemFields::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PicStreamItemFields::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PicStreamItemFields::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& PicStreamItemFields::title() const {
  return *title_;
}
inline void PicStreamItemFields::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void PicStreamItemFields::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void PicStreamItemFields::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamItemFields::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* PicStreamItemFields::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string album_name = 3;
inline bool PicStreamItemFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PicStreamItemFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PicStreamItemFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PicStreamItemFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& PicStreamItemFields::album_name() const {
  return *album_name_;
}
inline void PicStreamItemFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void PicStreamItemFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void PicStreamItemFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamItemFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* PicStreamItemFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 date_time = 4;
inline bool PicStreamItemFields::has_date_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PicStreamItemFields::set_has_date_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PicStreamItemFields::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PicStreamItemFields::clear_date_time() {
  date_time_ = GOOGLE_ULONGLONG(0);
  clear_has_date_time();
}
inline ::google::protobuf::uint64 PicStreamItemFields::date_time() const {
  return date_time_;
}
inline void PicStreamItemFields::set_date_time(::google::protobuf::uint64 value) {
  set_has_date_time();
  date_time_ = value;
}

// optional uint64 file_size = 5;
inline bool PicStreamItemFields::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PicStreamItemFields::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PicStreamItemFields::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PicStreamItemFields::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 PicStreamItemFields::file_size() const {
  return file_size_;
}
inline void PicStreamItemFields::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// required uint64 ori_deviceid = 6;
inline bool PicStreamItemFields::has_ori_deviceid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PicStreamItemFields::set_has_ori_deviceid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PicStreamItemFields::clear_has_ori_deviceid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PicStreamItemFields::clear_ori_deviceid() {
  ori_deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_ori_deviceid();
}
inline ::google::protobuf::uint64 PicStreamItemFields::ori_deviceid() const {
  return ori_deviceid_;
}
inline void PicStreamItemFields::set_ori_deviceid(::google::protobuf::uint64 value) {
  set_has_ori_deviceid();
  ori_deviceid_ = value;
}

// -------------------------------------------------------------------

// PicStreamAlbumFields

// required string album_name = 1;
inline bool PicStreamAlbumFields::has_album_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PicStreamAlbumFields::set_has_album_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PicStreamAlbumFields::clear_has_album_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PicStreamAlbumFields::clear_album_name() {
  if (album_name_ != &::google::protobuf::internal::kEmptyString) {
    album_name_->clear();
  }
  clear_has_album_name();
}
inline const ::std::string& PicStreamAlbumFields::album_name() const {
  return *album_name_;
}
inline void PicStreamAlbumFields::set_album_name(const ::std::string& value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void PicStreamAlbumFields::set_album_name(const char* value) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(value);
}
inline void PicStreamAlbumFields::set_album_name(const char* value, size_t size) {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  album_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PicStreamAlbumFields::mutable_album_name() {
  set_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    album_name_ = new ::std::string;
  }
  return album_name_;
}
inline ::std::string* PicStreamAlbumFields::release_album_name() {
  clear_has_album_name();
  if (album_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = album_name_;
    album_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 item_count = 2;
inline bool PicStreamAlbumFields::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PicStreamAlbumFields::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PicStreamAlbumFields::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PicStreamAlbumFields::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 PicStreamAlbumFields::item_count() const {
  return item_count_;
}
inline void PicStreamAlbumFields::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// required uint64 item_total_size = 3;
inline bool PicStreamAlbumFields::has_item_total_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PicStreamAlbumFields::set_has_item_total_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PicStreamAlbumFields::clear_has_item_total_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PicStreamAlbumFields::clear_item_total_size() {
  item_total_size_ = GOOGLE_ULONGLONG(0);
  clear_has_item_total_size();
}
inline ::google::protobuf::uint64 PicStreamAlbumFields::item_total_size() const {
  return item_total_size_;
}
inline void PicStreamAlbumFields::set_item_total_size(::google::protobuf::uint64 value) {
  set_has_item_total_size();
  item_total_size_ = value;
}

// -------------------------------------------------------------------

// SharedFilesStoreFileInput

// required fixed64 user_id = 1;
inline bool SharedFilesStoreFileInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesStoreFileInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesStoreFileInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesStoreFileInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SharedFilesStoreFileInput::user_id() const {
  return user_id_;
}
inline void SharedFilesStoreFileInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string abs_file_path = 2;
inline bool SharedFilesStoreFileInput::has_abs_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesStoreFileInput::set_has_abs_file_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesStoreFileInput::clear_has_abs_file_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesStoreFileInput::clear_abs_file_path() {
  if (abs_file_path_ != &::google::protobuf::internal::kEmptyString) {
    abs_file_path_->clear();
  }
  clear_has_abs_file_path();
}
inline const ::std::string& SharedFilesStoreFileInput::abs_file_path() const {
  return *abs_file_path_;
}
inline void SharedFilesStoreFileInput::set_abs_file_path(const ::std::string& value) {
  set_has_abs_file_path();
  if (abs_file_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_file_path_ = new ::std::string;
  }
  abs_file_path_->assign(value);
}
inline void SharedFilesStoreFileInput::set_abs_file_path(const char* value) {
  set_has_abs_file_path();
  if (abs_file_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_file_path_ = new ::std::string;
  }
  abs_file_path_->assign(value);
}
inline void SharedFilesStoreFileInput::set_abs_file_path(const char* value, size_t size) {
  set_has_abs_file_path();
  if (abs_file_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_file_path_ = new ::std::string;
  }
  abs_file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesStoreFileInput::mutable_abs_file_path() {
  set_has_abs_file_path();
  if (abs_file_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_file_path_ = new ::std::string;
  }
  return abs_file_path_;
}
inline ::std::string* SharedFilesStoreFileInput::release_abs_file_path() {
  clear_has_abs_file_path();
  if (abs_file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = abs_file_path_;
    abs_file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string opaque_metadata = 3;
inline bool SharedFilesStoreFileInput::has_opaque_metadata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedFilesStoreFileInput::set_has_opaque_metadata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedFilesStoreFileInput::clear_has_opaque_metadata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedFilesStoreFileInput::clear_opaque_metadata() {
  if (opaque_metadata_ != &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_->clear();
  }
  clear_has_opaque_metadata();
}
inline const ::std::string& SharedFilesStoreFileInput::opaque_metadata() const {
  return *opaque_metadata_;
}
inline void SharedFilesStoreFileInput::set_opaque_metadata(const ::std::string& value) {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  opaque_metadata_->assign(value);
}
inline void SharedFilesStoreFileInput::set_opaque_metadata(const char* value) {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  opaque_metadata_->assign(value);
}
inline void SharedFilesStoreFileInput::set_opaque_metadata(const char* value, size_t size) {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  opaque_metadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesStoreFileInput::mutable_opaque_metadata() {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  return opaque_metadata_;
}
inline ::std::string* SharedFilesStoreFileInput::release_opaque_metadata() {
  clear_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opaque_metadata_;
    opaque_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string abs_preview_path = 4;
inline bool SharedFilesStoreFileInput::has_abs_preview_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharedFilesStoreFileInput::set_has_abs_preview_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SharedFilesStoreFileInput::clear_has_abs_preview_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SharedFilesStoreFileInput::clear_abs_preview_path() {
  if (abs_preview_path_ != &::google::protobuf::internal::kEmptyString) {
    abs_preview_path_->clear();
  }
  clear_has_abs_preview_path();
}
inline const ::std::string& SharedFilesStoreFileInput::abs_preview_path() const {
  return *abs_preview_path_;
}
inline void SharedFilesStoreFileInput::set_abs_preview_path(const ::std::string& value) {
  set_has_abs_preview_path();
  if (abs_preview_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_preview_path_ = new ::std::string;
  }
  abs_preview_path_->assign(value);
}
inline void SharedFilesStoreFileInput::set_abs_preview_path(const char* value) {
  set_has_abs_preview_path();
  if (abs_preview_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_preview_path_ = new ::std::string;
  }
  abs_preview_path_->assign(value);
}
inline void SharedFilesStoreFileInput::set_abs_preview_path(const char* value, size_t size) {
  set_has_abs_preview_path();
  if (abs_preview_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_preview_path_ = new ::std::string;
  }
  abs_preview_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesStoreFileInput::mutable_abs_preview_path() {
  set_has_abs_preview_path();
  if (abs_preview_path_ == &::google::protobuf::internal::kEmptyString) {
    abs_preview_path_ = new ::std::string;
  }
  return abs_preview_path_;
}
inline ::std::string* SharedFilesStoreFileInput::release_abs_preview_path() {
  clear_has_abs_preview_path();
  if (abs_preview_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = abs_preview_path_;
    abs_preview_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SharedFilesStoreFileOutput

// optional fixed64 comp_id = 1;
inline bool SharedFilesStoreFileOutput::has_comp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesStoreFileOutput::set_has_comp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesStoreFileOutput::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesStoreFileOutput::clear_comp_id() {
  comp_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comp_id();
}
inline ::google::protobuf::uint64 SharedFilesStoreFileOutput::comp_id() const {
  return comp_id_;
}
inline void SharedFilesStoreFileOutput::set_comp_id(::google::protobuf::uint64 value) {
  set_has_comp_id();
  comp_id_ = value;
}

// optional string stored_name = 2;
inline bool SharedFilesStoreFileOutput::has_stored_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesStoreFileOutput::set_has_stored_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesStoreFileOutput::clear_has_stored_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesStoreFileOutput::clear_stored_name() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    stored_name_->clear();
  }
  clear_has_stored_name();
}
inline const ::std::string& SharedFilesStoreFileOutput::stored_name() const {
  return *stored_name_;
}
inline void SharedFilesStoreFileOutput::set_stored_name(const ::std::string& value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesStoreFileOutput::set_stored_name(const char* value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesStoreFileOutput::set_stored_name(const char* value, size_t size) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesStoreFileOutput::mutable_stored_name() {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  return stored_name_;
}
inline ::std::string* SharedFilesStoreFileOutput::release_stored_name() {
  clear_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stored_name_;
    stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SharedFilesShareFileInput

// required fixed64 user_id = 1;
inline bool SharedFilesShareFileInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesShareFileInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesShareFileInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesShareFileInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SharedFilesShareFileInput::user_id() const {
  return user_id_;
}
inline void SharedFilesShareFileInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 comp_id = 2;
inline bool SharedFilesShareFileInput::has_comp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesShareFileInput::set_has_comp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesShareFileInput::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesShareFileInput::clear_comp_id() {
  comp_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comp_id();
}
inline ::google::protobuf::uint64 SharedFilesShareFileInput::comp_id() const {
  return comp_id_;
}
inline void SharedFilesShareFileInput::set_comp_id(::google::protobuf::uint64 value) {
  set_has_comp_id();
  comp_id_ = value;
}

// optional string stored_name = 3;
inline bool SharedFilesShareFileInput::has_stored_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedFilesShareFileInput::set_has_stored_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedFilesShareFileInput::clear_has_stored_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedFilesShareFileInput::clear_stored_name() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    stored_name_->clear();
  }
  clear_has_stored_name();
}
inline const ::std::string& SharedFilesShareFileInput::stored_name() const {
  return *stored_name_;
}
inline void SharedFilesShareFileInput::set_stored_name(const ::std::string& value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesShareFileInput::set_stored_name(const char* value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesShareFileInput::set_stored_name(const char* value, size_t size) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesShareFileInput::mutable_stored_name() {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  return stored_name_;
}
inline ::std::string* SharedFilesShareFileInput::release_stored_name() {
  clear_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stored_name_;
    stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string recipient_emails = 4;
inline int SharedFilesShareFileInput::recipient_emails_size() const {
  return recipient_emails_.size();
}
inline void SharedFilesShareFileInput::clear_recipient_emails() {
  recipient_emails_.Clear();
}
inline const ::std::string& SharedFilesShareFileInput::recipient_emails(int index) const {
  return recipient_emails_.Get(index);
}
inline ::std::string* SharedFilesShareFileInput::mutable_recipient_emails(int index) {
  return recipient_emails_.Mutable(index);
}
inline void SharedFilesShareFileInput::set_recipient_emails(int index, const ::std::string& value) {
  recipient_emails_.Mutable(index)->assign(value);
}
inline void SharedFilesShareFileInput::set_recipient_emails(int index, const char* value) {
  recipient_emails_.Mutable(index)->assign(value);
}
inline void SharedFilesShareFileInput::set_recipient_emails(int index, const char* value, size_t size) {
  recipient_emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesShareFileInput::add_recipient_emails() {
  return recipient_emails_.Add();
}
inline void SharedFilesShareFileInput::add_recipient_emails(const ::std::string& value) {
  recipient_emails_.Add()->assign(value);
}
inline void SharedFilesShareFileInput::add_recipient_emails(const char* value) {
  recipient_emails_.Add()->assign(value);
}
inline void SharedFilesShareFileInput::add_recipient_emails(const char* value, size_t size) {
  recipient_emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SharedFilesShareFileInput::recipient_emails() const {
  return recipient_emails_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SharedFilesShareFileInput::mutable_recipient_emails() {
  return &recipient_emails_;
}

// -------------------------------------------------------------------

// SharedFilesUnshareFileInput

// required fixed64 user_id = 1;
inline bool SharedFilesUnshareFileInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesUnshareFileInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesUnshareFileInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesUnshareFileInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SharedFilesUnshareFileInput::user_id() const {
  return user_id_;
}
inline void SharedFilesUnshareFileInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 comp_id = 2;
inline bool SharedFilesUnshareFileInput::has_comp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesUnshareFileInput::set_has_comp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesUnshareFileInput::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesUnshareFileInput::clear_comp_id() {
  comp_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comp_id();
}
inline ::google::protobuf::uint64 SharedFilesUnshareFileInput::comp_id() const {
  return comp_id_;
}
inline void SharedFilesUnshareFileInput::set_comp_id(::google::protobuf::uint64 value) {
  set_has_comp_id();
  comp_id_ = value;
}

// optional string stored_name = 3;
inline bool SharedFilesUnshareFileInput::has_stored_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedFilesUnshareFileInput::set_has_stored_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedFilesUnshareFileInput::clear_has_stored_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedFilesUnshareFileInput::clear_stored_name() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    stored_name_->clear();
  }
  clear_has_stored_name();
}
inline const ::std::string& SharedFilesUnshareFileInput::stored_name() const {
  return *stored_name_;
}
inline void SharedFilesUnshareFileInput::set_stored_name(const ::std::string& value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesUnshareFileInput::set_stored_name(const char* value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesUnshareFileInput::set_stored_name(const char* value, size_t size) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesUnshareFileInput::mutable_stored_name() {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  return stored_name_;
}
inline ::std::string* SharedFilesUnshareFileInput::release_stored_name() {
  clear_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stored_name_;
    stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string recipient_emails = 4;
inline int SharedFilesUnshareFileInput::recipient_emails_size() const {
  return recipient_emails_.size();
}
inline void SharedFilesUnshareFileInput::clear_recipient_emails() {
  recipient_emails_.Clear();
}
inline const ::std::string& SharedFilesUnshareFileInput::recipient_emails(int index) const {
  return recipient_emails_.Get(index);
}
inline ::std::string* SharedFilesUnshareFileInput::mutable_recipient_emails(int index) {
  return recipient_emails_.Mutable(index);
}
inline void SharedFilesUnshareFileInput::set_recipient_emails(int index, const ::std::string& value) {
  recipient_emails_.Mutable(index)->assign(value);
}
inline void SharedFilesUnshareFileInput::set_recipient_emails(int index, const char* value) {
  recipient_emails_.Mutable(index)->assign(value);
}
inline void SharedFilesUnshareFileInput::set_recipient_emails(int index, const char* value, size_t size) {
  recipient_emails_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesUnshareFileInput::add_recipient_emails() {
  return recipient_emails_.Add();
}
inline void SharedFilesUnshareFileInput::add_recipient_emails(const ::std::string& value) {
  recipient_emails_.Add()->assign(value);
}
inline void SharedFilesUnshareFileInput::add_recipient_emails(const char* value) {
  recipient_emails_.Add()->assign(value);
}
inline void SharedFilesUnshareFileInput::add_recipient_emails(const char* value, size_t size) {
  recipient_emails_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SharedFilesUnshareFileInput::recipient_emails() const {
  return recipient_emails_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SharedFilesUnshareFileInput::mutable_recipient_emails() {
  return &recipient_emails_;
}

// -------------------------------------------------------------------

// SharedFilesDeleteSharedFileInput

// required fixed64 user_id = 1;
inline bool SharedFilesDeleteSharedFileInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesDeleteSharedFileInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesDeleteSharedFileInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesDeleteSharedFileInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SharedFilesDeleteSharedFileInput::user_id() const {
  return user_id_;
}
inline void SharedFilesDeleteSharedFileInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required fixed64 comp_id = 2;
inline bool SharedFilesDeleteSharedFileInput::has_comp_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesDeleteSharedFileInput::set_has_comp_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesDeleteSharedFileInput::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesDeleteSharedFileInput::clear_comp_id() {
  comp_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comp_id();
}
inline ::google::protobuf::uint64 SharedFilesDeleteSharedFileInput::comp_id() const {
  return comp_id_;
}
inline void SharedFilesDeleteSharedFileInput::set_comp_id(::google::protobuf::uint64 value) {
  set_has_comp_id();
  comp_id_ = value;
}

// optional string stored_name = 3;
inline bool SharedFilesDeleteSharedFileInput::has_stored_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedFilesDeleteSharedFileInput::set_has_stored_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedFilesDeleteSharedFileInput::clear_has_stored_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedFilesDeleteSharedFileInput::clear_stored_name() {
  if (stored_name_ != &::google::protobuf::internal::kEmptyString) {
    stored_name_->clear();
  }
  clear_has_stored_name();
}
inline const ::std::string& SharedFilesDeleteSharedFileInput::stored_name() const {
  return *stored_name_;
}
inline void SharedFilesDeleteSharedFileInput::set_stored_name(const ::std::string& value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesDeleteSharedFileInput::set_stored_name(const char* value) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(value);
}
inline void SharedFilesDeleteSharedFileInput::set_stored_name(const char* value, size_t size) {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  stored_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesDeleteSharedFileInput::mutable_stored_name() {
  set_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    stored_name_ = new ::std::string;
  }
  return stored_name_;
}
inline ::std::string* SharedFilesDeleteSharedFileInput::release_stored_name() {
  clear_has_stored_name();
  if (stored_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stored_name_;
    stored_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SharedFilesQueryInput

// required fixed64 user_id = 1;
inline bool SharedFilesQueryInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesQueryInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesQueryInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesQueryInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 SharedFilesQueryInput::user_id() const {
  return user_id_;
}
inline void SharedFilesQueryInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .ccd.SyncFeature_t sync_feature = 2;
inline bool SharedFilesQueryInput::has_sync_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesQueryInput::set_has_sync_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesQueryInput::clear_has_sync_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesQueryInput::clear_sync_feature() {
  sync_feature_ = 1;
  clear_has_sync_feature();
}
inline ccd::SyncFeature_t SharedFilesQueryInput::sync_feature() const {
  return static_cast< ccd::SyncFeature_t >(sync_feature_);
}
inline void SharedFilesQueryInput::set_sync_feature(ccd::SyncFeature_t value) {
  GOOGLE_DCHECK(ccd::SyncFeature_t_IsValid(value));
  set_has_sync_feature();
  sync_feature_ = value;
}

// optional string search_field = 3;
inline bool SharedFilesQueryInput::has_search_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedFilesQueryInput::set_has_search_field() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedFilesQueryInput::clear_has_search_field() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedFilesQueryInput::clear_search_field() {
  if (search_field_ != &::google::protobuf::internal::kEmptyString) {
    search_field_->clear();
  }
  clear_has_search_field();
}
inline const ::std::string& SharedFilesQueryInput::search_field() const {
  return *search_field_;
}
inline void SharedFilesQueryInput::set_search_field(const ::std::string& value) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(value);
}
inline void SharedFilesQueryInput::set_search_field(const char* value) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(value);
}
inline void SharedFilesQueryInput::set_search_field(const char* value, size_t size) {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  search_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryInput::mutable_search_field() {
  set_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    search_field_ = new ::std::string;
  }
  return search_field_;
}
inline ::std::string* SharedFilesQueryInput::release_search_field() {
  clear_has_search_field();
  if (search_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = search_field_;
    search_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sort_field = 4;
inline bool SharedFilesQueryInput::has_sort_field() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharedFilesQueryInput::set_has_sort_field() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SharedFilesQueryInput::clear_has_sort_field() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SharedFilesQueryInput::clear_sort_field() {
  if (sort_field_ != &::google::protobuf::internal::kEmptyString) {
    sort_field_->clear();
  }
  clear_has_sort_field();
}
inline const ::std::string& SharedFilesQueryInput::sort_field() const {
  return *sort_field_;
}
inline void SharedFilesQueryInput::set_sort_field(const ::std::string& value) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(value);
}
inline void SharedFilesQueryInput::set_sort_field(const char* value) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(value);
}
inline void SharedFilesQueryInput::set_sort_field(const char* value, size_t size) {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  sort_field_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryInput::mutable_sort_field() {
  set_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    sort_field_ = new ::std::string;
  }
  return sort_field_;
}
inline ::std::string* SharedFilesQueryInput::release_sort_field() {
  clear_has_sort_field();
  if (sort_field_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sort_field_;
    sort_field_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SharedFilesQueryObject

// required fixed64 comp_id = 1;
inline bool SharedFilesQueryObject::has_comp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SharedFilesQueryObject::set_has_comp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SharedFilesQueryObject::clear_has_comp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SharedFilesQueryObject::clear_comp_id() {
  comp_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comp_id();
}
inline ::google::protobuf::uint64 SharedFilesQueryObject::comp_id() const {
  return comp_id_;
}
inline void SharedFilesQueryObject::set_comp_id(::google::protobuf::uint64 value) {
  set_has_comp_id();
  comp_id_ = value;
}

// optional fixed64 revision = 2;
inline bool SharedFilesQueryObject::has_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SharedFilesQueryObject::set_has_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SharedFilesQueryObject::clear_has_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SharedFilesQueryObject::clear_revision() {
  revision_ = GOOGLE_ULONGLONG(0);
  clear_has_revision();
}
inline ::google::protobuf::uint64 SharedFilesQueryObject::revision() const {
  return revision_;
}
inline void SharedFilesQueryObject::set_revision(::google::protobuf::uint64 value) {
  set_has_revision();
  revision_ = value;
}

// required string name = 3;
inline bool SharedFilesQueryObject::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SharedFilesQueryObject::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SharedFilesQueryObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SharedFilesQueryObject::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SharedFilesQueryObject::name() const {
  return *name_;
}
inline void SharedFilesQueryObject::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SharedFilesQueryObject::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SharedFilesQueryObject::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryObject::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SharedFilesQueryObject::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content_url = 4;
inline bool SharedFilesQueryObject::has_content_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SharedFilesQueryObject::set_has_content_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SharedFilesQueryObject::clear_has_content_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SharedFilesQueryObject::clear_content_url() {
  if (content_url_ != &::google::protobuf::internal::kEmptyString) {
    content_url_->clear();
  }
  clear_has_content_url();
}
inline const ::std::string& SharedFilesQueryObject::content_url() const {
  return *content_url_;
}
inline void SharedFilesQueryObject::set_content_url(const ::std::string& value) {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  content_url_->assign(value);
}
inline void SharedFilesQueryObject::set_content_url(const char* value) {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  content_url_->assign(value);
}
inline void SharedFilesQueryObject::set_content_url(const char* value, size_t size) {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  content_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryObject::mutable_content_url() {
  set_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    content_url_ = new ::std::string;
  }
  return content_url_;
}
inline ::std::string* SharedFilesQueryObject::release_content_url() {
  clear_has_content_url();
  if (content_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_url_;
    content_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string preview_url = 5;
inline bool SharedFilesQueryObject::has_preview_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SharedFilesQueryObject::set_has_preview_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SharedFilesQueryObject::clear_has_preview_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SharedFilesQueryObject::clear_preview_url() {
  if (preview_url_ != &::google::protobuf::internal::kEmptyString) {
    preview_url_->clear();
  }
  clear_has_preview_url();
}
inline const ::std::string& SharedFilesQueryObject::preview_url() const {
  return *preview_url_;
}
inline void SharedFilesQueryObject::set_preview_url(const ::std::string& value) {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::kEmptyString) {
    preview_url_ = new ::std::string;
  }
  preview_url_->assign(value);
}
inline void SharedFilesQueryObject::set_preview_url(const char* value) {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::kEmptyString) {
    preview_url_ = new ::std::string;
  }
  preview_url_->assign(value);
}
inline void SharedFilesQueryObject::set_preview_url(const char* value, size_t size) {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::kEmptyString) {
    preview_url_ = new ::std::string;
  }
  preview_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryObject::mutable_preview_url() {
  set_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::kEmptyString) {
    preview_url_ = new ::std::string;
  }
  return preview_url_;
}
inline ::std::string* SharedFilesQueryObject::release_preview_url() {
  clear_has_preview_url();
  if (preview_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preview_url_;
    preview_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string opaque_metadata = 6;
inline bool SharedFilesQueryObject::has_opaque_metadata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SharedFilesQueryObject::set_has_opaque_metadata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SharedFilesQueryObject::clear_has_opaque_metadata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SharedFilesQueryObject::clear_opaque_metadata() {
  if (opaque_metadata_ != &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_->clear();
  }
  clear_has_opaque_metadata();
}
inline const ::std::string& SharedFilesQueryObject::opaque_metadata() const {
  return *opaque_metadata_;
}
inline void SharedFilesQueryObject::set_opaque_metadata(const ::std::string& value) {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  opaque_metadata_->assign(value);
}
inline void SharedFilesQueryObject::set_opaque_metadata(const char* value) {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  opaque_metadata_->assign(value);
}
inline void SharedFilesQueryObject::set_opaque_metadata(const char* value, size_t size) {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  opaque_metadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryObject::mutable_opaque_metadata() {
  set_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    opaque_metadata_ = new ::std::string;
  }
  return opaque_metadata_;
}
inline ::std::string* SharedFilesQueryObject::release_opaque_metadata() {
  clear_has_opaque_metadata();
  if (opaque_metadata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opaque_metadata_;
    opaque_metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string recipient_list = 7;
inline int SharedFilesQueryObject::recipient_list_size() const {
  return recipient_list_.size();
}
inline void SharedFilesQueryObject::clear_recipient_list() {
  recipient_list_.Clear();
}
inline const ::std::string& SharedFilesQueryObject::recipient_list(int index) const {
  return recipient_list_.Get(index);
}
inline ::std::string* SharedFilesQueryObject::mutable_recipient_list(int index) {
  return recipient_list_.Mutable(index);
}
inline void SharedFilesQueryObject::set_recipient_list(int index, const ::std::string& value) {
  recipient_list_.Mutable(index)->assign(value);
}
inline void SharedFilesQueryObject::set_recipient_list(int index, const char* value) {
  recipient_list_.Mutable(index)->assign(value);
}
inline void SharedFilesQueryObject::set_recipient_list(int index, const char* value, size_t size) {
  recipient_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SharedFilesQueryObject::add_recipient_list() {
  return recipient_list_.Add();
}
inline void SharedFilesQueryObject::add_recipient_list(const ::std::string& value) {
  recipient_list_.Add()->assign(value);
}
inline void SharedFilesQueryObject::add_recipient_list(const char* value) {
  recipient_list_.Add()->assign(value);
}
inline void SharedFilesQueryObject::add_recipient_list(const char* value, size_t size) {
  recipient_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SharedFilesQueryObject::recipient_list() const {
  return recipient_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SharedFilesQueryObject::mutable_recipient_list() {
  return &recipient_list_;
}

// -------------------------------------------------------------------

// SharedFilesQueryOutput

// repeated .ccd.SharedFilesQueryObject query_objects = 1;
inline int SharedFilesQueryOutput::query_objects_size() const {
  return query_objects_.size();
}
inline void SharedFilesQueryOutput::clear_query_objects() {
  query_objects_.Clear();
}
inline const ::ccd::SharedFilesQueryObject& SharedFilesQueryOutput::query_objects(int index) const {
  return query_objects_.Get(index);
}
inline ::ccd::SharedFilesQueryObject* SharedFilesQueryOutput::mutable_query_objects(int index) {
  return query_objects_.Mutable(index);
}
inline ::ccd::SharedFilesQueryObject* SharedFilesQueryOutput::add_query_objects() {
  return query_objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::SharedFilesQueryObject >&
SharedFilesQueryOutput::query_objects() const {
  return query_objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::SharedFilesQueryObject >*
SharedFilesQueryOutput::mutable_query_objects() {
  return &query_objects_;
}

// -------------------------------------------------------------------

// RemoteExecutableInfo

// required string name = 1;
inline bool RemoteExecutableInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteExecutableInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteExecutableInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteExecutableInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RemoteExecutableInfo::name() const {
  return *name_;
}
inline void RemoteExecutableInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RemoteExecutableInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RemoteExecutableInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoteExecutableInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RemoteExecutableInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string absolute_path = 2;
inline bool RemoteExecutableInfo::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteExecutableInfo::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteExecutableInfo::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteExecutableInfo::clear_absolute_path() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    absolute_path_->clear();
  }
  clear_has_absolute_path();
}
inline const ::std::string& RemoteExecutableInfo::absolute_path() const {
  return *absolute_path_;
}
inline void RemoteExecutableInfo::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void RemoteExecutableInfo::set_absolute_path(const char* value) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(value);
}
inline void RemoteExecutableInfo::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  absolute_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoteExecutableInfo::mutable_absolute_path() {
  set_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    absolute_path_ = new ::std::string;
  }
  return absolute_path_;
}
inline ::std::string* RemoteExecutableInfo::release_absolute_path() {
  clear_has_absolute_path();
  if (absolute_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolute_path_;
    absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required fixed64 version_num = 3;
inline bool RemoteExecutableInfo::has_version_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemoteExecutableInfo::set_has_version_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemoteExecutableInfo::clear_has_version_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemoteExecutableInfo::clear_version_num() {
  version_num_ = GOOGLE_ULONGLONG(0);
  clear_has_version_num();
}
inline ::google::protobuf::uint64 RemoteExecutableInfo::version_num() const {
  return version_num_;
}
inline void RemoteExecutableInfo::set_version_num(::google::protobuf::uint64 value) {
  set_has_version_num();
  version_num_ = value;
}

// -------------------------------------------------------------------

// RegisterRemoteExecutableInput

// required fixed64 user_id = 1;
inline bool RegisterRemoteExecutableInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRemoteExecutableInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRemoteExecutableInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRemoteExecutableInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 RegisterRemoteExecutableInput::user_id() const {
  return user_id_;
}
inline void RegisterRemoteExecutableInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string app_key = 2;
inline bool RegisterRemoteExecutableInput::has_app_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRemoteExecutableInput::set_has_app_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRemoteExecutableInput::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRemoteExecutableInput::clear_app_key() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    app_key_->clear();
  }
  clear_has_app_key();
}
inline const ::std::string& RegisterRemoteExecutableInput::app_key() const {
  return *app_key_;
}
inline void RegisterRemoteExecutableInput::set_app_key(const ::std::string& value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void RegisterRemoteExecutableInput::set_app_key(const char* value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void RegisterRemoteExecutableInput::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterRemoteExecutableInput::mutable_app_key() {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  return app_key_;
}
inline ::std::string* RegisterRemoteExecutableInput::release_app_key() {
  clear_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_key_;
    app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .ccd.RemoteExecutableInfo remote_executable_info = 3;
inline bool RegisterRemoteExecutableInput::has_remote_executable_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterRemoteExecutableInput::set_has_remote_executable_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterRemoteExecutableInput::clear_has_remote_executable_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterRemoteExecutableInput::clear_remote_executable_info() {
  if (remote_executable_info_ != NULL) remote_executable_info_->::ccd::RemoteExecutableInfo::Clear();
  clear_has_remote_executable_info();
}
inline const ::ccd::RemoteExecutableInfo& RegisterRemoteExecutableInput::remote_executable_info() const {
  return remote_executable_info_ != NULL ? *remote_executable_info_ : *default_instance_->remote_executable_info_;
}
inline ::ccd::RemoteExecutableInfo* RegisterRemoteExecutableInput::mutable_remote_executable_info() {
  set_has_remote_executable_info();
  if (remote_executable_info_ == NULL) remote_executable_info_ = new ::ccd::RemoteExecutableInfo;
  return remote_executable_info_;
}
inline ::ccd::RemoteExecutableInfo* RegisterRemoteExecutableInput::release_remote_executable_info() {
  clear_has_remote_executable_info();
  ::ccd::RemoteExecutableInfo* temp = remote_executable_info_;
  remote_executable_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UnregisterRemoteExecutableInput

// required fixed64 user_id = 1;
inline bool UnregisterRemoteExecutableInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnregisterRemoteExecutableInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnregisterRemoteExecutableInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnregisterRemoteExecutableInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 UnregisterRemoteExecutableInput::user_id() const {
  return user_id_;
}
inline void UnregisterRemoteExecutableInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string app_key = 2;
inline bool UnregisterRemoteExecutableInput::has_app_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnregisterRemoteExecutableInput::set_has_app_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnregisterRemoteExecutableInput::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnregisterRemoteExecutableInput::clear_app_key() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    app_key_->clear();
  }
  clear_has_app_key();
}
inline const ::std::string& UnregisterRemoteExecutableInput::app_key() const {
  return *app_key_;
}
inline void UnregisterRemoteExecutableInput::set_app_key(const ::std::string& value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void UnregisterRemoteExecutableInput::set_app_key(const char* value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void UnregisterRemoteExecutableInput::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnregisterRemoteExecutableInput::mutable_app_key() {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  return app_key_;
}
inline ::std::string* UnregisterRemoteExecutableInput::release_app_key() {
  clear_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_key_;
    app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string remote_executable_name = 3;
inline bool UnregisterRemoteExecutableInput::has_remote_executable_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnregisterRemoteExecutableInput::set_has_remote_executable_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnregisterRemoteExecutableInput::clear_has_remote_executable_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnregisterRemoteExecutableInput::clear_remote_executable_name() {
  if (remote_executable_name_ != &::google::protobuf::internal::kEmptyString) {
    remote_executable_name_->clear();
  }
  clear_has_remote_executable_name();
}
inline const ::std::string& UnregisterRemoteExecutableInput::remote_executable_name() const {
  return *remote_executable_name_;
}
inline void UnregisterRemoteExecutableInput::set_remote_executable_name(const ::std::string& value) {
  set_has_remote_executable_name();
  if (remote_executable_name_ == &::google::protobuf::internal::kEmptyString) {
    remote_executable_name_ = new ::std::string;
  }
  remote_executable_name_->assign(value);
}
inline void UnregisterRemoteExecutableInput::set_remote_executable_name(const char* value) {
  set_has_remote_executable_name();
  if (remote_executable_name_ == &::google::protobuf::internal::kEmptyString) {
    remote_executable_name_ = new ::std::string;
  }
  remote_executable_name_->assign(value);
}
inline void UnregisterRemoteExecutableInput::set_remote_executable_name(const char* value, size_t size) {
  set_has_remote_executable_name();
  if (remote_executable_name_ == &::google::protobuf::internal::kEmptyString) {
    remote_executable_name_ = new ::std::string;
  }
  remote_executable_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UnregisterRemoteExecutableInput::mutable_remote_executable_name() {
  set_has_remote_executable_name();
  if (remote_executable_name_ == &::google::protobuf::internal::kEmptyString) {
    remote_executable_name_ = new ::std::string;
  }
  return remote_executable_name_;
}
inline ::std::string* UnregisterRemoteExecutableInput::release_remote_executable_name() {
  clear_has_remote_executable_name();
  if (remote_executable_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remote_executable_name_;
    remote_executable_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListRegisteredRemoteExecutablesInput

// required fixed64 user_id = 1;
inline bool ListRegisteredRemoteExecutablesInput::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRegisteredRemoteExecutablesInput::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRegisteredRemoteExecutablesInput::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRegisteredRemoteExecutablesInput::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 ListRegisteredRemoteExecutablesInput::user_id() const {
  return user_id_;
}
inline void ListRegisteredRemoteExecutablesInput::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string app_key = 2;
inline bool ListRegisteredRemoteExecutablesInput::has_app_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListRegisteredRemoteExecutablesInput::set_has_app_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListRegisteredRemoteExecutablesInput::clear_has_app_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListRegisteredRemoteExecutablesInput::clear_app_key() {
  if (app_key_ != &::google::protobuf::internal::kEmptyString) {
    app_key_->clear();
  }
  clear_has_app_key();
}
inline const ::std::string& ListRegisteredRemoteExecutablesInput::app_key() const {
  return *app_key_;
}
inline void ListRegisteredRemoteExecutablesInput::set_app_key(const ::std::string& value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void ListRegisteredRemoteExecutablesInput::set_app_key(const char* value) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(value);
}
inline void ListRegisteredRemoteExecutablesInput::set_app_key(const char* value, size_t size) {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  app_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListRegisteredRemoteExecutablesInput::mutable_app_key() {
  set_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    app_key_ = new ::std::string;
  }
  return app_key_;
}
inline ::std::string* ListRegisteredRemoteExecutablesInput::release_app_key() {
  clear_has_app_key();
  if (app_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_key_;
    app_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ListRegisteredRemoteExecutablesOutput

// repeated .ccd.RemoteExecutableInfo registered_remote_executables = 1;
inline int ListRegisteredRemoteExecutablesOutput::registered_remote_executables_size() const {
  return registered_remote_executables_.size();
}
inline void ListRegisteredRemoteExecutablesOutput::clear_registered_remote_executables() {
  registered_remote_executables_.Clear();
}
inline const ::ccd::RemoteExecutableInfo& ListRegisteredRemoteExecutablesOutput::registered_remote_executables(int index) const {
  return registered_remote_executables_.Get(index);
}
inline ::ccd::RemoteExecutableInfo* ListRegisteredRemoteExecutablesOutput::mutable_registered_remote_executables(int index) {
  return registered_remote_executables_.Mutable(index);
}
inline ::ccd::RemoteExecutableInfo* ListRegisteredRemoteExecutablesOutput::add_registered_remote_executables() {
  return registered_remote_executables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ccd::RemoteExecutableInfo >&
ListRegisteredRemoteExecutablesOutput::registered_remote_executables() const {
  return registered_remote_executables_;
}
inline ::google::protobuf::RepeatedPtrField< ::ccd::RemoteExecutableInfo >*
ListRegisteredRemoteExecutablesOutput::mutable_registered_remote_executables() {
  return &registered_remote_executables_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ccd

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::InfraHttpService_t>() {
  return ccd::InfraHttpService_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::LocalHttpService_t>() {
  return ccd::LocalHttpService_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::IoacStatusSummary_t>() {
  return ccd::IoacStatusSummary_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::InfraHttpRequestMethod_t>() {
  return ccd::InfraHttpRequestMethod_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::LanDeviceType_t>() {
  return ccd::LanDeviceType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::LanInterfaceType_t>() {
  return ccd::LanInterfaceType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::NewDatasetType_t>() {
  return ccd::NewDatasetType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SyncSubscriptionType_t>() {
  return ccd::SyncSubscriptionType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SyncFeature_t>() {
  return ccd::SyncFeature_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::DatasetSyncStateType_t>() {
  return ccd::DatasetSyncStateType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::CcdApp_t>() {
  return ccd::CcdApp_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::DeviceInfoChangeType_t>() {
  return ccd::DeviceInfoChangeType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::StorageNodeChangeType_t>() {
  return ccd::StorageNodeChangeType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::LogoutReason_t>() {
  return ccd::LogoutReason_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::PowerMode_t>() {
  return ccd::PowerMode_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::AsyncUploadState_t>() {
  return ccd::AsyncUploadState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::DeviceCredChangeType_t>() {
  return ccd::DeviceCredChangeType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::DeviceConnectionState_t>() {
  return ccd::DeviceConnectionState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SyncEventType_t>() {
  return ccd::SyncEventType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SyncStateType_t>() {
  return ccd::SyncStateType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::FeatureSyncStateType_t>() {
  return ccd::FeatureSyncStateType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SyncEventErrorType_t>() {
  return ccd::SyncEventErrorType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SyncFileChangeType_t>() {
  return ccd::SyncFileChangeType_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SWUpdateMaskBits_t>() {
  return ccd::SWUpdateMaskBits_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::SWUpdateDownloadState_t>() {
  return ccd::SWUpdateDownloadState_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::DocSaveAndGoChangeType>() {
  return ccd::DocSaveAndGoChangeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ccd::PicStream_DBFilterType_t>() {
  return ccd::PicStream_DBFilterType_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ccdi_5frpc_2eproto__INCLUDED
