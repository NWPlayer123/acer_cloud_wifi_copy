//
//  Copyright 2013 Acer Cloud Technology Inc.
//  All Rights Reserved.
//
//  THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND
//  TRADE SECRETS OF ACER CLOUD TECHNOLOGY INC.
//  USE, DISCLOSURE OR REPRODUCTION IS PROHIBITED WITHOUT
//  THE PRIOR EXPRESS WRITTEN PERMISSION OF ACER CLOUD
//  TECHNOLOGY INC.
//

#ifndef SYNCCONFIGTESTFILES_HPP_
#define SYNCCONFIGTESTFILES_HPP_

#include <map>

const unsigned char testFile1[] = {
  0xa5, 0x8f, 0x6f, 0x1d, 0xbb, 0x40, 0x54, 0x6f, 0xfe, 0xea, 0x01, 0x47,
  0x19, 0x36, 0xef, 0x49, 0x1c, 0x10, 0x3d, 0x7f, 0xea, 0xcb, 0x33, 0x4c,
  0x2a, 0x36, 0x65, 0x66, 0xc8, 0xee, 0xcd, 0x68, 0x32, 0xa3, 0x9f, 0x50,
  0xab, 0x71, 0x74, 0x40, 0xd2, 0x35, 0x7d, 0x5f, 0x27, 0x6a, 0x64, 0x68,
  0x02, 0x4e, 0x71, 0x7f, 0x1a, 0x83, 0x07, 0x41, 0xf6, 0x4e, 0x7b, 0x59,
  0xd9, 0x91, 0x58, 0x1e, 0xd9, 0xe0, 0x84, 0x32, 0xb7, 0xeb, 0x53, 0x6f,
  0x99, 0xff, 0x2e, 0x1e, 0x9b, 0x36, 0x5b, 0x25, 0xe7, 0x92, 0x00, 0x4d,
  0x91, 0x97, 0x14, 0x47, 0x85, 0x40, 0x31, 0x01, 0x89, 0x8b, 0x8e, 0x06,
  0x99, 0xad, 0xc8, 0x26, 0x2b, 0xf2, 0x1b, 0x25, 0x87, 0x4a, 0xf2, 0x18,
  0x21, 0xf6, 0xc5, 0x21, 0x4d, 0x7e, 0xaf, 0x55, 0x38, 0x49, 0x2f, 0x26,
  0x28, 0xfc, 0x09, 0x6e, 0xf2, 0x0d, 0x1f, 0x73, 0xf3, 0x89, 0x83, 0x15,
  0x27, 0xe7, 0x0b, 0x35, 0x0b, 0x44, 0x0e, 0x3d, 0x0f, 0x9a, 0xc0, 0x14,
  0x11, 0xb3, 0x3f, 0x01, 0x35, 0x7a, 0x73, 0x23, 0xd7, 0x88, 0x8e, 0x7d,
  0x43, 0x56, 0xdf, 0x51, 0xe0, 0xeb, 0xe7, 0x63, 0xaa, 0xbe, 0x0b, 0x5d,
  0x6a, 0xc0, 0x43, 0x3a, 0xe2, 0x39, 0x59, 0x63, 0xc4, 0x41, 0x13, 0x1e,
  0x60, 0x0f, 0xbf, 0x13, 0xbc, 0xcb, 0xb1, 0x01, 0x9d, 0x22, 0x98, 0x50,
  0x17, 0xfb, 0x12, 0x03, 0x55, 0xcb, 0xe0, 0x1f
};

const char* testFile1_hash = "a6333a914fffc73f71cb59b802d45bba421ffb1a";
u64 testFile1_len = 200;

const unsigned char testFile2[] = {
  0x28, 0x43, 0x4e, 0x4e, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4a, 0x75, 0x73,
  0x74, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x68, 0x61, 0x72, 0x64, 0x20, 0x69,
  0x73, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x64,
  0x20, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x20,
  0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x20, 0x6f,
  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x3f,
  0x0a, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x74, 0x61,
  0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x6d,
  0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x70, 0x20,
  0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74,
  0x6f, 0x20, 0x73, 0x70, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x73, 0x75, 0x69,
  0x74, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
  0x20, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x6c, 0x6f,
  0x77, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6d, 0x61, 0x67,
  0x69, 0x6e, 0x65, 0x20, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74,
  0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
  0x20, 0x64, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x0a, 0x54,
  0x68, 0x61, 0x74, 0x27, 0x73, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x61,
  0x6c, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x63, 0x72, 0x65,
  0x77, 0x73, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67,
  0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x61, 0x6c, 0x61, 0x79, 0x73, 0x69,
  0x61, 0x20, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x46,
  0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x33, 0x37, 0x30, 0x20, 0x68, 0x61,
  0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x72, 0x79, 0x69,
  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x66, 0x6f, 0x72,
  0x20, 0x61, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x0a, 0x20, 0x50,
  0x68, 0x6f, 0x74, 0x6f, 0x73, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
  0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x61,
  0x6c, 0x61, 0x79, 0x73, 0x69, 0x61, 0x20, 0x41, 0x69, 0x72, 0x6c, 0x69,
  0x6e, 0x65, 0x73, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x33,
  0x37, 0x30, 0x20, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x3a, 0x20, 0x54,
  0x68, 0x65, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f,
  0x72, 0x20, 0x4d, 0x61, 0x6c, 0x61, 0x79, 0x73, 0x69, 0x61, 0x20, 0x41,
  0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x46, 0x6c, 0x69, 0x67,
  0x68, 0x74, 0x20, 0x33, 0x37, 0x30, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72,
  0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
  0x70, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
  0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e,
  0x20, 0x43, 0x4e, 0x4e, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x4d,
  0x48, 0x33, 0x37, 0x30, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
  0x6f, 0x76, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20,
  0x4f, 0x63, 0x65, 0x61, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6c, 0x64, 0x20,
  0x74, 0x68, 0x65, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x62, 0x65,
  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4d, 0x48, 0x33, 0x37, 0x30, 0x3f,
  0x0a, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x20, 0x69, 0x73,
  0x20, 0x44, 0x61, 0x79, 0x20, 0x33, 0x34, 0x20, 0x69, 0x6e, 0x20, 0x74,
  0x68, 0x65, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f,
  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20,
  0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65,
  0x61, 0x72, 0x65, 0x64, 0x20, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x20, 0x38,
  0x2c, 0x20, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
  0x68, 0x20, 0x69, 0x74, 0x20, 0x32, 0x33, 0x39, 0x20, 0x70, 0x61, 0x73,
  0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
  0x63, 0x72, 0x65, 0x77, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
  0x2e, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x20,
  0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
  0x42, 0x6f, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x37, 0x37, 0x37, 0x2c, 0x20,
  0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x72, 0x6f, 0x75,
  0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4b, 0x75, 0x61, 0x6c,
  0x61, 0x20, 0x4c, 0x75, 0x6d, 0x70, 0x75, 0x72, 0x2c, 0x20, 0x4d, 0x61,
  0x6c, 0x61, 0x79, 0x73, 0x69, 0x61, 0x2c, 0x20, 0x74, 0x6f, 0x20, 0x42,
  0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x63, 0x72, 0x61, 0x73,
  0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
  0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x64, 0x69,
  0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x0a, 0x50, 0x69,
  0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20,
  0x68, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x67,
  0x6e, 0x61, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x74, 0x68,
  0x69, 0x6e, 0x6b, 0x20, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f,
  0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x27,
  0x73, 0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x20, 0x62, 0x6f, 0x78, 0x65,
  0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x6e, 0x61, 0x72, 0x72,
  0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x63,
  0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20,
  0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x54, 0x68, 0x75, 0x72, 0x73,
  0x64, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x32, 0x32, 0x2c,
  0x34, 0x30, 0x30, 0x2d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2d, 0x6d,
  0x69, 0x6c, 0x65, 0x20, 0x28, 0x35, 0x38, 0x2c, 0x30, 0x30, 0x30, 0x2d,
  0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2d, 0x6b, 0x69, 0x6c, 0x6f, 0x6d,
  0x65, 0x74, 0x65, 0x72, 0x29, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x2d,
  0x2d, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x34, 0x35, 0x20, 0x74,
  0x69, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x7a,
  0x65, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x6f, 0x73, 0x20, 0x41, 0x6e, 0x67,
  0x65, 0x6c, 0x65, 0x73, 0x2e, 0x0a
};
const char* testFile2_hash = "11d504d6276c5f161d2c4bd6325fb0b140b26736";
u64 testFile2_len = 1002;

unsigned char testFile3[] = {
  0x31, 0x31, 0x31, 0x31, 0x31, 0x0a
};
unsigned int testFile3_len = 6;
const char* testFile3_hash = "11d504d6276c5f161d2c4bd6325fb0b140b26736";


struct SyncConfigTestFile {
    const unsigned char* content;
    u64 len;
    const char* hashValue;
};

struct SyncConfigTestFile file1 = {
    testFile1,
    testFile1_len,
    testFile1_hash
};

struct SyncConfigTestFile file2 = {
    testFile2,
    testFile2_len,
    testFile2_hash
};

struct SyncConfigTestFile file3 = {
    testFile3,
    testFile3_len,
    testFile3_hash
};
//std::vector<struct SyncConfigTestFile> file_list {file1, file2};
class SyncConfigTestFileList
{
public:
    std::vector<struct SyncConfigTestFile> mFiles;
    SyncConfigTestFileList() {
        mFiles.push_back(file1);
        mFiles.push_back(file2);
        mFiles.push_back(file3);
    };
};

#endif // include guard
//
//  Copyright 2013 Acer Cloud Technology Inc.
//  All Rights Reserved.
//
//  THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND
//  TRADE SECRETS OF ACER CLOUD TECHNOLOGY INC.
//  USE, DISCLOSURE OR REPRODUCTION IS PROHIBITED WITHOUT
//  THE PRIOR EXPRESS WRITTEN PERMISSION OF ACER CLOUD
//  TECHNOLOGY INC.
//

#ifndef SYNCCONFIGTESTFILES_HPP_
#define SYNCCONFIGTESTFILES_HPP_

#include <map>

const unsigned char testFile1[] = {
  0xa5, 0x8f, 0x6f, 0x1d, 0xbb, 0x40, 0x54, 0x6f, 0xfe, 0xea, 0x01, 0x47,
  0x19, 0x36, 0xef, 0x49, 0x1c, 0x10, 0x3d, 0x7f, 0xea, 0xcb, 0x33, 0x4c,
  0x2a, 0x36, 0x65, 0x66, 0xc8, 0xee, 0xcd, 0x68, 0x32, 0xa3, 0x9f, 0x50,
  0xab, 0x71, 0x74, 0x40, 0xd2, 0x35, 0x7d, 0x5f, 0x27, 0x6a, 0x64, 0x68,
  0x02, 0x4e, 0x71, 0x7f, 0x1a, 0x83, 0x07, 0x41, 0xf6, 0x4e, 0x7b, 0x59,
  0xd9, 0x91, 0x58, 0x1e, 0xd9, 0xe0, 0x84, 0x32, 0xb7, 0xeb, 0x53, 0x6f,
  0x99, 0xff, 0x2e, 0x1e, 0x9b, 0x36, 0x5b, 0x25, 0xe7, 0x92, 0x00, 0x4d,
  0x91, 0x97, 0x14, 0x47, 0x85, 0x40, 0x31, 0x01, 0x89, 0x8b, 0x8e, 0x06,
  0x99, 0xad, 0xc8, 0x26, 0x2b, 0xf2, 0x1b, 0x25, 0x87, 0x4a, 0xf2, 0x18,
  0x21, 0xf6, 0xc5, 0x21, 0x4d, 0x7e, 0xaf, 0x55, 0x38, 0x49, 0x2f, 0x26,
  0x28, 0xfc, 0x09, 0x6e, 0xf2, 0x0d, 0x1f, 0x73, 0xf3, 0x89, 0x83, 0x15,
  0x27, 0xe7, 0x0b, 0x35, 0x0b, 0x44, 0x0e, 0x3d, 0x0f, 0x9a, 0xc0, 0x14,
  0x11, 0xb3, 0x3f, 0x01, 0x35, 0x7a, 0x73, 0x23, 0xd7, 0x88, 0x8e, 0x7d,
  0x43, 0x56, 0xdf, 0x51, 0xe0, 0xeb, 0xe7, 0x63, 0xaa, 0xbe, 0x0b, 0x5d,
  0x6a, 0xc0, 0x43, 0x3a, 0xe2, 0x39, 0x59, 0x63, 0xc4, 0x41, 0x13, 0x1e,
  0x60, 0x0f, 0xbf, 0x13, 0xbc, 0xcb, 0xb1, 0x01, 0x9d, 0x22, 0x98, 0x50,
  0x17, 0xfb, 0x12, 0x03, 0x55, 0xcb, 0xe0, 0x1f
};

const char* testFile1_hash = "a6333a914fffc73f71cb59b802d45bba421ffb1a";
u64 testFile1_len = 200;

const unsigned char testFile2[] = {
  0x28, 0x43, 0x4e, 0x4e, 0x29, 0x20, 0x2d, 0x2d, 0x20, 0x4a, 0x75, 0x73,
  0x74, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x68, 0x61, 0x72, 0x64, 0x20, 0x69,
  0x73, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6e, 0x64,
  0x20, 0x61, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x20,
  0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x20, 0x6f,
  0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x63, 0x65, 0x61, 0x6e, 0x3f,
  0x0a, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x74, 0x61,
  0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x6d,
  0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x74, 0x6f, 0x70, 0x20,
  0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x74,
  0x6f, 0x20, 0x73, 0x70, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x73, 0x75, 0x69,
  0x74, 0x63, 0x61, 0x73, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
  0x20, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x6c, 0x6f,
  0x77, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6d, 0x61, 0x67,
  0x69, 0x6e, 0x65, 0x20, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74,
  0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
  0x20, 0x64, 0x61, 0x72, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x0a, 0x54,
  0x68, 0x61, 0x74, 0x27, 0x73, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x61,
  0x6c, 0x6c, 0x79, 0x20, 0x77, 0x68, 0x61, 0x74, 0x20, 0x63, 0x72, 0x65,
  0x77, 0x73, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x69, 0x6e, 0x67,
  0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x61, 0x6c, 0x61, 0x79, 0x73, 0x69,
  0x61, 0x20, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x46,
  0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x33, 0x37, 0x30, 0x20, 0x68, 0x61,
  0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x72, 0x79, 0x69,
  0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x6f, 0x20, 0x66, 0x6f, 0x72,
  0x20, 0x61, 0x20, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x2e, 0x0a, 0x20, 0x50,
  0x68, 0x6f, 0x74, 0x6f, 0x73, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
  0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x61,
  0x6c, 0x61, 0x79, 0x73, 0x69, 0x61, 0x20, 0x41, 0x69, 0x72, 0x6c, 0x69,
  0x6e, 0x65, 0x73, 0x20, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x33,
  0x37, 0x30, 0x20, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x3a, 0x20, 0x54,
  0x68, 0x65, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f,
  0x72, 0x20, 0x4d, 0x61, 0x6c, 0x61, 0x79, 0x73, 0x69, 0x61, 0x20, 0x41,
  0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x46, 0x6c, 0x69, 0x67,
  0x68, 0x74, 0x20, 0x33, 0x37, 0x30, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72,
  0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65,
  0x70, 0x74, 0x68, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
  0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e,
  0x20, 0x43, 0x4e, 0x4e, 0x20, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x20, 0x4d,
  0x48, 0x33, 0x37, 0x30, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20,
  0x6f, 0x76, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x20,
  0x4f, 0x63, 0x65, 0x61, 0x6e, 0x20, 0x43, 0x6f, 0x75, 0x6c, 0x64, 0x20,
  0x74, 0x68, 0x65, 0x20, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x62, 0x65,
  0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4d, 0x48, 0x33, 0x37, 0x30, 0x3f,
  0x0a, 0x54, 0x68, 0x75, 0x72, 0x73, 0x64, 0x61, 0x79, 0x20, 0x69, 0x73,
  0x20, 0x44, 0x61, 0x79, 0x20, 0x33, 0x34, 0x20, 0x69, 0x6e, 0x20, 0x74,
  0x68, 0x65, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x66, 0x6f,
  0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20,
  0x74, 0x68, 0x61, 0x74, 0x20, 0x64, 0x69, 0x73, 0x61, 0x70, 0x70, 0x65,
  0x61, 0x72, 0x65, 0x64, 0x20, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x20, 0x38,
  0x2c, 0x20, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74,
  0x68, 0x20, 0x69, 0x74, 0x20, 0x32, 0x33, 0x39, 0x20, 0x70, 0x61, 0x73,
  0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
  0x63, 0x72, 0x65, 0x77, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
  0x2e, 0x0a, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x20,
  0x62, 0x65, 0x6c, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20,
  0x42, 0x6f, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x37, 0x37, 0x37, 0x2c, 0x20,
  0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x6e, 0x20, 0x72, 0x6f, 0x75,
  0x74, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4b, 0x75, 0x61, 0x6c,
  0x61, 0x20, 0x4c, 0x75, 0x6d, 0x70, 0x75, 0x72, 0x2c, 0x20, 0x4d, 0x61,
  0x6c, 0x61, 0x79, 0x73, 0x69, 0x61, 0x2c, 0x20, 0x74, 0x6f, 0x20, 0x42,
  0x65, 0x69, 0x6a, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x63, 0x72, 0x61, 0x73,
  0x68, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
  0x6f, 0x75, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x64, 0x69,
  0x61, 0x6e, 0x20, 0x4f, 0x63, 0x65, 0x61, 0x6e, 0x2e, 0x0a, 0x50, 0x69,
  0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20,
  0x68, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x67,
  0x6e, 0x61, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x74, 0x68,
  0x69, 0x6e, 0x6b, 0x20, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x72, 0x6f,
  0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x27,
  0x73, 0x20, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x20, 0x62, 0x6f, 0x78, 0x65,
  0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x6e, 0x61, 0x72, 0x72,
  0x6f, 0x77, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x63,
  0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20,
  0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x54, 0x68, 0x75, 0x72, 0x73,
  0x64, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x32, 0x32, 0x2c,
  0x34, 0x30, 0x30, 0x2d, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2d, 0x6d,
  0x69, 0x6c, 0x65, 0x20, 0x28, 0x35, 0x38, 0x2c, 0x30, 0x30, 0x30, 0x2d,
  0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2d, 0x6b, 0x69, 0x6c, 0x6f, 0x6d,
  0x65, 0x74, 0x65, 0x72, 0x29, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x2d,
  0x2d, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x34, 0x35, 0x20, 0x74,
  0x69, 0x6d, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x7a,
  0x65, 0x20, 0x6f, 0x66, 0x20, 0x4c, 0x6f, 0x73, 0x20, 0x41, 0x6e, 0x67,
  0x65, 0x6c, 0x65, 0x73, 0x2e, 0x0a
};
const char* testFile2_hash = "11d504d6276c5f161d2c4bd6325fb0b140b26736";
u64 testFile2_len = 1002;

struct SyncConfigTestFile {
    const unsigned char* content;
    u64 len;
    const char* hashValue;
};

struct SyncConfigTestFile file1 = {
    testFile1,
    testFile1_len,
    testFile1_hash
};

struct SyncConfigTestFile file2 = {
    testFile2,
    testFile2_len,
    testFile2_hash
};

//std::vector<struct SyncConfigTestFile> file_list {file1, file2};
class SyncConfigTestFileList
{
public:
    std::vector<struct SyncConfigTestFile> mFiles;
    SyncConfigTestFileList() {
        mFiles.push_back(file1);
        mFiles.push_back(file2);
    };
};

#endif // include guard
