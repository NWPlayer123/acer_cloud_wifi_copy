// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dx_remote_agent.proto

#ifndef PROTOBUF_dx_5fremote_5fagent_2eproto__INCLUDED
#define PROTOBUF_dx_5fremote_5fagent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace igware {
namespace dxshell {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();

class HttpGetInput;
class HttpGetOutput;
class QueryDeviceOutput;
class DxRemoteMessage;
class DxRemoteMessage_DxRemoteArgument;
class DxRemoteMessage_DxRemote_VPLFS_dir_t;
class DxRemoteMessage_DxRemote_VPLFS_dirent_t;
class DxRemoteMessage_DxRemote_VPLFS_stat_t;
class DxRemoteMessage_DxRemote_LibraryInfo;
class DxRemoteMSA;
class DxRemoteFileTransfer;
class DxRemoteTSTest;
class DxRemoteTSTest_TSOpenParms;

enum DxRemoteMessage_Command {
  DxRemoteMessage_Command_COMMAND_NONE = 0,
  DxRemoteMessage_Command_LAUNCH_PROCESS = 1,
  DxRemoteMessage_Command_KILL_PROCESS = 2,
  DxRemoteMessage_Command_GET_CONNECTED_ANDROID_IP = 3,
  DxRemoteMessage_Command_LAUNCH_CONNECTED_ANDROID_DXREMOTEAGENT = 4,
  DxRemoteMessage_Command_CLEAN_CC = 5,
  DxRemoteMessage_Command_VPLFS_OPENDIR = 6,
  DxRemoteMessage_Command_VPLFS_READDIR = 7,
  DxRemoteMessage_Command_VPLFS_CLOSEDIR = 8,
  DxRemoteMessage_Command_VPLFS_STAT = 9,
  DxRemoteMessage_Command_UTIL_RM_DASH_RF = 10,
  DxRemoteMessage_Command_VPLDIR_CREATE = 11,
  DxRemoteMessage_Command_VPLFILE_RENAME = 12,
  DxRemoteMessage_Command_COPYFILE = 13,
  DxRemoteMessage_Command_VPLFILE_DELETE = 14,
  DxRemoteMessage_Command_GET_UPLOAD_PATH = 15,
  DxRemoteMessage_Command_SET_CLEARFI_MODE = 16,
  DxRemoteMessage_Command_STOP_CONNECTED_ANDROID_DXREMOTEAGENT = 17,
  DxRemoteMessage_Command_LAUNCH_CONNECTED_ANDROID_CC_SERVICE = 18,
  DxRemoteMessage_Command_STOP_CONNECTED_ANDROID_CC_SERVICE = 19,
  DxRemoteMessage_Command_PUSH_LOCAL_CONF_TO_SHARED_OBJECT = 20,
  DxRemoteMessage_Command_PULL_SHARED_CONF_TO_LOCAL_OBJECT = 21,
  DxRemoteMessage_Command_GET_CONNECTED_ANDROID_CCD_LOG = 22,
  DxRemoteMessage_Command_CLEAN_CONNECTED_ANDROID_CCD_LOG = 23,
  DxRemoteMessage_Command_GET_CCD_ROOT_PATH = 24,
  DxRemoteMessage_Command_GET_ALIAS_PATH = 25,
  DxRemoteMessage_Command_READ_LIBRARY = 26,
  DxRemoteMessage_Command_CHECK_CONNECTED_ANDROID_NET_STATUS = 27,
  DxRemoteMessage_Command_RESTART_CONNECTED_ANDROID_DXREMOTEAGENT = 28,
  DxRemoteMessage_Command_SET_PERMISSION = 29,
  DxRemoteMessage_Command_VPLFILE_TOUCH = 30
};
bool DxRemoteMessage_Command_IsValid(int value);
const DxRemoteMessage_Command DxRemoteMessage_Command_Command_MIN = DxRemoteMessage_Command_COMMAND_NONE;
const DxRemoteMessage_Command DxRemoteMessage_Command_Command_MAX = DxRemoteMessage_Command_VPLFILE_TOUCH;
const int DxRemoteMessage_Command_Command_ARRAYSIZE = DxRemoteMessage_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* DxRemoteMessage_Command_descriptor();
inline const ::std::string& DxRemoteMessage_Command_Name(DxRemoteMessage_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    DxRemoteMessage_Command_descriptor(), value);
}
inline bool DxRemoteMessage_Command_Parse(
    const ::std::string& name, DxRemoteMessage_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DxRemoteMessage_Command>(
    DxRemoteMessage_Command_descriptor(), name, value);
}
enum DxRemoteMessage_ArgumentName {
  DxRemoteMessage_ArgumentName_DXARGUMENT_NONE = 0,
  DxRemoteMessage_ArgumentName_DXARGUMENTFILENAME = 1,
  DxRemoteMessage_ArgumentName_DXARGUMENTEXECUTEARG = 2,
  DxRemoteMessage_ArgumentName_DXARGUMENT_IP = 3,
  DxRemoteMessage_ArgumentName_DXARGUMENTDIRNAME = 4
};
bool DxRemoteMessage_ArgumentName_IsValid(int value);
const DxRemoteMessage_ArgumentName DxRemoteMessage_ArgumentName_ArgumentName_MIN = DxRemoteMessage_ArgumentName_DXARGUMENT_NONE;
const DxRemoteMessage_ArgumentName DxRemoteMessage_ArgumentName_ArgumentName_MAX = DxRemoteMessage_ArgumentName_DXARGUMENTDIRNAME;
const int DxRemoteMessage_ArgumentName_ArgumentName_ARRAYSIZE = DxRemoteMessage_ArgumentName_ArgumentName_MAX + 1;

const ::google::protobuf::EnumDescriptor* DxRemoteMessage_ArgumentName_descriptor();
inline const ::std::string& DxRemoteMessage_ArgumentName_Name(DxRemoteMessage_ArgumentName value) {
  return ::google::protobuf::internal::NameOfEnum(
    DxRemoteMessage_ArgumentName_descriptor(), value);
}
inline bool DxRemoteMessage_ArgumentName_Parse(
    const ::std::string& name, DxRemoteMessage_ArgumentName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DxRemoteMessage_ArgumentName>(
    DxRemoteMessage_ArgumentName_descriptor(), name, value);
}
enum DxRemoteMessage_DxRemote_VPLFS_file_type_t {
  DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_FILE = 0,
  DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_DIR = 1,
  DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_OTHER = 2
};
bool DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(int value);
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_MIN = DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_FILE;
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_MAX = DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_OTHER;
const int DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_ARRAYSIZE = DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor();
inline const ::std::string& DxRemoteMessage_DxRemote_VPLFS_file_type_t_Name(DxRemoteMessage_DxRemote_VPLFS_file_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor(), value);
}
inline bool DxRemoteMessage_DxRemote_VPLFS_file_type_t_Parse(
    const ::std::string& name, DxRemoteMessage_DxRemote_VPLFS_file_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DxRemoteMessage_DxRemote_VPLFS_file_type_t>(
    DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor(), name, value);
}
enum DxRemoteMSA_Function {
  DxRemoteMSA_Function_MSABeginCatalog = 1,
  DxRemoteMSA_Function_MSACommitCatalog = 2,
  DxRemoteMSA_Function_MSAEndCatalog = 3,
  DxRemoteMSA_Function_MSABeginMetadataTransaction = 4,
  DxRemoteMSA_Function_MSAUpdateMetadata = 5,
  DxRemoteMSA_Function_MSADeleteMetadata = 6,
  DxRemoteMSA_Function_MSACommitMetadataTransaction = 7,
  DxRemoteMSA_Function_MSAGetMetadataSyncState = 8,
  DxRemoteMSA_Function_MSADeleteCollection = 9,
  DxRemoteMSA_Function_MSADeleteCatalog = 10,
  DxRemoteMSA_Function_MSAListCollections = 11,
  DxRemoteMSA_Function_MSAGetCollectionDetails = 12
};
bool DxRemoteMSA_Function_IsValid(int value);
const DxRemoteMSA_Function DxRemoteMSA_Function_Function_MIN = DxRemoteMSA_Function_MSABeginCatalog;
const DxRemoteMSA_Function DxRemoteMSA_Function_Function_MAX = DxRemoteMSA_Function_MSAGetCollectionDetails;
const int DxRemoteMSA_Function_Function_ARRAYSIZE = DxRemoteMSA_Function_Function_MAX + 1;

const ::google::protobuf::EnumDescriptor* DxRemoteMSA_Function_descriptor();
inline const ::std::string& DxRemoteMSA_Function_Name(DxRemoteMSA_Function value) {
  return ::google::protobuf::internal::NameOfEnum(
    DxRemoteMSA_Function_descriptor(), value);
}
inline bool DxRemoteMSA_Function_Parse(
    const ::std::string& name, DxRemoteMSA_Function* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DxRemoteMSA_Function>(
    DxRemoteMSA_Function_descriptor(), name, value);
}
enum ErrorCode {
  DX_SUCCESS = 0,
  DX_ERR_UNKNOWN_REQUEST_TYPE = -15951,
  DX_ERR_UNEXPECTED_ERROR = -15952,
  DX_ERR_BAD_URL = -15953,
  DX_ERR_BAD_REQUEST = -15954,
  DX_ERR_IO_ERROR = -15955,
  DX_ERR_IO_HTTPAGENT_ERROR = -15956
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = DX_ERR_IO_HTTPAGENT_ERROR;
const ErrorCode ErrorCode_MAX = DX_SUCCESS;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
enum RequestType {
  DX_REQUEST_PROTORPC = 1,
  DX_REQUEST_HTTP_GET = 2,
  DX_REQUEST_QUERY_DEVICE = 3,
  DX_REQUEST_DXREMOTE_PROTOCOL = 4,
  DX_REQUEST_DXREMOTE_MSA = 5,
  DX_REQUEST_DXREMOTE_TRANSFER_FILES = 6,
  DX_REQUEST_DXREMOTE_TS_TEST = 7
};
bool RequestType_IsValid(int value);
const RequestType RequestType_MIN = DX_REQUEST_PROTORPC;
const RequestType RequestType_MAX = DX_REQUEST_DXREMOTE_TS_TEST;
const int RequestType_ARRAYSIZE = RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestType_descriptor();
inline const ::std::string& RequestType_Name(RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestType_descriptor(), value);
}
inline bool RequestType_Parse(
    const ::std::string& name, RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestType>(
    RequestType_descriptor(), name, value);
}
enum HttpAgentCommandType {
  DX_HTTP_GET = 0,
  DX_HTTP_GET_EXTENDED = 1,
  DX_HTTP_GET_RESPONSE_BACK = 2,
  DX_HTTP_PUT = 3,
  DX_HTTP_POST = 4,
  DX_HTTP_DELETE = 5,
  DX_HTTP_HEAD = 6,
  DX_HTTP_OPTIONS = 7,
  DX_HTTP_TRACE = 8,
  DX_HTTP_CONNECT = 9
};
bool HttpAgentCommandType_IsValid(int value);
const HttpAgentCommandType HttpAgentCommandType_MIN = DX_HTTP_GET;
const HttpAgentCommandType HttpAgentCommandType_MAX = DX_HTTP_CONNECT;
const int HttpAgentCommandType_ARRAYSIZE = HttpAgentCommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HttpAgentCommandType_descriptor();
inline const ::std::string& HttpAgentCommandType_Name(HttpAgentCommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HttpAgentCommandType_descriptor(), value);
}
inline bool HttpAgentCommandType_Parse(
    const ::std::string& name, HttpAgentCommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HttpAgentCommandType>(
    HttpAgentCommandType_descriptor(), name, value);
}
enum DxRemoteAgentPacket {
  DX_REMOTE_REQUEST_SIZE = 1,
  DX_REMOTE_FILE_TRANS_PKT_SIZE = 2048,
  DX_REMOTE_PKT_SIZE = 4096
};
bool DxRemoteAgentPacket_IsValid(int value);
const DxRemoteAgentPacket DxRemoteAgentPacket_MIN = DX_REMOTE_REQUEST_SIZE;
const DxRemoteAgentPacket DxRemoteAgentPacket_MAX = DX_REMOTE_PKT_SIZE;
const int DxRemoteAgentPacket_ARRAYSIZE = DxRemoteAgentPacket_MAX + 1;

const ::google::protobuf::EnumDescriptor* DxRemoteAgentPacket_descriptor();
inline const ::std::string& DxRemoteAgentPacket_Name(DxRemoteAgentPacket value) {
  return ::google::protobuf::internal::NameOfEnum(
    DxRemoteAgentPacket_descriptor(), value);
}
inline bool DxRemoteAgentPacket_Parse(
    const ::std::string& name, DxRemoteAgentPacket* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DxRemoteAgentPacket>(
    DxRemoteAgentPacket_descriptor(), name, value);
}
enum DxRemoteAgentFileTransfer_Type {
  DX_REMOTE_PUSH_FILE = 0,
  DX_REMOTE_GET_FILE = 1
};
bool DxRemoteAgentFileTransfer_Type_IsValid(int value);
const DxRemoteAgentFileTransfer_Type DxRemoteAgentFileTransfer_Type_MIN = DX_REMOTE_PUSH_FILE;
const DxRemoteAgentFileTransfer_Type DxRemoteAgentFileTransfer_Type_MAX = DX_REMOTE_GET_FILE;
const int DxRemoteAgentFileTransfer_Type_ARRAYSIZE = DxRemoteAgentFileTransfer_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DxRemoteAgentFileTransfer_Type_descriptor();
inline const ::std::string& DxRemoteAgentFileTransfer_Type_Name(DxRemoteAgentFileTransfer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DxRemoteAgentFileTransfer_Type_descriptor(), value);
}
inline bool DxRemoteAgentFileTransfer_Type_Parse(
    const ::std::string& name, DxRemoteAgentFileTransfer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DxRemoteAgentFileTransfer_Type>(
    DxRemoteAgentFileTransfer_Type_descriptor(), name, value);
}
// ===================================================================

class HttpGetInput : public ::google::protobuf::Message {
 public:
  HttpGetInput();
  virtual ~HttpGetInput();
  
  HttpGetInput(const HttpGetInput& from);
  
  inline HttpGetInput& operator=(const HttpGetInput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpGetInput& default_instance();
  
  void Swap(HttpGetInput* other);
  
  // implements Message ----------------------------------------------
  
  HttpGetInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpGetInput& from);
  void MergeFrom(const HttpGetInput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .igware.dxshell.HttpAgentCommandType command_type = 1;
  inline bool has_command_type() const;
  inline void clear_command_type();
  static const int kCommandTypeFieldNumber = 1;
  inline igware::dxshell::HttpAgentCommandType command_type() const;
  inline void set_command_type(igware::dxshell::HttpAgentCommandType value);
  
  // required string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  
  // optional uint32 max_bytes = 3;
  inline bool has_max_bytes() const;
  inline void clear_max_bytes();
  static const int kMaxBytesFieldNumber = 3;
  inline ::google::protobuf::uint32 max_bytes() const;
  inline void set_max_bytes(::google::protobuf::uint32 value);
  
  // optional uint64 maxbytes_delay = 4 [default = 0];
  inline bool has_maxbytes_delay() const;
  inline void clear_maxbytes_delay();
  static const int kMaxbytesDelayFieldNumber = 4;
  inline ::google::protobuf::uint64 maxbytes_delay() const;
  inline void set_maxbytes_delay(::google::protobuf::uint64 value);
  
  // optional bool use_media_player = 5 [default = false];
  inline bool has_use_media_player() const;
  inline void clear_use_media_player();
  static const int kUseMediaPlayerFieldNumber = 5;
  inline bool use_media_player() const;
  inline void set_use_media_player(bool value);
  
  // repeated string headers = 6;
  inline int headers_size() const;
  inline void clear_headers();
  static const int kHeadersFieldNumber = 6;
  inline const ::std::string& headers(int index) const;
  inline ::std::string* mutable_headers(int index);
  inline void set_headers(int index, const ::std::string& value);
  inline void set_headers(int index, const char* value);
  inline void set_headers(int index, const char* value, size_t size);
  inline ::std::string* add_headers();
  inline void add_headers(const ::std::string& value);
  inline void add_headers(const char* value);
  inline void add_headers(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& headers() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_headers();
  
  // optional string file_save_response = 7 [default = ""];
  inline bool has_file_save_response() const;
  inline void clear_file_save_response();
  static const int kFileSaveResponseFieldNumber = 7;
  inline const ::std::string& file_save_response() const;
  inline void set_file_save_response(const ::std::string& value);
  inline void set_file_save_response(const char* value);
  inline void set_file_save_response(const char* value, size_t size);
  inline ::std::string* mutable_file_save_response();
  inline ::std::string* release_file_save_response();
  
  // optional bytes payload = 8 [default = ""];
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 8;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const void* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // optional string file = 9 [default = ""];
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 9;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.HttpGetInput)
 private:
  inline void set_has_command_type();
  inline void clear_has_command_type();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_max_bytes();
  inline void clear_has_max_bytes();
  inline void set_has_maxbytes_delay();
  inline void clear_has_maxbytes_delay();
  inline void set_has_use_media_player();
  inline void clear_has_use_media_player();
  inline void set_has_file_save_response();
  inline void clear_has_file_save_response();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_file();
  inline void clear_has_file();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* url_;
  int command_type_;
  ::google::protobuf::uint32 max_bytes_;
  ::google::protobuf::uint64 maxbytes_delay_;
  ::google::protobuf::RepeatedPtrField< ::std::string> headers_;
  ::std::string* file_save_response_;
  ::std::string* payload_;
  ::std::string* file_;
  bool use_media_player_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static HttpGetInput* default_instance_;
};
// -------------------------------------------------------------------

class HttpGetOutput : public ::google::protobuf::Message {
 public:
  HttpGetOutput();
  virtual ~HttpGetOutput();
  
  HttpGetOutput(const HttpGetOutput& from);
  
  inline HttpGetOutput& operator=(const HttpGetOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpGetOutput& default_instance();
  
  void Swap(HttpGetOutput* other);
  
  // implements Message ----------------------------------------------
  
  HttpGetOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HttpGetOutput& from);
  void MergeFrom(const HttpGetOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);
  
  // optional string error_msg = 2;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  
  // required uint64 total_bytes = 3;
  inline bool has_total_bytes() const;
  inline void clear_total_bytes();
  static const int kTotalBytesFieldNumber = 3;
  inline ::google::protobuf::uint64 total_bytes() const;
  inline void set_total_bytes(::google::protobuf::uint64 value);
  
  // optional bytes response = 4;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 4;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // optional int32 httpagent_response = 5;
  inline bool has_httpagent_response() const;
  inline void clear_httpagent_response();
  static const int kHttpagentResponseFieldNumber = 5;
  inline ::google::protobuf::int32 httpagent_response() const;
  inline void set_httpagent_response(::google::protobuf::int32 value);
  
  // optional int32 httpagent_statuscode = 6;
  inline bool has_httpagent_statuscode() const;
  inline void clear_httpagent_statuscode();
  static const int kHttpagentStatuscodeFieldNumber = 6;
  inline ::google::protobuf::int32 httpagent_statuscode() const;
  inline void set_httpagent_statuscode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.HttpGetOutput)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_total_bytes();
  inline void clear_has_total_bytes();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_httpagent_response();
  inline void clear_has_httpagent_response();
  inline void set_has_httpagent_statuscode();
  inline void clear_has_httpagent_statuscode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_msg_;
  ::google::protobuf::uint64 total_bytes_;
  ::google::protobuf::int32 error_code_;
  ::google::protobuf::int32 httpagent_response_;
  ::std::string* response_;
  ::google::protobuf::int32 httpagent_statuscode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static HttpGetOutput* default_instance_;
};
// -------------------------------------------------------------------

class QueryDeviceOutput : public ::google::protobuf::Message {
 public:
  QueryDeviceOutput();
  virtual ~QueryDeviceOutput();
  
  QueryDeviceOutput(const QueryDeviceOutput& from);
  
  inline QueryDeviceOutput& operator=(const QueryDeviceOutput& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDeviceOutput& default_instance();
  
  void Swap(QueryDeviceOutput* other);
  
  // implements Message ----------------------------------------------
  
  QueryDeviceOutput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDeviceOutput& from);
  void MergeFrom(const QueryDeviceOutput& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string device_name = 1;
  inline bool has_device_name() const;
  inline void clear_device_name();
  static const int kDeviceNameFieldNumber = 1;
  inline const ::std::string& device_name() const;
  inline void set_device_name(const ::std::string& value);
  inline void set_device_name(const char* value);
  inline void set_device_name(const char* value, size_t size);
  inline ::std::string* mutable_device_name();
  inline ::std::string* release_device_name();
  
  // required string device_class = 2;
  inline bool has_device_class() const;
  inline void clear_device_class();
  static const int kDeviceClassFieldNumber = 2;
  inline const ::std::string& device_class() const;
  inline void set_device_class(const ::std::string& value);
  inline void set_device_class(const char* value);
  inline void set_device_class(const char* value, size_t size);
  inline ::std::string* mutable_device_class();
  inline ::std::string* release_device_class();
  
  // required string os_version = 3;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 3;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  
  // required bool is_acer_device = 4 [default = false];
  inline bool has_is_acer_device() const;
  inline void clear_is_acer_device();
  static const int kIsAcerDeviceFieldNumber = 4;
  inline bool is_acer_device() const;
  inline void set_is_acer_device(bool value);
  
  // required bool device_has_camera = 5 [default = false];
  inline bool has_device_has_camera() const;
  inline void clear_device_has_camera();
  static const int kDeviceHasCameraFieldNumber = 5;
  inline bool device_has_camera() const;
  inline void set_device_has_camera(bool value);
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.QueryDeviceOutput)
 private:
  inline void set_has_device_name();
  inline void clear_has_device_name();
  inline void set_has_device_class();
  inline void clear_has_device_class();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_is_acer_device();
  inline void clear_has_is_acer_device();
  inline void set_has_device_has_camera();
  inline void clear_has_device_has_camera();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* device_name_;
  ::std::string* device_class_;
  ::std::string* os_version_;
  bool is_acer_device_;
  bool device_has_camera_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static QueryDeviceOutput* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMessage_DxRemoteArgument : public ::google::protobuf::Message {
 public:
  DxRemoteMessage_DxRemoteArgument();
  virtual ~DxRemoteMessage_DxRemoteArgument();
  
  DxRemoteMessage_DxRemoteArgument(const DxRemoteMessage_DxRemoteArgument& from);
  
  inline DxRemoteMessage_DxRemoteArgument& operator=(const DxRemoteMessage_DxRemoteArgument& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMessage_DxRemoteArgument& default_instance();
  
  void Swap(DxRemoteMessage_DxRemoteArgument* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMessage_DxRemoteArgument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMessage_DxRemoteArgument& from);
  void MergeFrom(const DxRemoteMessage_DxRemoteArgument& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .igware.dxshell.DxRemoteMessage.ArgumentName name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline ::igware::dxshell::DxRemoteMessage_ArgumentName name() const;
  inline void set_name(::igware::dxshell::DxRemoteMessage_ArgumentName value);
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMessage.DxRemoteArgument)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  int name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMessage_DxRemoteArgument* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMessage_DxRemote_VPLFS_dir_t : public ::google::protobuf::Message {
 public:
  DxRemoteMessage_DxRemote_VPLFS_dir_t();
  virtual ~DxRemoteMessage_DxRemote_VPLFS_dir_t();
  
  DxRemoteMessage_DxRemote_VPLFS_dir_t(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from);
  
  inline DxRemoteMessage_DxRemote_VPLFS_dir_t& operator=(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMessage_DxRemote_VPLFS_dir_t& default_instance();
  
  void Swap(DxRemoteMessage_DxRemote_VPLFS_dir_t* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMessage_DxRemote_VPLFS_dir_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from);
  void MergeFrom(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string dir_path = 1;
  inline bool has_dir_path() const;
  inline void clear_dir_path();
  static const int kDirPathFieldNumber = 1;
  inline const ::std::string& dir_path() const;
  inline void set_dir_path(const ::std::string& value);
  inline void set_dir_path(const char* value);
  inline void set_dir_path(const char* value, size_t size);
  inline ::std::string* mutable_dir_path();
  inline ::std::string* release_dir_path();
  
  // required string alias = 2;
  inline bool has_alias() const;
  inline void clear_alias();
  static const int kAliasFieldNumber = 2;
  inline const ::std::string& alias() const;
  inline void set_alias(const ::std::string& value);
  inline void set_alias(const char* value);
  inline void set_alias(const char* value, size_t size);
  inline ::std::string* mutable_alias();
  inline ::std::string* release_alias();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t)
 private:
  inline void set_has_dir_path();
  inline void clear_has_dir_path();
  inline void set_has_alias();
  inline void clear_has_alias();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* dir_path_;
  ::std::string* alias_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMessage_DxRemote_VPLFS_dir_t* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMessage_DxRemote_VPLFS_dirent_t : public ::google::protobuf::Message {
 public:
  DxRemoteMessage_DxRemote_VPLFS_dirent_t();
  virtual ~DxRemoteMessage_DxRemote_VPLFS_dirent_t();
  
  DxRemoteMessage_DxRemote_VPLFS_dirent_t(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from);
  
  inline DxRemoteMessage_DxRemote_VPLFS_dirent_t& operator=(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMessage_DxRemote_VPLFS_dirent_t& default_instance();
  
  void Swap(DxRemoteMessage_DxRemote_VPLFS_dirent_t* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMessage_DxRemote_VPLFS_dirent_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from);
  void MergeFrom(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t type() const;
  inline void set_type(::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t value);
  
  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_filename();
  inline void clear_has_filename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* filename_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMessage_DxRemote_VPLFS_dirent_t* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMessage_DxRemote_VPLFS_stat_t : public ::google::protobuf::Message {
 public:
  DxRemoteMessage_DxRemote_VPLFS_stat_t();
  virtual ~DxRemoteMessage_DxRemote_VPLFS_stat_t();
  
  DxRemoteMessage_DxRemote_VPLFS_stat_t(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from);
  
  inline DxRemoteMessage_DxRemote_VPLFS_stat_t& operator=(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMessage_DxRemote_VPLFS_stat_t& default_instance();
  
  void Swap(DxRemoteMessage_DxRemote_VPLFS_stat_t* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMessage_DxRemote_VPLFS_stat_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from);
  void MergeFrom(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t type() const;
  inline void set_type(::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t value);
  
  // required int64 atime = 3;
  inline bool has_atime() const;
  inline void clear_atime();
  static const int kAtimeFieldNumber = 3;
  inline ::google::protobuf::int64 atime() const;
  inline void set_atime(::google::protobuf::int64 value);
  
  // required int64 mtime = 4;
  inline bool has_mtime() const;
  inline void clear_mtime();
  static const int kMtimeFieldNumber = 4;
  inline ::google::protobuf::int64 mtime() const;
  inline void set_mtime(::google::protobuf::int64 value);
  
  // required int64 ctime = 5;
  inline bool has_ctime() const;
  inline void clear_ctime();
  static const int kCtimeFieldNumber = 5;
  inline ::google::protobuf::int64 ctime() const;
  inline void set_ctime(::google::protobuf::int64 value);
  
  // required int32 isHidden = 6;
  inline bool has_ishidden() const;
  inline void clear_ishidden();
  static const int kIsHiddenFieldNumber = 6;
  inline ::google::protobuf::int32 ishidden() const;
  inline void set_ishidden(::google::protobuf::int32 value);
  
  // required int32 isSymLink = 7;
  inline bool has_issymlink() const;
  inline void clear_issymlink();
  static const int kIsSymLinkFieldNumber = 7;
  inline ::google::protobuf::int32 issymlink() const;
  inline void set_issymlink(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_atime();
  inline void clear_has_atime();
  inline void set_has_mtime();
  inline void clear_has_mtime();
  inline void set_has_ctime();
  inline void clear_has_ctime();
  inline void set_has_ishidden();
  inline void clear_has_ishidden();
  inline void set_has_issymlink();
  inline void clear_has_issymlink();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int64 atime_;
  ::google::protobuf::int64 mtime_;
  int type_;
  ::google::protobuf::int32 ishidden_;
  ::google::protobuf::int64 ctime_;
  ::google::protobuf::int32 issymlink_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMessage_DxRemote_VPLFS_stat_t* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMessage_DxRemote_LibraryInfo : public ::google::protobuf::Message {
 public:
  DxRemoteMessage_DxRemote_LibraryInfo();
  virtual ~DxRemoteMessage_DxRemote_LibraryInfo();
  
  DxRemoteMessage_DxRemote_LibraryInfo(const DxRemoteMessage_DxRemote_LibraryInfo& from);
  
  inline DxRemoteMessage_DxRemote_LibraryInfo& operator=(const DxRemoteMessage_DxRemote_LibraryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMessage_DxRemote_LibraryInfo& default_instance();
  
  void Swap(DxRemoteMessage_DxRemote_LibraryInfo* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMessage_DxRemote_LibraryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMessage_DxRemote_LibraryInfo& from);
  void MergeFrom(const DxRemoteMessage_DxRemote_LibraryInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // required string virt_path = 2;
  inline bool has_virt_path() const;
  inline void clear_virt_path();
  static const int kVirtPathFieldNumber = 2;
  inline const ::std::string& virt_path() const;
  inline void set_virt_path(const ::std::string& value);
  inline void set_virt_path(const char* value);
  inline void set_virt_path(const char* value, size_t size);
  inline ::std::string* mutable_virt_path();
  inline ::std::string* release_virt_path();
  
  // required string real_path = 3;
  inline bool has_real_path() const;
  inline void clear_real_path();
  static const int kRealPathFieldNumber = 3;
  inline const ::std::string& real_path() const;
  inline void set_real_path(const ::std::string& value);
  inline void set_real_path(const char* value);
  inline void set_real_path(const char* value, size_t size);
  inline ::std::string* mutable_real_path();
  inline ::std::string* release_real_path();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_virt_path();
  inline void clear_has_virt_path();
  inline void set_has_real_path();
  inline void clear_has_real_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* type_;
  ::std::string* virt_path_;
  ::std::string* real_path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMessage_DxRemote_LibraryInfo* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMessage : public ::google::protobuf::Message {
 public:
  DxRemoteMessage();
  virtual ~DxRemoteMessage();
  
  DxRemoteMessage(const DxRemoteMessage& from);
  
  inline DxRemoteMessage& operator=(const DxRemoteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMessage& default_instance();
  
  void Swap(DxRemoteMessage* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMessage& from);
  void MergeFrom(const DxRemoteMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DxRemoteMessage_DxRemoteArgument DxRemoteArgument;
  typedef DxRemoteMessage_DxRemote_VPLFS_dir_t DxRemote_VPLFS_dir_t;
  typedef DxRemoteMessage_DxRemote_VPLFS_dirent_t DxRemote_VPLFS_dirent_t;
  typedef DxRemoteMessage_DxRemote_VPLFS_stat_t DxRemote_VPLFS_stat_t;
  typedef DxRemoteMessage_DxRemote_LibraryInfo DxRemote_LibraryInfo;
  
  typedef DxRemoteMessage_Command Command;
  static const Command COMMAND_NONE = DxRemoteMessage_Command_COMMAND_NONE;
  static const Command LAUNCH_PROCESS = DxRemoteMessage_Command_LAUNCH_PROCESS;
  static const Command KILL_PROCESS = DxRemoteMessage_Command_KILL_PROCESS;
  static const Command GET_CONNECTED_ANDROID_IP = DxRemoteMessage_Command_GET_CONNECTED_ANDROID_IP;
  static const Command LAUNCH_CONNECTED_ANDROID_DXREMOTEAGENT = DxRemoteMessage_Command_LAUNCH_CONNECTED_ANDROID_DXREMOTEAGENT;
  static const Command CLEAN_CC = DxRemoteMessage_Command_CLEAN_CC;
  static const Command VPLFS_OPENDIR = DxRemoteMessage_Command_VPLFS_OPENDIR;
  static const Command VPLFS_READDIR = DxRemoteMessage_Command_VPLFS_READDIR;
  static const Command VPLFS_CLOSEDIR = DxRemoteMessage_Command_VPLFS_CLOSEDIR;
  static const Command VPLFS_STAT = DxRemoteMessage_Command_VPLFS_STAT;
  static const Command UTIL_RM_DASH_RF = DxRemoteMessage_Command_UTIL_RM_DASH_RF;
  static const Command VPLDIR_CREATE = DxRemoteMessage_Command_VPLDIR_CREATE;
  static const Command VPLFILE_RENAME = DxRemoteMessage_Command_VPLFILE_RENAME;
  static const Command COPYFILE = DxRemoteMessage_Command_COPYFILE;
  static const Command VPLFILE_DELETE = DxRemoteMessage_Command_VPLFILE_DELETE;
  static const Command GET_UPLOAD_PATH = DxRemoteMessage_Command_GET_UPLOAD_PATH;
  static const Command SET_CLEARFI_MODE = DxRemoteMessage_Command_SET_CLEARFI_MODE;
  static const Command STOP_CONNECTED_ANDROID_DXREMOTEAGENT = DxRemoteMessage_Command_STOP_CONNECTED_ANDROID_DXREMOTEAGENT;
  static const Command LAUNCH_CONNECTED_ANDROID_CC_SERVICE = DxRemoteMessage_Command_LAUNCH_CONNECTED_ANDROID_CC_SERVICE;
  static const Command STOP_CONNECTED_ANDROID_CC_SERVICE = DxRemoteMessage_Command_STOP_CONNECTED_ANDROID_CC_SERVICE;
  static const Command PUSH_LOCAL_CONF_TO_SHARED_OBJECT = DxRemoteMessage_Command_PUSH_LOCAL_CONF_TO_SHARED_OBJECT;
  static const Command PULL_SHARED_CONF_TO_LOCAL_OBJECT = DxRemoteMessage_Command_PULL_SHARED_CONF_TO_LOCAL_OBJECT;
  static const Command GET_CONNECTED_ANDROID_CCD_LOG = DxRemoteMessage_Command_GET_CONNECTED_ANDROID_CCD_LOG;
  static const Command CLEAN_CONNECTED_ANDROID_CCD_LOG = DxRemoteMessage_Command_CLEAN_CONNECTED_ANDROID_CCD_LOG;
  static const Command GET_CCD_ROOT_PATH = DxRemoteMessage_Command_GET_CCD_ROOT_PATH;
  static const Command GET_ALIAS_PATH = DxRemoteMessage_Command_GET_ALIAS_PATH;
  static const Command READ_LIBRARY = DxRemoteMessage_Command_READ_LIBRARY;
  static const Command CHECK_CONNECTED_ANDROID_NET_STATUS = DxRemoteMessage_Command_CHECK_CONNECTED_ANDROID_NET_STATUS;
  static const Command RESTART_CONNECTED_ANDROID_DXREMOTEAGENT = DxRemoteMessage_Command_RESTART_CONNECTED_ANDROID_DXREMOTEAGENT;
  static const Command SET_PERMISSION = DxRemoteMessage_Command_SET_PERMISSION;
  static const Command VPLFILE_TOUCH = DxRemoteMessage_Command_VPLFILE_TOUCH;
  static inline bool Command_IsValid(int value) {
    return DxRemoteMessage_Command_IsValid(value);
  }
  static const Command Command_MIN =
    DxRemoteMessage_Command_Command_MIN;
  static const Command Command_MAX =
    DxRemoteMessage_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    DxRemoteMessage_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return DxRemoteMessage_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return DxRemoteMessage_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return DxRemoteMessage_Command_Parse(name, value);
  }
  
  typedef DxRemoteMessage_ArgumentName ArgumentName;
  static const ArgumentName DXARGUMENT_NONE = DxRemoteMessage_ArgumentName_DXARGUMENT_NONE;
  static const ArgumentName DXARGUMENTFILENAME = DxRemoteMessage_ArgumentName_DXARGUMENTFILENAME;
  static const ArgumentName DXARGUMENTEXECUTEARG = DxRemoteMessage_ArgumentName_DXARGUMENTEXECUTEARG;
  static const ArgumentName DXARGUMENT_IP = DxRemoteMessage_ArgumentName_DXARGUMENT_IP;
  static const ArgumentName DXARGUMENTDIRNAME = DxRemoteMessage_ArgumentName_DXARGUMENTDIRNAME;
  static inline bool ArgumentName_IsValid(int value) {
    return DxRemoteMessage_ArgumentName_IsValid(value);
  }
  static const ArgumentName ArgumentName_MIN =
    DxRemoteMessage_ArgumentName_ArgumentName_MIN;
  static const ArgumentName ArgumentName_MAX =
    DxRemoteMessage_ArgumentName_ArgumentName_MAX;
  static const int ArgumentName_ARRAYSIZE =
    DxRemoteMessage_ArgumentName_ArgumentName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ArgumentName_descriptor() {
    return DxRemoteMessage_ArgumentName_descriptor();
  }
  static inline const ::std::string& ArgumentName_Name(ArgumentName value) {
    return DxRemoteMessage_ArgumentName_Name(value);
  }
  static inline bool ArgumentName_Parse(const ::std::string& name,
      ArgumentName* value) {
    return DxRemoteMessage_ArgumentName_Parse(name, value);
  }
  
  typedef DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemote_VPLFS_file_type_t;
  static const DxRemote_VPLFS_file_type_t DxRemote_VPLFS_TYPE_FILE = DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_FILE;
  static const DxRemote_VPLFS_file_type_t DxRemote_VPLFS_TYPE_DIR = DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_DIR;
  static const DxRemote_VPLFS_file_type_t DxRemote_VPLFS_TYPE_OTHER = DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_TYPE_OTHER;
  static inline bool DxRemote_VPLFS_file_type_t_IsValid(int value) {
    return DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(value);
  }
  static const DxRemote_VPLFS_file_type_t DxRemote_VPLFS_file_type_t_MIN =
    DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_MIN;
  static const DxRemote_VPLFS_file_type_t DxRemote_VPLFS_file_type_t_MAX =
    DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_MAX;
  static const int DxRemote_VPLFS_file_type_t_ARRAYSIZE =
    DxRemoteMessage_DxRemote_VPLFS_file_type_t_DxRemote_VPLFS_file_type_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DxRemote_VPLFS_file_type_t_descriptor() {
    return DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor();
  }
  static inline const ::std::string& DxRemote_VPLFS_file_type_t_Name(DxRemote_VPLFS_file_type_t value) {
    return DxRemoteMessage_DxRemote_VPLFS_file_type_t_Name(value);
  }
  static inline bool DxRemote_VPLFS_file_type_t_Parse(const ::std::string& name,
      DxRemote_VPLFS_file_type_t* value) {
    return DxRemoteMessage_DxRemote_VPLFS_file_type_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .igware.dxshell.DxRemoteMessage.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::igware::dxshell::DxRemoteMessage_Command command() const;
  inline void set_command(::igware::dxshell::DxRemoteMessage_Command value);
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemoteArgument argument = 2;
  inline int argument_size() const;
  inline void clear_argument();
  static const int kArgumentFieldNumber = 2;
  inline const ::igware::dxshell::DxRemoteMessage_DxRemoteArgument& argument(int index) const;
  inline ::igware::dxshell::DxRemoteMessage_DxRemoteArgument* mutable_argument(int index);
  inline ::igware::dxshell::DxRemoteMessage_DxRemoteArgument* add_argument();
  inline const ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemoteArgument >&
      argument() const;
  inline ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemoteArgument >*
      mutable_argument();
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t dir_folder = 3;
  inline bool has_dir_folder() const;
  inline void clear_dir_folder();
  static const int kDirFolderFieldNumber = 3;
  inline const ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t& dir_folder() const;
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t* mutable_dir_folder();
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t* release_dir_folder();
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t folderDirent = 4;
  inline bool has_folderdirent() const;
  inline void clear_folderdirent();
  static const int kFolderDirentFieldNumber = 4;
  inline const ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t& folderdirent() const;
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t* mutable_folderdirent();
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t* release_folderdirent();
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t file_stat = 5;
  inline bool has_file_stat() const;
  inline void clear_file_stat();
  static const int kFileStatFieldNumber = 5;
  inline const ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t& file_stat() const;
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t* mutable_file_stat();
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t* release_file_stat();
  
  // optional int32 vpl_return_code = 6;
  inline bool has_vpl_return_code() const;
  inline void clear_vpl_return_code();
  static const int kVplReturnCodeFieldNumber = 6;
  inline ::google::protobuf::int32 vpl_return_code() const;
  inline void set_vpl_return_code(::google::protobuf::int32 value);
  
  // optional int32 create_dir_mode = 7;
  inline bool has_create_dir_mode() const;
  inline void clear_create_dir_mode();
  static const int kCreateDirModeFieldNumber = 7;
  inline ::google::protobuf::int32 create_dir_mode() const;
  inline void set_create_dir_mode(::google::protobuf::int32 value);
  
  // optional string rename_source = 8;
  inline bool has_rename_source() const;
  inline void clear_rename_source();
  static const int kRenameSourceFieldNumber = 8;
  inline const ::std::string& rename_source() const;
  inline void set_rename_source(const ::std::string& value);
  inline void set_rename_source(const char* value);
  inline void set_rename_source(const char* value, size_t size);
  inline ::std::string* mutable_rename_source();
  inline ::std::string* release_rename_source();
  
  // optional string rename_destination = 9;
  inline bool has_rename_destination() const;
  inline void clear_rename_destination();
  static const int kRenameDestinationFieldNumber = 9;
  inline const ::std::string& rename_destination() const;
  inline void set_rename_destination(const ::std::string& value);
  inline void set_rename_destination(const char* value);
  inline void set_rename_destination(const char* value, size_t size);
  inline ::std::string* mutable_rename_destination();
  inline ::std::string* release_rename_destination();
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo lib_info = 10;
  inline int lib_info_size() const;
  inline void clear_lib_info();
  static const int kLibInfoFieldNumber = 10;
  inline const ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo& lib_info(int index) const;
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo* mutable_lib_info(int index);
  inline ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo* add_lib_info();
  inline const ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo >&
      lib_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo >*
      mutable_lib_info();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMessage)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_dir_folder();
  inline void clear_has_dir_folder();
  inline void set_has_folderdirent();
  inline void clear_has_folderdirent();
  inline void set_has_file_stat();
  inline void clear_has_file_stat();
  inline void set_has_vpl_return_code();
  inline void clear_has_vpl_return_code();
  inline void set_has_create_dir_mode();
  inline void clear_has_create_dir_mode();
  inline void set_has_rename_source();
  inline void clear_has_rename_source();
  inline void set_has_rename_destination();
  inline void clear_has_rename_destination();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemoteArgument > argument_;
  ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t* dir_folder_;
  int command_;
  ::google::protobuf::int32 vpl_return_code_;
  ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t* folderdirent_;
  ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t* file_stat_;
  ::std::string* rename_source_;
  ::std::string* rename_destination_;
  ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo > lib_info_;
  ::google::protobuf::int32 create_dir_mode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMessage* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteMSA : public ::google::protobuf::Message {
 public:
  DxRemoteMSA();
  virtual ~DxRemoteMSA();
  
  DxRemoteMSA(const DxRemoteMSA& from);
  
  inline DxRemoteMSA& operator=(const DxRemoteMSA& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteMSA& default_instance();
  
  void Swap(DxRemoteMSA* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteMSA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteMSA& from);
  void MergeFrom(const DxRemoteMSA& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DxRemoteMSA_Function Function;
  static const Function MSABeginCatalog = DxRemoteMSA_Function_MSABeginCatalog;
  static const Function MSACommitCatalog = DxRemoteMSA_Function_MSACommitCatalog;
  static const Function MSAEndCatalog = DxRemoteMSA_Function_MSAEndCatalog;
  static const Function MSABeginMetadataTransaction = DxRemoteMSA_Function_MSABeginMetadataTransaction;
  static const Function MSAUpdateMetadata = DxRemoteMSA_Function_MSAUpdateMetadata;
  static const Function MSADeleteMetadata = DxRemoteMSA_Function_MSADeleteMetadata;
  static const Function MSACommitMetadataTransaction = DxRemoteMSA_Function_MSACommitMetadataTransaction;
  static const Function MSAGetMetadataSyncState = DxRemoteMSA_Function_MSAGetMetadataSyncState;
  static const Function MSADeleteCollection = DxRemoteMSA_Function_MSADeleteCollection;
  static const Function MSADeleteCatalog = DxRemoteMSA_Function_MSADeleteCatalog;
  static const Function MSAListCollections = DxRemoteMSA_Function_MSAListCollections;
  static const Function MSAGetCollectionDetails = DxRemoteMSA_Function_MSAGetCollectionDetails;
  static inline bool Function_IsValid(int value) {
    return DxRemoteMSA_Function_IsValid(value);
  }
  static const Function Function_MIN =
    DxRemoteMSA_Function_Function_MIN;
  static const Function Function_MAX =
    DxRemoteMSA_Function_Function_MAX;
  static const int Function_ARRAYSIZE =
    DxRemoteMSA_Function_Function_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Function_descriptor() {
    return DxRemoteMSA_Function_descriptor();
  }
  static inline const ::std::string& Function_Name(Function value) {
    return DxRemoteMSA_Function_Name(value);
  }
  static inline bool Function_Parse(const ::std::string& name,
      Function* value) {
    return DxRemoteMSA_Function_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .igware.dxshell.DxRemoteMSA.Function func = 1;
  inline bool has_func() const;
  inline void clear_func();
  static const int kFuncFieldNumber = 1;
  inline ::igware::dxshell::DxRemoteMSA_Function func() const;
  inline void set_func(::igware::dxshell::DxRemoteMSA_Function value);
  
  // optional int32 func_return = 2;
  inline bool has_func_return() const;
  inline void clear_func_return();
  static const int kFuncReturnFieldNumber = 2;
  inline ::google::protobuf::int32 func_return() const;
  inline void set_func_return(::google::protobuf::int32 value);
  
  // optional bytes msa_input = 3;
  inline bool has_msa_input() const;
  inline void clear_msa_input();
  static const int kMsaInputFieldNumber = 3;
  inline const ::std::string& msa_input() const;
  inline void set_msa_input(const ::std::string& value);
  inline void set_msa_input(const char* value);
  inline void set_msa_input(const void* value, size_t size);
  inline ::std::string* mutable_msa_input();
  inline ::std::string* release_msa_input();
  
  // optional bytes msa_output = 4;
  inline bool has_msa_output() const;
  inline void clear_msa_output();
  static const int kMsaOutputFieldNumber = 4;
  inline const ::std::string& msa_output() const;
  inline void set_msa_output(const ::std::string& value);
  inline void set_msa_output(const char* value);
  inline void set_msa_output(const void* value, size_t size);
  inline ::std::string* mutable_msa_output();
  inline ::std::string* release_msa_output();
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteMSA)
 private:
  inline void set_has_func();
  inline void clear_has_func();
  inline void set_has_func_return();
  inline void clear_has_func_return();
  inline void set_has_msa_input();
  inline void clear_has_msa_input();
  inline void set_has_msa_output();
  inline void clear_has_msa_output();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int func_;
  ::google::protobuf::int32 func_return_;
  ::std::string* msa_input_;
  ::std::string* msa_output_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteMSA* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteFileTransfer : public ::google::protobuf::Message {
 public:
  DxRemoteFileTransfer();
  virtual ~DxRemoteFileTransfer();
  
  DxRemoteFileTransfer(const DxRemoteFileTransfer& from);
  
  inline DxRemoteFileTransfer& operator=(const DxRemoteFileTransfer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteFileTransfer& default_instance();
  
  void Swap(DxRemoteFileTransfer* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteFileTransfer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteFileTransfer& from);
  void MergeFrom(const DxRemoteFileTransfer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .igware.dxshell.DxRemoteAgentFileTransfer_Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline igware::dxshell::DxRemoteAgentFileTransfer_Type type() const;
  inline void set_type(igware::dxshell::DxRemoteAgentFileTransfer_Type value);
  
  // required int32 vpl_return_code = 2;
  inline bool has_vpl_return_code() const;
  inline void clear_vpl_return_code();
  static const int kVplReturnCodeFieldNumber = 2;
  inline ::google::protobuf::int32 vpl_return_code() const;
  inline void set_vpl_return_code(::google::protobuf::int32 value);
  
  // optional int32 raw_error = 3;
  inline bool has_raw_error() const;
  inline void clear_raw_error();
  static const int kRawErrorFieldNumber = 3;
  inline ::google::protobuf::int32 raw_error() const;
  inline void set_raw_error(::google::protobuf::int32 value);
  
  // optional string path_on_agent = 4;
  inline bool has_path_on_agent() const;
  inline void clear_path_on_agent();
  static const int kPathOnAgentFieldNumber = 4;
  inline const ::std::string& path_on_agent() const;
  inline void set_path_on_agent(const ::std::string& value);
  inline void set_path_on_agent(const char* value);
  inline void set_path_on_agent(const char* value, size_t size);
  inline ::std::string* mutable_path_on_agent();
  inline ::std::string* release_path_on_agent();
  
  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional uint64 file_size = 6;
  inline bool has_file_size() const;
  inline void clear_file_size();
  static const int kFileSizeFieldNumber = 6;
  inline ::google::protobuf::uint64 file_size() const;
  inline void set_file_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteFileTransfer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vpl_return_code();
  inline void clear_has_vpl_return_code();
  inline void set_has_raw_error();
  inline void clear_has_raw_error();
  inline void set_has_path_on_agent();
  inline void clear_has_path_on_agent();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_file_size();
  inline void clear_has_file_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::int32 vpl_return_code_;
  ::std::string* path_on_agent_;
  ::std::string* data_;
  ::google::protobuf::uint64 file_size_;
  ::google::protobuf::int32 raw_error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteFileTransfer* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteTSTest_TSOpenParms : public ::google::protobuf::Message {
 public:
  DxRemoteTSTest_TSOpenParms();
  virtual ~DxRemoteTSTest_TSOpenParms();
  
  DxRemoteTSTest_TSOpenParms(const DxRemoteTSTest_TSOpenParms& from);
  
  inline DxRemoteTSTest_TSOpenParms& operator=(const DxRemoteTSTest_TSOpenParms& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteTSTest_TSOpenParms& default_instance();
  
  void Swap(DxRemoteTSTest_TSOpenParms* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteTSTest_TSOpenParms* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteTSTest_TSOpenParms& from);
  void MergeFrom(const DxRemoteTSTest_TSOpenParms& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);
  
  // optional uint64 device_id = 2;
  inline bool has_device_id() const;
  inline void clear_device_id();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::uint64 device_id() const;
  inline void set_device_id(::google::protobuf::uint64 value);
  
  // optional string service_name = 3;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 3;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string credentials = 4;
  inline bool has_credentials() const;
  inline void clear_credentials();
  static const int kCredentialsFieldNumber = 4;
  inline const ::std::string& credentials() const;
  inline void set_credentials(const ::std::string& value);
  inline void set_credentials(const char* value);
  inline void set_credentials(const char* value, size_t size);
  inline ::std::string* mutable_credentials();
  inline ::std::string* release_credentials();
  
  // optional uint64 flags = 5;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 5;
  inline ::google::protobuf::uint64 flags() const;
  inline void set_flags(::google::protobuf::uint64 value);
  
  // optional uint64 timeout = 6;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 6;
  inline ::google::protobuf::uint64 timeout() const;
  inline void set_timeout(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteTSTest.TSOpenParms)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_device_id();
  inline void clear_has_device_id();
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_credentials();
  inline void clear_has_credentials();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::uint64 device_id_;
  ::std::string* service_name_;
  ::std::string* credentials_;
  ::google::protobuf::uint64 flags_;
  ::google::protobuf::uint64 timeout_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteTSTest_TSOpenParms* default_instance_;
};
// -------------------------------------------------------------------

class DxRemoteTSTest : public ::google::protobuf::Message {
 public:
  DxRemoteTSTest();
  virtual ~DxRemoteTSTest();
  
  DxRemoteTSTest(const DxRemoteTSTest& from);
  
  inline DxRemoteTSTest& operator=(const DxRemoteTSTest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DxRemoteTSTest& default_instance();
  
  void Swap(DxRemoteTSTest* other);
  
  // implements Message ----------------------------------------------
  
  DxRemoteTSTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DxRemoteTSTest& from);
  void MergeFrom(const DxRemoteTSTest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DxRemoteTSTest_TSOpenParms TSOpenParms;
  
  // accessors -------------------------------------------------------
  
  // optional int32 return_value = 1;
  inline bool has_return_value() const;
  inline void clear_return_value();
  static const int kReturnValueFieldNumber = 1;
  inline ::google::protobuf::int32 return_value() const;
  inline void set_return_value(::google::protobuf::int32 value);
  
  // optional string error_msg = 2;
  inline bool has_error_msg() const;
  inline void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  inline const ::std::string& error_msg() const;
  inline void set_error_msg(const ::std::string& value);
  inline void set_error_msg(const char* value);
  inline void set_error_msg(const char* value, size_t size);
  inline ::std::string* mutable_error_msg();
  inline ::std::string* release_error_msg();
  
  // optional .igware.dxshell.DxRemoteTSTest.TSOpenParms ts_open_parms = 3;
  inline bool has_ts_open_parms() const;
  inline void clear_ts_open_parms();
  static const int kTsOpenParmsFieldNumber = 3;
  inline const ::igware::dxshell::DxRemoteTSTest_TSOpenParms& ts_open_parms() const;
  inline ::igware::dxshell::DxRemoteTSTest_TSOpenParms* mutable_ts_open_parms();
  inline ::igware::dxshell::DxRemoteTSTest_TSOpenParms* release_ts_open_parms();
  
  // optional int32 test_id = 4;
  inline bool has_test_id() const;
  inline void clear_test_id();
  static const int kTestIdFieldNumber = 4;
  inline ::google::protobuf::int32 test_id() const;
  inline void set_test_id(::google::protobuf::int32 value);
  
  // optional int32 log_enable_level = 5;
  inline bool has_log_enable_level() const;
  inline void clear_log_enable_level();
  static const int kLogEnableLevelFieldNumber = 5;
  inline ::google::protobuf::int32 log_enable_level() const;
  inline void set_log_enable_level(::google::protobuf::int32 value);
  
  // optional uint32 xfer_cnt = 6;
  inline bool has_xfer_cnt() const;
  inline void clear_xfer_cnt();
  static const int kXferCntFieldNumber = 6;
  inline ::google::protobuf::uint32 xfer_cnt() const;
  inline void set_xfer_cnt(::google::protobuf::uint32 value);
  
  // optional uint32 xfer_size = 7;
  inline bool has_xfer_size() const;
  inline void clear_xfer_size();
  static const int kXferSizeFieldNumber = 7;
  inline ::google::protobuf::uint32 xfer_size() const;
  inline void set_xfer_size(::google::protobuf::uint32 value);
  
  // optional uint32 num_test_iterations = 8;
  inline bool has_num_test_iterations() const;
  inline void clear_num_test_iterations();
  static const int kNumTestIterationsFieldNumber = 8;
  inline ::google::protobuf::uint32 num_test_iterations() const;
  inline void set_num_test_iterations(::google::protobuf::uint32 value);
  
  // optional uint32 num_clients = 9;
  inline bool has_num_clients() const;
  inline void clear_num_clients();
  static const int kNumClientsFieldNumber = 9;
  inline ::google::protobuf::uint32 num_clients() const;
  inline void set_num_clients(::google::protobuf::uint32 value);
  
  // optional int32 client_write_delay = 10;
  inline bool has_client_write_delay() const;
  inline void clear_client_write_delay();
  static const int kClientWriteDelayFieldNumber = 10;
  inline ::google::protobuf::int32 client_write_delay() const;
  inline void set_client_write_delay(::google::protobuf::int32 value);
  
  // optional int32 server_read_delay = 11;
  inline bool has_server_read_delay() const;
  inline void clear_server_read_delay();
  static const int kServerReadDelayFieldNumber = 11;
  inline ::google::protobuf::int32 server_read_delay() const;
  inline void set_server_read_delay(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:igware.dxshell.DxRemoteTSTest)
 private:
  inline void set_has_return_value();
  inline void clear_has_return_value();
  inline void set_has_error_msg();
  inline void clear_has_error_msg();
  inline void set_has_ts_open_parms();
  inline void clear_has_ts_open_parms();
  inline void set_has_test_id();
  inline void clear_has_test_id();
  inline void set_has_log_enable_level();
  inline void clear_has_log_enable_level();
  inline void set_has_xfer_cnt();
  inline void clear_has_xfer_cnt();
  inline void set_has_xfer_size();
  inline void clear_has_xfer_size();
  inline void set_has_num_test_iterations();
  inline void clear_has_num_test_iterations();
  inline void set_has_num_clients();
  inline void clear_has_num_clients();
  inline void set_has_client_write_delay();
  inline void clear_has_client_write_delay();
  inline void set_has_server_read_delay();
  inline void clear_has_server_read_delay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_msg_;
  ::google::protobuf::int32 return_value_;
  ::google::protobuf::int32 test_id_;
  ::igware::dxshell::DxRemoteTSTest_TSOpenParms* ts_open_parms_;
  ::google::protobuf::int32 log_enable_level_;
  ::google::protobuf::uint32 xfer_cnt_;
  ::google::protobuf::uint32 xfer_size_;
  ::google::protobuf::uint32 num_test_iterations_;
  ::google::protobuf::uint32 num_clients_;
  ::google::protobuf::int32 client_write_delay_;
  ::google::protobuf::int32 server_read_delay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto();
  friend void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto();
  
  void InitAsDefaultInstance();
  static DxRemoteTSTest* default_instance_;
};
// ===================================================================


// ===================================================================

// HttpGetInput

// required .igware.dxshell.HttpAgentCommandType command_type = 1;
inline bool HttpGetInput::has_command_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpGetInput::set_has_command_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpGetInput::clear_has_command_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpGetInput::clear_command_type() {
  command_type_ = 0;
  clear_has_command_type();
}
inline igware::dxshell::HttpAgentCommandType HttpGetInput::command_type() const {
  return static_cast< igware::dxshell::HttpAgentCommandType >(command_type_);
}
inline void HttpGetInput::set_command_type(igware::dxshell::HttpAgentCommandType value) {
  GOOGLE_DCHECK(igware::dxshell::HttpAgentCommandType_IsValid(value));
  set_has_command_type();
  command_type_ = value;
}

// required string url = 2;
inline bool HttpGetInput::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpGetInput::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpGetInput::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpGetInput::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& HttpGetInput::url() const {
  return *url_;
}
inline void HttpGetInput::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void HttpGetInput::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void HttpGetInput::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetInput::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* HttpGetInput::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 max_bytes = 3;
inline bool HttpGetInput::has_max_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpGetInput::set_has_max_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpGetInput::clear_has_max_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpGetInput::clear_max_bytes() {
  max_bytes_ = 0u;
  clear_has_max_bytes();
}
inline ::google::protobuf::uint32 HttpGetInput::max_bytes() const {
  return max_bytes_;
}
inline void HttpGetInput::set_max_bytes(::google::protobuf::uint32 value) {
  set_has_max_bytes();
  max_bytes_ = value;
}

// optional uint64 maxbytes_delay = 4 [default = 0];
inline bool HttpGetInput::has_maxbytes_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpGetInput::set_has_maxbytes_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpGetInput::clear_has_maxbytes_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpGetInput::clear_maxbytes_delay() {
  maxbytes_delay_ = GOOGLE_ULONGLONG(0);
  clear_has_maxbytes_delay();
}
inline ::google::protobuf::uint64 HttpGetInput::maxbytes_delay() const {
  return maxbytes_delay_;
}
inline void HttpGetInput::set_maxbytes_delay(::google::protobuf::uint64 value) {
  set_has_maxbytes_delay();
  maxbytes_delay_ = value;
}

// optional bool use_media_player = 5 [default = false];
inline bool HttpGetInput::has_use_media_player() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpGetInput::set_has_use_media_player() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpGetInput::clear_has_use_media_player() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpGetInput::clear_use_media_player() {
  use_media_player_ = false;
  clear_has_use_media_player();
}
inline bool HttpGetInput::use_media_player() const {
  return use_media_player_;
}
inline void HttpGetInput::set_use_media_player(bool value) {
  set_has_use_media_player();
  use_media_player_ = value;
}

// repeated string headers = 6;
inline int HttpGetInput::headers_size() const {
  return headers_.size();
}
inline void HttpGetInput::clear_headers() {
  headers_.Clear();
}
inline const ::std::string& HttpGetInput::headers(int index) const {
  return headers_.Get(index);
}
inline ::std::string* HttpGetInput::mutable_headers(int index) {
  return headers_.Mutable(index);
}
inline void HttpGetInput::set_headers(int index, const ::std::string& value) {
  headers_.Mutable(index)->assign(value);
}
inline void HttpGetInput::set_headers(int index, const char* value) {
  headers_.Mutable(index)->assign(value);
}
inline void HttpGetInput::set_headers(int index, const char* value, size_t size) {
  headers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetInput::add_headers() {
  return headers_.Add();
}
inline void HttpGetInput::add_headers(const ::std::string& value) {
  headers_.Add()->assign(value);
}
inline void HttpGetInput::add_headers(const char* value) {
  headers_.Add()->assign(value);
}
inline void HttpGetInput::add_headers(const char* value, size_t size) {
  headers_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HttpGetInput::headers() const {
  return headers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HttpGetInput::mutable_headers() {
  return &headers_;
}

// optional string file_save_response = 7 [default = ""];
inline bool HttpGetInput::has_file_save_response() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HttpGetInput::set_has_file_save_response() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HttpGetInput::clear_has_file_save_response() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HttpGetInput::clear_file_save_response() {
  if (file_save_response_ != &::google::protobuf::internal::kEmptyString) {
    file_save_response_->clear();
  }
  clear_has_file_save_response();
}
inline const ::std::string& HttpGetInput::file_save_response() const {
  return *file_save_response_;
}
inline void HttpGetInput::set_file_save_response(const ::std::string& value) {
  set_has_file_save_response();
  if (file_save_response_ == &::google::protobuf::internal::kEmptyString) {
    file_save_response_ = new ::std::string;
  }
  file_save_response_->assign(value);
}
inline void HttpGetInput::set_file_save_response(const char* value) {
  set_has_file_save_response();
  if (file_save_response_ == &::google::protobuf::internal::kEmptyString) {
    file_save_response_ = new ::std::string;
  }
  file_save_response_->assign(value);
}
inline void HttpGetInput::set_file_save_response(const char* value, size_t size) {
  set_has_file_save_response();
  if (file_save_response_ == &::google::protobuf::internal::kEmptyString) {
    file_save_response_ = new ::std::string;
  }
  file_save_response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetInput::mutable_file_save_response() {
  set_has_file_save_response();
  if (file_save_response_ == &::google::protobuf::internal::kEmptyString) {
    file_save_response_ = new ::std::string;
  }
  return file_save_response_;
}
inline ::std::string* HttpGetInput::release_file_save_response() {
  clear_has_file_save_response();
  if (file_save_response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_save_response_;
    file_save_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes payload = 8 [default = ""];
inline bool HttpGetInput::has_payload() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HttpGetInput::set_has_payload() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HttpGetInput::clear_has_payload() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HttpGetInput::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& HttpGetInput::payload() const {
  return *payload_;
}
inline void HttpGetInput::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void HttpGetInput::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void HttpGetInput::set_payload(const void* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetInput::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* HttpGetInput::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string file = 9 [default = ""];
inline bool HttpGetInput::has_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HttpGetInput::set_has_file() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HttpGetInput::clear_has_file() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HttpGetInput::clear_file() {
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& HttpGetInput::file() const {
  return *file_;
}
inline void HttpGetInput::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void HttpGetInput::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(value);
}
inline void HttpGetInput::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetInput::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    file_ = new ::std::string;
  }
  return file_;
}
inline ::std::string* HttpGetInput::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// HttpGetOutput

// required int32 error_code = 1;
inline bool HttpGetOutput::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HttpGetOutput::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HttpGetOutput::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HttpGetOutput::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 HttpGetOutput::error_code() const {
  return error_code_;
}
inline void HttpGetOutput::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional string error_msg = 2;
inline bool HttpGetOutput::has_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HttpGetOutput::set_has_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HttpGetOutput::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HttpGetOutput::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& HttpGetOutput::error_msg() const {
  return *error_msg_;
}
inline void HttpGetOutput::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void HttpGetOutput::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void HttpGetOutput::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetOutput::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  return error_msg_;
}
inline ::std::string* HttpGetOutput::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 total_bytes = 3;
inline bool HttpGetOutput::has_total_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HttpGetOutput::set_has_total_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HttpGetOutput::clear_has_total_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HttpGetOutput::clear_total_bytes() {
  total_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_total_bytes();
}
inline ::google::protobuf::uint64 HttpGetOutput::total_bytes() const {
  return total_bytes_;
}
inline void HttpGetOutput::set_total_bytes(::google::protobuf::uint64 value) {
  set_has_total_bytes();
  total_bytes_ = value;
}

// optional bytes response = 4;
inline bool HttpGetOutput::has_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HttpGetOutput::set_has_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HttpGetOutput::clear_has_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HttpGetOutput::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& HttpGetOutput::response() const {
  return *response_;
}
inline void HttpGetOutput::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void HttpGetOutput::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void HttpGetOutput::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HttpGetOutput::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* HttpGetOutput::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 httpagent_response = 5;
inline bool HttpGetOutput::has_httpagent_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HttpGetOutput::set_has_httpagent_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HttpGetOutput::clear_has_httpagent_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HttpGetOutput::clear_httpagent_response() {
  httpagent_response_ = 0;
  clear_has_httpagent_response();
}
inline ::google::protobuf::int32 HttpGetOutput::httpagent_response() const {
  return httpagent_response_;
}
inline void HttpGetOutput::set_httpagent_response(::google::protobuf::int32 value) {
  set_has_httpagent_response();
  httpagent_response_ = value;
}

// optional int32 httpagent_statuscode = 6;
inline bool HttpGetOutput::has_httpagent_statuscode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HttpGetOutput::set_has_httpagent_statuscode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HttpGetOutput::clear_has_httpagent_statuscode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HttpGetOutput::clear_httpagent_statuscode() {
  httpagent_statuscode_ = 0;
  clear_has_httpagent_statuscode();
}
inline ::google::protobuf::int32 HttpGetOutput::httpagent_statuscode() const {
  return httpagent_statuscode_;
}
inline void HttpGetOutput::set_httpagent_statuscode(::google::protobuf::int32 value) {
  set_has_httpagent_statuscode();
  httpagent_statuscode_ = value;
}

// -------------------------------------------------------------------

// QueryDeviceOutput

// required string device_name = 1;
inline bool QueryDeviceOutput::has_device_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDeviceOutput::set_has_device_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDeviceOutput::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDeviceOutput::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& QueryDeviceOutput::device_name() const {
  return *device_name_;
}
inline void QueryDeviceOutput::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void QueryDeviceOutput::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void QueryDeviceOutput::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryDeviceOutput::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* QueryDeviceOutput::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string device_class = 2;
inline bool QueryDeviceOutput::has_device_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDeviceOutput::set_has_device_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDeviceOutput::clear_has_device_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDeviceOutput::clear_device_class() {
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    device_class_->clear();
  }
  clear_has_device_class();
}
inline const ::std::string& QueryDeviceOutput::device_class() const {
  return *device_class_;
}
inline void QueryDeviceOutput::set_device_class(const ::std::string& value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void QueryDeviceOutput::set_device_class(const char* value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void QueryDeviceOutput::set_device_class(const char* value, size_t size) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryDeviceOutput::mutable_device_class() {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  return device_class_;
}
inline ::std::string* QueryDeviceOutput::release_device_class() {
  clear_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_class_;
    device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string os_version = 3;
inline bool QueryDeviceOutput::has_os_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryDeviceOutput::set_has_os_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryDeviceOutput::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryDeviceOutput::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& QueryDeviceOutput::os_version() const {
  return *os_version_;
}
inline void QueryDeviceOutput::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void QueryDeviceOutput::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void QueryDeviceOutput::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QueryDeviceOutput::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* QueryDeviceOutput::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool is_acer_device = 4 [default = false];
inline bool QueryDeviceOutput::has_is_acer_device() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryDeviceOutput::set_has_is_acer_device() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryDeviceOutput::clear_has_is_acer_device() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryDeviceOutput::clear_is_acer_device() {
  is_acer_device_ = false;
  clear_has_is_acer_device();
}
inline bool QueryDeviceOutput::is_acer_device() const {
  return is_acer_device_;
}
inline void QueryDeviceOutput::set_is_acer_device(bool value) {
  set_has_is_acer_device();
  is_acer_device_ = value;
}

// required bool device_has_camera = 5 [default = false];
inline bool QueryDeviceOutput::has_device_has_camera() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryDeviceOutput::set_has_device_has_camera() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryDeviceOutput::clear_has_device_has_camera() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryDeviceOutput::clear_device_has_camera() {
  device_has_camera_ = false;
  clear_has_device_has_camera();
}
inline bool QueryDeviceOutput::device_has_camera() const {
  return device_has_camera_;
}
inline void QueryDeviceOutput::set_device_has_camera(bool value) {
  set_has_device_has_camera();
  device_has_camera_ = value;
}

// -------------------------------------------------------------------

// DxRemoteMessage_DxRemoteArgument

// required .igware.dxshell.DxRemoteMessage.ArgumentName name = 1;
inline bool DxRemoteMessage_DxRemoteArgument::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMessage_DxRemoteArgument::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMessage_DxRemoteArgument::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMessage_DxRemoteArgument::clear_name() {
  name_ = 0;
  clear_has_name();
}
inline ::igware::dxshell::DxRemoteMessage_ArgumentName DxRemoteMessage_DxRemoteArgument::name() const {
  return static_cast< ::igware::dxshell::DxRemoteMessage_ArgumentName >(name_);
}
inline void DxRemoteMessage_DxRemoteArgument::set_name(::igware::dxshell::DxRemoteMessage_ArgumentName value) {
  GOOGLE_DCHECK(::igware::dxshell::DxRemoteMessage_ArgumentName_IsValid(value));
  set_has_name();
  name_ = value;
}

// optional string value = 2;
inline bool DxRemoteMessage_DxRemoteArgument::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteMessage_DxRemoteArgument::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteMessage_DxRemoteArgument::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteMessage_DxRemoteArgument::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& DxRemoteMessage_DxRemoteArgument::value() const {
  return *value_;
}
inline void DxRemoteMessage_DxRemoteArgument::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DxRemoteMessage_DxRemoteArgument::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void DxRemoteMessage_DxRemoteArgument::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemoteArgument::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* DxRemoteMessage_DxRemoteArgument::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DxRemoteMessage_DxRemote_VPLFS_dir_t

// required string dir_path = 1;
inline bool DxRemoteMessage_DxRemote_VPLFS_dir_t::has_dir_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_has_dir_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::clear_has_dir_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::clear_dir_path() {
  if (dir_path_ != &::google::protobuf::internal::kEmptyString) {
    dir_path_->clear();
  }
  clear_has_dir_path();
}
inline const ::std::string& DxRemoteMessage_DxRemote_VPLFS_dir_t::dir_path() const {
  return *dir_path_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_dir_path(const ::std::string& value) {
  set_has_dir_path();
  if (dir_path_ == &::google::protobuf::internal::kEmptyString) {
    dir_path_ = new ::std::string;
  }
  dir_path_->assign(value);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_dir_path(const char* value) {
  set_has_dir_path();
  if (dir_path_ == &::google::protobuf::internal::kEmptyString) {
    dir_path_ = new ::std::string;
  }
  dir_path_->assign(value);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_dir_path(const char* value, size_t size) {
  set_has_dir_path();
  if (dir_path_ == &::google::protobuf::internal::kEmptyString) {
    dir_path_ = new ::std::string;
  }
  dir_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemote_VPLFS_dir_t::mutable_dir_path() {
  set_has_dir_path();
  if (dir_path_ == &::google::protobuf::internal::kEmptyString) {
    dir_path_ = new ::std::string;
  }
  return dir_path_;
}
inline ::std::string* DxRemoteMessage_DxRemote_VPLFS_dir_t::release_dir_path() {
  clear_has_dir_path();
  if (dir_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dir_path_;
    dir_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string alias = 2;
inline bool DxRemoteMessage_DxRemote_VPLFS_dir_t::has_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_has_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::clear_has_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::clear_alias() {
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    alias_->clear();
  }
  clear_has_alias();
}
inline const ::std::string& DxRemoteMessage_DxRemote_VPLFS_dir_t::alias() const {
  return *alias_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_alias(const ::std::string& value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_alias(const char* value) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(value);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dir_t::set_alias(const char* value, size_t size) {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  alias_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemote_VPLFS_dir_t::mutable_alias() {
  set_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    alias_ = new ::std::string;
  }
  return alias_;
}
inline ::std::string* DxRemoteMessage_DxRemote_VPLFS_dir_t::release_alias() {
  clear_has_alias();
  if (alias_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alias_;
    alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DxRemoteMessage_DxRemote_VPLFS_dirent_t

// required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 1;
inline bool DxRemoteMessage_DxRemote_VPLFS_dirent_t::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage_DxRemote_VPLFS_dirent_t::type() const {
  return static_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t >(type_);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::set_type(::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t value) {
  GOOGLE_DCHECK(::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string filename = 2;
inline bool DxRemoteMessage_DxRemote_VPLFS_dirent_t::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& DxRemoteMessage_DxRemote_VPLFS_dirent_t::filename() const {
  return *filename_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void DxRemoteMessage_DxRemote_VPLFS_dirent_t::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemote_VPLFS_dirent_t::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* DxRemoteMessage_DxRemote_VPLFS_dirent_t::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DxRemoteMessage_DxRemote_VPLFS_stat_t

// required uint64 size = 1;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 DxRemoteMessage_DxRemote_VPLFS_stat_t::size() const {
  return size_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 2;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage_DxRemote_VPLFS_stat_t::type() const {
  return static_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t >(type_);
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_type(::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t value) {
  GOOGLE_DCHECK(::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 atime = 3;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_atime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_atime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_atime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_atime() {
  atime_ = GOOGLE_LONGLONG(0);
  clear_has_atime();
}
inline ::google::protobuf::int64 DxRemoteMessage_DxRemote_VPLFS_stat_t::atime() const {
  return atime_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_atime(::google::protobuf::int64 value) {
  set_has_atime();
  atime_ = value;
}

// required int64 mtime = 4;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_mtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_mtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_mtime() {
  mtime_ = GOOGLE_LONGLONG(0);
  clear_has_mtime();
}
inline ::google::protobuf::int64 DxRemoteMessage_DxRemote_VPLFS_stat_t::mtime() const {
  return mtime_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_mtime(::google::protobuf::int64 value) {
  set_has_mtime();
  mtime_ = value;
}

// required int64 ctime = 5;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_ctime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_ctime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_ctime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_ctime() {
  ctime_ = GOOGLE_LONGLONG(0);
  clear_has_ctime();
}
inline ::google::protobuf::int64 DxRemoteMessage_DxRemote_VPLFS_stat_t::ctime() const {
  return ctime_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_ctime(::google::protobuf::int64 value) {
  set_has_ctime();
  ctime_ = value;
}

// required int32 isHidden = 6;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_ishidden() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_ishidden() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_ishidden() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_ishidden() {
  ishidden_ = 0;
  clear_has_ishidden();
}
inline ::google::protobuf::int32 DxRemoteMessage_DxRemote_VPLFS_stat_t::ishidden() const {
  return ishidden_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_ishidden(::google::protobuf::int32 value) {
  set_has_ishidden();
  ishidden_ = value;
}

// required int32 isSymLink = 7;
inline bool DxRemoteMessage_DxRemote_VPLFS_stat_t::has_issymlink() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_has_issymlink() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_has_issymlink() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::clear_issymlink() {
  issymlink_ = 0;
  clear_has_issymlink();
}
inline ::google::protobuf::int32 DxRemoteMessage_DxRemote_VPLFS_stat_t::issymlink() const {
  return issymlink_;
}
inline void DxRemoteMessage_DxRemote_VPLFS_stat_t::set_issymlink(::google::protobuf::int32 value) {
  set_has_issymlink();
  issymlink_ = value;
}

// -------------------------------------------------------------------

// DxRemoteMessage_DxRemote_LibraryInfo

// required string type = 1;
inline bool DxRemoteMessage_DxRemote_LibraryInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& DxRemoteMessage_DxRemote_LibraryInfo::type() const {
  return *type_;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemote_LibraryInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* DxRemoteMessage_DxRemote_LibraryInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string virt_path = 2;
inline bool DxRemoteMessage_DxRemote_LibraryInfo::has_virt_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_has_virt_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::clear_has_virt_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::clear_virt_path() {
  if (virt_path_ != &::google::protobuf::internal::kEmptyString) {
    virt_path_->clear();
  }
  clear_has_virt_path();
}
inline const ::std::string& DxRemoteMessage_DxRemote_LibraryInfo::virt_path() const {
  return *virt_path_;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_virt_path(const ::std::string& value) {
  set_has_virt_path();
  if (virt_path_ == &::google::protobuf::internal::kEmptyString) {
    virt_path_ = new ::std::string;
  }
  virt_path_->assign(value);
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_virt_path(const char* value) {
  set_has_virt_path();
  if (virt_path_ == &::google::protobuf::internal::kEmptyString) {
    virt_path_ = new ::std::string;
  }
  virt_path_->assign(value);
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_virt_path(const char* value, size_t size) {
  set_has_virt_path();
  if (virt_path_ == &::google::protobuf::internal::kEmptyString) {
    virt_path_ = new ::std::string;
  }
  virt_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemote_LibraryInfo::mutable_virt_path() {
  set_has_virt_path();
  if (virt_path_ == &::google::protobuf::internal::kEmptyString) {
    virt_path_ = new ::std::string;
  }
  return virt_path_;
}
inline ::std::string* DxRemoteMessage_DxRemote_LibraryInfo::release_virt_path() {
  clear_has_virt_path();
  if (virt_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = virt_path_;
    virt_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string real_path = 3;
inline bool DxRemoteMessage_DxRemote_LibraryInfo::has_real_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_has_real_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::clear_has_real_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::clear_real_path() {
  if (real_path_ != &::google::protobuf::internal::kEmptyString) {
    real_path_->clear();
  }
  clear_has_real_path();
}
inline const ::std::string& DxRemoteMessage_DxRemote_LibraryInfo::real_path() const {
  return *real_path_;
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_real_path(const ::std::string& value) {
  set_has_real_path();
  if (real_path_ == &::google::protobuf::internal::kEmptyString) {
    real_path_ = new ::std::string;
  }
  real_path_->assign(value);
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_real_path(const char* value) {
  set_has_real_path();
  if (real_path_ == &::google::protobuf::internal::kEmptyString) {
    real_path_ = new ::std::string;
  }
  real_path_->assign(value);
}
inline void DxRemoteMessage_DxRemote_LibraryInfo::set_real_path(const char* value, size_t size) {
  set_has_real_path();
  if (real_path_ == &::google::protobuf::internal::kEmptyString) {
    real_path_ = new ::std::string;
  }
  real_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage_DxRemote_LibraryInfo::mutable_real_path() {
  set_has_real_path();
  if (real_path_ == &::google::protobuf::internal::kEmptyString) {
    real_path_ = new ::std::string;
  }
  return real_path_;
}
inline ::std::string* DxRemoteMessage_DxRemote_LibraryInfo::release_real_path() {
  clear_has_real_path();
  if (real_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_path_;
    real_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DxRemoteMessage

// required .igware.dxshell.DxRemoteMessage.Command command = 1;
inline bool DxRemoteMessage::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMessage::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMessage::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMessage::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::igware::dxshell::DxRemoteMessage_Command DxRemoteMessage::command() const {
  return static_cast< ::igware::dxshell::DxRemoteMessage_Command >(command_);
}
inline void DxRemoteMessage::set_command(::igware::dxshell::DxRemoteMessage_Command value) {
  GOOGLE_DCHECK(::igware::dxshell::DxRemoteMessage_Command_IsValid(value));
  set_has_command();
  command_ = value;
}

// repeated .igware.dxshell.DxRemoteMessage.DxRemoteArgument argument = 2;
inline int DxRemoteMessage::argument_size() const {
  return argument_.size();
}
inline void DxRemoteMessage::clear_argument() {
  argument_.Clear();
}
inline const ::igware::dxshell::DxRemoteMessage_DxRemoteArgument& DxRemoteMessage::argument(int index) const {
  return argument_.Get(index);
}
inline ::igware::dxshell::DxRemoteMessage_DxRemoteArgument* DxRemoteMessage::mutable_argument(int index) {
  return argument_.Mutable(index);
}
inline ::igware::dxshell::DxRemoteMessage_DxRemoteArgument* DxRemoteMessage::add_argument() {
  return argument_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemoteArgument >&
DxRemoteMessage::argument() const {
  return argument_;
}
inline ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemoteArgument >*
DxRemoteMessage::mutable_argument() {
  return &argument_;
}

// optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t dir_folder = 3;
inline bool DxRemoteMessage::has_dir_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteMessage::set_has_dir_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteMessage::clear_has_dir_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteMessage::clear_dir_folder() {
  if (dir_folder_ != NULL) dir_folder_->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t::Clear();
  clear_has_dir_folder();
}
inline const ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t& DxRemoteMessage::dir_folder() const {
  return dir_folder_ != NULL ? *dir_folder_ : *default_instance_->dir_folder_;
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t* DxRemoteMessage::mutable_dir_folder() {
  set_has_dir_folder();
  if (dir_folder_ == NULL) dir_folder_ = new ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t;
  return dir_folder_;
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t* DxRemoteMessage::release_dir_folder() {
  clear_has_dir_folder();
  ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t* temp = dir_folder_;
  dir_folder_ = NULL;
  return temp;
}

// optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t folderDirent = 4;
inline bool DxRemoteMessage::has_folderdirent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DxRemoteMessage::set_has_folderdirent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DxRemoteMessage::clear_has_folderdirent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DxRemoteMessage::clear_folderdirent() {
  if (folderdirent_ != NULL) folderdirent_->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t::Clear();
  clear_has_folderdirent();
}
inline const ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t& DxRemoteMessage::folderdirent() const {
  return folderdirent_ != NULL ? *folderdirent_ : *default_instance_->folderdirent_;
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t* DxRemoteMessage::mutable_folderdirent() {
  set_has_folderdirent();
  if (folderdirent_ == NULL) folderdirent_ = new ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t;
  return folderdirent_;
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t* DxRemoteMessage::release_folderdirent() {
  clear_has_folderdirent();
  ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t* temp = folderdirent_;
  folderdirent_ = NULL;
  return temp;
}

// optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t file_stat = 5;
inline bool DxRemoteMessage::has_file_stat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DxRemoteMessage::set_has_file_stat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DxRemoteMessage::clear_has_file_stat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DxRemoteMessage::clear_file_stat() {
  if (file_stat_ != NULL) file_stat_->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t::Clear();
  clear_has_file_stat();
}
inline const ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t& DxRemoteMessage::file_stat() const {
  return file_stat_ != NULL ? *file_stat_ : *default_instance_->file_stat_;
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t* DxRemoteMessage::mutable_file_stat() {
  set_has_file_stat();
  if (file_stat_ == NULL) file_stat_ = new ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t;
  return file_stat_;
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t* DxRemoteMessage::release_file_stat() {
  clear_has_file_stat();
  ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t* temp = file_stat_;
  file_stat_ = NULL;
  return temp;
}

// optional int32 vpl_return_code = 6;
inline bool DxRemoteMessage::has_vpl_return_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DxRemoteMessage::set_has_vpl_return_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DxRemoteMessage::clear_has_vpl_return_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DxRemoteMessage::clear_vpl_return_code() {
  vpl_return_code_ = 0;
  clear_has_vpl_return_code();
}
inline ::google::protobuf::int32 DxRemoteMessage::vpl_return_code() const {
  return vpl_return_code_;
}
inline void DxRemoteMessage::set_vpl_return_code(::google::protobuf::int32 value) {
  set_has_vpl_return_code();
  vpl_return_code_ = value;
}

// optional int32 create_dir_mode = 7;
inline bool DxRemoteMessage::has_create_dir_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DxRemoteMessage::set_has_create_dir_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DxRemoteMessage::clear_has_create_dir_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DxRemoteMessage::clear_create_dir_mode() {
  create_dir_mode_ = 0;
  clear_has_create_dir_mode();
}
inline ::google::protobuf::int32 DxRemoteMessage::create_dir_mode() const {
  return create_dir_mode_;
}
inline void DxRemoteMessage::set_create_dir_mode(::google::protobuf::int32 value) {
  set_has_create_dir_mode();
  create_dir_mode_ = value;
}

// optional string rename_source = 8;
inline bool DxRemoteMessage::has_rename_source() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DxRemoteMessage::set_has_rename_source() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DxRemoteMessage::clear_has_rename_source() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DxRemoteMessage::clear_rename_source() {
  if (rename_source_ != &::google::protobuf::internal::kEmptyString) {
    rename_source_->clear();
  }
  clear_has_rename_source();
}
inline const ::std::string& DxRemoteMessage::rename_source() const {
  return *rename_source_;
}
inline void DxRemoteMessage::set_rename_source(const ::std::string& value) {
  set_has_rename_source();
  if (rename_source_ == &::google::protobuf::internal::kEmptyString) {
    rename_source_ = new ::std::string;
  }
  rename_source_->assign(value);
}
inline void DxRemoteMessage::set_rename_source(const char* value) {
  set_has_rename_source();
  if (rename_source_ == &::google::protobuf::internal::kEmptyString) {
    rename_source_ = new ::std::string;
  }
  rename_source_->assign(value);
}
inline void DxRemoteMessage::set_rename_source(const char* value, size_t size) {
  set_has_rename_source();
  if (rename_source_ == &::google::protobuf::internal::kEmptyString) {
    rename_source_ = new ::std::string;
  }
  rename_source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage::mutable_rename_source() {
  set_has_rename_source();
  if (rename_source_ == &::google::protobuf::internal::kEmptyString) {
    rename_source_ = new ::std::string;
  }
  return rename_source_;
}
inline ::std::string* DxRemoteMessage::release_rename_source() {
  clear_has_rename_source();
  if (rename_source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rename_source_;
    rename_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rename_destination = 9;
inline bool DxRemoteMessage::has_rename_destination() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DxRemoteMessage::set_has_rename_destination() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DxRemoteMessage::clear_has_rename_destination() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DxRemoteMessage::clear_rename_destination() {
  if (rename_destination_ != &::google::protobuf::internal::kEmptyString) {
    rename_destination_->clear();
  }
  clear_has_rename_destination();
}
inline const ::std::string& DxRemoteMessage::rename_destination() const {
  return *rename_destination_;
}
inline void DxRemoteMessage::set_rename_destination(const ::std::string& value) {
  set_has_rename_destination();
  if (rename_destination_ == &::google::protobuf::internal::kEmptyString) {
    rename_destination_ = new ::std::string;
  }
  rename_destination_->assign(value);
}
inline void DxRemoteMessage::set_rename_destination(const char* value) {
  set_has_rename_destination();
  if (rename_destination_ == &::google::protobuf::internal::kEmptyString) {
    rename_destination_ = new ::std::string;
  }
  rename_destination_->assign(value);
}
inline void DxRemoteMessage::set_rename_destination(const char* value, size_t size) {
  set_has_rename_destination();
  if (rename_destination_ == &::google::protobuf::internal::kEmptyString) {
    rename_destination_ = new ::std::string;
  }
  rename_destination_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMessage::mutable_rename_destination() {
  set_has_rename_destination();
  if (rename_destination_ == &::google::protobuf::internal::kEmptyString) {
    rename_destination_ = new ::std::string;
  }
  return rename_destination_;
}
inline ::std::string* DxRemoteMessage::release_rename_destination() {
  clear_has_rename_destination();
  if (rename_destination_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rename_destination_;
    rename_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo lib_info = 10;
inline int DxRemoteMessage::lib_info_size() const {
  return lib_info_.size();
}
inline void DxRemoteMessage::clear_lib_info() {
  lib_info_.Clear();
}
inline const ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo& DxRemoteMessage::lib_info(int index) const {
  return lib_info_.Get(index);
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo* DxRemoteMessage::mutable_lib_info(int index) {
  return lib_info_.Mutable(index);
}
inline ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo* DxRemoteMessage::add_lib_info() {
  return lib_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo >&
DxRemoteMessage::lib_info() const {
  return lib_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::igware::dxshell::DxRemoteMessage_DxRemote_LibraryInfo >*
DxRemoteMessage::mutable_lib_info() {
  return &lib_info_;
}

// -------------------------------------------------------------------

// DxRemoteMSA

// required .igware.dxshell.DxRemoteMSA.Function func = 1;
inline bool DxRemoteMSA::has_func() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteMSA::set_has_func() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteMSA::clear_has_func() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteMSA::clear_func() {
  func_ = 1;
  clear_has_func();
}
inline ::igware::dxshell::DxRemoteMSA_Function DxRemoteMSA::func() const {
  return static_cast< ::igware::dxshell::DxRemoteMSA_Function >(func_);
}
inline void DxRemoteMSA::set_func(::igware::dxshell::DxRemoteMSA_Function value) {
  GOOGLE_DCHECK(::igware::dxshell::DxRemoteMSA_Function_IsValid(value));
  set_has_func();
  func_ = value;
}

// optional int32 func_return = 2;
inline bool DxRemoteMSA::has_func_return() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteMSA::set_has_func_return() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteMSA::clear_has_func_return() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteMSA::clear_func_return() {
  func_return_ = 0;
  clear_has_func_return();
}
inline ::google::protobuf::int32 DxRemoteMSA::func_return() const {
  return func_return_;
}
inline void DxRemoteMSA::set_func_return(::google::protobuf::int32 value) {
  set_has_func_return();
  func_return_ = value;
}

// optional bytes msa_input = 3;
inline bool DxRemoteMSA::has_msa_input() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteMSA::set_has_msa_input() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteMSA::clear_has_msa_input() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteMSA::clear_msa_input() {
  if (msa_input_ != &::google::protobuf::internal::kEmptyString) {
    msa_input_->clear();
  }
  clear_has_msa_input();
}
inline const ::std::string& DxRemoteMSA::msa_input() const {
  return *msa_input_;
}
inline void DxRemoteMSA::set_msa_input(const ::std::string& value) {
  set_has_msa_input();
  if (msa_input_ == &::google::protobuf::internal::kEmptyString) {
    msa_input_ = new ::std::string;
  }
  msa_input_->assign(value);
}
inline void DxRemoteMSA::set_msa_input(const char* value) {
  set_has_msa_input();
  if (msa_input_ == &::google::protobuf::internal::kEmptyString) {
    msa_input_ = new ::std::string;
  }
  msa_input_->assign(value);
}
inline void DxRemoteMSA::set_msa_input(const void* value, size_t size) {
  set_has_msa_input();
  if (msa_input_ == &::google::protobuf::internal::kEmptyString) {
    msa_input_ = new ::std::string;
  }
  msa_input_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMSA::mutable_msa_input() {
  set_has_msa_input();
  if (msa_input_ == &::google::protobuf::internal::kEmptyString) {
    msa_input_ = new ::std::string;
  }
  return msa_input_;
}
inline ::std::string* DxRemoteMSA::release_msa_input() {
  clear_has_msa_input();
  if (msa_input_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msa_input_;
    msa_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes msa_output = 4;
inline bool DxRemoteMSA::has_msa_output() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DxRemoteMSA::set_has_msa_output() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DxRemoteMSA::clear_has_msa_output() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DxRemoteMSA::clear_msa_output() {
  if (msa_output_ != &::google::protobuf::internal::kEmptyString) {
    msa_output_->clear();
  }
  clear_has_msa_output();
}
inline const ::std::string& DxRemoteMSA::msa_output() const {
  return *msa_output_;
}
inline void DxRemoteMSA::set_msa_output(const ::std::string& value) {
  set_has_msa_output();
  if (msa_output_ == &::google::protobuf::internal::kEmptyString) {
    msa_output_ = new ::std::string;
  }
  msa_output_->assign(value);
}
inline void DxRemoteMSA::set_msa_output(const char* value) {
  set_has_msa_output();
  if (msa_output_ == &::google::protobuf::internal::kEmptyString) {
    msa_output_ = new ::std::string;
  }
  msa_output_->assign(value);
}
inline void DxRemoteMSA::set_msa_output(const void* value, size_t size) {
  set_has_msa_output();
  if (msa_output_ == &::google::protobuf::internal::kEmptyString) {
    msa_output_ = new ::std::string;
  }
  msa_output_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteMSA::mutable_msa_output() {
  set_has_msa_output();
  if (msa_output_ == &::google::protobuf::internal::kEmptyString) {
    msa_output_ = new ::std::string;
  }
  return msa_output_;
}
inline ::std::string* DxRemoteMSA::release_msa_output() {
  clear_has_msa_output();
  if (msa_output_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msa_output_;
    msa_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DxRemoteFileTransfer

// required .igware.dxshell.DxRemoteAgentFileTransfer_Type type = 1;
inline bool DxRemoteFileTransfer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteFileTransfer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteFileTransfer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteFileTransfer::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline igware::dxshell::DxRemoteAgentFileTransfer_Type DxRemoteFileTransfer::type() const {
  return static_cast< igware::dxshell::DxRemoteAgentFileTransfer_Type >(type_);
}
inline void DxRemoteFileTransfer::set_type(igware::dxshell::DxRemoteAgentFileTransfer_Type value) {
  GOOGLE_DCHECK(igware::dxshell::DxRemoteAgentFileTransfer_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int32 vpl_return_code = 2;
inline bool DxRemoteFileTransfer::has_vpl_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteFileTransfer::set_has_vpl_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteFileTransfer::clear_has_vpl_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteFileTransfer::clear_vpl_return_code() {
  vpl_return_code_ = 0;
  clear_has_vpl_return_code();
}
inline ::google::protobuf::int32 DxRemoteFileTransfer::vpl_return_code() const {
  return vpl_return_code_;
}
inline void DxRemoteFileTransfer::set_vpl_return_code(::google::protobuf::int32 value) {
  set_has_vpl_return_code();
  vpl_return_code_ = value;
}

// optional int32 raw_error = 3;
inline bool DxRemoteFileTransfer::has_raw_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteFileTransfer::set_has_raw_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteFileTransfer::clear_has_raw_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteFileTransfer::clear_raw_error() {
  raw_error_ = 0;
  clear_has_raw_error();
}
inline ::google::protobuf::int32 DxRemoteFileTransfer::raw_error() const {
  return raw_error_;
}
inline void DxRemoteFileTransfer::set_raw_error(::google::protobuf::int32 value) {
  set_has_raw_error();
  raw_error_ = value;
}

// optional string path_on_agent = 4;
inline bool DxRemoteFileTransfer::has_path_on_agent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DxRemoteFileTransfer::set_has_path_on_agent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DxRemoteFileTransfer::clear_has_path_on_agent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DxRemoteFileTransfer::clear_path_on_agent() {
  if (path_on_agent_ != &::google::protobuf::internal::kEmptyString) {
    path_on_agent_->clear();
  }
  clear_has_path_on_agent();
}
inline const ::std::string& DxRemoteFileTransfer::path_on_agent() const {
  return *path_on_agent_;
}
inline void DxRemoteFileTransfer::set_path_on_agent(const ::std::string& value) {
  set_has_path_on_agent();
  if (path_on_agent_ == &::google::protobuf::internal::kEmptyString) {
    path_on_agent_ = new ::std::string;
  }
  path_on_agent_->assign(value);
}
inline void DxRemoteFileTransfer::set_path_on_agent(const char* value) {
  set_has_path_on_agent();
  if (path_on_agent_ == &::google::protobuf::internal::kEmptyString) {
    path_on_agent_ = new ::std::string;
  }
  path_on_agent_->assign(value);
}
inline void DxRemoteFileTransfer::set_path_on_agent(const char* value, size_t size) {
  set_has_path_on_agent();
  if (path_on_agent_ == &::google::protobuf::internal::kEmptyString) {
    path_on_agent_ = new ::std::string;
  }
  path_on_agent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteFileTransfer::mutable_path_on_agent() {
  set_has_path_on_agent();
  if (path_on_agent_ == &::google::protobuf::internal::kEmptyString) {
    path_on_agent_ = new ::std::string;
  }
  return path_on_agent_;
}
inline ::std::string* DxRemoteFileTransfer::release_path_on_agent() {
  clear_has_path_on_agent();
  if (path_on_agent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_on_agent_;
    path_on_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes data = 5;
inline bool DxRemoteFileTransfer::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DxRemoteFileTransfer::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DxRemoteFileTransfer::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DxRemoteFileTransfer::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& DxRemoteFileTransfer::data() const {
  return *data_;
}
inline void DxRemoteFileTransfer::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DxRemoteFileTransfer::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void DxRemoteFileTransfer::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteFileTransfer::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* DxRemoteFileTransfer::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 file_size = 6;
inline bool DxRemoteFileTransfer::has_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DxRemoteFileTransfer::set_has_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DxRemoteFileTransfer::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DxRemoteFileTransfer::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
inline ::google::protobuf::uint64 DxRemoteFileTransfer::file_size() const {
  return file_size_;
}
inline void DxRemoteFileTransfer::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
}

// -------------------------------------------------------------------

// DxRemoteTSTest_TSOpenParms

// optional uint64 user_id = 1;
inline bool DxRemoteTSTest_TSOpenParms::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteTSTest_TSOpenParms::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 DxRemoteTSTest_TSOpenParms::user_id() const {
  return user_id_;
}
inline void DxRemoteTSTest_TSOpenParms::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint64 device_id = 2;
inline bool DxRemoteTSTest_TSOpenParms::has_device_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteTSTest_TSOpenParms::set_has_device_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_has_device_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_device_id() {
  device_id_ = GOOGLE_ULONGLONG(0);
  clear_has_device_id();
}
inline ::google::protobuf::uint64 DxRemoteTSTest_TSOpenParms::device_id() const {
  return device_id_;
}
inline void DxRemoteTSTest_TSOpenParms::set_device_id(::google::protobuf::uint64 value) {
  set_has_device_id();
  device_id_ = value;
}

// optional string service_name = 3;
inline bool DxRemoteTSTest_TSOpenParms::has_service_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteTSTest_TSOpenParms::set_has_service_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& DxRemoteTSTest_TSOpenParms::service_name() const {
  return *service_name_;
}
inline void DxRemoteTSTest_TSOpenParms::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void DxRemoteTSTest_TSOpenParms::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void DxRemoteTSTest_TSOpenParms::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteTSTest_TSOpenParms::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* DxRemoteTSTest_TSOpenParms::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string credentials = 4;
inline bool DxRemoteTSTest_TSOpenParms::has_credentials() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DxRemoteTSTest_TSOpenParms::set_has_credentials() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_has_credentials() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_credentials() {
  if (credentials_ != &::google::protobuf::internal::kEmptyString) {
    credentials_->clear();
  }
  clear_has_credentials();
}
inline const ::std::string& DxRemoteTSTest_TSOpenParms::credentials() const {
  return *credentials_;
}
inline void DxRemoteTSTest_TSOpenParms::set_credentials(const ::std::string& value) {
  set_has_credentials();
  if (credentials_ == &::google::protobuf::internal::kEmptyString) {
    credentials_ = new ::std::string;
  }
  credentials_->assign(value);
}
inline void DxRemoteTSTest_TSOpenParms::set_credentials(const char* value) {
  set_has_credentials();
  if (credentials_ == &::google::protobuf::internal::kEmptyString) {
    credentials_ = new ::std::string;
  }
  credentials_->assign(value);
}
inline void DxRemoteTSTest_TSOpenParms::set_credentials(const char* value, size_t size) {
  set_has_credentials();
  if (credentials_ == &::google::protobuf::internal::kEmptyString) {
    credentials_ = new ::std::string;
  }
  credentials_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteTSTest_TSOpenParms::mutable_credentials() {
  set_has_credentials();
  if (credentials_ == &::google::protobuf::internal::kEmptyString) {
    credentials_ = new ::std::string;
  }
  return credentials_;
}
inline ::std::string* DxRemoteTSTest_TSOpenParms::release_credentials() {
  clear_has_credentials();
  if (credentials_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = credentials_;
    credentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 flags = 5;
inline bool DxRemoteTSTest_TSOpenParms::has_flags() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DxRemoteTSTest_TSOpenParms::set_has_flags() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_has_flags() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_flags() {
  flags_ = GOOGLE_ULONGLONG(0);
  clear_has_flags();
}
inline ::google::protobuf::uint64 DxRemoteTSTest_TSOpenParms::flags() const {
  return flags_;
}
inline void DxRemoteTSTest_TSOpenParms::set_flags(::google::protobuf::uint64 value) {
  set_has_flags();
  flags_ = value;
}

// optional uint64 timeout = 6;
inline bool DxRemoteTSTest_TSOpenParms::has_timeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DxRemoteTSTest_TSOpenParms::set_has_timeout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DxRemoteTSTest_TSOpenParms::clear_timeout() {
  timeout_ = GOOGLE_ULONGLONG(0);
  clear_has_timeout();
}
inline ::google::protobuf::uint64 DxRemoteTSTest_TSOpenParms::timeout() const {
  return timeout_;
}
inline void DxRemoteTSTest_TSOpenParms::set_timeout(::google::protobuf::uint64 value) {
  set_has_timeout();
  timeout_ = value;
}

// -------------------------------------------------------------------

// DxRemoteTSTest

// optional int32 return_value = 1;
inline bool DxRemoteTSTest::has_return_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DxRemoteTSTest::set_has_return_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DxRemoteTSTest::clear_has_return_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DxRemoteTSTest::clear_return_value() {
  return_value_ = 0;
  clear_has_return_value();
}
inline ::google::protobuf::int32 DxRemoteTSTest::return_value() const {
  return return_value_;
}
inline void DxRemoteTSTest::set_return_value(::google::protobuf::int32 value) {
  set_has_return_value();
  return_value_ = value;
}

// optional string error_msg = 2;
inline bool DxRemoteTSTest::has_error_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DxRemoteTSTest::set_has_error_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DxRemoteTSTest::clear_has_error_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DxRemoteTSTest::clear_error_msg() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    error_msg_->clear();
  }
  clear_has_error_msg();
}
inline const ::std::string& DxRemoteTSTest::error_msg() const {
  return *error_msg_;
}
inline void DxRemoteTSTest::set_error_msg(const ::std::string& value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void DxRemoteTSTest::set_error_msg(const char* value) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(value);
}
inline void DxRemoteTSTest::set_error_msg(const char* value, size_t size) {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  error_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DxRemoteTSTest::mutable_error_msg() {
  set_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    error_msg_ = new ::std::string;
  }
  return error_msg_;
}
inline ::std::string* DxRemoteTSTest::release_error_msg() {
  clear_has_error_msg();
  if (error_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_msg_;
    error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .igware.dxshell.DxRemoteTSTest.TSOpenParms ts_open_parms = 3;
inline bool DxRemoteTSTest::has_ts_open_parms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DxRemoteTSTest::set_has_ts_open_parms() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DxRemoteTSTest::clear_has_ts_open_parms() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DxRemoteTSTest::clear_ts_open_parms() {
  if (ts_open_parms_ != NULL) ts_open_parms_->::igware::dxshell::DxRemoteTSTest_TSOpenParms::Clear();
  clear_has_ts_open_parms();
}
inline const ::igware::dxshell::DxRemoteTSTest_TSOpenParms& DxRemoteTSTest::ts_open_parms() const {
  return ts_open_parms_ != NULL ? *ts_open_parms_ : *default_instance_->ts_open_parms_;
}
inline ::igware::dxshell::DxRemoteTSTest_TSOpenParms* DxRemoteTSTest::mutable_ts_open_parms() {
  set_has_ts_open_parms();
  if (ts_open_parms_ == NULL) ts_open_parms_ = new ::igware::dxshell::DxRemoteTSTest_TSOpenParms;
  return ts_open_parms_;
}
inline ::igware::dxshell::DxRemoteTSTest_TSOpenParms* DxRemoteTSTest::release_ts_open_parms() {
  clear_has_ts_open_parms();
  ::igware::dxshell::DxRemoteTSTest_TSOpenParms* temp = ts_open_parms_;
  ts_open_parms_ = NULL;
  return temp;
}

// optional int32 test_id = 4;
inline bool DxRemoteTSTest::has_test_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DxRemoteTSTest::set_has_test_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DxRemoteTSTest::clear_has_test_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DxRemoteTSTest::clear_test_id() {
  test_id_ = 0;
  clear_has_test_id();
}
inline ::google::protobuf::int32 DxRemoteTSTest::test_id() const {
  return test_id_;
}
inline void DxRemoteTSTest::set_test_id(::google::protobuf::int32 value) {
  set_has_test_id();
  test_id_ = value;
}

// optional int32 log_enable_level = 5;
inline bool DxRemoteTSTest::has_log_enable_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DxRemoteTSTest::set_has_log_enable_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DxRemoteTSTest::clear_has_log_enable_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DxRemoteTSTest::clear_log_enable_level() {
  log_enable_level_ = 0;
  clear_has_log_enable_level();
}
inline ::google::protobuf::int32 DxRemoteTSTest::log_enable_level() const {
  return log_enable_level_;
}
inline void DxRemoteTSTest::set_log_enable_level(::google::protobuf::int32 value) {
  set_has_log_enable_level();
  log_enable_level_ = value;
}

// optional uint32 xfer_cnt = 6;
inline bool DxRemoteTSTest::has_xfer_cnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DxRemoteTSTest::set_has_xfer_cnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DxRemoteTSTest::clear_has_xfer_cnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DxRemoteTSTest::clear_xfer_cnt() {
  xfer_cnt_ = 0u;
  clear_has_xfer_cnt();
}
inline ::google::protobuf::uint32 DxRemoteTSTest::xfer_cnt() const {
  return xfer_cnt_;
}
inline void DxRemoteTSTest::set_xfer_cnt(::google::protobuf::uint32 value) {
  set_has_xfer_cnt();
  xfer_cnt_ = value;
}

// optional uint32 xfer_size = 7;
inline bool DxRemoteTSTest::has_xfer_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DxRemoteTSTest::set_has_xfer_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DxRemoteTSTest::clear_has_xfer_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DxRemoteTSTest::clear_xfer_size() {
  xfer_size_ = 0u;
  clear_has_xfer_size();
}
inline ::google::protobuf::uint32 DxRemoteTSTest::xfer_size() const {
  return xfer_size_;
}
inline void DxRemoteTSTest::set_xfer_size(::google::protobuf::uint32 value) {
  set_has_xfer_size();
  xfer_size_ = value;
}

// optional uint32 num_test_iterations = 8;
inline bool DxRemoteTSTest::has_num_test_iterations() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DxRemoteTSTest::set_has_num_test_iterations() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DxRemoteTSTest::clear_has_num_test_iterations() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DxRemoteTSTest::clear_num_test_iterations() {
  num_test_iterations_ = 0u;
  clear_has_num_test_iterations();
}
inline ::google::protobuf::uint32 DxRemoteTSTest::num_test_iterations() const {
  return num_test_iterations_;
}
inline void DxRemoteTSTest::set_num_test_iterations(::google::protobuf::uint32 value) {
  set_has_num_test_iterations();
  num_test_iterations_ = value;
}

// optional uint32 num_clients = 9;
inline bool DxRemoteTSTest::has_num_clients() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DxRemoteTSTest::set_has_num_clients() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DxRemoteTSTest::clear_has_num_clients() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DxRemoteTSTest::clear_num_clients() {
  num_clients_ = 0u;
  clear_has_num_clients();
}
inline ::google::protobuf::uint32 DxRemoteTSTest::num_clients() const {
  return num_clients_;
}
inline void DxRemoteTSTest::set_num_clients(::google::protobuf::uint32 value) {
  set_has_num_clients();
  num_clients_ = value;
}

// optional int32 client_write_delay = 10;
inline bool DxRemoteTSTest::has_client_write_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DxRemoteTSTest::set_has_client_write_delay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DxRemoteTSTest::clear_has_client_write_delay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DxRemoteTSTest::clear_client_write_delay() {
  client_write_delay_ = 0;
  clear_has_client_write_delay();
}
inline ::google::protobuf::int32 DxRemoteTSTest::client_write_delay() const {
  return client_write_delay_;
}
inline void DxRemoteTSTest::set_client_write_delay(::google::protobuf::int32 value) {
  set_has_client_write_delay();
  client_write_delay_ = value;
}

// optional int32 server_read_delay = 11;
inline bool DxRemoteTSTest::has_server_read_delay() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DxRemoteTSTest::set_has_server_read_delay() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DxRemoteTSTest::clear_has_server_read_delay() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DxRemoteTSTest::clear_server_read_delay() {
  server_read_delay_ = 0;
  clear_has_server_read_delay();
}
inline ::google::protobuf::int32 DxRemoteTSTest::server_read_delay() const {
  return server_read_delay_;
}
inline void DxRemoteTSTest::set_server_read_delay(::google::protobuf::int32 value) {
  set_has_server_read_delay();
  server_read_delay_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dxshell
}  // namespace igware

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::igware::dxshell::DxRemoteMessage_Command>() {
  return ::igware::dxshell::DxRemoteMessage_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::igware::dxshell::DxRemoteMessage_ArgumentName>() {
  return ::igware::dxshell::DxRemoteMessage_ArgumentName_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t>() {
  return ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::igware::dxshell::DxRemoteMSA_Function>() {
  return ::igware::dxshell::DxRemoteMSA_Function_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< igware::dxshell::ErrorCode>() {
  return igware::dxshell::ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< igware::dxshell::RequestType>() {
  return igware::dxshell::RequestType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< igware::dxshell::HttpAgentCommandType>() {
  return igware::dxshell::HttpAgentCommandType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< igware::dxshell::DxRemoteAgentPacket>() {
  return igware::dxshell::DxRemoteAgentPacket_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< igware::dxshell::DxRemoteAgentFileTransfer_Type>() {
  return igware::dxshell::DxRemoteAgentFileTransfer_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dx_5fremote_5fagent_2eproto__INCLUDED
