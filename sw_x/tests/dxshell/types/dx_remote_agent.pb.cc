// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dx_remote_agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace igware {
namespace dxshell {

namespace {

const ::google::protobuf::Descriptor* HttpGetInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpGetInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpGetOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpGetOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDeviceOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDeviceOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemoteArgument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMessage_DxRemoteArgument_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_VPLFS_dir_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMessage_DxRemote_VPLFS_dir_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_VPLFS_dirent_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMessage_DxRemote_VPLFS_dirent_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_VPLFS_stat_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMessage_DxRemote_VPLFS_stat_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_LibraryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMessage_DxRemote_LibraryInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DxRemoteMessage_Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DxRemoteMessage_ArgumentName_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteMSA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteMSA_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DxRemoteMSA_Function_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteFileTransfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteFileTransfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteTSTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteTSTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DxRemoteTSTest_TSOpenParms_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DxRemoteTSTest_TSOpenParms_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HttpAgentCommandType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DxRemoteAgentPacket_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DxRemoteAgentFileTransfer_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dx_5fremote_5fagent_2eproto() {
  protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dx_remote_agent.proto");
  GOOGLE_CHECK(file != NULL);
  HttpGetInput_descriptor_ = file->message_type(0);
  static const int HttpGetInput_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, command_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, max_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, maxbytes_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, use_media_player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, headers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, file_save_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, file_),
  };
  HttpGetInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpGetInput_descriptor_,
      HttpGetInput::default_instance_,
      HttpGetInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpGetInput));
  HttpGetOutput_descriptor_ = file->message_type(1);
  static const int HttpGetOutput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, total_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, httpagent_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, httpagent_statuscode_),
  };
  HttpGetOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpGetOutput_descriptor_,
      HttpGetOutput::default_instance_,
      HttpGetOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpGetOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpGetOutput));
  QueryDeviceOutput_descriptor_ = file->message_type(2);
  static const int QueryDeviceOutput_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, device_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, is_acer_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, device_has_camera_),
  };
  QueryDeviceOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDeviceOutput_descriptor_,
      QueryDeviceOutput::default_instance_,
      QueryDeviceOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDeviceOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDeviceOutput));
  DxRemoteMessage_descriptor_ = file->message_type(3);
  static const int DxRemoteMessage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, argument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, dir_folder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, folderdirent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, file_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, vpl_return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, create_dir_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, rename_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, rename_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, lib_info_),
  };
  DxRemoteMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMessage_descriptor_,
      DxRemoteMessage::default_instance_,
      DxRemoteMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMessage));
  DxRemoteMessage_DxRemoteArgument_descriptor_ = DxRemoteMessage_descriptor_->nested_type(0);
  static const int DxRemoteMessage_DxRemoteArgument_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemoteArgument, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemoteArgument, value_),
  };
  DxRemoteMessage_DxRemoteArgument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMessage_DxRemoteArgument_descriptor_,
      DxRemoteMessage_DxRemoteArgument::default_instance_,
      DxRemoteMessage_DxRemoteArgument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemoteArgument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemoteArgument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMessage_DxRemoteArgument));
  DxRemoteMessage_DxRemote_VPLFS_dir_t_descriptor_ = DxRemoteMessage_descriptor_->nested_type(1);
  static const int DxRemoteMessage_DxRemote_VPLFS_dir_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dir_t, dir_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dir_t, alias_),
  };
  DxRemoteMessage_DxRemote_VPLFS_dir_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMessage_DxRemote_VPLFS_dir_t_descriptor_,
      DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance_,
      DxRemoteMessage_DxRemote_VPLFS_dir_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dir_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dir_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMessage_DxRemote_VPLFS_dir_t));
  DxRemoteMessage_DxRemote_VPLFS_dirent_t_descriptor_ = DxRemoteMessage_descriptor_->nested_type(2);
  static const int DxRemoteMessage_DxRemote_VPLFS_dirent_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dirent_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dirent_t, filename_),
  };
  DxRemoteMessage_DxRemote_VPLFS_dirent_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMessage_DxRemote_VPLFS_dirent_t_descriptor_,
      DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance_,
      DxRemoteMessage_DxRemote_VPLFS_dirent_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dirent_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_dirent_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMessage_DxRemote_VPLFS_dirent_t));
  DxRemoteMessage_DxRemote_VPLFS_stat_t_descriptor_ = DxRemoteMessage_descriptor_->nested_type(3);
  static const int DxRemoteMessage_DxRemote_VPLFS_stat_t_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, ishidden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, issymlink_),
  };
  DxRemoteMessage_DxRemote_VPLFS_stat_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMessage_DxRemote_VPLFS_stat_t_descriptor_,
      DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance_,
      DxRemoteMessage_DxRemote_VPLFS_stat_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_VPLFS_stat_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMessage_DxRemote_VPLFS_stat_t));
  DxRemoteMessage_DxRemote_LibraryInfo_descriptor_ = DxRemoteMessage_descriptor_->nested_type(4);
  static const int DxRemoteMessage_DxRemote_LibraryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_LibraryInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_LibraryInfo, virt_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_LibraryInfo, real_path_),
  };
  DxRemoteMessage_DxRemote_LibraryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMessage_DxRemote_LibraryInfo_descriptor_,
      DxRemoteMessage_DxRemote_LibraryInfo::default_instance_,
      DxRemoteMessage_DxRemote_LibraryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_LibraryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMessage_DxRemote_LibraryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMessage_DxRemote_LibraryInfo));
  DxRemoteMessage_Command_descriptor_ = DxRemoteMessage_descriptor_->enum_type(0);
  DxRemoteMessage_ArgumentName_descriptor_ = DxRemoteMessage_descriptor_->enum_type(1);
  DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor_ = DxRemoteMessage_descriptor_->enum_type(2);
  DxRemoteMSA_descriptor_ = file->message_type(4);
  static const int DxRemoteMSA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMSA, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMSA, func_return_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMSA, msa_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMSA, msa_output_),
  };
  DxRemoteMSA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteMSA_descriptor_,
      DxRemoteMSA::default_instance_,
      DxRemoteMSA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMSA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteMSA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteMSA));
  DxRemoteMSA_Function_descriptor_ = DxRemoteMSA_descriptor_->enum_type(0);
  DxRemoteFileTransfer_descriptor_ = file->message_type(5);
  static const int DxRemoteFileTransfer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, vpl_return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, raw_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, path_on_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, file_size_),
  };
  DxRemoteFileTransfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteFileTransfer_descriptor_,
      DxRemoteFileTransfer::default_instance_,
      DxRemoteFileTransfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteFileTransfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteFileTransfer));
  DxRemoteTSTest_descriptor_ = file->message_type(6);
  static const int DxRemoteTSTest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, return_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, error_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, ts_open_parms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, test_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, log_enable_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, xfer_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, xfer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, num_test_iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, num_clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, client_write_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, server_read_delay_),
  };
  DxRemoteTSTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteTSTest_descriptor_,
      DxRemoteTSTest::default_instance_,
      DxRemoteTSTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteTSTest));
  DxRemoteTSTest_TSOpenParms_descriptor_ = DxRemoteTSTest_descriptor_->nested_type(0);
  static const int DxRemoteTSTest_TSOpenParms_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, device_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, credentials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, timeout_),
  };
  DxRemoteTSTest_TSOpenParms_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DxRemoteTSTest_TSOpenParms_descriptor_,
      DxRemoteTSTest_TSOpenParms::default_instance_,
      DxRemoteTSTest_TSOpenParms_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DxRemoteTSTest_TSOpenParms, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DxRemoteTSTest_TSOpenParms));
  ErrorCode_descriptor_ = file->enum_type(0);
  RequestType_descriptor_ = file->enum_type(1);
  HttpAgentCommandType_descriptor_ = file->enum_type(2);
  DxRemoteAgentPacket_descriptor_ = file->enum_type(3);
  DxRemoteAgentFileTransfer_Type_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dx_5fremote_5fagent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpGetInput_descriptor_, &HttpGetInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpGetOutput_descriptor_, &HttpGetOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDeviceOutput_descriptor_, &QueryDeviceOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMessage_descriptor_, &DxRemoteMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMessage_DxRemoteArgument_descriptor_, &DxRemoteMessage_DxRemoteArgument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMessage_DxRemote_VPLFS_dir_t_descriptor_, &DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMessage_DxRemote_VPLFS_dirent_t_descriptor_, &DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMessage_DxRemote_VPLFS_stat_t_descriptor_, &DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMessage_DxRemote_LibraryInfo_descriptor_, &DxRemoteMessage_DxRemote_LibraryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteMSA_descriptor_, &DxRemoteMSA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteFileTransfer_descriptor_, &DxRemoteFileTransfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteTSTest_descriptor_, &DxRemoteTSTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DxRemoteTSTest_TSOpenParms_descriptor_, &DxRemoteTSTest_TSOpenParms::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto() {
  delete HttpGetInput::default_instance_;
  delete HttpGetInput_reflection_;
  delete HttpGetOutput::default_instance_;
  delete HttpGetOutput_reflection_;
  delete QueryDeviceOutput::default_instance_;
  delete QueryDeviceOutput_reflection_;
  delete DxRemoteMessage::default_instance_;
  delete DxRemoteMessage_reflection_;
  delete DxRemoteMessage_DxRemoteArgument::default_instance_;
  delete DxRemoteMessage_DxRemoteArgument_reflection_;
  delete DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance_;
  delete DxRemoteMessage_DxRemote_VPLFS_dir_t_reflection_;
  delete DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance_;
  delete DxRemoteMessage_DxRemote_VPLFS_dirent_t_reflection_;
  delete DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance_;
  delete DxRemoteMessage_DxRemote_VPLFS_stat_t_reflection_;
  delete DxRemoteMessage_DxRemote_LibraryInfo::default_instance_;
  delete DxRemoteMessage_DxRemote_LibraryInfo_reflection_;
  delete DxRemoteMSA::default_instance_;
  delete DxRemoteMSA_reflection_;
  delete DxRemoteFileTransfer::default_instance_;
  delete DxRemoteFileTransfer_reflection_;
  delete DxRemoteTSTest::default_instance_;
  delete DxRemoteTSTest_reflection_;
  delete DxRemoteTSTest_TSOpenParms::default_instance_;
  delete DxRemoteTSTest_TSOpenParms_reflection_;
}

void protobuf_AddDesc_dx_5fremote_5fagent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025dx_remote_agent.proto\022\016igware.dxshell\""
    "\370\001\n\014HttpGetInput\022:\n\014command_type\030\001 \002(\0162$"
    ".igware.dxshell.HttpAgentCommandType\022\013\n\003"
    "url\030\002 \002(\t\022\021\n\tmax_bytes\030\003 \001(\r\022\031\n\016maxbytes"
    "_delay\030\004 \001(\004:\0010\022\037\n\020use_media_player\030\005 \001("
    "\010:\005false\022\017\n\007headers\030\006 \003(\t\022\034\n\022file_save_r"
    "esponse\030\007 \001(\t:\000\022\021\n\007payload\030\010 \001(\014:\000\022\016\n\004fi"
    "le\030\t \001(\t:\000\"\227\001\n\rHttpGetOutput\022\022\n\nerror_co"
    "de\030\001 \002(\005\022\021\n\terror_msg\030\002 \001(\t\022\023\n\013total_byt"
    "es\030\003 \002(\004\022\020\n\010response\030\004 \001(\014\022\032\n\022httpagent_"
    "response\030\005 \001(\005\022\034\n\024httpagent_statuscode\030\006"
    " \001(\005\"\223\001\n\021QueryDeviceOutput\022\023\n\013device_nam"
    "e\030\001 \002(\t\022\024\n\014device_class\030\002 \002(\t\022\022\n\nos_vers"
    "ion\030\003 \002(\t\022\035\n\016is_acer_device\030\004 \002(\010:\005false"
    "\022 \n\021device_has_camera\030\005 \002(\010:\005false\"\355\020\n\017D"
    "xRemoteMessage\0228\n\007command\030\001 \002(\0162\'.igware"
    ".dxshell.DxRemoteMessage.Command\022B\n\010argu"
    "ment\030\002 \003(\01320.igware.dxshell.DxRemoteMess"
    "age.DxRemoteArgument\022H\n\ndir_folder\030\003 \001(\013"
    "24.igware.dxshell.DxRemoteMessage.DxRemo"
    "te_VPLFS_dir_t\022M\n\014folderDirent\030\004 \001(\01327.i"
    "gware.dxshell.DxRemoteMessage.DxRemote_V"
    "PLFS_dirent_t\022H\n\tfile_stat\030\005 \001(\01325.igwar"
    "e.dxshell.DxRemoteMessage.DxRemote_VPLFS"
    "_stat_t\022\027\n\017vpl_return_code\030\006 \001(\005\022\027\n\017crea"
    "te_dir_mode\030\007 \001(\005\022\025\n\rrename_source\030\010 \001(\t"
    "\022\032\n\022rename_destination\030\t \001(\t\022F\n\010lib_info"
    "\030\n \003(\01324.igware.dxshell.DxRemoteMessage."
    "DxRemote_LibraryInfo\032]\n\020DxRemoteArgument"
    "\022:\n\004name\030\001 \002(\0162,.igware.dxshell.DxRemote"
    "Message.ArgumentName\022\r\n\005value\030\002 \001(\t\0327\n\024D"
    "xRemote_VPLFS_dir_t\022\020\n\010dir_path\030\001 \002(\t\022\r\n"
    "\005alias\030\002 \002(\t\032u\n\027DxRemote_VPLFS_dirent_t\022"
    "H\n\004type\030\001 \002(\0162:.igware.dxshell.DxRemoteM"
    "essage.DxRemote_VPLFS_file_type_t\022\020\n\010fil"
    "ename\030\002 \002(\t\032\301\001\n\025DxRemote_VPLFS_stat_t\022\014\n"
    "\004size\030\001 \002(\004\022H\n\004type\030\002 \002(\0162:.igware.dxshe"
    "ll.DxRemoteMessage.DxRemote_VPLFS_file_t"
    "ype_t\022\r\n\005atime\030\003 \002(\003\022\r\n\005mtime\030\004 \002(\003\022\r\n\005c"
    "time\030\005 \002(\003\022\020\n\010isHidden\030\006 \002(\005\022\021\n\tisSymLin"
    "k\030\007 \002(\005\032J\n\024DxRemote_LibraryInfo\022\014\n\004type\030"
    "\001 \002(\t\022\021\n\tvirt_path\030\002 \002(\t\022\021\n\treal_path\030\003 "
    "\002(\t\"\263\006\n\007Command\022\020\n\014COMMAND_NONE\020\000\022\022\n\016LAU"
    "NCH_PROCESS\020\001\022\020\n\014KILL_PROCESS\020\002\022\034\n\030GET_C"
    "ONNECTED_ANDROID_IP\020\003\022*\n&LAUNCH_CONNECTE"
    "D_ANDROID_DXREMOTEAGENT\020\004\022\014\n\010CLEAN_CC\020\005\022"
    "\021\n\rVPLFS_OPENDIR\020\006\022\021\n\rVPLFS_READDIR\020\007\022\022\n"
    "\016VPLFS_CLOSEDIR\020\010\022\016\n\nVPLFS_STAT\020\t\022\023\n\017UTI"
    "L_RM_DASH_RF\020\n\022\021\n\rVPLDIR_CREATE\020\013\022\022\n\016VPL"
    "FILE_RENAME\020\014\022\014\n\010COPYFILE\020\r\022\022\n\016VPLFILE_D"
    "ELETE\020\016\022\023\n\017GET_UPLOAD_PATH\020\017\022\024\n\020SET_CLEA"
    "RFI_MODE\020\020\022(\n$STOP_CONNECTED_ANDROID_DXR"
    "EMOTEAGENT\020\021\022\'\n#LAUNCH_CONNECTED_ANDROID"
    "_CC_SERVICE\020\022\022%\n!STOP_CONNECTED_ANDROID_"
    "CC_SERVICE\020\023\022$\n PUSH_LOCAL_CONF_TO_SHARE"
    "D_OBJECT\020\024\022$\n PULL_SHARED_CONF_TO_LOCAL_"
    "OBJECT\020\025\022!\n\035GET_CONNECTED_ANDROID_CCD_LO"
    "G\020\026\022#\n\037CLEAN_CONNECTED_ANDROID_CCD_LOG\020\027"
    "\022\025\n\021GET_CCD_ROOT_PATH\020\030\022\022\n\016GET_ALIAS_PAT"
    "H\020\031\022\020\n\014READ_LIBRARY\020\032\022&\n\"CHECK_CONNECTED"
    "_ANDROID_NET_STATUS\020\033\022+\n\'RESTART_CONNECT"
    "ED_ANDROID_DXREMOTEAGENT\020\034\022\022\n\016SET_PERMIS"
    "SION\020\035\022\021\n\rVPLFILE_TOUCH\020\036\"\177\n\014ArgumentNam"
    "e\022\023\n\017DXARGUMENT_NONE\020\000\022\026\n\022DXARGUMENTFILE"
    "NAME\020\001\022\030\n\024DXARGUMENTEXECUTEARG\020\002\022\021\n\rDXAR"
    "GUMENT_IP\020\003\022\025\n\021DXARGUMENTDIRNAME\020\004\"v\n\032Dx"
    "Remote_VPLFS_file_type_t\022\034\n\030DxRemote_VPL"
    "FS_TYPE_FILE\020\000\022\033\n\027DxRemote_VPLFS_TYPE_DI"
    "R\020\001\022\035\n\031DxRemote_VPLFS_TYPE_OTHER\020\002\"\272\003\n\013D"
    "xRemoteMSA\0222\n\004func\030\001 \002(\0162$.igware.dxshel"
    "l.DxRemoteMSA.Function\022\023\n\013func_return\030\002 "
    "\001(\005\022\021\n\tmsa_input\030\003 \001(\014\022\022\n\nmsa_output\030\004 \001"
    "(\014\"\272\002\n\010Function\022\023\n\017MSABeginCatalog\020\001\022\024\n\020"
    "MSACommitCatalog\020\002\022\021\n\rMSAEndCatalog\020\003\022\037\n"
    "\033MSABeginMetadataTransaction\020\004\022\025\n\021MSAUpd"
    "ateMetadata\020\005\022\025\n\021MSADeleteMetadata\020\006\022 \n\034"
    "MSACommitMetadataTransaction\020\007\022\033\n\027MSAGet"
    "MetadataSyncState\020\010\022\027\n\023MSADeleteCollecti"
    "on\020\t\022\024\n\020MSADeleteCatalog\020\n\022\026\n\022MSAListCol"
    "lections\020\013\022\033\n\027MSAGetCollectionDetails\020\014\""
    "\270\001\n\024DxRemoteFileTransfer\022<\n\004type\030\001 \002(\0162."
    ".igware.dxshell.DxRemoteAgentFileTransfe"
    "r_Type\022\027\n\017vpl_return_code\030\002 \002(\005\022\021\n\traw_e"
    "rror\030\003 \001(\005\022\025\n\rpath_on_agent\030\004 \001(\t\022\014\n\004dat"
    "a\030\005 \001(\014\022\021\n\tfile_size\030\006 \001(\004\"\263\003\n\016DxRemoteT"
    "STest\022\024\n\014return_value\030\001 \001(\005\022\021\n\terror_msg"
    "\030\002 \001(\t\022A\n\rts_open_parms\030\003 \001(\0132*.igware.d"
    "xshell.DxRemoteTSTest.TSOpenParms\022\017\n\007tes"
    "t_id\030\004 \001(\005\022\030\n\020log_enable_level\030\005 \001(\005\022\020\n\010"
    "xfer_cnt\030\006 \001(\r\022\021\n\txfer_size\030\007 \001(\r\022\033\n\023num"
    "_test_iterations\030\010 \001(\r\022\023\n\013num_clients\030\t "
    "\001(\r\022\032\n\022client_write_delay\030\n \001(\005\022\031\n\021serve"
    "r_read_delay\030\013 \001(\005\032|\n\013TSOpenParms\022\017\n\007use"
    "r_id\030\001 \001(\004\022\021\n\tdevice_id\030\002 \001(\004\022\024\n\014service"
    "_name\030\003 \001(\t\022\023\n\013credentials\030\004 \001(\t\022\r\n\005flag"
    "s\030\005 \001(\004\022\017\n\007timeout\030\006 \001(\004*\357\001\n\tErrorCode\022\016"
    "\n\nDX_SUCCESS\020\000\022(\n\033DX_ERR_UNKNOWN_REQUEST"
    "_TYPE\020\261\203\377\377\377\377\377\377\377\001\022$\n\027DX_ERR_UNEXPECTED_ER"
    "ROR\020\260\203\377\377\377\377\377\377\377\001\022\033\n\016DX_ERR_BAD_URL\020\257\203\377\377\377\377\377"
    "\377\377\001\022\037\n\022DX_ERR_BAD_REQUEST\020\256\203\377\377\377\377\377\377\377\001\022\034\n\017"
    "DX_ERR_IO_ERROR\020\255\203\377\377\377\377\377\377\377\001\022&\n\031DX_ERR_IO_"
    "HTTPAGENT_ERROR\020\254\203\377\377\377\377\377\377\377\001*\344\001\n\013RequestTy"
    "pe\022\027\n\023DX_REQUEST_PROTORPC\020\001\022\027\n\023DX_REQUES"
    "T_HTTP_GET\020\002\022\033\n\027DX_REQUEST_QUERY_DEVICE\020"
    "\003\022 \n\034DX_REQUEST_DXREMOTE_PROTOCOL\020\004\022\033\n\027D"
    "X_REQUEST_DXREMOTE_MSA\020\005\022&\n\"DX_REQUEST_D"
    "XREMOTE_TRANSFER_FILES\020\006\022\037\n\033DX_REQUEST_D"
    "XREMOTE_TS_TEST\020\007*\346\001\n\024HttpAgentCommandTy"
    "pe\022\017\n\013DX_HTTP_GET\020\000\022\030\n\024DX_HTTP_GET_EXTEN"
    "DED\020\001\022\035\n\031DX_HTTP_GET_RESPONSE_BACK\020\002\022\017\n\013"
    "DX_HTTP_PUT\020\003\022\020\n\014DX_HTTP_POST\020\004\022\022\n\016DX_HT"
    "TP_DELETE\020\005\022\020\n\014DX_HTTP_HEAD\020\006\022\023\n\017DX_HTTP"
    "_OPTIONS\020\007\022\021\n\rDX_HTTP_TRACE\020\010\022\023\n\017DX_HTTP"
    "_CONNECT\020\t*n\n\023DxRemoteAgentPacket\022\032\n\026DX_"
    "REMOTE_REQUEST_SIZE\020\001\022\"\n\035DX_REMOTE_FILE_"
    "TRANS_PKT_SIZE\020\200\020\022\027\n\022DX_REMOTE_PKT_SIZE\020"
    "\200 *Q\n\036DxRemoteAgentFileTransfer_Type\022\027\n\023"
    "DX_REMOTE_PUSH_FILE\020\000\022\026\n\022DX_REMOTE_GET_F"
    "ILE\020\001B&\n\025com.igware.dxshell.pbB\rDxRemote"
    "Agent", 4765);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dx_remote_agent.proto", &protobuf_RegisterTypes);
  HttpGetInput::default_instance_ = new HttpGetInput();
  HttpGetOutput::default_instance_ = new HttpGetOutput();
  QueryDeviceOutput::default_instance_ = new QueryDeviceOutput();
  DxRemoteMessage::default_instance_ = new DxRemoteMessage();
  DxRemoteMessage_DxRemoteArgument::default_instance_ = new DxRemoteMessage_DxRemoteArgument();
  DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance_ = new DxRemoteMessage_DxRemote_VPLFS_dir_t();
  DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance_ = new DxRemoteMessage_DxRemote_VPLFS_dirent_t();
  DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance_ = new DxRemoteMessage_DxRemote_VPLFS_stat_t();
  DxRemoteMessage_DxRemote_LibraryInfo::default_instance_ = new DxRemoteMessage_DxRemote_LibraryInfo();
  DxRemoteMSA::default_instance_ = new DxRemoteMSA();
  DxRemoteFileTransfer::default_instance_ = new DxRemoteFileTransfer();
  DxRemoteTSTest::default_instance_ = new DxRemoteTSTest();
  DxRemoteTSTest_TSOpenParms::default_instance_ = new DxRemoteTSTest_TSOpenParms();
  HttpGetInput::default_instance_->InitAsDefaultInstance();
  HttpGetOutput::default_instance_->InitAsDefaultInstance();
  QueryDeviceOutput::default_instance_->InitAsDefaultInstance();
  DxRemoteMessage::default_instance_->InitAsDefaultInstance();
  DxRemoteMessage_DxRemoteArgument::default_instance_->InitAsDefaultInstance();
  DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance_->InitAsDefaultInstance();
  DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance_->InitAsDefaultInstance();
  DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance_->InitAsDefaultInstance();
  DxRemoteMessage_DxRemote_LibraryInfo::default_instance_->InitAsDefaultInstance();
  DxRemoteMSA::default_instance_->InitAsDefaultInstance();
  DxRemoteFileTransfer::default_instance_->InitAsDefaultInstance();
  DxRemoteTSTest::default_instance_->InitAsDefaultInstance();
  DxRemoteTSTest_TSOpenParms::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dx_5fremote_5fagent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dx_5fremote_5fagent_2eproto {
  StaticDescriptorInitializer_dx_5fremote_5fagent_2eproto() {
    protobuf_AddDesc_dx_5fremote_5fagent_2eproto();
  }
} static_descriptor_initializer_dx_5fremote_5fagent_2eproto_;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case -15956:
    case -15955:
    case -15954:
    case -15953:
    case -15952:
    case -15951:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestType_descriptor_;
}
bool RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HttpAgentCommandType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpAgentCommandType_descriptor_;
}
bool HttpAgentCommandType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DxRemoteAgentPacket_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteAgentPacket_descriptor_;
}
bool DxRemoteAgentPacket_IsValid(int value) {
  switch(value) {
    case 1:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DxRemoteAgentFileTransfer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteAgentFileTransfer_Type_descriptor_;
}
bool DxRemoteAgentFileTransfer_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HttpGetInput::kCommandTypeFieldNumber;
const int HttpGetInput::kUrlFieldNumber;
const int HttpGetInput::kMaxBytesFieldNumber;
const int HttpGetInput::kMaxbytesDelayFieldNumber;
const int HttpGetInput::kUseMediaPlayerFieldNumber;
const int HttpGetInput::kHeadersFieldNumber;
const int HttpGetInput::kFileSaveResponseFieldNumber;
const int HttpGetInput::kPayloadFieldNumber;
const int HttpGetInput::kFileFieldNumber;
#endif  // !_MSC_VER

HttpGetInput::HttpGetInput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HttpGetInput::InitAsDefaultInstance() {
}

HttpGetInput::HttpGetInput(const HttpGetInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HttpGetInput::SharedCtor() {
  _cached_size_ = 0;
  command_type_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_bytes_ = 0u;
  maxbytes_delay_ = GOOGLE_ULONGLONG(0);
  use_media_player_ = false;
  file_save_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpGetInput::~HttpGetInput() {
  SharedDtor();
}

void HttpGetInput::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (file_save_response_ != &::google::protobuf::internal::kEmptyString) {
    delete file_save_response_;
  }
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (file_ != &::google::protobuf::internal::kEmptyString) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void HttpGetInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpGetInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpGetInput_descriptor_;
}

const HttpGetInput& HttpGetInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

HttpGetInput* HttpGetInput::default_instance_ = NULL;

HttpGetInput* HttpGetInput::New() const {
  return new HttpGetInput;
}

void HttpGetInput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_type_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    max_bytes_ = 0u;
    maxbytes_delay_ = GOOGLE_ULONGLONG(0);
    use_media_player_ = false;
    if (has_file_save_response()) {
      if (file_save_response_ != &::google::protobuf::internal::kEmptyString) {
        file_save_response_->clear();
      }
    }
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::kEmptyString) {
        file_->clear();
      }
    }
  }
  headers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpGetInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .igware.dxshell.HttpAgentCommandType command_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (igware::dxshell::HttpAgentCommandType_IsValid(value)) {
            set_command_type(static_cast< igware::dxshell::HttpAgentCommandType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }
      
      // required string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_bytes;
        break;
      }
      
      // optional uint32 max_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_bytes_)));
          set_has_max_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxbytes_delay;
        break;
      }
      
      // optional uint64 maxbytes_delay = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxbytes_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxbytes_delay_)));
          set_has_maxbytes_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_media_player;
        break;
      }
      
      // optional bool use_media_player = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_media_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_media_player_)));
          set_has_use_media_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headers;
        break;
      }
      
      // repeated string headers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_headers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->headers(0).data(), this->headers(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_headers;
        if (input->ExpectTag(58)) goto parse_file_save_response;
        break;
      }
      
      // optional string file_save_response = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_save_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_save_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_save_response().data(), this->file_save_response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_payload;
        break;
      }
      
      // optional bytes payload = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_file;
        break;
      }
      
      // optional string file = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpGetInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .igware.dxshell.HttpAgentCommandType command_type = 1;
  if (has_command_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command_type(), output);
  }
  
  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }
  
  // optional uint32 max_bytes = 3;
  if (has_max_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_bytes(), output);
  }
  
  // optional uint64 maxbytes_delay = 4 [default = 0];
  if (has_maxbytes_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxbytes_delay(), output);
  }
  
  // optional bool use_media_player = 5 [default = false];
  if (has_use_media_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_media_player(), output);
  }
  
  // repeated string headers = 6;
  for (int i = 0; i < this->headers_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->headers(i).data(), this->headers(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->headers(i), output);
  }
  
  // optional string file_save_response = 7 [default = ""];
  if (has_file_save_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_save_response().data(), this->file_save_response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->file_save_response(), output);
  }
  
  // optional bytes payload = 8 [default = ""];
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->payload(), output);
  }
  
  // optional string file = 9 [default = ""];
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpGetInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .igware.dxshell.HttpAgentCommandType command_type = 1;
  if (has_command_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command_type(), target);
  }
  
  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }
  
  // optional uint32 max_bytes = 3;
  if (has_max_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_bytes(), target);
  }
  
  // optional uint64 maxbytes_delay = 4 [default = 0];
  if (has_maxbytes_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxbytes_delay(), target);
  }
  
  // optional bool use_media_player = 5 [default = false];
  if (has_use_media_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_media_player(), target);
  }
  
  // repeated string headers = 6;
  for (int i = 0; i < this->headers_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->headers(i).data(), this->headers(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->headers(i), target);
  }
  
  // optional string file_save_response = 7 [default = ""];
  if (has_file_save_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_save_response().data(), this->file_save_response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->file_save_response(), target);
  }
  
  // optional bytes payload = 8 [default = ""];
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->payload(), target);
  }
  
  // optional string file = 9 [default = ""];
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpGetInput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .igware.dxshell.HttpAgentCommandType command_type = 1;
    if (has_command_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command_type());
    }
    
    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional uint32 max_bytes = 3;
    if (has_max_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_bytes());
    }
    
    // optional uint64 maxbytes_delay = 4 [default = 0];
    if (has_maxbytes_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxbytes_delay());
    }
    
    // optional bool use_media_player = 5 [default = false];
    if (has_use_media_player()) {
      total_size += 1 + 1;
    }
    
    // optional string file_save_response = 7 [default = ""];
    if (has_file_save_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_save_response());
    }
    
    // optional bytes payload = 8 [default = ""];
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string file = 9 [default = ""];
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }
    
  }
  // repeated string headers = 6;
  total_size += 1 * this->headers_size();
  for (int i = 0; i < this->headers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->headers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpGetInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpGetInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpGetInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpGetInput::MergeFrom(const HttpGetInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  headers_.MergeFrom(from.headers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command_type()) {
      set_command_type(from.command_type());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_max_bytes()) {
      set_max_bytes(from.max_bytes());
    }
    if (from.has_maxbytes_delay()) {
      set_maxbytes_delay(from.maxbytes_delay());
    }
    if (from.has_use_media_player()) {
      set_use_media_player(from.use_media_player());
    }
    if (from.has_file_save_response()) {
      set_file_save_response(from.file_save_response());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_file()) {
      set_file(from.file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpGetInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpGetInput::CopyFrom(const HttpGetInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpGetInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HttpGetInput::Swap(HttpGetInput* other) {
  if (other != this) {
    std::swap(command_type_, other->command_type_);
    std::swap(url_, other->url_);
    std::swap(max_bytes_, other->max_bytes_);
    std::swap(maxbytes_delay_, other->maxbytes_delay_);
    std::swap(use_media_player_, other->use_media_player_);
    headers_.Swap(&other->headers_);
    std::swap(file_save_response_, other->file_save_response_);
    std::swap(payload_, other->payload_);
    std::swap(file_, other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpGetInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpGetInput_descriptor_;
  metadata.reflection = HttpGetInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpGetOutput::kErrorCodeFieldNumber;
const int HttpGetOutput::kErrorMsgFieldNumber;
const int HttpGetOutput::kTotalBytesFieldNumber;
const int HttpGetOutput::kResponseFieldNumber;
const int HttpGetOutput::kHttpagentResponseFieldNumber;
const int HttpGetOutput::kHttpagentStatuscodeFieldNumber;
#endif  // !_MSC_VER

HttpGetOutput::HttpGetOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HttpGetOutput::InitAsDefaultInstance() {
}

HttpGetOutput::HttpGetOutput(const HttpGetOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HttpGetOutput::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_bytes_ = GOOGLE_ULONGLONG(0);
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  httpagent_response_ = 0;
  httpagent_statuscode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpGetOutput::~HttpGetOutput() {
  SharedDtor();
}

void HttpGetOutput::SharedDtor() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void HttpGetOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpGetOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpGetOutput_descriptor_;
}

const HttpGetOutput& HttpGetOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

HttpGetOutput* HttpGetOutput::default_instance_ = NULL;

HttpGetOutput* HttpGetOutput::New() const {
  return new HttpGetOutput;
}

void HttpGetOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    total_bytes_ = GOOGLE_ULONGLONG(0);
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
    httpagent_response_ = 0;
    httpagent_statuscode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpGetOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_bytes;
        break;
      }
      
      // required uint64 total_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_bytes_)));
          set_has_total_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_response;
        break;
      }
      
      // optional bytes response = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_httpagent_response;
        break;
      }
      
      // optional int32 httpagent_response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpagent_response:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpagent_response_)));
          set_has_httpagent_response();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_httpagent_statuscode;
        break;
      }
      
      // optional int32 httpagent_statuscode = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpagent_statuscode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpagent_statuscode_)));
          set_has_httpagent_statuscode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpGetOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional string error_msg = 2;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_msg(), output);
  }
  
  // required uint64 total_bytes = 3;
  if (has_total_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_bytes(), output);
  }
  
  // optional bytes response = 4;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->response(), output);
  }
  
  // optional int32 httpagent_response = 5;
  if (has_httpagent_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->httpagent_response(), output);
  }
  
  // optional int32 httpagent_statuscode = 6;
  if (has_httpagent_statuscode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->httpagent_statuscode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpGetOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional string error_msg = 2;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }
  
  // required uint64 total_bytes = 3;
  if (has_total_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total_bytes(), target);
  }
  
  // optional bytes response = 4;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->response(), target);
  }
  
  // optional int32 httpagent_response = 5;
  if (has_httpagent_response()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->httpagent_response(), target);
  }
  
  // optional int32 httpagent_statuscode = 6;
  if (has_httpagent_statuscode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->httpagent_statuscode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpGetOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional string error_msg = 2;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
    // required uint64 total_bytes = 3;
    if (has_total_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_bytes());
    }
    
    // optional bytes response = 4;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }
    
    // optional int32 httpagent_response = 5;
    if (has_httpagent_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->httpagent_response());
    }
    
    // optional int32 httpagent_statuscode = 6;
    if (has_httpagent_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->httpagent_statuscode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpGetOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpGetOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpGetOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpGetOutput::MergeFrom(const HttpGetOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_total_bytes()) {
      set_total_bytes(from.total_bytes());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_httpagent_response()) {
      set_httpagent_response(from.httpagent_response());
    }
    if (from.has_httpagent_statuscode()) {
      set_httpagent_statuscode(from.httpagent_statuscode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpGetOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpGetOutput::CopyFrom(const HttpGetOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpGetOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void HttpGetOutput::Swap(HttpGetOutput* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(total_bytes_, other->total_bytes_);
    std::swap(response_, other->response_);
    std::swap(httpagent_response_, other->httpagent_response_);
    std::swap(httpagent_statuscode_, other->httpagent_statuscode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpGetOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpGetOutput_descriptor_;
  metadata.reflection = HttpGetOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDeviceOutput::kDeviceNameFieldNumber;
const int QueryDeviceOutput::kDeviceClassFieldNumber;
const int QueryDeviceOutput::kOsVersionFieldNumber;
const int QueryDeviceOutput::kIsAcerDeviceFieldNumber;
const int QueryDeviceOutput::kDeviceHasCameraFieldNumber;
#endif  // !_MSC_VER

QueryDeviceOutput::QueryDeviceOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryDeviceOutput::InitAsDefaultInstance() {
}

QueryDeviceOutput::QueryDeviceOutput(const QueryDeviceOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryDeviceOutput::SharedCtor() {
  _cached_size_ = 0;
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_acer_device_ = false;
  device_has_camera_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDeviceOutput::~QueryDeviceOutput() {
  SharedDtor();
}

void QueryDeviceOutput::SharedDtor() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    delete device_class_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (this != default_instance_) {
  }
}

void QueryDeviceOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDeviceOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDeviceOutput_descriptor_;
}

const QueryDeviceOutput& QueryDeviceOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

QueryDeviceOutput* QueryDeviceOutput::default_instance_ = NULL;

QueryDeviceOutput* QueryDeviceOutput::New() const {
  return new QueryDeviceOutput;
}

void QueryDeviceOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    if (has_device_class()) {
      if (device_class_ != &::google::protobuf::internal::kEmptyString) {
        device_class_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    is_acer_device_ = false;
    device_has_camera_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDeviceOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_class;
        break;
      }
      
      // required string device_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_class().data(), this->device_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_os_version;
        break;
      }
      
      // required string os_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_acer_device;
        break;
      }
      
      // required bool is_acer_device = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_acer_device:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_acer_device_)));
          set_has_is_acer_device();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_device_has_camera;
        break;
      }
      
      // required bool device_has_camera = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_has_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &device_has_camera_)));
          set_has_device_has_camera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryDeviceOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string device_name = 1;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device_name(), output);
  }
  
  // required string device_class = 2;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_class(), output);
  }
  
  // required string os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->os_version(), output);
  }
  
  // required bool is_acer_device = 4 [default = false];
  if (has_is_acer_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_acer_device(), output);
  }
  
  // required bool device_has_camera = 5 [default = false];
  if (has_device_has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->device_has_camera(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryDeviceOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string device_name = 1;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_name(), target);
  }
  
  // required string device_class = 2;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_class(), target);
  }
  
  // required string os_version = 3;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->os_version(), target);
  }
  
  // required bool is_acer_device = 4 [default = false];
  if (has_is_acer_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_acer_device(), target);
  }
  
  // required bool device_has_camera = 5 [default = false];
  if (has_device_has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->device_has_camera(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryDeviceOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device_name = 1;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // required string device_class = 2;
    if (has_device_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_class());
    }
    
    // required string os_version = 3;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }
    
    // required bool is_acer_device = 4 [default = false];
    if (has_is_acer_device()) {
      total_size += 1 + 1;
    }
    
    // required bool device_has_camera = 5 [default = false];
    if (has_device_has_camera()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDeviceOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDeviceOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDeviceOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDeviceOutput::MergeFrom(const QueryDeviceOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_device_class()) {
      set_device_class(from.device_class());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_is_acer_device()) {
      set_is_acer_device(from.is_acer_device());
    }
    if (from.has_device_has_camera()) {
      set_device_has_camera(from.device_has_camera());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDeviceOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDeviceOutput::CopyFrom(const QueryDeviceOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDeviceOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void QueryDeviceOutput::Swap(QueryDeviceOutput* other) {
  if (other != this) {
    std::swap(device_name_, other->device_name_);
    std::swap(device_class_, other->device_class_);
    std::swap(os_version_, other->os_version_);
    std::swap(is_acer_device_, other->is_acer_device_);
    std::swap(device_has_camera_, other->device_has_camera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDeviceOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDeviceOutput_descriptor_;
  metadata.reflection = QueryDeviceOutput_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DxRemoteMessage_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_Command_descriptor_;
}
bool DxRemoteMessage_Command_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DxRemoteMessage_Command DxRemoteMessage::COMMAND_NONE;
const DxRemoteMessage_Command DxRemoteMessage::LAUNCH_PROCESS;
const DxRemoteMessage_Command DxRemoteMessage::KILL_PROCESS;
const DxRemoteMessage_Command DxRemoteMessage::GET_CONNECTED_ANDROID_IP;
const DxRemoteMessage_Command DxRemoteMessage::LAUNCH_CONNECTED_ANDROID_DXREMOTEAGENT;
const DxRemoteMessage_Command DxRemoteMessage::CLEAN_CC;
const DxRemoteMessage_Command DxRemoteMessage::VPLFS_OPENDIR;
const DxRemoteMessage_Command DxRemoteMessage::VPLFS_READDIR;
const DxRemoteMessage_Command DxRemoteMessage::VPLFS_CLOSEDIR;
const DxRemoteMessage_Command DxRemoteMessage::VPLFS_STAT;
const DxRemoteMessage_Command DxRemoteMessage::UTIL_RM_DASH_RF;
const DxRemoteMessage_Command DxRemoteMessage::VPLDIR_CREATE;
const DxRemoteMessage_Command DxRemoteMessage::VPLFILE_RENAME;
const DxRemoteMessage_Command DxRemoteMessage::COPYFILE;
const DxRemoteMessage_Command DxRemoteMessage::VPLFILE_DELETE;
const DxRemoteMessage_Command DxRemoteMessage::GET_UPLOAD_PATH;
const DxRemoteMessage_Command DxRemoteMessage::SET_CLEARFI_MODE;
const DxRemoteMessage_Command DxRemoteMessage::STOP_CONNECTED_ANDROID_DXREMOTEAGENT;
const DxRemoteMessage_Command DxRemoteMessage::LAUNCH_CONNECTED_ANDROID_CC_SERVICE;
const DxRemoteMessage_Command DxRemoteMessage::STOP_CONNECTED_ANDROID_CC_SERVICE;
const DxRemoteMessage_Command DxRemoteMessage::PUSH_LOCAL_CONF_TO_SHARED_OBJECT;
const DxRemoteMessage_Command DxRemoteMessage::PULL_SHARED_CONF_TO_LOCAL_OBJECT;
const DxRemoteMessage_Command DxRemoteMessage::GET_CONNECTED_ANDROID_CCD_LOG;
const DxRemoteMessage_Command DxRemoteMessage::CLEAN_CONNECTED_ANDROID_CCD_LOG;
const DxRemoteMessage_Command DxRemoteMessage::GET_CCD_ROOT_PATH;
const DxRemoteMessage_Command DxRemoteMessage::GET_ALIAS_PATH;
const DxRemoteMessage_Command DxRemoteMessage::READ_LIBRARY;
const DxRemoteMessage_Command DxRemoteMessage::CHECK_CONNECTED_ANDROID_NET_STATUS;
const DxRemoteMessage_Command DxRemoteMessage::RESTART_CONNECTED_ANDROID_DXREMOTEAGENT;
const DxRemoteMessage_Command DxRemoteMessage::SET_PERMISSION;
const DxRemoteMessage_Command DxRemoteMessage::VPLFILE_TOUCH;
const DxRemoteMessage_Command DxRemoteMessage::Command_MIN;
const DxRemoteMessage_Command DxRemoteMessage::Command_MAX;
const int DxRemoteMessage::Command_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DxRemoteMessage_ArgumentName_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_ArgumentName_descriptor_;
}
bool DxRemoteMessage_ArgumentName_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DxRemoteMessage_ArgumentName DxRemoteMessage::DXARGUMENT_NONE;
const DxRemoteMessage_ArgumentName DxRemoteMessage::DXARGUMENTFILENAME;
const DxRemoteMessage_ArgumentName DxRemoteMessage::DXARGUMENTEXECUTEARG;
const DxRemoteMessage_ArgumentName DxRemoteMessage::DXARGUMENT_IP;
const DxRemoteMessage_ArgumentName DxRemoteMessage::DXARGUMENTDIRNAME;
const DxRemoteMessage_ArgumentName DxRemoteMessage::ArgumentName_MIN;
const DxRemoteMessage_ArgumentName DxRemoteMessage::ArgumentName_MAX;
const int DxRemoteMessage::ArgumentName_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_DxRemote_VPLFS_file_type_t_descriptor_;
}
bool DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage::DxRemote_VPLFS_TYPE_FILE;
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage::DxRemote_VPLFS_TYPE_DIR;
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage::DxRemote_VPLFS_TYPE_OTHER;
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage::DxRemote_VPLFS_file_type_t_MIN;
const DxRemoteMessage_DxRemote_VPLFS_file_type_t DxRemoteMessage::DxRemote_VPLFS_file_type_t_MAX;
const int DxRemoteMessage::DxRemote_VPLFS_file_type_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DxRemoteMessage_DxRemoteArgument::kNameFieldNumber;
const int DxRemoteMessage_DxRemoteArgument::kValueFieldNumber;
#endif  // !_MSC_VER

DxRemoteMessage_DxRemoteArgument::DxRemoteMessage_DxRemoteArgument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMessage_DxRemoteArgument::InitAsDefaultInstance() {
}

DxRemoteMessage_DxRemoteArgument::DxRemoteMessage_DxRemoteArgument(const DxRemoteMessage_DxRemoteArgument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemoteArgument::SharedCtor() {
  _cached_size_ = 0;
  name_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMessage_DxRemoteArgument::~DxRemoteMessage_DxRemoteArgument() {
  SharedDtor();
}

void DxRemoteMessage_DxRemoteArgument::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteMessage_DxRemoteArgument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemoteArgument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_DxRemoteArgument_descriptor_;
}

const DxRemoteMessage_DxRemoteArgument& DxRemoteMessage_DxRemoteArgument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMessage_DxRemoteArgument* DxRemoteMessage_DxRemoteArgument::default_instance_ = NULL;

DxRemoteMessage_DxRemoteArgument* DxRemoteMessage_DxRemoteArgument::New() const {
  return new DxRemoteMessage_DxRemoteArgument;
}

void DxRemoteMessage_DxRemoteArgument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    name_ = 0;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMessage_DxRemoteArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .igware.dxshell.DxRemoteMessage.ArgumentName name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::igware::dxshell::DxRemoteMessage_ArgumentName_IsValid(value)) {
            set_name(static_cast< ::igware::dxshell::DxRemoteMessage_ArgumentName >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMessage_DxRemoteArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .igware.dxshell.DxRemoteMessage.ArgumentName name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMessage_DxRemoteArgument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .igware.dxshell.DxRemoteMessage.ArgumentName name = 1;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMessage_DxRemoteArgument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .igware.dxshell.DxRemoteMessage.ArgumentName name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMessage_DxRemoteArgument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMessage_DxRemoteArgument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMessage_DxRemoteArgument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMessage_DxRemoteArgument::MergeFrom(const DxRemoteMessage_DxRemoteArgument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMessage_DxRemoteArgument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemoteArgument::CopyFrom(const DxRemoteMessage_DxRemoteArgument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMessage_DxRemoteArgument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DxRemoteMessage_DxRemoteArgument::Swap(DxRemoteMessage_DxRemoteArgument* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMessage_DxRemoteArgument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMessage_DxRemoteArgument_descriptor_;
  metadata.reflection = DxRemoteMessage_DxRemoteArgument_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DxRemoteMessage_DxRemote_VPLFS_dir_t::kDirPathFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_dir_t::kAliasFieldNumber;
#endif  // !_MSC_VER

DxRemoteMessage_DxRemote_VPLFS_dir_t::DxRemoteMessage_DxRemote_VPLFS_dir_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::InitAsDefaultInstance() {
}

DxRemoteMessage_DxRemote_VPLFS_dir_t::DxRemoteMessage_DxRemote_VPLFS_dir_t(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::SharedCtor() {
  _cached_size_ = 0;
  dir_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alias_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMessage_DxRemote_VPLFS_dir_t::~DxRemoteMessage_DxRemote_VPLFS_dir_t() {
  SharedDtor();
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::SharedDtor() {
  if (dir_path_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_path_;
  }
  if (alias_ != &::google::protobuf::internal::kEmptyString) {
    delete alias_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_VPLFS_dir_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_DxRemote_VPLFS_dir_t_descriptor_;
}

const DxRemoteMessage_DxRemote_VPLFS_dir_t& DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMessage_DxRemote_VPLFS_dir_t* DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance_ = NULL;

DxRemoteMessage_DxRemote_VPLFS_dir_t* DxRemoteMessage_DxRemote_VPLFS_dir_t::New() const {
  return new DxRemoteMessage_DxRemote_VPLFS_dir_t;
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dir_path()) {
      if (dir_path_ != &::google::protobuf::internal::kEmptyString) {
        dir_path_->clear();
      }
    }
    if (has_alias()) {
      if (alias_ != &::google::protobuf::internal::kEmptyString) {
        alias_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMessage_DxRemote_VPLFS_dir_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dir_path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir_path().data(), this->dir_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alias;
        break;
      }
      
      // required string alias = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dir_path = 1;
  if (has_dir_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir_path().data(), this->dir_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dir_path(), output);
  }
  
  // required string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alias(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMessage_DxRemote_VPLFS_dir_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dir_path = 1;
  if (has_dir_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir_path().data(), this->dir_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dir_path(), target);
  }
  
  // required string alias = 2;
  if (has_alias()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alias(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMessage_DxRemote_VPLFS_dir_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dir_path = 1;
    if (has_dir_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir_path());
    }
    
    // required string alias = 2;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMessage_DxRemote_VPLFS_dir_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMessage_DxRemote_VPLFS_dir_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::MergeFrom(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dir_path()) {
      set_dir_path(from.dir_path());
    }
    if (from.has_alias()) {
      set_alias(from.alias());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::CopyFrom(const DxRemoteMessage_DxRemote_VPLFS_dir_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMessage_DxRemote_VPLFS_dir_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DxRemoteMessage_DxRemote_VPLFS_dir_t::Swap(DxRemoteMessage_DxRemote_VPLFS_dir_t* other) {
  if (other != this) {
    std::swap(dir_path_, other->dir_path_);
    std::swap(alias_, other->alias_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMessage_DxRemote_VPLFS_dir_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMessage_DxRemote_VPLFS_dir_t_descriptor_;
  metadata.reflection = DxRemoteMessage_DxRemote_VPLFS_dir_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DxRemoteMessage_DxRemote_VPLFS_dirent_t::kTypeFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_dirent_t::kFilenameFieldNumber;
#endif  // !_MSC_VER

DxRemoteMessage_DxRemote_VPLFS_dirent_t::DxRemoteMessage_DxRemote_VPLFS_dirent_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::InitAsDefaultInstance() {
}

DxRemoteMessage_DxRemote_VPLFS_dirent_t::DxRemoteMessage_DxRemote_VPLFS_dirent_t(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMessage_DxRemote_VPLFS_dirent_t::~DxRemoteMessage_DxRemote_VPLFS_dirent_t() {
  SharedDtor();
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_VPLFS_dirent_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_DxRemote_VPLFS_dirent_t_descriptor_;
}

const DxRemoteMessage_DxRemote_VPLFS_dirent_t& DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMessage_DxRemote_VPLFS_dirent_t* DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance_ = NULL;

DxRemoteMessage_DxRemote_VPLFS_dirent_t* DxRemoteMessage_DxRemote_VPLFS_dirent_t::New() const {
  return new DxRemoteMessage_DxRemote_VPLFS_dirent_t;
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMessage_DxRemote_VPLFS_dirent_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(value)) {
            set_type(static_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }
      
      // required string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMessage_DxRemote_VPLFS_dirent_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMessage_DxRemote_VPLFS_dirent_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMessage_DxRemote_VPLFS_dirent_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMessage_DxRemote_VPLFS_dirent_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::MergeFrom(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::CopyFrom(const DxRemoteMessage_DxRemote_VPLFS_dirent_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMessage_DxRemote_VPLFS_dirent_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DxRemoteMessage_DxRemote_VPLFS_dirent_t::Swap(DxRemoteMessage_DxRemote_VPLFS_dirent_t* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMessage_DxRemote_VPLFS_dirent_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMessage_DxRemote_VPLFS_dirent_t_descriptor_;
  metadata.reflection = DxRemoteMessage_DxRemote_VPLFS_dirent_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kSizeFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kTypeFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kAtimeFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kMtimeFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kCtimeFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kIsHiddenFieldNumber;
const int DxRemoteMessage_DxRemote_VPLFS_stat_t::kIsSymLinkFieldNumber;
#endif  // !_MSC_VER

DxRemoteMessage_DxRemote_VPLFS_stat_t::DxRemoteMessage_DxRemote_VPLFS_stat_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::InitAsDefaultInstance() {
}

DxRemoteMessage_DxRemote_VPLFS_stat_t::DxRemoteMessage_DxRemote_VPLFS_stat_t(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::SharedCtor() {
  _cached_size_ = 0;
  size_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  atime_ = GOOGLE_LONGLONG(0);
  mtime_ = GOOGLE_LONGLONG(0);
  ctime_ = GOOGLE_LONGLONG(0);
  ishidden_ = 0;
  issymlink_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMessage_DxRemote_VPLFS_stat_t::~DxRemoteMessage_DxRemote_VPLFS_stat_t() {
  SharedDtor();
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_VPLFS_stat_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_DxRemote_VPLFS_stat_t_descriptor_;
}

const DxRemoteMessage_DxRemote_VPLFS_stat_t& DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMessage_DxRemote_VPLFS_stat_t* DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance_ = NULL;

DxRemoteMessage_DxRemote_VPLFS_stat_t* DxRemoteMessage_DxRemote_VPLFS_stat_t::New() const {
  return new DxRemoteMessage_DxRemote_VPLFS_stat_t;
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    atime_ = GOOGLE_LONGLONG(0);
    mtime_ = GOOGLE_LONGLONG(0);
    ctime_ = GOOGLE_LONGLONG(0);
    ishidden_ = 0;
    issymlink_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMessage_DxRemote_VPLFS_stat_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t_IsValid(value)) {
            set_type(static_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_file_type_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_atime;
        break;
      }
      
      // required int64 atime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mtime;
        break;
      }
      
      // required int64 mtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ctime;
        break;
      }
      
      // required int64 ctime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isHidden;
        break;
      }
      
      // required int32 isHidden = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHidden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishidden_)));
          set_has_ishidden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isSymLink;
        break;
      }
      
      // required int32 isSymLink = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSymLink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issymlink_)));
          set_has_issymlink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }
  
  // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required int64 atime = 3;
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->atime(), output);
  }
  
  // required int64 mtime = 4;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mtime(), output);
  }
  
  // required int64 ctime = 5;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ctime(), output);
  }
  
  // required int32 isHidden = 6;
  if (has_ishidden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ishidden(), output);
  }
  
  // required int32 isSymLink = 7;
  if (has_issymlink()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->issymlink(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMessage_DxRemote_VPLFS_stat_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }
  
  // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required int64 atime = 3;
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->atime(), target);
  }
  
  // required int64 mtime = 4;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mtime(), target);
  }
  
  // required int64 ctime = 5;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ctime(), target);
  }
  
  // required int32 isHidden = 6;
  if (has_ishidden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ishidden(), target);
  }
  
  // required int32 isSymLink = 7;
  if (has_issymlink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->issymlink(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMessage_DxRemote_VPLFS_stat_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
    // required .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_file_type_t type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int64 atime = 3;
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->atime());
    }
    
    // required int64 mtime = 4;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mtime());
    }
    
    // required int64 ctime = 5;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }
    
    // required int32 isHidden = 6;
    if (has_ishidden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishidden());
    }
    
    // required int32 isSymLink = 7;
    if (has_issymlink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issymlink());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMessage_DxRemote_VPLFS_stat_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMessage_DxRemote_VPLFS_stat_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::MergeFrom(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_atime()) {
      set_atime(from.atime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_ishidden()) {
      set_ishidden(from.ishidden());
    }
    if (from.has_issymlink()) {
      set_issymlink(from.issymlink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::CopyFrom(const DxRemoteMessage_DxRemote_VPLFS_stat_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMessage_DxRemote_VPLFS_stat_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void DxRemoteMessage_DxRemote_VPLFS_stat_t::Swap(DxRemoteMessage_DxRemote_VPLFS_stat_t* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(type_, other->type_);
    std::swap(atime_, other->atime_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(ishidden_, other->ishidden_);
    std::swap(issymlink_, other->issymlink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMessage_DxRemote_VPLFS_stat_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMessage_DxRemote_VPLFS_stat_t_descriptor_;
  metadata.reflection = DxRemoteMessage_DxRemote_VPLFS_stat_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DxRemoteMessage_DxRemote_LibraryInfo::kTypeFieldNumber;
const int DxRemoteMessage_DxRemote_LibraryInfo::kVirtPathFieldNumber;
const int DxRemoteMessage_DxRemote_LibraryInfo::kRealPathFieldNumber;
#endif  // !_MSC_VER

DxRemoteMessage_DxRemote_LibraryInfo::DxRemoteMessage_DxRemote_LibraryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMessage_DxRemote_LibraryInfo::InitAsDefaultInstance() {
}

DxRemoteMessage_DxRemote_LibraryInfo::DxRemoteMessage_DxRemote_LibraryInfo(const DxRemoteMessage_DxRemote_LibraryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_LibraryInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  virt_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  real_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMessage_DxRemote_LibraryInfo::~DxRemoteMessage_DxRemote_LibraryInfo() {
  SharedDtor();
}

void DxRemoteMessage_DxRemote_LibraryInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (virt_path_ != &::google::protobuf::internal::kEmptyString) {
    delete virt_path_;
  }
  if (real_path_ != &::google::protobuf::internal::kEmptyString) {
    delete real_path_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteMessage_DxRemote_LibraryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMessage_DxRemote_LibraryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_DxRemote_LibraryInfo_descriptor_;
}

const DxRemoteMessage_DxRemote_LibraryInfo& DxRemoteMessage_DxRemote_LibraryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMessage_DxRemote_LibraryInfo* DxRemoteMessage_DxRemote_LibraryInfo::default_instance_ = NULL;

DxRemoteMessage_DxRemote_LibraryInfo* DxRemoteMessage_DxRemote_LibraryInfo::New() const {
  return new DxRemoteMessage_DxRemote_LibraryInfo;
}

void DxRemoteMessage_DxRemote_LibraryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_virt_path()) {
      if (virt_path_ != &::google::protobuf::internal::kEmptyString) {
        virt_path_->clear();
      }
    }
    if (has_real_path()) {
      if (real_path_ != &::google::protobuf::internal::kEmptyString) {
        real_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMessage_DxRemote_LibraryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_virt_path;
        break;
      }
      
      // required string virt_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virt_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virt_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virt_path().data(), this->virt_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_real_path;
        break;
      }
      
      // required string real_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->real_path().data(), this->real_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMessage_DxRemote_LibraryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // required string virt_path = 2;
  if (has_virt_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virt_path().data(), this->virt_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->virt_path(), output);
  }
  
  // required string real_path = 3;
  if (has_real_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_path().data(), this->real_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->real_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMessage_DxRemote_LibraryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // required string virt_path = 2;
  if (has_virt_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virt_path().data(), this->virt_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->virt_path(), target);
  }
  
  // required string real_path = 3;
  if (has_real_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_path().data(), this->real_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->real_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMessage_DxRemote_LibraryInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string virt_path = 2;
    if (has_virt_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virt_path());
    }
    
    // required string real_path = 3;
    if (has_real_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMessage_DxRemote_LibraryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMessage_DxRemote_LibraryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMessage_DxRemote_LibraryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMessage_DxRemote_LibraryInfo::MergeFrom(const DxRemoteMessage_DxRemote_LibraryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_virt_path()) {
      set_virt_path(from.virt_path());
    }
    if (from.has_real_path()) {
      set_real_path(from.real_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMessage_DxRemote_LibraryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMessage_DxRemote_LibraryInfo::CopyFrom(const DxRemoteMessage_DxRemote_LibraryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMessage_DxRemote_LibraryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void DxRemoteMessage_DxRemote_LibraryInfo::Swap(DxRemoteMessage_DxRemote_LibraryInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(virt_path_, other->virt_path_);
    std::swap(real_path_, other->real_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMessage_DxRemote_LibraryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMessage_DxRemote_LibraryInfo_descriptor_;
  metadata.reflection = DxRemoteMessage_DxRemote_LibraryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DxRemoteMessage::kCommandFieldNumber;
const int DxRemoteMessage::kArgumentFieldNumber;
const int DxRemoteMessage::kDirFolderFieldNumber;
const int DxRemoteMessage::kFolderDirentFieldNumber;
const int DxRemoteMessage::kFileStatFieldNumber;
const int DxRemoteMessage::kVplReturnCodeFieldNumber;
const int DxRemoteMessage::kCreateDirModeFieldNumber;
const int DxRemoteMessage::kRenameSourceFieldNumber;
const int DxRemoteMessage::kRenameDestinationFieldNumber;
const int DxRemoteMessage::kLibInfoFieldNumber;
#endif  // !_MSC_VER

DxRemoteMessage::DxRemoteMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMessage::InitAsDefaultInstance() {
  dir_folder_ = const_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t*>(&::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t::default_instance());
  folderdirent_ = const_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t*>(&::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t::default_instance());
  file_stat_ = const_cast< ::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t*>(&::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t::default_instance());
}

DxRemoteMessage::DxRemoteMessage(const DxRemoteMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMessage::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0;
  dir_folder_ = NULL;
  folderdirent_ = NULL;
  file_stat_ = NULL;
  vpl_return_code_ = 0;
  create_dir_mode_ = 0;
  rename_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rename_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMessage::~DxRemoteMessage() {
  SharedDtor();
}

void DxRemoteMessage::SharedDtor() {
  if (rename_source_ != &::google::protobuf::internal::kEmptyString) {
    delete rename_source_;
  }
  if (rename_destination_ != &::google::protobuf::internal::kEmptyString) {
    delete rename_destination_;
  }
  if (this != default_instance_) {
    delete dir_folder_;
    delete folderdirent_;
    delete file_stat_;
  }
}

void DxRemoteMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMessage_descriptor_;
}

const DxRemoteMessage& DxRemoteMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMessage* DxRemoteMessage::default_instance_ = NULL;

DxRemoteMessage* DxRemoteMessage::New() const {
  return new DxRemoteMessage;
}

void DxRemoteMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0;
    if (has_dir_folder()) {
      if (dir_folder_ != NULL) dir_folder_->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t::Clear();
    }
    if (has_folderdirent()) {
      if (folderdirent_ != NULL) folderdirent_->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t::Clear();
    }
    if (has_file_stat()) {
      if (file_stat_ != NULL) file_stat_->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t::Clear();
    }
    vpl_return_code_ = 0;
    create_dir_mode_ = 0;
    if (has_rename_source()) {
      if (rename_source_ != &::google::protobuf::internal::kEmptyString) {
        rename_source_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rename_destination()) {
      if (rename_destination_ != &::google::protobuf::internal::kEmptyString) {
        rename_destination_->clear();
      }
    }
  }
  argument_.Clear();
  lib_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .igware.dxshell.DxRemoteMessage.Command command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::igware::dxshell::DxRemoteMessage_Command_IsValid(value)) {
            set_command(static_cast< ::igware::dxshell::DxRemoteMessage_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argument;
        break;
      }
      
      // repeated .igware.dxshell.DxRemoteMessage.DxRemoteArgument argument = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_argument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_argument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_argument;
        if (input->ExpectTag(26)) goto parse_dir_folder;
        break;
      }
      
      // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t dir_folder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir_folder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir_folder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_folderDirent;
        break;
      }
      
      // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t folderDirent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_folderDirent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_folderdirent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_stat;
        break;
      }
      
      // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t file_stat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vpl_return_code;
        break;
      }
      
      // optional int32 vpl_return_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vpl_return_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vpl_return_code_)));
          set_has_vpl_return_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_dir_mode;
        break;
      }
      
      // optional int32 create_dir_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_dir_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_dir_mode_)));
          set_has_create_dir_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rename_source;
        break;
      }
      
      // optional string rename_source = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rename_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rename_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rename_source().data(), this->rename_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rename_destination;
        break;
      }
      
      // optional string rename_destination = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rename_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rename_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rename_destination().data(), this->rename_destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lib_info;
        break;
      }
      
      // repeated .igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo lib_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lib_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lib_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lib_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .igware.dxshell.DxRemoteMessage.Command command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->command(), output);
  }
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemoteArgument argument = 2;
  for (int i = 0; i < this->argument_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->argument(i), output);
  }
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t dir_folder = 3;
  if (has_dir_folder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dir_folder(), output);
  }
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t folderDirent = 4;
  if (has_folderdirent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->folderdirent(), output);
  }
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t file_stat = 5;
  if (has_file_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->file_stat(), output);
  }
  
  // optional int32 vpl_return_code = 6;
  if (has_vpl_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vpl_return_code(), output);
  }
  
  // optional int32 create_dir_mode = 7;
  if (has_create_dir_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->create_dir_mode(), output);
  }
  
  // optional string rename_source = 8;
  if (has_rename_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rename_source().data(), this->rename_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rename_source(), output);
  }
  
  // optional string rename_destination = 9;
  if (has_rename_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rename_destination().data(), this->rename_destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rename_destination(), output);
  }
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo lib_info = 10;
  for (int i = 0; i < this->lib_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lib_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .igware.dxshell.DxRemoteMessage.Command command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->command(), target);
  }
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemoteArgument argument = 2;
  for (int i = 0; i < this->argument_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->argument(i), target);
  }
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t dir_folder = 3;
  if (has_dir_folder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dir_folder(), target);
  }
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t folderDirent = 4;
  if (has_folderdirent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->folderdirent(), target);
  }
  
  // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t file_stat = 5;
  if (has_file_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->file_stat(), target);
  }
  
  // optional int32 vpl_return_code = 6;
  if (has_vpl_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vpl_return_code(), target);
  }
  
  // optional int32 create_dir_mode = 7;
  if (has_create_dir_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->create_dir_mode(), target);
  }
  
  // optional string rename_source = 8;
  if (has_rename_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rename_source().data(), this->rename_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rename_source(), target);
  }
  
  // optional string rename_destination = 9;
  if (has_rename_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rename_destination().data(), this->rename_destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rename_destination(), target);
  }
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo lib_info = 10;
  for (int i = 0; i < this->lib_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->lib_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .igware.dxshell.DxRemoteMessage.Command command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }
    
    // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dir_t dir_folder = 3;
    if (has_dir_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir_folder());
    }
    
    // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_dirent_t folderDirent = 4;
    if (has_folderdirent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folderdirent());
    }
    
    // optional .igware.dxshell.DxRemoteMessage.DxRemote_VPLFS_stat_t file_stat = 5;
    if (has_file_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_stat());
    }
    
    // optional int32 vpl_return_code = 6;
    if (has_vpl_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vpl_return_code());
    }
    
    // optional int32 create_dir_mode = 7;
    if (has_create_dir_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_dir_mode());
    }
    
    // optional string rename_source = 8;
    if (has_rename_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rename_source());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rename_destination = 9;
    if (has_rename_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rename_destination());
    }
    
  }
  // repeated .igware.dxshell.DxRemoteMessage.DxRemoteArgument argument = 2;
  total_size += 1 * this->argument_size();
  for (int i = 0; i < this->argument_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->argument(i));
  }
  
  // repeated .igware.dxshell.DxRemoteMessage.DxRemote_LibraryInfo lib_info = 10;
  total_size += 1 * this->lib_info_size();
  for (int i = 0; i < this->lib_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lib_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMessage::MergeFrom(const DxRemoteMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  argument_.MergeFrom(from.argument_);
  lib_info_.MergeFrom(from.lib_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_dir_folder()) {
      mutable_dir_folder()->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dir_t::MergeFrom(from.dir_folder());
    }
    if (from.has_folderdirent()) {
      mutable_folderdirent()->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_dirent_t::MergeFrom(from.folderdirent());
    }
    if (from.has_file_stat()) {
      mutable_file_stat()->::igware::dxshell::DxRemoteMessage_DxRemote_VPLFS_stat_t::MergeFrom(from.file_stat());
    }
    if (from.has_vpl_return_code()) {
      set_vpl_return_code(from.vpl_return_code());
    }
    if (from.has_create_dir_mode()) {
      set_create_dir_mode(from.create_dir_mode());
    }
    if (from.has_rename_source()) {
      set_rename_source(from.rename_source());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rename_destination()) {
      set_rename_destination(from.rename_destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMessage::CopyFrom(const DxRemoteMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < argument_size(); i++) {
    if (!this->argument(i).IsInitialized()) return false;
  }
  if (has_dir_folder()) {
    if (!this->dir_folder().IsInitialized()) return false;
  }
  if (has_folderdirent()) {
    if (!this->folderdirent().IsInitialized()) return false;
  }
  if (has_file_stat()) {
    if (!this->file_stat().IsInitialized()) return false;
  }
  for (int i = 0; i < lib_info_size(); i++) {
    if (!this->lib_info(i).IsInitialized()) return false;
  }
  return true;
}

void DxRemoteMessage::Swap(DxRemoteMessage* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    argument_.Swap(&other->argument_);
    std::swap(dir_folder_, other->dir_folder_);
    std::swap(folderdirent_, other->folderdirent_);
    std::swap(file_stat_, other->file_stat_);
    std::swap(vpl_return_code_, other->vpl_return_code_);
    std::swap(create_dir_mode_, other->create_dir_mode_);
    std::swap(rename_source_, other->rename_source_);
    std::swap(rename_destination_, other->rename_destination_);
    lib_info_.Swap(&other->lib_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMessage_descriptor_;
  metadata.reflection = DxRemoteMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DxRemoteMSA_Function_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMSA_Function_descriptor_;
}
bool DxRemoteMSA_Function_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DxRemoteMSA_Function DxRemoteMSA::MSABeginCatalog;
const DxRemoteMSA_Function DxRemoteMSA::MSACommitCatalog;
const DxRemoteMSA_Function DxRemoteMSA::MSAEndCatalog;
const DxRemoteMSA_Function DxRemoteMSA::MSABeginMetadataTransaction;
const DxRemoteMSA_Function DxRemoteMSA::MSAUpdateMetadata;
const DxRemoteMSA_Function DxRemoteMSA::MSADeleteMetadata;
const DxRemoteMSA_Function DxRemoteMSA::MSACommitMetadataTransaction;
const DxRemoteMSA_Function DxRemoteMSA::MSAGetMetadataSyncState;
const DxRemoteMSA_Function DxRemoteMSA::MSADeleteCollection;
const DxRemoteMSA_Function DxRemoteMSA::MSADeleteCatalog;
const DxRemoteMSA_Function DxRemoteMSA::MSAListCollections;
const DxRemoteMSA_Function DxRemoteMSA::MSAGetCollectionDetails;
const DxRemoteMSA_Function DxRemoteMSA::Function_MIN;
const DxRemoteMSA_Function DxRemoteMSA::Function_MAX;
const int DxRemoteMSA::Function_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DxRemoteMSA::kFuncFieldNumber;
const int DxRemoteMSA::kFuncReturnFieldNumber;
const int DxRemoteMSA::kMsaInputFieldNumber;
const int DxRemoteMSA::kMsaOutputFieldNumber;
#endif  // !_MSC_VER

DxRemoteMSA::DxRemoteMSA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteMSA::InitAsDefaultInstance() {
}

DxRemoteMSA::DxRemoteMSA(const DxRemoteMSA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteMSA::SharedCtor() {
  _cached_size_ = 0;
  func_ = 1;
  func_return_ = 0;
  msa_input_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msa_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteMSA::~DxRemoteMSA() {
  SharedDtor();
}

void DxRemoteMSA::SharedDtor() {
  if (msa_input_ != &::google::protobuf::internal::kEmptyString) {
    delete msa_input_;
  }
  if (msa_output_ != &::google::protobuf::internal::kEmptyString) {
    delete msa_output_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteMSA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteMSA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteMSA_descriptor_;
}

const DxRemoteMSA& DxRemoteMSA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteMSA* DxRemoteMSA::default_instance_ = NULL;

DxRemoteMSA* DxRemoteMSA::New() const {
  return new DxRemoteMSA;
}

void DxRemoteMSA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    func_ = 1;
    func_return_ = 0;
    if (has_msa_input()) {
      if (msa_input_ != &::google::protobuf::internal::kEmptyString) {
        msa_input_->clear();
      }
    }
    if (has_msa_output()) {
      if (msa_output_ != &::google::protobuf::internal::kEmptyString) {
        msa_output_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteMSA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .igware.dxshell.DxRemoteMSA.Function func = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::igware::dxshell::DxRemoteMSA_Function_IsValid(value)) {
            set_func(static_cast< ::igware::dxshell::DxRemoteMSA_Function >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_func_return;
        break;
      }
      
      // optional int32 func_return = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func_return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &func_return_)));
          set_has_func_return();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msa_input;
        break;
      }
      
      // optional bytes msa_input = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msa_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msa_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msa_output;
        break;
      }
      
      // optional bytes msa_output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msa_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msa_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteMSA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .igware.dxshell.DxRemoteMSA.Function func = 1;
  if (has_func()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->func(), output);
  }
  
  // optional int32 func_return = 2;
  if (has_func_return()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->func_return(), output);
  }
  
  // optional bytes msa_input = 3;
  if (has_msa_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msa_input(), output);
  }
  
  // optional bytes msa_output = 4;
  if (has_msa_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msa_output(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteMSA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .igware.dxshell.DxRemoteMSA.Function func = 1;
  if (has_func()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->func(), target);
  }
  
  // optional int32 func_return = 2;
  if (has_func_return()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->func_return(), target);
  }
  
  // optional bytes msa_input = 3;
  if (has_msa_input()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msa_input(), target);
  }
  
  // optional bytes msa_output = 4;
  if (has_msa_output()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msa_output(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteMSA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .igware.dxshell.DxRemoteMSA.Function func = 1;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->func());
    }
    
    // optional int32 func_return = 2;
    if (has_func_return()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->func_return());
    }
    
    // optional bytes msa_input = 3;
    if (has_msa_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msa_input());
    }
    
    // optional bytes msa_output = 4;
    if (has_msa_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msa_output());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteMSA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteMSA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteMSA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteMSA::MergeFrom(const DxRemoteMSA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_func()) {
      set_func(from.func());
    }
    if (from.has_func_return()) {
      set_func_return(from.func_return());
    }
    if (from.has_msa_input()) {
      set_msa_input(from.msa_input());
    }
    if (from.has_msa_output()) {
      set_msa_output(from.msa_output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteMSA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteMSA::CopyFrom(const DxRemoteMSA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteMSA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DxRemoteMSA::Swap(DxRemoteMSA* other) {
  if (other != this) {
    std::swap(func_, other->func_);
    std::swap(func_return_, other->func_return_);
    std::swap(msa_input_, other->msa_input_);
    std::swap(msa_output_, other->msa_output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteMSA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteMSA_descriptor_;
  metadata.reflection = DxRemoteMSA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DxRemoteFileTransfer::kTypeFieldNumber;
const int DxRemoteFileTransfer::kVplReturnCodeFieldNumber;
const int DxRemoteFileTransfer::kRawErrorFieldNumber;
const int DxRemoteFileTransfer::kPathOnAgentFieldNumber;
const int DxRemoteFileTransfer::kDataFieldNumber;
const int DxRemoteFileTransfer::kFileSizeFieldNumber;
#endif  // !_MSC_VER

DxRemoteFileTransfer::DxRemoteFileTransfer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteFileTransfer::InitAsDefaultInstance() {
}

DxRemoteFileTransfer::DxRemoteFileTransfer(const DxRemoteFileTransfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteFileTransfer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  vpl_return_code_ = 0;
  raw_error_ = 0;
  path_on_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteFileTransfer::~DxRemoteFileTransfer() {
  SharedDtor();
}

void DxRemoteFileTransfer::SharedDtor() {
  if (path_on_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete path_on_agent_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteFileTransfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteFileTransfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteFileTransfer_descriptor_;
}

const DxRemoteFileTransfer& DxRemoteFileTransfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteFileTransfer* DxRemoteFileTransfer::default_instance_ = NULL;

DxRemoteFileTransfer* DxRemoteFileTransfer::New() const {
  return new DxRemoteFileTransfer;
}

void DxRemoteFileTransfer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    vpl_return_code_ = 0;
    raw_error_ = 0;
    if (has_path_on_agent()) {
      if (path_on_agent_ != &::google::protobuf::internal::kEmptyString) {
        path_on_agent_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    file_size_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteFileTransfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .igware.dxshell.DxRemoteAgentFileTransfer_Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (igware::dxshell::DxRemoteAgentFileTransfer_Type_IsValid(value)) {
            set_type(static_cast< igware::dxshell::DxRemoteAgentFileTransfer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vpl_return_code;
        break;
      }
      
      // required int32 vpl_return_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vpl_return_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vpl_return_code_)));
          set_has_vpl_return_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_raw_error;
        break;
      }
      
      // optional int32 raw_error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raw_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_error_)));
          set_has_raw_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path_on_agent;
        break;
      }
      
      // optional string path_on_agent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_on_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path_on_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path_on_agent().data(), this->path_on_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_size;
        break;
      }
      
      // optional uint64 file_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteFileTransfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .igware.dxshell.DxRemoteAgentFileTransfer_Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required int32 vpl_return_code = 2;
  if (has_vpl_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vpl_return_code(), output);
  }
  
  // optional int32 raw_error = 3;
  if (has_raw_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->raw_error(), output);
  }
  
  // optional string path_on_agent = 4;
  if (has_path_on_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_on_agent().data(), this->path_on_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->path_on_agent(), output);
  }
  
  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }
  
  // optional uint64 file_size = 6;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->file_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteFileTransfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .igware.dxshell.DxRemoteAgentFileTransfer_Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required int32 vpl_return_code = 2;
  if (has_vpl_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vpl_return_code(), target);
  }
  
  // optional int32 raw_error = 3;
  if (has_raw_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->raw_error(), target);
  }
  
  // optional string path_on_agent = 4;
  if (has_path_on_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path_on_agent().data(), this->path_on_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->path_on_agent(), target);
  }
  
  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }
  
  // optional uint64 file_size = 6;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->file_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteFileTransfer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .igware.dxshell.DxRemoteAgentFileTransfer_Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required int32 vpl_return_code = 2;
    if (has_vpl_return_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vpl_return_code());
    }
    
    // optional int32 raw_error = 3;
    if (has_raw_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raw_error());
    }
    
    // optional string path_on_agent = 4;
    if (has_path_on_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path_on_agent());
    }
    
    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional uint64 file_size = 6;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteFileTransfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteFileTransfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteFileTransfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteFileTransfer::MergeFrom(const DxRemoteFileTransfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vpl_return_code()) {
      set_vpl_return_code(from.vpl_return_code());
    }
    if (from.has_raw_error()) {
      set_raw_error(from.raw_error());
    }
    if (from.has_path_on_agent()) {
      set_path_on_agent(from.path_on_agent());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteFileTransfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteFileTransfer::CopyFrom(const DxRemoteFileTransfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteFileTransfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DxRemoteFileTransfer::Swap(DxRemoteFileTransfer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(vpl_return_code_, other->vpl_return_code_);
    std::swap(raw_error_, other->raw_error_);
    std::swap(path_on_agent_, other->path_on_agent_);
    std::swap(data_, other->data_);
    std::swap(file_size_, other->file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteFileTransfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteFileTransfer_descriptor_;
  metadata.reflection = DxRemoteFileTransfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DxRemoteTSTest_TSOpenParms::kUserIdFieldNumber;
const int DxRemoteTSTest_TSOpenParms::kDeviceIdFieldNumber;
const int DxRemoteTSTest_TSOpenParms::kServiceNameFieldNumber;
const int DxRemoteTSTest_TSOpenParms::kCredentialsFieldNumber;
const int DxRemoteTSTest_TSOpenParms::kFlagsFieldNumber;
const int DxRemoteTSTest_TSOpenParms::kTimeoutFieldNumber;
#endif  // !_MSC_VER

DxRemoteTSTest_TSOpenParms::DxRemoteTSTest_TSOpenParms()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteTSTest_TSOpenParms::InitAsDefaultInstance() {
}

DxRemoteTSTest_TSOpenParms::DxRemoteTSTest_TSOpenParms(const DxRemoteTSTest_TSOpenParms& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteTSTest_TSOpenParms::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_id_ = GOOGLE_ULONGLONG(0);
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  credentials_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flags_ = GOOGLE_ULONGLONG(0);
  timeout_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteTSTest_TSOpenParms::~DxRemoteTSTest_TSOpenParms() {
  SharedDtor();
}

void DxRemoteTSTest_TSOpenParms::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (credentials_ != &::google::protobuf::internal::kEmptyString) {
    delete credentials_;
  }
  if (this != default_instance_) {
  }
}

void DxRemoteTSTest_TSOpenParms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteTSTest_TSOpenParms::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteTSTest_TSOpenParms_descriptor_;
}

const DxRemoteTSTest_TSOpenParms& DxRemoteTSTest_TSOpenParms::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteTSTest_TSOpenParms* DxRemoteTSTest_TSOpenParms::default_instance_ = NULL;

DxRemoteTSTest_TSOpenParms* DxRemoteTSTest_TSOpenParms::New() const {
  return new DxRemoteTSTest_TSOpenParms;
}

void DxRemoteTSTest_TSOpenParms::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    device_id_ = GOOGLE_ULONGLONG(0);
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::kEmptyString) {
        service_name_->clear();
      }
    }
    if (has_credentials()) {
      if (credentials_ != &::google::protobuf::internal::kEmptyString) {
        credentials_->clear();
      }
    }
    flags_ = GOOGLE_ULONGLONG(0);
    timeout_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteTSTest_TSOpenParms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_id;
        break;
      }
      
      // optional uint64 device_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &device_id_)));
          set_has_device_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_service_name;
        break;
      }
      
      // optional string service_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_service_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_credentials;
        break;
      }
      
      // optional string credentials = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credentials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_credentials()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->credentials().data(), this->credentials().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flags;
        break;
      }
      
      // optional uint64 flags = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_timeout;
        break;
      }
      
      // optional uint64 timeout = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteTSTest_TSOpenParms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }
  
  // optional uint64 device_id = 2;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->device_id(), output);
  }
  
  // optional string service_name = 3;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->service_name(), output);
  }
  
  // optional string credentials = 4;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->credentials().data(), this->credentials().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->credentials(), output);
  }
  
  // optional uint64 flags = 5;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->flags(), output);
  }
  
  // optional uint64 timeout = 6;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->timeout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteTSTest_TSOpenParms::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }
  
  // optional uint64 device_id = 2;
  if (has_device_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->device_id(), target);
  }
  
  // optional string service_name = 3;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service_name(), target);
  }
  
  // optional string credentials = 4;
  if (has_credentials()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->credentials().data(), this->credentials().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->credentials(), target);
  }
  
  // optional uint64 flags = 5;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->flags(), target);
  }
  
  // optional uint64 timeout = 6;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->timeout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteTSTest_TSOpenParms::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }
    
    // optional uint64 device_id = 2;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->device_id());
    }
    
    // optional string service_name = 3;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service_name());
    }
    
    // optional string credentials = 4;
    if (has_credentials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->credentials());
    }
    
    // optional uint64 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flags());
    }
    
    // optional uint64 timeout = 6;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timeout());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteTSTest_TSOpenParms::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteTSTest_TSOpenParms* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteTSTest_TSOpenParms*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteTSTest_TSOpenParms::MergeFrom(const DxRemoteTSTest_TSOpenParms& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_credentials()) {
      set_credentials(from.credentials());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteTSTest_TSOpenParms::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteTSTest_TSOpenParms::CopyFrom(const DxRemoteTSTest_TSOpenParms& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteTSTest_TSOpenParms::IsInitialized() const {
  
  return true;
}

void DxRemoteTSTest_TSOpenParms::Swap(DxRemoteTSTest_TSOpenParms* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(device_id_, other->device_id_);
    std::swap(service_name_, other->service_name_);
    std::swap(credentials_, other->credentials_);
    std::swap(flags_, other->flags_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteTSTest_TSOpenParms::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteTSTest_TSOpenParms_descriptor_;
  metadata.reflection = DxRemoteTSTest_TSOpenParms_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int DxRemoteTSTest::kReturnValueFieldNumber;
const int DxRemoteTSTest::kErrorMsgFieldNumber;
const int DxRemoteTSTest::kTsOpenParmsFieldNumber;
const int DxRemoteTSTest::kTestIdFieldNumber;
const int DxRemoteTSTest::kLogEnableLevelFieldNumber;
const int DxRemoteTSTest::kXferCntFieldNumber;
const int DxRemoteTSTest::kXferSizeFieldNumber;
const int DxRemoteTSTest::kNumTestIterationsFieldNumber;
const int DxRemoteTSTest::kNumClientsFieldNumber;
const int DxRemoteTSTest::kClientWriteDelayFieldNumber;
const int DxRemoteTSTest::kServerReadDelayFieldNumber;
#endif  // !_MSC_VER

DxRemoteTSTest::DxRemoteTSTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DxRemoteTSTest::InitAsDefaultInstance() {
  ts_open_parms_ = const_cast< ::igware::dxshell::DxRemoteTSTest_TSOpenParms*>(&::igware::dxshell::DxRemoteTSTest_TSOpenParms::default_instance());
}

DxRemoteTSTest::DxRemoteTSTest(const DxRemoteTSTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DxRemoteTSTest::SharedCtor() {
  _cached_size_ = 0;
  return_value_ = 0;
  error_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ts_open_parms_ = NULL;
  test_id_ = 0;
  log_enable_level_ = 0;
  xfer_cnt_ = 0u;
  xfer_size_ = 0u;
  num_test_iterations_ = 0u;
  num_clients_ = 0u;
  client_write_delay_ = 0;
  server_read_delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DxRemoteTSTest::~DxRemoteTSTest() {
  SharedDtor();
}

void DxRemoteTSTest::SharedDtor() {
  if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete error_msg_;
  }
  if (this != default_instance_) {
    delete ts_open_parms_;
  }
}

void DxRemoteTSTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DxRemoteTSTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DxRemoteTSTest_descriptor_;
}

const DxRemoteTSTest& DxRemoteTSTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dx_5fremote_5fagent_2eproto();  return *default_instance_;
}

DxRemoteTSTest* DxRemoteTSTest::default_instance_ = NULL;

DxRemoteTSTest* DxRemoteTSTest::New() const {
  return new DxRemoteTSTest;
}

void DxRemoteTSTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    return_value_ = 0;
    if (has_error_msg()) {
      if (error_msg_ != &::google::protobuf::internal::kEmptyString) {
        error_msg_->clear();
      }
    }
    if (has_ts_open_parms()) {
      if (ts_open_parms_ != NULL) ts_open_parms_->::igware::dxshell::DxRemoteTSTest_TSOpenParms::Clear();
    }
    test_id_ = 0;
    log_enable_level_ = 0;
    xfer_cnt_ = 0u;
    xfer_size_ = 0u;
    num_test_iterations_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    num_clients_ = 0u;
    client_write_delay_ = 0;
    server_read_delay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DxRemoteTSTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 return_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_value_)));
          set_has_return_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_msg;
        break;
      }
      
      // optional string error_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_msg().data(), this->error_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ts_open_parms;
        break;
      }
      
      // optional .igware.dxshell.DxRemoteTSTest.TSOpenParms ts_open_parms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ts_open_parms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ts_open_parms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_test_id;
        break;
      }
      
      // optional int32 test_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_test_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &test_id_)));
          set_has_test_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_log_enable_level;
        break;
      }
      
      // optional int32 log_enable_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_enable_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_enable_level_)));
          set_has_log_enable_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xfer_cnt;
        break;
      }
      
      // optional uint32 xfer_cnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xfer_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xfer_cnt_)));
          set_has_xfer_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xfer_size;
        break;
      }
      
      // optional uint32 xfer_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xfer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xfer_size_)));
          set_has_xfer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num_test_iterations;
        break;
      }
      
      // optional uint32 num_test_iterations = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_test_iterations:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_test_iterations_)));
          set_has_num_test_iterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_num_clients;
        break;
      }
      
      // optional uint32 num_clients = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_clients:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_clients_)));
          set_has_num_clients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_client_write_delay;
        break;
      }
      
      // optional int32 client_write_delay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_write_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_write_delay_)));
          set_has_client_write_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_server_read_delay;
        break;
      }
      
      // optional int32 server_read_delay = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_read_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_read_delay_)));
          set_has_server_read_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DxRemoteTSTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 return_value = 1;
  if (has_return_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->return_value(), output);
  }
  
  // optional string error_msg = 2;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_msg(), output);
  }
  
  // optional .igware.dxshell.DxRemoteTSTest.TSOpenParms ts_open_parms = 3;
  if (has_ts_open_parms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ts_open_parms(), output);
  }
  
  // optional int32 test_id = 4;
  if (has_test_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->test_id(), output);
  }
  
  // optional int32 log_enable_level = 5;
  if (has_log_enable_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->log_enable_level(), output);
  }
  
  // optional uint32 xfer_cnt = 6;
  if (has_xfer_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->xfer_cnt(), output);
  }
  
  // optional uint32 xfer_size = 7;
  if (has_xfer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->xfer_size(), output);
  }
  
  // optional uint32 num_test_iterations = 8;
  if (has_num_test_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_test_iterations(), output);
  }
  
  // optional uint32 num_clients = 9;
  if (has_num_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_clients(), output);
  }
  
  // optional int32 client_write_delay = 10;
  if (has_client_write_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->client_write_delay(), output);
  }
  
  // optional int32 server_read_delay = 11;
  if (has_server_read_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->server_read_delay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DxRemoteTSTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 return_value = 1;
  if (has_return_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->return_value(), target);
  }
  
  // optional string error_msg = 2;
  if (has_error_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_msg().data(), this->error_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }
  
  // optional .igware.dxshell.DxRemoteTSTest.TSOpenParms ts_open_parms = 3;
  if (has_ts_open_parms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ts_open_parms(), target);
  }
  
  // optional int32 test_id = 4;
  if (has_test_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->test_id(), target);
  }
  
  // optional int32 log_enable_level = 5;
  if (has_log_enable_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->log_enable_level(), target);
  }
  
  // optional uint32 xfer_cnt = 6;
  if (has_xfer_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->xfer_cnt(), target);
  }
  
  // optional uint32 xfer_size = 7;
  if (has_xfer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->xfer_size(), target);
  }
  
  // optional uint32 num_test_iterations = 8;
  if (has_num_test_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_test_iterations(), target);
  }
  
  // optional uint32 num_clients = 9;
  if (has_num_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_clients(), target);
  }
  
  // optional int32 client_write_delay = 10;
  if (has_client_write_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->client_write_delay(), target);
  }
  
  // optional int32 server_read_delay = 11;
  if (has_server_read_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->server_read_delay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DxRemoteTSTest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 return_value = 1;
    if (has_return_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_value());
    }
    
    // optional string error_msg = 2;
    if (has_error_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_msg());
    }
    
    // optional .igware.dxshell.DxRemoteTSTest.TSOpenParms ts_open_parms = 3;
    if (has_ts_open_parms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ts_open_parms());
    }
    
    // optional int32 test_id = 4;
    if (has_test_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->test_id());
    }
    
    // optional int32 log_enable_level = 5;
    if (has_log_enable_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_enable_level());
    }
    
    // optional uint32 xfer_cnt = 6;
    if (has_xfer_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xfer_cnt());
    }
    
    // optional uint32 xfer_size = 7;
    if (has_xfer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xfer_size());
    }
    
    // optional uint32 num_test_iterations = 8;
    if (has_num_test_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_test_iterations());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 num_clients = 9;
    if (has_num_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_clients());
    }
    
    // optional int32 client_write_delay = 10;
    if (has_client_write_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_write_delay());
    }
    
    // optional int32 server_read_delay = 11;
    if (has_server_read_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_read_delay());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DxRemoteTSTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DxRemoteTSTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DxRemoteTSTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DxRemoteTSTest::MergeFrom(const DxRemoteTSTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_return_value()) {
      set_return_value(from.return_value());
    }
    if (from.has_error_msg()) {
      set_error_msg(from.error_msg());
    }
    if (from.has_ts_open_parms()) {
      mutable_ts_open_parms()->::igware::dxshell::DxRemoteTSTest_TSOpenParms::MergeFrom(from.ts_open_parms());
    }
    if (from.has_test_id()) {
      set_test_id(from.test_id());
    }
    if (from.has_log_enable_level()) {
      set_log_enable_level(from.log_enable_level());
    }
    if (from.has_xfer_cnt()) {
      set_xfer_cnt(from.xfer_cnt());
    }
    if (from.has_xfer_size()) {
      set_xfer_size(from.xfer_size());
    }
    if (from.has_num_test_iterations()) {
      set_num_test_iterations(from.num_test_iterations());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_clients()) {
      set_num_clients(from.num_clients());
    }
    if (from.has_client_write_delay()) {
      set_client_write_delay(from.client_write_delay());
    }
    if (from.has_server_read_delay()) {
      set_server_read_delay(from.server_read_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DxRemoteTSTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DxRemoteTSTest::CopyFrom(const DxRemoteTSTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DxRemoteTSTest::IsInitialized() const {
  
  return true;
}

void DxRemoteTSTest::Swap(DxRemoteTSTest* other) {
  if (other != this) {
    std::swap(return_value_, other->return_value_);
    std::swap(error_msg_, other->error_msg_);
    std::swap(ts_open_parms_, other->ts_open_parms_);
    std::swap(test_id_, other->test_id_);
    std::swap(log_enable_level_, other->log_enable_level_);
    std::swap(xfer_cnt_, other->xfer_cnt_);
    std::swap(xfer_size_, other->xfer_size_);
    std::swap(num_test_iterations_, other->num_test_iterations_);
    std::swap(num_clients_, other->num_clients_);
    std::swap(client_write_delay_, other->client_write_delay_);
    std::swap(server_read_delay_, other->server_read_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DxRemoteTSTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DxRemoteTSTest_descriptor_;
  metadata.reflection = DxRemoteTSTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dxshell
}  // namespace igware

// @@protoc_insertion_point(global_scope)
