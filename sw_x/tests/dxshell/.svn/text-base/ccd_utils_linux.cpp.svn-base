//
//  Copyright 2011 iGware Inc.
//  All Rights Reserved.
//
//  THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND
//  TRADE SECRETS OF IGWARE INC.
//  USE, DISCLOSURE OR REPRODUCTION IS PROHIBITED WITHOUT
//  THE PRIOR EXPRESS WRITTEN PERMISSION OF IGWARE INC.
//
#include "ccd_utils.hpp"

#include <dirent.h>
#include <fcntl.h>
#include <semaphore.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "gvm_file_utils.h"
#include <iostream>
#include <sstream>
#include <cstdio>
#include <cerrno>
#include <csignal>
#include <string>
#include <vector>
#include <set>
#include <log.h>
#include "dx_common.h"

#define PATH_MAX_LENGTH         1024

static int closeFds()
{
    int fd = -1;
    int rv = 0;
    DIR* directory = NULL;
    struct dirent* entry = NULL;
    char path[PATH_MAX_LENGTH];

    snprintf(path, sizeof(path), "/proc/%d/fd", (int)getpid());

    directory = opendir(path);
    if (directory == NULL) {
        LOG_ERROR("opendir %s failed: %s", path, strerror(errno));
        goto out;
    }

    while ((entry = readdir(directory)) != NULL) {
        if (strncmp(".",  entry->d_name, 2) == 0 ||
	    strncmp("..", entry->d_name, 3) == 0) {
            continue;
        }

        fd = atoi(entry->d_name);
        if (fd > KMSG_FILENO) {
            close(fd);
        }
    }

    closedir(directory);
out:
    directory = NULL;
    entry = NULL;

    return rv;
}


int getDxRootPath(std::string &rootPath)
{
    char *s = getenv("HOME");
    int rv = 0;

    rootPath.assign(s);
    rootPath.append("/dxshell_root");
    rv = Util_CreatePath(rootPath.c_str(), true);
    if (rv != VPL_OK) {
        LOG_ERROR("Fail to create directory %s, rv = %d", rootPath.c_str(), rv);
        goto exit;
    }

exit:
    return rv;
}

int getCcdAppDataPath(std::string &path)
{
    int rv = 0;
    char *s = getenv("HOME");

    path.assign(s);
    path.append("/temp/SyncAgent");

    if (testInstanceNum) {
        std::ostringstream instanceSuffix;
        instanceSuffix << "_" << testInstanceNum;
        path += instanceSuffix.str();
    }

    rv = Util_CreatePath(path.c_str(), true);
    if (rv != VPL_OK) {
        LOG_ERROR("Fail to create directory %s, rv = %d", path.c_str(), rv);
        return -1;
    }

    return 0;
}

static void forkAndExec(const char* const argv[])
{
    pid_t pid = fork();
    if (pid == 0) {
        closeFds();
        int orig_stderr_fd = dup(STDERR_FILENO);
        int nullout = open("/dev/null", O_WRONLY);
        fflush(stdout);
        fflush(stderr);
        if (dup2(nullout, STDOUT_FILENO) == -1) {
            fprintf(stderr, "***\n*** FAILED to replace stdout: %s\n***\n", strerror(errno));
            fflush(stderr);
            exit(127);
        }
        if (dup2(nullout, STDERR_FILENO) == -1) {
            fprintf(stderr, "***\n*** FAILED to replace stderr: %s\n***\n", strerror(errno));
            fflush(stderr);
            exit(127);
        }
        close(nullout);
        execv(argv[0], (char* const*)argv);
        // If we get here, execv failed.
        int tempErr = errno; // Preserve the errno.
        dup2(orig_stderr_fd, STDERR_FILENO); // Restore the real stderr.
        fprintf(stderr, "***\n*** FAILED to execv(\"%s\"): %s\n***\n", argv[0], strerror(tempErr));
        fflush(stderr);
        exit(127);
    }
}

static int startCcdWithPath(const char* ccdPath, const char* titleId)
{
    int rv = 0;
    std::string tmpPath;

    rv = checkRunningCcd();
    if (rv != 0) {
        LOG_ERROR("An active CCD detected. Please kill the CCD first");
        return -1;
    }

    rv = getCcdAppDataPath(tmpPath);
    if (rv != 0) {
        LOG_ERROR("Fail to get ccd app data path: rv %d", rv);
        return rv;
    }

    LOG_ALWAYS("Launching ccd process, appDataPath=\"%s\"", tmpPath.c_str());
    {
        char* valgrindSuppFile = getenv(DX_VALGRIND_SUPP_FILE_ENV);
        if (valgrindSuppFile != NULL) {
            // Construct the argument list.
            std::string suppresionsArg = "--suppressions=";
            suppresionsArg += valgrindSuppFile;
            std::ostringstream logFileArgStream;
            logFileArgStream << "--log-file=valgrind_" << testInstanceNum << ".log";
            std::string logFileArg = logFileArgStream.str();
            const char* argv[] = { "/usr/bin/valgrind", "-v", suppresionsArg.c_str(),
                    "--gen-suppressions=all", "--leak-check=full", "--track-origins=yes",
                    logFileArg.c_str(), ccdPath, tmpPath.c_str(), "", titleId, NULL };
            // To get useful results from valgrind, we need to set CCD_FULL_SHUTDOWN.
            if (setenv("CCD_FULL_SHUTDOWN", "1", 1) != 0) {
                LOG_CRITICAL("***\n*** FAILED to setenv(\"CCD_FULL_SHUTDOWN\"): %s\n***", strerror(errno));
                exit(127);
            }
            forkAndExec(argv);
        } else {
            const char* argv[] = { ccdPath, tmpPath.c_str(), "", titleId, NULL };
            forkAndExec(argv);
        }
    }

    return 0;
}

int startCcd(const char* titleId)
{
    return startCcdWithPath("./ccd", titleId);
}

int startCcdInClientSubdir()
{
    VPLFS_stat_t stat_ccd;
    VPLFS_stat_t stat_ccd_cloudnode;
    LOG_ALWAYS("Checking if client ccd exists in subdir\n");
    if (VPLFS_Stat("./client/ccd", &stat_ccd)) {
        LOG_ERROR("Please make sure client ccd exists in ./client directory. NOT ccd_cloudnode!");
        return -1;
    }
    LOG_ALWAYS("Checking if cloudnode ccd exists in current dir\n");
    if (VPLFS_Stat("./ccd", &stat_ccd_cloudnode)) {
        LOG_ERROR("Please make sure ccd_cloudnode exists in current directory. ccd_cloudnode must be renamed to ccd in this directory.");
        return -1;
    }
    // Assumption is that cloudnode ccd is a different size than non-cloudnode client ccd.
    // Using hash would be ideal, but for the most part, size is always true,
    // and is meant to prevent the case where an engineer copies cloudnode ccd
    // into the client directory, causing more obscure errors.
    if (stat_ccd.size == stat_ccd_cloudnode.size) {
        LOG_ERROR("Please make sure client ccd exists in ./client directory. NOT ccd_cloudnode!");
        return -1;
    }
    return startCcdWithPath("./client/ccd", NULL);
}

int shutdownCcd()
{
    LOG_INFO("start");
    ccd::UpdateSystemStateInput request;
    request.set_do_shutdown(true);
    ccd::UpdateSystemStateOutput response;
    int rv = CCDIUpdateSystemState(request, response);
    if (rv != CCD_OK) {
        LOG_ERROR("CCDIUpdateSystemState failed: %d", rv);
    }
    return (rv == 0) ? 0 : -1;
}
