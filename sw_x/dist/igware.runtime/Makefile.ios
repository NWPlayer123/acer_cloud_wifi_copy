# -*-Makefile-*-
export BUILDER_NAME=ios
export PRODUCT=ios

# makefile included by all sw_x/dist/igware.runtime makefiles
include igware.runtime.common.mk
# makefile included by all sw_x/dist/* makefiles
include $(WORKDIR)/sw_x/dist/Makefile.common

export LOCAL_SAVE_DIR=$(HOME)/tmp

# --- this target should clean the machine before building the product
.PHONY: clean
clean:
	rm -fr $(BUILDROOT)/*/$(PRODUCT)

bump_build_number:
	# get lock
	ssh $(LOCK_USER)@$(LOCK_MASTER) "$(LOCK_SCRIPT) -a get -n build_number.$(BRANCH_NAME) -t exclusive -r $(PRODUCT)"
	# get the latest version of the file
	svn update $(BUILD_NUMBER_FILE)
	# increment the build number
	echo $(shell echo $$(( $(BUILD_NUMBER) + 1 )) ) > $(BUILD_NUMBER_FILE)
	# check the change in
	svn ci -m 'bump $(PRODUCT) build number' $(BUILD_NUMBER_FILE)
	# release lock
	ssh $(LOCK_USER)@$(LOCK_MASTER) "$(LOCK_SCRIPT) -a release -n build_number.$(BRANCH_NAME) -t exclusive -r $(PRODUCT)"

# --- this target should install any tools needed to build the product
.PHONY: build_tools
build_tools: bump_build_number

.PHONY: get_idt_tool
get_idt_tool:
	mkdir -p $(WORKDIR)/sw_i/tools
	scp $(STORE_USER)@$(STORE_HOST):$(FS_PC_INFRA_STORE_PATH)/idt/idt.zip $(WORKDIR)/sw_i/tools
	cd $(WORKDIR)/sw_i/tools && unzip idt.zip

# --- this target should build the product
.PHONY: default
default:
	mkdir -p $(TMPDIR)
	security unlock-keychain -p notsosecret $(HOME)/Library/Keychains/act-mve.keychain
	make -C $(WORKDIR)/sw_x default

# --- this target should archive any build outputs off to a different system

export SDK_TMPDIR = $(LOCAL_SAVE_DIR)/ccdSdk
export SAVE_SDK_TGZ=ccdSdk.$(BUILD_DATE).$(BUILD_VERSION).tar.gz
export SDK_LNK_NAME=ccdSdk.tar.gz
export REMOTE_SAVE_DIR=$(PRODUCT_STORAGE_DIR)/ccdSdk

export BASIC_TESTS_TMPDIR = $(LOCAL_SAVE_DIR)/basicTests
export SAVE_BASIC_TESTS_TGZ=basicTests.$(BUILD_DATE).$(BUILD_VERSION).tar.gz
export BASIC_TESTS_LNK_NAME=basicTests.tar.gz
export REMOTE_BASIC_TESTS_DIR=$(PRODUCT_STORAGE_DIR)/basicTests

.PHONY: dist
dist:
	# Save ccd sdk	
	-rm -rf $(SDK_TMPDIR)
	mkdir -p $(SDK_TMPDIR)/include
	mkdir -p $(SDK_TMPDIR)/lib
	cp -Rf $(BUILDROOT)/release/ios/gvm_core/daemons/ccd/sdk/include/* $(SDK_TMPDIR)/include
	cp -Rf $(BUILDROOT)/release/ios/gvm_core/daemons/ccd/sdk/lib/* $(SDK_TMPDIR)/lib
	cd $(LOCAL_SAVE_DIR) && tar cvzf $(SAVE_SDK_TGZ) ccdSdk
	ssh $(STORE_USER)@$(STORE_HOST) "mkdir -p $(REMOTE_SAVE_DIR)"
	scp $(LOCAL_SAVE_DIR)/$(SAVE_SDK_TGZ) $(STORE_USER)@$(STORE_HOST):$(REMOTE_SAVE_DIR)/$(SAVE_SDK_TGZ)
	ssh $(STORE_USER)@$(STORE_HOST) "cd $(REMOTE_SAVE_DIR) && rm -f $(SDK_LNK_NAME) && ln -s $(SAVE_SDK_TGZ) $(SDK_LNK_NAME)"
	rm -f $(LOCAL_SAVE_DIR)/$(SAVE_SDK_TGZ)

	# Save basic tests (vpl test, ccd test ect)
	-rm -rf $(BASIC_TESTS_TMPDIR)
	mkdir -p $(BASIC_TESTS_TMPDIR)/vpl
	mkdir -p $(BASIC_TESTS_TMPDIR)/ccdSanity
	cp -Rf $(WORKDIR)/sw_x/projects/xcode/PersonalCloud/libvpl/build $(BASIC_TESTS_TMPDIR)/vpl
	cp -Rf $(WORKDIR)/sw_x/projects/xcode/PersonalCloud/ccd/build $(BASIC_TESTS_TMPDIR)/ccdSanity
	cd $(LOCAL_SAVE_DIR) && tar cvzf $(SAVE_BASIC_TESTS_TGZ) basicTests
	ssh $(STORE_USER)@$(STORE_HOST) "mkdir -p $(REMOTE_BASIC_TESTS_DIR)"
	scp $(LOCAL_SAVE_DIR)/$(SAVE_BASIC_TESTS_TGZ) $(STORE_USER)@$(STORE_HOST):$(REMOTE_BASIC_TESTS_DIR)/$(SAVE_BASIC_TESTS_TGZ)
	ssh $(STORE_USER)@$(STORE_HOST) "cd $(REMOTE_BASIC_TESTS_DIR) && rm -f $(BASIC_TESTS_LNK_NAME) && ln -s $(SAVE_BASIC_TESTS_TGZ) $(BASIC_TESTS_LNK_NAME)"
	rm -f $(LOCAL_SAVE_DIR)/$(SAVE_BASIC_TESTS_TGZ)

# --- print helpful info
.PHONY: printenv
printenv:
	env
	pwd

# --- this target should clean the machine before running tests
.PHONY: clean_tests
clean_tests:
	osascript ../../projects/xcode/PersonalCloud/applescripts/CloseXcode.scpt

# --- this target should install anything needed to test the product
# --- assume that the build of the product and test of the product DO NOT occur on the same machine
.PHONY: install_tests
install_tests: get_idt_tool

# --- this target should execute the tests (usually using the testharness)
.PHONY: run_tests
run_tests:
	# since there is currently no pcstore on Taipei
	# don't upload log to pcstore when running on lab13
	@if [ "$(LAB)" == "lab13" ]; then \
	  $(WORKDIR)/sw_x/tools/testharness/bin/testharness.py -c $(WORKDIR)/sw_x/tools/testharness/conf/runs/buildbot_tests.$(PRODUCT).$(LAB).run -o /tmp/testharness/output_$(PRODUCT)/$(BUILD_DATE) -k; \
	else \
	  $(WORKDIR)/sw_x/dist/igware.runtime/make_validated_links.sh -a save -u $(STORE_USER) -n $(STORE_HOST) -d $(PRODUCT_STORAGE_DIR) -s ccdSdk -s basicTests; \
	  $(WORKDIR)/sw_x/tools/testharness/bin/testharness.py -c $(WORKDIR)/sw_x/tools/testharness/conf/runs/buildbot_tests.$(PRODUCT).$(LAB).run -o /tmp/testharness/output_$(PRODUCT)/$(BUILD_DATE) -b $(STORE_USER)@$(STORE_HOST):/$(FS_STORE_TEST_PATH)/$(BRANCH_NAME)/$(BUILD_DATE)_$(PRODUCT)_$(LAB) -k; \
	  $(WORKDIR)/sw_x/dist/igware.runtime/make_validated_links.sh -a link -u $(STORE_USER) -n $(STORE_HOST) -d $(PRODUCT_STORAGE_DIR); \
	fi

.PHONY: run_full_tests
run_full_tests:
	# since there is currently no pcstore on Taipei
	# don't upload log to pcstore when running on lab13
	@if [ "$(LAB)" == "lab13" ]; then \
	  $(WORKDIR)/sw_x/tools/testharness/bin/testharness.py -c $(WORKDIR)/sw_x/tools/testharness/conf/runs/buildbot_tests.$(PRODUCT).full.run -o /tmp/testharness/output_$(PRODUCT)/$(BUILD_DATE) -k; \
	else \
	  $(WORKDIR)/sw_x/dist/igware.runtime/make_validated_links.sh -a save -u $(STORE_USER) -n $(STORE_HOST) -d $(PRODUCT_STORAGE_DIR) -s ccdSdk -s basicTests; \
	  $(WORKDIR)/sw_x/tools/testharness/bin/testharness.py -c $(WORKDIR)/sw_x/tools/testharness/conf/runs/buildbot_tests.$(PRODUCT).full.$(LAB).run -o /tmp/testharness/output_$(PRODUCT)/$(BUILD_DATE) -b $(STORE_USER)@$(STORE_HOST):/$(FS_STORE_TEST_PATH)/$(BRANCH_NAME)/$(BUILD_DATE)_$(PRODUCT)_$(LAB) -k; \
	  $(WORKDIR)/sw_x/dist/igware.runtime/make_validated_links.sh -a link -u $(STORE_USER) -n $(STORE_HOST) -d $(PRODUCT_STORAGE_DIR); \
	fi

# --- this target should report the test results
.PHONY: report_test_results
report_test_results:
	# if the string "TEST RUN STATUS PASS" is not found in the summary output, then it's a fail
	cat /tmp/testharness/output_$(PRODUCT)/$(BUILD_DATE)/testharness_summary.out
	grep "TEST RUN STATUS PASS" /tmp/testharness/output_$(PRODUCT)/$(BUILD_DATE)/testharness_summary.out

# --- this target run once to setup a machine for build and/or test
.PHONY: build_setup
build_setup: install_wget
	@echo !!! This builder currently requires manual setup.
	@echo !!! Please see http://www.ctbg.acer.com/wiki/index.php/Building_sw_x_for_iOS

.PHONY: install_wget
install_wget:
	curl http://$(TOOL_HOST):$(HTTP_PORT)/$(TOOL_PATH)/wget-1.9.1.tar.gz -o /tmp/wget-1.9.1.tar.gz
	cd /tmp && gunzip ./wget-1.9.1.tar.gz
	cd /tmp && tar xvf ./wget-1.9.1.tar
	cd /tmp/wget-1.9.1 && ./configure
	cd /tmp/wget-1.9.1 && make
	cd /tmp/wget-1.9.1 && sudo make install

.PHONY: test_setup
test_setup:
	echo "alias md5sum='md5 -r'" >> ~/.bash_profile
	echo "alias date='/opt/local/bin/gdate'" >> ~/.bash_profile
