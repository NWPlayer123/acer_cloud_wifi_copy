/* test that encrypted secret credential can successfully be decrypted */
/* based on test_decrypt_content.c */

#include <vpl_types.h>
#ifdef WIN32
#include <windows.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#ifndef WIN32
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#endif
#include <escore.h>

#define debugf_main printf

static u8 cred_default[] = {
    0x01, 0x00,                 // version 1
    0x00, 0x00,                 // padding
    0x00, 0x00, 0x00, 0x00,     // pub type RSA4096
    0x00, 0x01, 0x00, 0x01,     // root_kpub_exp          
    // platform common key
    0xa2, 0xc8, 0x80, 0x41, 0xe2, 0x36, 0x73, 0x4b, 0x43, 0x6e, 0x76, 0x4b,
    0xcb, 0x83, 0x0f, 0x61,
    // rsa 4096 cert
    0xe5, 0x05, 0xce, 0xec, 0x5f, 0xf7, 0x61, 0xa7,
    0x8a, 0x38, 0xfc, 0x8c, 0x6e, 0x1e, 0x21, 0x53,
    0x39, 0x8c, 0x3c, 0x44, 0xd0, 0x04, 0xc8, 0x27,
    0xfa, 0xac, 0xbd, 0x06, 0x05, 0xe6, 0x88, 0x98,
    0x76, 0x32, 0xb3, 0x48, 0x7d, 0x96, 0x08, 0x74,
    0xab, 0xe4, 0xff, 0x3b, 0x2d, 0xbd, 0x20, 0x6d,
    0xed, 0xd0, 0x06, 0xd5, 0x03, 0x26, 0xd0, 0x1b,
    0x11, 0xba, 0x80, 0x4f, 0x15, 0x82, 0xb1, 0xd9,
    0x85, 0xc3, 0x97, 0xbd, 0x81, 0x30, 0x72, 0xd2,
    0x0e, 0x16, 0x18, 0x03, 0x0c, 0xc6, 0x75, 0xc3,
    0xf4, 0x7d, 0xb6, 0xf6, 0x91, 0x19, 0x49, 0xf8,
    0xab, 0x06, 0x2c, 0x5d, 0xf5, 0x19, 0xe4, 0x85,
    0x1f, 0x70, 0x94, 0xa6, 0x40, 0x0c, 0x88, 0x1a,
    0x3d, 0xdf, 0x8f, 0x61, 0x56, 0xc8, 0x88, 0xd1,
    0x05, 0x1e, 0xff, 0x5e, 0xda, 0x57, 0xff, 0x6e,
    0x80, 0x1f, 0x28, 0x6a, 0x89, 0x62, 0xad, 0x73,
    0x25, 0xd5, 0xdd, 0x8e, 0x6b, 0x5b, 0x5f, 0x84,
    0x4b, 0xf9, 0x58, 0xfa, 0xff, 0x60, 0xd7, 0x05,
    0xa4, 0x15, 0x22, 0x14, 0x0e, 0xea, 0xe6, 0x74,
    0x60, 0x30, 0x32, 0x75, 0x45, 0xeb, 0xfe, 0x99,
    0x58, 0xf8, 0x5c, 0x41, 0xce, 0xbb, 0xbd, 0xa7,
    0x8d, 0x22, 0x38, 0x61, 0x1b, 0x9d, 0x02, 0x3e,
    0x16, 0xf4, 0x86, 0x80, 0x87, 0xc9, 0xb2, 0xb2,
    0x67, 0xce, 0xbb, 0x71, 0xf5, 0x72, 0xc9, 0x56,
    0x95, 0x47, 0xd8, 0x43, 0xd8, 0x2a, 0x3a, 0x60,
    0x66, 0x7b, 0x3b, 0x2a, 0xd7, 0x65, 0x9c, 0xee,
    0x97, 0x67, 0x9b, 0xe3, 0x8f, 0x40, 0xd3, 0x5d,
    0xeb, 0xca, 0x81, 0x71, 0x9f, 0xbb, 0x93, 0x37,
    0x6b, 0x9f, 0x08, 0xc0, 0x31, 0x00, 0xe9, 0x86,
    0x1b, 0x34, 0x38, 0xc7, 0x65, 0xe2, 0xe6, 0xa5,
    0xe6, 0xea, 0x48, 0x04, 0x40, 0x3a, 0x21, 0xeb,
    0xce, 0xeb, 0x5d, 0x14, 0x73, 0x98, 0xda, 0x32,
    0x10, 0x62, 0x82, 0x1f, 0xab, 0x5b, 0x1a, 0x22,
    0xb8, 0x6e, 0x9f, 0x76, 0x74, 0x30, 0x33, 0x3a,
    0x51, 0x42, 0xe2, 0x9e, 0xf8, 0x26, 0x19, 0x18,
    0x05, 0xd6, 0xc2, 0x70, 0x45, 0x08, 0x8d, 0xdf,
    0xc9, 0x00, 0xa3, 0x48, 0xfb, 0xba, 0x10, 0xcd,
    0xbd, 0xfe, 0x57, 0xa2, 0x97, 0x89, 0x6b, 0x4a,
    0x62, 0xd2, 0xf5, 0xcc, 0x04, 0x95, 0x4f, 0xe8,
    0x01, 0x41, 0x29, 0xe6, 0x02, 0x0e, 0x98, 0x05,
    0x3f, 0x61, 0x8f, 0x19, 0xc2, 0x49, 0x8a, 0x3e,
    0x1e, 0xc6, 0xff, 0xc8, 0x23, 0xc3, 0xbe, 0x43,
    0x4a, 0x36, 0x2a, 0x32, 0xc5, 0x97, 0x9b, 0xfc,
    0x14, 0x30, 0xac, 0x04, 0xfb, 0xd6, 0x23, 0x86,
    0xd3, 0xae, 0xf2, 0xae, 0xef, 0x1f, 0x53, 0x1d,
    0x95, 0x9f, 0x78, 0xf8, 0x9f, 0xc8, 0xb8, 0x90,
    0x79, 0x00, 0x20, 0xb2, 0xa5, 0x73, 0xcb, 0x28,
    0x8d, 0xf6, 0xaa, 0xbd, 0x01, 0x74, 0x5b, 0x83,
    0x49, 0x63, 0xa4, 0x6a, 0x2f, 0xe3, 0x40, 0x82,
    0x7d, 0xa1, 0xd0, 0x62, 0xcd, 0xf1, 0x23, 0xb4,
    0x5b, 0xab, 0x35, 0x15, 0x18, 0xb7, 0x7a, 0x95,
    0xd3, 0x56, 0x67, 0xb9, 0xe9, 0x25, 0xe0, 0x11,
    0xd8, 0x20, 0x74, 0xeb, 0xc5, 0x28, 0xd9, 0x7e,
    0x6e, 0x58, 0x18, 0x52, 0xb8, 0xbe, 0x52, 0xbc,
    0xaf, 0xb5, 0xff, 0xfa, 0xfe, 0xca, 0xf1, 0x1c,
    0x67, 0x41, 0x43, 0xa8, 0x03, 0x59, 0x42, 0x8f,
    0x03, 0x85, 0x66, 0xb6, 0x6b, 0x91, 0x8d, 0x59,
    0xc1, 0xcc, 0x54, 0xa4, 0x3a, 0x9e, 0xb6, 0xbe,
    0x5e, 0xb6, 0x02, 0x90, 0x15, 0x5f, 0xe4, 0xd6,
    0x67, 0x40, 0x41, 0xa3, 0x18, 0x90, 0x1c, 0x34,
    0xcb, 0xbd, 0xb3, 0xb1, 0x1c, 0x28, 0xd4, 0xdd,
    0x94, 0x56, 0x6f, 0x16, 0x44, 0x51, 0x5d, 0x1d,
    0x33, 0x24, 0x67, 0xcf, 0x9d, 0x5e, 0xde, 0x27,
    0x3d, 0xcc, 0xc1, 0xb4, 0xd3, 0xa5, 0x02, 0xe1,
};

#ifdef WIN32
static int _file_load(const char *file, void **data, u32 * len)
{
    HANDLE h, fmo;
    LARGE_INTEGER size;
    void *buf;

    h = CreateFile(file, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
    if (h == INVALID_HANDLE_VALUE) {
        fprintf(stderr, "ERROR: failed to open file %s\n", file);
        return -1;
    }

    // figure out how big the file is.
    if (GetFileSizeEx(h, &size) == 0) {
        fprintf(stderr, "ERROR: failed to get size of file %s\n", file);
        return -1;
    }

    fmo = CreateFileMapping(h, NULL, PAGE_READONLY, size.u.HighPart, size.u.LowPart, NULL);
    if (fmo == NULL) {
        fprintf(stderr, "ERROR: failed to create file mapping for file %s: %d\n", file, GetLastError());
        return -1;
    }

    buf = MapViewOfFile(fmo, FILE_MAP_READ, 0, 0, size.u.LowPart);
    if (buf == NULL) {
        fprintf(stderr, "ERROR: failed to create a file view for file %s: %d\n", file, GetLastError());
        return -1;
    }

    printf("file %s (size=%ld) mapped at %p\n", file,
           size.u.LowPart, buf);

    *data = buf;
    *len = size.u.LowPart;

    return 0;
}
#else
static int _file_load(const char *file, void **data, u32 * len)
{
    struct stat sb;
    int fd;
    void *buf;

    // figure out how big the file is.
    if (stat(file, &sb)) {
        fprintf(stderr, "ERROR: failed to stat file %s\n", file);
        perror("stat");
        return -1;
    }

    fd = open(file, O_RDONLY);
    if (fd < 0) {
        fprintf(stderr, "ERROR: failed to open file %s\n", file);
        perror("open");
        return -1;
    }

    buf = mmap(NULL, sb.st_size, PROT_READ, MAP_SHARED, fd, 0);
    if (buf == MAP_FAILED) {
        fprintf(stderr, "ERROR: failed to map file %s\n", file);
        perror("mmap");
        return -1;
    }

    printf("file %s (size=%lld) mapped at %p\n", file,
        (long long int)sb.st_size, buf);

    *data = buf;
    *len = sb.st_size;

    return 0;
}
#endif

static int
es_init(const char *secret_cred, const char *clear_cred)
{
	void *secret_cred_data = NULL;
	void *clear_cred_data = NULL;
	u32 secret_cred_len = 0;
	u32 clear_cred_len = 0;
        int err;

	if ( _file_load(secret_cred, &secret_cred_data, &secret_cred_len) ) {
		debugf_main("Failed loading secret credential\n");
		return -1;
	}

	if ( _file_load(clear_cred, &clear_cred_data, &clear_cred_len) ) {
		debugf_main("Failed loading clear credential\n");
		return -1;
	}

	// Initialize the ES library
        err = ESCore_Init(cred_default, sizeof(cred_default));
        if (err) {
                debugf_main("ESCore_Init failed with error code %d", err);
                return -1;
        }
	err = ESCore_LoadCredentials(secret_cred_data, secret_cred_len,
                          clear_cred_data, clear_cred_len, ESCORE_INIT_MODE_NORMAL);
        if (err) {
		debugf_main("Failed initializing ESC driver err=%d \n", err);
		return -1;
	}

	return 0;
}

int main(int argc, char *argv[])
{
    char *secret_cred_file = NULL;
    char *clear_cred_file = NULL;
    int err = 0;

    int opt;

    if (argc == 1) {
        printf("Usage: %s -s secret_cred_file -c clear_cred_file\n", argv[0]);
        exit(0);
    }

    while ((opt = getopt(argc, argv, "c:s:")) != -1) {
        switch (opt) {
        case 'c':
            clear_cred_file = optarg;
            break;
        case 's':
            secret_cred_file = optarg;
            break;
        }
    }

    if (secret_cred_file == NULL || clear_cred_file == NULL) {
        fprintf(stderr, "ERROR: missing credential files\n");
        err = 1;
    }

    if (err == 0)
        err = es_init(secret_cred_file, clear_cred_file);

    printf("TC_RESULT=%s ;;; TC_NAME=es_decrypt_secret_cred\n", err ? "FAIL" : "PASS");

    exit(err == 0 ? 0 : 1);
}


